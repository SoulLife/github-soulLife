2.2 StringBuilder

string은 문자열을 포현하는 기본 타입일 뿐이지 문자열을 조작하는데는 적당하지 않다. string타입은 읽기 전용이라 일단 초기화되면 변경하지 못하며 다른 문자열을 가리킬 수만 있다. 어쩌다 한번 정도는 쓸수도 있으므로 string 클래스에 변경메서드가 포함되어 있기는 하지만 반복적으로 여러 번 변경할 때는 매번 재할당되고 새로 대입되는데다 가비지 컬렉터가 이전 문자열을 찾아서 지워야 하므로 효율적이지 못하다.



문자열을 반복적으로 조작할 때는 StringBuilder라는 클래스를 사용한다. 닷넷은 문자열을 표현하는 클래스와 문자열을 조작하는 클래스를 분명히 구분하므로 용도에 맞게 써야한다. MFC의 CString이나 STL의 string에 대응되는 닷넷의 타입은 StringBuilder라고 할수 있으며 string은 그 보다 훨씬 더 고 수준의 클래스이다. StringBuilder 클래스는 여섯 개의 생성자를 가지는데 다음 생성자가 가장 자주 사용된다.



public StringBuilder(string value, int capacity);



초기 문자열과 버퍼의 크기를 인수로 지정한다. 문자열이 버퍼보다 짧더라도 지정한 만큼의 메모리를 미리 확보해 두므로 이후 문자열 변경 시에 재할당을 최소하할수 있다. 초기 용량을 작게 지정하더라도 필요 시 알아서 재할당하기는 하지만 미리 할당해 놓는 것보다는 느릴 것이므로 생성할 때부터 가급적이면 충분한 용량을 지정하는 것이 좋다.



string과 마찬가지로 길이를 나타내는 Length 프로퍼티와 개별 문자를 액세스하는 인덱서가 정의되어 있다. string의 인덱서는 읽기 전용인데 비해 StringBuilder의 인덱서는 읽기와 쓰기가 모두 가능하므로 인덱서로 특정 위치의 문자만 변경할 수도 있다. 이외에 할당된 메모리 용량을 표시하는 Capacity 프로퍼티와 최대 크기를 조사하는 MaxCapacity 프로퍼티가 제공된다. 메서드의 목록은 다음과 같다.



 메서드

 설 명

 Append

 문자나 문자열, 정수 등을 뒤에 덧붙인다.

 AppendFormat

 서식화된 문자열을 뒤에 덧붙인다.

 AppendLine

 문자열을 덧붙이고 개행 코드도 추가한다.

 Insert

 문자열 중간에 문자나 문자열, 정수 등을 삽입한다.

 Remove

 지정한 범위의 문자열을 제거한다.

 Replace

 문자나 문자열을 검색하여 대체한다.

 ToString

 string포맷으로 변환한다.



검색이나 대소문자 변경 같은 메서드는 없고 주로 추가, 제거와 관련된 메서드들이 제공된다. 사용하는 방법은 string의 메서드와 유사하지만 메모리를 미리 할당해 놓고 객체 자체를 조작하기 때문에 훨씬 더 빠르다. 앞 항에서 만들었던 stringManage 예제의 str을 StringBuilder 타입으로 바꾸면 비록 측정할 수는 없지만 훨씬 더 빨라진다. 3장에서 만들었던 알파벳 조립 예제도 StringBuilder로만들면 속도상의 이점이 있다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Reflection;
namespace FirstCon
{
    class Program
    {       
        static void Main()
        {
            StringBuilder str = new StringBuilder("알파벳:", 40);
            for (char c = 'a'; c <= 'z'; c++)
            {
                str.Append(c);
            }
            str[10] = '_';
            Console.WriteLine(str);
        }

    }
   
}



StringBuilder 클래스는 System.Text 네임스페이스에 정의되어 있으므로 이 클래스를 사용하려면 using 선언해야 한다. 생성자에서 "알파벳" 문자열로 초기화하되 용량을 40으로 지정했다. 이 객체가 메모리에 구현된 모양은 다음과 같다.



문자열 자체의 길이보다 훨씬 더 길게 미리 할당해 놓았으므로 이후 새로운 문자가 뒤에 덧붙여져도 메모리를 새로 할당할 필요가 없다. 실행 결과는 StringChange 예제와 동일하지만 매번 재할당하지 않고 할당된 메모리에 기록만 하므로 훨씬 더 빠르다. 만약 40개 이상의 문자를 추가하면 자동으로 재할당되는데 이때도 필요한 용량보다 훨씬 더 여유있게 할당하여 이후 가급적이면 재할당을 최소화하도록 관리한다.



StringBuilder와 string은 둘 다 문자열을 표현한다는 면에서는 동일하지만 사용하는 용도가 다르고 내부 구조도 완전히 다르다. 그래서 두 타입끼리 암시적으로 변환되지 않으며 캐스트 연산자를 사용하여 명시적으로도 변환할 수도 없다. StringBuilder 객체를 string 타입으로 변환하는 유일한 방법은 ToString메서드를 호출하는 것이다.





2.3 서식화

string 클래스의 Format 메서드는 정수, 실수, 문자, 문자열, 논리형 등 각종 변수들을 문자열 사이에 끼워 넣어서 조립한다. 여러 가지 변수값을 하나의 문자열에 조립하여 출력할 필요가 있을 때는 이 만큼 편리한 기능이 없으며 WriteLine 은 서식 조립과 출력까지 한번에 해결해 주기도 한다. 서식 문자열 안에 {0}, {1}, {2} 식으로 순서만 지정해놓으면 대응되는 변수의 타입을 자동으로 판별하여 문자열에 조립해 넣으며 폭이나 정밀도 등의 섬세한 출력 형식을 지정할 수도 있다. 그렇다면 사용자가 정의한 클래스 타입의 객체를 넘기면 어떻게 될까? 다음 코드도 테스트해 보자.



Time now = new Time(12,34,56);

Console.WriteLine("{0}",now);



실행해 보면 now 객체의 타입명인 Time이 출력된다. WriteLine은 now 객체를 object 타입으로 받아 이 객체의 ToString을 호출하며 이 메서드는 기본적으로 객체의 타입명을 출력하도록 되어 있다. object로부터 상속받은 ToString을 재정의하면 타입명 대신 객체의 내용을 출력할 수도 있는데 이 실습은 앞에서 이미 해본적이 있다



그러나 object로부터 상속받은 ToString은 인수를 받지 ㅇ낳기 때문에 항상 똑같은 형태로만 출력할 수 있으며 좀 더 상세한 출력 형식을 지정할 수는 없다. 정수, 실수 같은 기본 타입처럼 폭이나 정밀도 등의 옵션들을 더 지정하고 싶다면 IFormattable 인터페이스를 상속받아 ToString 메서드를 구현해야 한다. 이 메서드는 object로부터 상속받은 것과 이름은 같지만 인수가 더 많아 서식 정보를 받을수 있다.



string ToString(string format, IFormatProvider formatProvider)



첫번쨰 인수 format은 서식에 지정된 출력 형식이다. 예를 들어 실수형은 폭과 정밀도를 지정할때 {0,10:F2}식으로 지정하는데 이떄 F2같은 문자열이 format인수로 전달된다. 순서 값이나 폭은 전달되지 않고 : 뒤쪽의 정보만 전달된다. 출력 형식의 포맷은 일종의 약속이므로 클래스 설계자가 마음대로 정할수 있으며 여러 가지 정보를 일정한 형식을 갖추어 전달할 수도 있다. 받는 쪽에서 이 정보를 해석할 수만 있으면 된다.



두번쨰 인수는 국가별 출력 형식을 지정하는데 소위 로케일(Locale)이라고 하는 것이다. 문화권에 따라 날짜나 화폐 등을 표시하는 방법이 각각 다른데 예를 들자면 우리나라는 연월일 순으로 날짜를 표시하지만 서양에서는 일월연 식으로 표기하며 화폐 액수 사이에 콤마를 삽입할 떄 우리는 매4자리마다 삽입하지만 미국은 매3자리마다 삽입한다. 두번째 인수로 이런 복잡한 형식 정보가 전달되는데 필요할 때만 참고하면 된다.



객체를 서식 조립에 사용하려면 IFormattable 인터페이스를 상속받고 ToString 메서드를 구현하여 사용자가 지정한 출력 형식과 로케일 정보를 참조하여 적절한 문자열을 만들어 리턴하면 된다. 다음 예제는 Time 클래스에 대해 서식 조립 기능을 구현해본 것인데 세 가지 출력 형식을 정의했다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Reflection;
namespace FirstCon
{
    class Time : IFormattable
    {
        public int hour, min, sec;
        public Time(int h, int m, int s) { hour = h; min = m; sec = s; }
        public void OutTime()
        {
            Console.WriteLine("현재 시간은 {0}시 {1}분 {2}초이다.", hour, min, sec);
        }
        public string ToString(string format, IFormatProvider fp)
        {
            switch (format)
            {
                case null:
                case "A":
                    return string.Format("{0}시 {1}분 {2}초",hour,min,sec);
                case "B":
                    return string.Format("{0}:{1}:{2}", hour, min, sec);
                case "C":
                    return string.Format("{0}.{1}.{2}", hour, min, sec);
                default:
                    return "틀린 서식입니다.";
            }
        }

       
    }
    class Program
    {       
        static void Main()
        {
            Time now = new Time(12, 34, 56);
            Console.WriteLine("now = {0:A}입니다.", now);
            Console.WriteLine("now = {0:B}입니다.", now);
            Console.WriteLine("now = {0:C}입니다.", now);
            Console.WriteLine("now = {0,20}입니다.", now);
            Console.WriteLine("now = {0,-20}입니다.", now);
        }

    }
   
}



A형식은 1시 2분 3초 형태로 조립하며 B형식은 요소 사이를 콜론으로 구분하고 C형식은 요소 사이를 점으로 구분한다. 이외에 더 많은 형식을 정의하고 싶다면 D,E,F 식으로 얼마든지 정의할수 있으며 서식문자 다음에 숫자나 일정한 형태의 정보를 덧붙일수도 있다. 예를 들어 A12는 12시간제 A24는 24시간제 등으로 정의하는 것이 가능하다. 서식은 대소문자를 구분하는데 만약 구분을 두지 않으려면 전달된 서식을 대문자로 바꾼후 비교하면 된다.



ToString 메서드는 format 이 지정하는 형식에 따라 시간 문자열을 조립하되 에러 처리도 섬세하게 해야한다. format이 null인경우 디폴트로 A형식을 따르도록 했으며 정의되지 않은 서식이 전달되었을 때는 에러 문자열을 되돌린다. 실수로 잘못된 서식이 전달될 수도 있으므로 이 에러 처리는 생략할 수 없다. Main에서는 Time 클래스가 정의하는 방식대로 다양한 서식을 지정하여 WriteLine을 여러 번 호출해 보았다.



실행 결과 : now = 12시 34분 56초입니다.

now = 12:34:56입니다.

now = 12.34.56입니다.

now =            12시 34분 56초입니다.

now = 12시 34분 56초                  입니다.



똑같은 객체이지만 A,B,C형식에 따라 출력 형식이 다르며 폭이나 정렬도 적용할 수 있다. 순서 값을 객체와 대응 시키는 것과 지정한 폭을 적용하는 것은 Format이나 WriteLine이 알아서 처리하며 객체는 : 이후의 포맷 문자열에 따라 적절한 문자열을 조립하여 넘기기만 하면 된다. 서식은 클래스의 고유한 정보이므로 문서를 통해 이 클래스를 사용하는 사용자에게 전달해야 하며 사용자들은 클래스 설계자가 정의한 서식대로 정확하게 객체를 출력해야 한다.



만약 object로부터 상속받은 ToString과 IFormattable 인터페이스로부터 상속받은 ToString이 동시에 존재하면 어떤 ToString이 호출될까? 이는 시스템이 알아서 결정하는데 가급적 상세한 정보를 넘기는 쪽을 선택할 것이다. 시스템은 now is IFormattable 같은 간단한 연산식으로 이 객체가 서식화 인터페이스를 구현하는 지를 쉽게 조사할 수 있으므로 이 선택을 하는데는 별다른 어려움이 없다.







2.4 정규식

장문의 텍스트에서 원하는 문자열을 검색할 때는 보통 IndexOf같은 메서드로 부분 문자열 검색을 한다. 이런 메서드도 전혀 엉뚱한 위치를 검색하지는 않지만 검색 방법이 너무 단순하기 때문에 결과가 너무 광범위해서 실질적인 도움이 안되는 경우가 많다. 예를 들어 웹 검색 사이트에서 "이미지"라는 문자열로 검색해보면 이미지 파일이나 이미지 편집 툴등이 검색되기도 하지만 "이미 지운 후에..."라든가 "저자:김순자, 이미지 공저"같은 전혀 상관없는 문서가 검색되기도 한다. 정확한 검색 결과를 얻으려면 좀 더 복잡한 조건을 지정할 수 있어야 한다.



정규식(Regular Expression)은 텍스트를 검색하고 조작하기 위한 검색 표현식이다. 주로 텍스트 검색에 사용되지만 검색된 텍스트를 다른 텍스트로 바꿀 수도 있으며 추출, 편집, 삭제는 물론이고 보고서 작성까지도 가능하다. 최초 Unix 운영체제에서 작성되었으며 현재는 대부분의 텍스트 편집기나 워드 프로세서에도 이식되어 있어 사용하는 사람도 많다. 지금 여러 분들이 쓰고있는 비주얼스튜디오의 찾기 대화상자에도 이 기능이 제공된다.



정규식은 grep같은 간단한 유틸리티에서부터 문자열 가공에 주로 사용되는 최신 스크립트 언어나 검색 엔진에까지 두루 활용된다. 여러 개발자들에 의해 오랜 시간을 걸쳐 기능들이 계속 추가되고 개발되었기 떄문에 정규식끼리도 서로 잘 호환되지 않으며 제공하는 기능들이 상이한 경우가 많다.

닷넷이 제공하는 정규식 클래스들은 Perl 5와 호환되며 최신의 고급 기능들을 대부분 제공한다.



정규식은 검색식을 구성하는 문법을 규정하며 그 자체가 하나의 언어이다. 내부에는 복잡한 개념들과 규칙들이 정의되어 있고 활용 방안도 무궁무진해서 익숙해지는데도 상당한 시간이 걸린다. 정규식만 다루는 웬만한 두께의 책도 출판될 정도로 어렵기 때문에 제대로 쓰려면 시간을 할애하여 따로 배우고 연습까지 해야 한다. 여기서는 정규식 자체에 대한 설명은 생략하고 닷넷에서 정규식을 쓰는 방법에 대해서만 논하기로 한다. 정규식 검색은 Regex 클래스의 다음 메서드로 수행한다.



public static MatchCollection Matches(string input, string pattern)



정석 메서드이므로 객체를 생성할 필요 없이 Regex.Matches(...)식으로 호출하면 된다. input인수로 검색 대상 문자열을 지정하고 pattern 인수로 검색할 패턴 문자열을 준다. 세번쨰 인수로 대소문자 구분등의 검색 옵션을 지정할수 있는 버전도 오버로딩되어 있다. juso라는 문자열에서 "서울시"를 찾고 싶으면 Matches(juso,"서울시")를 호출한다. 검색 대상 패턴은 일단은 문자열이지만 특별한 의미를 가지는 메타 문자를 포함할 수 있다.



검색 결과는 Match라는 클래스로 표현되는데 이 객체의 Index나 Length 프로퍼티를 읽으면 검색된 위치와 길이를 조사할 수 있고 Value 프로퍼티를 읽으면 검색된 문자열을 조사할 수 있다. 여러 개의 검색 결과가 한꺼번에 조사될 수도 있으므로 Matches 메서드는 Match의 배열인 MatchCollection 객체를 리턴한다. 다음 예제는 문자열에서 특정 단어를 검색한다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
namespace FirstCon
{
   
    class Program
    {       
        static void Main()
        {
            string str = "간장 공장 공장장은 강공장장이고 된장 공장 공장장은 장공장장이다.";
            MatchCollection find = Regex.Matches(str, "공장");
            foreach (Match m in find)
            {
                Console.Write(m.Index);
                Console.Write(", ");
            }
        }

    }
   
}



str 문자열에는 공장이라는 단어가 여러 번 반복되는데 이 단어를 모두 검색하여 그 위치를 출력해 보았다. 검색 결과는 일종의 배열이므로 foreach문을 사용하면 모든 결과를 차례대로 출력할 수 있다.



실행결과 : 3, 6, 12, 21, 24, 30,



str문자열의 여섯 군데서 공장이라는 문자열이 반복적으로 나타난다. 패턴을 @"\b공장"으로 변경한 후 다시 실행해 보자. \b는 단어 구분자를 의미하는 메타 문자인데 공백이나 개행문자, 콤마 등을 의미한다. 문자열 내에서 역슬래시를 표현하려면 두 번 연거푸 써서 "\\b공장"으로 쓰는 것이 원칙이나 C#은 @문자를 앞에 붙임으로써 확장열 대체를 금지할수 있으므로 @문자로 패턴을 표시하는 것이 편리하다. \b가 패턴의 앞에 있으므로 단어 처음의 공장만 검색된다.



실행 결과 : 3, 6, 21, 24



단어 중간에 공장이 들어 있는 강공장장, 장공장장 등은 검색에서 제외된다. 이번에는 @"\b공장\b"로 수정해 보자. 앞뒤로 단어 경계 조건을 지정했으므로 3, 21위치의 "공장" 두 개만 검색될 것이다. 정규식은 이런 식으로 패턴 내에 메타 문자를 사용하여 검색 대상을 더 정밀하게 지정할 수 있다. 다음 예제는 인명부에서 사람 이름을 찾는다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
namespace FirstCon
{
   
    class Program
    {       
        static void Main()
        {
            string str = "김상형, 김상민, 김철수, 박상형, 김미형, 김철부지형, 김형, 김상형님";
            MatchCollection find = Regex.Matches(str, @"\b김\S+형\b");
            foreach (Match m in find)
            {
                Console.WriteLine(m.Value);               
            }
        }

    }
   
}



@"\b김\S+형\b"이라는 패턴은 성은 김가이고 끝이 형으로 끝나는 사람들을 찾되 중간에 한자이상의 문자가 더 있는 문자열을 찾는다. 양쪽으로 \b를 붙였으므로 다른 단어에 포함된 문자열은 검색되지 않으며 뒤에 쓸데없는 수식어가 있어서도 안된다. \S는 공백이 아닌 임의의 문자를 의미하며  +는 앞 문자가 한번 이상 나올수 있음을 지정하는 수량자이다. 실행 결과는 다음과 같다.



실행 결과 : 김상형

김미형

김철부지형



수량자를 *로 바꾸면 0번 이상 반복될 수 있다는 뜻이므로 중간에 아무 문자도 없는 "김형"도 같이 검색된다. 수량자를 아예 빼버리면 반드시 한 글자만 와야 하므로 "김철부지형"은 검색에서 제외된다. 이외에도 [] 괄호 안에 가능한 문자의 종류나 범위를 지정할 수도 있고 {} 괄호로 일치해야 하는 개수를 지정할 수도있다. 메타 문자의 종류가 굉장히 많아서 아주 복잡한 조건도 얼마든지 지정할수 있다.



정규식은 개발자에게는 물론이고 사용자 입장에서도 아주 유용한 도구이다. 패턴 하나만 잘 작성해도 원하는 문자열을 정확하게 검색할수 있으며 그룹이나 캡처같은 개념을 사용하면 거의 스크립트 수준의 문자열 조작도 가능하다. 시간을 투자해서 배워 놓으면 장래에 더 많은 시간을 절약할수있는 훌륭한 기술이므로 관심을 가지고 배워 보기 바란다.









03 컬렉션



3.1 ArrayList

컬렉션(Collection)이란 변수들의 조직적인집합이며 닷넷은 이런 집합을 저장하고 관리하기 위한 컬렉션 클래스를 제공한다. 변수들을 담는 통에 비유하여 컨테이너라고도 한다. 배열, 배열 리스트, 해시 테이블, 큐, 스택 등이 있는데 모두 System.Collections 네임스페이스에 정의되어 있다. 따라서 이클래스들을 사용하려면 using System.Collections 선언을 해야 한다.



닷넷은 또한 커스텀 컬렉션을 만들수 있도록 컬렉션 관리에 필요한 메서드를 포함하는 인터페이스를 제공한다. 이 인터페이스로부터 상속을 받아 필수 메서드를 구현하면 사용자가 만든 클래스 자체가 컬렉션이 될수도 있다. 닷넷 2.0부터는 좀 더 일반적인 제네릭 컬렉션을 제공하는데 템플릿 기능을 활용하여 임의의 타입에 대한 컬렉션을 만들어 쓸 수 있으므로 훨씬 더 타입에 안전하다는 장점이 있다. 그러나 2.0 이전의 일반 컬렉션도 이미 사용하는 프로젝트가 있으므로 알아 두어야 한다.



가장 기본적인 컬렉션은 System.Array이며 흔히 배열이라고 한다. 배열은 같은 타입의 변수 여러 개를 모은 것이며 언어가 직접 지원하므로 사용하기 간단하고 첨자 연산이 워낙 빠르기 때문에 효율도 좋은 편이다. 그러나 최초 생성할 때 크기를 한번 지정하면 변경할 수 없다는 것이 단점이다. int[] ar = new int[10]으로 생성한 ar은 새로 만들지 않는 한 정수형 변수 10개밖에 저장할 수가 없다. 그래서 최초 생성할 때 필요한 최대 크기를 미리 결정해야 한다. 또한 정수형의 첨자만 쓸 수 있다는 것도 단점이다.



이에 비해 ArrayList는 실행 중에 언제든지 크기를 확장, 축소할 수 있는 동적 배열이다 요소가 추가될 때를 대비해서 항상 어느 정도의 여유분을 미리 할당해 놓으며 부족하면 자동으로 크기를 늘려 재할당한다. 실행중에 신축적으로 크기를 변경할 수 있기 때문에 생성할 떄 미리 크기를 결정하지 않아도 상관없다. 가변 길이 배열을 지원한다는 얘기인데 이런 경우는 사실 굉장히 많다. 예를 들어 주소록을 만든다고 한다면 Human 타입의 배열을 생성할 것이다.



Human[] arJuso = new Human[100];



이렇게 선언하면 arJuso 배열에 최대 100명까지의 신상 정보를 저장할 수 있다. 100명이 작은 수는 아니지만 아는 사람이 굉장히 많은 사용자에게는 부족할 수도 있으므로 항상 충분하다고 할수는 없다. 그렇다면 크기를 1000이나 5000정도로 늘리면 어떻게 될까? 이정도 숫자면 그럭저럭  충분하다고 할수 있겠지만 처음부터 너무 많은메모리를 할당해 버리므로 낭비가 심해질 것이다. 또한 이 주소록으로 회원 관리를 한다면 5000도 결코 넉넉하지는 않을 것이다.



문제를 해결하려면 일단은 크기를 백만 정도로 대폭 키우면 되겠지만 이것도 모든 경우에 충분하다고 장담할수는 없다. 배열의 근본적인 문제는 크기가 작다는 것이 아니라 최초 생성할 때부터 크기가 고정되어 버린다는 것이다. 이럴 때 ArrayList를 사용하면 가변적인 크기를 다룰 수 있는데 ArrayList는 처음에는 작은 크기로 생성했다가 입력량이 많아지면 그때 늘릴 수 있다. 꼭 필요한 만큼만 메모리를 할당할수 있고 부족하면 늘릴수도 있으므로 메모리가 허용하는 한까지 정보를 관리 할수 있는 것이다. ArrayList는 세 개의 생성자를 가진다.



public ArrayList();

public ArrayList(int capacity);

public ArrayList(ICollection c);



디폴트 생성자로 빈 배열을 만들수도 있고 초기 크기를 지정할 수도 있으며 다른 컬렉션의 사본으로 생성할 수도 있다. 초기 크기는 어디까지나 처음 생성될 때의 크기일 뿐이며 얼마든지 늘어날수 있으므로 이값을 얼마로 지정하더라도 기능상의 차이는 전혀 없다. 빈 배열로 만들어도 크기는 얼마든지 늘어날 수 있다. 다만 대용량의 자료를 저장한다면 실행 중에 재할당하는 것보다 생성할 때 미리 재할당해 놓는 것이 성능상 유리하다.



두개의 프로퍼티를 가지는데 Count는 현재 저장되어 있는 요소의 개수이며 Capacity는 할당된 총 용량이다. Capacity는 항상 Count보다는 많아서 어느정도의 여유분을 미리 할당해 놓아 이후의 추가 동작을 대비한다. Count는 읽기 전용이지만 Capacity는 읽을 수도 있고 쓸수도 있다. 실행 중에 Capacity를 수동으로 조정하여 이후 추가될 요소를 위한 메모리를 미리 할당함으로써 재할당을 최소화할수 있다.



인덱서도 정의되어 있으므로 배열처럼[] 연산자로 요소를 읽고 쓸 수 있다. 이때 첨자는 저장된 요소의 개수 범위 내에 있어야 하며 범위를 벗어나면 예외가 발생한다. 즉 인덱서는 이미 추가된 요소를 읽고 쓸수는 있어도 새로운 요소를 추가, 삽입하지는 못한다. 요소를 관리할때는 다음 메서드를 사용한다. 메서드 이름과 인수의 구조가 직관적이라 따로 도움말을 읽지 않아도 될 정도다.



public virtual int Add(object value);

public virtual void Insert(int index, object value);

public virtual void Remove(object obj);

public virtual void RemoveAt(int index);

public virtual void RemoveRange(int index,int count);



배열에 저장되는 요소는 루트 클래스인 object 타입이므로 사실상 닷넷에 존재하는 모든 타입을 요소로 가질수 있는 셈이다. 정수든 문자열이든 객체든 넣기만 하면 모두 다같은 배열에 잘 저장된다. 이렇게 여러 개의 타입이 한 배열에 섞여 있어도 별문제될 것이 없다. 리플렉션 기능에 의해 is as 연산자를 활용하면 각 요소가 무슨 타입인지 실행 중에도 조사할수 있기 때문이다.



Add 메서드는 인수로 전달된 value를 배열 끝에 추가하며 Insert는 지정한 위치 index에 삽입한다. Remove 메서드는 지정한 위치나 지정한 객체 또는 지정한 범위를 삭제한다. 배열의 중간 부분이 삽입, 삭제될 때 뒤쪽의 요소들은 한 칸씩 앞뒤로 자동 이동된다. 또한 추가, 삽입될 때 메모리가 부족하면 자동으로 재할당되므로 메모리 부족을 걱정할 필요는 없다.



이 메서드들은 앞에서 배운 StringBuilder 클래스와 여러 가지 면에서 유사한데 이는 결코 우연이 아니다. 문자열은 문자의 집합이며 StringBuilder 클래스는 요소가 문자로 고정된 ArrayList라고 볼 수 있다. ArrayList뿐만 아니라 이후에 배울 컬렉션들도 유사한 메서드들을 가지고 있는데 자료를 관리하는 방법이 다를 뿐이지 컬렉션이라는 점에서는 동일하기 때문이다. 다음 예제는 ArrayList에 여러 가지 자료를 저장해 본다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
namespace FirstCon
{
   
    class Program
    {       
        static void Main()
        {
            ArrayList ar = new ArrayList(10);
            ar.Add(1);
            ar.Add(2.34);
            ar.Add("string");
            ar.Add(new DateTime(2005, 3, 1));
            ar.Insert(1, 1234);
            foreach (object o in ar)
            {
                Console.WriteLine(o.ToString());
            }
            Console.WriteLine("개수: " + ar.Count);
            Console.WriteLine("용량: " + ar.Capacity);
        }

    }
   
}



초기 크기를 10으로 생성한 후 정수, 실수, 문자열, 객체 따위를 추가해 보고 중간에 삽입해 보기도했다. 이때 크기 10은 사실 별다른 의미를 가지지 않는데 0으로 지정해도 동작은 동일하며 아예 지정하지 않아도 상관없다. 편의상 다섯 개의 요소만 삽입해봣는데 얼마든지 많은 요소를 저장할수 있다. 중간에 다음 코드를 삽입해도 잘 동작한다.



for(int i=0; i<1000; i++)ar.Add(i);



정수 1000개를 더 추가해도 필요하면 크기를 알아서 늘리므로 아무 문제가 없다. 컬렉션 클래스는 모두 Ienumerable 인터페이스를 상속받았으므로 foreach문으로 순회할 수 있다. 각 요소의 ToString 메서드를 호출하여 문자열로 출력해 보고 개수와 용량도 조사해 보았다.



실행 결과 : 1

1234

2.34

string

2005-03-01 오전 12:00:00

개수 : 5

용량 : 10



중간에 삽입된 1234가 1번째 위치에 잘 삽입되어 있다. 다음은 배열을 관리하는 좀 더 복잡한 메서드에 대해 알아보자.



public virtual void Clear()

public virtual void TrimToSize()

public virtual int IndexOf(Object value)

public virtual void Sort()

public virtual void Reverse()

public virtual Object[] ToArray()



Clear는 배열의 모든 요소를 삭제하며 TrimToSize는 여유분으로 할당해 놓은 메모리를 해제하여 크기를 줄인다. 많이 삽입될 것을 예상하여 초기 크기를 1000으로 지정했는데 막상 넣어보니 80개밖에 안된다면 이 메서드를 호출하여 나머지 920개의 메모리를 즉시 회수할수 있다. IndexOf는 배열에서 특정 요소를 검색한다. Sort는 요소들을 특정 기준에 따라 크기순으로 정렬하며 Reverse는 모든 요소의 순서를 반대로 뒤집는다. 다음 예제는 대한민국의 역대 대통령들을 가나다 역순으로 정렬한다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
namespace FirstCon
{
   
    class Program
    {       
        static void Main()
        {
            ArrayList ar = new ArrayList(10);
            ar.Add("이승만");
            ar.Add("박정희");
            ar.Add("최규하");
            ar.Add("전두환");
            ar.Add("노태우");
            ar.Add("김영삼");
            ar.Add("김대중");
            ar.Add("노무현");
            ar.Add("이명박");
            foreach (object o in ar) Console.Write(o + ", ");
            ar.Sort();
            ar.Reverse();
            Console.WriteLine();
            foreach (object o in ar) Console.Write(o + ", ");
        }

    }
   
}



초기 크기 10으로 배열을 생성한 후 문자열들을 추가했는데 이때 요소들은 추가된 순서대로 저장된다. Sort 메서드를 호출하면 가나다순으로 정렬되며 Reverse 메서드를 호출하면 요소의 순서가 반대로 뒤집힌다. Sort 메서드의 다른 버전을 사용하면 단순한 오름차순 정렬뿐만 아니라 훨씬 더 복잡한 정렬 규칙을 지정할 수도있다. 정렬 전과 정렬 후의 결과를 화면에 출력해 보았다.



실행 결과 : 이승만, 박정희, 최규화, 전두환, 노태우, 김영삼, 김대중, 노무현, 이명박

최규하, 전두환, 이승만, 이명박, 박정희, 노태우, 노무현, 김영삼, 김대중



ArrayList 와 Array는 똑같은 배열이지만 내부 구조는 완전히 다르다. 그래서 직접적으로 대입하거나 캐스팅할 수는 없다. ArrayList를 정적인 배열에 복사하려면 ToArray 메서드를 호출해야 한다.









3.2 HashTable

해시 테이블은 키와 값을 한 쌍으로 하여 저장하는 자료 구조이다. 빠른 검색을 위해 주로 해시라는 알고리즘을 사용하기 때문에 HashTable이라는 이름이 붙었는데 다른 언어에서는 맵 또는 사전이라고도 한다. 해시란 자료의 고유한 해시값으로부터 저장할 위치를 선택하는 기법이다. 저장할 때 해시값에 의해 계산된 위치에 저장해 두므로 찾을때도 해시값만 구하면 아무리 용량이 커도 실시간으로 위치를 찾을수 있다. 여기서 해시 알고리즘을 설명하는 것은 적당하지 않으므로 해시에 대해서는 별도의 알고리즘 서적을 참고하기 바란다.



생성자는 무려 18개나 정의되어 있는데 초기 용량, 로드비율, 해시 공급자 등을 지정할 수 있다. 초기 용량은 자료를 저장할 저장소의 크기를 의미하는데 충돌을 최소화하기 위해서는 소수를 선택하는 것이 유리하다. 로드 비율은 테이블에 자료가 어느 정도 채워질 때 용량을 늘릴 것인가를 지정하는 옵션값이다. 로드 비율이 작을수록 여유분을 크게잡기 때문에 메모리를 더많이 소모하지만 검색속도는 더 빨라진다. 즉 이값들로 크기와 속도 중 어느쪽에 더 중점을 둘것인가를 선택할수 있다.



해시의 동작 원리나 저장하고자 하는 자료의 성질, 추가되는 빈도, 총 자료양 등 여러 가지 사항을 고려하여 가장 효율이 좋은 옵션으로 해시 테이블을 구성할 수 있다. 그러나 디폴트 생성자로 생성해도 알아서 무난한 값으로 초기화되며 실행 중에도 요소 개수에 따라서 동적으로 크기가 조정되므로 아주 대용량이 아닌 한은 굳이 그렇게까지 할 필요는 없다. 해시에 자료를 추가, ㅔㅈ거할 때는 다음 메서드를 호출한다.



public virtual void Add(Object key, Object value)

public vritual void Remove(Object key)

public vritual void Clear()



추가할 때는 키와 값의 한쌍을 전달하는데 둘 다 object타입이므로 임의의 자료를 저장할수 있다. 제거할 때는 제거 대상 키만 지정하면된다. 해시의 특정 위치의 값을 삽입하는 Insert 메서드는 없는데 왜냐하면 해시 알고리즘에 의해 삽입 위치가 자동으로 결정되기 때문이다. Count 프로퍼티는 해시 테이블에 저장된 키, 값 쌍의 개수를 조사하며 인덱서도 정의되어 있으므로 키로부터 값을 찾거나 또는 새로운  값을 삽입할 수 있다. 키가 임의의 타입일 수 있으므로 정수가 아닌 첨자를 쓰는 것도 가능하다. 다음 예제는 해시 테이블로 간단한 영한사전을 만든다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
namespace FirstCon
{
   
    class Program
    {       
        static void Main()
        {
            Hashtable ht = new Hashtable();
            ht.Add("boy", "소년");
            ht.Add("girl", "소녀");
            ht["school"] = "학교";
            Console.WriteLine(ht["boy"]);
        }

    }
   
}



3개의 단어만 사전에 추가했는데 한5만개 정도의 단어를 등록해 놓으면 실용적으로도 쓸 수 있는 사전이 될 것이다. 자료를 추가할 때는 Add메서드를 쓸 수도 있고 인덱서를 쓸 수도 있다. 인덱서는 키가 이미 존재하면 값을 변경하며 새로운 키일 때는 삽입한다. 해시 테이블을 만든 후 boy를 키로 하는 값을 찾아 출력해 보았는데 "소년"이라는 문자열이 출력될 것이다.



자료가 세 개밖에 없어 잘 느낄수 없겠지만 해시 테이블은 자료를 구축할 때부터 쉽게 찾을수 있는 위치에 저장하기 때문에 검색속도가 엄청나게 빠르다. 해시값으로부터 저장된 위치를 바로 찾을수 있어 자료양에 상관없이 검색속도가 일정하다. 심지어 수억개의 자료가 저장되어 있다 하더라도 거의 실시간으로 검색된다. 이 속도는 단순 배열에 비해 월등히 빠른 것이며 정렬된 배열과 비교해도 훨씬 더 빠르다.



해시가 이렇게 빠른 이유는 여러 개의 버킷을 할당해 놓고 객체의 해시값으로 버킷 번호를 선택하여 저장하기 때문이다. 이떄 버킷을 선택하는 해시값은 객체의 GetHashCode라는 메서드로 계산하는데 다른 두 객체가 우연히 같은 버킷에 저장되는 충돌이 발생할수도있다. 충돌이 발생했을 때 다른 대체 버킷을 찾는 여러 가지 방법으로 해결할 수는 있지만 가급적이면 충돌이 발생하지 않는것이 좋다.



충돌을 최소화하려면 GetHashCode가 객체의 특성을 잘파악하여 충돌을 최소화할수 있는 버킷을 찾아야 한다. 버킷 충돌이 적을수록 속도가 빨라진다. 또한 이 메서드는 충분히 빨라야 하며 같은 객체에 대해서는 늘 같은 버킷을 찾는 일관성이 있어야 한다. object에 정의된 GetHashCode 메서드는 비교적 무난하게 작성되어 있지만 모든 클래스의 특성에 맞지는 않으므로 클래스별로 재정의할 수있도록 가상으로 선언되어 있다. 다음 예제는 Human 클래스의 GetHashCode 메서드를 재정의한다.



using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;
namespace FirstCon
{
    class Human
    {
        private string name;
        private int age;
        public Human(string aName, int aAge) { name = aName; age = aAge; }
        public override bool Equals(object obj)
        {
            Human other = (Human)obj;
            return (name == other.name && age == other.age);
        }
        public override int GetHashCode()
        {
            return age + name[0];
        }
    }
    class Program
    {       
        static void Main()
        {
            Hashtable ht = new Hashtable();
            Human a = new Human("이순신", 32);
            Human b = new Human("을지문덕", 35);
            Human c = new Human("김유신", 29);
            Human d = new Human("계백", 28);
            ht.Add(a, "과장");
            ht.Add(b, "부장");
            ht.Add(c, "대리");
            ht.Add(d, "대리");
            Console.WriteLine(ht[a]);
        }

    }
   
}



GetHashCode의 임무는 객체의 여러 가지 값을 참고하여 가급적이면 다른 객체와 충돌이 발생하지 않는 고유의 버킷 번호를 찾아 주는 것이다 예를 들어 주민등록 번호같은 고유한 번호로 버킷을 계산하면 웬만해서는 충돌이 발생하지 않을 것이다. 예제라 나이와 이름 첫 자의 문자 코드를 더하는 방식으로 대충 계산했는데 실제 예에서는 훨씬 더 정밀한 계산식을 만들어야 하며 충돌 발생 빈도를 테스트하여 충돌을 최소화할수 있는 식을 찾아야 한다.



객체의 동일성을 비교하는 Equals 메서드를 재정의했다면 GetHashCode 메서드도 재정의해야 한다. 왜냐하면 해시값은 객체의 값이 같다면 선택되는 버킷도 같아야하는 일관성이 있어야 하기 때문이다. A.Equals(B)가 true를 리턴한다면 이때 A와 B의 해시값도 같아야 한다. 같은 객체에 대해 해시값이 틀리게 나오면 저장한 위치와 읽는 위치가 달라져 해시 테이블이 제대로 동작하지 않을 것이다. 이렇게 만들어진 객체는 해시 테이블에 저장할수 없으며 그래서 컴파일러가 경고를 출력하는 것이다.
