4장 : WPF 애플리케이션에서 데이터 관리


4.1 데이터 바인딩

오늘날 생성된 거의 모든 애플리케이션이 데이터 중심이다. 즉 일부 데이터 저장소(데이터베이스, 파일 시스템, 클라우드 등)에서 데이터를 가져와 사용자에게 표시하고, 사용자가 변경하게 허용하고, 업데이트된 데이터를 데이터 저장소로 보낸다. 특정 시점에서 메모리 내에 데이터가 있고 사용자 인터페이스가 동기화돼야 한다. 

이제 코드 묶음을 작성하거나 게으름을 피우는 두 가지 방법이 있다. WPF는 두 번째 방법을 사용해 게으름을 피울 수 있게 해준다. 이는 UI를 데이터와 동기화된 상태로 유지하는 아주 적은양의 코드를 작성한다는 의미다. 이렇게 하면 애플리케이션의 빠른 작성 속도뿐만 아니라 애플리케이션을 유지 보수시 작업이 훨씬 적다. 

데이터 중심의 애플리케이션을 살펴보면 데이터를 표시하는 컨트롤이 있다. 즉 컨트롤의 속성에 변수를 할당할 수 있다. 사용자가 컨트롤과 상호작용해 속성이 변경되고 이벤트를 처리하고 원래 변수에 수정된 데이터를 쓰게 된다. WPF는 해당 모든 코드 작성을 피하고 대신 데이터 바인딩을 사용하는 몇 개의 XAML 문자만 작성하게 해준다. 자동차의 속도를 표시한다고 가정해보자. 다음은 WPF가 속도 표시를 수행하는 방법을 보여준다. 


TextBox			Car c
Text	<----------------> Speed

대상			원본

Text 속성은 데이터 객체의 Speed 속성 값에 실제로 연결돼 Speed 속성이 TextBox 컨트롤의 Text 속성에 초기 할당되고 나면 Text 속성의 모든 변경(예를 들어 일부 값은 사용자가 입력)이 데이터 객체의 Speed 속성에 할당될 것이다. 

해당 모두를 위해 하나의 XAML 라인만 작성하면 된다. 


<TextBox Text="{Binding Speed, ElementName=c}" />

쉽지 않는가? 이미 <TextBox Text="..." /> 구문에 대해서는 알고 있으므로 Text 속성을 Speed 속성에 연결하는 데이터 바인딩 구문만 이해하면 된다. 


실제로 매우 간단하다. Binding 키워드 다음에 연결할 데이터 객체 속성의 이름을 쓰면 데이터 객체의 위치를 지정할 수 있다. 여기서는 ElementName 구문을 사용해 데이터 객체가 명명된 요소임을 나타낸다. 

데이터 바인딩을 정의하는 가장 간단한 방법은 다음과 같다. 

<TextBox Text="{Binding Speed}" />

위 경우 원본 데이터 객체는 현재 데이터 컨텍스트에서 검색된다(4.2 DataContext 절 참고) 위 코드는 코드 생성기에서 일반적으로 사용되기 때문에 다음과 같은 명시적 구문과 동일하다. 

<TextBox Text="{Binding Path=Speed}" />

Path= 구문을 생략할 경우 위의 예와 같이 Path 속성이 처음으로 표시돼야 한다. 

바인딩 구문 내에서 사용할 수 있는 수많은 다른 속성이 있다. 첫 번째 예제에서는 원본 데이터 객체가 x:Name 속성을 가진 또 다른 컨트롤인 상태를 나타내는 ElementName 속성을 사용하고 있다는 것을 알 수 있다. ElementName 속성은 예를 들어 체크박스의 체크 상태에 따라 신속하게 패널을 표시하거나 숨길 때 유용하다. 

자주 접하게 되는 또 다른 속성은 다음과 같이. 원본 데이터 객체가 리소스로 정의돼 있다고 명시하는 속성이다. 

<TextBox Text="{Binding Source={StaticResource someList}, Path=Height}" />


※알아두기
앞의 이상한 예제를 사용하면 someList 컨트롤의 높이가 TextBox 컨트롤의 실제 높이로 표시되고 TextBox 컨트롤에 새 값을 입력하면 someList 컨트롤의 높이가 변경된다. 강력한 구문 아닌가?


데이터 바인딩에 대해 언급할 몇 가지가 더 있으니 함께 살펴보자. 




※ 바인딩 예제

다음 예제를 살펴보자. 

<StackPanel>
	<Slider Maximum="100" Value="10" x:Name="slider" />
	<ProgressBar Value="{Binding Value, ElementName=slider}" />
	<TextBox Text="{Binding Value, ElementName=slider}" />
</StackPanel>

위 예제의 결과는 모든 컨트롤이 연결된 화면이 나타난다. 슬라이더를 움직이면 ProgressBar와 TextBox 가 업데이트돼 새 값이 반영된다. TextBox에 값을 입력하면 다른 컨트롤들이 업데이트 된다. TextBox에 텍스트를 입력하면 포커스(focus)를 잃을 때 입력한 값이 숫자로 변환될 수 없음을 표시하기 위해 테두리가 빨간색으로 변한다. 100보다 큰 값을 입력하면 100으로 다시 설정된다. 

몇 줄의 XAML 만을 사용해 마술처럼 수행된다. 코드 비하인드(WPF나 Windows Form 또는 다른 UI 기술)에서 작성한다면 동일한 동작(문자열을 double로 변환, 오류 처리 및 보고, 세 컨트롤 모두 동기화)을 구현하기 위해 얼마나 많은 C#줄이 필요한지 생각해보자. 몇 줄이 필요한가? 30줄? 또다른 이점은 해당 XAML을 아무 화면에나 복사해 붙여넣으면 여전히 동작한다는 것이고 반면 코드 비하인드를 사용하면 컨트롤 및 C# 코드를 함께 복사해야 할 것이다. 

이제 다른 예제를 살펴보자. 


<Window Background="{Binding Text, ElementName=color}" >
	<TextBox Text="Yellow" x:Name="color" />
</Window>

짐작 가능하듯이 창 배경이 노란색으로 나타나고 TextBox에 유효한 색상 값을 입력할 수 있다. WPF 바인딩 시스템은 Text 속성의 문자열 값을 Brush 인스턴스(Background 속성 형식)로 자동 변환한다. 와우! 이제 데이터중심 애플리케이션을 위해 해당 바인딩과 같은 생산성을 사용해 얼마나 많은 시간을 절약할 수 있는지 잠시 생각해보자. 




※ 바인딩 모드
기본적으로 데이터 바인딩 모드는 바인딩할 컨트롤 속성에 따라 다르다. 사용자 입력을 허용하는 컨트롤의 경우 TwoWay가 될 것이고, 다른 컨트롤의 경우 OneWay가 될 것이다. 가능한 값은 다음과 같다. 

				업데이트시
모드			대상 변경		값 변경
TwoWay			Yes		Yes
OneWay			No		Yes
OneWayToSource		Yes		No
OneTime			No		No


OneWayToSource 및 OneTime은 거의 사용되지 않는다. 

기본 바인딩 옵션이 사용자에게 적합하지 않은 경우 데이터 바인딩 Mode 속성을 사용해 바인딩 옵션을 재정의할수 있다. 

{Binding Path=Speed, Mode=TwoWay}



※ 바인딩 오류
WPF 애플리케이션에서 데이터 바인딩은 매우 간결한 구문 덕분에 개발 및 유지 보수의 실시간 보호기다. 그러나 큰 기능은 큰 책임을 수반한다. 오류를 너무 빨리 지나치는 경우가 있기 때문이다. 

바인딩 오류는 런타임에 처리되지 않은 예외(unhandled exception)로 나타나므로 놓치기 쉽다. 때로는 null이나 잘못된 값이 그냥 무시될 것이고 일반적인 애플리케이션의 요구 사항의 일부일 수 있으므로 무시하는 것이 원하는 것일 수 있다. 그러나 다른 오류로 인해 애플리케이션이 조용하게 오작동될 수 있다. 예를 들어 Path 속성이나 호환되지 않는 유형의 오류가 있다(예로는 int 속성에 바인딩된 객체 값)

기본적으로 언급한 오류를 확인하고 싶다면 다음을 수행해 보자. 

* 애플리케이션을 디버그 모드로 실행한다. 

* 수동으로 화면을 이동한다.

* 비주얼 스튜디오의 디버그 출력 창에서 System.Data Error 로 시작하는 줄을 살펴보자. 

오류 행은 문제 해결에 필요한 바인딩 오류에 대한 모든 정보를 보고한다. 




4.2 DataContext

데이터 중심 애플리케이션의 화면에서 시각적으로 그룹화된 대부분의 컨트롤은 동일한 데이터 객체의 데이터를 사용한다. 바인딩에 대해 작성한 XAML을 단순화하기 위한 방법은 무엇인가?

DRY(반복적인 것을 하지 않는다는 의미)는 좋은 코딩 습관이며, DataContext 가 정확하게 무엇인지에 대한 것이다. 

바인딩(ElementName, Source 등을 사용)에 소스 데이터 객체를 지정하지 않으면 소스가 현재 데이터 컨텍스트로 간주된다. 내부 동작을 설명하기 전에 예제를 살펴보자. 

<StackPanel DataContext="...">
	<TextBox Text="{Binding Name}" />
	<Label Content="{Binding SSN}" />
</StackPanel>

위 예제에서 DataContext="..." 부분은 생략하고 다음과 같이 코드 비하인드에서 할당할 수도 있다. 

this.DataContext= ...;

실제로 모든 컨트롤은 object 유형의 DataContext 속성을 갖는다. 즉 모든 객체 유형을 DataContext에 할당 가능하다. 바인딩 식에 소스에 대한 언급이 없으면 소스는 컨트롤의 DataContext 속성으로 간주된다. 강력한 것은 DataContext 가 할당되지 않으면(null 기본값), 부모 컨트롤의 DataContext가 사용된다는 것이다(DataContext도 누락된 경우 등)


※ DataContext는 XAML 개발자가 충분히 사용하지 못하는 훌륭한 XAML 시간 절약기 중 하나다. 사용법을 익힌다면 좋아하게 될 것이다. 




4.3 변환기

XAML 엔진은 데이터 바인딩 시 객체 유형을 변환하는 훌륭한 작업을 수행한다. 앞 예제에서 문자열을 double 또는 심지어 브러시로 변환했던 것을 기억하는가? 변환 시스템 은 변환기(Converters)를 사용해 확장할 수 있다. 

변환기는 IValueConverter 인터페이스를 상속해 작성하는 단순한 클래스다. 해당 인터페이스를 사용하려면 두 가지 메소드 작성이 필요하다. Convert는 표준 메소드고, ConvertBack은 양방향 데이터바인딩에서만 사용된다. 일단 변환기가 있으면 변환기를 인스턴스화한 다음 데이터 바인딩 표현식에 인스턴스를 참조하면 된다. 

표시될 때 값을 두배로 변환해야 하는 double 값이 있다고 가정해보자. 다음은 수행 방법이다. 먼저 클래스를 생성한다. 


namespace Maths
{
	public class TwiceConverter : IValueConverter
	{
		public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
		{
			return ((int)value) *2;
		}
		// 빈 ConvertBack 메소드가 여기에 들어가게 된다. 
	}
}

그런 다음 해당 클래스를 인스턴스화하고 바인딩 식에서 사용한다. 

<Page xmlns:c="clr-namespace:Maths">
	<Page.Resources>
		<c:TwiceConverter x:Key="twiceConv" />
	</Page.Resources>
	<TextBlock Value="{Binding Speed, Converter={StaticResource twiceConv}} />
</Page>

나중에 페이지나 애플리케이션 수준에서 객체를 공유하는 방법인 리소스(resources)에 대해 알아보겠지만 지금은 변환기 클래스를 인스턴스화하는 방법으로 진행한다. 

색상으로 변환될 double 값이 있다고 가정해보자. 빨간색은 10이상 주황색은 4~10, 녹색은 4이하다 간단하게 변환기를 작성해 보자. 실제로 매번 데이터 바인딩을 사용해 어떻게 구성할 수 있을까?라고 궁금해 하겠지만 답은 변환기일 것이다. 거의 매번 그렇다. 



4.4 목록 컨트롤을 사용하는 컬렉션 표시

한 번에 하나의 속성만 바인딩하는 데이터를 보았지만 종종 사용자가 데이터의 컬렉션을 확인하고 업데이트할 수 있게 해야 한다. 

더 좋은소식이 있다. 데이터 컬렉션 역시 쉽고 단순하다는 것이다. 사실 모든 목록 컨트롤에는 IEnumerable(IEnumerable 인터페이스는 닷넷에서 배열, 스택, 리스트 등 모든 컬렉션에 의해 구현된다.) 로 형식화된 ItemSource 속성이 있다. 해당 속성에 컬렉션을 지정하면 목록 컨트롤에 모든 컬렉션 요소가 표시된다. 정말 간단하다. 

말보다는 실제 살펴보자. 앞에서 선언했던 Car 클래스를 기억하는가? 자동차의 컬렉션을 생성해 보자. 


var cars = new List<Car>();

for(int i=0; i<10; i++)
{
	cars.Add(new Car(){ Speed = i * 10 });
}
this.DataContext = cars;

이제 위 컬렉션을 표시하는 ListBox 컨트롤을 선언한다. 숨을 멈추고 다음과 같이 모든 자동차를 표시하기 위해 아주 적은 수의 글자가 필요하다. 

XAML
<ListBox ItemsSource="{Binding}" />

결과는 다음과 같다. 


C# 코드를 사용해서 ItemsSource속성에 할당할 수 있지만 DataContext를 사용하면 얼마나 더 간단하게 만들 수 있는지 보여주는 좋은 방법이다. 자동차 컬렉션이 현재 DataContext 에 할당돼있으므로 경로 없이 ItemsSource 속성에 바인딩하거나 소스를 그냥 자동차 컬렉션에 연결하면 된다. 

물론 ListBox 컨트롤에 자동차 정보가 표시되지 않고 클래스 이름 목록만 표시된다는 것을 알 수 있다. 이유가 무엇일까? 이제 변경하는 방법을 알아보자. 



4.5 목록 컨트롤 사용자 정의

이전 예제에서 ListBox 컨트롤은 BusinessLogic.Car 문자열 목록을 표시한다. 이유는 WPF가 각 Car 클래스의 인스턴스를 표시하는 방법을 모르므로 각 인스턴스의 ToString 메소드를 호출하기 때문이다. ToString 메소드를 재정의하지 않았으므로 차례대로 클래스 이름을 반환한다. 

ListBox 컨트롤은 표시할 자동차 속성을 제공하는 DisplayMemberPath 속성을 갖는다. 그러나 하나의 속성만을 텍스트로만 표시하고 또한 다른 목록 컨트롤에는 동작하지 않으므로 너무 제한적이다. 더 좋은 방법으로 구현할 수 있다. 

모든 목록 컨트롤에는 항목을 표시하는 방법을 사용자 정의할수 있는 다음과 같은 속성이 있다. 


* ItemsPanel은 요소를 배치하는 방법을 설명한다. 

* ItemTemplate은 각 요소에 대해 반복이 필요한 템플릿을 제공한다. 

* ItemContainerStyle은 항목을 선택하거나 마우스를 올릴때의 동작 방법을 설명한다(선택 가능한 컨트롤에만 제공되는 속성), 

* Template은 컨트롤 자체를 렌더링하는 방법을 설명한다.(나 중에 자세히 설명한다)

ItemTemplate 속성은 각 목록 항목에 대해 반복되는 DataTemplate이어야 한다. DataTemplate 내부 요소는 데이터 바인딩 식을 사용해 해당 속성을 기본 항목 속성에 연결할 수 있다. 실제로 DataTemplate 의 DataContext는 표시되는 항목이다. 그러므로 다음은 모든 자동차의 속도를 표시하는 방법이다. 


<ListBox ItemsSource="{Binding}" >
	<ListBox.ItemTemplate>
		<DataTemplate>
			<TextBlock Text="{Binding Speed}" />
		</DataTemplate>
	</ListBox.ItemTemplate>
</ListBox>

이 코드는 아주 간단한 예제다. 예측 가능한가? 목록 컨트롤은 텍스트뿐만 아니라 거의 모든 것을 표시할 수 있다. 각 자동차에 대한 완전한 입력 인터페이스를 얻는 방법은 무엇인가? 다음과 같이 쉽다. 


<ListBox ItemsSource="{Binding}" >
	<ListBox.ItemTemplate>
		<DataTemplate>
			<StackPanel>
				<TextBlock Text="Speed" />
				<TextBox Text="{Binding Speed}" />
				<Slider Value="{Binding Speed}" Maximum="100" />
				<TextBlock Text="Color" />
				<Border Height="10" >
					<Border.Background>
						<SolidColorBrush Color="{Binding Color}" />
					</Border.Background>
				</Border>
				<TextBox Text="{Binding Color}" />
			</StackPanel>
		</DataTemplate>
	</ListBox.Template>
</ListBox>

위의 두 예제에 대한 결과는 다음과 같다. 


감을 못잡은 경우를 대비해 다음은 예상한 결과에 따라 목록 컨트롤에서 사용할 수 있는 속성 요약을 보여준다. 


목록 주의(테두리, 배경, 스크롤바)	* Template

항목 레이아웃			* ItemsPanel

각 항목의 모양			* ItemTemplate

요소 효과(MouseOver, Selected,...)	* ItemContainerStyle




4.6 연습문제 : 데이터 객체의 메시지 표시

StartAssets 폴더에 Talk.cs 파일이 존재한다. Talk.cs 파일을 프로젝트에 추가한다. 
Talk.cs 파일은 메시지의 컬렉션인 Talk 클래스를 정의한다.인스턴스화되면 몇 개의 샘플 메시지가 자동으로 채워지고 즉시 사용할 수 있다. 
Talk 인스턴스에 포함된 모든 메시지가 앞서 만든 Discussion.xaml 페이지에 표시되는지 확인한다. 이 시점에서 Discussion.xaml 페이지는 다음과 같아야 한다. 

페이지가 다음과 같이 보이게 ListBox 컨트롤에 템플릿을 제공한다. 



4.7 연습문제 풀이

1. 브라우저에서 https://bitbucket.org/epobb/learnwpfexercises 주소를 입력하고 연습문제 풀이에 사용될 파일을 다운로드 한다.

2. 다운로드한 zip 파일을 압축 해제하고 StartAssets 폴더 안의 내용을 확인한다. 

3. 비주얼 스튜디오로 전환해 3.16 연습문제 풀이에서 작성한 BikeShop 프로젝트를 연다. 

4. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해 솔루션 탐색기를 연다. 

5. 솔루션 탐색기에서 프로젝트(솔루션이 아님)를 마우스 오른쪽 클릭하고 컨텍스트 메뉴에서 추가 > 기존 항목...을 선택한다. 

6. 기존 항목 추가 대화상자에서 StartAssets 폴더로 이동해 파일형식을 모든 파일(*.*)로 변경한 다음 chat.png및 Talk.cs 파일을 선택한다.(복수 파일 선택시 Ctrl 키 + 마우스 왼쪽 버튼을 클릭한다) 추가 버튼을 클릭한다. 

7. chat.png 및 Talk.cs 파일이 솔루션 탐색기에 추가된 것을 확인할 수 있다. 

8. 솔루션 탐색기에서 chat.png 파일 선택하고 마우스를 올려 이미지 모양을 미리 보기 할 수 있다. 

9. Talk.cs 파일을 더블 클릭하고 내용을 확인해보면 하단에 sender, content 속성을 가진 Message 클래스가 존재하고, 상단의 Talk()라는 클래스 생성자에 Message 클래스를 사용해 Sender에 보낸 사람 이름과 Content 에 메시지 내용을 여러 건 대입해 초기화돼 있는 데이터 파일이라는 것을 알 수 있다. 

using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;

namespace BikeShop
{
    public class Talk : ObservableCollection<Message>
    {
        public Talk()
        {
            this.Add(new Message() { Sender = "Adventure Works", Content = "Hi, what can we do for you?" });
            this.Add(new Message() { Sender = "Client", Content = "Did you receive the GR268 KZ bike?" });
            this.Add(new Message() { Sender = "Adventure Works", Content = "Not yet, but we have a similar model available." });
            this.Add(new Message() { Sender = "Client", Content = "What is it like?" });
            this.Add(new Message() { Sender = "Adventure Works", Content = "It boasts a carbon frame, hydraulic brakes and suspension, and a gear hub." });
            this.Add(new Message() { Sender = "Client", Content = "How much does it cost?" });
            this.Add(new Message() { Sender = "Adventure Works", Content = "Same as the GR268 KZ model you requested. You can get it from our online shop." });
            this.Add(new Message() { Sender = "Client", Content = "Thanks." });
            this.Add(new Message() { Sender = "Adventure Works", Content = "Thank you, have a nice ride." });
        }
    }

    public class Message
    {
        public string Sender { get; set; }
        public string Content { get; set; }
    }
}


10. 솔루션 탐색기에서 Discussion.xaml 파일을 더블 클릭한다. XAML에서 Page 요소 위치에 다음 특성을 추가한다.(BikeShop에 대한 네임스페이스가 이미 참조돼 있으면 data로 변경한다. 
<Page .... xmlns:data="clr-namespace:BikeShop" ... >


11. Grid 요소에 포함된 ListBox 요소 선언을 찾아서 ListBox를 다음 코드로 대체한다(Talk.cs 파일을 포함해 빌드를 하기전에 는 구문 오류 밑줄이 생길수 있다. )

<ListBox Grid.ColumnSpan="2" Margin="5">
	<ListBox.ItemsSource>
		<data:Talk />
	</ListBox.ItemsSource>
</ListBox>

12. 애플리케이션을 실행한다(디버그 > 디버깅 시작 메뉴 항목 클릭)

13. Live support 표시 버튼을 클릭한다. Discussion 페이지에 서식이 지정되지 않은 항목 목록이 표시되는지 확인한다. 

14. 애플리케이션을 닫는다.

15. 방금 작성한 ListBox 선언을 ItemTemplate 속성을 포함하는 다음 구문으로 대체한다. 

<ListBox Grid.ColumnSpan="2" Margin="5">
	<ListBox.ItemsSource>
		<data:Talk />
	</ListBox.ItemsSource>
	<ListBox.ItemTemplate>
		<DataTemplate>
			<StackPanel Width="300">
				<StackPanel Orientation="Horizontal">
					<Image Source="chat.png" Width='20" />
					<TextBlock Text="{Binding Sender}"/>
				</StackPanel>
				<TextBlock Text="{Binding Content}" Margin="20, 0, 0, 0" TextWrapping="Wrap" />
			</StackPanel>
		</DataTemplate>
	</ListBox.ItemTemplate>
</ListBox>


16. 애플리케이션을 다시 실행하고 목록이 예상대로 표시되는지 확인한다. 

17. 애플리케이션을 닫는다.