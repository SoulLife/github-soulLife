3.9 XAML 이해

이제 개발자의 입장에서 XAML을 이해하는 핵심 부분이다. XAML이해 부분이 너무 이론적이라고 느끼면 안전하게 건너 뛸 수 있다. 많은 WPF 개발자는 XAML 이해 수준을 갖추지 못하고 해당 부족을 보완하기 위해 인터넷 포럼을 이용한다. 그러나 WPF 애플리케이션 개발시에 해당 부분을 계속해서 읽다보면 초능력을 얻을 수 있다. 

아직 여기를 읽고 있는가? 좋다 안전벨트를 착용하고 가보자!




※ XAML 네임스페이스

방금 만든 페이지에는 루트 요소에 적용된 여러 xmlns 특성(attribute)이 있다. 기본적으로 XAML 파일은 다음과 같다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Button x:Name="someButton">Hello</Button>
</StackPanel>

xmlns 특성은 XAML 개념이다. 이 특성은 C# 코드의 using 키워드와 같이 XAML 네임스페이스의 사용을 선언한다. 값은 URL이다. URL이 "http://"로 시작하지만 브라우저에 URL 을 입력하면 아무것도 표시되지 않을 수도 있다. XML은 여러 XML 문서에서 고유한 이름 영역을 보장하기 위해 URL을 사용한다. 

xmlns 특성이 요소에 추가되면 이 요소와 해당 하위 요소에 기본 적으로 해당 URL이 접두어로 추가된다는 것을 의미한다. 위 예제에서 StackPanel 요소는 실제로 다음과 같다. 


http://schemas.../presentation:StackPanel.

마찬가지로 xmlns:something 특성은 무언가에 접두어가 붙은 모든 요소 앞에 실제로 해당 URL 접두어가 있음을 의미한다. 위 예제에서 x:Name 특성은 실제로 다음과 같다. 

http://schemas.../xaml:Name.

XAML 파일에는 다양한 XML 네임스페이스에 해당하는 몇 가지 xmlns:something 특성이 있지만 WPF의 기본 특성은 다음과 같다. 

http://schemas.microsoft.com/winfx/2006/xaml/presentation

WPF 컨트롤을 나타낸다. 사실 위의 경로는 System.Windows, System.Windows.Controls, System.Windows.Media.Media3D 등의 닷넷 WPF 네임스페이스에 매핑된다. 

http://schemas.microsoft.com/winfx/2006/xaml


XAML 키워드를 나타낸다.예를 들어 x:Name 특성은 WPF 관련 XAML 파일뿐만 아니라 모든 XAML 파일 내에서 사용할 수 있으므로 위 네임스페이스에 해당한다. 



※ 객체 생성

XAML은 단순한 닷넷 언어 이상이다. 간단한 외관 묘사 도구로 사용되더라도 구문은 언어의 강력함을 숨기고있다. 사실 XAML 은 객체를 생성하는 쉬운 방법이다. 예를 들어 다음의 두 구문은 동일하다. 

C#에서 객체 생성

new Car();


XAML 에서 객체생성

<Car />

위 예제에서 Car는 모든 클래스가 될 수 있다. WPF 컨트롤을 의미하는 접두어가 없고 WPF 에 Car 컨트롤이 없기 때문에 위 예제는 실패로 나타날 것이다. 그러나 다음 XAML 구문을 사용해 XAML 네임스페이스를 자체 닷넷 네임스페이스에 매핑할 수 있다(xmlns는 xml name space를 의미하며, xmlns:접두어="clr-namespace:네임스페이스 명;assembly:(확장자 없는)어셈블리 명" 형식으로 사용하며, assembly 부분은 필요에 의해 사용된다.)


xmlns:anything="namespace:some;assembly:MyAssembly"


위의 경우 assembly:MyAssembly 부분은 선택 사항이며, 네임스페이스가 XAML 파일과 다른 프로젝트의 일부인 경우에만 사용한다. 이제 Car 클래스를 실제로 선언했다고 가정해 보자. 


namespace BusinessLogic
{
	public class Car
	{
		public double Speed {get; set; }
		public Color Color {get; set; }
	}
}

그런 다음 앞의 두 구문중 하나와 함께 사용할수 있다. 알고 있는 C# 구문과 방금 설명한 XAML 구문을 사용하면 다음과 같다. 



C# 에서 객체 생성

using BusinessLogic;

new Car();


XAML 에서 객체 생성

<Label xmlns:bl="clr-namespace:BusinessLogic">
	<bl:Car />
</Label>



※ 속성 정의

이해가 되는가? XAML은 닷넷 언어다. 자 이제 더 자세히 살펴보자. XAML에서 생성한 객체의 속성(properties)에 값을 쉽게 할당할 수 있다. 다음은 두 개의 동등한 코드다. 


C#에서 객체 생성 및 속성 할당

using BusinessLogic;

var c = new Car();
c.Speed = 100;
c.Color = Colors.Red;


XAML 에서 객체 생성 및 속성 할당

<Label xmlns:bl="namespace:BusinessLogic">
	<bl:Car Speed="100" Color="Red" />
</Label>


XAML 특성은 객체의 속성에 쉽게 매핑된다. 사용자가 실제 제공한 문자열을 double이나 열거형과 같이 실제 닷넷 타입으로 자동변환 한다. 

속성 값을 복잡한 객체에 전달할 수 있지만 구문은 더 장황하다. Car 클래스와 Human 클래스가 다음과 같이 정의된다고 가정해보자. 

namespace BusinessLogic
{
	public class Human
	{
		public string FirstName { get;set; }
		public bool HasDrivingLicense {get; set;}
	}

	public class Car
	{
		public double Speed {get; set; }
		public Color Color {get; set; }
		public Human Driver {get; set; }
	}
}

다음 두 코드는 동일하다. 


C#에서 객체 생성 및 속성 할당

using BusinessLogic;

var h = new Human();
h.FirstName = "Nick";
h.HasDrivingLicense = true;

var c = new Car();
c.Color = Colors.Red;
c.Driver = h;


XAML 에서 객체 생성 및 속성 할당

<Label xmlns:bl="namespace:BusinessLogic" >
	<bl:Car Color="Red">
		<bl:Car.Driver>
			<bl:Human FirstName="Nick" HasDrivingLicense="true" />
		</bl:Car.Driver>
	</bl:Car>
</Label>


구문은 좀 더 복잡하지만 실제로 방식이 다른 것은 아니다. 위 예제처럼 줄별로 무언가를 작성할 수 있어서 좋다. 


틀린 구문

<bl:Car Color="Red" Driver="bl:Human FirstName=Nick, HasDrivingLicense=true" >
</bl:car>


그러나 XAML은 Binding 클래스와 같이 알려진 클래스에 대해서만 해당 구문을 정의한다. 따라서 하위 요소 구문에 익숙해지기만 하면 된다. 




※ 명명 규칙

XAML  파일에서 선언한 객체를 코드 비하인드에서 조작하거나 단순히 XAML 요소 일부를 다른 XAML 요소에 참조하기를 원한다면 x:Name 특성을 추가할수 있다. 예를 들면 다음과 같다. 


SomeScreen.xaml

<bl:Car x:Name="myCar" Speed="100" Color="Red" />

SomeScreen.xaml.cs

public partial class SomeScreen : Page
{
	public SomeScreen()
	{
		InitializeComponent();
		myCar.Color = Colors.Blue;
	}
}

SomeScreen이 표시될때 파란색 자동차가 표시될 것이다. 



※ 알아두기
코드 비하인드에서 InitializeComponent() 호출은 XAML 상태에 대한 수행을 의미한다. 엄밀히 말하면 비주얼 스튜디오에 의해 기본적으로 화면 생성자에 배치된다. 



XAML 연습문제에서 XAML 컨트롤에 x:Name 이나 Name 특성을 모두 사용할 수 있다는 이상한 점을 발견할 것이다. 사실 둘 모두 같은 의미다. 차이점은 무엇인가? 긴 이야기를 짧게 하자면 x:Name은 항상 사용이 가능한 반면 짧은 Name은 WPF 컨트롤에서만 사용할수 있고 WPF 3.5 버전 이상에서만 사용할 수 있다. 




3.10 이벤트

WPF 컨트롤은 이벤트(event)를 선언하며 속성과 마찬가지로 XAML의 특성으로 사용할 수 있다. 단순히 특성에 코드 비하인드 메소드명을 제공하면 된다. 따라서 다음 코드는 코드 비하인드를 사용해 버튼의 Click 이벤트를 처리한다. 

SomeScreen.xaml

<Button Click="Greet" />


SomeScreen.xaml.cs

private void Greet(object sender, RoutedEventArgs e)
{

	MessageBox.Show("Hello");
}



※ 알아두기
비주얼 스튜디오는 이벤트 처리와 관련된 XAML 및 C# 코드를 생성할 수 있다. 속성 창에서 컨트롤이 선택되면 오른쪽 상단의 이벤트 처리기 버튼을 클릭한다. 그런 다음 이벤트 이름 옆의 빈 영역을 더블 클릭하면 작업이 완료된다. 단축 방법으로 컨트롤의 기본 이벤트를 처리하려면 디자인 화면에서 해당 컨트롤을 더블 클릭한다. 


이벤트는 컨트롤 트리를 위로(대부분) 또는 아래로(가끔) 이동 한다. 컨트롤 트리라고 부르는 것은 XAML 파일의 XML 계층 구조다. 
다음 XAML 을 작성한다고 가정해보자. 


<Grid MouseLeftButtonDown="SaySomething">
	<Button MouseLeftButtonDown="SayHello" />
	<Button MouseLeftButtonDown="SayGoodbye" />
</Grid>


첫 번째 버튼을 클릭하면 SayHello및 SaySomething 메소드가 모두 호출된다. 두번째 버튼을 클릭하면 SayGoodbye및 SaySomething 메소드가 모두 호출된다(내 어린 아들 니콜라스가 가장 좋아하는 노래는 비틀즈의 Hello goodbye이다. 이 메소드의 이름은 아들을 위한 것이다)


※알아두기
WPF는 버블(bubble)및 터널(tunnel)이벤트 유형을 정의한다. 대부분의 이벤트는 버블 유형이다. 즉 컨트롤 트리를 이동한다는 의미이므로 SayHello 메소드가 SaySomething 메소드보다 먼저 호출된다. 이름이 Preview로 시작하는 이벤트들은 터널 유형이다. 




3.11 연습문제 : 메뉴 페이지 생성

애플리케이션에 Menu.xaml 이라는 새 페이지를 추가하고 Contact 페이지 대신 MainWindow.xaml 화면에 기본적으로 표시되는지 확인한다. 

Button 컨트롤 세 개와 TextBlock 컨트롤 하나를 Menu 페이지에 추가한다. 
마지막 Button 컨트롤을 클릭하면 애플리케이션이 Contact 페이지로 이동하는지 확인한다. 

애플리케이션을 시작하면 다음과 같은 모양일 것이다. 
버튼	버튼	버튼
	텍스트블록


3.12 연습문제 풀이

1. 비주얼 스튜디오로 전환해 3.8 연습문제 풀이에서 생성한 BikeShop 프로젝트를 연다 

2. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해서 솔루션 탐색기를 연다. 

3. 솔루션 탐색기에서 프로젝트(솔루션이 아님)를 마우스 오른쪽 클릭하고 컨텍스트 메뉴에서 추가 > 페이지를 선택한다. 

4. 새 항목 추가 대화상자에서 하단 이름 영역을 찾아서 Menu를 입력하고 추가 버튼을 클릭한다. 

5. 보기 > 도구상자 메뉴 항목을 클릭해서 도구상자를 연다. 

6. Button 컨트롤 세개와 TextBlock 컨트롤 하나를 도구상자에서 디자인 화면으로 끌어다 놓는다. 화면을 원하는대로 보이게 배치하고 크기를 조절한다. 

7. TextBlock 컨트롤 하나를 도구상자에서 디자인 화면으로 끌어다 놓는다. 

8. 보기 > 속성 창 메뉴 항목을 클릭해서 속성 창이 표시되게 한다. 

9. 첫 번째 버튼 컨트롤을 클릭하고 Content 속성을 Products 로 변경하고 두 번째 버튼 컨트롤의 Content 속성을 Live support로 변경하고, 세 번째 버튼 컨트롤의 Content 속성을 Email support로 변경한다. 

10. TextBlock 컨트롤을 클릭하고 Text 속성을 Adventrue Works로 변경하고 텍스트 크기를 24px로 변경한 후 기울임꼴 아이콘을 선택한다. 

11. Email support 표시 버튼을 더블 클릭한다. 

12. 이렇게 하면 XAML에 Click 특성이 추가되고 코드 비하인드에 이벤트 처리기가 추가되면서 코드 비하인드 페이지가 열린다. 

private void Button_Click(object sender, RoutedEventArgs e)
{

}

13. 생성된 이벤트 처리기에 다음 코드를 추가한다. 
private void Button_Click(object sender, RoutedEventArgs e)
{
	NavigationService.Navigate( new Uri("/Contact.xaml", UriKind.Relative));
}


14. 솔루션 탐색기에서 MainWindow.xaml 파일을 더블클릭한다. 

15. Frame 요소의 Source 특성을 다음과 같이 변경한다. 

<Frame Source="/Menu.xaml" />

16. 애플리케이션을 실행한다(디버그 > 디버깅 시작 메뉴 항목 클릭)

17. Email support 표시 버튼을 클릭한다. Contact 페이지가 표시되는지 확인한다.

18. 표시된 페이지 왼쪽 상단 모서리에 버튼을 사용해서 메뉴 페이지로 다시 이동한다. 

19. 애플리케이션을 닫는다.