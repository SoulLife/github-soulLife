※ View의 DataContext로 ViewModel 사용

마지막 단계다. 수행을 위한 여러 가지 방법이 있다. 가장 쉬운 두 가지 방법은 XAML 사용 및 코드 비하인드 사용이다. 


XAML을 사용해 DataContext 할당

<Windows xmlns:vm="clr-namespace:ViewModels" ....>

	<Windows.DataContext>
		<vm:YourScreenViewModel />
	</Windows.DataContext>
	...
</Windows>


이 기술의 단점은 디자인 뷰를 표시할 때 ViewModel 클래스가 인스턴스화된다는 점이다. 하지만 이 문제를 해결하는 방법은 여러가지가 있다. 

코드 비하인드를 사용해 DataContext 할당


public partial class YourScreen : Window
{
	public YourScreen()
	{
		InitializeComponent();
		this.DataContext = new YourScreenViewModel();
	}
}


위 기술의 단점은 디자인 뷰에서 데이터 바인딩 편집기의 도움을 받지 못한다는 것이다. 해결책은 다음 절을 읽어보자. 

MVVM을 사용할 때 코드 비하인드가 없어야 한다. 코드 감사 수행시 위 코드 비하인드 줄이 유일하게 내가 용인할수 있는 부분이다.



※알아두기
나는 그렇게 엄격하지 않다. 부족하게 만들어진 컨트롤과 같은 특수한 경우에는코드 비하인드가 필요할 수 있다. 




※ ViewModel 사용 : 요구 버전

XAML이나 코드 비하인드에서 DataContext 할당은 모두 단점이 있다. 필요한 복잡성 수준에 따라 몇 가지 해결책이 있다. 런타임에만 ViewModel 인스턴스화 및 데이터 바인딩 편집기를 얻기 위한 중간 해결책은 다음을 따른다. 

클래스를 지정하는 XAML의 d:DataContext 특성을 사용한다. 그러면 뷰를 디자인하는 동안 인스턴스화되지는 않지만 여전히 데이터바인딩 편집기에서 도움을 얻을 수 있다. 

<Windows xmlns:vm="clr-namespace:ViewModels" mc:Ignorable="d" xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	d:DataContext="{d:DesignInstance vm:YourScreenViewModel}" >
	...
</Windows>


그런 다음 코드 비하인드를 사용해 DataContext를 다음과 같이 할당한다. 


public partial class YourScreen : Window
{
	public YourScreen()
	{
		InitializeComponent();
		this.DataContext = new YourScreenViewModel();
	}
}



6.5 예제

이 시점에서 예제를 살펴보자 액션(Action(명령 및 메소드))을 처리하는 방법을 보지못했으므로, 이 시점에서 해당 예제가 기본이 될 것이다. 그러므로 간단한 통화 변환기를 만들어보자. 금액이 유로화로 입력되면 미국 달러로 얼마인지 알려준다. 뷰는 다음과 같다. 



1단계는 다음과 같이 ViewModel을 생성한다. 

제목CurrencyConverter

Amount in : 	텍스트박스
Amount in US $ TextBLock

public class CurrencyConverterViewModel : Notifier
{
	
}

2단계는 필요한 속성을 찾는다. 하나의 입력인 유로 값과 하나의 출력인 US 달러 값이 있다. 따라서 두 개의 속성이 필요하다. 

3단계는 속성을 코딩한다. 장황하지만 다음과 같이 매우 직설적이다. 

public class CurrencyConverterViewModel : Notifier
    {
        private decimal euros;

        public decimal Euros
        {
            get { return euros; }
            set
            {
                euros = value;
                OnPropertyChanged("Euros");
            }
        }

        private decimal dollars;
        public decimal Dollars
        {
            get { return dollars; }
            set
            {
                dollars = value;
                OnPropertyChanged("Dollars");
            }
        }
    }

4단계는 뷰의 DataContext로 ViewModel을 사용한다. XAML(뷰)에서 다음과 같이 작성한다. 


<Window x:Class="MvvmEx.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MvvmEx"
        mc:Ignorable="d" xmlns:vm="clr-namespace:MvvmEx.ViewModel"
        Title="MainWindow" Height="450" Width="800">
    <Window.DataContext>
        <vm:CurrencyConverterViewModel />
    </Window.DataContext>
    <Grid>
        
    </Grid>
</Window>



5단계는 데이터 바인딩을 한다. 텍스트 컨트롤의 Text 속성에 바인딩만 하면 된다. 

...
        <TextBox Text="{Binding Euros}" />
        <TextBlock Text="{Binding Dollars}" />
...


바인딩 식을 작성할 때 속성 이름에 대한 인텔리센스 도움말을 얻을 수도 있다. 완전히 멋지지 않은가?


6단계는 기능적 논리를 코딩한다. ViewModel로 돌아가서 Euros 속성의 설정자에서 OnEurosChanged 메소두 호출을 추가한 다음 해당 메소드를 다음과 같이 코딩한다. 


private void OnEurosChanged()
{
	Dollars = Euros * 1.1M;
}


끝이다. 완전하게 동작하는 화면이다. 정말 간단하지 않은가?



6.6 더 복잡한 예제

이제 더 까다롭게 만들기 위해 사용자가 통화를 선택하는 콤보 박스를 추가한다. 화면은 다음과 같다. 

이전과 동일한 속성에 추가로 세 가지가 더 필요하다. 사용 가능한 통화 목록을 반환하는 속성, 선택한 통화를 갖고 있는 속성, 그리고 선택한 통화의 제목에 대한 속성이다. 통화의 이름과 환율을 설명하는 데이터 객체(Model) 클래스를 추가한다. 

Model및 ViewModel에 대한 코드는 다음과 같다. 다시 말하지만, 속성은 대부분의 공간을 차지하지만 직설적인 코드를 포함하고 있다. 이상적으로 모델 속성은 알림을 받아야 하지만 다음 경우는 알림 모델이 필요하지 않으므로 해당 공간을 절약하겠다. 


ViewModel인 CurrencyConverterViewModel안에 작성

    public class Currency
    {
        public Currency(string title, decimal rate)
        {
            Title = title;
            Rate = rate;
        }
        public string Title { get; set; }
        public decimal Rate { get; set; }
    }


public class CurrencyConverterViewModel : Notifier
    {
        private decimal euros;

        public decimal Euros
        {
            get { return euros; }
            set
            {
                euros = value;
                OnPropertyChanged("Euros");
                OnEurosChanged();
            }
        }

        private decimal converted;
        public decimal Converted
        {
            get { return converted; }
            set
            {
                converted = value;
                OnPropertyChanged("Converted");
            }
        }

        private Currency selectedCurrency;

        public Currency SelectedCurrency
        {
            get { return selectedCurrency; }
            set
            {
                selectedCurrency = value;
                OnPropertyChanged("SelectedCurrency");
                OnSelectedCurrencyChanged();
            }
        }

        private IEnumerable<Currency> currencies;

        public IEnumerable<Currency> Currencies
        {
            get{ return currencies; }
            set
            {
                currencies = value;
                OnPropertyChanged("Currencies");
            }
        }

        private string resultText;

        public string ResultText
        {
            get { return resultText; }
            set
            {
                resultText = value;
                OnPropertyChanged("ResultText");
            }
        }

        //여기가 마법 같은 일이 발생하는 곳이다. 

        public void CurrencyConverterViewModel2()
        {
            Currencies = new Currency[] { new Currency("US Dollar", 1.1M), new Currency("Birtish Pound", 0.9M) };
        }
        private void OnEurosChanged()
        {
            ComputeConverted();
        }

        private void OnSelectedCurrencyChanged()
        {
            ComputeConverted();
        }
        private void ComputeConverted()
        {
            if (SelectedCurrency == null)
            {
                return;
            }
            Converted = Euros * SelectedCurrency.Rate;
            ResultText = String.Format("Amount in {0}", SelectedCurrency.Title);
        }
    }



그리고 이제 View에서 데이터 바인딩은 다음과 같다. 

    <StackPanel Orientation="Vertical">
        <TextBox Text="{Binding Euros}" />
        <TextBlock Text="{Binding Converted}" />
        <TextBlock Text="{Binding ResultText}" />
        <ComboBox SelectedItem="{Binding SelectedCurrency}" ItemsSource="{Binding Currencies}">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" />
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>
    </StackPanel>


ViewModel을 만드는 과정에서 앞서 열거했던 단계를 직접 적용하는 방법을 확인했는가? 다음 MVVM 연습문제에서 해당 단계를 준수 해 자동으로 진행되게 하는 것이 좋다. 일단 해보면 MVVM은 단순하고 기본적인 것처럼 보일 것이다. 

위 예제에서 많은 코드를 작성했다고 생각할 수도 있지만 더 가까이서 본다면 그렇지 않다는 것을 알 게 될 것이다. ViewModel코드를 다시 살펴보자. 대부분은 속성 선언일 뿐이다. 속성을 알리는 것은 장황함에도 불구하고 비어 있는 종류여서 해당 코드를 읽을 때 건너 뛸 수 있다. 다음으로 기능 논리가 ComputeConverted 메소드 내에 어떻게 함축돼 있는지 주목하자. 컨트롤 참조가 없는 그냥 순수 기능 코드다. 그러면 유지 보수가 쉬워진다. 그리고 이는 MVVM의 강점 중 하나다. 

마지막으로 ViewModel 코드가 View와 어떻게 나뉘는지 살펴보자. ViewModel 이 단순히 View에 대해 알지 못하므로 ViewModel 을 변경하지 않고도 다른 TextBlock 에서 통화에 대한 다른 선택기를 추가하거나 입력된 금액 또는 환율을 표시할수 있다. 예를 들어 사용자가 선택한 모든 통화에 해당하는 환율을 표시하려면 다음과 같이 XAML로 작성해야 한다. 


<TextBlock Text="{Binding SelectedCurrency.Rate}" ... />



6.7 명령과 메소드

솔직히 말해서 두 예제는 운이 좋았다. TextBox의 Text 속성(사용자가 텍스트를 입력) 및 ComboBox 컨트롤의 SelectedItem 속성 덕분에 사용자 상호작용해 대해 알 수 있었다. 종종 사용자가 버튼을 눌렀는지만 알고 싶을 때가 있다. 구현하기 힘든 것은 아니지만 한 가지를 더 배워야 한다. 



※ 명령 : 다소 쉬운 방법

WPF에는 ICommand 인터페이스가 포함돼 있다. 클래스를 사용해 ICommand 인터페이스를 구현하고 해당 클래스를 인스턴스화하면 Button 및 MenuItem 컨트롤의 Command 속성을 사용해 해당 인스턴스를 참조할 수 있다. 해당 컨트롤을 클릭하면 명령이 호출된다. 
자연스럽게 진행되는 것처럼 보이지만 그렇지 않다. 다음과 같은 몇 가지 이유가 있다. 

첫째, ICommand를 구현하면 꽤 많은 코드가 필요하다. 대부분의 MVVM 프레임워크에서는 DelegateCommand 클래스(이름이 다양)를 제공해 해당 프로세스의 정보를 훨씬 간결하게 만든다. 
둘째, 인스턴스화 된 명령을 ViewModel의 특성에 할당해야 한다. 어렵지는 않지만 더 많은 빈 코드가 필요하다. 

셋째, 최악이다. Click 이벤트만 명령을 트리거한다. 보여주기가 끝이 난다. MouseOver과 같이 다른 이벤트를 처리하려면 메소드를 사용하는 것과 비슷한 모양을 갖는 자세한 XAML을 사용해야 한다. 다음과 같은 정보에 대한 코드 종류다. 


<Button>
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Click">
			<i:InvokeCommandAction Command="{Binding LoadMoreHotelsCommand}" />
		</i:EventTrigger>
	</i:Interaction>
</Button>

이제 이 명령을 왜 사용해야 하는가?라는 자연스러운 질문을 하게된다. 답은 사용하지 말자다. 명령으로 괴로워하지 말자. 메소드면 충분하므로 계속 진행해 보자. 




※ 메소드 : 쉬운 방법

메소드를 사용하면 C#인 ViewModel이 매우 쉬워지고 XAML은 더 복잡해진다. 사실 클릭 외의 이벤트를 처리하는 명령은 마찬가지로 복잡해진다. 


※알아두기
위와 같은 복잡성에 대한 모든 고려 사항은 올바른 MVVM 프레임워크나 몇 가지 확장을 사용해 완하할수 있다. 비주얼스튜디오를 사용하는 반제품 도구상자 사용을 권장한다. 또한 Blend for Visual Studio 를 사용하는 경우 단순히 끌어다 놓기를 사용하면 XAML을 생성할 수 있다. 



c#을 사용(당연히)하고 있지만 XAML을 사용해 컨트롤 이벤트에 대한 응답으로 메소드를 호출할 수 있는 방법을 살펴보자. 

프로젝트에서 참조에 System.Windows.Interactivity.dll을 추가하면 된다. 

NuGet을 사용하거나 다음 경로 폴더에서 찾아 수행할 수도 있다. 

C:\Program Files (x86)\Microsoft SDKs\Expression\Blend\.NETFramework\v4.5\Libraries\

그런 다음 XAML에서 화면(창, 페이지, 사용자 정의 컨트롤)의 루트 요소에 다음 특성을 추가한다. 

xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"

그리고 마지막으로 XAML에서 각 컨트롤 및 이벤트에 대해 컨트롤을 위한 트리거를 추가해야 한다. 다음과 같은 모양이다. 


<Button>
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Click">
			<i:CallMethodAction TargetObject="{Binding}" Method="LoadMoreHotelsAction" />
		</i:EventTrigger>
	</i:Interaction>
</Button>


앞서 말했듯이 위 코드는 Blend for Visual Studio를 사용해서 생성할 수 있다. XAML을 사용해서 DataContext로 사용할 ViewModel을 정의한 경우 공용 메소드가 "데이터 컨텍스트 창에 나타나고 컨트롤로 끌어다 놓기만 하면 된다. 그런데 해당 트릭은 일반 속성 바인딩에서도 동작한다. 

위 XAML 코드는 그다지 어렵지 않다. 이벤트 이름과 메소드 이름만 기술하면 된다. TargetObject가 현재 DataContext인 ViewModel이므로 이벤트와 메소드는 ViewModel에서 호출된다. 

쉽지 않은가? 이제 완료됐고 MVVM을 아는 것이다. 



6.8 권장 단계(완성)

간단한 방법으로 MVVM 화면을 만드는 완전한 단계는 다음과 같다. 

1. ViewModel을 생성한다. 

2. ViewModel이 공개해야 하는 속성(입력, 출력)과 메소드(액션)를 찾는다. 

3. 알림 속성을 선언하고 공용 메소드를 추가한다. 

4. ViewModel을 View의 DataContext도 사용한다. 

5. View를 ViewModel 속성에 데이터 바인딩한다. 

6. View에 ViewModel 메소드를 호출하는 트리거를 추가한다. 

7. 기능적 논리를 코딩한다(3단계 이후에 아무때나 수행할 수 있다)



6.9 MVVM 프레임워크 요약

MVVM 패턴을 사용하려면 알림 속성 코딩 및 INotifyPropertyChanged 구현, 메소드를 호출하는 트리거 XAML 작성, ViewModel인스턴스화, View에 할당과 같은 연결 작업 몇 가지가 필요하다. 또한 ViewModel이나 뷰 간의 통신 방법을 포함하는 종속성 주입이 필요할 수 있다. 

MVVM 프레임워크는 해당 작업을 좀 더 쉽고 간결하게 만드는 주요 목정 중 하나다. 몇 가지 MVVM 프레임워크가 있으며 모두 다음과 같은 기능을 제공한다. 


* INotifyPropertyChanged를 구현하는 ViewModel을 생성하기 위해 ViewModelBase(정확한 이름은 프레임워크에 따라 다르다) 클래스 상속

* 오류를 제한하고 작업자 스레드에 알림이 발생하지 않게 속성 변경 알림

* 명령을 사용하기로 결정해야 하지만 명령을 쉽게 작성하기 위해 DelegateCommand(정확한 이름은 프레임워크에 따라 다르다) 클래스 사용


또한 MVVM 프레임워크는 뷰 및 ViewModel에 대한 알림 속성 및 템플릿용 비주얼 스튜디오 코드 조각과 같은 몇 가지 유용한 기능을 제공할 수 있다. 

주목할 만한 가치가 있는 프레임워크는 다음과 같다. 



* Prism : Microsoft Patterns and Practices 팀에서 제작했고, 모듈식 애플리케이션 설계에 대한 자세한 가이드와 로깅, 라우팅 또는 종속성 주입에 유용한 많은 도구 또한 제공한다. 


* MVVM Light : 비주얼 스튜디오 템플릿을 제공한다. 

* Caliburn.Micro : 거의 모든 XAML 플랫폼(WPF, UWP, 실버라이트(SilverLight))에서 사용할 수 있으며 규약을 따르면 코드가 간단해진다. 


위 프레임워크를 시도해보고 자신이 좋아하는 것을 결정한다. 나는 위 세가지 프레임워크를 여러 프로젝트에서 사용했고 Caliburn.Micro는 사용자가 규칙을 따를 때 XAML을 훨씬 단순하게 만들기 때문에 좋아하게 됐다. 예를 들어 메소드가 컨트롤과 동일한 이름을 갖는다면 컨트롤의 메인 이벤트가 발생할 때 메소드가 자동으로 호출되며 뷰가 자동으로 인스턴스화되고 ViewModel이 할당되는 동안 ViewModel을 조작할 수 있다. 그러나 모두 취향의 문제로 귀결되며, 자신이 좋아하는 것을 찾을 수 있다고 확신한다. 