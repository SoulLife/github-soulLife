3장 : WPF 애플리케이션 생성


3.1 개발자-디자이너 워크플로우

WPF 애플리케이션상의 작업에는 다음과 같은 두 가지 역할이 있다. 

디자이너								개발자
Blend for Visual Studio						Visual Studio
골격디자인			------>				비즈니스 로직

외관 느낌 개선			------>				디버깅


디자이너는 골격 디자인을 만든 다음 사용자 인터페이스의 고품질 버전을 만드는 역할을 담당한다. 개발자는 비즈니스 로직을 코딩하거나 데이터와 연결, 디버깅도 담당한다. 


앞 그림에서는 역할에 대해 이야기하고 있다. 작은 팀에서 개발자가 디자이너 역할을 맡을 수 있다. 그러나 대규모 팀의 경우 디자인을 담당하는 별도의 사람을 두는 것이 좋다. 단순히 개발자는 디자이너가 아니기 때문이다. 이 책은 디자이너 도구를 사용하는 방법을 다루지만 망치를 사용한다고해서 공예가가 될 수 없음을 알게 될 것 이다. 
멋진 사용자 인터페이스를 설계하는 데는 자체 학습 곡선이 있다. 

실제로 내가 참여한 대형 WPF 프로젝트에서 디자이너 작업에 깊은 인상을 받았다. 디자이너들은 며칠간 작업해서 XAML 파일을 제공했고, 정말 사용자에게 편리하게 애플리케이션을 만들엇다. 디자인 작업이 비즈니스 코드에 영향을 미치지 않았다. 



3.2 편집기

두 가지 역할이 있는 이유로 두 가지 도구가 있다. 모든 작업을 수행하기 위해 두 도구 모두를 사용할 수 있지만 각각의 도구는 작업의 특정 부분을 더 빠르고 편리하게 만든다. 

비주얼 스튜디오는 개발자를 대상으로 한다. 컨트롤을 추가하고, XAML을 수동으로 편집하고 비즈니스 로직을 작성할 때 비주얼 스튜디오를 사용한다. 

Blend for Visual Studio는 디자이너용이다. 컨트롤의 모양을 변경하고 애니메이션을 만들때 사용한다. 


Blend for Visual Studio 는 현재 비주얼 스튜디오와 함께 설치된다. 이전에는 별도의 프로그램인 Expression Blend로 판매됐다. 비주얼 스튜디오 2013보다 구버전의 비주얼 스튜디오로 WPF 작업을 할 때 Expression Blend를 사용하려면 별도로 설치해야 한다. 



3.3 컨트롤 추가

화면에 컨트롤을 추가하는 방법에는 다음과 같은 두 가지 방법이 있다. 

1. 도구상자에서 컨트롤을 끌어다 놓는 방법

2. 단순히 XAML 파일에 XML 요소를 추가하는 방법


XML 요소를 수동으로 추가하는 경우 위치와 크기는 컨테이너에 따라 다르다. 컨테이너에 대해서는 3.13 레이아웃 절에서 설명하겠지만 지금은 그냥 컨트롤을 Grid에 추가할 때 모든 화면 크기를 차지하고 Canvas에 추가할 때 왼쪽 위 모서리에 위치하게 된다고 생각하자. 
예를 들어 다음 XAML 코드는 전체 화면에 걸쳐 있는 Button 컨트롤을 표시할 것이다. 

<Grid xmlns="...">
	<Button Content="Hello World" />
</Grid>



3.4 단순 컨트롤

WPF는 비교적 적은 수의 컨트롤을 제공한다. 이는 5.1 컨트롤 모양 변경 절에서 보게 되겠지만 순수 XAML을 사용해 모양을 쉽고 완전하게 개편할 수 있기 때문이다. 기본 컨트롤을 살펴보자. 




※ 기본 컨트롤

기본 컨트롤에 대해 설명할 필요는 거의 없다. 왼쪽 XAML에서 기본 컨트롤의 선언을 볼 수 있다. 오른쪽에는 해당 컨트롤의 기본 모양이 표시된다. 


위 컨트롤들은 대칭적이다. TextBlock 및 TextBox는 문자열을 Text 속성으로 표시하거나 입력할수 있지만 ProgressBar 및 Slider에서는 자체 Value 속성으로 double 값을 표시하거나 입력할 수 있다. 

텍스트를 표시하기 위해 Label 컨트롤보다 TextBlock 컨트롤을 우선 사용해야 한다는 점을 주의하자. Label 컨트롤은 텍스트보다 훨씬 더 많은 것들을 표시할수 있는 훨씬 더 유연한 콘텐츠 컨트롤이다. Label 컨트롤에는 무엇이든 표시할 수 있기 때문에 긴 텍스트를 줄 바꿈할 수 있는 텍스트 전용의 TextWrapping과 같은 속성이 없고 TextBlock 컨트롤에는 있다. 


1. 비주얼 스튜디오를 시작한다. 

2. 파일 > 새로 만들기 > 프로젝트... 메뉴 항목을 클릭한다. 


3. 새 프로젝트 대화상자에서 왼쪽에 있는 템플릿에서 Visual C# > Windows 클래식 바탕 화면을 선택해 WPF 앱(.NET Framework)템플릿을 선택한다. 하단의 이름 영역에 WpfBasicControlApp1을 입력한다. 확인 버튼을 클릭한다. 


4. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해 솔루션 탐색기를 연다. 

5. 솔루션 탐색기에서 프로젝트에 기본으로 생성된 MainWindow.xaml 파일을 더블클릭한다. 


6. 열린 MainWIndow.xaml 페이지의 XAML 탭에서 <Grid> </Grid> 부분을 찾는다. 


7. <Grid> </Grid> 부분을 <StackPanel> </StackPanel> 로 변경한다(StackPanel은 다수의 컨트롤을 쌓아서 표시하는 레이아웃으로 자세한 내용은 추후 설명한다.)


8. <StackPanel>과 </StackPanel>사이에 다음과 같은 코드를 추가한다. 코드 추가시 디자인 탭 페이지에 코드에 해당하는 컨트롤이 표시되는 것을 확인할 수 있다. 

<StackPanel>
	<TextBlock Text="TextBlock" />
	<TextBox Text="TextBox" />
	<ProgressBar Value="50" Width="60" Height="20" />
	<Slider Value="5" WIdth="60" />
	<PasswordBox Password="Secret" />
</StackPanel>


9. 애플리케이션을 실행한다(디버그 > 디버깅 시작 메뉴 항목 클릭)

10. 애플리케이션을 닫는다. 



※ 멀티미디어 컨트롤

Image 컨트롤은 물론 모든 그림을 표시하고 MediaElement는 동영상을 표시한다. 둘 다 다음과 같이 공통 크기 조절 동작을 공유한다. 

※ 두 컨트롤은 컨트롤에 할당된 크기에 맞춰 자신의 내용을 크기 조절한다. 

※ 두 컨트롤은 내용의 크기를 조절하는 방법을 지정하는 Stretch 속성을 제공한다. 

Stretch 속성의 가장 흥미로운 값들은 다음과 같다. 

※ Uniform(기본 값) : 필요에 따라 측면에 투명 여백을 남겨두고 이미지의 크기가 비례해 조절된다. 

※ Fill : 이미지 비례적으로 크기가 조절되고, Image 컨트롤에 할당된 전체 공간을 채운다. 


다음 코드는 그림의 높이가 50으로, 크기 조절(너비는 제공되지 않았으므로 자동으로 계산된다.)해 표시되며 동일한 특성을 갖는 동영상을 표시한다. 


<Image Source="fileurs.jpg" Height="50" />

<MediaElement Source="ic09.wmv" Height="50" />


※ 알아두기
앞서 설명한 것처럼 WPF의 크기는 픽셀 단위로 제공되지 않는다. 화면 해상도가 높아지면 픽셀 크기가 제대로 조정되지 않기 때문이다. 크기는 장치 독립적 픽셀로 제공된다. 화면이 정확하게 보정되면 하나의 장치 독립 픽셀은 약 0.5밀리미터다. 즉 50은 화면에서 약 2.5센티미터를 나타낸다. 이 크기는 선택한 화면 해상도에 관계없이 동일하게 유지된다. 좋은 소식은 이것이 근래의 높은 화면 해상도에서 애플리케이션이 잘 동작할수 있게 해준다는 점이다. 





※ 그리기 컨트롤

타원, 사각형 및 경로(Path)컨트롤은 기본 모양 그리기 컨트롤이다. 이 컨트롤은 모두 다음과 같은 공통 속성을 공유한다. 


※ Fill : 컨트롤의 내부를 칠하는 데 사용되는 브러시

※ Strike : 컨트롤의 윤곽을 그리는데 사용되는 브러시

※ Stretch : 멀티미디어 컨트롤에서 방금 봤듯이 크기를 조절할 때 컨트롤의 모양 크기 조절 방식


Path 컨트롤은 매우 유연하다. 점들의 목록을 제공하고 세그먼트(Segment) 또는 베지어(Bezier) 곡선(3차원 곡선)을 사용해 점의 목록을 연결할 수 있다. 점들을 수동으로 제공하는 것은 너무 힘들기 때문에 Blend for Visual Studio를 사용해 모양을 그리거나 XAML을 생성하는 그리기 도구나 변환기 도구에서 모양을 내보내는 두 가지 옵션이 있다. 타원, 사각형 및 경로 컨트롤은 컨테이너 컨트롤이 아니기 때문에 자식을 가질 수 없지만 상관없다. 텍스트를 추가해야 하는 경우 해당 컨트롤들 위에 TextBlock을 둘 수 있고, Grid 컨트롤에 모두 그룹화해 동일한 크기로 만들수 있다. 

화면의 아무 곳에나 배치하는 것 외에도 기존 컨트롤에 새로운 모양을 나타낼수 있게 템플릿 내에 해당 컨트롤들을 사용할 수 있다. 더 자세한 내용은 곧 다룬다. 



※ 콘텐츠 컨트롤

콘텐츠(Content)컨트롤은 콘텐츠를 가진 모든 컨트롤이 될 수 있다. 이를 위해 Content 속성을 노출한다. 콘텐츠 컨트롤은 다음과 같다. 


※ Button

※ Border

※ ScrollViewer

※ ViewBox


다음은 몇 가지 버튼을 보여준다. 다시 말하지만 버튼의 기본 모양은 오른쪽에 표시된다. 

<Button Content="Un button" />

<ToggleButton Content="ToggleButton" />

<CheckBox Content="CheckBox" />

<RadioButton Content="RadioButton" />


Content 속성은 Content 특성을 사용해 할당된다는 점에 주의하자. 간단한 콘텐츠로 잘 작동한다. 좀 더 복잡한 콘텐츠를 지정해야 하는 경우 Content 요소를 사용하는 대신 하위 요소를 콘텐츠 컨트롤에 제공할 수 있다. 다음은 두 가지 예제다.


<Button Padding="10">
	<MediaElement Source="ic09.wmv" Height="50" />
</Button>

<Button Width="100">
	<CheckBox>
		<TextBlock Text="Avec un retour a la ligne" TextWrapping="Wrap"/>
	</CheckBox>
</Button>

앞서 말했듯이 내용이 무엇이든 콘텐츠가 될 수 있다. 위 예제에서 버튼에 체크박스를 추가하는 방법을 확인했는가? 체크박스 추가는 Windows Forms와 같은 프레임워크에서는 Button 컨트롤에 Enable CheckBox 속성이 없기 때문에 불가능했다. WPF를 사용하면 필요한 기능을 얻기 위해 컨트롤을 간단하게 결합할 수 있다. 게다가 나중에 보겠지만 컨트롤의 외관 또한 변경할 수 있다. 

이는 개발자에게 큰 유연성을 제공한다. 예를 들어 ScrollViewer 컨트롤로 컨트롤을 감싸는 것만으로 모든 컨트롤에 스크롤을 추가할 수 있다. 또한 Border 컨트롤로 컨트롤을 감싸 모든 컨트롤의 테두리를 추가할수 있다. 예를 들어 TextBlock 컨트롤의 Border 속성을 찾지 않고 단순히 Border 컨트롤을 사용해 컨트롤을 감싸면 된다. 

다음은 Border 컨트롤및 ScrollViewer 컨트롤을 사용해 동영상에 스크롤바를 추가하는 예제다. 


<Border Bacground="Orange" CornerRadius="10" Padding="5">
	<Button Content="un button" />
</Border>

<Border Background="Blue" CornerRadius="10, 0, 10, 0" Padding="5">
	<Button Content="Un button" />
</Border>

<ScrollViewer Height="100" Width="100" HorizontalScrollBarVisibility="Auto">
	<MediaElement Source="ic09.wmv" Stretch="None" />
</ScrollViewer>

이제 내가 선호하는 WPF 컨트롤 중 하나인 ViewBox를 소개할 차례다. ViewBox 컨트롤은 WPF의 유연성을 보여주기 때문에 좋아한다. ViewBox 컨트롤은 마치 사진처럼 모든 콘텐츠의 크기를 조정할수 있으며, 콘텐츠는 계속 사용 가능하다. 즉 사용 가능한 너비와 높이에 맞게 화면을 신속하게 조정할 수 있다. 컨트롤 템플릿 및 애플리케이션의 많은 부분에 매우 유용할 것이다. 

ViewBox 컨트롤 작업 방법은 다음과 같다. 


		ViewBox는 필요한 모든 크기로 콘텐츠를 그릴 수 있다. 

			↓
		ViewBox는 자체 제약 조건을 준수 가능하게 콘텐츠를 위아래로 늘린다. 


이제 무엇을 할지 예상되는가? ViewBox 컨트롤에는 콘텐츠의 크기를 조정하는 방법을 나타내는 Stretch 속성이 있다. 그리고 Image 및 MediaElement 컨트롤의 Stretch 속성과 똑같이 동작한다. 

ViewBox 컨트롤의 간단한 사용과 그 결과 표시를 함께 살펴보자. 

<Grid Height="60" Width="100" Background="LightBlue">
	<Button Content="A" />
</Grid>

위 예제에서는 ViewBox 컨트롤이 없는 상태다. 나중에 알게 되겠지만 Grid 컨트롤은 자신의 콘텐츠를 늘여서 Grid 영역을 가득 채울 것이다. 따라서 Button 컨트롤은 모든 Grid 컨트롤 크기를 사용한다. 

<Grid Height="60" Width="100" Background="LightBlue" >
	<ViewBox>
		<Button Content="A" />
	</ViewBox>
</Grid>

두번째 예제에서는 Grid 컨트롤과 Button 컨트롤 사이에 ViewBox 컨트롤을 넣었다. Button 컨트롤은 필요한 크기(여기에 다른 제약 조건이 없으므로 크기는 자체 텍스트를 표시하기에 필요한 크기임)를 사용해 그려지게 되고, Grid 컨트롤 크기 전체를 가득 채우는 ViewBox 컨트롤에 의해 위로 늘어난다. 버튼 테두리가 얼마나 두껍게 보이는지 확인하자. 모든 컨트롤의 테두리는 비례적으로 늘어난다. 

이제 사용했던 ViewBox 컨트롤에 하나의 속성만 추가해 보자. 

<Grid Height="60" Width="100" Background="LightBlue" >
	<ViewBox Stretch="Fill">
		<Button Content="A" />
	</ViewBox>
</Grid>

결과를 알아보겠는가? Button 컨트롤이 왜곡된다. 

가장 좋은 점은 ViewBox가 콘텐츠 컨트롤이므로 전체 화면 크기를 조절하는 데 사용할 수 있다는 점이다. 다음과 같은 화면이 있다고 가정해 보자. 


<Grid xmlns="...">
	<Button Content="Hello World" ... />
	<ListBox ... />
	<DataGrid ... />
</Grid>


다음과 같이 ViewBox 컨트롤을 추가하는 것만으로는 모든 크기의 전체 화면 크기 조절이 가능하다. 

<ViewBox xmlns="...">
	<Grid>
		<Button Content="Hello World" ... />
		<ListBox ... />
		<DataGrid ... />
	</Grid>
</ViewBox>

ViewBox를 추가하는 방식은 구현이 빠르지만 단점이 있다. 즉 모든 내용의 크기를 조정한다. ListBox 컨트롤에 더 많은 공간 제공과 같이 좀 더 복잡한 크기 조절을 원한다면 layout 컨트롤을 사용해야 한다. 



3.5 탐색

이제 사용자는 애플리케이션 내에서 탐색(Navigation)하는 데 익숙하다. 이전 화면으로 돌아가기 및 기록에서 되돌아가기는 애플리케이션 요구 사항의 흔한 일부 기능이다. 다른 것을 자유롭게 사용할 수 있지만 WPF는 편리한 탐색 프레임워크를 제공한다. 

WPF 탐색 시스템 사용시 화면은 페이지(Page)들이고, 페이지들은 단일 Frame 컨트롤 내부에 표시된다. Frame 컨트롤은 웹 브라우저와 웹 페이지의 페이지들로 생각하자. 

			NavigationWindow
Page1.xaml	>	Page2.xaml		>	Page3.xaml

페이지는 XAML 파일이고 테두리나 창 관련 속성이 없다는 것을 제외하면 창(Window)과 마찬가지로 고려할 수 있다. Page는 사용자 정의 컨트롤의 하위 클래스이므로 사용자 정의 컨트롤로 생각할 수도 있다. 어쨌든 Page를 만들려면 비주얼 스튜디오(솔루션 탐색기에서 마우스 오른쪽 버튼 클릭 후 추가 > 페이지를 선택해 페이지(Page)를 추가할 수 있다. )를 사용해 페이지 요소를 추가하기만 하면 되고, 대략 다음의 같은 XAML 이 생성된다.


<Page x:Class="..." Title="...">
	<Grid>
		...
	</Grid>
</Page>


애플리케이션에 필요한 화면만큼의 페이지를 생성한 다음 페이지 브라우저로 사용할 Frame 컨트롤을 추가한다. Frame 컨트롤을 배치하는 자연스러운 장소는 기본으로 생성된 MainWindow.xaml 창이다. 다음으로 Source 속성을 사용해 표시할 페이지를 Frame 컨트롤에 지정한다. 

코드는 대략 다음과 같다(아마도 MainWindow.xaml 내부일 것이다).


<Frame Source="/Welcome.xaml" >
</Frame>


이 코드는 Welcome 페이지를 표시한다. 이제 사용자가 한 페이지에서 다른 페이지로 이동할 수 있는 방법이 필요하다. XAML이나 C# 을 사용해 이동(Navigate)처리를 할 수 있다(코드 비하인드 및 XAML을 이용한 코드는 동일하게 Payment.xaml 페이지로 이동하는 동작을 수행하며, 둘 중 구현이 편한 쪽을 선택하면 된다.)


코드 비하인드를 사용해 다른 페이지 탐색

NavigationService.Navigate(new Uri("/Payment.xaml", UriKind.Relative));


XAML을 사용해 다른 페이지 탐색

<Label>
	<Hyperlink NavigateUri="/Payment.xaml">
		Pay now
	</Hyperlink>
<Label>




3.6 코드 작성 : 스스로 작성

이제는 키보드를 잡고 코드를 작성할 차례다. 내가 쓴 학습 시리즈 책에 익숙하지 않은 경우를 대비해서 어떻게 작업하는지 설명하겠다. 



※ 이책의 연습 문제에 대해

모든 연습문제는 서로 연결돼 있다. 작은 전자상거래 애플리케이션을 만들 것이다. 사용자는 제품을 찾아보고 장바구니에 추가할수 있으며, 사이트 관리자가 제품을 나열, 생성, 수정 및 삭제할 수 있는 완전한 백엔드(Back-end)를 만들수 있다. 




※독자가 힘들경우

혼자서 모든 연습문제를 해결할 수 있을 것이다. 막히거나 컴퓨터를 갖고 있지 않아도(또는 해당 책의 전제 조건이 갖춰지지 않아도 나와 함께 라면 괜찮다) 문제 없다. 이 책의 모든 연습문제에 대한 풀이를 각 연습문제마다 제공할 것이다.



3.7 연습문제 : 애플리케이션과 연락처 페이지 생성

BikeShop이라는 새 WPF 애플리케이션을 생성한다. 애플리케이션에 Contact.xaml 이라는 새 페이지를 추가한다. 

Contact 페이지에 두 개의 TextBox 컨트롤과 두 개의 TextBlock 컨트롤을 추가해 사용자가 메시지를 입력할 수 있게 한다. 

Contact 페이지가 MainWindow.xaml 화면에 기본으로 표시되는지 확인한다. 

애플리케이션은 다음과 같은 모양일 것이다. 

기초라는 것을 알지만 더 많은 것을 하기 전에 기본을 배워둬야 한다. 

다음 단계로 진행해 초급 딱지를 떼어보자. 

TextBlock(Sender)		TextBox(Sender옆에 TextBox 배치 제목 입력 화면이라고생각하면됨)

TextBlock(Message)	TextBox(Message옆에 TextBox 배치 메일 내용적는 크기로 생각하면됨)



3.8 연습문제 풀이

1. 비주얼 스튜디오를 시작한다. 

2. 파일 > 새로 만들기 > 프로젝트... 메뉴 항목을 클릭한다. 

3. 새 프로젝트 대화상자에서 왼쪽에 있는 템플릿 > Visual C# > Windows 클래식 바탕화면(비주얼 스튜디오 2015에서는 템플릿 > Visual C# > 창을 선택해 WPF 응용 프로그램 템플릿을 선택한다. ) 을 선택해 WPF 앱(.NET Framework)템플릿을 선택한다.하단의 이름 영역에 BikeShop을 입력한다. 확인 버튼을 클릭한다. 

4. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해 솔루션 탐색기를 연다. 

5. 솔루션 탐색기에서 프로젝트를 마우스 오른쪽 클릭해 컨텍스트 메뉴에서 추가 > 페이지를 선택한다. 

6. 새 항목 추가 대화상자에서 하단 이름 영역에 Contact를 입력한다. 추가 버튼을 클릭한다. 

7. 보기 > 도구상자 메뉴를 클릭해서 도구상자를 연다.

8. 두 개의 TextBlock 컨트롤과 두 개의 TextBox 컨트롤을 도구상자에서 디자인 화면으로 끌어다 놓는다. 화면을 원하는대로 보이게 배치하고 크기를 조정한다. 

9. 보기 > 속성 창 메뉴를 클릭해서 속성 창이 표시되게 한다. 

10. TextBlock 컨트롤을 먼저 클릭하고 Text 속성을 Sender로 변경한다.

11. 두 번째 TextBlock 컨트롤을 클릭하고 Text 속성을 Message로 변경한다. 

12. 첫 번째 TextBox 컨트롤을 클릭하고 Text 속성을 빈 문자열 로 변경한다. 

13. 두 번째 TextBox 컨트롤을 클릭하고 Text 속성을 빈 문자열 로 변경한다.

14. 솔루션 탐색기에서 MainWindow.xaml 파일을 더블 클릭한다. 

15. Grid 요소 내부에 Frame 요소를 추가한다. MainWindow.xaml 코드는 다음과 같다. 

<Window ....... Title="MainWindow" Height="350" Width="525">
	<Grid>
		<Frame Source="/Contact.xaml" />
	</Grid>
</Window>

16. 애플리케이션을 실행한다(디버그 > 디버깅 시작 메뉴 항목 클릭)

17. 애플리케이션을 닫는다. 

18. 솔루션 탐색기에서 Contact.xaml 파일을 더블 클릭한다. 

19. Contact.xaml 페이지의 디자인 탭에서 첫 번째 TextBox 컨트롤을 선택하고 우측 자동 크기 조절 아이콘을 클릭한다. 

20. 두 번째 TextBox 컨트롤을 선택하고 우측 및 하단 자동 크기 조절 아이콘을 클릭한다. 

21. 애플리케이션을 실행한다.

22. 애플리케이션을 닫는다.