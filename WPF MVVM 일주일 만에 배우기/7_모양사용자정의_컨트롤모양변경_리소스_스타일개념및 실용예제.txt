5장 : 빛나게 만들기 : 모양 사용자 정의


5.1 컨트롤 모양 변경

이전에 봤듯이 WPF 컨트롤은 마음대로 변경이 가능한 기본 모양이 제공된다. 모양 변경이 얼마나 쉬운지 놀라게 될 것이고 이는 바로 템플릿화에 관한 것이다. 


※ 템플릿

거의 모든 WPF 컨트롤은 Template 속성이 있다. 컨트롤에 새로운 모양을 제공하려는 새 ControlTemplate 인스턴스를 컨트롤 속성에 할당한다. 다음은 간단한 예제다. 

<Button Content="Press me">
	<Button.Template>
		<ControlTemplate TargetType="{x:Type Button}">
			<Ellipse Fill="GreenYellow" Width="100" Height="100" />
		</ControlTemplate>
	</Button.Template>
</Button>

그리고 결과는 다음과 같다(원의 배경색은 연두색으로 나타난다.)


매우 기본적이고 아주 끔찍한 모양이지만 Button 컨트롤은 완전한 기능을 갖추고 있으므로 사용자와 상호작용할 때 Click 이벤트나 MouseOver 이벤트가 발생한다. 더 좋은 점은 이벤트를 발생하는 표면이 더 이상 직사각형이 아니라는 것이다. 원 외부의 아무 곳이나, 심지어 매우 근접해서 클릭해도 Click 이벤트가 발생하지 않는다. 템플릿에 대해 배울점이 하나 있다. 내용이 없는 영역은 컨트롤의 일부가 아니고 마우스 포인터를 가로채지도 않는다는 점이다. 

템플릿화를 위해 방금 제공한 XAML 코드를 다시 살펴보면 실제로 많은 표준 문구가 있음을 알 수 있다. 해당 표준 문구를 제외하고는 단순하다. 실제로 다음과 같이 몇 가지 주의해야 할 점이 있다. 


* 앞 컨트롤의 새로운 모양은 타원(Ellipse)이다

* ControlTemplate 인스턴스에 TargetType 속성이 있다. 


TargetType 속성은 ControlTemplate 이 Button 컨트롤에 적용된다는 것을 분명히 알 수 있으므로 필요 없다고 생각될 수 있지만 필요하다. 실제로 여러 컨트롤(다시 DRY(반복적인 것을 하지 않는다는 의미다))에 공통적인 템플릿을 리소스로 저장해 템플릿을 정의할 수 있다. 즉 대상 컨트롤에 대한 컨텍스트 정보 없이 정의된다. 그러므로 대상 유형을 나타내는 것이 필요하다. 

이제는 템플릿이 너무 간단하다. 결과를 다시 보면 버튼 콘텐츠(Press me 텍스트)가 표시되지 않는다. 실제로 동일한 코드를 사용하면 Button 컨트롤이 개발자의 상태를 따르지 않는다는 것을 알 수 있다. 크기 조절은 효과가 없으며, 새 배경색을 지정하거나 Button 의 다른 속성을 사용하지 않는다. 다시 말해 방금 적어도 버튼의 규정은 어겼다. 다른 무엇이 필요한데 바로 TemplateBinding에 관한 것이다.



※ TemplateBinding

지금 필요한 것은 ControlTemplate정의 내부에서 템플릿 컨트롤의 속성을 참조하는 기능이다. 그렇게 하면 템플릿에서 템플릿 컨트롤의 속성을 사용할 수 있다. 정확하게는 TemplateBinding 구문에 관한 것이다. 

TemplateBinding 구문을 사용해서 이전 예제를 개선해 보자. 

<Button Content="Press me">
	<Button.Template>
		<ControlTemplate TargetType="{x:Type Button}">
			<Grid>
				<Ellipse Fill="{TemplateBinding Background}" Width="100" Height="100" />
				<Label Content="{TemplateBinding Content}" HorizontalAlignment="Center"
					VerticalAlingment="Center" />
			</Grid>
		</ControlTemplate>
	</Button.Template>
</Button>

새로운 모양은 버튼의 원본 콘텐츠를 표시하고 버튼 배경색을 유지한다. 


이제 컨트롤 자체에 배경색(solid, gradient 또는 심지어 VisualBrush중 무엇이든 한 가지)을 할당하면 Ellipse 컨트롤에서 배경색을 사용하게 된다. 훌륭하다. 이전 스크린 샷에서 Button 컨트롤의 Background 속성이 기본값이기 때문에 타원은 회색이다. 

※알아두기
앞 예제 코드에서는 Button의 원본 콘텐츠 랜더링을 위해 Label 컨트롤을 사용했다. TextBlock 컨트롤을 사용했다면 텍스트 콘텐츠로 제한될 것이다. 반면 Label 컨트롤은 모든 콘텐츠를 허용한다. 즉 템플릿을 사용하는 모든 사용자가 버튼 콘텐츠로 MediaElement 또는 ListBox나 Grid가 있는 자식을 지정할 수 있으며, 여기서는 Ellipse 위에 표시된다. 





※ ItemsPresenter

ListBox및 ComboBox같은 Items 속성이 있는 목록 컨트롤도 템플릿으로 만들 수 있다. 각 요소의 개별 모양을 변경하려면 ItemTemplate을 사용해야 한다. 그러나 컨트롤의 전체 레이아웃을 변경하려는 경우(예를 들어 항목 목록 회전 또는 크기 조절이나 다른 종류의 모양 생성) 해당 컨트롤의 Template 속성을 사용해 새로운 모양을 제공할 수도 있다. 

목록 컨트롤에 대한 템플릿을 만들 때 항목의 실제 목록(가능하면 제공된 ItemTemplate 및 ItemsPanel을 사용해)을 표시하려는 지점을 스스로 찾을 수 있을 것이다. 해당 지점이 ItemsPresenter에 대한 것이다. ItemsPresenter 컨트롤은 단순히 템플릿 내부의 실제 항목을 표시하고 싶은 곳에 삽입하기만 하면 잘 동작할 것이다. 별도의 구성이 필요하지 않고 간단하다. 



5.2 연습문제 : 기본 버튼 템플릿 생성

Discussion.xaml 페이지에서 send 버튼의 모양을 변경한다. 원하는 모양을 선택하고 원본 텍스트(Send)가 표시되는지 확인한다. 다음과 같이 선을 따라 뭔가 있을 수 있다. 



5.3 연습문제 풀이 

1. 비주얼 스튜디오로 전환해 4.11 연습문제 풀이에서 작성한 BikeShop 프로젝트를 연다. 

2. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해 솔루션 탐색기를 연다. 

3. 솔루션 탐색기에서 Discussion.xaml 파일을 더블 클릭한다. Button 요소 선언을 찾아 열고 닫는 태그로 변경한다. 

<Button Grid.Row="1" Grid.Column="1" Margin="5" Content="Send" >

</Button>

4. Button 요소 내부에 다음 코드를 추가한다. 

<Button Grid.Row="1" Grid.Column="1" Margin="5" Content="Send" >
	<Button.Template>
		<ControlTemplate TargetType="Button">
			<Grid>
				<Ellipse Fill="#AA000000" Margin="10, 10, 0, 0"/>
				<Ellipse Fill="{TemplateBinding Background}" Margin="0, 0, 10, 10" />
				<ViewBox Margin="5, 5, 15, 15" >
					<ContentPresenter />
				</ViewBox>
			</Grid>
		</ControlTemplate>
	</Button.Template>
</Button>

5. 애플리케이션을 실행한다(디버그 > 디버깅 시작 메뉴 항목 클릭)

6. Live support 표시 버튼을 클릭한다. Discussion 페이지의 버튼이 사용자 정의화 됐는지 확인한다. 

7. 애플리케이션을 닫는다. 




5.4 리소스

일단 컨트롤에 대한 훌륭한 템플릿을 작성하면 애플리케이션 전체에 걸쳐 여러 곳에서 사용되기를 원할 것이다. 현실적으로 템플릿 코드를 복제하는것은 유지보수가 불가능할 것이다. 여기가 바로 리소스(resource)가 빛을 발하는 곳이다. 

실제로 XAML에서 여러 컨트롤을 통해 일부 XAML을 공유가 필요할 때마다 리소스가 애플리케이션 전체에서 같은 화면 또는 다른 화면에 있든 상관없이 응답할 수 있다. 

애플리케이션 내부의 모든 컨트롤은 문자열 키 사전인 Resources 속성을 사용해 리소스를 저장할 수 있다. 즉 문자열 키를 제공하는 모든 리소스 객체를 추가할 수 있다. 

컨트롤 자체와 모든 하위 컨트롤은 컨트롤의 리소스에 접근할 수 있다. 즉 리소스를 저장하는 곳은 주로 다음과 같은 두 곳이다. 

* 화면 : 페이지, 사용자 정의 컨트롤 또는 창과 같이 단일 화면으로 범위가 지정된 리소스

* 애플리케이션 : App.xaml에 선언된 Application 요소와 같이 애플리케이션 전반에 걸쳐 사용되는 리소스


※ 알아두기
실제로는 리소스 사전(resource dictionaries)이라는 제3의 장소가 있다. 자세한 내용은 나중에 설명한다. 


여기까지는 이론일 뿐이다. 동작 방식을 살펴보자. 다음과 같이 App.xaml 파일에서 두 개의 리소스를 선언한다. 


<Application ...>
	<Application.Resources>
		<Button x:Key="button">Hello, world</Button>
		<SolidColorBrush x:key="accentBrush" Color="Red" />
	</Application.Resources>
</Application>


위 코드에서 Button 및 SolidColorBrush 클래스가 인스턴스화 되는 방식에 주의하자. x:Key를 지정한다는 점만 제외하면 다른 모든 위치와 동일하다. Key는 해당 자원을 참조할 때 재사용할 이름이다. 방법은 다음과 같다. 

<Label Content="{StaticResource button}" Background="{StaticResource accentBrush}" />


위 코드는 리소스가 Application 요소 아래에 선언됐으므로 애플리케이션의 어느 위치에서나 사용할 수 있다. 해당 리소스를 애플리케이션의 더 작은 부분으로 범위 지정을 원한다면 Page 요소나 소수의 페이지에서 참조하는 ResourceDictionary로 선언할 수 있다. 
StaticResource 구문 뒤에는 사용하려는 리소스의 키가 온다. x:Key 특성을 사용해 할당된 문자열과 완전히 동일한 문자열이다. 리소스를 사용할 때 결과는 리소스가 특성 값으로 직접 선언된 것과 같다. XAML에서 인스턴스화된 객체를 공유해야 할 때마다 리소스를 사용해야 한다. 


※알아두기
생각해보면 Application 요소 아래에 선언된 리소스가 단일 항목이다. XAML 에서 C#보다 단일 항목을 선언하는 것이 더 쉽다. 


리소스에 대해 알아야 할 점이 하나 더 있는데 리소스를 참조할 때 StaticResource 구문 대신 DynamicResource 구문을 사용할 수 있다는 것이다. 

너무 긴 이야기이므로 StaticResource 사용을 추천하며 큰 차이는 없다. 

DynamicResource 는 리소스가 사용되는 동안(예를 들어 화면이 계속 표시됨)다른 리소스로 대체되면 결과가 즉시 표시된다는 장점이 있다. 

DynamicResource는 사용 사례가 적으므로(특히 리소스가 INotifyPropertyChanged 를 구현할 수 있으므로)굳이 사용해서 관련 부하를 줄 이유가 있는가?



※ ResourceDictionary

실제 애플리케이션에서는 변환기, 브러시, 데이터 객체 또는 기술 객체, 컨트롤 템플릿, 데이터 템플릿 등 Application 요소 아래에 많은 리소스를 선언할 수 있다. 즉 App.xaml 파일이 유지보수가 어려울 수 있다. 정돈된 개발자는 리소스를 확실히 정돈하고 싶어 하므로 리소스 사전(resource dictionary)이 만들어졌다. 

리소스 사전을 사용하는 것은 쉽다. 프로젝트에 몇개의 리소스 사전 파일을 그냥 추가하고 리소스를 파일(일반 XAML 파일)내부에 두면 된다. 그런 다음에 다음과 같은 종류의 선언을 추가해 해당 파일을 모든 Resources 속성에서 참조한다. 


<Window.Resources>
	<ResourceDictionary Source="Brushes.xaml" />
</Window.Resources>



5.5 연습문제 : 배경 설정

작성한 모든 페이지가 공통된 배경(원하는 색상을 선택)을 공유하는지 확인한다. 해당 배경은 공유될 수 있게 리소스로 저장돼야 한다. 

WPF 및 비주얼 스튜디오의 버전에 따라 페이지에 암시적 스타일을 사용하면 디자인 뷰나 런타임에 작동하지 않을 수 있다. 게다가 스타일에 대해 아직 논하지 않았다. 그러므로 연습문제에 스타일을 사용하지 않는다. 


5.6 연습문제 풀이

1. 비주얼 스튜디오로 전환해 5.3 연습문제 풀이에서 작성한 BikeShop 프로젝트를 연다. 

2. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해 솔루션 탐색기를 연다. 

3. 솔루션 탐색기에서 App.xaml 파일을 더블 클릭한다. 

4. Application.Resources 요소 아래에 다음 XAML 코드를 추가한다. 추가한 코드는 선형 그라데이션 브러시로 #FFDBFFE7 색으로 시작(OffSet="0")해서 #FF03882D 색으로 끝(OffSet="1")나는 초록색 계열의 그라데이션이다. 

<LinearGradientBrush x:Key="background">
	<GradientStop Color="#FFDBFFE7" Offset="0" />
	<GradientStop Color="FF03882D" Offset="1" />
</LinearGradientBrush>


5. Contact.xaml 및 Discussion.xaml, Menu.xaml, ProductsManagement.xaml 페이지를 연다. 각각에 대해 Page 요소에 다음과 같은 Background 특성을 추가한다. 


<Page	Background="{StaticResources background}" >
<Page	Background="{StaticResources background}" >
<Page	Background="{StaticResources background}" >

6. 애플리케이션을 실행한다(디버그 > 디버깅 시작 메뉴 항목 클릭)

7. 모든 페이지에 그라데이션 배경이 표시되는지 확인한다. 

8. 애플리케이션을 닫는다. 




5.7 스타일

스타일(Style)은 이름에서 알 수 있듯이 컨트롤의 모양을 스타일링 하는 좋은 방법이다. 아니 그것만은 아니다. 실제로 스타일 컨트롤에 템플릿, 속성 및 리소스와 같은 여러 가지 방법을 이미 살펴봤다. 그렇다면 왜 스타일을 고집해야 하는가?


스타일을 이해하려면 스타일을 다중 속성 설정자(multi property setters)로 생각해야 한다. 무엇인지 알아보자. 여러 Button 컨트롤의 배경을 멋진 그래디언트(gradient)브러시로 설정해야 한다고 가정해보자. 리소스 없이 만들어도 괜찮다. 그러나 배경을 그래디언트 브러시로 설정하고 높이와너비를 표준 값으로 설정해야 한다고 가정하자. 그런 다음 세 개의 리소스를 정의하고 각 Button 컨트롤의 세 가지 속성인 Background, Width 및 Height 에서 리소스를 참조해야 한다. 스타일을 사용하면 간단하게 수행할 수 있다. 

방금 언급한 스타일용으로 사용할 수 있는 선언은 다음과 같다. 


<Application.Resources>
	<Style x:Key="niceButton" TargetType="Button">
		<Setter Property="Width" Value="50" />
		<Setter Property="Height" Value="50" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush>
					<GradientStop Color="Red" />
					<GradientStop Color="Yellow" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>
</Application.Resources>

그리고 다음은 일부 버튼에 위 스타일을 적용하는 방법이다. 


<StackPanel Margin="50">
	<Button Style="{StaticResource niceButton}">
		A
	</Button>
	<Button>
		B
	</Button>
	<Button Style="{StaticResour niceButton}">
		C
	</Button>
	<Button Style="{StaticResource niceButton}">
		D
	</Button>
</StackPanel>


결과는 다음과 같다(바탕색이 왼쪽 상단이 붉은색으로 시작하여 오른쪽 하단으로 가면서 노란색으로 바뀌는 그래디언트가 적용된다. )


두 번째 버튼은 명시적으로 스타일을 지정하지 않았으므로 스타일이 적용되지 않는다. 

이제 암시적인 스타일이 하나 더 있다. 스타일(및 템플릿)은 키를 할당하지 않고 리소스로 저장할 수 있다. 키 할당이 없는 경우 해당 범위 내에서 TargetType과 일치하는 모든 컨트롤에 자동으로 사용된다. 예를 들어 다음 XAML은 페이지의 모든 컨트롤을 스타일링 한다. 


<Page ...>
	<Page.Resources>
		<Style TargetType="Button">
			...
		</Style>
	</Page.Resources>
	<StackPanel Orientation = "Horizontal">
		<Button>A</Button>
		<Button>B</Button>
		<Button>C</Button>
		<Button>D</Button>
	</StackPanel>
</Page>

결과는 다음과 같다. (배경색은 왼쪽 상단이 붉은색으로 시작하여 오른쪽 하단으로 가면서 노란색으로 변하는 그래디언트가 적용된다)

암시적 스타일은 전체 애플리케이션의 컨트롤에 스타일을 제공하는 좋은 방법이다. 좀 더 정교한 스타일링을 위해 단순히 키 스타일을 사용한다. 



5.8 연습문제 : 암시적 스타일을 사용해 메뉴 페이지 개선

Menu.xaml 페이지에서 모든 Send 버튼의 모양을 변경하려 한다. 이전 연습문제에서 만든 템플릿을 사용하자. 메뉴 페이지는 다음과 같다. 



5.9 연습 문제 풀이

1. 비주얼 스튜디오로 전환해 5.6 연습문제 풀이에서 작성한 BikeShop 프로젝트를 연다.

2. 보기 > 솔루션 탐색기 메뉴 항목을 클릭해 솔루션 탐색기를 연다. 

3. 솔루션 탐색기에서 Menu.xaml 파일을 더블 클릭하고 루트 Page 요소 바래 아래에 다음 코드를 추가한다. 

<Page.Resources>
	<Style TargetType="Button">
		<Setter Property ="Template">
			<Setter.Value>
				<ControlTemplate />
			</Setter.Value>
		</Setter>
	</Style>
</Page.Resources>

4. 이전 연습문제 풀이에서 선언한 Discussion.xaml 페이지에서 타원 모양 버튼의 ControlTemplate 요소 부분 코드를 복사한다. 


5. menu.xaml 페이지의 <ControlTemplate /> 요소를 복사한 코드의 ControlTemplate으로 바꾼다. 

<Page.Resources>
	<Style TargetType="Button">
		<Setter Property ="Template">
			<Setter.Value>
				<ControlTemplate  TargetType="Button">

					<Grid>
						<Ellipse Fill="#AA000000" Margin="10, 10, 0, 0"/>
						<Ellipse Fill="{TemplateBinding Background}" Margin="0, 0, 10, 10" />
						<ViewBox Margin="5, 5, 15, 15" >
							<ContentPresenter />
						</ViewBox>
					</Grid>
			</Setter.Value>
		</Setter>
	</Style>
</Page.Resources>

6. 애플리케이션을 실행(디버그 > 디버깅 시작 메뉴 항목 클릭)하고 Menu 페이지의 3개 버튼이 새 템플릿 버튼인지 확인한다. 

7. 애플리케이션을 닫는다. 


※ 알아두기
애플리케이션에 리소스를 적용하는 3가지 방법 정리

* 해당 컨트롤에 직접 정의(5.3 연습문제 풀이 : 버튼에 정의)

* 해당 페이지에만 영향을 미치도록 페이지에 정의(5.9 연습문제 풀이 : Menu 페이지에 정의)

* 해당 솔루션 전체에 영향을 미치도록 전역 위치에 정의(5.6 연습문제 풀이 : App.xaml 파일에 정의)