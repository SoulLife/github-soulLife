1장 : 소개


1.1 이 책에 없는 것

독자가 길을 잃지 않고 WPF를 빨리 배울수 있도록 최대한 작은 책으로 펴내고자 최선을 다했다. 이 책의 목적은 MVVM 패턴을 사용해 첫 번째 WPF 애플리케이션을 코딩하고, 필요할 때 더 많은 것을 스스로 찾을 수 있는 도구를 신속하게 제공하는 것이다. 

WPF에서 향후 4년 내에 발생할 수 있는 모든 질문에 대한 답변을 찾을 수 있는 참고서를 원한다면 다른 두꺼운 책을 추천한다. 일부 저자들이 가장 두꺼운 책을 저술했다고 자랑스럽게 생각하는 반면에 내 목적에 맞고 가능한 가장 얇은 책을 만들게 돼 기쁘게 생각한다. 그럼에도 14년간의 강의 경험을 바탕으로 필요하다고 생각되는 모든 것을 담고자 최선을 다했다. 


이 책은 WPF가 무엇이고 언제 사용하는지 독자가 알고 있다고 가정한다. 그렇지 않다면 왜 WPF인가? 장을 읽어보자. 



1.2 전제 조건

이 책의 목표를 달성하려면 다음을 수행해야 한다. 

※ C#으로 애플리케이션을 생성해본 기본 경험이 있어야 한다. (모든 유형의 애플리케이션이 해당한다)

※ 비주얼 스튜디오(Visual Studio)에 대한 실무 지식이 있어야 한다. 

※ XML 구문에 대한 기본 지식을 갖추고 있어야 한다. 

※ SQL 서버에 대한 기본 지식을 갖추고 있어야 한다. 



※ 알아두기
VB.NET을 사용해 WPF 애플리케이션을 코딩할 수도 있다. 책을 작게 유지하기위해서, 그리고 필드 경험상 거의 모든 팀이 근래에 VB .NET을 넘어 C#을 선택하고 있다는 이유를 들어 이 책에 C# 코드만 포함하기로 결정했다. 




1.3 이 책을 읽는 방법

이 책의 목표는 독자의 생산성을 최대한 빨리 향상시키는 것이다. 생산성 목표를 위해 몇 가지 이론, 여러 가지 데모 및 연습문제를 사용한다. 연습 문제는 다음과 같은 모양이다. 


연필그림 : 직접 해보기 : 주어진 목표에 도달하기 위해 키보드를 잡고 코드 여행을 떠날 시간이다. 



1.4 필요한 도구

이 책의 작업에 필요한 유일한 도구는 비주얼 스튜디오(Visual Studio 2017)이다. 다음과 같은 버전의 사용이 가능하다. 

※ 비주얼 스튜디오 2017 커뮤니티(무료)

※ 비주얼 스튜디오 2017 프로페셔널




1.5 소스코드

데모 및 직접 해보기 솔루션의 모든 소스코드는 https://bitbucket.org/epobb/learnwpfexercises에서 다운로드할 수 있다. 한국어판은 에이콘출판사의 도서정보 페이지 http://www.acornpub.co.kr/book/learn-wpf-mvvm에서 찾아볼 수 있다. 


ZIP 파일로 다운로드하거나 GIT을 설치한 경우 간단하게 다음을 입력하면 된다. 


git clone https://bitbucket.org/epobb/learnwpfexercises.git






2장 : 왜 WPF인가?


독자가 여유가 없다면 2장을 건너뛰고 WPF 애플리케이션 생성 장으로 넘어가도 문제가 없다. 왜 WPF인가? 라는 2장은 결국 WPF를 사용해야 하는 이유를 알고 싶은 사람을 위한 장이다. 

WPF는 이전 개발 프레임워크에서 발생한 여러가지 문제를 해결한 데스크탑 애플리케이션용 닷넷(.NET) 개발 프레임워크다. 



※ 직관적이지 않은 애플리케이션

윈도우 XP를 기억하는가? 컴퓨터를 끄려면 [시작]이라는 제목의 버튼을 눌러야 했다. 정말 직관적이지 못하다. 주요 예 중 하나지만, 대부분의 소프트웨어가 좋지 않은 사용자 경험으로 어려움을 겪었다. 바로 사용자 자신이 하고자 하는 바를 찾기가 너무 복잡했다는 것이다. 일부 프로그램은 사용자가 애플리케이션을 사용하는 과정을 안내하기 위한 마법사 실행조차도 사용이 너무 복잡했다 프로세스를 잠시 짚고 넘어가자. 애플리케이션 사용은 프로세스가 아니어야 한다. 애플리케이션은 사용이 복잡하지 않아야 하고 사용자에게 현실적으로 적합해야 한다. 이런 논쟁이 UX 전문가에게는 좋을지 모르겠지만, 나의 요지는 왜 애플리케이션이 사용하기에 너무 복잡한가?라는 점이다. 

위 질문에 대한 답은 단순한 사실에 뿌리를 두고 있다. 개발자는 코드를 사용해 사용자 경험을 설계하게 요청받았다. 왜 그럴까? 많은 기술 제품군에서 사용자 경험이 UX 전문가에 의해 디자인되지 않고 개발자에 의해 코딩됐기 때문이다. 그렇다면 부적절한 도구를 사용하고 필요한 지식이 부족한 채로 누군가에게 올바르게 작업하기를 어떻게 기대할 수 있겠는가? 개발자는 사용자 경험에 대한 지식이 거의 없으며, 프로그래밍 언어는 사용자 인터페이스를 만드는 데 적절한 수단이 아니다. 

사용자 경험은 코드를 사용해 작성하면 안 되고 UX 전문가에 의해서 디자인돼야 한다는 것으로 모든것이 수렴된다. 



※ 칙칙한 애플리케이션

다음은 내가 회계용으로 사용한 애플리케이션이다. 

자 프로그램은 해야할 일을 한다. 하지만 인터페이스가 칙칙하다. 게다가 전체가 보이지도 않는다. 올바르게 크기를 조절하지 못하고 사용 가능한 화면 공간을 꽉 채우지 않으며 아이콘이 무작위로 선택된 것처럼 보인다. 필요시 자주 프로그램을 사용하고 싶지 않다는 것은 말할 필요가 없다. 

그러나 개발자가 애플리케이션의 칙칙함을 비난하기는 너무 쉽다. 

멋진 UI 코딩은 Windows Forms 같은 프레임워크를 사용하면 다음과 같은 처리를 위한 코드를 작성해야 하기 때문에 개발 시간이 두 배로 걸릴 수 있다. 


※ 크기 조절
※ 동질성 유지
※ 스타일 지정
※ 요소 배치

이러한 칙칙함의 또 다른 원인은 디자인 기술을 가진 개발자가 거의 없다는 것이다. 그리고그 반대의 경우도 있다. 




※ 멋진 GUI 는 꿈꿔 왔지만 구현되지 못했다. 

영화나 좋아하는 시리즈를 시청할 때 사라믇ㄹ이 컴퓨터를 사용하는 사용자 인터페이스를 살펴보자. 인터페이스들이 얼마나 잘 설계되고, 유동적이며 매력적인지 알 수 있는가? 악의적인 해커가 시스템에 들어가려고 하면 크게 반짝이는 해킹 버튼을 누르기만 하면 된다. 그리고 영웅이 언제 대통령을 몇 가지 예외적인 사건에서 구하는지 보려면 정보를 통해 슬라이드를 넘기고 익숙한 방식으로 확대 축소를 하기만 하면 된다. 

마이너리티 리포트에서 탐 크루즈가 했던 동일한 방식으로 그는 파일을 탐색하기 위해 제스처를 사용해 사진과 영화를 둘러볼 수 있었다. 

이것이 무슨 뜻일까? 매력적이고, 직관적이며 사용자 친화적인 IHM을 만들수 있는 사람이 있다는 것이다. 그러나 그 사람들은 컴퓨터 업계가 아닌 영화를 위해 일한다. 왜 그럴까? 글쎄 그 사람들이 우리 개발자에게 실망했기 때문이다. 

어떤 디자이너(또는 그 문제에 창조적인 사람)가 최근에 와서 이봐요, 떠다니는 유니콘이 있어서 돌아다니다가 털을 당기면 [여기에 필요한 무엇이든 추가하세요] 라고 한다면 멋질  것 같아요 라고 말했다고 그냥 생각해보자. 무엇이라고 답할 것인가? 아마 그건 가능하지 않아요 같은 대답일 것이다. 그러나 진짜로 의미하는 바는 비즈니스 로직 자체보다는 코드 작성에 더 많은 시간이 걸리기 때문에 합리적인 시간에 그렇게 할 수는 없다 일 것이다. 그리고 프레임워크가 그렇게 할 수 없기 때문에 개발자가 옳았다. 

그래서 무슨일이 일어났는가? 그 창조적인 사람이 자신의 아이디어가 무너지는 것을 보고 지쳐서 다른 곳으로 일을 찾아 가버렸다. 자신의 아이디어에 대해 유일하게 ~아니오 라는 대답을 듣지 않는 어떤 곳이다. 이미 알고 있는 영화, 시리즈 등을 만드는 곳이다. 



※ 외관 및 로직 분리

Windows Forms, MFC, C++ , 자바 스윙(Java Swing) 또는 기타 클라이언트 애플리케이션 프레임워크가 설계됐을 때 개발자는 사용자 인터페이스를 설명하기 위해 코딩 언어를 사용하는 그 프레임워크들을 자연스럽게 받아들였다. 예를 들어 Windows Forms의 UI는 C#이나 VB .NET을 사용해 다음과 같이 설명하고 있다 



Windows Forms의 UI 명세 예제

public class Form1 : Form
{
	public Form1()
	{
		Button b = new Button();
		b.Text = "Buy stocks";
		b.Left = 20;
		b.Top = 40;
		b.Click += new EventHandler(b_click);
	}
	void b_click(object sender, EventArgs e)
	{
		//...
	}
}


위 예제에서 버튼 생성 및 위치, 모양은 C#을 사용해 설정된다. 다음과 같은 두 가지 문제가 발생한다. 


1. 디자이너는 이 코드를 편집할 수 없다. 그녀가 그렇게 할 지식이 있다고 하더라도 디자이너가 C# 코드를 편집하게 할 것 인가?

2. 앞 코드를 언뜻 봐도 버튼 외관에 대한 단서는 제공되지 않는다. 모든 것이 디자인을 어렵게 만든다. 


사실, 우리 모두는 디자인 코드와 논리코드가 섞이면 안 된다는 것을 알고 있다. 그러나 Windows Forms는 실수를 저질렀다. 그리고 많은 다른 프레임워크가 그랬다. 



※ WPF 해결책

HTML 세계에서는 문제가 그리 어렵지 않다. 디자이너는 코더(Coder)가 비즈니스 로직 작업을 하는 동안 외관에 대해 작업을 한다. 왜 그게 될까? 단순하게 분리돼 있기 때문에 디자이너는 HTML 파일과 CSS 파일에서 작업해 외관을 설명하는 동안 개발자는 자바스크립트 파일에서 작업한다. 게다가 HTML 및 CSS는 외관을 설명하기에 충분하다. 

마이크로소프트는 WPF에서도 동일한 접근 방식을 채택했다. 그러나 HTML은 데스크탑 애플리케이션용으로는 너무 제한적이기 때문에 간단한 XAML을 만들어냈다. XAML(XML Application Markup Language, XML 애플리케이션 마크업 언어)은 XML이며, 더 강력한 HTML로 생각할 수 있다. 

디자인 코드와 논리 코드를 혼합하는 것은 오류이므로 WPF는 둘을 분리한다. 각 화면에는 다음과 같이 두 개의 파일이 있다. 


※ 애니메이션까지 모두 포함하는 외관을 설명하는 XAML 파일

※ 화면의 기능적 로직을 설명하는 코드 비하인드(Code-Behind) 라는 C# 파일


실제 예로 MyScreen이라는 화면을 생성하면 MyScreen.xaml(외관)및 MyScreen.xaml.cs(코드 비하인드)의 두 파일이 만들어진다. 

분리된 파일을 사용하면 디자이너와 개발자는 같은 프로젝트에서 각자 자신의 파일로 작업할 수 있어 모든 것이 더 잘되게 해준다. 

이 분리와는 별개로 WPF는 다음과 같은 기능을 도입했다. 


※ 컨트롤 조합 : 대부분의 컨트롤은 다른 컨트롤을 호스팅할 수 있다. 예를 들어 ListBox 컨트롤 내부에 버튼을 만들거나 Button 컨트롤 내부에 어떤 도형 및 비디오까지도 넣을 수 있다.


※ 모든 화면 해상도 적용 : Windows Forms처럼 픽셀(Pixel)을 사용해 작업하면 프로그램은 해상도가 높아질수록 작아진다. WPF는 화면 해상도와 독립적인 실제 크기 상태를 나타내는 장치 독립적 픽셀을 사용한다. 




※ 결론은 무엇인가?

WPF는 단순하게 인터페이스가 생성되기 전이나 생성 중, 또는 비즈니스 로직이 작성된 후를 보여주는 화려한 사용자 인터페이스를 허용한다. 이를 통해 C#에서 비즈니스 로직을 추가하는 것만으로 프로토타입을 애플리케이션으로 전환할수 있다. 

XAML은 매우 유연하기 때문에 이전 프레임워크를 사용해 몇 주가 걸린 대부분의 디자인 작업을 몇 시간 내에 완료할 수 있다. 예를 들어 Windows Forms의 탭에 닫기 버튼을 추가하는 데 5일이 걸리지만  WPF에서는 TabControl에 포함돼 있지 않더라도 닫기 버튼을 추가하는 것이 몇 분 만에 완료된다. 




※ XAML
디자이너가 쉽게 사용할수 있지만 XAML은 매우 강력한 도구다. XML 기반이기 때문에 여러 가지 XAML 고유 기능이나 XML도구들을 처리할 수 있다

XAML을 강력하게 만드는 기능 중 하나는 XAML이 닷넷 클래스를 인스턴스화하는 매우 쉬운 방법이라는 것이다. 더 자세한 내용은 3.9 XAML 이해 절을 참고하자. 