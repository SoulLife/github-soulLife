<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	TextBlock.FontSize="16" >

	<Canvas.Resources>
		<!-- 양쪽 그림에 공통인 프로퍼티를 설정 -->
		<Style x:Key = "figure">
			<Setter Property="Polygon.Points" 
			Value=" 0 48, 0 144, 96 144, 96 0, 192 0, 192 96, 48 96, 48 192, 144 192, 144 48"
			<Setter Property="Polygon.Fill" Value="Blue" />
			<Setter Property="Polygon.Stroke" Value="Red" />
			<Setter Property="Polygon.StrokeThickness" Value="3" />
		</Style>
	</Canvas.Resources>

	<!-- 첫 번째 그림을 "EvenOdd" FillRule을 이용해서 그림 -->
	<TextBlock Canvas.Left="48" Canvas.Top="24" Text="FillRule = EvenOdd" />
	<Polygon Style="{StaticResource figure}" FillRule="EventOdd" Canvas.Left="48" Canvas.Top="72" />
	
	<!-- 두 번째 그림을 "NonZero" FillRule을 이용해서 그림 -->
	<TextBlock Canvas.Left="288" Canvas.Top="24" Text="FillRule = NonZero" />
	<Polygon Style="{StaticResource figure}" FillRule="NonZero" Canvas.Left="288" Canvas.Top="72" />
</Canvas>

사각형, 타원형, 폴리곤의 외곽선 모양을 정의할 때 지금까지는 Shape 타입이 제공하는 2개의 프로퍼티만 이용했다. Stroke 프로퍼티를 이용해서 라인의 색을 지정했고, StrokeThickness 프로퍼티를 이용해서 라인의 굵기를 지정했다. 

System.Windows.Media 네임스페이스는 Pen 클래스를포함한다. Pen 클래스는 라인을 그리는데 필요한 8가지 프로퍼티를 제공한다. Pen 클래스가 WPF 그래픽에 사용되고 있지만 Shape 엘리먼트는 Pen 프로퍼티를 정의하지 않고 있다. 내부적으로 Pen을 사용하는 것은 분명해 보인다. 하지만 Shape 엘리먼트는 (pen이 제공하는)관련된 모든 프로퍼티를 자신의 프로퍼티로 정의한다. 이들 프로퍼티는 Stroke로 시작하며 Pen의 프로퍼티 이름과 같은 패턴의 이름을 갖는다. 다음은 Pen의 프로퍼티와 이에 대응하는 Shape의 프로퍼티를 비교한 도표이다. 

Pen 프로퍼티		타입			Shape 프로퍼티
Brush				Brush			Stroke
Thickness			Double		StrokeThickness
StartLineCap			PenLineCap		StrokeStartLineCap
EndLineCap			PetLineCap		StrokeEndLineCap
LineJoin			PenLineJoin		StrokeLineJoin
MiterLimit			Double		StrokeMiterLimit
DashStyle			DashStyle		StrokeDashArray(DoubleCollection)
							StrokeDashOffset(double)
DashCap			PenLineCap		StrokeDashCap

Shape 이 정의하고 있는 이들 프로퍼티는 분명히 XAML을 직접 작성하는 개발자를 편하게 한다. Shape의 Stroke 프로퍼티를 이용하면 라인의 색상을 다음과 같이 지정할 수 있다. 

<Ellipse Stroke="Blue" ... />

Shape 엘리먼트가 Pen 타입의 프로퍼티로 Pen 엘리먼트를 정의했다면 다음과 같은 구문을 작성해야 할 것이다.
<Ellipse ...>
	<Ellipse.Pen>
		<Pen Brush="Blue" .../>
	</Ellipse.Pen>
</Ellipse>

Shape이 제공하는 StrokeThickness 프로퍼티는 라인의 굵기를 장치 독립적 단위로 나타낸다. 라인이 굵어질수록 라인의 양쪽 끝 모양이 두드러진다. 기본적으로 다음 그림의 회색부분처럼 두꺼운 라인은 시작점과 마지막 점을 연결하는 검은색으로 표시된 기하학적 라인을 겹쳐 만든다. 그러면 라인의 양쪽 끝 모양은 갑작스럽게 끝난 것처럼 잘려 보인다. 

이런 라인의 시작과 끝 모양을 라인 캡(line cap)이라고 하고, PenLineCap 멤버에 열겨형 값으로 설정한다. 기본값은 PenLineCap.Flat이다. 다른 옵션으로는 Square, Round, Triangle 이 있으며, 이들은 시작점과 마지막 점으로 정의되는 기하학적 길이보다 라인의 실제 길이를 길게 만든다. 

다음의 간단한 XAML 파일은 4가지 라인 캡 효과를 보여준다. 출력된 결과를 보면 라인의 기하학적인 시작과 끝을 검은색의 가는 선으로 덧붙여 표시한 것을 볼 수 있다. 


<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Orientation="Horizontal">

	<StackPanel.Resources>
		<Style.TargetType="{x:Type Canvas}">
			<Setter Property="Width" Value="15" />
			<Setter Property="Margin" Value="12" />
		</Style>

		<Style x:Key="thin">
			<Setter Property="Line.X1" Value="00" />
			<Setter Property="Line.Y1" Value="50" />
			<Setter Property="Line.X2" Value="100" />
			<Setter Property="Line.Y2" Value="50" />
			<Setter Property="Line.Stroke" Value="Black" />
		</Style>

		<Style x:Key="thick"	BasedOn="{StaticResource thin}">
			<Setter Property="Line.Stroke" Value="LightGray" />
			<Setter Property="Line.StrokeThickness" Value="25" />
		</Style>
	</StackPanel.Resources>

	<!-- PenLineCap.Flat. -->
	<Canvas>
		<TextBlock Text="PenLineCap.Flat" />
		<Line Style="{StaticResource thick}" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" />
		<Line Style="{StaticResource thin}" />
	</Canvas>
	<!-- PenLineCap.Square. -->
	<Canvas>
		<TextBlock Text="PenLineCap.Square" />
		<Line Style="{StaticResource thick}" StrokeStartLineCap="Square" StrokeEndLineCap="Square" />
		<Line Style="{StaticResource thin}" />
	</Canvas>

	<!-- PenLineCap.Round. -->
	<Canvas>
		<TextBlock Text="PenLineCap.Round" />
		<Line Style="{StaticResource thick}" StrokeStartLineCap="Round" StrokeEndLineCap="Round" />
		<Line Style="{StaticResource thin}" />
	</Canvas>

	<!-- PenLineCap.Triangle. -->
	<Canvas>
		<TextBlock Text="PenLineCap.Triangle" />
		<Line Style="{StaticResource thick}" StrokeStartLineCap="Triangle" StrokeEndLineCap="Triangle" />
		<Line Style="{StaticResource thin}" />
	</Canvas>
</StackPanel>

이와 비슷한 이슈가 폴리라인에도 존재한다. 직선과 직선이 연결되는 연결점 처리에 관한 것이다. 이 이슈는 라인 조인(line join)이라고 불린다. Shape 객체의 StrokeLineJoin 프로퍼티를 PenLineJoin 열거형의 멤버로 설정한다. PenLineJoin의 멤버는 Bevel, Miter, Round이다. Bevel 조인과 Miter 조인은 두 라인의 연결점을 날카로운 화살표 모양이 되게 한다. Bevel 조인은 연결점을 깎아서 표시하지만 Miter 조인은(어느 한도까지는)그렇지 않다. 

StrokeLineJoin은 Polygon과 Polyline 이외에 Rectangle에도 영향을 준다. 다음 XAML프로그램이 이를 보여준다. 



<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Orientation="Horizontal">

	<StackPanel.Resources>
		<Style.TargetType="{x:Type TextBlock}">
			<Setter Property="Canvas.Left" Value="25" />
		</Style>
		<Style TargetType="{x:Type Canvas}" >
			<Setter Property="Width" Value="150" />
			<Setter Property="Margin" Value="12" />
		</Style>
		<Style TargetType="{x:Type Rectangle}" >
			<Setter Property="Width" Value="100" />
			<Setter Property="Height" Value="100" />
			<Setter Property="Canvas.Top" Value="50" />
			<Setter Property="Canvas.Left" Value="25" />
			<Setter Property="Stroke" Value="Black" />
			<Setter Property="StrokeThickness" Value="25" />
		</Style>
	</StackPanel.Resources>

	<!-- PenLineJoin.Bevel. -->
	<Canvas>
		<TextBlock Text="PenLineJoin.Bevel" />
		<Rectangle StrokeLineJoin="Bevel" />
	</Canvas>

	<!-- PenLineJoin.Round. -->
	<Canvas>
		<TextBlock Text="PenLineJoin.Round" />
		<Rectangle StrokeLineJoin="Round" />
	</Canvas>

	<!-- PenLineJoin.Miter. -->
	<Canvas>
		<TextBlock Text="PenLineJoin.Miter" />
		<Rectangle StrokeLineJoin="Miter" />
	</Canvas>
</StackPanel>

Miter 조인은 두 직선이 아주 작은 각도로 연결될 때만 드러나는 문제점이 하나 있다. 다음의 PenProperties.xaml 파일을 이용해서 실험해보면 라인의 끝 처리와 조인 처리에 대해 좀 더 깊게 이해할수 있을 것이다. 

<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!-- Cell이 하나뿐인 Grid에 Polygon을 그림 -->
	<PolyLine Margin="0.5in, 1.5in, 0, 0" Points="0 0, 500 25, 0 50" VerticalAlignment="Center" Stroke="Blue"
		StrokeThickness="{Binding ElementName=sliderThickness, Path=Value}"
		StrokeStartLineCap="{Binding ElementName=lstboxStartLineCap, Path=SelectedItem.Content}"
		StrokeEndLineCap="{Binding ElementName=lstboxEndLineCap, Path=SelectedItem.Content}"
		StrokeLineJoin="{Binding ElementName=lstboxLineJoin, Path=SelectedItem.Content}"
		StrokeMiterLimit="{Binding ElementName=sliderMiterLimit, Path=Value}" />
	
	<!-- Grid의 같은 cell에 가로방향 StackPanel을 생성 -->
	<StackPanel Grid.Column="0" Margin=" 0, 12, 0, 0" Orientation="Horizontal">

		<!-- 5개의 user-interface 그룹에 스타일을 지정 -->
		<StackPanel.Resources>
			<Style x:Key="uigroup">
				<Setter Property="StackPanel.VerticalAlignment" Value="Top" />
				<Setter Property="StackPanel.Width" Value="100" />
				<Setter Property="StackPanel.Margin" Value="12, 0, 12, 0" />
			</Style>
		</StackPanel.Resources>

		<!-- StrokeThickness 프로퍼티를 조정하기 위한 Slider -->
		<StackPanel Style="{StaticResource uigroup}">
			<Label Content="_Thickness" />
			<Slider Name="sliderThickness" Minimum="0" Maximum="100" Value="24" />
		</StackPanel>

		<!-- StrokeStartLineCap 프로퍼티를 조정하기 위한 ListBox -->
		<StackPanel Style="{StaticResource uigroup}" >
			<Label Content="_StartLineCap" />
			<ListBox Name="lstboxStartLineCap">
				<ListBoxItem Content="{x:Static PenLineCap.Flat}" />
				<ListBoxItem Content="{x:Static PenLineCap.Square}" />
				<ListBoxItem Content="{x:Static PenLineCap.Round}" />
				<ListBoxItem Content="{x:Static PenLineCap.Triangle}" />
			</ListBox>
		</StackPanel>

		<!-- StrokeEndLineCap 프로퍼티를 조정하기 위한 ListBox -->
		<StackPanel Style="{StaticResource uigroup}" >
			<Label Content="_EndLineCap" />
			<ListBox Name="lstboxEndLineCap">
				<ListBoxItem Content="{x:Static PenLineCap.Flat}" />
				<ListBoxItem Content="{x:Static PenLineCap.Square}" />
				<ListBoxItem Content="{x:Static PenLineCap.Round}" />
				<ListBoxItem Content="{x:Static PenLineCap.Triangle}" />
			</ListBox>
		</StackPanel>

		<!-- StrokeLineJoin 프로퍼티를 조정하기 위한 ListBox -->
		<StackPanel Style="{StaticResource uigroup}" >
			<Label Content="_LineJoin" />
			<ListBox Name="lstboxLineJoin">
				<ListBoxItem Content="{x:Static PenLineJoin.Bevel}" />
				<ListBoxItem Content="{x:Static PenLineJoin.Round}" />
				<ListBoxItem Content="{x:Static PenLineJoin.Miter}" />
			</ListBox>
		</StackPanel>

		<!-- StrokeMiterLimit 프로퍼티를 조정하기 위한 Slider -->
		<StackPanel Style="{StaticResource uigroup}" >
			<Label Content="_MiterLimit" />
			<Slider Name="sliderMiterLimit" Minimum="0" Maximum="100" Value="10" />
		</StackPanel>
	</StackPanel>
</Grid>


이 프로그램은 두 개의 직선으로 이루어진 부등호처럼 생긴 폴리라인을 그린다. 이 프로그램은 Slider 컨트롤과 ListBox 컨트롤을 생성해서 사용자가 Polyline 프로퍼티 5개를 바꿀 수 있게 한다. 

이 Polyline은 꼬리가 길다. 이는 StrokeLineJoin 프로퍼티를 PenLineJoin.Miter로 했을 때 생기는 문제점을 보여준다. 예를 들어 두께가 1인치인 폴리라인이 1도로 연결될 경우 미터 조인을 적용하면 4.5피트 이상 꼬리가 늘어진다(w를 라인의 굵기라고 하고 a를 연결 각도라고 하면, 실제 연결점 이후로 길어지는 미터 꼬리의 길이는 (w/2)/sin(a/2)가 된다) 

이런 이유로 미터 조인의 꼬리 길이를 제한하기 위해 StrokeMiterLimit 프로퍼티가 제공된다(어느 한도를 넘으면 꼬리를 자른다) 미터 조인을 선택하고 첫 번째 Slider 컨트롤로 라인 굵기를 굵게 하면 StrokeMiterLimit 프로퍼티가 동작하는 것을 볼 수 있다. 어떤 한계점을 넘으면 연결 부분이 잘려진다. 두 번째 Slider 컨트롤로 StrokeMiterLimit 의 폭을 늘일 수 있다. 

이전 도표에 있던 Pen 관련 프로퍼티 중에 설명하지 않은 프로퍼티가 2개 남았다. DashStyle과 DashCap이다. 이들 프로퍼티를 이용하면 무늬가 있는 라인을 그릴 수 있다. 즉 점(dot)이나 대시(dash)로 이루어진(또는 점과 대시가 혼합된)라인을 그릴 수 있다. DashStyle 프로퍼티는 DashStyle 타입의 객체이며 2개의 프로퍼티를 갖는다.(DoubleCollection 타입의)Dashes와 (Double 타입의)Offset이다. Dashes 컬렉션에 포함된 엘리먼트들은 라인을 그릴때 사용할 온/오프 패턴을 나타낸다. 

하지만 Shape 엘리먼트는 DashStyle 클래스 근처에도 가지 않는다. 대신 DashStyle을 대체할 StrokeDashArray와 StrokeDashOffset 프로퍼티 2개를 정의한다. 이다. 다음의 XAML 파일은 Line 엘리먼트의 StrokeDashArray 프로퍼티를 " 1 2 2 1"로 설정하고 있다. 

<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Line X1="48" Y1="48" X2="1000" Y2="48" Stroke="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" StrokeThickness="1"
		StrokeDashArray="1 2 2 1" />
</Canvas>

이 XAML 파일을 실행하면 굵기와 같은 길이의 대시(dash)로 라인이 시작하는 것을 볼 수 있다. 그 다음 굵기의 2배가 되는 공백이 오고, 그 다음 굵기의 2배가 되는 대시가 온다. 마지막으로 굵기와 같은 길이의 공백이 온다. 이후 같은 패턴이 계속 반복된다. 

StrokeDashOffset값은 대시 패턴의 오프셋 값이다. 예를 들어 OneTwoTwoOne.xaml 파일에 다음처럼 StrokeDashOffset을 1로 지정해 보자. 

StrokeDashOffset = "1"

이제 라인은 2단위(즉 굵기의 2배인)공백으로 시작한다. 

OneTwoTwoOne.xaml 파일의 StrokeDashArray 프로퍼티에는 사실 문제가 있다. Shape 클래스는 PenLineCap 타입의 StrokeDashCap 프로퍼티를 정의하고 있다(이 프로퍼티는 Pen 클래스의 DashCap 프로퍼티에 해당하는 것이다)이 프로퍼티에는 StrokeStartLineCap 프로퍼티와 StrokeEndLineCap 프로퍼티에 사용했던 것과 같은 열거형을 사용할 수 있다. 4개의 열거형 멤버(Flat, Square, Round, Triangle)를 기억할 것이다. 기본값은 Flat이다. 이 경우 대시와 공백의 길이는 StrokeDashArray 프로퍼티가 지정하는 값과 정확히 일치한다. 하지만 DashCap 프로퍼티에 다른 값을 설정하면 대시의 길이가 길어진다. 다음 속성을 XAML 파일에 추가해서 문제를 확인하자. 

StrokeDashCap="Round"

위 프로퍼티를 적용하면 점이 더 이상 점 같아 보이지 않는다. 마치 작은 소시지처럼 보인다. StrokeDashArray를 " 0 3 1 2"로 바꾸면 이전과 유사한 패턴을 얻을 수 있다. 

다음 XAML 프로그램은 "2 2"로 정의된 StrokeDashArray를 이용해서 DashCap 프로퍼티에 대한 4가지 설정 값 사이의 차이를 보여준다. 


<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Grid.Resources>
		<Style TargetType="{x:Type TextBlock}" >
			<Setter Property="FontSize" Value="16" />
			<Setter Property="Margin" Value="24" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>

		<Style TargetType="{x:Type Line}">
			<Setter Property="Grid.Column" Value="1" />
			<Setter Property="Y1" Value="30" />
			<Setter Property="X2" Value="400" />
			<Setter Property="Y2" Value="30" />
			<Setter Property="StrokeThickness" Value="25" />
			<Setter Property="Stroke" Value="Black" />
			<Setter Property="StrokeDashArray" Value="2 2" />

			<Setter Property="StrokeStartLineCap" Value="{Binding RelativeSource={RelativeSource self}, Path=StrokeDashCap}" />
			<Setter Property="StrokeEndLineCap" Value="{Binding RelativeSource={RelativeSource self}, Path=StrokeDashCap}" />
		</Style>
	</Grid.Resources>

	<Grid.RowDefinitions>
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
	</Grid.RowDefinitions>

	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="Auto" />
		<ColumnDefinition Width="Auto" />
	</Grid.ColumnDefinitions>

	<!-- PenLineCap.Flat. -->
	<TextBlock Grid.Row="0" Text="PenLineCap.Flat" />
	<Line Grid.Row="0" />

	<!-- PenLineCap.Square. -->
	<TextBlock Grid.Row="1" Text="PenLineCap.Square" />
	<Line Grid.Row="1" StrokeDashCap="Square" />

	<!-- PenLineCap.Round. -->
	<TextBlock Grid.Row="2" Text="PenLineCap.Round" />
	<Line Grid.Row="2" StrokeDashCap="Round" />

	<!-- PenLineCap.Triangle. -->
	<TextBlock Grid.Row="3" Text="PenLineCap.Triangle" />
	<Line Grid.Row="3" StrokeDashCap="Triangle" />
</Grid>
Line에 대한 Style 정의가 StrokeDashCap 프로퍼티를 StrokeStartLineCap 프로퍼티와 StrokeEndLineCap 프로퍼티에 바인딩해 놓은 것을 유의하자. 라인은 이들 3개의 프로퍼티가 같은 값을 가질 때 가장 자연스러워 보인다. 

Flat 스타일만 2단위 대시와 2단위 공백이 번갈아 표시된다. 다른 스타일일 때는 StrokeDashArray를 "1 3" 으로 설정해야 비슷하게 표시된다. 

System.Windows.Media 네임스페이스는 DashStyle 클래스(이 클래스는 Dashes와 Offset 프로퍼티를 갖는다)와 DashStyles 클래스를(복수형인 것에 주의하자)포함하고 있다. DashStyles 클래스는 5개의 정적 프로퍼티(static property)를 갖는다. 그 프로퍼티의 이름은 Solid, Dot, Dash, DashDot, DashDotDot이며, DashStyle 타입이다. 


DashStyles Static Property			Dashes Property
Solid							
Dot							0 2
Dash							2 2
DashDot						2 2 0 2
DashDotDot						2 2 0 2 0 2

Pen 클래스에 있는 DashCap 프로퍼티는 기본값이 PenLineCap.Square이다. 이는 점과 대시 가 라인 굵기의 반만큼 늘어난다는 것을 의미한다. 여기에 제시한 다양한 Dashes 배열은 그것을 염두에 두고 만들어졌다. 그렇기 때문에 DashCap 프로퍼티를 PenLineCap.Flat으로 설정하면 모양이 틀려지게 된다. PenLineCap.Flat은 Shape엘리먼트가 정의하는 StrokeDashCap 프로퍼티의 기본값이다. 속성을 다음과 같이 정의한다면 

StrokeDashArray="0 2"

기본 StrokeDashCap 프로퍼티 값인 Flat 상태에서는 아무런 라인도 볼 수 없을 것이다. 왜냐하면 대시의 길이가 0단위이기 때문이다. 개인적으로는 사용하는 StrokeDashCap 프로퍼티값에 맞게 Stroke DashArray를 직접 만들어서 사용할 것을 추천한다. 

StrokeDashCap의 값으로 Square, Round, Triangle 중 하나를 사용한다면 DashStyles 클래스의 정적 프로퍼티 중 하나를 StrokeDashArray 프로퍼티에 바인딩해서 이용할수 있다. DashStyles.Dot 정적 프로퍼티(다른 스타일도 상관없다)를 바인딩해서 이용하려면 x:Static 마크업 확장 구문을 사용해야 한다. 그리고 마크업 바인딩이 DashStyle 클래스의 Dashes 프로퍼티를 참조할수있게 Path를 설정해야 한다. 그런 방식으로 바인딩을 이용해서 타원형 주변에 점선을 그리는 프로그램을 소개한다. 

<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	WindowTitle="Ellipse with Styled Lines">
	<Ellipse Margin="0.5in" Fill="Blue" Stroke="Red" StrokeDashArray={Binding Source={x:Static DashStyles.Dot}, Path=Dashes, Mode=OneTime}"
		StrokeThickness="36pt" StrokeDashCap="Round">
	</Ellipse>
</Page>

프로그램의 결과로 출력되는 이미지는 상당히 흥미롭다. StrokeDashCap을 Round로 설정했기 때문에 라인을 구성하는 점이 실제로도 점처럼 보인다. 일련의 동그란 공들이 타원을 둘러 싸고 있는 모습이다. 점이 일부만 어색하게 표시되는 곳이없는 곳을 보면 이런 상황을 처리하기 위해 특별한 코딩을 사용한 것이 틀림없어 보인다. 

이번 장에서는 Shape 에서 파생된 모든 클래스를 살펴보았다. 한 가지 살펴보지 않은 클래스가 있는데, Path이다. Path는 직선과 곡선으로 구성된 집합이다. Shape이 정의하는 프로퍼티이외에 Path가 새로 정의하는 프로퍼티는 한 가지 뿐이다. Data란 이름의 프로퍼티로, Geometry 타입이다. 이 프로퍼티는 무척 막강한 그래픽기능을 제공한다. Geometry와 Path는 28장의 주제이다. 