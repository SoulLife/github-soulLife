<Polygon xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Points="144 48, 200 222, 53 114, 235 114, 88 222" Fill="Red" Stroke="Blue" StrokeThickness="5" />

Polygon은 PointCollection 타입의 Points라는 프로퍼티를 포함하고 있는데, 운 좋게도 PointCollectionConverter는 연속적인 X와 Y좌표를 포인트로 명세할 수 있게 해준다. 여기서 숫자는 공백이나 콤마 어느 것으로도 구분할 수 있는데, 어떤 사람은 X와 Y좌표 사이에 콤마를 넣고 각 포인트 사이를 공백으로 구분하며 필자를 포함한 그밖에 다른 사람들은 콤마로 좌표를 구분하는 것을 선호하기도 한다. 

BrushConverter 클래스는 Brushes 클래스의 정적 멤버를 색상으로 명세할 수 있게 하는데, 물론 16진법으로 RGB 색상 값을 사용할 수도 있다. 

Fill="#FF0000"

다음은 같은 색상이지만 128의 알파 채널(반투명)을 가지고 있다. 

Fill="sc#0.5, 1,0,0"

이제 SolidColorBrush 타입 객체로 Fill 프로퍼티를 설정하지 않고 LinearGradientBrush로 설정해 보자. 

하지만 여기서 갑자기 어떻게 Fill 프로퍼티에 문자열만으로 LinearGradientBrush를 설정할 수 있을지 막막해진다. SolidColorBrush는 하나의 값만 필요한 반면에 그라디언트(gradient)브러시는 적어도 2개의 값과 그라디언트 스탑이 있어야 하기 때문이다. 여기서 마크업의 한계가 드러나는 것처럼 보인다. 

하지만 실제로는 LinearGradientBrush를 XAML 속에서 명세할 수 있다. 첫째 Fill 프로퍼티에 솔리드 브러시를 설정하는 대안을 살펴보면 일단 Polygon 객체의 빈 컨텐트 태그를 종료 태그로 바꾼다. 
<Polygon xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Points="144 48, 200 222, 53 114, 235 114, 88 222" Fill="Red" Stroke="Blue" StrokeThickness="5" >
</Polygon>

이제 Polygon 태그 내의 Fill 속성을 제거하고 Polygon.Fill이란 이름의 자식 엘리먼트로 교체하고 이 엘리먼트의 컨텐트를 문자열 Red로 설정한다. 
<Polygon xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Points="144 48, 200 222, 53 114, 235 114, 88 222" Fill="Red" Stroke="Blue" StrokeThickness="5" >
	<Polygon.Fill>
		Red
	</Polygon.Fill>
</Polygon>

여기서 용어를 확실히 정리할 필요가 있다. 많은 XAML 엘리먼트는 클래스와 구조체를 참조 하고 그 결과로 객체를 생성하는데, 이것을 객체 엘리먼트(object elements, 역자주:한글 비주얼 스튜디오에서는 object 요소라고 표현한다)라고 한다. 

<Polygon ... />

때로 엘리먼트는 이 객체상에서 프로퍼티를 설정하는 객체를 가지고 있는데, 이것을 프로퍼티 속성(property attributes)이라고 한다. 

Fill="Red"

또한 자식 엘리먼트를 포함하는 대안적인 문법으로 프로퍼티를 명세할수도 있는데, 이것은 프로퍼티 엘리먼트(property elements, 역자주: 한글 비주얼 스튜디오에서는 속성 요소라고 표현한다)라고 한다. 

<Polygon.Fill>
	Red
</Polygon>

프로퍼티 엘리먼트는 엘리먼트 이름과 프로퍼티 이름 사이에 점으로 표현하는데, 프로퍼티엘리먼트는 속성이 없기 때문에 다음과 같은 표현은 절대 볼 수 없다. 

<!-- 잘못된 문법! -->
<Polygon.Fill SomeAttribute="Whatever">
	...
</Polygon.Fill>

이것은 XML 네임스페이스 선언에서도 나올 수 없는데, XAML Cruncher의 프로퍼티 엘리먼트에서 속성 설정을 시도하면 "XamlReader.Load가 발생하는 속성 요소에 속성을 설정할수 없습니다(Cannot set properties on property elements)"라는 예외 상황 메시지를 볼 수 있다. 

프로퍼티 엘리먼트는 반드시 프로퍼티 타입으로 변환될 수 있는 컨텐트를 포함해야 하는데, Polygon.Fill 프로퍼티 엘리먼트는 Brush 타입의 Fill 프로퍼티를 참조하기 때문에 프로퍼티 엘리먼트는 반드시 Brush로 변환될 수 있는 컨텐트를 가져야 한다. 

<Polygon.Fill>
	Red
</Polygon.Fill>

다음과 같이 할 수도 있다. 
<Polygon.Fill>
	#FF0000
</Polygon.Fill>

좀 더 길게 표현해 Polygon.Fill 컨텐트를 더 명확하게 표현할 수 있다. 
<Polygon.Fill>
	<Brush>
		Red
	</Brush>
</Polygon.Fill>

Polygon.Fill 프로퍼티 엘리먼트의 컨텐트는 이제 "Red" 문자열의 Brush 객체 엘리먼트인데, 이 컨텐트는 사실 SolidColorBrush 타입의 객체로 변환될 수 있기 때문에 다음과 같이 Polygon.Fill 프로퍼티 엘리먼트를 표현할수 있다. 

<Polygon.Fill>
	<SolidColorBrush>
		Red
	</SolidColorBrush>
</Polygon.Fill>

SolidColorBrush에는 Color라는 이름의 프로퍼티가 있는데, ColorConverter는 Brush 컨버터와 같은 변환을 수행하기 때문에 SolidColorBrush의 Color프로퍼티를 프로퍼티 속성으로 설정 할 수 있다. 

<Polygon.Fill>
	<SolidColorBrush Color="Red">
	</SolidColorBrush>
</Polygon.Fill>

하지만 SolidColorBrush를 Brush로 대체할 수는 없는데, Brush에는 Color라는 이름의 프로퍼티가 없기 때문이다. 

SolidColorBrush는 또한 컨텐트가 없기 때문에 다음과 같이 빈 엘리먼트 문법으로 기술할 수 있다 

<Polygon.Fill>
	<SolidColorBrush Color="Red" />
</Polygon.Fill>

아니면 SolidColorBrush의 Color 프로퍼티를 다음과 같은 프로퍼티 엘리먼트 문법으로 확장할 수도 있다. 
<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			Red
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

SolidColorBrush 클래스의 Color 프로퍼티는 Color 타입의 객체이기 때문에 SolidColorBrush.Color의 컨텐트를 위한 객체 엘리먼트를 다음과 같이 명확하게 사용할 수 있다. 

<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			<Color>
				Red
			</Color>
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

색상은 byte 타입의 A, R, G, B라는 이름의 프로퍼티를 가지는데, 이 프로퍼티를 Color 태그내에서는 10진수나 16진수의 문법으로 다음과 같이 설정할 수 있다. 

<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			<Color A="255" R="#FF" G="0" B="0">
			</Color>
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

이 4개의 프로퍼티는 SolidColorBrush.Color 태그 속에서는 설정할 수 없음을 명심해야 한다. 왜냐하면 예외 상황 메시지 내용처럼 프로퍼티 엘리먼트(한글 비주얼 스튜디오에서의 속성요소)에 속성을 설정할 수는 없다. 

또한 Color 엘리먼트에는 컨텐트가 없기 때문에 다음과 같이 빈 엘리먼트 문법으로 기술해야 한다. 

<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			<Color A="255" R"#FF" G="0" B="0" />
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

아니면 하나 혹은 그 이상으로 Color 속성을 분해한다. 
<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			<Color A="255" G="0" B="0">
				<Color.R>
					#FF
				</Color.R>
			</Color>
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

Color 내의 R 프로퍼티의 타입은 System 네임스페이스에 정의된 Byte 구조체인데, R 데이터 타입을 더 명확하게 표현하기 위해 Byte 엘리먼트를 XAML 속으로 넣는 것이 가능하다. 하지만 System 네임스페이스는 XAML 파일 상단에 정의된 2개의 XML 네임스페이스와 관계된 CLR 네임스페이스에 속하지 않기 때문에 Byte 구조체를 XAML 파일 내에서 참조하기 위해서는 또 다른 XML 네임스페이스 선언이 필요하다. 다음과 같이 접두어 s로 System 네임스페이스를 선언해 보자. 

xmlns:s="clr-namespace:System;assembly=mscorlib"

따옴표 속에는 clr-namespace 문자열과 콜론 뒤에 실제 CLR 네임스페이스 이름이 나오는데, 이것은 프로그램 내에 CLR 네임스페이스와 앞의 접두어를 연결시키기 위함이다(19장의 UseCustomClass 프로젝트에서 표현됐던 것과 같다) System 네임스페이스 내의 클래스와 구조체는 외부 어셈블리 속에 있기 때문에 추가 정보가 필요한데, 세미콜론 뒤에 assembly라는 단어가 나오고, 그 뒤에 등호와 실제 어셈블리 이름을 명시한다. clr-namespace와 CLR 네임스페이스 이름은 콜론으로 나누고 assembly와 어셈블리 이름은 등호로 나눈다는 것을 유념하자. 
또한 콜론을 사용한 표현은 전통적인 네임스페이스 선언인 http:와 유사하게 표현한 것이다. 

앞의 선언은 Byte 엘리먼트 속이나 Byte 엘리먼트의 부모 속에 있어야 하는데, 다음과 같이 선언을 부모인 Color 엘리먼트 속에 넣어보자(이유는 뒤에 명확해진다)
	
<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			<Color xmlns:s="clr-namespace:System;assembly=mscorlib"  A="255" G="0" B="0">
				<Color.R>
					<s:Byte>
						#FF	
					</s:Byte>
				</Color.R>
			</Color>
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

극단적으로 4개의 프로퍼티를 모두 분리해서 다음과 같이 표현할 수도 있다. 


<Polygon.Fill>
	<SolidColorBrush>
		<SolidColorBrush.Color>
			<Color xmlns:s="clr-namespace:System;assembly=mscorlib"  >
				<Color.A>
					<s:Byte>
						255
					</s:Byte>
				</Color.A>
				<Color.R>
					<s:Byte>
						255
					</s:Byte>
				</Color.R>
				<Color.G>
					<s:Byte>
						0
					</s:Byte>
				</Color.G>
				<Color.B>
					<s:Byte>
						0
					</s:Byte>
				</Color.B>
			</Color>
		</SolidColorBrush.Color>
	</SolidColorBrush>
</Polygon.Fill>

새로운 네임스페이스 선언이 첫 번째 Byte 엘리먼트에 있었더라면 XAML은 동작하지 않았을 것이다. 왜냐하면 네임스페이스 선언은 엘리먼트가 있는 곳과 그것이 포함하는 모든 엘리먼트에서만 적용되기 때문이다. 

실제 필요한 수준보다 XAML이 너무 복잡해지고 있기 때문에 문법의 설명은 이것으로 마친다. 하지만 이제까지 설명한 문법은 Fill 프로퍼티에 그라디언트 브러시를 정의하기 위해 필요한 것이다. 

LinearGradientBrush는 StartPoint와 EndPoint라는 2개의 프로퍼티를 가지고 있는데, 기본적으로 이 프로퍼티는 색칠되는 객체의 좌표 시스템에서 적용된다. 또한 세 번째 중요한 프로퍼티는 색상을 지정하는 GradientStop 객체 컬렉션 중 하나인 GradientStopCollection 타입의 GradientStops 프로퍼티이다. 

Polygon.Fill 프로퍼티는 Brush 타입의 컨텐트를 반드시 가져야 하는데, LinearGradient Brush타입의 객체 엘리먼트가 이 조건을 만족시킨다. 

<Polygon.Fill>
	<LinearGradientBrush ...>
		...
	</LinearGradientBrush>
</Polygon.Fill>

StartPoint와 EndPoint 프로퍼티는 LinearGradientBrush 시작 태그 속에 프로퍼티 속성으로 간단히 정의될 수 있다. 

<Polygon.Fill>
	<LinearGradientBrush StartPoint="0 0" EndPoint="1 0">
		....
	</LinearGradientBrush>
</Polygon.Fill>

하지만 GradientStops 프로퍼티는 반드시 프로퍼티 엘리먼트가 되어야 한다. 
<Polygon.Fill>
	<LinearGradientBrush StartPoint=" 0 0" EndPoint="1 0">
		<LinearGradientBrush.GradientStops>
			...
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
</Polygon.Fill>

GradientStops 프로퍼티는 GradientStopCollection 타입이기 때문에 이 클래스를 객체 엘리먼트로 넣는다. 

<Polygon.Fill>
	<LinearGradientBrush StartPoint=" 0 0" EndPoint="1 0">
		<LinearGradientBrush.GradientStops>
			<GradientStopCollection>
				...
			</GradientStopCollection>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
</Polygon.Fill>

GradientStopCollection 클래스는 GradientStop의 IList 인터페이스를 구현했으므로 그 것의 멤버를 다음과 같이 간단한 자식으로 기술하는 것이 가능한데, 각 GradientStop 엘리먼트를 빈 엘리먼트 문법으로 간단히 표현한 것에 주목하자. 

<Polygon.Fill>
	<LinearGradientBrush StartPoint=" 0 0" EndPoint="1 0">
		<GradientStopCollection>
			<GradientStop Offset="0" Color="Red" />
			<GradientStop Offset="0.5" Color="Green" />
			<GradientStop Offset="1" Color="Blue" />
		</GradientStopCollection>
	</LinearGradientBrush>
</Polygon.Fill>

LinearGradientBrush.GradientStops 프로퍼티 엘리먼트나 GradientStopCollection 객체 엘리먼트를 여기서 꼭 포함해야 하는 것은 아니기 때문에 다음에서는 이것을 삭제해 간단히 표현했다. 

<Polygon.Fill>
	<LinearGradientBrush StartPoint=" 0 0" EndPoint="1 0">		
		<GradientStop Offset="0" Color="Red" />
		<GradientStop Offset="0.5" Color="Green" />
		<GradientStop Offset="1" Color="Blue" />
	</LinearGradientBrush>
</Polygon.Fill>

이제 끝났따. Polygon.Fill 프로퍼티는 LinearGradientBrush 타입의 객체로서 StartPoint, EndPoint, GradientStops라는 프로퍼티와 3개의 GradientStop 객체 컬렉션을 포함하며, 그 GradientStop에는 Offset과 Color 프로퍼티가 있다. 

자 다음에 RadialGradientBrush를 가진 별이 있다. 

<Polygon xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Points="144 48, 200 222, 53 114, 235 114, 88 222" Stroke="Blue" StrokeThickness="5">
	<Polygon.Fill>
		<RadialGradientBrush>
			<GradientStop Offset="0" Color="Blue" />
			<GradientStop Offset="1" Color="Red" />
		</RadialGradientBrush>
	</Polygon.Fill>
</Polygon>

이제 Button으로 되돌아가 보자. 다음 XAML 파일은 Content 프로퍼티를 포함해 3개의 프로퍼티를 속성으로 설정했다. 

<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Foreground="LightSeaGreen"	FontSize="24pt" Content="Hello, XAML!">
</Button>

여기서 Foreground 속성을 다음과 같이 프로퍼티 엘리먼트로 표현할 수 있다. 
<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	FontSize="24pt" Content="Hello, XAML!">
	<Button.Foreground>
		LightSeaGreen
	</Button.Foreground>
</Button>
또는 다음과 같이 FontSize 속성을 프로퍼티 엘리먼트로 표현할 수 있다. 

<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Foreground="LightSeaGreen" Content="Hello, XAML!">
	<Button.FontSize>
		24pt
	</Button.FontSize>
</Button>

아니면 Foreground와 FontSize 모두 프로퍼티 엘리먼트로 표현할 수도 있을 것이다. 

<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Content="Hello, XAML!">
	<Button.Foreground>
		LightSeaGreen
	</Button.Foreground>
	<Button.FontSize>
		24pt
	</Button.FontSize>
</Button>

Content 프로퍼티를 프로퍼티 엘리먼트로 표현하는 것도 역시 가능하다. 

<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Foreground="LightSeaGreen" FontSize="24pt" >
	<Button.Content>
		Hello, XAML!
	</Button.Content>
</Button>

하지만 이 경우에 Button.Content 태그는 필요 없다. 
<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Foreground="LightSeaGreen" FontSize="24pt" >	
		Hello, XAML!	
</Button>

그리고 사실은 이 컨텐트와 프로퍼티 엘리먼트를 같이 섞을수도 있는데, 다음은 구분을 위해 빈 줄을 몇 줄 삽입했다. 
<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Button.Foreground>
		LightSeaGreen
	</Button.Foreground>
	Hello, XAML!
	<Button.FontSize>
		24pt
	</Button.FontSize>
</Button>

Button의 프로퍼티를 Button의 시작 태그 속에 속성으로 설정할 수도 있고, Content 프로퍼티를 제외하고는 값이 엘리먼트의 자식인 프로퍼티 엘리먼트 문법으로 표현할 수도 있다. 여기서 Content 프로퍼티는 특별하다. 왜냐하면 Content 프로퍼티의 값은 프로퍼티 엘리먼트의 사용 없이도 Button 엘리먼트의 자식으로 직접 다룰 수 있기 때문이다. 

그럼 도대체 무엇이 Content 를 특별하게 만드는 걸까?

XAML에서 사용하는 모든 클래스는 잠재적으로 컨텐트 프로퍼티(Content Property)로 인식되는 특별한 하나의 프로퍼티가 있다. Button의 경우에 컨텐트 프로퍼티는 Content인데, 컨텐트 프로퍼티로 인식되는 프로퍼티는 System.Windows.Serialization 네임스페이스에 정의된 ContentPropertyAttribute에 정의된다. 따라서 PresentationFramework.dll 소스 코드의 Button 클래스 정의는 아마도 다음과 같을 것이다. 
[ContentProperty("Content")]
public class Button : ButtonBase
{
	...
}

또는 Button이 ContentControl로부터 ContentProperty 속성을 간단히 상속받을 수도 있을 것이다. 다른 한편 StackPanel의 ContentProperty 속성은 다음과 같이 정의되어 있을 것이다. 

[ContentProperty("Children")]
public class StackPanel: Panel
{
	...
}

이 ContentProperty 속성은 StackPanel의 자식을 StackPanel 엘리먼트의 자식으로 포함하게 해준다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Button HorizontalAlignment="Center">
		Button number One
	</Button>

	<TextBlock HorizontalAlignment="Center" >
		TextBlock in the middle
	</TextBlock>

	<Button HorizontalAlignment="Center">
		Button Number One
	</Button>
</StackPanel>

LinearGradientBrush와 RadialGradientBrush의 컨텐트 프로퍼티는 GradientStops이다. 

TextBlock 클래스의 컨텐트 프로퍼티는 Inline 객체의 컬렉션인 Inlines 컬렉션인데, Run 클래스가 Inline을 상속받았고 그 Run의 컨텐트 프로퍼티는 문자열 타입 객체인 Text 이므로 이런 조합을 이용하면 TextBlock 컨텐트의 정의에 다음과 같은 자유를 누릴 수 있다. 

<TextBlock>
	This is <Italic>italic</Italic> text and this is <Bold>bold</Bold> text
</TextBlock>

Italic과 Bold 클래스의 컨텐트 프로퍼티 역시 Inline 이므로 앞의 XAMl 조각은 다음과 같이 Italic과 Bold가 Span으로부터 상속받은 Text 프로퍼티를 참조하는 형태로 간단히 대체가 가능하다. 

<TextBlock>
	This is <Italic Text="italic" /> text and this is <Bold Text="bold" /> text
</TextBlock>

지금까지 XAML 을 작성할 때 컨텐트 프로퍼티가 얼마나 중요한지 보았다. 이제 모든 클래스의 ContentProperty 속성과 그 컨텐트 프로퍼티 자체에 대해 궁금해질 것이다. 다음에 이 정보를 제공하는 콘솔 프로그램이 있다. 