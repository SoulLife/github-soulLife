using Petzold.ContentTemplateDemo;
using System;
using System.Windows;
using System.Windows.Controls;


public class EmployeeTemplateSelector : DataTemplateSelector
{
	public override DataTemplate SelectTemplate(object item, DependencyObject container)
	{
		Employee emp = item as Employee;
		FrameworkElement el = container as FrameworkElement;

		return (DataTemplate) el.FindResource(emp.LeftHanded ? "templateLeft" : "templateRight");
	}
}

SelectTemplate의 첫 번째 인자는 Employee 타입의 객체이며, 두 번째 인자는 ContentPresenter 타입의 객체이다. 메소드는 Employee의 FindResource를 사용해 LeftHanded 프로퍼티에 따라 templateLeft나 templateRight 키를 가진 템플릿 중에 하나를 반환한다. 

다음 XAML 파일에는 EmployeeTemplateSelector와 SelectTemplate 키를 묶은 Resources 절이 있으며, 그 다음엔 templateRight와 templateLeft 키를 가진 2개의 템플릿이 있다 이 템플릿은 오른손잡이 직원의 Image를 오른쪽에 표시하고, 왼손잡이 직원의 Image는 왼쪽에 표시하며, 그 외의 나머지는 이전과 동일하다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:emp="clr-namespace:Petzold.ContentTemplateDemo"	xmlns:src="clr-namespace:Petzold.SelectDataTemplate"
	x:Class="Petzold.SelectDataTemplate.SelectDataTemplate" Title="Select DataTemplate">
	<Window:Resources>
		<src:EmployeeTemplateSelector x:Key="selectTemplate" />

		<DataTemplate x:Key="templateRight">
			<DockPanel>
				<Image DockPanel.Dock="Right" Stretch="None" Source="{Binding Path=Face}" />
				<UniformGrid Rows="2" VerticalAlignment="Center" Margin="12" >
					<TextBlock FontSize="16pt" TextAlignment="Center" Text="{Binding Path=Name}" />	
					<StackPanel Orientation="Horizontal" TextBlock.FontSize="12pt">
						<TextBlock Text="{Binding Path=BirthDate.Month}" />
						<TextBlock Text="/" />
						<TextBlock Text="{Binding Path=BirthDate.Day}" />
						<TextBlock Text="/" />
						<TextBlock Text="{Binding Path=BirthDate.Year}" />
					</StackPanel>
				</UniformGrid>
			</DockPanel>
		</DataTemplate>

		<DataTemplate x:Key="templateLeft">
			<DockPanel>
				<Image DockPanel.Dock="Left" Stretch="None"	Source="{Binding Path=Face}" />
				<UniformGrid Rows="2" VerticalAlignment="Center" Margin="12">
					<TextBlock FontSize="16pt" TextAlignment="Center" Text="{Binding Path=Name}" />
					<StackPanel Orientation="Horizontal" TextBlock.FontSize="12pt">	
						<TextBlock Text="{Binding Path=BirthDate.Month}" />
						<TextBlock Text="/" />
						<TextBlock Text="{Binding Path=BirthDate.Day}" />
						<TextBlock Text="/" />
						<TextBlock Text="{Binding Path=BirthDate.Year}" />
					</StackPanel>
				</UniformGrid>
			</DockPanel>
		</DataTemplate>

		<Style TargetType="{x:Type Button}">
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Margin" Value="12" />
		</Style>
	</Window.Resources>

	<StackPanel>
		<Button ContentTemplateSelector="{StaticResource selectTemplate}">
			<Button.Content>
				<emp:Employee Name="Bettey" BirthDate="8/31/1970" Face="Betty.png" LeftHanded="False" />
			</Button.Content>
		</Button>
		<Button ContentTemplateSelector="{StaticResource selectTemplate}">
			<Button.Content>
				<emp:Employee Name="Edgar" BirthDate="2/2/1965" Face="Edgar.png" LeftHanded="True" />
			</Button.Content>
		</Button>
		<Button ContentTemplateSelector="{StaticResource selectTemplate}">
			<Button.Content>
				<emp:Employee Name="Sally" BirthDate="7/12/1980" Face="Sally.png" LeftHanded="True" />
			</Button.Content>
		</Button>
		<Button ContentTemplateSelector="{StaticResource selectTemplate}">
			<Button.Content>
				<emp:Employee Name="Jim" BirthDate="6/15/1975" Face="Jim.png" LeftHanded="False" />
			</Button.Content>
		</Button>
	</StackPanel>
</Window>

XAML 파일의 나머지 부분은 창의 레이아웃을 정의한다. 4개의 버튼은 ContentTemplateSelector를 selectTemplate 리소스(EmployeeTemplateSelector 객체)로 설정해야 하며, 이것으로 컨텐트를 보여주기 위한 템플릿을 얻게 된다. 다음의 파일로 이 프로젝트는 마무리된다.  

using System;
using System.Windows;

public partial class SelectDataTemplate : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new SelectDataTemplate());
	}
	public SelectDataTemplate()
	{
		InitializeComponent();
	}
}

SelectDataTemplate 프로젝트가 컨텐트를 보여주기 위해 템플릿을 선택하는 유용한 방법을 보여주었지만 사실 이 작업을 하기 위해 ContentTemplateSelector 프로퍼티를 꼭 사용해야 할 필요는 없다. 


using System;
using System.Windows;

public partial class TriggerDataTemplate : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new TriggerDataTemplate());
	}
	public TriggerDataTemplate()
	{
		InitializeComponent();
	}
}
다음 XAML 파일은 template이란 키를 가진 DataTemplate 하나만을 정의한다. Image 엘리먼트는 img라는 이름을 가지고 그것의 DockPanel.Dock 프로퍼티를 Left로 설정하는데, 이 것이 왼손잡이 직원을 위한 템플릿이다. 또한 DataTemplate은 Triggers 포함하며, 이 Triggers는 Employee의 LeftHanded 프로퍼티를 ㅊ마조하는 Binding 을 가진다. 따라서 이 값이 false일 경우(오른손잡이 직원이라는 것을 의미)Setter는 Image 객체의 DockPanel.Dock 프로퍼티를 Right로 설정한다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:emp="clr-namespace:Petzold.ContentTemplateDemo" x:Class="Petzold.TriggerDataTemplate.TriggerDataTemplate" Title="Trigger DataTemplate">
	<Window.Resources>
		<DataTemplate x:Key="template">
			<DockPanel>
				<Image Name="img" DockPanel.Dock="Left" Stretch="None" Source="{Binding Path=Face}" />
				<UniformGrid Rows="2" VerticalAlignment="Center" Margin="12" >
					<TextBlock FontSize="16pt" TextAlignment="Center" Text="{Binding Path=Name}"/>
					<StackPanel Orientation="Horizontal" TextBlock.FontSize="12pt">
						<TextBlock Text="{Binding Path=BirthDate.Month}" />
						<TextBlock Text="/" />
						<TextBlock Text="{Binding Path=BirthDate.Day}" />
						<TextBlock Text="/" />
						<TextBlock Text="{Binding Path=BirthDate.Year}" />
					</StackPanel>
				</UniformGrid>
			</DockPanel>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding Path=LeftHanded}" Value="False">
					<Setter TargetType="img" Property="DockPanel.Dock" Value="Right" />
				</DataTrigger>
		</DataTemplate>
		
		<Style TargetType="{x:Type Button}">
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Margin" Value="12" />
		</Style>
	</Window.Resources>

	<StackPanel>
		<Button ContentTemplate="{StaticResource template}">
			<Button.Content>
				<emp:Employee Name="Betty" BirthDate="8/31/1970" Face="Betty.png" LeftHanded="False" />
			</Button.Content>
		</Button>
		<Button ContentTemplate="{StaticResource template}">
			<Button.Content>
				<emp:Employee Name="Edgar" BirthDate="2/2/1965" Face="Edgar.png" LeftHanded="True" />
			</Button.Content>
		</Button>
		<Button ContentTemplate="{StaticResource template}">
			<Button.Content>
				<emp:Employee Name="Sally" BirthDate="7/12/1980" Face="Sally.png" LeftHanded="True" />
			</Button.Content>
		</Button>
		<Button ContentTemplate="{StaticResource template}">
			<Button.Content>
				<emp:Employee Name="Jim" BirthDate="6/15/1975" Face="Jim.png" LeftHanded="False" />
			</Button.Content>
		</Button>
	</StackPanel>
</Window>

WPF 컨트롤 중에 중요하다고 할 수 있는 ContentControl을 상속받은 컨트롤은 ContentTemplate 프로퍼티를 사용해 레이아웃 정의가 가능하다는 것을 머릿속에 새겨두자. ContentControl 다음으로는 ItemsControl이 가장 중요한 부분을 차지한다. ItemsControl은 MenuItem, TreeViewItem, ListBox, ComboBox, ListView등과 같이 여러 객체를 보여주는 클래스의 기본이다. 

ItemsControl은 물론 일반적인 Template 프로퍼티를 상속받았다. ListBox의 Template 프로퍼티는 꽤 간단한데, 항목을 보여주는 ItemsPresenter를 ScrollViewer가 감싸고 이것을 다시 Border가 감싼다. 

ItemsControl은 또 다른 템플릿과 관련된 프로퍼티인 ItemsPanel 프로퍼티를 정의하는데, 이것은 가장 간단한 형태의 템플릿이다. 이 프로퍼티는 ItemsPanelTemplate 타입이며, 전체 비주얼 트리는 반드시 Panel을 상속받은 하나의 엘리먼트로 구성돼야 한다. ItemsControl의 ItemsPanel 프로퍼티와 ItemsControl을 상속받은 클래스를 연구하려면 25장의 앞부분에서 선보인 DumpControlTemplate 프로그램을 이용해 보자. ItemsControl을 상속받은 클래스의 템플릿은 대부분 StackPanel이다. 그리고 Menu의 경우는 WrapPanel이며(이것 때문에 최상위 메뉴 항목이 일렬로 배치될 수 있다)StatusBar는 DockPanel과 흡사하지만 항목이 많은 경우를 위해 최적화돼있다. 

ListBox(또는 ItemsControl을 상속받은 다른 클래스)속의 패널을 다른 것으로 바꾸는 것은 꽤 쉽다. 다음에 간단한 예제가 있다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<ListBox HorizontalAlignment="Center" VerticalAlignment="Center">
		<ListBox.ItemsPanel>
			<ItemsPanelTemplate>
				<UniformGrid />
			</ItemsPanelTemplate>
		</ListBox.ItemsPanel>

		<ListBoxItem>Whatever Item 1</ListBoxItem>
		<ListBoxItem>Whatever Item 2</ListBoxItem>
		<ListBoxItem>Whatever Item 3</ListBoxItem>
		<ListBoxItem>Whatever Item 4</ListBoxItem>
		<ListBoxItem>Whatever Item 5</ListBoxItem>
		<ListBoxItem>Whatever Item 6</ListBoxItem>
		<ListBoxItem>Whatever Item 7</ListBoxItem>
		<ListBoxItem>Whatever Item 8</ListBoxItem>
		<ListBoxItem>Whatever Item 9</ListBoxItem>
	</ListBox>
</Page>

여기서 한 것은 ListBox 항목을 보여주기 위해 일반적으로 사용되는 VirtualizingStackPanel을 UniformGrid로 바꾼 것이 전부이다. ListBox는 여전히 경계(border)가 있으며, 페이지를 작게 만들면 패널이 ScrollViewer로 감싸져 있다는 것을 알 수 있을 것이다. 나머지 로직은 기존과 같다. 

ListBox의 항목이 아홉개 이기 때문에 UniformGrid의 열과 행이 3으로 자동 설정됐다. 이것은 UniformGrid 엘리먼트 내에서 변경하는 것이 가능하다. 

<UniformGrid Columns="2" />

이 ListBox의 작은 문제점은 항목들이 서로 겹친다는 것이다. 이 문제를 해결하는 가장 최선의 방법은 ListBoxItem에 작은 Style을 간단히 추가하는 것이다. ListBox 엘리먼트 내에 다음의 XAML을 포함해 보자. 

<ListBox.Resources>
	<Style TargetType="{x:Type ListBoxItem}">
		<Setter Property="Padding" Value="3"/>
	</Style>
</ListBox.Resources>

여기에서 Padding 대신 Margin을 사용할 수도 있다. 하지만 효과는 그다지 만족스럽지는 않다. 왜냐하면 항목이 선택되면 Padding은 그 선택 안에 여백이 적용되지만 Margin은 선택된 바깥에 여백이 적용되기 때문이다. 

각 항목을 보여주기 위해서 ItemsControl은 DataTemplate 타입의 ItemTemplate이란 이름의 프로퍼티를 정의한다. 이 ItemTemplate이 ListBox내 항목의 외형을 담당하며 ListBox내에 저장된 데이터의 프로퍼티를 직접 참조하는 것을 제외하면 ContentControl에서 정의된 ContentTemplate을 사용하는 것과 유사하다. 

ListBox 내에서 색과 색 이름을 보여주기 위해 코드 내에 DataTemplate을 정의했던 13장의 ListColorsEventElegantlier 프로젝트를 기억할 것이다. 다음에 선보일 ColorListBoxTemplate프로젝트는 기능적으로 그것과 같지만 XAML 에서 모든 것을 구현했다(13장의 ListNamedBrushes 프로젝트의 NamedBrush 클래스와의 링크는 제외)이 프로그램은 다음 애플리케이션 정의파일과 함께 시작된다. 


<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  StartupUri="ColorListBoxTemplateWindow.xaml" />


프로그램 창을 위한 다음의 XAML 파일은 Resource절에 DataTemplate을 정의한다. DataType은 NamedBrush 클래스이며, 비주얼 트리는  Rectangle과 TextBlock을 포함한 수평 StackPanel이다. 또한 Rectangle의 Fill 프로퍼티는 NamedBrush의 Brush 프로퍼티와 바운딩되었으며, TextBlock의 Text 프로퍼티는 NamedBrush의 Text프로퍼티와 바운딩됐다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:nb="clr-namespace:Petzold.ListNamedBrushes" Title="Color ListBox Template" Background="{Binding ElementName=lstbox, 	Path=SelectedValue}">
	<Window.Resources>
		<DataTemplate x:Key="clrlstbox" DataType="NamedBrush">
			<StackPanel Orientation="Horizontal">
				<Rectangle Width="16" Height="16" Margin="2" Stroke="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
					Fill="{Binding Path=Brush}" />
				<TextBlock VerticalAlignment="Center" Text="{Binding Path=Name}" />
			</StackPanel>
		</DataTempate>
	</Window.Resources>

	<ListBox Name="lstbox" ItemTemplate="{StaticResource clrlstbox}" ItemSource="{x:Static nb:NamedBrush.All}" Width="150" Height="150"
		HorizontalAlignment="Center" VerticalAlignment="Center" SelectedValuePath="Brush" />
</Window>

창은 하나의 ListBox를 포함하는데, 이 ListBox의 ItemTemplate는 Resources절에 정의된 DataTemplate으로 설정된다. 따라서 ListBox의 항목은 수평 StackPanel 상에 Rectangle과 TextBlock으로 표시된다. 또한 ListBox의 ItemsSource 프로퍼티는 NamedBrush의 정적 ALl 프로퍼티로 설정되었는데, 이 프로퍼티는 System.Windows.Media에 정의된 Brushes 클래스로부터 생성한 NamedBrush 객체 전부를 저장한 배열이다. 

ListBox의 SelectedValuePath 프로퍼티는 NamedBrush의 Brush로 할당되었는데, 이것은 선택된 NamedBrush의 Brush 프로퍼티란 의미이다. 또한 Window 엘리먼트의 시작 태그에서 는 SelectedValue와 자신의 Background 프로퍼티와의 Binding을 정의한다. 

26장을 계획하던 도중 필자는 WPF의 첫 번째 릴리즈 버전에는 없는 DatePicker 컨트롤이 필요하다고 느꼇다. 그리고 달력은 ItemsPanelTemplate을 7열의 UniformGrid로 설정한 ListBox로 표현할 수 있다는 사실을 떠올랐다. 달에 따라 ListBox에는 항상 28, 29, 30, 31개 의 항목이 있을 것이고, 항목은 1부터 시작되는 숫자일 것이다. UniformGrid의 FirstColumn 프로퍼티는 달력이 시작하는 날짜가 일요일이 아닌 나라의 날짜 입력을 위해 사용된다. 

DatePicker 컨트롤의 결과는 전체 달을 보여주고 달 중에 하루를 선택할 수 있게 할 것이다. 또한 컨트롤은 반복 버튼을 통해 달을 앞뒤로 왔다 갔다 할 수 있게 할 것이다. 하지만 이 컨트롤은 한 줄로 줄어들지도 않고 키보드 인터페이스도 많지 않기 때문에 완벽한 컨트롤이라고는 볼 수 없다. 예를 들어 년, 월, 일을 손으로 직접 타이핑해 입력할 수없다. 대신에 PageUp과 PageDown 키를 통해 달을 이동하는 버튼의 기능이 구현됐다. 그리고 이 버튼은 Shift와 Ctrl키에 영향을 받는데, Shift와 Ctrl 키가 눌리지 않은 상태에선 한 달을 기준으로 왔다갔다하며, Shift 키를 누른 상태에선 1년을 기준으로 Ctrl 키를 누른 상태에선 10년을 기준으로 Shift와 Ctrl키를 모두 누른 상태에선 100년을 기준으로 달을 이동한다. 

다음은 dataPicker 컨트롤의 XAML 부분이다. 루트 엘리먼트의 x:Class 속성은 본질적으로 ControlControl과 동일한 UserControl을 기본으로 한 새로운 클래스를 정의한다. 또한 이 파일의 Resources 절은 몇 가지 Style을 포함한다. RepeatButton 컨트롤은 버튼을 사각형으로 만드는 스타일을 가지며, 나머지 두 Style은 XAML에서 명확히 확인하기 힘든 StatusBarItem과 ListBoxItem에 해당하는 것이다. 하지만 StatusBar와 ListBox가 존재한느 것이 사실이기에 이 스타일은 이 컨트롤에 의해 보여지는 항목에 적용된다. 

Resources 절에 뒤따라서 레이아웃 정의가 시작된다. 전체적으로 4행의 Grid가 있으며, 첫 번째 행은 년, 월과 더불어 RepeatButton 컨트롤이 양쪽 끝에 위치한다. 두 번째 행은 요일을 표시하며, 세 번째 행은 날짜를 ListBox에 표시한다. 마지막 네 번째 행에는 Not applicable 이라는 텍스트를 가진 CheckBox가 있다(뒤에서 살펴보자). 


<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:g="clr-namespace:System.Globalization;assembly=mscorlib" x:Class="Petzold.CreateDatePicker.DatePicker">
	<UserControl.Resources>

		<!-- RepeatButton을 사각으로 만듦-->
		<Style TargetType="{x:Type RepeatButton}" >
			<Setter Property="Width" Value="{Binding RelativeSource={RelativeSource self}, Path=ActualHeight}" />
			<Setter Property="Focusable" Value="False" />

			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=chkboxNull, Path=IsChecked}" Value="True">
					<Setter Property="IsEnabled" Value="False" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<!-- StatusBarItem를 위한 스타일(요일) -->
		<Style TargetType="{x:Type StatusBarItem}" >
			<Setter Property="Margin" Value="1" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>

		<!-- ListBoxItem를 위한 스타일(날짜) -->
		<Style TargetType="{x:Type ListBoxItem}">
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="BorderBrush" Value="Transparent" />
			<Setter Property="Margin" Value="1" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Style.Triggers>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsSelected" Value="True" />
						<Condition Property="Selector.IsSeletionActive" Value="False" />
					</MultiTrigger.Conditions>
					<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushkey}}" />
				</MultiTrigger>
				<DataTrigger Binding="{Binding ElementName=chkboxNull, Path=IsChecked}" Value="True">
					<Setter Property="IsEnabled" Value="False" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</UserControl.Resources>

	<!-- Border가 4행의 Grid를 포함 -->
	<Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<!-- Label과 Button을 위한 Grid -->
			<Grid Background="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TextBlock.Foreground="{DynamicResource
					{x:Static SystemColors.ControlLightLightBrushKey}}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<RepeatButton Grid.Column="0" Content="&lt;" FontWeight="Bold" Click="ButtonBackOnClick" />
				<TextBlock Name="txtblkMonthYear" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="3" />
				<RepeatButton Grid.Column="2" Content="&gt;" FontWeight="Bold" Click="ButtonForwardOnClick" />
			</Grid>

			<!-- 요일을 위해 UniformGrid를 가진 StatusBar -->
			<StatusBar Grid.Row="1" ItemSource="{Binding Source="{x:Static g:DateTimeFormatInfo.CurrentInfo}, Path=AbbreviatedDaynames}">
				<StatusBar.ItemsPanel>
					<ItemsPanelTemplate>
						<UniformGrid Rows="1" />
					</ItemsPanelTemplate>
				</StatusBar.ItemsPanel>
			</StatusBar>

			<!-- 날짜를 위해 uniformGrid를 가진 ListBox -->
			<Border Grid.Row="2" BorderThickness="0 1 0 1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}">
				<ListBox Name="lstboxMonth" SelectionChanged="ListBoxOnSelectionChanged">
					<ListBox.ItemsPanel>
						<ItemsPanelTemplate>
							<UniformGrid Name="unigridMonth" Columns="7" Rows="6" IsItemsHost="True"
								Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
						</ItemsPanelTemplate>
					</ListBox.ItemsPanel>
					<ListBoxItem>dummy item</ListBoxItem>
				</ListBox>
			</Border>

			<!-- Null 날짜를 만들기 위한 CheckBox -->
			<CheckBox Name="chkboxNull" Grid.Row="3" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" 
				Checked="CheckBoxNullOnChecked" UnChecked="CheckBoxNullOnUnChecked">
				Not applicable
			</CheckBox>
		</Grid>
	</Border>
</UserControl>

Grid의 첫 번째 행은 2개의 RepeatButton 컨트롤과 년, 월을 표시하기 위한 TextBlock 하나를 포함한 총 3개의 열을 가진 별도의 Grid를 포함한다. 

Grid의 두 번째 행은 요일을 표시한다. 달력에서 이 부분을 보여주기 위해 StatusBar를 사용했는데, 왜냐하면 StatusBar가 여러 항목을 보여줄 수 있으면서도 항목의 선택은 제한하기 때문이다. 일반적인 StatusBar는 항목을 보여주기 위해 DockPanel을 사용하는데, 여기서는 StatusBar의 ItemsPanel을 7개의 열을 가진 UniformGrid로 설정했다. 또한 Items Source는 DateTimeFormatInfo 의 AbbreviatedDaysNames 프로퍼티와 바인딩돼있는데, 이 때문에 사용자의 언어에 맞는 요일을 보여주는 것이 가능하다. 다만 일요일부터 요일이 시작되지 않는 나라들(프랑스와 같은)에서는 예외가 있다. 따라서 이 예외를 해결하려면 DateTimeFOrmatInfo의 FirstDayOfWeek를 참조해 적절한 요일이 입력되게 해야 한다(아마도 C# 코드 내에서)

Grid의 세 번째 행은 ItemsPanel을 7개의 열을 가진 UniformGrid로 설정한 ListBox이다. 이것은 날짜를 표시해주기 위한 것인데, 날짜는 C# 코드에서 입력된다. 따라서 ListBox는 lstboxMonth라는 Name 속성을 가지며, 이전에 언급했듯이 C# 코드에서 UniformGrid의 FirstColumn을 사용하기 때문에 UniformGrid 역시 unigridMonth라는 Name 속성을 가진다. 

마지막 네 번째 행은 Not applicable라는 텍스트를 가진 CheckBox이다. 필자는 Null 날짜가 필요했는데, DatePicker 컨트롤에서 null 날짜를 가지기 위해서는 CheckBox를 사용하는 것이 간단하고 직접적인 방법이라는 생각이 들었다. 

알다시피 창이나 페이지 혹은 패널 내에서 XAML을 사용해 엘리먼트나 컨트롤을 정의할 때 특정 엘리먼트에 문자열로 Name 속성을 할당하면 그 문자열은 클래스의 코드 부분에서 사용할 수 있는 변수 이름이 된다. 하지만 템플릿 내의 Name 속성은 이것처럼 자동으로 변수이름이 되지는 않는다. 왜냐하면 동일한 템플릿이 여러 컨트롤에서 사용될 수 있기 때문이다. 대신에 클래스의 C# 부분에서는 템플릿 내에 특정 이름을 가진 엘리먼트를 찾기 위해 FrameworkTemplate에서 정의된 FindName 메소드를 사용할 수 있다. FindName은 템플릿 내의 엘리먼트가 실제 객체로 전환되지 않았을 떄는 null을 반환하며, 이 엘리먼트는 템플릿이 로드되고 그려질 때 생성된다. 따라서 FindName 이 항상 실제 값을 반환하게 하려면 FrameworkElement에서 정의된 비주얼 트리를 생성하는 메소드인 ApplyTemplate을 FindName이전에 호출한다. 

이 방법이 잘 동작해야 했지만 날짜를 표시하기 위한 UniformGrid가 문제 있는 것으로 판명됐다. 이 UniformGrid는 Name 속성(unigridMonth)이 있다. 하지만 이것은 ListBox 내의 ItemsPanel 템플릿 안에 묻혀있다. 여러 시도 끝에 UniformGrid를 찾기 위해 VisualTreeHelper를 사용한 재귀 메소드를 사용하기로 마음 먹었다. 이 코드는 창 위의 컨트롤이 로드될 때까지 수행이 연기된다. 

DatePicker.cs는 DatePicker의 코드 비하인드 파일이다. 이 클래스는 DateProperty라는 의존 프로퍼티에 의해 지원되는 Date 라는 이름의 프로퍼티를 정의한다. 이 프로퍼티는 null로 설정 가능한 DateTime 객체이며, null 값은 DateTime이 특정 조건에서 필요 없을 경우를 표현이다 예를 들어 26장에서는 사람의 태어난 날짜와 죽은 날짜를 위해 DatePicker를 데이터 엔트리 패널상에서 사용한다. 이 경우 사람이 아직 살아있으면 죽은 날짜는 null값이 되는 것이다. 

단순한 DateTime 대신에 null로 설정가능한 DateTime을 사용하는 것은 몇 가지 자체적인 어려움을 드러낸다. null로 설정 가능한 DateTime 객체는 직접 접근하는 것이 불가능하며, 값이 null일 경우 일반적인 DateTime으로 직접 형 변환할 수 없다. 

DatePicker 는 라우팅 이벤트 DateChangedEvent에 의해 지원받는 DateChanged라는 이름의 이벤트를 정의한다. 이름이 말해 주듯이 이 이벤트는 Date 프로퍼티가 바뀌었을 때 발생하게 된다. 