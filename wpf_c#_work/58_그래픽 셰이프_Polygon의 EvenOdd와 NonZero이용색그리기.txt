CHAPTER 27장 : 그래픽 셰이프
2차원 컴퓨터 그래픽은 대략 래스터 그래픽(비트맵)과 벡터 그래픽(라인, 커브, 채색 영역)으로 나눌 수 있다. 여기서 대략 이란 단어에 주의해야 한다. 이들 두 영역 사이에는 중첩되는 부분이 너무많다. 어떤 타원을 비트맵 브러시로 채색했다면 이것은 래스터 그래픽일까? 벡터 그래픽일까? 그것은 두 가지가 조금씩 섞인 것이다. 어떤 비트맵을 벡터 드로잉 기법으로 만들었다면 어떨까? 그것 역시 두가지가 조금씩 혼재된 것이다. 

지금까지 Image 엘리먼트를 이용해서 비트맵 이미지를 그리는 방법과 System.Windows.Shapes 네임스페이스의 클래스들을 이용해서 벡터 그래픽을 그리는 방법을 설명했다. (System.Windows.Shapes 네임스페이스를 셰이프 라이브러리라고도 부른다) 그래픽을 많이 사용하지 않는 애플리케이션이라면 지금까지 살펴본 클래스들로도 충분할 것이다. 하지만 이 클래스들은 WPF가 제공하는 그래픽 기능 전체를 생각할 때 빙산의 일각에 불과하다. 이제 WPF 그래픽을(애니메이션까지 포함해서)좀 더 자세히 살펴보려고 한다. 그리고 최종적으로는 이미지, 드로잉, 브러시에 래스터 그래픽과 벡터 그래픽을 혼합하는 방법 등에 대해 설명하려고 한다. 

27장에서는 셰이프 라이브러리를 이전 장보다 자세히 살펴볼 것이다. 셰이프 라이브러리가 사용하기 편한 이유는 거기에 속한 모든 클래스들이 다음 클래스 계층도에서 보듯이 FrameworkElement에서 파생됐기 때문이다. 


Object
	DispatcherObject(abstract)
		DependencyObject
			Visual(abstract)
				UIElement
					FrameworkElement
						Shape(abstract)
							Ellipse
							Line
							Path
							Polygon
							Polyline
							Rectangle

이런 상속 관계 덕분에 Shape 클래스 객체는 정규 컨트롤처럼 화면에 자신을 그릴 수도 있고, 마우스, 스타일러스, 키보드 등의 이벤트를 처리할 수도 있다. 

Shape 클래스에는 Brush 타입의 프로퍼티가 2개 있다. Stroke 프로퍼티와 Fill 프로퍼티가 그것이다. Stroke 프로퍼티는 라인(Ellipse, Rectangle, Polygon의 외곽선을 포함해서)을 그릴 때 사용하는 브러시이고, Fill 프로퍼티는 내부를 칠할 때 사용하는 브러시다. 이들 두 프로퍼티의 기본값은 null이다. 이들 프로퍼티를 이용하기 위해서는 직접 객체를 생성해야 한다. 

모든 프러퍼티에 대해 연구하지 않고서는 즉각 구별할 수 없겠지만 Shape에서 파생된 모든 클래스들은 두 가지 패러다임으로 구별할 수 있다. Line, Path, Polygon, Polyline 클래스는 모두(Point 객체나 이와 동등한 다른 방법을 통해)2차원 좌표 정보로 객체를 정의하며, 이를 위한 프로퍼티를 제공한다. 예를 들어 Line 클래스는 시작점과 종료점을 의미하는 X1, Y1, X2, Y2 프로퍼티를 제공한다. 

하지만 Ellipse와 Rectangle은 다르다. 이들은 좌표 정보로 객체를 정의하지 않는다. 이들은 크기를 설정하는 (FrameworkElement로부터 상속받은)Width 프로퍼티와 Height 프로퍼티를 이용한다. 이 책의 앞부분에서 Ellipse 객체를 만들어서 창 내부를 가득 채울 수 있는 크기로 설정한 다음 창 안에 표시하는 방법에 대해 설명한 바가 있다. 

Ellipse 같은 그래픽 객체를 화면에 표시하는 것은 쉽고 간단하다. 하지만 일반적으로 요구되는 것은 여러 개의 그래픽 객체를(겹쳐지게)조합해서 그리는 것이다. 여러 개의 그래픽 객체를 조합해서 표시하려면 중첩(overlapping)을 허용하는 패널이 필요하다. DockPanel, StackPanel, WrapPanel, Grid, UniformGrid 같은 패널은 자식 엘리먼트들을 구획해서 관리할 떄 편리하다. 하지만 그렇기 때문에 그래픽 프로그래밍에는 적합하지 않다. 

그래픽을 표시할 때는 Canvas 패널이 편리하다. 이 클래스는 바로 그 목적을 위해 존재한다. Canvas 패널에 Ellipse나 Rectangle 객체를 표시하려면 반드시 객체의 Width와 Height 프로퍼티를 설정해야 한다. 그러지 않으면 객체의 크기가 0이 되어 보이지 않게 된다(사실 항상 그런 것은 아니다. MinWidth와 MinHeight 프로퍼티가 있기 때문에 Stroke 프로퍼티가 null이 아니고 StrokeThickness가 1보다 크다면 화면에 객체가 표시된다. 비록 점으로 표시되겠지만)

Ellipse나 Rectangle 에 대해서 Width와 Height 외에도 Canvas.Left와 Canvas.Top 프로퍼티를 설정해야 한다. 이 프로퍼티는 Canvas의 좌측 상단을 기준으로 한 Ellipse 또는 Rectangle의 좌측 상단 위치를 나타낸다. Canvas.Left 대신에 Canvas.Right를 사용할 수 도 있다. 이는 Canvas의 오른쪽 측면을 기준으로 객체의 오른쪽 측면의 위치를 나타낸다. Canvas.Top 대신 Canvas.Bottom을 사용할 수도 있다. 이는 Canvas의 아랫면을 기준으로 객체 아랫면의 위치를 나타낸다. 

Line, Path, Polygon, PolyLine 같은 다른 Shape 파생 클래스들은 위치에 관한 Canvas 프로퍼티를 설정하지 않아도 된다. 왜냐하면 객체의 좌표 정보 자체가 Canvas 위에서의 위치를 나타내기 때문이다. 다음은 XAML 로 표현한 Line 엘리먼트이다. 

<Line X1="100" Y1="50" X2="400" Y2="100" Stroke="Blue" />

라인의 시작점은 (100, 50)이다. 이는 라인이 Canvas 의 왼쪽 측면으로부터 100단위 떨어지고, 윗면으로부터 50단위 떨어진 위치에서 시작한다는 의미이다. 라인의 종료점은 (400, 100)이 다. 역시 Canvas의 좌측 상단을 기준으로 한 상대 좌표이다. 

Line 엘리먼트를 위해 위치 관련 Canvas 프로퍼티를 지정할 필요는 없다. 하지만 함께 사용하는 것도 가능하다. 다음의 예를 보자. 

<Line X1="100" Y1="50" X2="400" Y2="100" Stroke="Blue" Canvas.Left="25" Canvas.Top="150" />

결과적으로 Canvas.Left 프로퍼티 값이 모든 X 좌표 값에 더해진다. 그리고 Canvas.Top 프로퍼티 값이 모든 Y좌표 값에 더해진다. 라인은 오른쪽으로 25단위, 아래로 150단위만큼 옮겨진다. 최종적으로(125, 200)에서 시작해서 (425, 250)에서 끝난다(모든 좌표는 Canvas의 좌측 상단을 기준으로 한다)Canvas.Left와 Canvas.Top 프로퍼티에 음수값을 설정할 수도 있다. 이 경우 엘리먼트는 반대 방향으로(왼쪽과 위쪽으로)옮겨진다.

Canvas.Left 대신 Canvas.Right 를 설정하면 라인의 오른쪽 측면이 Canvas의 오른쪽 측면으로부터 설정한 값만큼 떨어지게 (왼쪽으로)옮겨진다. Canvas.Right 에 음수값을 설정하면 객체의 오른쪽 측면이 Canvas의 오른쪽 측면을 벗어나게 라인이(오른쪽으로) 옮겨진다. 
Canvas.Bottom 프로퍼티도 Canvas의 아랫면을 기준으로 같은 방식으로 객체를 옮긴다. 

Canvas가 대부분의 그래픽 프로그래밍이 요구하는 대로 자식 객체를 자유롭게 위치시킬수 있는 유일한 패널은 아니다. 셀이 하나뿐인 Grid 패널도 여러 개의 자식 객체를 자유롭게 위치시킬수 있다. 그리고 어떤 경우에는 Grid의 셀이 개발목적에 더 잘 맞을수도 있다. 아무 문제없다.!

여러 개의 Line, Path, Polygon, Polyline 엘리먼트들을 한 개의 Grid 셀에 넣으면 해당 엘리먼트들은 부여된 좌표에 따라 셀의 좌측 상단을 기준으로 자리 잡을 것이다. 어느 엘리먼트라도 HorizontalAlignment 프로퍼티를 Center로 설정하면 해당 엘리먼트는 셀의 중앙에 위치한다. 아직 끝이 아니다. 객체의 폭은 원점으로부터 해당 객체의 가장 오른쪽 X 좌표 값까지로 계산된다. 예를 들어 앞서 예로 보인 첫 번째 라인의 경우 그폭은 400이다. 

그 전체 폭이 중앙에 위치시킬 대상이 된다. 그래서 해당 객체는 중앙에서 약간 오른쪽에 위치하는 것처럼 보인다. VerticalAlignment도 같은 방식으로 동작한다. 

Ellipse와 Rectangle 객체는 Grid 셀 위에서는 그다지 적합하게 동작하지 않는다. 이들 엘리먼트에는 Width와 Height 프로퍼티를 설정할 수 있다. 그리고 Margin 프로퍼티도 부여할 수 있다. 하지만 HorizontalAlignment와 VerticalAlignment 프로퍼티를 부여할 수 없다. 그래서 융통성이 부족하다. 

이제 Polygon과 Polyline클래스를 자세히 살펴보자(Path 클래스는 다음 장에서 설명할 것이다.) Polygon과 Polyline 클래스는 무척 비슷하다. 두 클래스 모두 PointCollection 타입의 Points 프로퍼티를 갖고 있다. 20장에서 본 것처럼 XAML은 좌표 배열을 표시할 때 X 값과 Y 값을 번갈아 표시한다. 

Points = "100 50 200 50 200 150 100 150"

이 구문은 사각형을 구성하는 4개의 점을 표현한다.(100, 50)에 좌측 상단이 위치하고 (200, 150)에 우측 하단이 위치한다. 숫자 뒤에 px를 추가해서 단위를 명시할 수도 있다. 센티미터는 cm으로 인치는 in로, 포인트 단위(1/72인치)는 pt로 표시한다. 

콤마를 사용해서 모든 값을 구분할 수도 있고 X좌표와 Y좌표를 구분할수도 있고, 각 점을 구분할 수도 있다. 

Points="100 50, 200 50, 200 150, 100 150"

필요하다면 문자열이 여러 줄로 나뉘어도 괜찮다.

Polygon과 Polyline이 연속된 직선을 그리는 것이지만 이들 클래스는 곡선을 그리는 데도 자주 사용된다. 곡선을 그리는 방법은 직선을 아주 짧게 아주 많이 사용하는 것이다. 수학적으로 정의할 수 있는 곡선이라면 Polygon과 Polyline 클래스로 모두 그릴수 있다. 수백개 수천개의 좌표를 쓴다고 주저하지마라 이들 클래스는 바로 그러한 목적으로 위해 만들어졌다. 

물론 Polyline을 위해 수천 개의 좌표를 입력하는 것은 C# 코드로나 할만한 일이다. 다음 프로그램은 사인 곡선(sine curve)을 그린다. 곡선의 높이는 양의 갚으로 1인치, 음의 값으로 1인치이고, 곡선의 주기는 4인치이다. 가로 방향의 총 길이는 2,000단위(장치 독립적 단위)이다. 
그만큼의 점으로 이루어졌다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Shapes;

public class SineWave : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new SineWave());
	}
	public SineWave()
	{
		Title = "Sine Wave";

		//창을 채울 Polyline을 생성
		Polyline poly = new Polyline();

		poly.VerticalAlignment= VerticalAlignment.Center;
		poly.Stroke = SystemColors.WindowTextBrush;
		poly.StrokeThickness = 2;

		Content = poly;

		//좌표를 정의
		for(int i=0; i<2000; i++)
			poly.Points.Add(new Point(i , 96 * (1 - Math.Sin(i * Math.PI / 192)))));
	}
}

Polyline 객체가 Window의 Content 프로퍼티로 설정돼 있는 것과 사인 곡선의 높이가 0에 서부터 192 사이에서 변화하는 것을 유의하자. 그렇기 때문에 Polyline의 VerticalAlignment 프로퍼티를 Center로 설정하면 사인 곡선이 창의 중앙에 위치한다. 사인 곡선의 높이가 -96에서 96사이에서 변화한다면(Math.Sin앞에 있는 1과 마이너스 기호를 제거하면 그렇게 만들 수 있다) 사인 곡선의 높이는 (192가 아니라)96이 된다. 정렬할 목적으로 엘리먼트의 높이를 계산할 때는 음수 영역을 고려하지 않는다. 결과적으로 VerticalAlignment 프로퍼티를 Center로 설정하면 이 곡선은 창 중앙에서 조금 위에 위치하는 것처럼 보인다. 

SineWave 프로그램은 Polyline의 Points 프로퍼티를 채우는 방법 한 가지를 보여준다. 이 방법이 가장 효과적인 것은 아니다. 좌표를 하나씩 더할 때마다. PointCollection 객체는 매번 메모리를 추가확보해야 한다. 이런 방식으로 Points 프로퍼티를 채울 때에는 for 루프가 시작되기 전에 좌표 개수를 미리 선언하는 것이 좋다. 

poly.Points = new PointCollection(2000);

Points 프로퍼티를 정의하는 조금 더 효과적인 방법을 다음의 Spiral 프로그램에 소개한다. 이 프로그램은 나선형을 그리기 위해 매개 방정식(parametric equations)을 이용한다. 이 프로그램은 Point 객체 배열을 미리 할당한다. 그리고 할당한 배열을 PointCollection 생성자에 인자로 전달한다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Window.Media;

public class Spiral : Window
{
	const int revs = 20;
	const int numpts = 1000 * revs;
	Polyline poly;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new Spiral());
	}
	public Sprial()
	{
		Title = "Spiral";

		//창을 채울 Canvas를 생성
		Canvas canv = new Canvas();
		canv.SizeChanged += CanvasOnSizeChanged";
		Content = canv;

		//Canvas의 Child로 Polyline을 생성
		poly = new Polyline();
		poly.Stroke = SystemColors.WindowTextBrush;
		canv.Children.Add(poly);

		//좌표를 정의
		Point[] pts = new Point[numpts];

		for(int i=0; i<numpts; i++)
		{
			double angle = i * 2 * Math.PI / (numpts / revs);
			double scale = 250 * (1 - (double)i / numpts);

			pts[i].X = scale * Math.Cos(angle);
			pts[i].Y = scale * Math.Sin(angle);
		}
		poly.Points = new PointCollection(pts);
	}
	void CanvasOnSizeChanged(object sender, SizeChangedEventArgs)
	{
		Canvas.SetLeft(poly, args.NewSize.Width / 2);
		Canvas.SetTop(poly, args.NewSize.Height /2 );
	}
}

Spiral 프로그램은 객체를 창 중앙에 정렬시키는 또 다른 방법을 제시하고 있다. 프로그램은 원래 Canvas의 점(0, 0)을 중심으로 나선(spiral)을 그린다. 하지만 Canvas의 크기가 변할 때마다 호출되는 CanvasOnSizeChanged 이벤트 핸들러가 Polyline이 위치할 Left와 Top 프로퍼티를 Canvas의 중앙으로 설정하고 나선을 중앙에 재위치시킨다. 

Polyline은 연결된 직선을 그리기 위한 클래스이고 Polygon은 내부를 색칠하거나 외곽선을 그릴수 있는 폐쇄된 도형을 그리기 위한 클래스이다. 이들 두 클래스는 겉보기보다 훨씬 더 비슷하다. 다음은 외곽선을 그리기 위한 브러시와 내부를 채색하기 위한 브러시를 포함한 Polygon 엘리먼트이다. 

<Polygon Points="100 50, 200 50, 200 150, 100 150" Stroke="Red" Fill"Blue" />

이 정의를 보면 Points 컬렉션이 닫혀있지 않음을 알 수 있다. 마지막 점(100, 50)을 포함시킬 수도 있지만 반드시 그럴 필요는 없다. Polygon 클래스가 자동으로 마지막 점과 시작점을 연결시키는 직선을 추가한다. 이 경우엔 점 (100, 150)과 점 (100, 50)을 연결시키는 직선을 추가한다. 사각형을 이루는 직선(자동으로 추가된 직선을 포함해서 )은 Stroke 브러시로 그려지고, 사각형의 내부는 Fill 브러시로 칠해진다. 

Polyline에 대한 문서에는 Polyline의 Fill 프로퍼티에 값을 설정하더라도 아무런 효과가 없다. 라고 명시돼 있지만 이것은 사실이 아니다. Fill 프로퍼티에 null이 아닌 객체를 설정하면 Polyline은 Polygon과 같은 영역을 색칠한다. 실제로 유일한 차이점은 Polyline이 Polygon과 같은 영역을 칠하지만 Polyline은 마지막 라인을 자동으로 추가하지 않는다는 점이다. 

Ellipse, Polygon, Line을 조합해서 사람의 얼굴을 그리는 XAML 파일이 다음에 있다. ( 필자가 계란처럼 생긴 머리를 가졌더라면 이것이 필자의 초상화가 될 뻔 했다.


<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


	<!-- 머리-->
	<Ellipse Canvas.Left="96" Canvas.Top="96" Width="144" Height="240" Fill="PeachPuff" Stroke="Black" />

	<!--귀 -->
	<Polygon Points="100 192, 84 168, 84 240, 100 216" Fill="SandyBrown" Stroke="Black" />

	<!-- 눈 -->
	<Ellipse Canvas.Left=120" Canvas.Top="168" Width="36" Height="36" Fill="White" Stroke="Black" />
	<Ellipse Canvas.Left = "180" Canvas.Top="168" Width="36" Height="36" Fill="White" Stroker="Black" />
	<!-- 눈동자 -->
	<Ellipse Canvas.Left="129" Canvas.Top="177" Width="18" Height="18" Fill="Brown" Stroke="Black" />
	<Ellipse Canvas.Left="189" Canvas.Top="177" Width="18" Height="18" Fill="Brown" Stroke="Black" />

	<!-- 코 -->
	<Polygon Points="168 192, 158 240, 178 240" Fill="Pink" Stroke="Black" />
	<!-- 입 -->
	<Ellipse Canvas.Left="120" Canvas.Top="260" Width="96" Height="24" Fill="White" Stroke="Red" StrokeThickness="8" />
	<!-- 수염 -->
	<Line X1="120" Y1="288" X2="120" Y2="336" Stroke="Black" StrokeThickness="2" />
	<Line X1="126 Y1="290X2="126 Y2="338 Stroke="Black" StrokeThickness="2" />
	<Line X1="132" Y1="292" X2="132" Y2="340" Stroke="Black" StrokeThickness="2" />
	<Line X1="138" Y1="294" X2="138" Y2="342" Stroke="Black" StrokeThickness="2" />
	<Line X1="144" Y1="296" X2="144" Y2="344" Stroke="Black" StrokeThickness="2" />
	<Line X1="150" Y1="297" X2="150" Y2="345" Stroke="Black" StrokeThickness="2" />
	<Line X1="156" Y1="298" X2="156" Y2="346" Stroke="Black" StrokeThickness="2" />
	<Line X1="162" Y1="299" X2="162" Y2="347" Stroke="Black" StrokeThickness="2" />
	<Line X1="168" Y1="300" X2="168" Y2="348" Stroke="Black" StrokeThickness="2" />
	<Line X1="174" Y1="299" X2="174" Y2="347" Stroke="Black" StrokeThickness="2" />
	<Line X1="180" Y1="298" X2="180" Y2="346" Stroke="Black" StrokeThickness="2" />
	<Line X1="186" Y1="297" X2="186" Y2="345" Stroke="Black" StrokeThickness="2" />
	<Line X1="192" Y1="296" X2="192" Y2="344" Stroke="Black" StrokeThickness="2" />
	<Line X1="198" Y1="294" X2="198" Y2="342" Stroke="Black" StrokeThickness="2" />
	<Line X1="204" Y1="292" X2="204" Y2="340" Stroke="Black" StrokeThickness="2" />
	<Line X1="210" Y1="290" X2="210" Y2="338" Stroke="Black" StrokeThickness="2" />
	<Line X1="216" Y1="288" X2="216" Y2="336" Stroke="Black" StrokeThickness="2" />
</Canvas>

Shape 타입이 FrameworkElement 타입으로부터 파생됐기 때문에 Style 엘리먼트를 이용해서 이들 객체에 대한 일반적인 프로퍼티를 지정할 수 있다. 예를 들어 다음과 같은 Style 구문을 이용하면 모든 Line 엘리먼트에 대해 Stroke와 StrokeThickness 속성을 반복해서 정의하는 것을 피할 수 있다. 

<Style TargetType="{x:Type Line}">
	<Setter Property="Stroke" Value="Black" />
	<Setter Property="StrokeThickness" Value="2" />
</Style>

불행하게도 이 파일의 경우는 스타일을 이용하더라도 파일의 전체 길이가 줄어들지 않는다. 하지만 이번 장에서 소개될 앞으로의 많은 프로그램은 스타일 정의를 이용할 것이다.

SelfProtraitSansGlasses.xaml이 그리는 이미지는 크기가 고정돼 있다. 어떤 경우에는 그래픽 이미지의 크기가 프로그램 창의 크기에 맞춰 확대되거나 축소되기를 바랄 수 있다. 고정된 크기의 Canvas를 Viewbox 안에 위치시키면 이 기능을 쉽게 구현할 수 있다. viewbox는 자신이 표시할 그림의 크기를 자신의 크기에 맞게 자동으로 조절한다. 다음 XAML 파일은 이 기법을 설명하는 좀 더 간단한 얼굴 그리기 코드다. 


<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Background="White">
	<Viewbox>
		<Canvas Width="100" Height="100" >
			<Ellipse Canvas.Left="5" Canvas.Top="5" Width="90" Height="90" Stroke="Black" />
			<!-- 눈 -->
			<Ellipse Canvas.Left="25" Canvas.Top="30" Width="10" Height="10" Stroke="Black" />
			<Ellipse Canvas.Right="25" Canvas.Top="30" Width="10" Height="10" Stroke="Black" />

			<!-- 눈썹 -->
			<Polyline Points="25 25, 30 20, 35 25" Stroke="Black" />
			<Polyline Points="65 25, 70 20, 75 25" Stroke="Black" />
  			<!-- 코-->
			<Polyline Points="50 40, 45 60, 55 60, 50 40" Stroke="Black" />
			<!-- 입-->
			<Polyline Points="25 70 50 80 75 70" Stroke="Black" />
		</Canvas>
	</Viewbox>
</Page>


ViewBox가 이미지 전체를 확대하거나 축소할 때 라인의 굵기도 함께 확대 축소되는 것을 유의하자. 이런 이미지를 그릴 때는 이미지의 전체적인 크기와 라인의 굵기가 조화를 이루어 야 한다. 그림을 그릴 때 사용하는 Canvas의 크기는 자유롭게 선택할 수 있지만 StrokeThickness를 알맞게 설정하지 않으면 어색한 느낌을 줄 것이다. 

기본적으로 Viewbox는 이미지가 왜곡되지 않게 가로와 세로 크기를 같은 비율로 조정한다. 이미지 왜곡에 상관없이 창을 가득 채우고 싶다면 Stretch 프로퍼티를 Fill로 지정한다. 

때때로 Polyline이나 Polygon을 이루는 라인들이 서로 겹쳐질 수 있다. 그럴 때 어떤 영역을 색칠하고 어떤 영역을 색칠하지 않을지 결정하는 규칙이 필요하다. Polyline과 Polygon 모두 FillRule이란 프로퍼티를 정의하고 있다. FillRule은 색칠할 내부 영역을 결정하는 규칙이며, 열거형으로 정의된 두 가지 옵션을 선택할 수 있다. FillRule.EvenOdd(기본값)와 FillRule.NonZero이다. 두 옵션의 차이점을 보여주는 고전적인 예가 다섯 개의 꼭지점으로 이루어진 별 모양이다. 다음의 XAML 파일이 이를 보여준다. 

TwoStarts.xaml 파일은 구문 반복을 피하기 위해 폴리곤에 대한 Style 정의로 시작한다. 이 폴리곤이 다섯 개의 꼭지점을 갖는 별을 그린다. 세터(setter)블록은 Polygon의 4개 프로퍼티 (Points, Fill, Stroke, StrokeThickness)에 대한 내용을 포함한다. 별 모양을 정의하기 위해 사용한 좌표계는 점(0, 0)을 원점으로 한다. 별 모양의 지름은 1인치 이다. 

<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	TextBlock.FontSize ="16" >
	<Canvas.Resources>

		<!-- 양쪽 그림에 공룡인 프로퍼티를 설정 -->
		<Style x:Key="star">
			<Setter Property="Polygon.Points" Value="0 -96,56 78, -91 -30, 91 -30, -56 78" />
			<Setter Property="Polygon.Fill" Value="Blue" />
			<Setter Property="Polygon.Stroke" Value="Red" />
			<Setter Property="Polygon.StrokeThickness" Value="3" />
		</Style>
	</Canvas.Resources>

	<!-- 첫 번째 그림을 "EvenOdd" FillRule을 이용해서 그림 -->
	<TextBlock Canvas.Left="48" Canvas.Top="24" Text="FillRule = EvenOdd" />
	
	<Polygon Style="{StaticResource star}" FillRule="EvenOdd" Canvas.Left="120" Canvas.Top="168" />
	<!-- 두 번째 그림을 "NonZero" FillRule을 이용해서 그림 -->
	<TextBlock Canvas.Left="288" Canvas.Top="24" Text="FillRule = NonZero" />

	<Polygon Style="{StaticResource star}" FillRule="NonZero" Canvas.Left="360" Canvas.Top="168" />
</Canvas>


이 파일은 FillRule 을 표시하는 두 개의 TextBlock 엘리먼트와 Polygon을 이용해 그린 두개의 별 모양을 표시한다( 루트 엘리먼트의 시작 태그가 TextBlock.FontSize 프로퍼티를 16단위로 지정하고 있음을 유의하자.) 첫 번째 별 모양은 FillRule이 EvenOdd로 설정됐다. 그리고 두 번째 별 모양은 FillRule이 NonZero로 설정됐다. 두개의 별 모양은 위치를 지정하는 Canvas.Left와 Canvas.Top 프로퍼티를 이용해서 Points 컬렉션이 지정하는 원래 위치로부터 옮겨졌다. 

FillRule의 기본값인 EvenOdd를 이해하기 위해 닫혀진 영역 위의 한점에서 무한대의 공간으로 향하는 직선을 상상해보자(이 규칙에 따르면 색칠을 해야하는)닫혀진 영역에서는 상상 속의 직선이 도형의 경계선을 홀수번 만난다. 그래서 별의 바깥 부분은 색이 칠해졌지만 별의 중심 부분은 칠해지지 않은 것이다. 

EvenOddDemo.xaml 파일은 이 알고리즘의 동작 양식을 좀더 확실하게 이해할수 있게 도와준다. 그려지는 도형이 조금 더 정교하다는 점만 빼면 이 파일은 TwoStarts.xaml 파일과 유사하다. 최종 도형은 내부에서 무한대를 향할 때 최대 6개의 경계선을 만난다. 


<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	TextBlock.FontSize="16" >

	<Canvas.Resources>
		<!-- 양쪽 그림에 공통인 프로퍼티를 설정 -->
		<Style x:Key = "figure">
			<Setter Property="Polygon.Points" 
			Value=" 0 0, 0 144, 144 144, 144 24,
				  24 24, 24 168, 168 168, 168 48,
				  48 48, 48 192, 192 192, 192 72,
				  72 72, 72 216, 216 216, 216 96,
				  96 96, 96 240, 240 240, 240 120,
				  120 120, 120 264, 264 264, 264 0" />
			<Setter Property="Polygon.Fill" Value="Blue" />
			<Setter Property="Polygon.Stroke" Value="Red" />
			<Setter Property="Polygon.StrokeThickness" Value="3" />
		</Style>
	</Canvas.Resources>

	<!-- 첫 번째 그림을 "EvenOdd" FillRule을 이용해서 그림 -->
	<TextBlock Canvas.Left="48" Canvas.Top="24" Text="FillRule = EvenOdd" />
	<Polygon Style="{StaticResource figure}" FillRule="EventOdd" Canvas.Left="48" Canvas.Top="72" />
	
	<!-- 두 번째 그림을 "NonZero" FillRule을 이용해서 그림 -->
	<TextBlock Canvas.Left="360" Canvas.Top="24" Text="FillRule = NonZero" />
	<Polygon Style="{StaticResource figure}" FillRule="NonZero" Canvas.Left="360" Canvas.Top="72" />
</Canvas>


여기까지 살펴본 바에 따라 NonZero 규칙은 폐쇄된 모든 영역을 색칠하는 것이라고 추측할 것이다. 보통의 경우는 그렇다. 하지만 실제 알고리즘은 약간 더 복잡하다. 두 가지 사실을 기억하자. 하나는 폴리곤이 일련의 연결된 점들(pt1, pt2, pt3, pt4 등)로 정의된다는 것이고, 다른 하나는 이 점들을 연결할 때 일정한 방향으로만 한다는 것이다(pt1에서 pt2로, pt2에서 pt3로, pt3에서 pt4로...)

NonZero 규칙에 의해 폐쇄된 영역을 색칠해야 하는지 결정하려면 다시 한번 해당 영역 내부에서 무한대의 공간을 향하는 직선을 상상해야 한다. 그 직선이 홀수 개의 외곽선을 만난 다면 Evenodd 규칙과 마찬가지로 해당 영역을 색칠한다. 하지만 그 직선이 짝수 개의 외곽선을 만난다면 (상상속의 직선과 만나는)외곽선의 방향에 따라 결정한다. 즉 어느 한쪽을 향하는 외곽선의 수와 다른 쪽을 향하는 외곽선의 수가 다를 때만 해당영역을 색칠한다. 다시 말하자면 해당 영역은 외곽선을 방향에 따라 구분했을 때 어느 한쪽을 향하는 외곽선의 수와 다른 쪽을 향하는 외곽선 수의 차이가 nonzero일 때(0이 아닐때0 칠해진다. 그래서 규칙의 이름이 NonZero이다

고민하지 말고 이 규칙을 이해할수 있는 간단한 그림을 살펴보자. 그림의 화살표는 직선이 그려지는 방향을 나타낸다. 

EvenOdd규칙과 NonZero 규칙 모두 3개의 L 모양 영역은 외곽선의 수가 1 또는 3이기 때문에 내부를 색칠한다. 비슷한 모양을 한 2개의 작은영역(4번 영역과 5번 영역)의 경우 EvenOdd 규칙은 내부를 색칠하지 않는다. 왜냐하면 영역 내부와 무한대의 공간 사이에 짝수 개의 외곽선이 존재하기 때문이다. 하지만 NonZero 규칙은 5번 영역을 색칠한다. 영역 내부에서 도형 밖으로 나가는 동안 만나는 2개의 외곽선이 같은 방향을 향하기 때문이다. 4번 영역은 내부를 색칠하지 않는다. 4번 영역 역시 2개의 외곽선을 만나지만 2개의 외곽선이 서로 다른 방향을 향하기 때문이다. 

여기 같은 도형을 두 가지 방법으로 그리는 XAML 파일이 있다. 										