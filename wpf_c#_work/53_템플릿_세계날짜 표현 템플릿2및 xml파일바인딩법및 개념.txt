using System;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;

public partial class DatePicker
{
	UniformGrid unigridMonth;
	DateTime datetimeSaved = DateTime.Now.Date;

	//DateProperty 의존 프로퍼티 정의
	public static readonly DependencyProperty DateProperty = DependencyProperty.Register("Date", typeof(DateTime?), typeof(DatePicker),
		new PropertyMetadata(new DateTime(), DateChangedCallback));

	//DateChangedEvent. 라우팅 이벤트를 정의
	public static readonly RoutedEvent DateChangedEvent = EventManager.RegisterRoutedEvent("DateChanged", RoutingStrategy.Bubble,
		typeof(RoutedPropertyChangedEventHandler<DateTime?>),typeof(DatePicker));

	//생성자
	public DatePicker()
	{
		InitializeComponent();

		//Date 프로퍼티초기화
		Date = datetimeSaved;

		//Loaded 이벤트를 위해 핸들러를 붙임
		Loaded += DatePickerOnLoaded;
	}
	//창의 Loaded 이벤트를 위한 핸들러
	void DatePickerOnLoaded(object sender, RoutedEventArgs args)
	{
		unigridMonth = FindUniGrid(lstboxMonth);

		if(Date != null)
		{
			DateTime dt = (DateTime)Date;
			unigridMonth.FirstColumn = (int)(new DateTime(dt.Year, dt.Month, 1).DayOfWeek);
		}
	}
	//UniformGrid를 찾기 위한 재귀 메소드
	UniformGrid FindUniGrid(DependencyObject vis)
	{
		if(vis is UniformGrid)
			return vis as UniformGrid;

		for(int i=0; i<VisualTreeHelper.GetChildrenCount(vis); i++)
		{
			Visual visReturn = FindUniGrid(VisualTreeHelper.GetChild(vis, i));
			if(visReturn != null)
				return visReturn as UniformGrid;
		}
		return null;
	}
	//의존 프로퍼티 DateProperty에 의해 지원받는 Date 프로퍼티
	public DateTime? Date
	{
		set { SetValue(DateProperty, value);	}
		get { return (DateTime?)GetValue(DateProperty); }
	}
	//라우팅 이벤트 DateChangedEvent에 의해 지원받는 DateChanged 이벤트
	public event RoutedPropertyChangedEventHandler<DateTime?> DateChanged
	{
		add{ AddHandler(DateChangedEvent, value);	}
		remove{ RemoveHandler(DateChangedEvent, value);	}
	}
	//앞으로 가기와 뒤로 가기 반복 버튼
	void ButtonBackOnClick(object sender, RoutedEventArgs args)
	{
		FlipPage(true);
	}
	void ButtonForwardOnClick(object sender, RoutedEventArgs args)
	{
		FlipPage(false);
	}
	//버튼은 PageDown과 PageUp키에 의해 복제됨
	protected override void OnPreviewKeyDown(KeyEventArgs args)
	{
		base.OnKeyDown(args);
		
		if(args.Key == key.PageDown)
		{
			FlipPage(true);
			args.Handled = true;
		}else if(args.Key == Key.PageUp)
		{
			FlipPage(false);
			args.Handled = false;
		}
	}
	//페이지를 다음 달, 년 10년 등으로 넘김
	void FlipPage(bool isBack)
	{
		if(Date == null)
			return;

		DateTime dt = (DateTime)Date;
		int numPages = isBack? -1: 1;

		//Shift가 눌리면 1년 단위로 움직임
		if(Keyboard.IsKeyDown(Key.LeftShift) || Keyboard.IsKeyDown(Key.RightShift))
			numPages *= 12;

		//Ctrl이 눌리면 10년 단위로 움직임
		if(Keyboard.IsKeyDown(key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))
			numPages = Math.Max(-1200, Math.Min(1200, 120 * numPages));

		//새로운 DateTime을 계산
		int year = dt.Year + numPages / 12;
		int month = dt.Month + numpages % 12;

		while(month < 1)
		{
			month += 12;
			year -= 1;
		}
		while(month > 12)
		{
			month -= 12;
			year += 1;
		}

		//Date 프로퍼티 설정(DateChangedCallback을 발생시킴
		if(year < DateTime.MinValue.Year)
			Date = DateTime.MinValue.Date;
		else if(year > DateTime.MaxValue.Year)
			Date = DateTime.MaxValue.Date;
		else
			Date = new DateTime(year, month, Math.Min(dt.Day, DateTime.DaysInMonth(year, month)));
	}
	//CheckBox 체크되면 Date 프로퍼티를 저장하고 null로 설정
	void CheckBoxNullOnChecked(object sender, RoutedEventArgs args)
	{
		
		if(Date != null)
		{
			datetimeSaved = (DateTime)Date;
			Date = null;
		}
	}
	//CheckBox 체크 해제되면 Date 프로퍼티를 복구함
	void CheckBoxNullOnUnChecked(object sender, RoutedEventArgs args)
	{
		Date = datetimeSaved;
	}
	//ListBox 선택에 따라 날짜를 변경
	void ListBoxOnSelectionChanged(object sender, SelectionChangedEventArgs args)
	{
		if(Date == null)
			return;
		DateTime dt = (DateTime)Date;

		//새로운 Date 프로퍼티 설정(DateChangedCallback을 발생시킴)
		if(lstboxMonth.SelectedIndex != -1)
			Date = new DateTime(dt.Year, dt.Month, Int32.Parse(lstboxMonth.SelectedItem as string));
	}
	//이 메소드는 DateProperty에 의해 발생
	static void DateChangedCallback(DependencyObject obj, DependencyPropertyChangedEventArgs args)
	{
		//변경된 객체를 위해 OnDateChange를호출
		(obj as DatePicker).OnDateChanged((DateTime?)args.OldValue, (DateTime?)args.NewValue);
	}
	//OnDateChanged가 새로운 Date 값에 맞게 외형을 변경
	protected virtural void OnDateChanged(DateTime? dtOldValue, DateTime? dtNewValue)
	{
		chkboxNull.IsChcked = dtNewValue == null;

		if(dtNewValue != null)
		{
			DateTime dtNew = (DateTime)dtNewValue;
			//달과 년 텍스트를 설정
			txtblkMonthYear.Text = dtNew.ToString(DateTimeFormatInfo.CurrentInfo.YearMonthPattern);

			//달의 첫 번째 날을 설정
			if(unigridMonth != null)
				unigridMonth.FirstColumn = (int)(new DateTime(dtNew.Year, dtNew.Month, 1).DayOfWeek);

			int iDaysIsMonth = DateTime.DaysInMonth(dtNew.Year, dtNew.Month);

			//날짜 수가 맞지 않으면 ListBox를 채움
			if(iDaysInMonth != lstboxMonth.Items.Count)
			{
				lstboxMonth.BeginInit();
				lstboxMonth.Items.Clear();

				for(int i=0; i<iDaysIsMonth; i++)
					lstboxMonth.Items.Add((i+1).ToString());
				lstboxMonth.EndInit();
			}
			lstboxMonth.SelectedIndex = dtNew.Day - 1;
		}
		//DateChangedEvent를 발생
		RoutedPropertyChangedEventArgs<DateTime?> args = new RoutedPropertyChangedEventArgs<DateTime?>(dtOldValue,dtNewValue,
			DatePicker.DateChangedEvent);
		args.Source = this;
		RaiseEvent(args);
	}
}

생성자, Date 프로퍼티, DateChanged 이벤트를 정의한 이후에 Datepicker.cs 파일은 사용자 의 입력을 처리하기 위해 다양한 메소드를 포함한다. RepeatButton을 누르는 것과 PageUp, PageDown키를 누르는 것 모두는 달력을 새로운 달로 넘기는 역할을 한다. 이것의 주요 로직은 FlipPage 메소드에 있으며 새로운 Date 프로퍼티를 설정하는 것으로 끝을 맺게 된다. 또한 ListBox의 SelectionChanged 이벤트의 핸들러 역시 Date 프로퍼티를 변경한다. 

파일 첫 부분에 있는 DateProperty 의존 프로퍼티 정의는 Date 프로퍼티가 바뀔 때는 항상 정적 DateChangedCallback 메소드가 호출된다는 것을 명시한다. 이 메소드는 OnDateChanged를 호출하는데, 이 OnDateChanged 메소드는 새로운 날짜로 외형을 갱신하고 DateChanged 라우팅 이벤트를 발생시킨다. 

코드를 테스트하기 위해 다음의 조그마한 창을 생성했다. TextBlock 하나는 DatePicker 컨트롤의 Date 프로퍼티와 바인딩돼 있으며 또 다른 하나는 DateChanged 이벤트 핸들러로부터 값을 가져온다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:src="clr-namespace:Petzold.CreateDatePicker" x:Class="Petzold.CreateDatePicker.CreateDatePickerWindow" Title="Create DatePicker"
	SizeToContent = "WindowAndHeight" ResizeMode="CanMinimize">
	<StackPanel>
		<src:DatePicker x:Name="datepick" HorizontalAlignment="Center" Margin="12" DateChanged="DatePickerOnDateChanged" />
		<StackPanel Orientation="Horizontal" Margin="12">
			<TextBlock Text="Bound value: "/>
			<TextBlock Text="{Binding ElementName=datepick, Path=Date}" />
		</StackPanel>

		<StackPanel Orientation="Horizontal" Margin="12">
			<TextBlock Text="Event handler value: " />
			<TextBlock Name="txtblkDate" />
		</StackPanel>
	</StackPanel>
</Window>

이벤트 핸들러는 다음 코드 비하인드 파일에 위치하는데, TextBlock을 날짜나 null을 의미하는 빈칸으로 갱신한다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public partial class CreateDatePickerWindow : Window
{
	public CreateDatePickerWindow()
	{
		InitializeComponent();
	}
	//DatePicker DateChanged 이벤트를 위한 핸들러
	void DatePickerOnDateChanged(object sender, RoutedPropertyChangedEventArgs<DateTime?> args)
	{
		if(args.NewValue != null)
		{
			DateTime dt = (DateTime)args.NewValue;
			txtblkDate.Text = dt.ToString("d");
		}else
			txtblkDate.Text = "";
	}
}

다음의 애플리케이션 정의 파일은 프로젝트를 안전하게 만든다. 

<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.CreateDatePicker.CreateDatePickerApp" StartupUri="CreateDatePickerWindow.xaml" />

DatePicker 컨트롤은 ListBox가 특수한 목적에도 사용될 수 있다는 것을 보여주었다. 하지만 대부분 ListBox는 데이터를 보여주며, 최근 이런 데이터들은 XML 파일의 형태로 가져오는 경우가 자주 있다. 26장에서는 어떻게 이런 파일을 생성하고 융통성 있게 볼 수 있는지를 알아볼 것이다. 다만 6명의 직원 정보가 담긴 XML 파일을 잠깐 다루면서 이것을 미리 살펴보자. 이번 예제의 목적은 이 여섯 직원의 정보를 보여주는 ListBox를 생성하는 것이다. 

<Employees xmlns="">
	<Employee Name="Betty">
		<BirthDate>8/31/1970</BirthDate>
		<Face>Betty.png</Face>
		<LeftHanded>False</LeftHanded>
	</Employee>
	<Employee Name="Edgar">
		<BirthDate>2/2/1965</BirthDate>
		<Face>Edgar.png</Face>
		<LeftHanded>True</LeftHanded>
	</Employee>
	<Employee Name="Sally">
		<BirthDate>7/12/1980</BirthDate>
		<Face>Sally.png</Face>
		<LeftHanded>True</LeftHanded>
	</Employee>
	<Employee Name="Jim">
		<BirthDate>6/15/1975</BirthDate>
		<Face>Jim.png</Face>
		<LeftHanded>False</LeftHanded>
	</Employee>
	<Employee Name="Anne">
		<BirthDate>4/7/1975</BirthDate>
		<Face>Anne.png</Face>
		<LeftHanded>True</LeftHanded>
	</Employee>
	<Employee Name="John">
		<BirthDate>12/2/1955</BirthDate>
		<Face>John.png</Face>
		<LeftHanded>False</LeftHanded>
	</Employee>
</Employees>

이 파일은 EmployeeWheel 프로젝트의 일부이며, 빌드 작업을 Resource로 설정했다. 보다시피 이 XML의 각 Employee 태그는 25장의 앞부분에서 보여주었던 Employee 클래스와 동일한 정보를 포함하고 있다. 하지만 EmployeeWheel 프로젝트는 Employee 클래스가 필요하지 않다. 왜냐하면 ListBox와 그것의 템플릿이 필요한 정보를 모두 Employees.xml 파일에서얻기 때문이다. 

EmployeeWheel 프로젝트 내의 ListBox는 12장에서 생성된 RadialPanel 클래스를 사용해 6명의 직원을 원 형태로 보여준다. 따라서 EmployeeWheel 프로젝트는 12장의 CircleTheButtons 프로젝트로부터 RadialButton.cs와 RadialButtonOrientation.cs 파일을 필요로 한다. 

XML 파일은 XAML 파일의 Resources 절 내에서 XmlDataProvider 타입의 객체를 정의하고 그것의 Source 속성으로 파일의 URI를 설정하면 접근이 가능하다. 

<XmlDataProvider x:Key="emps" Source="Employees.xml" xPath="Employees" />

XPath 프로퍼티는 www.w3.org/TR/xpath에서 문서화된 "XML Path Language" 내에 정의된 문자열이다. 대신 다른 기능은 허용되지 않는다. 

또한 XAML 파일 내에 다음과 같이 x:XData 엘리먼트로 XML 데이터를 감싸서 직접 내장할 수도 있다. 

<XmlDataProvider x:Key = "emps" XPath="Employees">
	<x:XData>
		<Employees xmlns="">
			...
		</Employees>
	</x:XData>
</XmlDataProvider>

두 방법 모두 이 리소스를 참조하는 Binding을 ListBox의 ItemsSource 프로퍼티에 설정할 수 있다. 

ItemsSource="{Binding Source={StaticResource emps}, XPath=Employee}"

여기서 XPath 프로퍼티는 각 항목이 Employee 노드라는 것을 의미한다. 이 기술을 사용한 완전한 EmployeeWheelWindow.xaml 파일은 다음과 같다. 