<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.CollectionViewWithFilter.CollectionViewWithFilter" Title="CollectionView with Filter" 
	SizeToContent="WidthAndHeight" ResizeMode="CanMinimize">

	<DockPanel Name="dock">
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="_File>
				<MenuItem Header="_Open..." Command="Open" />
			</MenuItem>
		</Menu>

		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>

			<!-- 필터링을 위한 RadioButton이 있는 GroupBox -->
			<GroupBox Grid.Row="0" Margin="24" HorizontalAlignment="Center" Header="Criteria">
				<StackPanel>
					<RadioButton Name="radioLiving" Content="Living" Checked="RadioOnChecked" Margin="6" />
					<RadioButton Name="radioDead" Content="Dead" Checked="RadioOnChecked" Margin="6" />
					<RadioButton Name="radioAll" Content="All" Checked="RadioOnChecked" Margin="6" />
				</StackPanel>
			</GroupBox>

			<!-- 항목을 표시하기 위한 ListBox -->
			<ListBox Name="lstbox" Grid.Row="1" HorizontalAlignment="Center" Width="300" Height="300" Margin="24">
				<ListBox.ItemTemplate>
					<DataTemplate>
						<StackPanel Orientation="Horizontal">
							<TextBlock Text="{Binding Path=FirstName}" />
							<TextBlock Text=" " />
							<TextBlock Text="{Binding Path=MiddleName}" />
							<TextBlock Text=" " Name="txtblkSpace" />
							<TextBlock Text="{Binding Path=LastName}" />
							<TextBlock Text=" (" />
							<TextBlock Text="{Binding Path=BirthDate.Year}" />
							<TextBlock Text="-" />
							<TextBlock Text="{Binding Path=DeathDate.Year}" Name="txtblkDeath" />
							<TextBlock Text=")" />
						</StackPanel>

						<DataTemplate.Triggers>
							<DataTrigger Binding="{Binding Path=DeathDate}" Value="{x:Null}">
								<Setter TargetName="txtblkDeath" Property="Text" Value="present" />
							</DataTrigger>

							<DataTrigger Binding="{Binding Path=MiddleName} Value="">
								<Setter TargetName="txtblkSpace" Property="Text" Value="" />
							</DataTrigger>
						</DataTemplate.Triggers>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>
	</DockPanel>

	<Window.CommandBindings>
		<CommandBinding Command="Open" Executed="OpenOnExecuted" />
	</Window.CommandBindings>
</Window>

프로그램을 간단하게 만들어서 논점에 집중할 수 있게 하기 위해 PersonPanel과 컬렉션에 항목을 추가하거나 삭제하는 버튼을 포함시키지 않았다. 이 프로그램은 파일에 존재하는 내용을 필터 설정에 따라 골라 보여주는 기능만 한다. 이 프로그램을 보고 필터링을 사용하면 데이터를 새로 입력할 수 없나보다 라고 생각하지 않았으면 좋겠다. 그렇지 않다. 

이 책의 Chapter 26 디렉토리를 보면 Composers.PeopleXml란 파일이 있다. 이 프로그램과 이후에 이어지는 2개의 프로그램을 테스트 할 때 이 파일을 사용한다. 

3개의 라디오 버튼 컨트롤은 동일한 이벤트 핸들러를 공유한다. 이 이벤트 핸들러는 코드 비하인드 파일에 존재한다. 이 이벤트 핸들러는 3개의 라디오 버튼에 할당된 Name 프로퍼티를 기반으로 CollectionView의 Filter 프로퍼티를 PersonIsLiving 메소드나 PersonIsDead 메소드, 또는 null로 설정한다. null로 설정하면 모든 항목을 볼 수 있다. 

using Petzold.SingleRecordDataEntry;
using Petzold.MultiRecordDataEntry;
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;


public partial class CollectionViewWithFilter : Window
{
	ListCollectionView collview;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new CollectionViewWithFilter());
	}
	public CollectionViewWithFilter()
	{
		InitializeComponent();
	}
	void OpenOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		People people = People.Load(this);

		if(people != null)
		{
			collview = new ListCollectionView(people);

			collview.SortDescriptions.Add(new SortDescription("LastName", ListSortDirection.Ascending));

			lstbox.ItemsSource = collview;

			if(lstbox.Items.Count > 0)
				lstbox.SelectedIndex = 0;

			radioAll.IsChecked = true;
		}
	}
	//RadioButton에 대한 이벤트 핸들러
	void RadioOnChecked(object sender, RoutedEventArgs args)
	{
		if(collview == null)
			return;

		RadioButton radio = args.Source as RadioButton;

		switch(radio.Name)
		{
			case "radioLiving":
				collview.Filter = PersonIsLiving;
				break;
			case "radioDead":
				collview.Filter = PersonIsDead;
				break;
			case "radioAll:
				collview.Filter = null;
				break;
		}
	}
	bool PersonIsLiving(object obj)
	{
		return (obj as Person).DeathDate == null;
	}
	bool PersonIsDead(object obj)
	{
		return (obj as Person).DeathDate != null;
	}
}

어느 순간에든 CollectionView의 Filter 프로퍼티에는 오직 한 개의 메소드만 설정할 수 있다. 필터링 조건을 여러 개 적용하고 싶다면 가장 바람직한 접근 방법은 여러 개의 필터 메소드를 만드는 것이 아니라 한개의 필터 메소드를 Filter 프로퍼티에 설정하고 이 필터 메소드에서 여러 개의 조건에 맞춰 객체가 적합한지의 여부를 반환하게 하는 것이다. 필터링 조건이 바뀌면 프로그램은 언제든지 CollectionView의 Refresh 메소드를 호출해서 모든 항목이 필터 메소드를 한 번 더 거치게 할 수 있다. 

필터링을 이용하는 방법중 하나는 사용자에게 문자열을 입력할 수 있는 TextBox를 제공하는 것이다. 그러면 ListBox는 그 문자열로 시작하는 라스트 네임을 갖는 모든 항목을 표시할 수 있다. 이 기능은 쉽게 구현할 수 있다. 다음의 XAML 파일은 GroupBox와 라디오 버튼을 사용하지 않고 대신Label과 TextBox를 사용했다는 점만 빼면 CollectionViewWithFilter.xaml과 유사하다. TextBox는 txtboxFilter란 값이 부여된 Name 프로퍼티와 TextChanged 이벤트 핸들러를 갖고 있다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.CollectionViewWithFilter.CollectionViewWithFilter" Title="CollectionView with Filter" 
	SizeToContent="WidthAndHeight" ResizeMode="CanMinimize">

	<DockPanel Name="dock">
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="_File>
				<MenuItem Header="_Open..." Command="Open" />
			</MenuItem>
		</Menu>

		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>

			<!-- Label과 TextBox. -->
			<StackPanel Grid.Row="0" Margin="24" Orientation="Horizontal" HorizontalAlignment="Center">
				<Label Content="Search: " />
				<TextBox Name="txtboxFilter" MinWidth="1in" TextChanged="TextBoxOnTextChanged" />
			</StackPanel>


			<!-- 항목을 표시하기 위한 ListBox -->
			<ListBox Name="lstbox" Grid.Row="1" HorizontalAlignment="Center" Width="300" Height="300" Margin="24">
				<ListBox.ItemTemplate>
					<DataTemplate>
						<StackPanel Orientation="Horizontal">
							<TextBlock Text="{Binding Path=FirstName}" />
							<TextBlock Text=" " />
							<TextBlock Text="{Binding Path=MiddleName}" />
							<TextBlock Text=" " Name="txtblkSpace" />
							<TextBlock Text="{Binding Path=LastName}" />
							<TextBlock Text=" (" />
							<TextBlock Text="{Binding Path=BirthDate.Year}" />
							<TextBlock Text="-" />
							<TextBlock Text="{Binding Path=DeathDate.Year}" Name="txtblkDeath" />
							<TextBlock Text=")" />
						</StackPanel>

						<DataTemplate.Triggers>
							<DataTrigger Binding="{Binding Path=DeathDate}" Value="{x:Null}">
								<Setter TargetName="txtblkDeath" Property="Text" Value="present" />
							</DataTrigger>

							<DataTrigger Binding="{Binding Path=MiddleName} Value="">
								<Setter TargetName="txtblkSpace" Property="Text" Value="" />
							</DataTrigger>
						</DataTemplate.Triggers>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>
	</DockPanel>

	<Window.CommandBindings>
		<CommandBinding Command="Open" Executed="OpenOnExecuted" />
	</Window.CommandBindings>
</Window>

FilterWithText 클래스를 위한 코드 비하인드 파일은 TextBox의 Text 프로퍼티를 빈 문자로 설정하고, Filter 프로퍼티에 LastNameFilter 메소드를 설정해서 CollectionView 객체를 위한 창을 준비한다. 

txtboxFilter.Text = "";
collview.Filter = LastNameFilter;

LastNameFilter 메소드와 TextChanged 이벤트 핸들러는 코드 비하인드 파일의 마지막 부분에 있다. 

using Petzold.SingleRecordDataEntry;
using Petzold.MultiRecordDataEntry;
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;


public partial class FilterWithText : Window
{
	ListCollectionView collview;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new FilterWithText());
	}
	public FilterWithText()
	{
		InitializeComponent();
	}
	void OpenOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		People people = People.Load(this);

		if(people != null)
		{
			collview = New ListCollectionView(people);

			collview.SortDescriptions.Add(new SortDescription("BirthDate", ListSortDirection.Ascending));

			txtboxFilter.Text = "";
			collview.Filter = LastNameFilter;

			lstbox.ItemsSource = collview;

			if(lstbox.Items.Count > 0)
				lstbox.SelectedIndex = 0;
		}
	}
	bool LastNameFilter(object obj)
	{
		return (obj as Person).LastName.StartWith(txtboxFilter.Text, StringComparison.CurrentCultureIgnoreCase);
	}
	void TextBoxOnTextChanged(object sender, TextChangedEventArgs args)
	{
		if(collview == null)
			return;
		collview.Refresh();
	}
}

LastNameFilter 메소드는 Person객체의 LastName 프로퍼티 값이 TextBox의 문자열로 시작하면 true를 반환한다. 이때 대소문자는 구별하지 않는다. TextBox 문자열을 수정하면 즉시 Refresh 메소드가 호출돼 컬렉션의 모든 항목이 조건에 맞는지 다시 검사한다. 

정렬과 필터링 이외에도 CollectionView 항목을 그룹으로 묶을 수 있다. 이번 장의 마지막 프로그램은 이 기법을 보여줄 것이다. 

항목을 그룹으로 묶으려면 그룹 이름을(실제로는 객체를) 컬렉션의 각 항목에 부여하는 메소드를 제공해야 한다. 항목들은 ListBox 안에서 이 이름에 의해 그룹으로 묶여질 것이다. 그리고 각 그룹을 구별 짓기 위해서 커스텀 헤더와 패널을 제공할 수 있다. 

CollectionView에는 GroupDescriptions란 이름의 프로퍼티가 있다. 이 프로퍼티의 타입은 ObservableCollection 이다. 좀 더 정확히 말하면 ObservableCollection<GroupDescription> 타입이다.  GroupDescription은 추상 클래스이며, 계승 클래스 중에는 PropertyGroupDescription 클래스가 있다. PropertyGroupDescription 클래스는 항목을 프로퍼티 값에 의해 그룹 지을 때 사용할 수 있다. 프로퍼티 값 이외의 기준으로 그룹 지으려면 GroupDescription 클래스를 상속해 새로운 클래스를 정의해서 사용해야 한다. 프로그램 개발자는 GroupNameFromItem 메소드를 오버라이딩 해야 한다. 

필자는 예제 파일의 작곡가들을 그들이 활동한 음악사적 시기를 기준으로 그룹 지으려고 한다. 보통 바로크 음악(1600~1750), 고전 주의 음악(1750~1820), 낭만주의 음악(1820~1900), 근대 음악(1900년~)으로 나눈다. 여기에 바로크 이전 시기와 전쟁 이후 시기를 추가하려고 한다. 예제 파일에는 작곡가의 활동 연대에 대한 정보가 없으므로 작곡가의 생일을 기준으로 구분하기로 한다. 

여기 GroupDescription으로부터 계승받은 PeriodGroupDescription 클래스가 있다. 이 클래스의 GroupNameFromItem 메소드를 오버라이딩해서 항목에 따라 문자열을 반환하게 구현했다. 


using Petzold.SingleRecordDataEntry;
using System;
using System.ComponentModel;
using System.Globalization;

public class PeriodGroupDescription : GroupDescription
{
	public override object GroupNameFromItem(object item, int level, CultureInfo culture)
	{
		Person person = item as Person;

		if(person.BirthDate == null)
			return "Unknown";

		int year = ((DateTime)person.BirthDate).Year;

		if( year < 1575)
			return "Pre-Baroque";
		if(year < 1725)
			return "Baroque";
		if(year < 1795)
			return "Classical";
		if(year < 1870)
			return "Romantic";
		if(year < 1910)
			return "20th Century";
		return "Post-War";
	}
}

다음은 Window 클래스의 C# 부분이다. 



using Petzold.MultiRecordDataEntry;
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;

public partial class ListBoxWithGroups : Window
{
	ListCollectionView collview;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ListBoxWithGroups());
	}
	public ListBoxWithGroups()
	{
		InitializeComponent();
	}
	void OpenOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		People people = People.Load(this);

		if(people != null)
		{
			collview = new ListCollectionView(people);

			collview.SortDescriptions.Add(new SortDescription("BirthDate", ListSortDirection.Ascending));
			//GroupDescriptions 컬렉션에 PeriodGroupsDescription을 추가
			collview.GroupDescriptions.Add(new PeriodGroupDescription());

			lstbox.ItemsSource = collview;

			if(lstbox.Items.Count > 0)
				lstbox.SelectedIndex = 0;
		}
	}
}

OpenOnExecuted 핸들러는 People 파일을 로드해서 ListCollectionView 객체를 만든다. 뷰는 생일을 기준으로 데이터를 정렬해서 보여준다. 그리고 PeriodGroupDescription 타입의 객체를 GroupDescriptions 컬렉션에 추가해서 컬렉션의 항목을 PeriodGroupDescription 객체가 제공하는 기준에 따라 그룹으로 묶는다. 

프로그램 창에 대한 XAML 파일에는 친숙한 ListBox가 사용됐다. 그리고 ListBox.GroupStyle 프로퍼티가 추가됐다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.ListBoxWithGroups.ListBoxWithGroups" Title="ListBox with Groups" SizeToContent="WidthAndHeight" ResizeMode="CanMinimize">
	<DockPanel Name="dock">
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="_File">
				<MenuItem Header="_Open..." Command="Open" />
			</MenuItem>
		</Menu>

		<!-- 항목을 표시하기 위한 ListBox -->
		<ListBox Name="lstbox" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="300" Height="300" Margin="24">
			<ListBox.ItemTemplate>
				<DataTemplate>
					<StackPanel Orientation="Horizontal">
							<TextBlock Text="{Binding Path=FirstName}" />
							<TextBlock Text=" " />
							<TextBlock Text="{Binding Path=MiddleName}" />
							<TextBlock Text=" " Name="txtblkSpace" />
							<TextBlock Text="{Binding Path=LastName}" />
							<TextBlock Text=" (" />
							<TextBlock Text="{Binding Path=BirthDate.Year}" />
							<TextBlock Text="-" />
							<TextBlock Text="{Binding Path=DeathDate.Year}" Name="txtblkDeath" />
							<TextBlock Text=")" />
					</StackPanel>
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding Path=DeathDate.Year}" Value="{x:Null}" >
							<Setter TargetName="txtblkDeath" Property="Text" Value="present" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=MiddleName}" Value="">
							<Setter TargetName="txtblkSpace" Property="Text" Value="" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</ListBox.ItemTemplate>
			
			<!-- GroupStyle은 각 그룹을 위한 헤더를 정의 -->
			<ListBox.GroupStyle>
				<GroupStyle>
					<GroupStyle.HeaderTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Path=Name}" Foreground="White" Background="DarkGray" FontWeight="Bold"
								FontSize="12pt" Margin="6" />
						</DataTemplate>
					</GroupStyle.HeaderTemplate>
				</GroupStyle>
			</ListBox.GroupStyle>
		</ListBox>
	</DockPanel>

	<Window.CommandBindings>
		<CommandBinding Command="Open" Executed="OpenOnExecuted" />
	</Window.CommandBindings>
</Window>


ListBox의 GroupStyle프로퍼티는 GroupStyle 객체들로 이루어진 컬렉션이다. 컬렉션에 한 개 이상의 GroupStyle 객체를 둘 때에는 반드시 ListBox의 GroupStyleSelector 프로퍼티를 GroupStyleSelector 위임자 규정에 맞게 정의한 메소드로 설정해주어야 한다. 이 메소드는 인자로 전달되는 그룹 이름에 맞는 GroupStyle 객체를 반환한다. 

한 개의 GroupStyle만 이용한다면 그 GroupStyle이 ListBox가 표시하는 모든 그룹에 적용된다. 각 그룹은 자신만의 Style(style은 ContainerStyle 프로퍼티에 설정하는 객체다) 자신만의 패널(패널은 그룹에 속한 항목들을 표시하기 위해 사용한다. ) 자신만의 HeaderTemplate을 가질 수 있다. 필자는 마지막 HeaderTemplate 프로퍼티만 이용했는데, HeaderTemplate 프로퍼티를 이용해서 회색 바탕에 흰색 글자를 표시하는 TextBlock을 정의했다. Text는 Name이란 이름의 프로퍼티에 바인딩되며 그룹의 이름을 표시한다. 각 그룹은 헤더 다음에 표시된다. 헤더는 작곡가가 속한 시기를 나타내며, 선택할 수 없는 컨트롤이다. 

ItemsControl 이 제공하는 그룹핑 기능은 매우 강력하다. 이 기능은 ListBox를 통해 데이터를 전혀 다른 관점에서 볼 수 있게 한다. ListBox 컨트롤은 각 항목을 고유한 방식으로 표시할 수 있을 뿐만 아니라 항목 사이의 관계도 고유하게 표시할수 있다. ListBox의 그룹핑 기능은 프로그램을 개발할 때 당장은 필요하지 않지만 일단 필요해서 사용하게 되면 그 막강함에 매료되고 마는 그런 기능이다. 