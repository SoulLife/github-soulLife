CHAPTER 06 : DockPanel과 Grid

전통적인 윈도우 프로그램에는 상당히 표준적인 레이아웃이 있다. 애플리케이션의 메뉴는 대게 메인 창에서 클라이언트 영역의 상단에 있으며, 창의 폭만큼 메뉴 폭도 늘어난다. 메뉴는 클라이언트 영역 상단에 도킹됐다고 표현한다. 프로그램에 툴바가 있다면 역시 클라이언트 영역의 상단에 도킹된다. 그러나 오직 하나의 컨트롤만 가장 끝단에 도킹될 수 있다. 프로그램에 상태 표시줄이 있으면 클라이언트 영역의 하단부에 도킹된다. 

윈도우 탐색기 같은 프로그램은 클라이언트 영역의 좌측에 도킹된 컨트롤에서 디렉토리 트리를 보여준다. 그리고 메뉴나 툴바, 상태 표시줄 모두가 트리 뷰(tree-view)컨트롤보다 바깥에 있다. 이들 컨트롤은 그 폭이 클라이언트 영역만큼 확장돼 있는 반면 트리 뷰 컨트롤은 다른 컨트롤 사이에서 왼쪽 공간에만 세로로 확장돼 위치해 있다. 

WPF에는 DockPanel 클래스가 있어서 도킹에 대한 처리가 가능하다. DockPanel 은 다음과 같이 생성한다. 

DockPanel dock = new DockPanel();

Window 객체의 생성자에서 이 DockPanel을 생성했다면 다음과 같이 Window의 Content 프로퍼티로 활용할 수 있을 것이다. 

Content = dock;

창의 레이아웃은 DockPanel로 시작하는 것이 일반적이며 그 후에(필요한 경우) 다른 형태의 패널이 DockPanel의 자식이 된다. 다른 패널에서 했던 것처럼 특정 컨트롤이나 다른 엘리먼트를 DockPanel에 추가할 수 있다. 

dock.Children.Add(ctrl);

그리고 DockPanel의 어느 쪽에 컨트롤이 도킹할지를 지정해야 한다. ctrl을 클라이언트 영역의 우측에 도킹시키려면 다음과 같이 지정한다. 

DockPanel.SetDock(ctrl, Dock.Right);

이 구문을 잘못 이해해서는 안 된다. SetDock은 DockPanel 클래스의 정적 메소드이지 방금 생성한 dock이라는 DockPanel 객체의 메소드를 가리키는 것이 아니다. 2개의 인자는 도킹시킬 컨트롤(또는 엘리먼트)과 Dock 열거형의 멤버다. Dock 열거형의 멤버는 Dock.Left, Dock.Top, Dock.Right, Dock.Bottom이 있다. 

DockPanel.SetDock 메소드를 호출하는 시점이 컨트롤을 DockPanel 객체의 Children 컬렉션에 추가하기 전인지 후인지는 관계없다. 심지어 DockPanel 객체를 생성하지 않았어도 DockPanel.SetDock를 호출할 수 있다. 이 경우는 물론 무엇을 하려는 의도는 없지만 말이다. 

조금은 이상하게 보일 수 있는 SetDock의 호출은 첨부 프로퍼티(attached property)를 사용한다. 첨부 프로퍼티는 8장에서 더 자세하게 살펴볼 것이다. 지금은 정적 SetDock 호출이 다음의 구문과 동등하다는 것을 이해하는 정도로 만족하고 넘어가자. 

ctrl.SetValue(DockPanel.DockProperty, Dock.Right);

SetValue 메소드는 DependencyObject 클래스에 정의돼 있고(WPF의 많은 부분이 이 클래스를 상속받는다), DockPanel.DockProperty는 정적 읽기 전용 필드이다. 이는 첨부 프로퍼티이며, 이 첨부 프로퍼티와 그 설정(Dock.Right)이 실제로는 컨트롤에 저장된다. 레이아웃을 수행할때 다음과 같이 호출해 컨트롤의 Dock 설정을 얻어올 수 있다. 

Dock dck = DockPanel.GetDock(ctrl);

실제로는 다음 구문과 동등한 효과를 가진다. 

Dock dck = (Dock)ctrl.GetValue(DockPanel.DockProperty);

다음 프로그램은 DockPanel을 생성해 17개의 버튼을 DockPanel의 자식으로 지정한다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

class DockAroundTheBlock : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new DockAroundTheBlock());
	}
	public DockAroundTheBlock()
	{
		Title = "Dock Around the Block";
		
		DockPanel dock = new DockPanel();
		Content = dock;

		for(int i=0; i<17; i++)
		{
			Button btn = new Button();
			btn.Content = "Button NO. " + (i+1);
			dock.Children.Add(btn);
			btn.SetValue(DockPanel.DockProperty, (Dock)(i % 4));
		}
	}
}

이 프로그램에서 다음 구문을 살펴 보자
DockPanel.SetDock(btn, (Dock)(i%4));

교묘하게 각 버튼에 Dock 열거형의 멤버 Dock.Left, Dock.Top, Dock.Right, Dock.Bottom을 순서대로 순환적으로 할당하고 있다. Dock.Left의 숫자 형태 값이 0이며 차례로 1, 2, 3의 값을 갖기 때문이다. 먼저 추가된 컨트롤이 DockPanel의 각 면에서 더 바깥에 위치함을 쉽게 확인할 수 있다. 각 버튼은 가로나 세로의 어느 한 방향으로는 컨텐트에 맞는 크기를 가지며 다른 방향으로는 가능한 영역을 차지할 수 있게 늘어난다. 창을 가로나 세로의 방향으로 늘려보면 확인할 수 있다. 

마지막에 추가된 컨트롤("Button No. 17"이라고 출력)은 도킹되지 않고 내부 공간의 남은 부분을 차지할 뿐이다. 이런 동작은 DockPanel의 프로퍼티인 LashChildFill의 기본값이 true이기 때문이다. 마지막 버튼에 대해서 DockPanel.SetDock가 호출됐을지라도 그 값은 무시된다. 
DockPanel이 생성된 후 아무 곳에나 다음 구문을 넣어보자. 

dock.LastChildFill = false;

마지막 버튼이 도킹돼 남은 공간은 채워지지 않은 채로 있게 된다. 

그래서 DockPanel을 사용할 떄는 바깥쪽에서 안쪽으로 작업하게 된다. 첫 자식은 부모의 경계면에 대해 가장 바깥에 위치하며 뒤따르는 자식들은 중앙 방향으로 더 멀어지게 된다. 

DockPanel의 자식들은 보통 패널의 폭이나 높이만큼 늘어난다. 자식의 HorizontalAlignment와 VerticalAlignment 프로퍼티가 모두 기본값이 Stretch이기 때문이다. 다음 구문을 넣으면 약간 다르게 보일 것이다. 

btn.HorizontalAlignment = HorizontalAlignment.Center;

상단이나 하단에 도킹된 버튼(중앙에 있는 마지막 버튼도 포함) 모두 폭이 줄어든다. 분명 표준적인 사용자 인터페이스라 할 수는 없다. 도킹된 컨트롤에 대해 Margin 프로퍼티를 설정하는 것도 표준에서 벗어난다. 

다음 프로그램은 DockPanel을 좀 더 전통적인 방법으로 사용하는 것을 보여준다. Menu, ToolBar, StatusBar, ListBox, TextBox 컨트롤들을 생성하긴 하지만 이들 컨트롤에 대해서는 다음 장에서 더 자세히 다룰 것이기 때문에 여기에서는 골격만 제시했다. TextBox는 마지막 자식이며, 그래서 다른 컨트롤들이 없는 나머지 영역을 채우게 된다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;

public class MeetTheDockers : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new MeetTheDockers());
	}
	public MeetTheDockers()
	{
		Title = "Meet the Dockers";

		DockPanel dock = new DockPanel();
		Content = dock;

		//메뉴를 생성
		Menu menu = new Menu();
		MenuItem item = new MenuItem();
		item.Header = "Menu";
		menu.Items.Add(item);

		//패널의 상단에 메뉴를 도킹
		DockPanel.SetDock(menu, Dock.Top);
		dock.Children.Add(menu);

		//툴바를 생성
		ToolBar tool = new ToolBar();
		tool.Header = "Toolbar";

		//패널 상단에 툴바를 도킹
		DockPanel.SetDock(tool, Dock.Top);
		dock.Children.Add(tool);

		//상태 표시줄을 생성
		StatusBar status = new StatusBar();
		StatusBarItem statitem = new StatusBarItem();
		statitem.Content = "Status";
		status.Items.Add(statitem);

		//패널 하단에 상태 표시줄을 도킹
		DockPanel.SetDock(status, Dock.Bottom);
		dock.Children.Add(status);

		//리스트 박스를 생성
		ListBox lstbox = new ListBox();
		lstbox.Items.Add("List Box Item");

		//패널 좌측에 리스트 박스를 도킹
		DockPanel.SetDock(lstbox, Dock.Left);
		dock.Children.Add(lstbox);

		//텍스트 박스를 생성
		TextBox txtbox = new TextBox();
		txtbox.AcceptsReturn = true;

		//패널에 텍스트 박스를 추가하고, 입력 포커스를 줌
		dock.Children.Add(txtbox);
		txtbox.Focus();
	}
}

물론 이 프로그램은 컨트롤 모두가 실제 기능을 수행하지 못하기 때문에 매우 어설픈 상태이긴 하다. ListBox와 TextBox 사이에는 두 컨트롤 사이의 공간을 조정할 수 있게 하는 스플리터(splitter)가 있어야 한다. 

스플리터는 Gird 패널에서 구현돼 있지만 Grid를 사용하는 이유가 이 때문만은 아니다. Grid패널은 자식들을 행과 열로 조직된 셀(cell)들의 모음으로 보여준다. 5장에서 StackThirtyButtons 프로그램을 통해 사용된 기법을 응용하면 컨트롤들을 가로와 세로로 배치할 수 있을 것같아 보인다. 그렇지만 컨트롤들을 가로와 세로로 정렬할 때 가로 방향과 세로 방향 모두 일렬로 줄이 맞기를 원할 것이다. StackThirtyButtons 에서는 버튼의 크기가 다르면 각 행의 3개 버튼이 정확하게 줄 맞춤이 되지 않는다. 

Grid는 아마도 가장 유용한 레이아웃 패널이겠지만 가장 복잡하기도 한다. Grid를 하나의 다목적 레이아웃 솔루션으로 이용할 수도 있겠지만 더욱 유연할 필요가 있다. WPF에서는 이런 이유로 다양한 형태의 패널을 지원한다. 

이 점을 염두에 두되 지금은 Grid 타입의 객체를 생성하는 것으로 시작해보자. 

Grid grid = new Grid();

Grid를 시험하기 위해 다음과 같이 해서 셀들 사이에 점선을 출력해보자 

grid.ShowGridLines = true;

이 프로퍼티를 true로 설정하면 셀 사이에 점선이 출력된다. 이 선의 스타일이나 색, 두께를 변경할수 있는 방법은 없다. 인쇄되는 문서에 적합하게 행과 열의 선 사이로 많은 컨트롤을 배치하고 싶다면 Grid보다는 Table을 사용해야 할 것이다. Table(System.Windows.Documents 네임스페이스에 정의됨)은 HTML이나 워드프로세서에서 사용되는 표와 유사하다. Grid는 엄밀히 말해 레이아웃이다. 

Grid에 얼마나 많은 행과 열이 필요한지와 이 행과 열의 크기는 어떻게 결정할지 지정할 필요가 있다. 각 행의 높이는 다음 중 한 가지가 될 수 있다. 

* 장치 독립적 단위로 고정시킴

* 행의 자식중 가장 큰 높이를 기준으로 함
 
* 남는 공간을 기준으로 함(다른 행들이 할당되고 남는 부분)

유사하게 각 열의 폭도 세 가지 중의 하나로 설정할 수 있다. 이러한 세가지 선택 사항은 GridUnitType 열거형 멤버인 Pixel, Auto, Start와 대응된다(Star라는 용어는 HTML의 table에서 남은 공간을 할당할 때 사용되는 별표인 *에서 따온 것이다)

GridLength라는 클래스를 사용해 행의 높이와 열의 폭을 지정한다. 두 가지의 생성자를 사용할 수 있는데, 먼저 다음과 같이 값을 지정해보자. 

new GridLength(100)

이 값은 장치 독립적 단위로 된 크기다. 다음의 생성자와 동일한 효과를 가진다. 

new GridLength(100, GridUnitType.Pixel)

다음과 같이 GridUnitType.Star 멤버를 사용해 지정할 수도 있다.

new GridLength(50, GridUnitType.Star)

이 값은 남는 공간을 배분해 사용할 때 지정한다. 단 수치 값은 GridUnitType.Star를 사용하는 다른 행이나 열의 조합에서만 의미를 가진다. 다음과 같이 생성자에 GridUnitType.Auto를 사용해 지정할 수도 있다. 

new GridLength(0, GridUnitType.Auto)

이 경우에는 수치 값이 무시된다. 이렇게 하지 않고 다음과 같은 정적 프로퍼티를 사용할 수도 있다. 

GridLength.Auto

이는 GridLength 타입의 객체를 반환한다. 

Grid에는 RowDefinitions와 ColumnDefinitions라는 두 개의 프로퍼티가 있다. 이 프로퍼티들은 RowDefinitionCollection과 CollumnDefinitionCollection 타입으로, 각기 RowDefinition과 ColumnDefinition 객체의 컬렉션이다. 

Grid의 각 행에 대해 RowDefinition객체를 생성해야 한다. 이때 중요한 프로퍼티는 Height이며, GridLength 객체로 설정한다.(RowDefinition에도 높이의 제약 사항에 사용하는 MinHeight와 MaxHeight 프로퍼티가 있으나 필수 사항은 아니다.)ColumnDefinition의 중요한 프로퍼티는 Width이며, GridLength 객체로 설정한다. ColumnDefinition에도 MinWidth와 MaxWidth 프로퍼티가 있다. 

안타깝게도 RowDefinition과 ColumnDefinitions 컬렉션을 설정하는 구문은 다소 장황하다. 다음 구문은 4개 행을 설정한다. 

RowDefinition rowdef = new RowDefinition();
rowdef.Height = GridLength.Auto;
grid.RowDefinitions.Add(rowdef);

rowdef = new RowDefinition();
rowdef.Height = new GridLength(33, GridUnitType.Star);
grid.RowDefinitions.Add(rowdef);

rowdef = new RowDefinition();
rowdef.Height = new GridLength(150);
grid.RowDefinitions.Add(rowdef);

rowdef = new RowDefinition();
rowdef.Height = new GridLength(67, GridUnitType.Star);
grid.RowDefinitions.Add(rowdef);

첫째 행의 높이는 그 행에서 가장 큰 높이를 가진 엘리먼트를 기준으로 한다. 세 번째 행의 높이는 장치 독립적 단위로 150이다. Grid 자체의 높이가 있어서 상당히 남는 공간이 생길 수 있다. 이럴 경우 그 공간의 33%가 두번째 행에 , 67%가 네번째 행에 할당된다. 구문에서 명확하게 지시하지는 않으나 이 값은 퍼센트로 지정돼야 한다. Grid 컨트롤에서는 단순하게 명확하게 지시하지는 않으나 이 값은 퍼센트로 지정돼야 한다. Grid 컨트롤에서는 단순하게 모든 GridUnitType.Star 의 값들을 더하고, 각 값들을 이 총합으로 나눠서 공간을 할당한다. 

Width 프로퍼티를 설정하는 부분을 제외하면 열의 정의도 유사하다. 잘 조합하면 for 루프 안에서 이런 설정을 할 수 있을 것이다. 

Height와 Width 프로퍼티의 기본값은 GridUnitType.Star로 1이다. 그래서 행과 열 사이의 공간을 균등하게 배분하려면 기본값을 그대로 사용한다. 하지만 여전히 행과 열의 컬렉션에 RowDefinition이나 ColumnDefinition 객체를 추가할 필요성은 있다. 다음과 같이 하면 코드가 줄어든다. 

grid.RowDefinitions.Add(new RowDefinition());

하나의 열만 있는 Grid가 필요한 경우에는 ColumnDefinition을 추가할 필요가 없다. 마찬가지로 하나의 행에 대해서는 RowDefinition이 필요 없으며 하나의 셀만 있는 Grid라면 둘 모두 불필요하다. 

다른 패널에서 했던 것처럼 다음과 같이 Grid에 컨트롤을 추가한다. 

grid.Children.Add(ctrl);

그런 후 SetRow와 SetColumn 정적 메소드를 사용해 이 컨트롤의 행과 열의 위치를 지정한다. 이 위치는 0을 기준으로 한다. 

Grid.SetRow(ctrl, 2);
Grid.SetColumn(ctrl, 5);

0을 기준으로 하기 때문에 위치는 세번째 행과 여섯 번째 열이다. DockPanel.SetDock에서 와 같이 이 호출에도 첨부 프로퍼티를 사용한다. 기본값은 행과 열이 모두 0이다. 

여러 개의 객체가 한 셀에 들어갈 수 있으나, 가끔 모든 객체가 다 보이지 않을 수 있다. 분명 그리드(grid)에 넣었는데도 보이지 않는 객체가 있다면 다른 것과 함께 같은 행과 열에 넣었을 수 있다. 

엘리먼트의 HorizontalAlignment와 VerticalAlignment프로퍼티는 셀 안에서 엘리먼트의 위치를 지정하는 데 사용된다. 일반적으로 셀이 엘리먼트의 크기에 맞추어 있지 않다면 엘리먼트가 셀의 크기에 맞추어질 것이다. 

다음 프로그램은 클라이언트 영역을 가득 채우는 Grid를 생성한다. 창의 크기는 Grid의 크기에 맞추어지며 창의 크기 조절 경계도 감춘다. Grid에는 3개의 행과 2개의 열이 있고, 모두 GridLength.Auto를 사용한다. 이 Grid의 셀들에는 4개의 Label 컨트롤과 2개의 TextBox 컨트롤이 있어서 날짜를 입력할 수 있게 한다. 프로그램이 하는 일은 두 날짜의 차이를 계산 하는 것이다. 

최초에는 친구를 위해 Win32 버전으로 작성한 프로그램이었다. 그 친구는 가계 혈통을 조사했는데, 출생일과 사망일의 차이를 년월일로 계산하기를 원했다. Win32 버전에서는 DATETIMEPICKCLASS를 사용할 수 있었지만, 안타깝게도 WPF의 초기 배포판에서는 이 같은 컨트롤이 없었다. 그래서 이 프로그램에서는 DateTime.TryParse 정적 메소드를 사용해 텍스트 문자열을 날짜로 변환했다. 그리고 이름과 레이블을 변경했다. 이 프로그램을 이용해 태어난 후 지금까지 얼마나 오래 살았는지를 계싼해 볼 수 있을 것이다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

class CalculateYourLife : Window
{
	TextBox txtboxBegin, txtboxEnd;
	Label lblLifeYears;
	
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new CalculateYourLife());
	}
	public CalculateYourLife()
	{
		Title = "Calculate Your Life";
		SizeToContent = SizeToContent.WidthAndHeight;
		ResizeMode = ResizeMode.CanMinimize;

		//Grid 생성
		Grid grid = new Grid();
		Content = grid;

		//행과 열의 정의
		for(int i=0; i<3; i++)
		{
			RowDefinition rowdef = new RowDefinition();
			rowdef.Height = GridLength.Auto;
			grid.RowDefinitions.Add(rowdef);
		}
		for(int i=0; i<2; i++)
		{
			ColumnDefinition coldef = new ColumnDefinition();
			coldef.Width = GridLength.Auto;
			grid.ColumnDefinitions.Add(coldef);
		}
		//첫 번째 Label
		Label lbl = new Label();
		lbl.Content = "Begin Date: ";
		grid.Children.Add(lbl);
		Grid.SetRow(lbl, 0);
		Grid.SetColumn(lbl, 0);

		//첫 번째 TextBox
		txtboxBegin = new TextBox();
		txtboxBegin.Text = new DateTime(1980, 1, 1).ToShortDateString();
		txtboxBegin.TextChanged += TextBoxOnTextChanged;
		grid.Children.Add(txtboxBegin);
		Grid.SetRow(txtboxBegin,0);
		Grid.SetColumn(txtboxBegin, 1);

		//두번째 Label
		lbl = new Label();
		lbl.Content = "End Date: ";
		grid.Children.Add(lbl);
		Grid.SetRow(lbl, 1);
		Grid.SetColumn(lbl, 0);

		//두번째 TextBox
		txtboxEnd = new TextBox();
		txtboxEnd.TextChanged += TextBoxOnTextChanged;	
		grid.Children.Add(txtboxEnd);
		Grid.SetRow(txtboxEnd, 1);
		Grid.SetColumn(txtboxEnd, 1);

		//세 번째 Label
		lbl = new Label();
		lbl.Content = "Life Years: ";
		grid.Children.Add(lbl);
		Grid.SetRow(lbl, 2);
		Grid.SetColumn(lbl, 0);

		//계산 결과가 보여질 Label
		lblLifeYears = new Label();
		grid.Children.Add(lblLifeYears);
		Grid.SetRow(lblLifeYears, 2);
		Grid.SetColumn(lblLifeYears, 1);

		//여백 설정
		Thickness thick = new Thickness(5); //약 1/20인치
		grid.Margin = thick;

		foreach(Control ctrl in grid.Children)
			ctrl.Margin = thick;
		//포커스 설정과 이벤트 핸들러 호출
		txtboxBegin.Focus();
		txtboxEnd.Text = DateTime.Now.ToShortDateString();
	}
	void TextBoxOnTextChanged(object sender, TextChangedEventArgs args)
	{
		DateTime dtBeg, dtEnd;

		if(DateTime.TryParse(txtboxBegin.Text, out dtBeg) && DateTime.TryParse(txtboxEnd.Text, out dtEnd))
		{
			int iYears = dtEnd.Year - dtBeg.Year;
			int iMonth = dtEnd.Month - dtBeg.Month;
			int iDays = dtEnd.Day - dtBeg.Day;

			if( iDays < 0)
			{
				iDays += DateTime.DaysInMonth(dtEnd.Year, 1 + (dtEnd.Month + 10) % 12);
				iMonths -= 1;
			}
			if(iMonths < 0)
			{
				iMonths += 12;
				iYears -= 1;
			}
			lblLifeYears.Content = String.Format("{0} year{1}, {2} month{3}, {4} day{5}",iYears,iYears == 1? "" : "s",
							iMonths, imOnths == 1 ? "" : "s",iDays, iDays == 1 ? "" : "s");
		}else
		{
			lblLifeYears.Content = "";
	}
}

이 프로그램에서는 두 개의 TextBox 컨트롤에 대한 TextChanged 이벤트 핸들러가 설치됐다. 이름에서 알수 있듯이 TextChanged 이벤트는 텍스트가 변경될 때마다 발생된다. 이벤트 핸들러에서는 텍스트 문자열을 DateTime 객체로 변환한 후 두 날짜의 차이를 계산한다. 보통 어떤 DateTime 객체에서 다른 DateTime 객체를 빼면 그 결과는 TimeSpan 객체가 되지만 여기에서는 그다지 적절하지 않다. 사람들이 알아보기 쉽게 출력해주는 것이 좋기 때문이다. 예를 들어 시작일이 어떤 달의 5일이고 종료일이 같은 달의 20일이라면 그 차이는 15일로 보여지는 것이 바람직하다. 

시작일이 5월 20일이고 종료일이 9월5일이라고 가정하면 결과는 5월20일부터 8월20일까지의 3개월과 8월 20일부터 9월5일까지의 날짜로 계산돼야 한다. 마지막 계산은 이전 달의 마지막 날짜도 고려해야 한다. 비결은 DateTime에 있는 정적 DaysInMonth 메소드와 몇 가지 수학적 계산을 이용하는 것이다. 

Grid를 사용하는 다른 레이아웃 예제를 살펴보자. 다음은 자료 입력 폼에서 볼 수 있을 법한 레이아웃이다. 두 개의 Grid 패널을 생성해서 StackPanel의 자식으로 지정했다. 첫 번째의 Grid 패널은 두 개의 열과 다섯 개의 행이 있으며, 레이블들과 TextBox 컨트롤을 담고 있다. 두 번째의 Grid는 하나의 행과 두개의 열이 있어서 Submit 버튼과 Cancel 버튼을 위치시킨다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class EnterTheGrid : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new EnterTheGrid());
	}
	public EnterTheGrid()
	{
		Title = "Enter the Grid";
		MinWidth = 300;
		SizeToContent = SizeToContent.WidthAndHeight;

		//StackPanel을 생성하고 컨텐트로 지정.
		StackPanel stack = new StackPanel();
		Content = stack;

		//Grid를 생성하고 StackPanel에 추가
		Grid grid1 = new Grid();
		grid1.Margin = new Thickness(5);
		stack.Children.Add(grid1);

		//행을 정의
		for(int i=0;i < 5; i++)
		{
			RowDefinition rowdef = new RowDefinition();
			rowdef.Height = GridLength.Auto;
			grid1.RowDefinitions.Add(rowdef);
		}
		//열을 정의
		ColumnDefinition coldef = new ColumnDefinition();
		coldef.Width = GridLength.Auto;
		grid1.ColumnDefinitions.Add(coldef);

		coldef = new ColumnDefinition();
		coldef.Width = new GridLength(100, GridUnitType.Star);
		grid1.ColumnDefinitions.Add(coldef);

		//Label과 TextBox
		string[] strLabels = {"_First name: ", "_Last name:", "_Social security number:", "_Credit card number:", "_Other personal stuff:" };

		for(int i=0; i<strLabels.Length; i++)
		{
			Label lbl = new Label();
			lbl.Content = strLabels[i];
			lbl.VerticalContentAlignment = VerticalAlignment.Center;
			grid1.Children.Add(lbl);
			Grid.SetRow(lbl, i);
			Grid.SetColumn(lbl, 0);
			TextBox txtbox = new TextBox();
			txtbox.Margin = new Thickness(5);
			grid1.Children.Add(txtbox);
			grid1.SetRow(txtbox, i);
			grid1.SetColumn(txtbox, 1);
		}
		// 두번째의 Grid를 생성하고 StackPanel에 추가
		Grid grid2 = new Grid();
		grid2.Margin = new Thickness(10);
		stack.Children.Add(grid2);

		//하나의 행만 있기 때문에 행의 정의는 불필요. 
		//Default comumn definitions are "star"
		grid2.columnDefinitions.Add(new ColumnDefinition());
		grid2.ColumnDefinitions.Add(new ColumnDefinition());

		//버튼 생성
		Button btn = new Button();
		btn.Content = "Submit";
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.IsDefault = true;
		btn.Click += delegate { close(); };
		grid2.Children.Add(btn); //행과 열은 모두 0
		btn = new Button();
		btn.Content = "Cancel";
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.IsDefault = true;
		btn.Click += delegate { Close(); };
		grid2.Children.Add(btn);
		Grid.SetColumn(btn, 1); //행은 0

		//첫 번째 텍스트 박스로 포커스를 설정
		(stack.Children[0] as Panel).Children[1].Focus();
	}
}


StackPanel은 창의 전체 폭을 차지하며 두 개의 Grid 패널도 마찬가지다. 상단 Grid 패널의 첫 번째 열(레이블들을 포함)은 GridLength.Auto의 폭을 가지지만 두 번째 열(TextBox 컨트롤)은 GridUnitType.Star의 폭을 가진다. 이는 첫 번째 열이 차지하는 폭을 제외하고 남는 공간 전체를 할당한다는 의미다. 결과적으로 창을 더 늘리면 TextBox 컨트롤만 늘어나게된다. 컨트롤의 최초 폭보다 더 많은 글자를 입력하는 경우에도 TextBox 컨트롤이 늘어난다(창의 폭도 늘어난다) 프로그램이 시작될 때 TextBox 컨트롤이 너무 작아 보이지 않는 것을 방지하기 위해 창의 최소 폭은 300단위로 지정했다. 

처음 다섯 번째 행의 높이는 TextBox 컨트롤의 높이에 좌우된다. Label 컨트롤과 이에 대응하는 TextBox가 보기 좋게 정렬되게 하기 위해 각 Label의 VerticalAlignment 프로퍼티를 Center로 설정한다. 

버튼 배치를 위해 한 행의 Grid를 사용했는데, 대신에 수평의 StackPanel을 사용할 수도 있었다. 그렇지만 예제에서처럼 두 열의 폭 모두를 GridUnitType.Star로 해서 창이 더 커져도 버튼간의 상대적 거리가 동일하게 유지되는 점을 주목하자. 

Grid 에서 엘리먼트가 여러 개의 인접한 행이나 열을 차지하게 위치할 수 있으며 행과 열 모두를 차지하게 위치할 수도 있다. Grid.SetRowSpan과 Grid.SetColumnSpan 정적 메소드를 이용해 엘리먼트가 위치할 행과 열의 개수를 지정하면 된다. 다음의 예제를 통해 자세히 알아보자. 

grid.Chidlren.Add(ctrl);
Grid.SetRow(ctrl, 3);
Grid.SetRowSpan(ctrl, 2);
Grid.SetColumn(ctrl, 5);
Grid.SetColumnSpan(ctrl, 3);

ctrl이라는 컨트롤은 3행부터 4행까지와 5열부터 7열까지 여섯 개의 셀로 에워싼 지역에 위치한다.(위치는 0부터 이므로 3으로 지정한 행은 실제로 네 번째 행에 해당한다. )

다음 프로그램은 EnterTheGrid에서와 같은 레이아웃을 사용하지만 6개의 행과 4개의 열로 된 하나의 Grid 패널만을 사용한다. 처음의 5개 행은 레이블과 텍스트 박스를 넣고 마지막 행에는 버튼을 넣는다. 첫 열은 레이블이고 가장 오른쪽의 두 개 열은 버튼이 할당된다. 텍스트 박스는 두 번째부터 네 번째 열 모두에 놓이게 된다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class SpanTheCells : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new SpanTheCells());
	}
	public SpanTheCells()
	{
		Title = "Span the Cells";
		SizeToContent = SizeToContent.WidthAndHeight;

		//Grid를 생성
		Grid grid = new Grid();
		grid.Margin = new Thickness(5);
		Content = grid;

		//행 정의
		for(int i=0; i< 6; i++)
		{
			RowDefinition rowdef = new RowDefinition();
			rowdef.Height = GridLength.Auto;
			grid.RowDefinitions.Add(rowdef);
		}
		//열 정의
		for(int i=0; i<4; i++)
		{
			ColumnDefinition coldef = new ColumnDefinition();
			if(i == 1)
				coldef.Width = new GridLength(100, GridUnitType.Star);
			else
				coldef.Width = GridLength.Auto;
		}
		//Label과 TextBox 생성
		string[] astrLabel = {"_First name:", "_Last name:", "_Social security number:", "_Credit card number:", "_Other personal stuff:" };
		for(int i=0; i<astrLabel.Length; i++)
		{
			Label lbl = new Label();
			lbl.Content = astrLabel[i];
			lbl.VerticalContentAlignment = VerticalAlignment.Center;

			grid.Children.Add(lbl);
			Grid.SetRow(lbl, i);
			Grid.SetColumn(lbl, 0);
		
			TextBox txtbox = new TextBox();
			txtbox.Margin = new Thickness(5);

			grid.Children.Add(txtbox);
			Grid.SetRow(txtbox, i);
			Grid.SetColumn(txtbox, 1);
			Grid.SetColumnSpan(txtbox, 3);
		}
		//버튼 생성
		Button btn = new Button();
		btn.Content = "Submit";
		btn.Margin = new Thickness(5);
		btn.IsDefault = true;
		btn.Click += delegate { Close(); };
		grid.Children.Add(btn);
		Grid.SetRow(btn, 5);
		Grid.SetColumn(btn, 2);

		btn = new Button();
		btn.Content = "Cancel";
		btn.Margin = new Thickness(5);
		btn.IsDefault = true;
		btn.Click += delegate { Close(); };
		grid.Children.Add(btn);
		Grid.SetRow(btn, 5);
		Grid.SetColumn(btn, 3);

		//첫 번째 텍스트 박스에 포커스를 줌
		grid.Children[1].Focus();
	}
}

여섯 개의 행 모두 높이를 GridLength.Auto 로 지정했음을 주목하자. 네 개의 열은 두 번 째만 제외하고 모두 GridLength.Auto로 했으며 두 번째 열은 GridLength.Star로 지정해 남은 공간을 모두 사용한다. 

창을 더 크게 늘리면 열의 하나가 GridLengthType.Star로 돼있기 때문에 텍스트 박스도 늘어난다. 두 개의 버튼은 창의 오른쪽에 있는 위치를 계속 유지한다. 또한 텍스트 박스에긴 텍스트를 입력하면 자동적으로 창도 늘어나게 된다. 

Grid 패널은 수직 또는 수평 스플리터(splitter)가 필요할 때 이를 지원해준다. 스플리터란 얇은 막대 모양으로 사용자가 이를 이동시키면 창 안에 있는 두 영역의 공간을 조정할 수 있다. 

GridSplitter 클래스는 Thumb 클래스를 거쳐서 Control을 상속받는다. GridSplitter는 반드시 Grid 패널의 자식이 돼야 하며, Grid의 다른 자식처럼 GridSplitter의 행과 열의 위치를 지정해야 한다. 

GridSplitter split = new GridSplitter();
split.Width = 6;
grid.Children.Add(split);
Grid.SetRow(split, 3);
Grid.SetColumn(split, 2);

그런데 한 가지 특이한 점은 GridSplitter가 다른 엘리먼트와 셀을 공유할 수 있어서 GridSplitter가 셀 안의 엘리먼트를 부분적으로 가리거나 셀 안의 엘리먼트가 GridSplitter를 완전히 가릴수 있다는 것이다. GridSplitter와 다른 엘리먼트가 셀을 공유하려면 이런 문제를 피하기 위해 다음 방법 중 하나를 선택해야 한다. 스플리터가 나타날 쪽으로 엘리먼트에 약간의 여백을 주거나 그 셀에 있는 엘리먼트 다음에 GridSplitter를 자식으로 추가해 스플리터를 더 앞쪽에 보이게 할 수 있다. 

기본값으로 GridSplitter의 HorizontalAlignment은 Right이고, VerticalAlignment는 Stretch다. 따라서 스플리터는 셀의 오른쪽 모서리에 수직의 막대로 보이게 된다. GridSpliteer의 폭은 기본값이 0이기 때문에 Width 프로퍼티에 작은 값을 지정해야 한다. (약 1/16인치 또는 6단위 정도) 스플리터를 좌우로 움직이면 스플리터가 있는 열의 폭과 스플리터의 오른쪽에 있는 열의 폭이 변경된다. 다음은 3x3 그리드에 9개의 버튼을 생성하고 중앙의 셀에 스플리터를 넣는 단순한 프로그램이다. 
			