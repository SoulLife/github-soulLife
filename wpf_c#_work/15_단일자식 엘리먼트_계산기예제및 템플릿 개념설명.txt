CHAPTER 11장 : 단일 자식 엘리먼트

FrameworkElement나 Control을 상속받는 많은 클래스들은 자식을 갖는다. 그리고 이런 자식들을 수용하기 위해서 통상 1개의 프로퍼티와 4개의 메소드를 오버라이딩한다. 이 5가지는 다음과 같다. 

1. VisualChildrenCount 이 읽기 전용 프로퍼티는 UIElement의 부모인 visual 클래스에 정의되어 있다. FrameworkElement에서 파생된 클래스는 이 프로퍼티를 오버라이딩해서 엘리먼트가 관리하는 자식의 수를 알 수 있게 한다. VisualChildrenCount를 오버라이딩하는 것은 다음과 같은 형태가 될 것이다. 

protected override int VisualChildrenCount
{
	get
	{
		...
	}
}

2. GetVisualChild이 메소드도 Visual에 정의되어 있다. 인자는 자식의 인덱스로부터 0부터 VisualChildrenCount보다 1이 작은 값까지 가능하다. 이 메소드를 오버라이딩해야 만 엘리먼트가 인덱스에 대응하는 자식을 반환할 수 있다. 

protected override Visual GetVisualChild(int index) { ... }

관련 문서를 보면 이 메소드는 null을 반환해서는 안 된다고 나와있다. 인덱스가 부정확할 경우에는 예외 상황을 던져야 한다. 

3. MeasureOverride 이미 한번 본 적 이 있다. 이 메소드에서 엘리먼트의 요구 크기를 계산하고 그 크기를 반환한다. 

protected override Size MeasureOverride(Size sizeAvailable)
{
	...
	return sizeDesired;
}

그러나 자식을 가진 엘리먼트는 그 자식에 필요한 크기도 고려해야 한다. 이를 위해 각 자식의 Measure 메소드를 호출해서 그 자식의 DesiredSize 프로퍼티를 살펴야 한다. Measure는 public 메소드로 UIElement에 정의되어 있다. 


4. ArrangeOverride 이 메소드는 UIElement에 정의된 ArrangeCore 메소드를 대체하기 위한 것으로 FrameworkElement에 정의되어 있다. 이 메소드는 엘리먼트에 대한 최종 레이아웃 크기를 가리키는 Size 객체를 받는다. ArrangeOverride가 호출되면 엘리먼트의 각 자식들에 대한 Arrange를 호출해서 그 표면 위에 배치시킨다. Arragne는 UIElement에 정의된 public 메소드다. Arragne의 인자 1개는 자식의 위치와 크기를 가리키는 Rect 객체인데, 그 부모에 대해 상대적인 위치다. 일반적으로 ArrangeOverride 메소드는 인자로 받았던 Size 객체를 반환한다. 

protected override Size ArrangeOverride(Size sizeFinal)
{
	...
	return sizeFinal;
}


5. OnRender 이 메소드로 엘리먼트를 그릴 수 있다. 엘리먼트의 자식은 각기 그들의 OnRender 메소드에서 그려진다. 엘리먼트의 OnRender 메소드가 호출되어 그려지는 것 보다 자식들이 더 위에 나타난다. 

protected override void OnRender(DrawingContext dc) { ... }

MeasureOverride, ArrangeOverride, OnRender는 차례로 호출된다. MeasureOverride가 항상 ArrangeOverride보다 먼저 호출되며, 그 뒤에 OnRender가 호출된다. 그러나 OnRender는 ArrangeOverride가 호출되지 않아도 호출될 수 있으며, ArrangeOverride도 MeasureOverride가 호출되지 않은 채 호출 될 수 있다. 

11장 에서는 자식을 하나만 갖는 단일 자식 엘리먼트에 초점을 둘 것이다. 여러 개의 자식을 갖는 엘리먼트는 보통 패널(panel)로 분류되며 12장에서 알아볼 것이다. 

다음은 EllipseWithChild라는 클래스로 10장의 BetterEllipse를 상속받는다.(그래서 Brush와 Fill 프로퍼티를 복사할 필요가 없다)단 여기에 UIElement 타입의 Child 라는 프로퍼티가 추가되었다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;


public class EllipseWithChild: Petzold.RenderTheBetterEllipse.BetterEllipse
{
	UIElement child;

	// Public Child 프로퍼티
	public UIElement Child
	{
		set
		{
			if(child != null)
			{
				RemoveVisualChild(child);
				RemoveLogicalChild(child);
			}
			if((child = value) != null)
			{
				AddVisualChild(child);
				AddLogicalChild(child);
			}
		}
		get
		{
			return child;
		}
	}
	//VisualChildrenCount 오버라이딩. Child가 null이 아니면 1을 반환
	protected override int VisualChildrenCount
	{
		get
		{
			return Child != null ? 1 : 0;
		}
	}
	//GetVisualChildren 오버라이딩. Child를 반환
	protected override Visual GetVisualChild(int index)
	{
		if( index > 0 || Child == null)
			throw new ArgumentOutOfRangeException("index");
		return Child;
	}
	//MeasureOverride 오버라이딩, Child의 Measure 메소드를 호출
	protected override Size MeasureOverride(Size sizeAvailable)
	{
		Size sizeDesired = new Size(0, 0);
		if (Stroke != null)
		{
			sizeDesired.Width += 2 * Stroke.Thickness;
			sizeDesired.Height += 2 * Stroke.Thickness;

			sizeAvailable.Width = Math.Max(0, sizeAvailable.Width - 2 * Stroke.Thickness);
			sizeAvailable.Height = Math.Max(0, sizeAvailable.Height - 2 * Stroke.Thickness);
		}
		if(Child != null)
		{
			Child.Measure(sizeAvailable);

			sizeDesired.Width += Child.DesiredSize.Width;
			sizeDesired.Height += Child.DesireSize.Height;
		}
		return sizeDesired;
	}
	//ArrangeOverride 오버라이딩. Child의 Arrange 메소드를 호출
	protected override Size ArrangeOverride(Size sizeFinal)
	{
		if(Child != null)
		{
			Rect rect = new Rect(new Point((sizeFinal.Width - Child.DesiredSize.Width) /2, (sizeFinal.Height - Child.DesiredSize.Height) /2),
						Child.DesiredSize);
			Child.Arrange(rect);
		}
		return sizeFinal;
	}
}

private child 필드는 public Child 프로퍼티를 통해서 접근할 수 있다. 이 엘리먼트의 자식이 UIElement에서 파생될 것으로 여겨지지 않더라도 일단 UIElement 객체라고 가정하는 것이 일반적이며, 마찬가지로 자식 필드와 프로퍼티도 모두 UIElement라고 가정한다. 

Child 프로퍼티의 set 접근자에서는 child 필드를 null이 아닌 엘리먼트로 설정할 때 AddVisualChild와 AddLogicalChild 메소드를 호출하며, child가 이전에 null이 아닌 엘리먼트로 설정되어 있다면 RemoveVisualChild와 RemoveLogicalChild도 호출한다. 자식 엘리먼트를 유지하고 관리하는 것은 클래스의 책임이므로 이런 메소드들을 호출해서 비주얼 논리트리를 유지 관리한다. 비주얼 논리 트리는 프로퍼티 상속과 이벤트 라우팅에 필요하다. 

이 클래스에서 VisualChildrenCount의 오버라이딩은 Child가 null이 아닐 때는 1을 반환하고, 그렇지 않으면 0을 반환한다. GetVisualChild의 오버라이딩에서는 Child 프로퍼티를 반환한다. 반환할 수 없는 자식의 인자가 넘겨질 때는 예외 상황을 발생시킨다. 

GetVisualChild를 오버라이딩할 필요성에 대해 의아해할지 모르겠다. Child 프로퍼티의 set 접근자에서 AddVisualChild를 호출하고 있기 때문에 GetVisualChild의 기본 구현이 그 엘리먼트를 반환할 것이라고 가정하는 것이 합리적이지 않을까? 합리적이든 아니든 간에 그런 식으로 동작하지는 않는다. FrameworkElement를 상속받는 어떤 클래스에서라도 VisualChildrenCount와 GetVisualChild의 구현, 그 자식 컬렉션을 관리하는 것은 개발자의 몫이다. 

FrameworkElement에서 파생된 클래스에서 MeasureOverride의 인자로 사용 가능한 크기는 0에서 무한대까지의 범위다. 이 메소드에서 요구 크기를 계산해서 반환한다. EllipseWithCihld에서 이 메소드는 크기가 0인 sizeDesired 객체를 가지고 시작한다. 그 후 타원의 경계에 2를 곱한 값을 sizeDesired에 더한다. 적어도 경계선 전체를 출력해야 함을 의미한다. 그 후에 sizeAvailable인자에서 이 폭과 높이를 빼는데, 0보다 작아지지는 않게 하고 있다. 

Child 프로퍼티가 null이 아니면 MeasureOverride에서는 계속해서 조정된 sizeAvailable을 인자로 해서 자식의 Measure 메소드를 호출한다. 이 Measure 메소드는 때로 자식의 MeasureOverride 메소드를 호출하기도 하고, 또 그 메소드는 자식의 자식에 대해서 Measure 메소드를 호출할 가능성도 있다. 이렇게 해서 자식 엘리먼트의 전체 트리를 측정할 수 있다. 기본적으로 엘리먼트의 DesiredSize 프로퍼티를 업데이트하는 책임은 Measure 메소드에 있다. 

자식의 Measure 메소드는 값을 반환하지는 않지만 MeasureOverride에서는 이제 자식의 DesiredSize 프로퍼티 값을 볼 수 있으며, 부모의 sizeDesired를 결정하는 데에 이 크기를 이용할 수 있다. 이렇게 결정된 값을 MeasureOverride를 통해 반환한다. 

DesiredSize 프로퍼티는 어떤 값일까? 물론 MeasureOverride의 반환값을 이용해 확인해 보면 알 수 있을 것 같은데, 이 두 값이 비슷하지만 완전히 같지는 않다. 큰 차이점은 DesiredSize에서는 엘리먼트에 설정된 Margin이 포함된다는 점이다. 어떻게 계산이 되는지 간략하게 알아보자. 

ArrangeOverride 메소드를 통해 엘리먼트의 표면에 그 자식 엘리먼트를 배치한다. ArrangeOverride 의 인자는 레이아웃의 최종 크기다. ArrangeOverride 메소드에서 모든 자식에 대해 Arrange 메소드를 호출하게 된다. Arrange에는 자식의 위치와 크기를 지정하는 Rect 인자를 넘긴다. Left와 Top 프로퍼티는 부모의 좌측 상단 모서리에 대해 상대적 좌표로 지정해야 한다. Width와 Height 프로퍼티는 일반적으로 자식의 DesiredSize 프로퍼티를 사용한다. 
Rect 인자의 Width와 Height 프로퍼티는 자식의 Margin을 포함한다고 가정하기 때문에, Arrange의 인자로 DesiredSize(자식의 Margin이 포함됨)를 선택하는 것이 적절하다. 

Arrange 메소드에서는 때로 자식의 ArrangeOverride 메소드를 호출하기도 한다. 이때 인자에는 Margin이 제외된다. ArrangeOverride 메소드가 호출되면 그 자식의 Arrange 메소드등을 호출할 수도 있다. 

다음은 EllipseWithChild 객체를 생성하고 Child 프로퍼티에 TextBlock 객체를 할당하는 프로그램이다. Child 프로퍼티에는 Image 객체나 기타 다른 엘리먼트를 대입할 수 있다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class EncloseElementInEllipse : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new EncloseElementInEllipse());
	}
	public EncloseElementInEllipse()
	{
		Title = "Enclose Element in Ellipse";
		EllipseWithChild elips = new EllipseWithChild();
		elips.Fill = Brushes.ForestGreen;
		elips.Stroke = new Pen(Brushes.Magenta, 48);
		Content = elips;

		TextBlock text = new TextBlock();
		text.FontFamily = new FontFamily("Times New Roman");
		text.FontSize = 48;
		text.Text = "Text inside ellipse";

		//EllipseWithChild의 Child 프로퍼티에 TextBlock을 할당
		elips.Child = text;
	}
}

이 프로그램을 실행해 보면 알 수 있지만 타원이 너무 작아서 MeasureOverride 논리에 벗어나지 않는한 TextBlock 엘리먼트는 항상 타원의 경계선에 둘러싸여있다. 전체 텍스트가 출력될 충분한 공간이 없다면 텍스트는 잘리게 된다. TextBlock 엘리먼트는 텍스트가 엘리먼트의 경계를 넘어서는 것을 막기 위해서 10장에서 논의된 기법 중 하나를 사용할 것이다. 

WPF에서의 레이아웃은 루트 엘리먼트에서 시작해서 엘리먼트 트리를 따라 내려오면서 수행하는 투 패스 처리(two-pass process)라는 사실에 대해 꽤 명확해졌을 것이다. 루트 엘리먼트는 Window 타입의 객체다. 이 객체에는 1개의 Border 타입 비주얼 자식이 있다(이것은 창을 둘러싼 크기 조절용 경계다)이 Border에는 Grid 타입의 비주얼 자식이 있고, Grid에는 2개의 자식이 있는데, AdornerDecorator와 ResizeGrip이다(ResizeGrip은 선택 사항으로 결정된 경우에만 보인다)AdornerDecorator에는 ContentPresenter 타입의 비주얼 객체가 하나 있는데, Window의 Content 프로퍼티를 관리한다. 이전 프로그램에서 ContentPresenter의 비주얼 자식은 EllipseWithChild이고, EllipseWithChild의 비주얼 자식은 TextBlock이다(이 프로그램의 비주얼 트리에 대한 정보는 VisualTreeHelper 클래스의 정적 메소드를 통해서 얻었다)

이 엘리먼트는 각기 MeasureOverride 메소드를 수행하는데, 여기서 각 자식들의 Measure를 호출한다(대부분의 경우 자식은 하나다) 자식 엘리먼트의 Measure 메소드는 자식 엘리먼트의 MeasureOverride 메소드를 호출하는데, 여기서 그 자식의 자식에 대한 Measure를 호출한다. ArrangeOverride와 Arrange에서 비슷한 과정을 살펴본 바 있다. 

다음은 이 메소드들의 내부에서 벌어지는 일반적인 논리다. 

MeasureOverride의 인자(보통 sizeAvailable라고 부름)는 일반적으로엘리먼트의 컨테이너 크기에서 엘리먼트의 Margin 프로퍼티를 뺀 값이다. 이 인자는 0부터 양의 무한대까지의 범위를 갖는다. 컨테이너가 그 자식의 크기만큼 커질수 있다면 무한대가 된다. 그러나 엘리먼트의 Height 프로퍼티가 NaN이 아닌 다른 값으로 설정되면 sizeAvailable.Height는 이 Height 프로퍼티와 같아질 것이다. MinHeight나 MaxHeight가 설정되었다면 sizeAvailable.Height는 이 제약을 반영할 것이다. Width의 경우도 이와 유사하다. 

MeasureOverride에서는 각 자식들에 대해 Measure를 호출할 책임이 있다. 엘리먼트가 하나의 자식을 갖고 그 자식이 엘리먼트의 전체 표면을 차지한다면 Measure의 인자는 MeasureOverride의 인자인 sizeAvailable와 같을 수 있다. 일반적으로 Measure의 인자는 sizeAvailable에 근거한 크기이지만 그 크기보다는 다소 작을 수 있다. 예를 들어 EllipseWithCihld에서 자식의 크기를 계산할 때 타원의 경계를 뺀 값이 된다. 

자식의 Measure 메소드는 그 자식의 MeasureOverride 메소드를 호출하고 DesiredSize 프로퍼티를 계산하기 위해 MeasureOverride의 반환 값을 이용한다. 이 계산은 몇 단계에 걸쳐 발생된다. 다음을 통해 DesiredSize.Width가 어떻게 계산되는지를 알아보자(Height의 경우도 동일하게 계산된다)


1. 엘리먼트의 Width 프로퍼티가 NaN이면 DesiredSize.Width는 MeasureOverride의 반환 값이 된다. 그렇지 않은 경우에 DesiredSize.Width는 엘리먼트의 Width가된다. 

2. DesiredSize.Width는 Margin의 Left와 Right 프로퍼티를 더한 값으로 조정된다. 

3. DesiredSize.Width는 컨테이너의 Width보다 커지지 않게 조정된다. 

그래서 DesiredSize는 기본적으로 엘리먼트에 필요한 레이아웃 크기가 되며, 여기에는 Margin이 포함된다. 그러나 컨테이너보다 더 커질 수는 없다. 엘리먼트가 그 엘리먼트의 DesiredSize를 참조해도 그리 유용할 것이 없으나, 그 자식의 DesiredSize는 매우 유용하게 사용할 수 있다. 각 자식에 대해 Measure를 호출한 후 각 자식이 필요한 공간이 어느 정도인지 결정하기 위해 DesiredSize 프로퍼티를 참조하게 된다. 그리고 MeasureOverride메소드의 반환값을 계산할 때 이를 이용한다. 

ArrangeOverride의 인자(보통 sizeFinal로 부름)는 최초의 MeasureOverride 인자와 MeasureOverride의 반환 값과 몇 개의 다른 요소로부터 계산된다. sizeFinal.Width가 어떻게 계산되는지를 알아보자. 

Width, MinWidth, MaxWidth가 모두 NaN이고 엘리먼트의 HorizontalAlignment 프로퍼티가 Center,Left, Right중의 하나로 설정되었다면 sizeFinal.Width는 MeasureOverride의 반환 값과 같게 된다. HorizontalAlignment이 Stretch로 설정되었다면 sizeFinal.Width는 MeasureOverride의 sizeAvailable인자와 MeasureOverride의 반환값 중 큰 값이 된다. Width 프로퍼티가 NaN이 아닌 값으로 설정되었으면 sizeFinal.Width는 Width 프로퍼티와 MeasureOverride의 반환값 중 큰 값이 된다. 

ArrangeOverride 메소드에서는 자식들을 배열하는 일을 한다. 개념적으로 부모 엘리먼트는 자식들을 사각형에 배치하게 되는데, 그 사각형은 좌측 상단 모서리가 (0, 0)이고, 크기는 ArrangeOverride의 인자인 sizeFinal에 지정된 값이다. 보통 ArrangeOverride에서 sizeFinal 인자와 자식의 DesiredSize 프로퍼티를 이용해 자식의 위치와 크기를 지시하는 Rect 객체를 계산한다. 부모는 이 Rect 객체를 각 자식의 Arrange 메소드에 넘긴다. 이렇게 해서 자식들이 부모 표면에 배치된다. 

자식의 Arrange를 호출한 후 일반적으로 ArrangeOverride는 인자인  sizeFinal을 그대로 반환한다. (ArrangeOverride의 기본 구현에서는 단순히 같은 값을 반환하기만 한다) 그러나 다르게 바꾸어서 반환할 수 있다. ArrangeOverride가 반환하는 것이 무엇이든 그것이 RenderSize가 된다. 

일반적으로 컨트롤과 엘리먼트는 다른 엘리먼트들로 구성된다. 때로 컨트롤은 어떤 종류의 Decorator 객체로 시작된다. Decorator는 FrameworkElement를 상속받으며, 여기에는 UIElement 타입의 Child 프로퍼티가 정의되어 있다. 예를 들어 Border 클래스는 Decorator를 상속받아 Background,m BorderBrush, BorderThickness, ConrnerRadius(둥근 모서리일 경우), Padding 프로퍼티가 정의되어 있다. ButtonChrome 클래스(Microsoft.Windows.Themes 네임스페이스에 있음)도 Decorator를 상속받으며, 표준 Button 의 모양을 만들어 제공한다. Button은 기본적으로 ButtonChrome 객체와 ButtonChrome의 자식인 ContentPresenter 객체로 이루어진다. 

다음은 둥근 버튼(rounded button)이라고 부르게 될 것에 대한 데코레이터(decorator)이다. 이 클래스에 OnRender 메소드가 구현되어 있으며, 이 메소드에서 DrawRoundedRectangle을 호출한다. 모서리의 가로와 세로의 반지름을 버튼 높이의 절반으로 설정했으므로, 버튼의 왼쪽과 오른쪽은 원형이 된다. 



using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class RoundedButtonDecorator : Decorator
{
	//Public 의존 프로퍼티
	public static readonly DependencyProperty IsPressedProperty;

	//정적 생성자
	static RoundedButtonDecorator()
	{
		IsPressedProperty = DependencyProperty.Register("IsPressed", typeof(bool), typeof(RoundedButtonDecorator),
					new FrameworkPropertyMetadata(false, FrameworkPropertyMetadataOptions.AffectsRender));
	}
	//Public 프로퍼티
	public bool IsPressed
	{
		set { SetValue(IsPressedProperty, value); }
		get { return (bool)GetValue(IsPressedProperty); }
	}
	//MeasureOverride 오버라이딩
	protected override Size MeasureOverride(Size sizeAvailable)
	{
		Size szDesired = new Size(2, 2);
		sizeAvailable.Width -= 2;
		sizeAvailable.Height -= 2;
		if(Child != null)
		{
			Child.Measure(sizeAvailable);
			szDesired.Width += Child.DesiredSize.Width;
			szDesired.Height += Child.DesiredSize.Height;
		}
		return szDesired;
	}
	//ArrangeOverride 오버라이딩
	protected override Size ArrangeOverride(Size sizeArrange)
	{
		if(Child != null)
		{
			Point ptChild = new Point(Math.Max(1, (sizeArrange.Width - Child.DesiredSize.Width) / 2),
						Math.Max(1, (sizeArrange.Height - Child.DesiredSize.Height) / 2 ));
			Child.Arrange(new Rect(ptChild, Child.DesiredSize));
		}
		return sizeArrange;
	}
	//OnRender 오버라이딩
	protected override void OnRender(DrawingContext dc)
	{
		RadialGradientBrush brush = new RadialGradientBrush(IsPressed ? SystemColors.ControlDarkColor : SystemColors.ControlLightLightColor,
						SystemColors.ControlColor);
		brush.GradientOrigin = IsPressed ? new Point(0.75, 0.75) : new Point(0.25, 0.25);
		dc.DrawRoundedRectangle(brush, new Pen(SystemColors.ControlDarkDarkBrush, 1), new Rect(new Point(0, 0), RenderSize),
					RenderSize.Height / 2, RenderSize.Height / 2);
	}
}

클래스에서 명시적으로 Child 프로퍼티를 정의하지 않았는데, 이는 Decorator에서 상속된 프로퍼티이기 때문이다. 추가적으로 정의된 IsPressed라는 프로퍼티는 OnRender 메소드에서 RadialGradientBrush를 생성할 때 사용한다. 이는 버튼이 눌린 것을 표시하기 위한 것으로, 중심을 더 어두운 색으로 하고 GradientOrigin을 변경시켜서 표현한다. 

다음에 보일 RoundedButton 클래스는 생성자에서 RoundedButtonDecorator 타입의 객체를 생성하고, AddVisualChild와 AddLogicalChild를 호출해 이 객체를 자식으로 만든다. RoundedButton에는 Child 프로퍼티가 정의되어 있지만 단순히 이 프로퍼티에 설정된 것을 데코레이터로 이동시킬 뿐이다. VisualChildCount 프로퍼티의 오버라이딩에서는 1을 반환하고, GetVisualChild에서는 RoundedButtonDecorator 객체를 반환한다. 

이렇게 해서 RoundedButton은 버튼 출력에 관련된 작업은 수행할 필요가 없고, 사용자 입력 만을 책임지고 처리하면 된다. 입력의 처리는 10장의 MedievalButton과 매우 유사하다. 예외가 있다면 RoundedButton에는 버튼이 눌린 것을 나타내는 Click 이벤트가 정의돼 있다는 것이다. RoundedButton의 IsPressed 프로퍼티를 통해 RoundedButtonDecorator에 있는 동일한 프로퍼티에 직접 접근할수 있다. RoundedButton을 사용하는 프로그램에서는 이 프로퍼티를 설정해서 버튼의 누름과 해제를 재현할 수 있다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class RoundedButton : Control
{
	//Private 필드
	RoundedButtonDecorator decorator;
	
	//Public 정적 ClickEvent
	public static readonly RoutedEvent ClickEvent;

	//정적 생성자
	static RoundedButton()
	{
		ClickEvent = EventManager.RegisterRoutedEvent("Click", RoutingStrategy.Bubble, typeof(RoutedEventHandler),typeof(RoundedButton));
	}
	//생성자
	public RoundedButton()
	{
		decorator = new RoundedButtonDecorator();
		AddVisualChild(decorator);
		AddLogicalChild(decorator);
	}
	//Public 프로퍼티
	public UIElement Child
	{
		set { decorator.Child = value; }
		get { return decorator.Child; }
	}
	public bool IsPressed
	{
		set { decorator.IsPressed = value; }
		get { return decorator.IsPressed; }
	}
	// Public 이벤트
	public event RoutedEventHandler Click
	{
		add { AddHandler(ClickEvent, value); }
		remove { RemoveHandler(ClickEvent, value); }
	}
	//오버라이딩하는 프로퍼티와 메소드
	protected override int VisualChildrenCount
	{
		get { return 1; }
	}
	protected override Visual GetVisualChild(int index)
	{
		if(index > 0)
			throw new ArgumentOutOfRangeException("index");
		return decorator;
	}
	protected override Size MeasureOverride(Size sizeAvailable)
	{
		decorator.Measure(sizeAvailable);
		return decorator.DesiredSize;
	}
	protected override Size ArrangeOverride(Size sizeArrange)
	{
		decorator.Arrange(new Rect(new Point(0, 0), sizeArrange));
		return sizeArrange;
	}
	protected override void OnMouseMove(MouseEventArgs args)
	{
		base.OnMouseMove(args);
		if(IsMouseCaptured)
			IsPressed = IsMouseReallyOver;
	}
	protected override void OnMouseLeftButtonDown(MouseButtonEventArgs args)
	{
		base.OnMouseLeftButtonDown(args);
		CaptureMouse();
		IsPressed = true;
		args.Handled = true;
	}
	protected override void OnMouseLeftButtonUp(MouseButtonEventArgs args)
	{
		base.OnMouseLefttButtonUp(args);

		if(IsMouseCaptured)
		{
			if(IsMouseReallyOver)
				OnClick();
			
			Mouse.Capture(null);
			IsPressed = false;
			args.Handled = true;
		}
	}
	bool IsMouseReallyOver
	{
		get
		{
			Point pt = Mouse.GetPosition(this);
			return (pt.X >= 0 && pt.X < ActualWidth && pt.Y >= 0 && pt.Y < ActualHeight);
		}
	}
	//Click 이벤트를 발생시키는 메소드
	protected virtual void OnClick()
	{
		RoutedEventArgs argsEvent = new RoutedEventArgs();
		argsEvent.RoutedEvent = RoundedButton.ClickEvent;
		argsEvent.Source = this;
		RaiseEvent(argsEvent);	
	}
}

CalculateInHex 프로그램에서는 29개의 RoundedButton 인스턴스를 생성해서 16진수 계산기를 만든다. 생성자에서 버튼들이 Grid 패널에 배치되며, 이 중에서 3개의 버튼은 여러 개의 열을 차지하도록 배치하기 위해 약간 특별한 처리를 했다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;

public class CalculateInHex : Window
{
	//Private 필드
	RoundedButton btnDisplay;
	ulong numDisplay;
	ulong numFirst;
	bool bNewNumber = true;
	char chOperation = '=';

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new CalculateInHex());
	}
	//생성자
	public CalculateInHex()
	{
		Title = "Calculate in Hex";
		SizeToContent = SizeToContent.WidthAndHeight;
		ResizeMode = ResizeMode.CanMinimize;

		//Grid를 생성하고 Content로 지정
		Grid grid = new Grid();
		grid.Margin = new Thickness(4);
		Content = grid;

		//5개의 열을 생성
		for(int i=0; i<5; i++)
		{
			ColumnDefinition col = new ColumnDefinition();
			col.Width = GridLength.Auto;
			grid.ColumnDefinitions.Add(col);
		}
		//7개의 행을 생성
		for(int i=0; i< 7; i++)
		{
			RowDefinition row = new RowDefinition();
			row.Height = GridLength.Auto;
			grid.RowDefinitions.Add(row);
		}
		//버튼에 보여질 텍스트
		string[] strButtons = {"0", "D", "E", "F", "+", "&", "A", "B", "C", "-", "|", "7", "8", "9", "*", "^", "4", "5", "6", "/", "<<", "1", "2", "3", ",%", ">>",
					"0", "Back", "Equals"};
		int iRow = 0, iCol = 0;
		//버튼 생성
		foreach(string str in strButtons)
		{
			//RoundedButton 생성
			RoundedButton btn = new RoundedButton();
			btn.Focusable = false;
			btn.Height = 32;
			btn.Margin = new Thickness(4);
			btn.Click += ButtonOnClick;

			//TextBlock 을 생성해서 RoundedButton의 자식으로 지정
			TextBlock txt = new TextBlock();
			txt.Text = str;
			btn.Child = txt;

			//RoundedButton을 Grid에 추가
			grid.Children.Add(btn);
			Grid.SetRow(btn, iRow);
			Grid.SetColumn(btn, iCol);

			//버튼 출력 때 예외 상황 처리
			if(iRow == 0 && iCol == 0)
			{
				btnDisplay = btn;
				btn.Margin = new Thickness(4, 4, 4, 6);
				Grid.SetColumnSpan(btn, 5);
				iRow = 1;
			}
			//Back과 Equals 버튼 처리
			else if(iRow == 6 && iCol > 0)
			{
				Grid.SetColumnSpan(btn, 2);
				iCol += 2;
			}
			//나머지 버튼의 경우
			else
			{
				btn.Width = 32;
				if(0 == (iCol = (iCol + 1) % 5))
					iRow++;
			}
		}
	}
	//Click 이벤트 핸들러
	void ButtonOnClick(object sender, RoutedEventArgs args)
	{
		//클릭된 버튼 구하기
		RoundedButton btn = args.Source as RoundedButton;

		if(btn == null)	
			return;
		//버튼 텍스트와 첫 글자 구하기
		string strButton = (btn.Child as TextBlock).Text;
		char chButton = strButton[0];

		//몇 가지 특이한 경우
		if(strButton == "Equals")
			chButton = '=';
		else if(strButton == "Back")
			numDisplay /= 16;
		//16진수 글자
		else if(Char.IsLetterOrDigit(chButton))
		{
			if(bNewNumber)
			{
				numFirst = numDisplay;
				numDisplay = 0;
				bNewNumber = false;
			}
			if(numDisplay <= ulong.MaxValue >> 4)
				numDisplay = 16 * numDisplay + (ulong)(chButton - (Char.IsDigit(chButton) ? '0' : 'A' - 10));
		}
		//연산
		else
		{
			if(!bNewNumber)
			{
				switch(chOperation)
				{
					case '=': break;
					case '+': numDisplay = numFirst + numDisplay; break;
					case '-': numDisplay = numFirst - numDisplay; break;
					case '*': numDisplay = numFirst * numDisplay; break;
					case '&': numDisplay = numFirst & numDisplay; break;
					case '|': numDisplay = numFirst | numDisplay; break;
					case '^': numDisplay = numFirst ^ numDisplay; break;
					case '<': numDisplay = numFirst <<  (int)numDisplay; break;
					case '>': numDisplay = numFirst >> (int)numDisplay; break;
					case '/': numDisplay = numDisplay != 0 ? numFirst / numDisplay: ulong.MaxValue;
						break;
					case '%': numDisplay = numDisplay != 0 ? numFirst % numDisplay : ulong.MaxValue; break;
					default: numDisplay = 0 ; break;
				}
			}
			bNewNumber = true;
			chOperation = chButton;
		}
		//출력 형식 지정
		TextBlock text = new TextBlock();
		text.Text = String.Format("{0:X}", numDisplay);
		btnDisplay.Child = text;
	}
	protected override void OnTextInput(TextCompositionEventArgs args)
	{
		base.OnTextInput(args);
		if(args.Text.Length == 0)
			return;
		//문자 입력 구하기
		char chKey = Char.ToUpper(args.Text[0]);

		//버튼을 통한 루프
		foreach(UIElement child in (Content as Grid).Children)
		{
			RoundedButton btn = child as RoundedButton;
			string strButton = (btn.Child as TextBlock).Text;

			//일치하는 버튼을 확인하기 위한 로직
			if((chKey == strButton[0] && btn != btnDisplay && strButton != "Equals" && strButton != "Back") ||
				(chKey == '=' && strButton == "Equals") ||
				(chKey == '\r' && strButton == "Equals") ||
				(chKey == '\b' && strButton == Back") ||
				(chKey == '\x1B' && btn == btnDisplay))
			{
				//키 입력을 처리하기 위해 Click  이벤트를 발생
				RoutedEventArgs argsClick = new RoutedEventArgs(RoundedButton.ClickEvent, btn);
				btn.RaiseEvent(argsClick);

				//버튼이 눌린 것처럼 표시
				btn.IsPressed = true;

				//버튼을 다시 떼어 놓는 상태로 만들기 위한 타이머 설정
				DispatcherTimer tmr = new DispatcherTimer();
				tmr.Interval = TimeSpan.FromMilliseconds(100);
				tmr.Tag = btn;
				tmr.Tick += TimerOnTick;
				tmr.Start();

				args.Handled = true;
			}
		}
	}
	void TimerOnTick(object sender, EventArgs args)
	{
		//눌린 버튼 복원
		DispatcherTimer tmr = sender as DispatcherTimer;
		RoundedButton btn = tmr.Tag as RoundedButton;
		btn.IsPressed = false;

		//타이머 종료하고 이벤트 핸들러 제거
		tmr.Stop();
		tmr.Tick -= TimerOnTick;
	}
}

계산기에 대한 논리적인 처리 부분은 ButtonOnClick 메소드에 집중되어 있다. 이 메소드는 모든 버튼의 Click 이벤트를 처리한다. 그런데 키보드로도 버튼을 누를 수 있기 때문에 이를 OnTextInput 메소드도 오버라이딩에서 이를 처리해줘야 한다. 눌린 키에 대응하는 버튼을 알아낸 후 Routed EventArgs 객체의 RaiseEvent 메소드를 호출해서 그 버튼에 Click 이벤트를 발생시킨다. OnTextInput 메소드의 마지막 부분에서는 IsPressed 프로퍼티를 true로 설정해서 버튼을 눌린 모습으로 나타나게 만든다. 물론 이 프로퍼티는 일정 시점 후에 다시 false로 해줘야 버튼이 복원될 것이다. 이를 위해 DispatcherTimer를 생성해 사용했다. 

FrameworkElement와 Control을 오버라이딩하는 방법 외에도 커스텀 컨트롤을 만드는 다른 방법이 있다. 이는 템플릿(template)을 정의하는 방법으로 기존의 C# 코드에서보다는 XAML에서 훨씬 많이 사용된다. 이 기법에 대해서는 25장에서 더욱 자세히 살펴볼 것이다. 단 C# 코드에서 수행되는 방법을 먼저 살펴보자. 

이 방법을 사용하기 위한 Control의 핵심 프로퍼티는 Template으로 ControlTemplate 타입이다. Template프로퍼티는 본질적으로 컨트롤의 외형과 느낌을 정한다. 보통의 Button은 기본적으로 ButtonChrome 객체와 ContentPresenter 객체로 구성됨을 이미 배웠다. 

ButtonChrome 객체는 버튼의 배경과 경계선의 모양을 결정하는 반면 ContentPresenter는 버튼의 Content 프로퍼티에 설정되는 대상을 관리하는 역할을 한다. 템플릿은 엘리먼트들을 연결시킬 뿐만 아니라 엘리먼트의 프로퍼티에 어떤 변화가 생길 때 그에 대해 반응하는 트리거(triggers)를 정의한다. 

컨트롤을 위한 커스텀 템플릿을 생성하기 위해 먼저 아래와 같이 ControlTemplate 타입의 객체를 생성한다. 

ControlTemplate template = new ControlTemplate();

ControlTemplate 클래스는 FrameworkTemplate에서 VisualTree라는 프로퍼티를 상속받는다. 이 프로퍼티는 어떤 엘리먼트로 컨트롤을 구성하는지를 정의한다. 템플릿을 생성하는 문법은 실제 엘리먼트를 생성하지 않고서 엘리먼트와 그 프로퍼티를 정의해야 하기 때문에 다소 이상하게 보일 수 있다. FrameworkElementFactory란 이름의 클래스를 통해 이를 수행할 것이다. 비주얼 트리에서의 각 엘리먼트에 대해 FrameworkElementFactory 객체를 생성하게 된다. 다음의 예를 보자. 

FrameworkElementFactory factoryBorder = new FrameworkElementFactory(typeof(Border));

또한 이 엘리먼트에 프로퍼티를 지정할 수도 있고, 이벤트 핸들러를 붙일 수도 있다. 이때 엘리먼트에 정의되거나 상속된 DependencyProperty와 RoutedEvent 필드를 사용해서 프로퍼티와 이벤트를 지정한다. 다음 구문과 같이 프로퍼티를 설정한다. 

factoryBorder.SetValue(Border.BorderBrushProperty, Brushes.Red);

다음과 같이 여러 개의 FactoryElementFactory 객체를 사용해서 부모 자식 관계를 설정할 수 있다. 

factoryBorder.AppendChild(factoryContent);

그러나 컨트롤이 그려질 준비가 되기 전까지는 엘리먼트가 생성되지 않음을 기억해야 한다. 

ContrlTemplate 에는 Triggers라는 프로퍼티도 정의되어 있다. 이는 Trigger 객체의 컬렉션이며, Trigger는 프로퍼티에 어떤 변화가 생길 때 그 결과로 컨트롤을 어떻게 변경시킬지 를 정의한다. Trigger 클래스에는 DependencyProperty 타입의 Property라는 프로퍼티가 있어서 주시할 프로퍼티를 지정한다. 그리고 Value 프로퍼티가 있는데, 여기에는 그 프로퍼티의 값을 지정한다. 다음의 예를 보자. 

Trigger trig = new Trigger();
trig.Property = UIElement.IsMouseOverProperty;
trig.Value = true;

IsMouseOver 프로퍼티가 true가 되면 그 결과로 어떤 작업이 이뤄진다. 그 작업을 지정하기 위해서는 하나 이상의 Setter 객체가 필요한데, 예를 들어 FontStyle 프로퍼티를 기울임꼴로 바꾼다고 가정하자. 

Setter set = new Setter();
set.Property = Control.FontStyleProperty;
set.Value = FontStyles.Italic;

Setters를 트리거의 Setters 컬렉션에 추가함으로써 Trigger와 결합한다. 
trig.Setters.Add(set);

그리고 다음과 같이 Trigger는 ControlTemplate의 Trigger에 추가된다. 

template.Triggers.Add(trig);

이제 버튼을 생성하고 템플릿을 지정할 준비가 되었다. 

Button btn = new Button();
btn.Template = template;

그리고 버튼은 이제 완전히 새로운 모양이 되지만 전과 같이 Click 이벤트를 발생시킨다. 다음은 Button에 ControlTemplate을 조합하는 예제 프로그램이다. 