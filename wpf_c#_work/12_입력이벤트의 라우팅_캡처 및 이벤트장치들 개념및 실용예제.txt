using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Shapes;

public class DrawCircles : Window
{
	Canvas canv;
	//그리는 것과 관련된 필드
	bool isDrawing;
	Ellipse elips;
	Point ptCenter;

	//드래깅과 관련된 필드
	bool isDragging;
	FrameworkElement elDragging;
	Point ptMouseStart, ptElementStart;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new DrawCircles());
	}
	public DrawCircles()
	{
		Title = "Draw Circles";
		Content = canv = new Canvas();
	}
	protected override void OnMouseLeftButton(MouseButtonEventArgs args)
	{
		base.OnMouseLeftButtonDown(args);
		if(isDragging)
			return;
		//새로운 타원 객체를 생성하고 캔버스에 추가
		ptCenter = args.GetPosition(canv);
		elips = new Ellipse();
		elips.Stroke = SystemColors.WindowTextBrush;
		elips.StrokeThickness = 1;
		elips.Width = 0;
		elips.Height = 0;
		canv.Chidren.Add(elips);
		Canvas.SetLeft(elips, ptCenter.X);
		Canvas.SetTop(elips, ptCenter.Y);

		//마우스를 캡처하고 앞으로의 이벤트를 준비
		CaptureMouse();
		isDrawing = true;
	}
	protected override void OnMouseRightButtonDown(MouseButtonEventArgs args)
	{
		base.OnMouseRightButtonDown(args);
		if(isDrawing)
			return;
		
		//클릭된 엘리먼트를 얻어오고, 앞으로의 이벤트를 준비
		ptMouseStart = args.GetPosition(canv);
		elDragging = canv.InputHitTest(ptMouseStart) as FrameworkElement;

		if(elDragging != null)
		{
			ptElementStart = new Point(Canvas.GetLeft(elDragging),Canvas.GetTop(elDragging));
			isDragging = true;
		}
	}
	protected override void OnMouseDown(MouseButtonEventArgs args)
	{
		base.OnMouseDown(args);
		if(args.ChangedButton == MouseButton.Middle)
		{
			Shape shape = canv.InputHitTest(args.GetPosition(canv)) as Shape;
			if(shape != null)
				shape.Fill = (shape.Fill == Brushes.Red ? Brushes.Transparent : Brushes.Red);
		}
	}
	protected override void OnMouseMove(MouseEventArgs args)
	{
		base.OnMouseMove(args);
		Point ptMouse = args.GetPosition(canv);

		//타원의 크기 조정
		if(isDrawing)
		{
			double dRadius = Math.Sqrt(Math.Pow(ptCenter.X - ptMouse.X, 2) + Math.Pow(ptCenter.Y - ptMouse.Y, 2));

			Canvas.SetLeft(elips, ptCenter.X - dRadius);
			Canvas.SetTop(elips, ptCenter.Y - dRadius);
			elips.Width = 2 * dRadius;
			elips.Height = 2 * dRadius;
		}
		//타원을 이동
		else if(isDragging)
		{
			Canvas.SetLeft(elDragging, ptElementStart.X + ptMouse.X - ptMouseStart.X);
			Canvas.SetTop(elDragging, ptElementStart.Y + ptMouse.Y - ptMouseStart.Y);
		}
	}
	protected override void OnMouseUp(MouseButtonEventArgs args)
	{
		base.OnMouseUp(args);
		//그리기 동작을 종료
		if(isDrawing && args.ChangedButton == MouseButton.Left)
		{
			elips.Stroke = Brushes.Blue;
			elips.StrokeThickness = Math.Min(24, elips.Width /2);
			elips.Fill = Brushes.Red;
			isDrawing = false;
			ReleaseMouseCapture();
		}
		//드래깅을 종료
		else if(isDragging && args.ChangedButton == MouseButton.Right)
		{
			isDragging = false;
		}
	}
	protected override void OnTextInput(TextCompositionEventArgs args)
	{
		base.OnTextInput(args);

		//ESC 키를 누르면 그리기나 드래깅을 종료
		if(args.Text.IndexOf('\x1B') != -1)
		{
			if(isDrawing)
				ReleaseMouseCapture();
			else if(isDragging)
			{
				Canvas.SetLeft(elDragging, ptElementStart.X);
				Canvas.SetTop(elDragging, ptElementStart.Y);
				isDragging = false;
			}
		}
	}
	protected override void OnLostMouseCapture(MouseEventArgs args)
	{
		base.OnLostMouseCapture(args);
		//그리기의 비정상적 종료 : 자식 타원을 제거
		if(isDrawing)
		{
			canv.Children.Remove(elips);
			isDrawing = false;
		}
	}
}

클라이언트 영역은 Canvas 패널로 채웠다. 마우스를 이용해 그리기를 할 때는 거의 매번 Canvas 패널을 사용한다. 이벤트 핸들러를 설치하지 않고 Window 클래스의 마우스와 관련된 각 메소드를 오버라이딩했다. DrawCircles에서는 서로 다른 마우스 처리 기법을 설명하기 위해 일관성을 지키지는 않았다. 한 예로 그리기와 드래깅을 시작하는 부분은 OnLeftMouseButtonDown과 OnRightMouseButtonDown 메소드로 분리했지만 이 동작들의 종료를 처리하는 데는 OnMouseUp 메소드로 합쳤다. 또 그리기를 할 때는 마우스 캡처를 하지만 드래깅할때는 마우스 캡처를 하지 않았다. 

OnLeftMouseButtonDown 메소드에서 Ellipse 객체를 생성하고 이를 Canvas의 자식 컬렉션에 추가하며 마우스 캡처를 시작한다. 또한 이 메소드에서는 isDrawing 필드를 true로 설정해 그리기 중이라는 사실을 모든 이벤트 핸들러에서 알 수 있게 했다. 

마우스를 움직이면 OnMouseMove 오버라이딩에서 계속해 처리된다. 최초의 마우스 클릭이 원의 중심을 지정하는 것이었으며, 마우스를 움직일 때는 마우스 커서 위치를 추적해 경계선을 지정한다. 이는 Width와 Height 프로퍼티뿐만 아니라 Canvas.LeftProperty와 Canvas.RightProperty 첨부 프로퍼티도 다시 계산해야 한다. 도형을 지정하는 다른 방법도 있는데, 원이 아닌 사각형일 경우에 더 적합할 것이다. 최초의 마우스 위치가 사각형 경계의 한 모서리이며, 그 다음의 마우스 위치가 대각에 있는 모서리가 된다. 사용자가 마우스를 위로 움직일 수도 있고 왼쪽으로 움직일 수도 있으므로, 좌측 상단과 우측 하단으로 한정해서는 안될 것이다. 

OnMouseUp 오버라이딩의 첫 부분은 그리기 동작에 적용된다. 이 메소드에서 경계선은 파란색이며 내부는 빨간색인 타원을 만든다. 그 후 isDrawing을 false로 설정하고 마우스 캡처를 해제한다. 마우스 캡처를 해제하면 OnLostMouseCapture가 호출되지만 isDrawing을 이미 false로 해두었으므로 별다른 작업이 수행되지는 않는다. 그러나 OnTextInput 오버라이딩을 보면 사용자가 Esc키를 누르고 isDrawing이 true이면 ReleaseMouseCapture를 호출함을 확인하자. 이 결과로 OnLostMouseCapture이 호출되며, Canvas의 자식 컬렉션에서 Ellipse 객체를 제거하는 정리 작업이 수행된다. 

오른쪽 마우스 버튼을 누르면 드래깅 작업이 된다. OnRightMouseButtonDown 메소드에서 Canvas 객체의 InputHitText를 호출해 어떤 객체가 마우스 커서 아래에 있는지를 결정한다. 그리고 마우스 위치와 그 엘리먼트의 위치를 저장한다. 뒤이어 OnMouseMove가 호출되며 타원을 이동시킨다. 이 동작에 대해서는 마우스 캡처를 하지 않았기 때문에 마우스가 창을 벗어나면 타원의 이동이 멈춘다. 그리고 마우스 버튼을 떼고 다시 창으로 마우스를 이동하면 버튼을 누르지 않았음에도 계속 타원이 마우스를 따라 움직일 것이다. 이는 심각한 문제이지만 오른쪽 버튼을 클릭하면 드래깅 동작이 종료된다. 다른 애플리케이션에서도 드래깅 연산 등에는 마우스 캡처를 사용해야 할 것이다. 

마지막으로 가운데 버튼을 누르면 내부가 Brushes.Red와 Brushes.Transparen로 토글된다. 최초로 작성한 프로그램에는 Ellipse의 Fill 프로퍼티를 Brushes.Transparent가 아닌 null로 설정했었다. 그런데 문제가 있다는 것을 알게 되었다. null로 된 내부는 타원을 클릭할 필요가 없을 때 그 경계선을 클릭해야 반응이 온다. 내부를 클릭해서는 더 이상 움직일수 없고 토글도 안 된다. 

이 프로그램은 WPF의 설계자가 왜 이벤트 라우팅의 처리가 필요했는지를 알려주는 좋은 예다. 처음 프로그램을 시작하면 Window로부터가 아니라 Canvas로부터 실제 이벤트를 발생시킨다. Canvas에 이벤트 핸들러를 설치하는 것은 쉽지만 몇 개의 원을 그린 다음에는 무슨 일이 일어날까? 그려져 있는 원을 클릭하면 Ellipse 객체가 마우스 이벤트의 소스가 된다. 라우팅되지 않은 시스템이라면 Ellipse의 IsEbabled 플래그를 false로 설정해 마우스 이벤트를 강제로 캔버스로 보내야 한다. 이벤트를 라우팅하는 것 때문에 프로그램을 구조화하는데 더욱 높은 유연성이 부여된다. 

태블릿 PC를 사용한다면 모든 스타일러스 입력은 마우스 이벤트로 변환된다. 그래서 DrawCircles 프로그램에서 스타일러스를 사용할수 있다. 그러나 태블릿 PC 전용의 프로그램을 작성한다면 3가지의 일반적인 프로그래밍 인터페이스를 사용할수 있다. 

태블릿 PC에 대한 가장 하이 레벨의 WPF 프로그래밍 인터페이스는 InkCanvas이다. 일종의 패널로 들리지만 그렇지는 않다 InkCanvas는 FrameworkElement를 상속받으며, 렌더링(rendering)과 출력 보류(retenition, 역자주: 3장에서 보았지만 WPF에서는 바로 그래픽을 출력하지 않고, 그릴 객체들을 보관했다가 최종 시점에서 모두 출력한다. 이렇게 객체들을 보관해서 그리기를 보류하는 것을 의미한다)를 구현한다. 스타일러스의 입력이 항상 마우스의 입력으로 변환된다고 언급했었다 
InkCanvas는 반대로도 변환된다. 즉 마우스 입력에 대해서도 반응하며 스타일러스 입력처럼 다루게 된다. InkCanvas에서 스타일러스 펜이나 마우스를 이용해 그리기를 할 때 InkCanvas에서는 그 표면에 실제로 선을 그리며 Strokes 프로퍼티에 그 선을 저장한다. Strokes 프로퍼티는 Stroke 객체의 컬렉션으로서, 그림 정보가 포함된 폴리라인(polylines)이다. 각 선(stroke)은 마우스 왼쪽 버튼을 눌러서 시작하며, 버튼을 떼어 종료한다. 22장에서 InkCanvas를 사용하는 예제 프로그램을 살펴볼 것이다. 

태블릿 PC에 대한 가장 로우 레벨 WPF 프로그래밍 인터페이스는 SystemWindows.Input.StylusPlugins 네임스페이스에 있다. 스타일러스 플러그인은 스타일러스 입력을 렌더링하고, 수정하고, 저장하는 데 사용하는 클래스이다. 

이 2개의 양극단은 UIElement와 ContentElement에 정의되어 있고, Stylus와 PreviewStylus로 시작되는 이벤트의 컬렉션이다. 이 이벤트들은 마우스 이벤트와 매우 유사하지만 입력 장치에의 실제 수행은 조금 다르다. 예를 들어 MouseDown 이벤트는 마우스 버튼을 누를때 발생하지만 StylusDown 이벤트는 스타일러스로 화면을 터치할 때 발생한다. StylusButtonDown 이벤트는 화면에 스타일러스를 누르는 것을 지칭하는 것이 아니라 스타일러스의 옆에 있는 버튼을 누르는 것을 말한다(스타일러스의 버튼은 컨텍스트 메뉴를 호출할 때 사용된다.)

다음은 태블릿 PC 전용으로 실행되는 프로그램이다. StylusDown 이벤트를 받는 2개의 Polyline 객체를 생성하고, 이 Polyline을 Canvas의 자식 컬렉션에 추가한다(Ellipse 처럼 Polyline도 Shape 클래스를 상속받는다.)그리고 스타일러스를 캡처해 StylusMove 이벤트가 발생되는 동안 2개의 폴리라인의 각 점을 추가한다. StylusUp 이벤트가 발생되거나 Esc 키를 누를때 이 선이 완료된다. 

이 프로그램에서의 비밀은 두 번째 폴리라인이 첫 번째 폴리라인으로부터 약간 이동되어 그려진다는 점인데, 결과적으로 실시간으로 그림자 효과가 생긴다. 전경 폴리라인의 Points 컬렉션은 항상 ptStylus를 얻고 있으며, 그림자 폴리라인은 ptStylus에 vectShadow를 추가하고있다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Shapes;

public class ShadowTheStylus : Window
{
	//스타일러스 폴리라인에 대한 몇 가지 상수의 정의
	static readonly SolidColorBrush brushStylus = Brushes.Blue;
	static readonly SolidColorBrush brushShadow = Brushes.LightBlue;
	static readonly double widthStroke = 96 / 2.54; // 1cm
	static readonly Vector vectShadow = new Vector(widthStroke / 4, widthStroke / 4);
	
	//스타일 러스 이동에 대한 추가적인 필드
	Canvas canv;
	Polyline polyStylus, polyShadow;
	bool isDrawing;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ShadowTheStylus());
	}
	public ShadowTheStylus()
	{
		Title = "Shadow the Stylus";
		
		//Window 컨텐트로 사용할 Canvas 생성
		canv = new Canvas();
		Content = canv;
	}
	protected override void OnStylusDown(StylusDownEventArgs args)
	{
		base.OnStylusDown(args);
		Point ptStylus = args.GetPosition(canv);

		//끝이 둥근 Polyline을 생성해 전경에 사용
		polyStylus = new Polyline();
		polyStylus.Stroke = brushStylus;
		polyStylus.StrokeThickness = widthStroke;
		polyStylus.StrokeStartLineCap = PenLineCap.Round;
		polyStylus.StrokeEndLineCap = PenLineCap.Round;
		ployStylus.StrokeLineJoin = PenLineJoin.Round;
		polyStylus.Points = new PointCollection();
		polyStylus.Points.Add(ptStylus);

		//그림자용으로 쓸 Polyline
		polyShadow = new Polyline();
		polyShadow.Stroke = brushShadow;
		polyShadow.StrokeThickness = widthStroke;
		polyShadow.StrokeStartLineCap = PenLineCap.Round;
		polyShadow.StrokeEndLineCap = PenLineCap.Round;
		polyShadow.StrokeLineJoin = penLineJoin.Round;
		polyShadow.Points = new PointCollection();
		polyShadow.Points.Add(ptStylus + vectShadow);

		//전경의 모든 폴리라인 이전에 그림자 폴리라인을 삽입
		canv.Children.Insert(canv.Children.Count / 2, polyShadow);

		//끝에 전경으로 사용할 폴리라인을 추가
		canv.Children.Add(polyStylus);

		CaptureStylus();
		isDrawing = true;
		args.Handled = true;
	}
	protected override void OnStylusMove(StylusEventArgs args)
	{
		base.OnStylusMove(args);

		if(isDrawing)
		{
			point ptStylus = args.GetPosition(canv);
			polyStylus.Points.Add(ptStylus);
			polyShadow.Points.Add(ptStylus + vectShadow);
			args.Handled = true;
		}
	}
	protected override void OnStylusUp(StylusEventArgs args)
	{
		base.OnStylusUp(args);

		if(isDrawing)
		{
			isDrawing = false;
			ReleaseStylusCapture();
			args.Handled = true;
		}
	}
	protected override void OnTextInput(TextCompositionEventArgs args)
	{
		base.OnTextInput(args);
	
		//Esc 키를 누르면 그리기를 종료
		if(isDrawing && args.Text.IndexOf("\x1b') != -1)
		{
			ReleaseStylusCapture();
			args.Handled = true;
		}
	}
	protected override void OnLostStylusCapture(StylusEventArgs args)
	{
		base.OnLostStylusCapture(args);

		//비정상적인 종료 : 해당 폴리라인을 제거
		if(isDrawing)
		{
			canv.Children.Remove(polyStylus);
			canv.Children.Remove(polsyShadow);
			isDrawing = false;
		}
	}
}

이 프로그램의 핵심 중 하나는 OnStylusDown 메소드의 끝부분에 있다, 즉 Canvas의 Children컬렉션의 중간에 그림자 폴리라인이 추가되는 부분이다. 

canv.Children.Insert(canv.Children.Count / 2, polyShadow);

이와는 대조적으로 전경 폴리라인은 다음과 같이 마지막에 추가된다. 

canv.Children.Add(polyStylus);

Children 컬렉션은 순서대로 그려짐을 기억해야 한다. 따라서 모든 그림자가 먼저 그려지고, 나머지 전경의 선들이 그 다음에 그려진다. 이는 그래픽 출력 보류(retention)의 편리함을 보여주는 매우 좋은 예다. 윈도우 폼이라는 암흑시대와 태블릿 PC API에서 프로그래머가 이와 유사한 일을 어떻게 했는지에 대해 관심이 있다면 필자의 온라인 게시물인 <실시간 그림자 효과에 관한 연구(In Search Of the Real-Time Drop Shadow>)(http:www.charlespetzold.com/etc/RealTimeDropShadow)를 참조하기 바란다.

InkCanvas처럼 마우스와 스타일러스 이벤트 모두를 처리하려고 한다면 실제 마우스 동작에서 오는 마우스 이벤트와 스타일러스에서 생성된 이벤트를 구별해야 할 필요가 있을 것이다. MouseEventArgs에는 StylusDevice라는 프로퍼티가 있다. 이 프로퍼티는 마우스에서 온 이벤트일 경우에는 null이 된다. 그렇지 않고 StylusDevice 타입의 객체라면 스타일러스에서 생성된 이벤트가 된다. StylusEventArgs에는 고유한 프로퍼티가 있어서 컴퓨터에 스타일러스가 둘 이상 있어도 특정 스타일러스 장치를 구별할 수 있다. 

WPF 애플리케이션에서 많은 키보드 처리 루틴은 TextBox나 RichTextBox 컨트롤 또는 커서 이동 키에 반응할 수 있는 ScrollViewer 같은 컨트롤에 위임할 것이다. 그러나 키보드 입력을 직접 살펴보아야 할 필요도 가끔 있다. 

엘리먼트나 컨트롤은 키보드 포커스를 가질 때에만 즉, IsKeyboardFocused가 true인 경우에만 키보드 입력 이벤트의 소스가 된다. 키보드 이벤트는 라우팅 이벤트이므로 포커스를 가진 엘리먼트의 모든 조상이 키보드 입력에 관여할 수 있다. 이런 엘리먼트는 IsKeyboardFocusedWithin 프로퍼티가 true다. 

키보드 포커스를 얻기 위해 엘리먼트의 Focusable 프로퍼티를 true로 설정해야 한다(다른 키보드 관련 프로퍼티, 메소드 ,이벤트와는 달리 Focusable은 FrameworkElement 클래스에 정의되어 있다) 엘리먼트 트리를 통한 입력 포커스의 이동은 일반적으로 사용자의 마우스 클릭이나 TAB 키또는 커서 이동 키를 누를 경우 발생한다(Control 클래스에는 TAB 이동과 관계된 IsTabStop과 TabIndex 프로퍼티가 정의되어 있다)특정 엘리먼트에 대해 Focus 메소드를 호출해서 포커스를 줄 수 있다. FrameworkElement에 정의된 MoveFocus 메소드를 통해 포커스를 이동시킬 수도 있다. 

엘리먼트가 키보드 포커스를 얻거나 잃을 때 GotKeyboardFocus와 LostKeyboardFocus 이벤트가 발생한다. 이들은 라우팅 이벤트이며, 두 이벤트 모두 터널링 버전(PreviewGotKeyboardFocus와 PreviewLostKeyboardFocus)이므로 위에 있는 모든 엘리먼트에서 포커스의 변경을 알 수 있다. 이벤트 인자의 Source 프로퍼티는 항상 키보드 포커스를 얻거나 잃어버린 엘리먼트를 가리킨다. KeyboardFocusedChangedEventArgs 클래스에는 OldFocus와 NewFocus라는 IInputElement 타입의 프로퍼티가 정의되어 있다. 

키보드 입력과 관계된 세 가지 이벤트의 타입은 일반적으로 다음 순서로 발생한다. 

* KeyDown : KeyEventArgs 타입의 이벤트 인자
* TextInput : TextCompositionEventArgs 타입의 이벤트 인자
* KeyUp : KeyEventArgs 타입의 이벤트 인자

Shift 키를 누르거나, 기능 키 또는 커서 이동 키를 누르면 TextInput 이벤트는 발생되지 않는다. Shift와 A키를 눌러서 대문자 A를 타이핑하면 2개의 KeyDown 이벤트와 하나의 TextInput 이벤트를 얻을 것이며, 눌렀던 키를 떼면 2개의 KeyUp 이벤트가 발생할 것이다. 
KeyEventArgs에는 이벤트에 포함된 키를 알려주는 Key라는 프로퍼티가 있다. Key는 Key 열거형의 멤버가 되며, 여기에는 200개가 넘는 멤버가 있다. 하지만 이들 중 대부분은 살펴볼 필요가 없다. 

다음 프로그램은 KeyDown, TextInput, KeyUp에 수반되는 이벤트 인자의 프로퍼티를 출력해 키보드 이벤트를 이해하는 데 도움을 준다. 





using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

class ExamineKeystrokes : Window
{
	StackPanel stack;
	ScrollViewer scroll;
	string strHeader = "Event	Key			Sys-Key	Text	" +
		"Ctrl-Text	 Sys-Text	Ime	KeyStates		" +
		"IsDown	IsUp	IsToggled IsRepeat ";
	string strFormatKey = "{0,-10}{1,-20}{2,-10}		" +"	{3,-10}{4,-15}{5,-8}{6,-7}{7,-10}{8,-10}";
	string strFormatText = "{0,-10}		" + "{1,-10}{2,-10}{3,-10}";
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ExamineKeystrokes());
	}
	public ExamineKeystrokes()
	{
		Title = "Examine Keystrokes";
		FontFamily = new FontFamily("Courier New");

		Grid grid = new Grid();
		Content = grid;

		//한 행을 Auto로 하고 나머지는 남은 공간을 할당
		RowDefinition rowdef = new RowDefinition();
		rowdef.Height = GridLength.Auto;
		grid.RowDefinitions.Add(rowdef);
		grid.RowDefinitions.Add(new RowDefinition());

		//제목 텍스트를 출력
		TextBlock textHeader = new TextBlock();
		textHeader.FontWeight = FontWeights.Bold;
		textHeader.Text = strHeader;
		grid.Children.Add(textHeader);

		//이벤트 출력을 위한 ScrollViewer를 생성
		// StackPanel을 생성 이벤트 출력을 위한 ScrollViewer를 생성
		scroll = new ScrollViewer();
		grid.Children.Add(scroll);
		Grid.SetRow(scroll, 1);

		stack = new StackPanel();
		scroll.Content = stack;
	}
	protected override void OnKeyDown(KeyEventArgs args)
	{
		base.OnKeyDown(args);
		DisplayKeyInfo(args);
	}
	protected override void OnKeyUp(KeyEventArgs args)
	{
		base.OnKeyUp(args);
		DisplayKeyInfo(args);
	}
	protected override void OnTextInput(TextCompositionEventArgs args)
	{
		base.OnTextInput(args);
		string str = String.Format(strFormatText, args.RoutedEvent.Name, args.Text, args.ControlText, args.SystemText);
		DisplayInfo(str);
	}
	void DisplayKeyInfo(KeyEventArgs args)
	{
		string str = String.Format(strFormatKey, args.RoutedEvent.Name, args.Key, args.SystemKey, args.ImeProcessedKey,args.KeyStates,
					args.IsDown, args.IsUp, args.IsToggled, args.IsRepeat);
		DisplayInfo(str);
	}
	void DisplayInfo(string str)
	{
		TextBlock text = new TextBlock();
		text.Text = str;
		stack.Children.Add(text);
		scroll.ScrollToBottom();
	}
}

이벤트와 관계없이 키보드 정보를 얻는 것도 가능하다. Keyboard 클래스에는 KeyboardDevice 타입의 PrimaryDevice라는 정적 프로퍼티가 있는데, KeyboardDevice에는 키보드에 있는 모든 키의 상태를 얻을 수 있는 메소드가 있다.

다음 두 장에 있는 프로그램의 일부에는 클래스에서 키보드와 마우스를 처리하고 있다. 10장의 MedievalButton 클래스와 11장의 RoundedButton 클래스는 보통의 버튼에서 마우스와 키보드 처리를 흉내낼 것이며, 11장에서는 CalculateInHex 프로그램과 ColorGrid 컨트롤을 통해 일반적인 키보드와 마우스 처리를 설명할 것이다.