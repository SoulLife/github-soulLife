CHAPTER 4 : 버튼과 컨트롤

WPF에서 컨트롤(Control)이란 용어는 이전의 윈도우 프로그래밍 인터페이스보다 조금은 한정적으로 사용된다. 윈도우 폼(Winfows Forms)을 예로 들면 화면상에 보이는 모든 것들을 컨트롤로 간주했었지만 WPF에서의 컨트롤은 사용자와 상호작용하는 엘리먼트로 제한된다. 상호작용이란 사용자가 마우스나 키보드를 눌렀을 때 어떤 종류의 피드백을 제공하는 것을 의미한다. 3장에서는 논의한 TextBlock, Image, Shape 엘리먼트는 모두 키보드, 마우스 , 스타일러스펜의 입력을 받을 수 있다. 다만 입력을 따로 처리하지 않고 무시했었다. 컨트롤은 능동적으로 사용자의 입력을 감지하고 처리한다. 

Control 클래스는 다음 계층도에서 보듯이 FrameworkElement를 직접 상속받는다. 

Object
	DispatcherObject(abstract)
		DependencyObject
			Visual(abstract)
				UIElement
					FrameworkElement
						Control

Window는 ContentControl을 거쳐서 Control을 상속받으므로, FrameworkElement와 Control프로퍼티의 일부를 이미 사용했었다. Control에 정의된 프로퍼티에는 Background, Foreground, BorderBrush, BorderThickness 등이 있고, FontWeight나 FontStretch처럼 폰트와 관련된 프로퍼티도 있다. 참고로 TextBlock에도 폰트와 관련된 프로퍼티가 있지만, TextBlock은 Control을 상속받지 않았다. 이 프로퍼티는 TextBlock 자체에 정의돼 있다. 

Control을 상속받은 클래스는 50개가 넘는데, 이 클래스들은 버튼, 리스트 박스, 스크롤바, 에디트 필드, 메뉴, 툴바와 같은 기능을 제공한다. 이들 클래스는 System.Windows.Controls와 System.Windows.Controls.Primitives 네임스페이스에 있으며, 여기에는 Control을 상속하지 않는 다른 클래스들도 함께 정의돼 있다. 

전형적인 컨트롤은 버튼(button)으로, WPF에서는 Button 클래스로 표현한다. Button 클래스에는 Content란 프로퍼티와 Click이란 이벤트가 있다. Click이벤트는 마우스나 키보드로 버튼을 누를 때 발생한다. 

다음 프로그램은 Button 객체를 생성하고 Click 이벤트에 대한 핸들러를 설치해서 버튼을 클릭할 때 메시지 박스를 출력한다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class ClickTheButton : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ClickTheButton());
	}
	public ClickTheButton()
	{
		Title = "Click the Button";
		
		Button btn = new Button();
		btn.Content = "_Click me, please!";
		btn.Click += ButtonOnClick;
	
		Content = btn;
	}
	void ButtonOnClick(object sender, RoutedEventArgs args)
	{
		MessageBox.Show("The button has been clicked and all is well", Title);
	}
}

Button 객체의 Content 프로퍼티에는 텍스트 문자열을 할당하고, Button 객체 그 자체는 Window의 Content 프로퍼티에 할당한다. 할당하는 순서는 어떻게 해도 무방하다. 버튼을 Window의 일부로 만들기 전이나 후에 관계없이 버튼 프로퍼티를 설정하고 이벤트 핸들러를 붙일 수 있다. 

Window처럼 Button에도 Content 프로퍼티가 있다는 사실은 우연이 아니다. 두 클래스 모두 ContentControl을 상속받고 있어서 여기에 Content 프로퍼티가 정의돼 있기 때문이다. 다음은 Control에서 시작되는 클래스 계층도의 일부이다. 

Control
	ContentControl
		ButtonBase(abstract)
			Button
		Window

Window와 ButtonBase 모두 동일한 Content 프로퍼티를 갖고 있는데, 여기에 심오한 의미가 있다. Window의 Content에 대입할 수 있는 다양한 모든 객체는 버튼의 Content로도 사용될수 있다는 점이다. 버튼을 비트맵으로 표시할 수도 있고, Shape 객체나 서식이 있는 텍스트로도 표시할 수 있다. 심지어는 Button 객체의 Content에 다른 Button 객체를 연결할 수도 있다. 

지금쯤은 클라이언트 영역 내부를 가득 채운 버튼을 보고서도 놀라지 않을 것 같다. 창의 크기를변경 시키면 버튼의 크기도 변경되는 것을 볼 수 있다. 
최초에는 버튼에 입력 포커스(focus)가 없다. 즉 키보드를 눌러도 이에 반응하지 않는다는 의미이다. 프로그램을 실행하고 Space Bar를 눌러도 아무 일도 일어나지 않는다. 

버튼에 입력 포커스가 없을지라도 Alt + C를 누르면 버튼이 눌려진다. Alt키를 누르고 자세히 살펴보면 Click me, please! 의 첫 글자에 밑줄이 생긴 것을 알 수 있다. Content 프로퍼티에 대입할 텍스트 문자열에서 원하는 글자의 앞에 밑줄(_)을 넣으면 바로 가기 키(shortcut)을 사용할 수 있다. 이 기능은 메뉴 항목에서 더 자주 사용하지만 버튼이나 다른 컨트롤에서도 사용 가능하므로 대화상자에서 좀 더 다양한 키보드 인터페이스를 만들 수 있다. 

Tab 키를 누르거나 버튼을 마우스 왼쪽 버튼으로 클릭하면 버튼에 입력 포커스가 생긴다. 버튼 경계에 점선이 생기는 것을 확인할 수 있는데, 입력 포커스가 있다는 의미이다. 그후에는 Space Bar나 Enter 키를 눌러도 버튼을 누를 수 있다. 
프로그램에서 직접 버튼에 입력 포커스를 줄 수도 있다. 생성자에 다음 구문을 추가해 보자. 

btn.Focus();

버튼에 입력 포커스가 없어도 기본 버튼으로 설정해 놓는다면 Enter 키에 반응하게 된다. 다음 구문은 기본 버튼으로 만드는 기능을 한다. 

btn.IsDefault = true;

다음 구문에 있는 프로퍼티는 Esc 키에 대해 반응할 수 있게 한다. 

btn.IsCancel = true;

이 두 프로퍼티는 보통 대화상자에서 확인과 취소 버튼에 사용된다. 같은 버튼에 대해 두 프로퍼티를 모두 설정할 수도 있는데, 이는 About 대화상자에 주로 사용되는 기법으로 확인 버튼 하나만 있다. 

자세히 살펴보면 마우스가 버튼 위를 지나갈 때 버튼 주위의 경계선이 약간 바뀜을 알 수 있다. 클릭을 하면 버튼의 배경색이 바뀌는 것도 확인할수 있다. 컨트롤과 다른 엘리먼트와의 차이점 중 하나가 바로 이런 피드백이다. 

ButtonBase에는 ClickMode라는 프로퍼티가 정의돼 있다. 이 프로퍼티는 ClickMode 열거형의 멤버로 대입하면 버튼이 마우스 클릭에 어떻게 반응하는지를 결정한다. 기본값은 ClickMode.Release이며, 마우스 버튼을 뗄 때에 Click 이벤트가 발생한다. ClickMode.Press나 ClickMode.Hover를 설정할 수도 있는데, 전자는 마우스를 누를때 이벤트가 발생하며, 후자는 마우스 커서가 버튼을 지나가기만 해도 이벤트가 발생한다. 

클라이언트 영역을 가득 채운 버튼이 마치 방안에 있는 코끼리 같다 앞장에서 살펴보았듯이 FrameworkElement에는 Margin이란 프로퍼티가 있고 이를 이용해 엘리먼트의 경계 바깥 부분에 여백을 줄 수 있다. 다음 구문을 살펴보자. 

btn.Margin = new Thickness(96);

이 구문을 추가해 다시 컴파일 하면 버튼의 사방으로 1인치의 공간이 생긴다. 물론 아직도 버튼은 매우 크지만 이제는 버튼 내부를 변경해보자. 버튼의 Content인 텍스트 문자열은 현재 가운데에 있다.다음 두 구문으로 이 텍스트 문자열을 좌측 하단으로 옮길 수 있다. 

btn.HorizontalContentAlignment = HorizontalAlignment.Left;
btn.VerticalContentAlignment = VerticalAlignment.Bottom;

3장에서 HorizontalAlignment와 VerticalAlignment프로퍼티에 대해서 논의한 적이 있는다. 위 두 줄을 자세히 살펴보면 프로퍼티 이름 가운데에 Content란 단어가 있음을 알 수 있는데, 이 때문에 버튼 내부를 조정하는 것임을 짐작할 수 있다. 지금쯤은 HorizontalAlignment에는 Center, Left, Right, Stretch의 4가지 멤버가 VerticalAlignment에는 Center, Top, Bottom, Stretch의 4가지 멤버가 있다는 것을 잘 알고 있을 것이다.(이 상황에서 Stretch를 사용하면 Left와 Top 을 사용한 것도 똑같은 효과를 낸다)

버튼의 내부에 약간의 공간을 넣는 것도 가능하다. 다음과 같이 Margin 프로퍼티처럼 Thickness 구조체를 사용한다. 

btn.Padding = new Thickness(96);

이제 버튼의 바깥과 안쪽 모두에 1인치의 공간이 생겼다. 

Margin 프로퍼티(FrameworkElement에 정의됨)가 버튼의 바깥쪽에 여백을 주는 것이다. 반해, Padding 프로퍼티(Control에 정의됨)버튼의 내부에 여백을 준다. 

Control에 정의된 HorizontalContentAlignment와 VerticalContentAlignment프로퍼티가 버튼 컨텐트의 위치에 영향을 주는 것처럼 HorizontalAlignment와 VerticalAlignment프로퍼티는 컨테이너(클라이언트 영역)내에서 버튼의 위치에 영향을 준다. 버튼에서 이 두 프로퍼티의 기본값은 각기 HorizontalAlignment.Stretch와 VerticalAlignment.Stretch이며, 이는 클라이언트 영역을 가득 채우게 버튼을 늘리라는 것을 의미한다. 다음과 같이 양쪽 모두를 Center로 수정해보자. 

btn.HorizontalAlignment = HorizontalAlignment.Center;
btn.VerticalAlignment = VerticalAlignment.Center;

이제 버튼의 크기는 컨텐트에 맞게 조정됐고 위치도 창의 중간에 있게 된다. 버튼 크기는 컨텐트의 크기에 맞게 스스로 조절이 된다. 심지어 버튼이 이미 표시된 후라도 컨텐트의 크기에 맞춰진다. 또한 줄 바꿈을 넣을 수도 있다. 필요하다면 다음과 같이 버튼의 크기를 명시적으로 지정할 수도 있다. 

btn.Width = 96;
btn.Height = 96;

그렇지만 컨트롤의 크기를 명시적으로 지정하지 않는 것이 여러모로더 편리하다. WPF에서는 사용자 화면 해상도에 맞게 컨텐트의 크기가 자동으로 조절된다는 사실을 기억하자. 컨트롤의 크기를 지정하면 이런 기능을 사용할 수 없게 된다. 

추가한 모든 코드를 빼고 다른 방법을 사용해 버튼의 크기를 조절해보자. 다음과 같이 Window의 SizeToContent 프로퍼티를 이용한다. 

SizeToContent = SizeToContent.WidthAndHeight;

이제 버튼의 크기에 맞게 창의 크기가 변하고 Button에 설정된 Margin 도 적용된다. 

기본값으로 버튼의 폰트는 em size가 11인 Tahoma 글자체다. 다음과 같이 em size와 폰트는 쉽게 변경할 수 있다. 

btn.FontSize = 48;
btn.FontFamily = new FontFamily("Times New Roman");

Window의 FontSize와 FontFamily를 설정하는 것도 효과가 있다. 버튼이 이 값들을 계승하기 때문이다. 그리고 아래와 같이 색상도 바꿀 수 있다. 

btn.Background = Brushes.AliceBlue;
btn.Foreground = Brushes.DarkSalmon;
btn.BorderBrush = Brushes.Magenta;

버튼에서의 BorderThickness 프로퍼티는 아무런 효과가 없다. 

한편 마우스 커서를 버튼 위로 올리는 경우처럼 사용자에게 추가적인 피드백이 필요한 경우도 있다. 다음 프로그램은 버튼 위에서 서식화된 텍스트를 출력하기 위해 TextBlock를 사용하며, MouseEnter와 MouseLeave 이벤트를 처리해 색상을 변경한다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;

public class FormatTheButton : Window
{
	Run runButton;
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new FormatTheButton());
	}
	public FormatTheButton()
	{
		Title = "Format the Button";
		//버튼을 생성하고 Window의 Content로 설정
		Button btn = new Button();
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.VerticalAlignment = VerticalAlignment.Center;
		btn.MouseEnter += ButtonOnMouseEnter;
		btn.MouseLeave + ButtonOnMouseLeave;
		Content = btn;

		//TextBlock을 생성하고 버튼의 Content로 설정
		TextBlock txtblk = new TextBlock();
		txtblk.FontSize = 24;
		txtblk.TextAlignment = TextAlignment.Center;
		btn.Content = txtblk;

		//TextBlock에 서식화된 텍스트를 추가
		txtblk.Inlines.Add(new Italic(new Run("Click")));
		txtblk.Inlines.Add(" the ");
		txtblk.Inlines.Add(runButton = new Run("button"));
		txtblk.Inlines.Add(new LineBreak());
		txtblk.Inlines.Add("to launch the ");
		txtblk.Inlines.Add(new Bold(new Run("rocket")));
	}
	void ButtonOnMouseEnter(object sender, MouseEventArgs args)
	{
		runButton.Foreground = Brushes.Red;
	}
	void ButtononMouseLeave(object sender, MouseEventArgs args)
	{
		runButton.Foreground = SystemColors.ControlTextBrush;
	}
}


button이란 단어가 포함된 Run 객체는 runButton 이란 필드에 저장됨을 알 수 있다. 마우스 커서가 버튼으로 들어가면 Run 객체의 Foreground 프로퍼티에는 빨간색이 들어간다.마우스 커서가 버튼을 벗어나게 되면 SystemColors.ControlTextBrush로부터 기본 텍스트 색을 얻어와 그 색으로 설정한다. 

다음 프로그램은 버튼에 텍스트 대신 이미지를 넣는다. 그런데 인터넷이나 파일에서 이미지를 읽어 들이지 않고 이미지를 리소스(resource)로서 실행 파일 안에 포함시키는 방법을 사용할 것이다. 리소스란 단어는 WPF에서 두 가지 다른 의미로 사용한다. 여기서 보게 될 리소스의 형태는 어셈블리 리소스(assembly resource)로서, 비주얼 스튜디오에서 프로젝트의 일부분으로 만들어지는 파일(일반적으로 이진 파일)이며, 결국 실행 파일이나 동적 연결 라이브러리(Dll)의 일부가 된다. 

비트맵을 비주얼 스튜디오 프로젝트의 일부로 만들기 위해서는 솔루션 탐색기에서 프로젝트의 이름을 마우스 오른쪽 버튼으로 클릭한 후 추가 > 기존 항목을 선택한다(또는 프로젝트 메뉴에서 기존 항목 추가를 선택해도 된다.) 대화상자에서 항목을 찾아 추가 버튼을 클릭한다. 파일이 프로젝트 파일의 목록에 나타날 것이다. 항목을 마우스 오른쪽 버튼으로 클릭하고 속성을 선택한다. 그리고 빌드 작업(Build Action)을 리소스로 설정해야 한다 

프로그램에서 Uri 생성자를 사용해 파일에 접근할 수 있다. 다음 구문에서 filename에는 실제 파일 이름이 들어간다. 

Uri uri = new Uri("pack://application:,,/filename");

파일 이름 앞에 콤마 두개와 슬래시(역 슬래시가 아님)가 있음을 유의해야 한다. 

프로젝트에 많은 이미지 파일이 있다면 별도의 디렉토리로 관리할 필요가 생긴다. 먼저 솔루션 탐색기의 프로젝트 이름을 마우스 오른쪽 버튼으로 클릭하고 추가 > 새폴더를 선택한다(또는 프로젝트 메뉴에서 새 폴더 추가를 선택해도 된다)폴더 이름은 Images로 변경한다. 그 후 폴더 이름을 마우스 오른쪽 버튼으로 클릭하고 그 폴더에 이미지 파일들을 추가한다. 프로그램에서 이미지를 로딩하려면 다음과 같은 구문을 사용한다. 

Uri uri = new Uri("pack://application:,,/Images/filename");

디렉토리 이름 앞에 슬래시가 있음을 확인하자. 

다음 프로젝트에는 에드바르트 뭉크(Edvard munch)의 절규라는 유명한 그림의 이미지를 추가할 것이다. 이 파일의 이름은 munch.png이다. 이 이미지를 버튼에 사용해보자. 정말이지 사용자가 누르기 싫어할 것이다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

public class ImageTheButton : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ImageTheButton());
	}
	public ImageTheButton()
	{
		Title = "Image the Button";
		
		Uri uri = new Uri("pack://application:,,/munch.png");
		BitmapImage bitmap = new BitmapImage(uri);

		Image img = new Image();
		img.Source = bitmap;
		img.Stretch = Stretch.None;

		Button btn = new Button();
		btn.Content = img;
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.VerticalAlignment = VerticalAlignment.Center;

		Content = btn;
	}
}

투명한 부분을 갖는 이미지 파일이 있다면 이 프로그램에서 시험해 볼 수 있다. 투명한 부분을 통해 Button의 배경색을 볼 수 있을 것이다. 

이제는 버튼에 이미지와 텍스트 모두를 표시하면 괜찮지 않을까? 확실히 그럴것 같다. 그러나 Content 프로퍼티에는 오직 하나의 객체만 설정할 수 있어서 이점이 마음에 걸리긴 하지만 해결책은 나중에 살펴볼 것이다. 

버튼의 Click 이벤트 핸들러는 사용자가 버튼을 클릭하면 프로그램이 통지를 받게 되는 아주 전통적인 방법이다. 그런데 이 클릭으로 프로그램의 다른 연산을 수행할 수도 있다. 즉 메뉴 항목이나 툴바 항목 또는 버튼 등 여러 가지의 출처를 통해 실행될 수 있는 그런 연산을 말한다. 프로그램 코드를 통해서도 같은 연산을 실행할 수 있다. 이런 모든 컨트롤을 한 지점으로 보내면 더 의미가 분명해질 것이다. 

이것이 Command란 프로퍼티의 이면에 담겨있는 생각이다. Command는 ButtonBase 클래스와 MenuItem을 포함한 몇 개의 다른 클래스에 정의돼 있다. Button 객체의 Command 프로퍼티는 ApplicationCommands, ComponentCommands, MediaCommands, NavigationCommands, EditingCommands 클래스의 정적 프로퍼티로 설정한다. 앞의 4개 클래스는 System.Windows.Input 네임스페이스에 있고, 나머지 한 개는 System.Windows.Documents에 있다. 이 클래스들의 정적 프로퍼티는 모두 RoutedUICommand 타입이다. 자신만의 RoutedUICommand 타입 객체를 만들수도 있다.(14장에서 설명할 것이다)

특정 버튼에 대해 붙여넣기(Paste)를 수행하려면 Command 프로퍼티를 다음과 같이 설정한다. 

btn.Command = ApplicationCommands.Paste;

필수 사항은 아니지만 해당 Command의 표준 텍스트를 버튼의 텍스트에 그대로 이용할 수도 있다. 

btn.Content = ApplicationCommands.Paste.Text;

다른 방법으로 이런 특정한 Paste 명령을 이벤트 핸들러와 결합시킬 수 있다. 이런 결합을 바인딩(binding)이라고 부르며, 이는 WPF에서 볼 수 있는 몇 개의 바인딩 유형 중 하나다. UIElement 클래스에는 CommandBindings이란 프로퍼티가 정의돼 있는데, 이는 CommandBinding 객체들의 컬렉션이다. Control과 Window 클래스는 이 CommandBindings 프로퍼티를 UIElement에서 상속한다. 이제 Window의 CommandBindings 컬렉션을 사용할 것인데, 다음의 구문과 같다. 

CommandBindings.Add(new CommandBinding(ApplicationCommands.Paste, PasteOnExecute, PasteCanExecute));

PasteOnExecute와 PasteCanExecute는 구현해야 할 이벤트 핸들러라(이름은 다르게 지어도 무방하다)PaseOnExecute 핸들러에서 실제 Paste명령을 수행한다. 그런데 때로는 클립보드에 있는 데이터가 적절한 형식이 아니어서 프로그램에서 처리를 못하게 되는 경우가 있다. PasteCanExecute 핸들러의 목적이 바로 이것이다. 즉 핸들러에서 클립보드의 데이터가 적절한 형식인지를 검사하게 된다. 데이터가 부적합하면 핸들러에서 플래그를 설정하며, 이에 따라 Button 은 자동적으로 비활성화 상태가 된다. 

같은 프로그램에서 Paste에 해당하는 메뉴 항목이 있다면 메뉴 항목의 Command 프로퍼티블 ApplicationCommands.Paste로 지정만 하면 같은 바인딩이 적용된다. 

다음은 Command 바인딩을 보여주는 예제이다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class CommandTheButton : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new CommandTheButton());
	}
	public CommandTheButton()
	{
		Title = "Command the Button";
		
		//버튼을 생성하고 Window의 컨텐트로 설정
		Button btn = new Button();
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.VerticalAlignment = VerticalAlignment.Center;
		btn.Command = Applications.Paste;
		btn.Content = ApplicationCommands.Paste.Text;
		Content = btn;
		
		//Command와 이벤트 핸들러의 바인딩
		CommandBindings.Add(new CommandBinding(ApplicationCommands.Paste, PasteOnExecute, PasteCanExecute));
	}
	void PasteOnExecute(object sender, ExecutedRoutedEventArgs args)
	{
		Title = Clipboard.GetText();
	}
	void PasteCanExecute(object sender, ExecutedRoutedEventArgs args)
	{
		args.CanExecute = Clipboard.CantainsText();
	}
	protected override void OnMouseDown(MouseButtonEventArgs args)
	{
		base.OnMouseDown(args);
		Title = "Command the Button";
	}
}

생성자에서는 Button 객체의 Command 프로퍼티에 ApplicationCommands.Paste를 대입하고 있다. 생성자의 마지막 부분에서는 ApplicationCommands.Paste와 PasteOnExecute, PasteCanExecute 이벤트 핸들러를 결합해 CommandBinding 객체를 생성하며, 이 CommandBinding 객체를 Window의 CommandBindings 컬렉션에 추가한다. 

PasteOnExecute와 PasteCanExecute 이벤트 핸들러에서는 Clipboard 클래스 (System.Windows에위치)의 정적 메소드를 호출하고 있다. 정적 GetText와 ContainsText 메소드는 모두 오버로딩된 형태로 존재하므로 원하는 텍스트 타입으로 지정할 수 있다. 이런 텍스트 타입에는 CSV나 HTML, RTF, 유니코드(Unicode), XAML등이 있다. 그러나 이 프로그램에서는 이런 텍스트 타입을 사용하지 않고 그냥 클립보드에 있는 텍스트를 Title 프로퍼티에 대입한다. 이 프로그램을 가지고 이것저것 시험해보기 위해서 마지막 메소드를 준비했다. 마우스로 아무 곳이나 클릭하면 Title의 텍스트를 다시 복원한다. 

프로그램을 실행시키기 전에 메모장이나 다른 프로그램에서 텍스트를 복사해 클립보드에 저장해 둔다. 버튼은 키보드와 마우스뿐만 아니라 붙여넣기(Paste)의 표준 바로 가기 키인 Ctrl + V 에도 반응을 한다. Click 이벤트에 대한 핸들러를 사용하지 않고 Command 바인딩을 사용함으로써 생기는 장점 중의 하나다. 

이제 클립보드에 비트맵을 복사해보자. 그림판이나 포토샵을 실행할 것까지는 없다. 단순하게 Print Screen 키를 눌러서 화면 이미지를 클립보드로 복사한다. 클립보드에 변화가 생길때마다 바인딩된 pasteCanExecute 이벤트 핸들러가 호출돼 이벤트 인자의 CanExecute 프로퍼티에 적절한 값을 넣는다. 버튼은 즉시 비활성화가 될 것이다. 이제는 텍스트를 클립보드로 복사해보자. 버튼은 다시 활성화가 된다. 내부에서는 Command 바인딩 때문에 Button의 IsEnabled 프로퍼티(UIElement에서 상속)가 자동으로 변경된다. 

가장 일반적인 버튼의 기능은 Click 이벤트 핸들러나 Command 바인딩을 통해 명령을 수행하는 것이다. 버튼의 다른 형태로는 선택 사항을 지정할 수 있다. CheckBox 컨트롤은 사각형 모양과 그옆에 오는 텍스트로 구성된다. 사각형은 프로그램에서 특정한 선택 사항을 표시하기 위해 체크되거나 해제될 수 있다. 폰트 대화상자를 예로 들면 굵게, 기울임꼴, 밑줄에 대해 선택할 수 있게 하는 것이 CheckBox 컨트롤이다. 

RadioButton 컨트롤은 보통 여러 항목 중에서 하나만 선택할 수 있게 표시하는 데 사용된다. (이 용어는 자동차 라디오에서 주파수를 선택하는 버튼에서 유래됐다.)

CheckBox와 RadioButton 모두 토글(toggle)형태의 버튼이다. 다음 계층도는 ButtonBase에서 상속된모든 클래스들을 보여준다. 

Control 
	ContentControl
		ButtonBase(abstract)
			Button
			GridViewColumnHeader
			RepeatButton
			ToggleButton
				CheckBox
				RadioButton

ToggleButton 은 추상 클래스가 아니어서 ToggleButton 타입의 객체도 생성할 수 있다. 이버튼은 일반 버튼처럼 보이지만 눌린 상태와 눌리지 않은 상태로 전환된다. 다음 프로그램은 ToggleButton을 누를 때 Window의 ResizeMode 프로퍼티 값을 바꾼다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;

public class ToggleTheButton : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ToggleTheButton();
	}
	public ToggleTheButton()
	{
		Title = "Toggle the Button";
		
		ToggleButton btn = new ToggleButton();
		btn.Content = "Can_Resize";
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.VerticalAlignment = VerticalAlignment.Center;
		btn.IsChecked = (ResizeMode == ResizeMode.CanResize);
		btn.Checked += ButtonOnChecked;
		btn.UnChecked += ButtonOnChecked;
		Content = btn;
	}
	void ButtonOnChecked(object sender, RoutedEventArgs args)
	{
		ToggleButton btn = sender as ToggleButton;
		ResizeMode = (bool)btn.IsChecked ? ResizeMode.CanResize : ResizeMode.NoResize;
	}
}

ToggleTheButton 에서는 ResizeMode 프로퍼티를 ResizeMode.CanResize와 ResizeMode.NoResize 로 서로 전환시키기 위해 버튼을 사용했다. 버튼은 사용자가 누를 때마다 자동으로 누름과 해제로 토글된다. IsChecked 프로퍼티는 현재의 설정을 알려준다. ResizeMode가 최초에 ResizeMode.CanResize일때  IsChecked를 true로 세팅했음 을 확인하자. Checked와 UnChecked라는 이벤트는 버튼이 각기 누름 상태나 해제 상태가 될 때 발생한다. 두 이벤트 모두에 대해 이벤트 핸들러를 붙일 수도 있고 아니면 하나만 만들고 그안에서 IsChecked프로퍼티로 두 상태를 구별해 낼 수도 있다. 

IsChecked 프로퍼티는 C#의 조건 연산자에 쓰이기 전에 bool로 형 변환돼야 함을 유의하자. IsChecked 프로퍼티는 실제로는 null이 가능한 bool이어서 true, false, null의 값이 될 수 있다. ToggleButton 버튼의 IsThreeState 프로퍼티에 true를 넣으면 IsChecked에 null을 대입할수 있게 된다. 이렇게 하면 버튼은 불확정(indeteminate)상태로 표시된다. 워드프로세서 프로그램의 기울임꼴 버튼을 예로 들면 현재 선택된 글자의 글자체가 기울임꼴과 기울임꼴이 아닌 것으로 섞여 있을때 이 불확정 상태가 사용된다. 단선택된 텍스트를 기울임꼴로 바꾸는 것이 불가능하다면 버튼은 IsEnabled가 false로 돼 비활성화될 것이다. 

CheckBox 클래스는 ToggleButton에서 추가된 것이 거의 없다. 예제 프로그램에서 CheckBox를 생성하는 걸로 고쳐보자. 다음과 같이 버튼 생성 부분만 바꿔주면 된다. 

CheckBox btn = new CheckBox();

이벤트 핸들러를 바꿔줄 필요는 없다. 버튼이 다르게 보이는 것 외에는 동일하게 동작한다. 
ToggleButton을 RadioButton으로 바꿀 수도 있지만 이 경우에는 전과 동일하게 동작하지는 않는다. 라디오 버튼의 경우는 클릭한다고 해서 해제되지 않기 때문이다.

ToggleButton이나 CheckBox는 기본적으로 불리언 값을 표현하므로 특정 토글 버튼이 어떤 객체의 Boolean프로퍼티와 결합된다고 볼 수 있다. 이를 데이터 바인딩(data binding)이라고 하며, WPF에서 중요한 부분을 차지한다. 이에 대해서는 23장에서 다루겠다. 

데이터 바인딩이 적용된 ToggleButton은 IsChecked 프로퍼티를 초기화시킬 필요가 없으며, Checked나 UnChecked 이벤트 핸들러도 설치할 필요가 없다. 대신 FrameworkElement 클래스에서 상속한 SetBinding 메소드를 호출한다. ToggleButton이나 CheckBox 객체의 경우에는 다음과 같이 호출한다. 

btn.SetBinding(ToggleButton.IsCheckedProperty, "SomeProperty");

두번 째 인자는 버튼의 IsChecked 상태와 연결시키려고 하는 프로퍼티의 이름을 넣는다. Button의 DataContext 프로퍼티에 SomeProperty가 속한 객체를 지정해야한다. 

SetBinding 메소드의 첫 번째 인자는 다소 낯설게 보일 것 같다. ToggleButton 객체의 IsChecked 프로퍼티를 의미하는 것이 아니라 정적 멤버인 IsCheckedProperty란 정적 필드가 있다. 8장에서 의존 프로퍼티를 의미하는 DependencyProperty에 대해 자세히 다룰 것이다 지금은 그냥 ToggleButton에 정의된 특정 프로퍼티를 참조하는 편리한 방법 정도로만 이해하자. 

그렇다면 ToggleButton에 어떤 불리언 프로퍼티를 바인딩해야 할까? 사용할만한 불리언 하나가 Window의 Topmost 프로퍼티다. 기억하겠지만 Topmost가 true면 그 창이 다른 창보다 항상 맨 앞에 보이게 된다. SetBinding을 다음과 같이 호출해보자. 

btn.SetBinding(ToggleButton.IsCheckedProperty, "Topmost");

이 데이터 바인딩만으로는 어떤 Window의 Topmost 프로퍼티를 참조하는지 따로 알 수 없기 때문에 버튼의 DataContext 프로퍼티에 다음과 같이 Window 객체를 지정해야 한다. 

btn.DataContext = this;

다음은 전체 프로그램이다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;

public class BindTheButton : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new BindTheButton());
	}
	public BindTheButton()
	{
		Title = "Bind theButton";

		ToggleButton btn = new ToggleButton();
		btn.Content = "Make_Topmost";
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.VerticalAlignment = VerticalAlignment.Center;
		btn.SetBinding(ToggleButton.IsCheckedProperty, "Topmost");
		btn.DataContext = this;
		Content = btn;

		ToolTip tip = new ToolTip();
		tip.Content = "Toggle the button on to make " + "the window topmost on the desktop";
		btn.ToolTip = tip;
	}
}


이 프로그램을 실행시키면 버튼은 자동적으로 Topmost 프로퍼티의 현재 상태로 초기화된다. 버튼을 누르거나 해제하면 프로퍼티도 이에 따라 바뀌게 된다. 

System.Windows.Data 네임스페이스에는 Binding이란 클래스가 있다. 이 클래스는 데이터 바인딩을 만들고 설정하는 또 다른 수단이다. 다음의 구문은 SetBinding을 호출하고 DataContext 프로퍼티를 지정하는 구문을 대체할 수 있다. 

Binding bind = new Binding("Topmost");
bind.Source = this; btn.SetBinding(ToggleButton.IsCheckedProperty, bind);

Binding 클래스에는 데이터 바인딩을 정의할 때 사용하는 다양한 선택 사항이 있는데, 23장에서 살펴볼 것이다. 

BindTheButton 프로그램에는 ToolTip 객체도 있는데 이 객체는 Button의 ToolTip 프로퍼티에 대입한다. 마우스 포인터를 버튼 위에서 잠깐 멈출 때 텍스트가 나타난다. ToolTip 프로퍼티는 FrameworkElement에 정의돼 있으며 툴팁(tool tip)을 다른 엘리먼트나 컨트롤에 붙이는 것도 가능하다. ToolTip은 ButtonBase나 Windows처럼 ContentControl을 상속받으므로 ToolTip 에 서식이 있는 텍스트를 사용할 수 있고, 심지어 그림을 넣을 수도 있다. 

ToolTip 에서 이미지를 보고싶다면 ImageButton 프로그램으로 돌아가 생성자의 마지막 부분에 다음 네 줄을 추가해보자. 

btn.Content = "Don't Click Me!";
ToolTip tip = new ToolTip();
tip.Content = img;
btn.ToolTip = tip;

Button에는 텍스트가 출력될 것이며, ToolTip에서는 몽크의 절규가 나타날 것이다. 

COntentControl을 상속받는 또 하나의 간단한 컨트롤은 Label이다. 전통적으로 Label 컨트롤은 폼이나 대화상자에서 간단한 텍스트 문자열을 출력하는 표준 방법으로 사용돼 왔다.  
다음 예를 살펴보자. 파일 열기 대화상자에 나올법한 Label이다. 

Label lbl = new Label();
lbl.Content = "File_name";

TextBlock과 같이 다용도로 쓸 수 있는 엘리먼트가 있어서 Label 컨트롤은 진부하게 보일수도 있지만 실제로는 그렇지 않다. Content 프로퍼티에 할당한 텍스트에 밑줄을 쓸 수 있는 기능이 바로 핵심이다. 파일 열기 대화상자에서 Alt + N을 누르면 입력 포커스가 Label로 가는 것이 아니고 Label 다음에 있는 컨트롤로 이동된다. 일반적으로 Label은 포커스가 갈수 없기 때문이다. Label 다음에 있는 컨트롤은 주로 사용자가 텍스트를 입력하고 편집할 수 있게 하는 TextBox 컨트롤이 될 것이다. 그렇게 해서 Label은 키보드로 포커스 이동을 도와주는 보조자 역할로 명맥을 유지해 왔다. 

TextBox 컨트롤에 대해 알아보기 위해 다음 클래스 계층도를 살펴보자. WPF에서는 두 가지 형태의 TextBox가 지원된다. 

Control
	TextBoxBase(abstract)
		TextBox
		RichTextBox

TextBox에는 컨텐트가 있긴 하지만 ContentControl은 아니다. 컨텐트가 항상 텍스트 이기 때문이다. 대신 TextBox에는 Text 프로퍼티가 있다. 이 프로퍼티는 최초 문자열을 지정하거나 사용자가 입력하는 문자열을 얻는데 사용된다. 

TextBox가 Control을 상속받기 때문에 그컨트롤 안에서 Background와 Foreground 브러시와 폰트도 지정할 수 있다. 다만 한 시점에서는 모든 텍스트가 같은 색과 같은 폰트로 출력된다. 이에 비해 RichTextBox 컨트롤은 텍스트의 일부를 다양한 서식으로 만들 수 있다. 
TextBox와 RichTextBox의 차이는 윈도우의 메모장과 워드패드의 차이와 같다고 볼 수 있다. 

다음 예제는 이 책에 등장하는 최초의 대화상자로 하나의 TextBox 컨트롤이 들어있다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

class UriDialog : Window
{
	TextBox txtbox;
	
	public UriDialog()
	{
		Title = "Enter a URI";
		ShowInTaskbar = false;
		SizeToContent = SizeToContent.WidthAndHeight;
		WindowStyle = WindowStyle.ToolWindow;
		WindowStartupLocation = WindowStartupLocation.Centerowner;

		txtbox = new TextBox();
		txtbox.Margin = new Thickness(48);
		Content = txtbox;

		txtbox.Focus();
	}
	public string Text
	{
		set
		{
			txtbox.Text = value;
			txtbox.SelectionStart = txtbox.Text.Length;
		}
		get
		{
			return txtbox.Text;
		}
	}
	protected override void OnKeyDown(KeyEventArgs args)
	{
		if(args.Key == Key.Enter)
			Close();
	}
}

UriDialog 클래스는  Window를 상속받고 있지만 Main 메소드는 없다(Main 메소드는 이 프로그램의 메인 창에 대한 클래스에 들어있다) 생성자의 윗부분에서 몇 가지 프로퍼티를 설정하고 있다. 대화상자는 작업 표시줄에 표시되지 않는다. 그리고 컨텐트의 크기에 맞게 창의 크기도 조절되며, ToolWindow라는 WindowStyle을 지정하고 있다(ToolWindow 스타일은 대화상자의 크기를 조절할 수 있게 해주지만 최소화 버튼과 최대화 버튼은 없다)WindowStartupLocation 프로퍼티를 설정해 대화상자가 그 소유자의 중앙에 위치하게 만들 수 있다(소유자 창은 나중에 살펴볼 것이다)

Title에는 Enter a URI라 했고 TextBox가 클라이언트 영역의 중앙에 생겨 사용자가 무엇인가를 여기에 입력할 수 있다. 클래스에는 Text라는 프로퍼티도 있는데, 대화상자 클래스에는 거의 public으로 프로퍼티를 만든다. 그래야만 프로그램이 대화상자와 상호작용 할수 있다. 이 Text 프로퍼티는 단순히 TextBox 컨트롤의 Text 프로퍼티에 접근한다. set 접근자(accessor)에서는 TextBox의 SelectionStart 프로퍼티를 사용해서 커서 위치를 텍스트의 마지막에 놓고 있다. 닫기 버튼을 클릭하거나 Enter 키를 눌러 대화상자를 닫을 수 있다. 

OnKeyDown 을 오버라이딩해서 이런 기능을 구현한다. 

다음 프로그램은 UriDialog를 사용한다. 이 프로그램에서는 Content 프로퍼티에 Frame 타입의 객체를 넣고 있다. Frame도 ContentControl을 상속받지만 여기에서는 Frame의 Content 프로퍼티가 아닌 Source 프로퍼티에 값을 대입한다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public class NavigateTheWeb : Window
{
	Frame frm;
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new NavigateTheWeb());
	}
	public NavigateTheWeb()
	{
		Title = "Navigate the Web";
		
		frm = new Frame();
		Content = frm;

		Loaded += onWindowLoaded;
	}
	void OnWindowLoaded(object sender, RoutedEventArgs args)
	{
		UriDialog dlg = new UriDialog();
		dlg.Owner = this;
		dig.Text = "http://";
		dlg.ShowDialog();
		try
		{
			frm.Source = new Uri(dlg.Text);
		}
		catch(Exception exc)
		{
			MessageBox.Show(exc.Message, Title);
		}
	}
}


이 프로그램에서는 Loaded 이벤트에 대한 이벤트 핸들러인 OnWindowLoaded가 있다. OnWindowLoaded는 메인 창이 화면상에 표시된 후에 호출되며, 여기에서는 UriDialog 타입의 객체를 생성하고 Owner를 지정하며 "http://"라는 문자열을 Text 프로퍼티에 대입한다. ShowDialog를 호출하면 모달 대화상자를 출력해서 사용자가 이 대화상자를 닫기 전까지는 반환되지 않는다. 사용자는 유효한 웹사이트의 URI를 입력하게 된다. 사용자가 TextBox에 입력하면 그 텍스트가 다 보일수 있게 대화상자의 크기가 스스로 늘어난다. TextBox가 텍스트를 모두 보여주기 위해 늘어나는 것이며, Window도 이에 따라서 같이 늘어난다. 

ShowDialog가 반환한 값을 Frame 컨트롤의 Source 프로퍼티에 넣으며, 이 컨트롤은 웹 브라우저가 된다. 물론 네비게이션 버튼은 없지만 웹 브라우저의 뒤로가기 버튼은 Backspace키로 대신할 수 있고, 웹 페이지에서 오른쪽 클릭을 하면 인쇄를 포함한 몇 가지의 기능을 사용할 수 있다. 

UriDialog 대화상자는 사용자가 Enter키를 누르면 저절로 닫힌다. 기본값으로는 TextBox는 Enter 키를 받을수 없게 돼 있기 때문이다. 다음과 같이 설정해보자. 

txtbox.AcceptsReturn = true;

한줄을 편집하는 컨트롤에서 여러 줄을 편집할 수 있는 컨트롤이 됐고, 이제는 캐리지 리턴을 처리할 수 있게 됐다. 다음의 프로그램은 TextBox 컨트롤이 클라이언트 영역을 가득 채우고 있다. 나중에 만들게 될 메모장 클론(clone)의 시작이라고 할 수 있다. 그러나 아직은 파일 열기나 저장을 위한 파일 메뉴는 없고 정해진 파일 이름만을 사용한다. 이 프로그램은 윈도우 세션이 종료돼도 내용이 유지되는 메모장으로 사용될 수 있을 것이다. 



using System;
using System.ComponentModel; //CancelEventArgs를 쓰기 위함
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

class EditSomeText : Window
{
	static string strFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
			"Petzold\\EditSomeText\\EditSomeText.txt");
	TextBox txtbox;
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new EditSomeText());
	}
	public EditSomeText()
	{
		Title = "Edit Some Text";

		//TextBox를 생성
		txtbox = new TextBox();
		txtbox.AcceptsReturn = true;
		txtbox.TextWrapping = TextWrapping.Wrap;
		txtbox.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
		txtbox.KeyDown += TextBoxOnKeyDown;
		Content = txtbox;

		//텍스트 파일을 연다. 
		try
		{
			txtbox.Text = File.ReadAllText(strFileName);
		}catch
		{
		}
	
		//TextBox의 캐럿을 지정하고, 입력 포커스를 준다. 
		txtbox.CaretIndex = txtbox.Text.Length;
		txtbox.Focus();
	}
	protected override void OnClosing(CancelEventArgs args)
	{
		try
		{
			Directory.CreateDirectory(Path.GetDirectoryName(strFileName));
			File.WriteAllText(strFileName, txtbox.Text);
		}catch(Exception exc)
		{
			MessageBoxResult result = MessageBox.Show("File could not be save: " + exc.Message +
				"\nClose program anyway?", Title, MessageBoxButton.YesNo, MessageBoxImage.Exclamation);
			args.Cancel = (result == MessageBoxResult.No);
		}
	}
	void TextBoxOnKeyDown(object sender, KeyEventArgs args)
	{
		if(args.Key == Key.F5)
		{
			txtbox.SelectedText = DateTime.Now.ToString();
			txtbox.CaretIndex = txtbox.SelecteionStart + txtbox.SelecteionLength;
		}
	}
}

이 프로그램에서는 분리된 로컬 저장소(local isolated storage)라고 부르는 영역에 파일의 위치와 이름을 정의했다. 생성자에 있는 정적 File.ReadAllText 메소드에서 파일을 열고, 저장은 정적 File.WriteAllText 메소드에서 한다. KeyDown 이벤트에 대한 이벤트 핸들러도 설치해서 F5 키를 누르면 날짜와 시간을 넣게 했다. 

RichTextBox는 텍스트에 다양한 글자와 문단 서식이 지원되므로 TextBox 보다 훨씬 복잡하다. RichTextBox 와 비슷한 이전의 윈도우 컨트롤을 알고 있다면 자연스럽게 서식있는 텍스트 형식(RTF, Rich Text Format)으로 텍스트가 저장될 것이라고 짐작할 것이다. 서식있는 텍스트 형식은 1980년대 중반부터 시작됐으며, 다른 여러 워드프로세서 프로그램 사이에서 데이터를 주고받을 수 있게 할 목적으로 만들어졌다. RichTextBox 의 WPF 버전은 분명 일반 텍스트 형식은 물론이고 RTF도 지원하지만, 그 외에도 WPF에서 지원하는 XAML(Extensible Application Markup Language)의 부분 집합으로 XML기반 파일 형식도 지원한다. 

다음 프로그램은 표준적인 파일 열기와 저장 대화상자를 사용한다. 이는 Microsoft.Win32네임스페이스에 있다. 메뉴는 아직 없어서 Ctrl + O 와 Ctrl + S를 눌러서 대화상자를 호출한다. 이 기능은 약간의 문제가 있다. RichTextBox가 모든 키 누름을 스스로 처리하기 때문이다. 그래서 KeyDown 이벤트에 대한 핸들러를 붙여도 아무 것도 얻을 수가 없다. 

이에 대한 해결책은 9장에서 보게될 기법이다. 키보드, 마우스 ,스타일러스 펜의 이벤트는 실제로 preview 이벤트의 형태로 Window에서 먼저 발생된다. 그래서 키보드 누름이 RichTextBox에서 도달하기 전에 미리 살펴볼 수 있다. 다음 프로그램에서는 OnPreviewKeyDown메소드를 오버라이딩 했다. 이 메소드에서 Ctrl + O나 Ctrl + S를 감지하게 되면 그에 맞는 대화상자를 출력하고, 이벤트 인자의 Handled 프로퍼티를 true로 만든다. 이는 해당 이벤트가 처리됐음을 알려서 키 누름이 RichTextBox로 가지 못하게 한다. 이 프로그램에는 메뉴나 툴바가 없기 때문에 텍스트 서식을 변경하는 것도 키보드로 한다. Ctrl + I, Ctrl + U, Ctrl + B는 기울임꼴, 밑줄, 굵게에 해당하는 명령이다. 

using Microsoft.Win32;
using System;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Window.Documents;
using System.Windows.Input;
using System.Windows.Media;


public class EditSomeRichText : Window
{
	RichTextBox txtbox;
	string strFilter = "Document Files(*.xaml) | *.xaml|All files (*.*) | *.*";
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new EditSomeRichText());
	}
	public EditSomeRichText()
	{
		Title = "Edit Some Rich Text";
		
		txtbox = new RichTextBox();
		txtbox.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
		Content = txtbox;

		txtbox.Focus();
	}
	protected override void OnPreviewTextInput(TextCompositionEventArgs args)
	{
		if(args.ControlText.Length > 0 && args.ControlText[0] == '\x0F')
		{
			OpenFileDialog dlg = new OpenFileDialog();
			dlg.CheckFileExists = true;
			dlg.Filter = strFilter;

			if((bool)dlg.ShowDialog(this))
			{
				FiowDocument flow = txtbox.Document;
				TextRange range = new TextRange(flow.ContentStart, flow.ContentEnd);
				Stream strm = null;
		
				try
				{
					strm = new FileStream(dlg.FileName, FileMode.Open);
					range.Load(strm, DataFormats.Xaml);
				}catch(Exception exc)
				{
					MessageBox.Show(exc.Message, Title);
				}finally
				{
					if(strm != null)
						strm.Close();
				}
				args.Handled = true;
			}
			if(args.ControlText.Length > 0 && args.ControlText[0] == '\x13')
			{
				SaveFileDialog dlg = new SaveFileDialog();
				dlg.Filter = strFilter;

				if((bool)dlg.ShowDialog(this))
				{
					FlowDocument flow = txtbox.Document;
					TextRange range = new TextRange(flow.ContentStart, flow.ContentEnd);
					Stream strm = null;
					try
					{
						strm = new FileStream(dlg.FileName, FileMode.Create);
						range.Save(strm, DataFormats.Xaml);
					}catch(Exception exc)
					{
						MessageBox.Show(exc.Message, Title);
					}
					finally
					{
						if(strm != null)
							strm.Close();
					}
					args.Handled = true;
				}
				base.OnPreviewTextInput(args);
			}
		}
	}
}


서식이 있는 텍스트는 Document 프로퍼티를 통해서 RichTextBox로 들어가고 나온다. Document 프로퍼티는 FlowDocument 타입이며, 다음 구문은 전체 도큐먼트를 애워싸는 TextRange 객체를 생성한다. 

TextRange range = new TextRange(flow.ContentStart, flow.ContentEnd);

TextRange 클래스에는 Load와 Save라는 두 개의 메소드가 정의돼 있다. 첫 번째 인자는 Stream이며, 두 번째 인자는 원하는 데이터 형식(format)을 문자열로 지정한다. 그런데 두 번째 인자에는 DataFormats 클래스의 정적 멤버(문자열을 반환)를 사용하는 것이 가장 쉽다. 

RichTextBox에서 DataFormats.Text, DataFormats.Rtf, DataFormats.Xaml, DataFormats.XamlPackage를 사용할 수 있다. DataFormats.XamlPackage로 하면 도큐먼트에 필요한 바이너리 리소스(binary resources)를 모두 포함한 ZIP파일로 입출력한다. 이 프로그램에서는 DataFormats.Xaml을 대입하는 걸로 하드 코딩돼 있다. WPF에서의 도큐먼트 형식에 대해 잠깐이라도 보고 싶다면 이 파일들을 보면 될 것이다 

창에 단 하나의 객체만을 가지고도 놀랍고 유용한 많은 프로그램을 만들수 있을 것이라고 확신한다. 그러나 저자는 더 이상 생각나는 것이 없다. 이제 여러 개의 컨트롤을 어떻게 창에 추가하는지에 대해서 알아볼 차례가 왔다. 