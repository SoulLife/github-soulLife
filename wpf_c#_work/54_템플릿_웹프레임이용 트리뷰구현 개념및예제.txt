<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:rp="clr-namespace:Petzold.CircleTheButtons" x:Class="Petzold.EmployeeWheel.EmployeeWheel" Title="Employee Wheel">

	<Window.Resources>
		<XmlDataProvider x:key="emps" Source="Employees.xml" XPath="Employees" />
	</Window.Resources>

	<Grid>
		<ListBox Name="lstbox" HorizontalAlignment="Center" VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource emps},
			XPath=Employee}" SelectedValuePath="Face">

			<!-- 항목을 보여주기 위해 사용된 패널 -->
			<ListBox.ItemsPanel>
				<ItemsPanelTemplate>
					<rp:RadialPanel Orientation="ByHeight" />
				</ItemsPanelTemplate>
			</ListBox.ItemsPanel>

			<!-- 각 항목을 보여주기 위해 사용된 템플릿 -->
			<ListBox.ItemTemplate>
				<DataTemplate>
					<DockPanel Margin="3" >
						<Image DockPanel.Dock="Right" Stretch="None" Source="{Binding XPath=Face}" />
						<UniformGrid Rows="3" VerticalAlignment="Center" Margin="12">
							<TextBlock FontSize="16pt" TextAlignment="Center" Text="{Binding XPath=@Name}" />
							<TextBlock FontSize="12pt" TextAlignment="Center" Text="{Binding XPath=BirthDate}" />
							<TextBlock Name="txtblkHanded" FontSize="12pt" TextAlignment="Center" Text="Right-Handed" />
						</UniformGrid>
					</DockPanel>

					<!-- 왼손잡이를 보여주기 위한 DataTrigger -->
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding XPath=LeftHanded}" Value="True">
							<Setter TargetName="txtblkHanded" Property="Text" Value="Left-Handed" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</ListBox.ItemTemplate>
		</ListBox>
		<!-- 가운데 Image는 ListBox에서 선택된 이미지를 보여줌 -->
		<Image HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" 
			Source="{Binding ElementName=lstbox, Path=SelectedValue}" />
	</Grid>
</Window>

Resources 절은 XPath가 Elployees인 Employees.xml 파일을 참조하는 XmlDataProvider 객체를 포함한다. 또한 ListBox의 ItemsSource는 Employee로 설정된 XPath로 그 리소스와 바인딩한다. ListBox의 시작 태그 다음에는 ListBox의 ItemsPanel 프로퍼티가 항목을 보여주기 위해 패널을 RadialPanel로 정의한다. 

ListBox의 ItemTemplate 프로퍼티는 각 Employee 노드가 어떻게 보여질지를 정의한다. Image 의 Source 프로퍼티와 각 TextBlock의 Text 프로퍼티는 XPath 프로퍼티로 모두 바인딩돼있다. Employee 노드의 하위 노드는 XPath 프로퍼티가 간단히 노드의 이름을 참조한다. 

다음에 Image 엘리먼트를 위한 바인딩이 있다. 

Source="{Binding XPath=Face}"

Employees.xml 파일은 BirthDate, Face, LeftHanded를 위한 하위 노드를 가지고 있지만 Name은 Employee 엘리먼트의 속성이다. XML 데이터의 속성을 참조하기 위해서는 반드시 속성 이름 앞에 @ 기호를 붙여야 한다. 

Text="{Binding XPath=@Name}"

이 프로그램은 LeftHanded 값에 따라 항목을 서로 다른 형식으로 보여주지는 않는다. 대신에 각 항목은 "Right-Handed"나 "Left-Handed"와 같은 텍스트를 보여주며, TextBlock은 기본적으로 "Right-Handed"를 보여주게 된다. 

<TextBlock Name="txtblkHanded" FontSize="12pt" TextAlignment="Center" Text="Right-Handed" />

또한 DataTemplate은 Triggers절을 포함하는데, LeftHanded 엘리먼트가 true이면 TextBlock의 Text 프로퍼티는 Left-Handed로 설정된다. 

<DataTrigger Binding="{Binding XPath=LeftHanded}" Value="True">
	<Setter TargetName="txtblkHanded" Property="Text" Value="Left-Handed" />
</DataTrigger>

마지막 EmployeeWheelApp.xaml 애플리케이션 정의 파일은 EmployeeWheel 프로젝트를 완성한다. 
<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.EmployeeWheel.EmployeeWheelApp" StartupUri="EmployeeWheelWindow.xaml" />

DataTemplate을 상속받은 유일한 클래스는 HierarchicalDataTemplate이다. 이름이 말해 주듯이 이 클래스는 Menu나 (더 흔히)TreeView와 연관된 계층적인 데이터를 보여주는데 데사용된다.25장 앞 부분의 AutoTemplateSelection.xaml 파일은 데이터 타입에 적절한 DataTemplate을 선택해 데이터를 보여주었다. 이 기능은 서로 다른 타입의 데이터 항목을 보여주기 위해 다수의 HierarchicalDataTemplate 정의를 사용하는 데 있어서 핵심적인 기술이다. 

다음의 스탠드얼론 XAML 파일은 19세기 영국 작가와 그들의 책을 명시한 XML 데이터 절을 포함한다. Author 엘리먼트는 Name속성과 BirthDate, DeathDate, Books라는 이름의 자식이 있다. 또한 Books 엘리먼트는 다수의 Book 이라는 자식을 가지며, 각 Book 엘리먼트는 Title속성과 PubDate(출판일)속성이 있다. 다음 프로젝트는 이 데이터를 TreeView컨트롤로 보여줄 것이다. 

<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Title="Authors and Their Books">
	<Page.Resources>

		<!-- XML 데이터 -->
		<XmlDataProvider x:Key="data" XPath="Authors">
			<x:Data>
				<Authors xmlns="">
					<Author Name="Jane Austen">
						<BirthDate>1775</BirthDate>
						<DeathDate>1817</DeathDate>
						<Books>
							<Book Title="Sense and Sensibility">
								<PubDate>1811</PubDate>
							</Book>
							<Book Title="Pride and Prejudice">
								<PubDate>1813</PubDate>
							</Book>
						</Books>
					</Author>
					<Author Name="George Eliot">
						<BirthDate>1819</BirthDate>
						<DeathDate>1880</DeathDate>
						<Books>
							<Book Title="Adam Bede">
								<PubDate>1859</PubDate>
							</Book>
							<Book Title="Middlemarch">
								<PubDate>1872</PubDate>
							</Book>
						</Books>
					</Author>
					<Author Name="Anthony Trollope">
						<BirthDate>1815</BirthDate>
						<DeathDate>1882</DeathDate>
						<Books>
							<Book Title="Barchester Towers">
								<PubDate>1857</PubDate>
							</Book>
							<Book Title="The Way We Live Now">
								<PubDate>1875</PubDate>
							</Book>
						</Books>
					</Author>
				</Authors>
			</x:Data>
		</XmlDataProvider>

		<!-- Author 엘리먼트를 위한 템플릿 -->
		<HierarchicalDataTemplate DataType="Author" ItemsSource="{Binding XPath=Books/Book}">
			<StackPanel Orientation="Horizontal" TextBlock.FontSize="12pt">
				<TextBlock Text="{Binding XPath=@Name}" />
				<TextBlock Text=" (" />
				<TextBlock Text="{Binding XPath=BirthDate}" />
				<TextBlock Text="-" />
				<TextBlock Text="{Binding XPath=DeathDate}" />
				<TextBlock Text=")" />
			</StackPanel>
		</HierachicalDataTemplate>

		<!-- Book 엘리먼트를 위한 템플릿 -->
		<HierarchicalDataTemplate DataType="Book">
			<StackPanel Orientation="Horizontal" TextBlock.FontSize="10pt" >
				<TextBlock Text="{Binding XPath=@Title}" />
				<TextBlock Text=" (" />
				<TextBlock Text="{Binding XPath=PubDate}" />
				<TextBlock Text=")" />
			</StackPanel>
		</HierarchicalDataTemplate>
	</Page.Resources>

	<!-- TreeView 컨트롤 -->
	<TreeView ItemsSource="{Binding Source="{StaticResource data}, XPath=Author}" />
</Page>

이 파일을 맨 아래의 TreeView 컨트롤부터 분석해보자. ItemsSource 프로퍼티는 data라는 키를 가진 리소으와 바인딩되었는데, 이것이 Resources 절의 시작 부분에서 정의된 XmlDataprovider 객체이다. 이 XmlDataProvider는 Authors 라는 XPath 프로퍼티를 가지며, TreeView의 ItemsSource 바인딩은 Author라는 XPath를 가진다. 

양자택일로 이 XPath 프로퍼티의 Authors/Author 중에 하나를 정의하고 하나는 제외할 수 도 있다. 어떤 방법을 쓰든지 간에 TreeView 상의 최상위 레벨 항목은 XML 데이터로부터 얻은 세 Author 엘리먼트가 될 것이다. 

어떻게 이 Author 엘리먼트가 표시될 수 있을까? TreeView 컨트롤은 Author의 DataType으로 DataTemplate나 HierarchicalDataTemplate을 위한 리소스를 검색하는데, Resources 절에서 첫 번째로 일치한 HierarchicalDataTemplate을 찾는다. 이 템플릿은 항목을 보여주는 방법을 설명한 비주얼 트리를 포함하는데, 6개의 TextBlock 엘리먼트는 12포인트의 폰트 크기로 Author 엘리먼트의 Name 속성을 보여주며, 그 뒤에 대시로 구분된 BirthDate와 DeathDate 엘리먼트를 괄호 안에 넣어 보여준다. 이 엘리먼트와 속성은 Binding 을 사용하고 있다는 사실을 기억하자. 따라서 템플릿은 형식을 알맞게 맞추기 위한 데이터 컨버터를 참조할 수도 있으며, 이 데이터 컨버터를 사용하는 것은 날짜의 형식을 맞추기에는 괜찮은 방법이다. 하지만 지금 이 예제는 XAML 파일 하나로 끝내기 위해 컨버터는 생략한다. 

첫 번째 HierarchicalDataTemplate는 Author 엘리먼트를 어떻게 보여줄지를 명시할 뿐만 아니라 ItemsSource 프로퍼티에서 각 저자의 아래 표시될 항목의 XPath를 명시한다. 이 XPath가 Books/Book 이므로 TreeView 내의 각 저자 아래에는 그들의 저서가 항목으로 표시된다. 

이 Book 엘리먼트는 어떻게 표시될까? 두 번째 HierarchicalDataTemplate은 Book의 DataType을 가지고 있다. 이 경우 비주얼 트리는 Title 속성과 PubDate 엘리먼트를 보여주기 위한 4개의 TextBlock 엘리먼트를 가진다. 그리고 HierarchicalDataTemplate는 ItemsSource 프로퍼티를 가지지 않기 때문에 계층은 여기서 끝이 난다. 물론 이 계층은 더 깊어질 수 있다. 

계층적인 데이터를 XML에서 편하게 정의할 수 있지만 객체를 사용하는 것도 가능하다. Author 클래스가 Name, BirthDate, DeathDate와 Book 프로퍼티를 참조하는 List<Book>이 라는 타입의 Books 프로퍼티를 가진다면 바인딩은 XPath대신 Path를 사용하는 것 외에는 거의 동일하다. 또한 ItemsSource는 항상 컬렉션을 참조한다. 

실생활의 애플리케이션에서는 적어도 한 영역의 프로그램만큼은 계층 구조를 사용하는데, 그것은 바로 도움말이다. 도움말의 목록은 자주 이런 계층적 형태가 된다. 22장의 YellowPad 프로그램은 도움말 주제를 탐색하기 위해 목록을계층 구조로 정리한 도움말이 있다. 다음에서 이 도움말을 좀 더 보편화시켜 각자의 애플리케이션에서 사용하거나 개선할 수 있게 제공하려 한다. 

이 간단한 도움말 시스템을 사용할 프로젝트 내에서는 비주얼 스튜디오를 사용해 Help라는 디렉토리를 프로젝트에 만든다. 이 디렉토리는 반드시 빌드 작업을 Resource로 설정한 HelpContents.xml라는 이름의 파일을 포함해야 한다. 이 간단한 HelpContents.xml 파일은 다음에 나오며, 이 파일과 이 장이 끝날 때까지 나오는 모든 파일은 FlowDocumentHelp 프로젝트에서 확인할 수 있다. 

<HelpContents xmlns="">
	<Topic Header="Copyright Information" Source="Help/Copyright.xaml" />
	<Topic Header="Program Overview" Source="Help/Overview.xaml" />
	<Topic Header="The Menu">
		<Topic Header="The File Menu" Source="Help/FileMenu.xaml" />
		<Topic Header="The Help Menu" Source="Help/HelpMenu.xaml" />
	</Topic>
</HelpContents>

파일은 필수적인 Header 속성과 추가적인 Source 속성을 가진 내장된 Topic 엘리먼트로 구성된다. 일반적으로 Source 엘리먼트는 자식 토픽에 있는 Topic 엘리먼트에서는 생략되며, 각 Source 엘리먼트는 Help 디렉토리에 위치한 XAML 파일을 명시한다. 다음에 예제가 있다. 


<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	Title="Program Overview">
	<FlowDocumentReader>
		<FlowDocument>
			<Paragraph Style="{StaticResource Header}">
				Program Overview
			</Paragraph>
			<Paragraph >
				This file presents an overview of the program
			</Paragraph>
			<Paragraph >
				The description is probably several paragraphs in length.
				Perhaps it makes reference to the
				<Hyperlink NavigateUri="FileMenu.xaml">File Menu</Hyperlink>
				and
				<Hyperlink NavigateUri="HelpMenu.xaml">Help Menu</Hyperlink>
			</Paragraph>
		</FlowDocument>
	</FlowDocumentReader>
</Page>

각 도움말 토픽은 Page 엘리먼트가 있는 파일이며 FlowDocumentReader와 FlowDocument를 포함한다. 첫 번째 Paragraph 엘리먼트는 Header 라는 태그를 가진 Style을 참조하고 있다는 사실을 알 수 있을 것이다. Help 디렉토리 안에는 HelpStyles.xaml 이라는 이름의 파일이 있는데, 이것이 원하는 스타일을 정의한다. 

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Style TargetType="{x:Type FlowDocumentReader}">
		<Setter Property="ViewingMode" Value="Scroll" />
	</Style>

	<Style x:key="Center" TargetType="{x:Type Paragraph}">
		<Setter Property="TextAlignment" Value="Center" />
	</Style>
	
	<Style x:Key="ProgramName" TargetType="{x:Type Paragraph}" BasedOn="{StaticResource Center}">
		<Setter Property="FontSize" Value="32" />
		<Setter Property="FontStyle" Value="Italic" />
		<Setter Property="LineHeight" Value="24" />
	</Style>

	<Style x:Key="Header" TargetType="{x:Type Paragraph}" >
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="LineHeight" Value="16" />
	</Style>
</ResourceDictionary>

Generic이라는 이름의 애플리케이션을 위한 다음 애플리케이션 정의 파일은 Resources 절에서 이 파일을 참조한다. 

<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.Generic.GenericApp" StartupUri="GenericWindow.xaml">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergeDictionaries>
				<ResourceDictionary Source="Help/HelpStyles.xaml" />
			</Resourcedictionary.MergeDictionaries>
		</ResourceDictionary>
	</Application.Resources>
</Application>

이 애플리케이션 정의 파일은 HelpStyles.xaml 파일을 리소스로 포함할 뿐만 아니라 Help 메뉴가 있는 간단한 창의 레이아웃을 담당하는 GenericWindow.xaml 파일을 연다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.Generic.GenericWindow" Title="Generic">
	<DockPanel>
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="_Help">
				<MenuItem Header="_Help for Generic..." Command="Help" />
			</MenuItem>	
		</Menu>

		<TextBox AcceptsReturn="True" />
	</DockPanel>

	<Window.CommandBindigs>
		<CommandBinding Command="Help" Executed="HelpOnExecuted" />
	</Window.CommandBindgs>
</Window>

Help 메뉴의 HelpOnExecuted 이벤트 핸들러는 창의 코드 비하인드 파일에 위치한다. 
using Petzold.FlowDocumentHelp;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;


public partial class GenericWindow : Window
{
	public GenericWindow()
	{
		InitializeComponent();
	}
	void HelpOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		HelpWindow win = new HelpWindow();
		win.Owner = this;
		win.Title = "Help for Generic";
		win.Show();
	}
}

이제 마지막으로 도움말 정보를 보여주는 HelpWindow 클래스에 다다랐다. HelpWindow.xaml 파일은 Help 디렉토리에 위치하는 3개의 이미지 파일을 참조한다. 이 이미지는 주로 도움말의 목차에 쓰이는 것으로서, 비주얼 스튜디오와 함께 포함된 라이브러리에서 가져왓다. 다만 파일 형식을 아이콘에서 PNG 파일로 변환하는 것 때문에 이미지의 원래 이름을 변경했다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.FlowDocumentHelp.HelpWindow" Title="Help" Width="600" Height="500" WindowStartupLocation="CenterScreen" 
	ShowInTaskbar="False" >
	<Window.Resources>
		<XmlDataProvider x:key="data" Source="Help/HelpContents.xml" XPath="HelpContents" />

		<HierarchicalDataTemplate DataType="Topic" ItemsSource="{Binding XPath=Topic}">

			<!-- 각 TreeViewItem은 Image와 TextBlock -->
			<StackPanel Orientation="Horizontal">
				<Image Name="img" Source="Help/HelpImageQuestionMark.png" Margin="2" Stretch="None" />
				<TextBlock Text="{Binding XPath=@Header}" FontSize="10pt" VerticalAlignment="Center" />
			</StackPanel>

			<HierarchicalDataTemplate.Triggers>

				<!-- 닫힌 책 이미지를 자식이 있는 항목을 위해 사용 -->
				<DataTrigger Binding ="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Path=HasItmes}" 
					Value="True">
					<Setter TargetName="img" Property="Image.Source" Value="Help/HelpImageClosedBook.png" />
				</DataTrigger>

				<!-- 열린 책 이미지를 펼쳐진 항목을 위해 사용 -->
				<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Path=IsExpanded}" 
					Value="True" >
					<Setter TargetName="img" Property="Image.Source" Value="Help/HelpImageOpenBook.png" />
				</DataTrigger>
			</HierarchicalDataTemplate.Triggers>
		</HierarchicalDataTemplate>
	</Window.Resources>

	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="33*" />
			<ColumnDefinition Width="Auto" />
			<ColumnDefinition Width="67*" />
		</Grid.ColumnDefinitions>

		<!-- TrueeView 왼쪽의 콘텐츠 -->
		<TreeView Name="treevue" Grid.Column="0" ItemsSource="{Binding Source={StaticResource data}, XPath=Topic}" 
			SelectedValuePath="@Source" SelectedItemChanged="TreeViewOnSelectedItemChanged" />
		<!-- 가운데 GridSplitter -->
		<GridSplitter Grid.Column="1" Width="6" HorizontalAlignment="Center" VerticalAlignment="Stretch" />
		
		<!-- 오른쪽 Frame -->
		<Frame Name="frame" Grid.Column="2" Navigated="FrameOnNavigated" />
	</Grid>
</Window>

대충 파일의 처음 반은 Resources 절에 할당됐다. 나머지는 Window의 레이아웃인데, 3열의 Grid로 이루어져 있으며, 왼쪽은 TreeView이고, 오른쪽은 Frame 가운데는 GridSplitter로 구성돼 있다. 

Resources 절은 XmlDataProvider 엘리먼트로부터 시작되며, 이 XmlDataProvider 엘리먼트는 data라는 키로 HelpContents.xml 파일을 참조하고 HelpContents.xml 파일의 루트 엘리먼트인 HelpContents를 XPath로 하고 있다. 또한 두 DataTrigger 엘리먼트는 TreeView 항목에 적절한 이미지를 선택한다. 

파일의 아래 부분을 보면 TreeView 컨트롤은 ItemsSource 프로퍼티를 데이터와 바인딩했으며, SelectedValuePath 를 콘텐츠 파일의 Source 속성으로 설정했다. 원래는 Frame의 Source프로퍼티를 TreeView의 SelectedValue와 바인딩했는데, 그것은 생각만큼 원하는 기능을 제대로제공 하지 못했다. 따라서 이 두 컨트롤의 연결을 코드 비하인드 파일에서 하기로 결정했다. 

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Navigation;


public partial class HelpWindow
{
	//public 생성자
	public HelpWindow()
	{
		InitializeComponent();
	}
	public HelpWindow(string strTopic): this()
	{
		if(strTopic != null)
			frame.Source = new Uri(strTopic, UriKind.Relative);
	}
	//선택된 TreeView 항목이 바뀌면 Frame의 소스를 설정
	void TreeViewOnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> args)
	{
		if(treevue.SelectedValue != null)
			frame.Source = new Uri(treevue.SelectedValue as string, UriKind.Relative);
	}
	//Frame이 새로운 소스를 탐색하면 TreeView와 동기화
	void FrameOnNavigated(object sender, NavigationEventArgs args)
	{
		if(args.Uri != null && args.Uri.OriginalString != null && args.Uri.OriginalString.Length > 0)
		{
			FindItemToSelect(treevue, args.Uri.OriginalString);
		}
	}
	//항목 하나를 선택하기 위해 TreeView내의 항목을 검색
	bool FindItemToSelect(ItemsControl ctrl, string strSource)
	{
		foreach(object obj in ctrl.Items)
		{
			System.Xml.XmlElement xml = obj as System.Xml.XmlElement;
			string strAttribute = xml.GetAttribute("Source");
			TreeViewItem item = (TreeViewItem)ctrl.ItemContainerGenerator.ContainerFromItem(obj);
			//TreeViewItem이 Frame URI와 일치하면 항목 선택
			if(strAttribute != null && strAttribute.Length > 0 && strSource.EndsWith(strAttribute))
			{
				if( item != null && !item.IsSelected)
					item.IsSelected = true;
				return true;
			}
			//내장된 항목을 검색하기 위해 항목을 확장
			if( item != null)
			{
				bool isExpanded = item.IsExpanded;
				item.IsExpanded = true;
				if( item.HasItems && FindItemToSelect(item, strSource))
					return true;
				item.IsExpanded = isExpanded;
			}
		}
		return false;
	}
}

두번째 생성자는 HelpWindow 클래스를 사용하는 프로그램이 원하는 문서로 Frame 컨트롤을 초기화 할 수 있게 해준다. SelectedItemChanged 이벤트 핸들러는 TreeView에서 선택된 값을 가져와 Frame 내에 그것을 설정한다. 하지만 반대로 Frame에서 선택된 문서를 컨텐트 목록과 일치시키는 것은 약간 복잡하다. TreeView가 SelectedItem과 SelectedValue 프로퍼티를 정의하긴 하지만 이것은 읽기 전용이다. 따라서 TreeView에서 항목을 선택하기 위해서는 반드시 각 TreeViewItem에 IsSelected 프로퍼티를 설정해주어야 한다. 따라서 선택할 항목을 찾기 위해서는 항목 모두를 검색해야 할 필요가 있다. 필자는 아직도 손수 이런 작업을 해야 하는 것에 개발자로서의 존재 가치를 느끼며 기쁘게 작업한다. 바인딩이 강력하긴 하지만 실제 코드를 대신할 수 없는 경우도 있기 때문이다. 

25장의 긴 길이에도 불구하고 템플릿에 관한 내용은 아직 끝나지 않았다. 따라서 26장의 뒷부분에서는 ListBox에서 어떻게 항목을 묶고, 이 묶인 그룹의 제목을 어떻게 표시하는지에 대해 알아볼 것이다.