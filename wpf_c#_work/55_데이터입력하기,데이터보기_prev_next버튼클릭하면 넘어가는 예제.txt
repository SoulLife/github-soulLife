CHAPTER 26장 : 데이터 입력하기,데이터 보기
오랜 세월 동안 컴퓨터 프로그래머는 데이터를 입력하고, 수정하고, 검토하는 프로그램을 개발해왔다. 보통 그런 유형의 프로그램은 데이터를 입력할 수 있는 폼(form)형태로 만든다. 데이터 입력 폼은 데이터베이스의 각 필드를 표시하는 컨트롤들로 구성된다. 

유명 작곡가에 대한 데이터베이스를 관리한다고 생각해보자. 각 작곡가에 대한 이름(퍼스트 네임, 미들 네임, 라스트 네임), 생일, 사망일을 관리해야 한다. 생존해 있는 작곡가의 사망일은 null이 될 것이다. 첫 단계로 할일은 관리하고자 하는 데이터를 클래스로 정의하는 것이다. 이 클래스는 공개 프로퍼티(public property)를 가질 것이며, 공개된 각 프로퍼티는 데이터 필드 에 접근할 수 있는 인터페이스 역할을 할 것이다. 

이런 클래스는 INotifyPropertyChanged 인터페이스를 제공하는 것이 여러모로 유리하다. 어떤 클래스가 INotifyPropertyChanged 인터페이스를 제공한다는 것은 해당 클래스가 PropertyChangedEventHandler 위임자(delegate)규정에 따라 PropertyChanged 이벤트를 제공한다는 것을 말한다. PropertyChanged 이벤트는 클래스의 프로퍼티 값이 바뀔 때마다 발생해야 한다.

다음이 지금까지 말한 클래스에 대한 정의다. 


using System;
using System.ComponentModel;
using System.Xml.Serialization;


public class Person: INotifyPropertyChanged
{
	//PropertyChanged 이벤트 정의
	public event PropertyChangedEventHandler PropertyChanged;

	//private 필드
	string strFirstName = "<first name>";
	string strMiddleName = "";
	string strLastName = "<last name>";
	DateTime? dtBirthDate = new DateTime(1800, 1, 1);
	DateTime? dtDeathDate = new DateTime(1900, 12, 31);

	//public 프로퍼티
	public string FirstName
	{
		set
		{
			strFirstName = value;
			OnPropertyChanged("FirstName");
		}
		get { return strFirstName; }
	}
	public string MiddleName
	{
		set
		{
			strMiddleName = value;
			OnPropertyChanged("MiddleName");
		}
		get { return strMiddleName; }
	}
	public string LastName
	{
		set
		{
			strLastName = value;
			OnPropertyChanged("LastName");
		}
		get { return strLastName; }
	}

	[XmlElement(DataType="date")]
	public DateTime? BirthDate
	{
		set
		{
			dtBirthDate = value;
			OnPropertyChanged("BirthDate");
		}	
		get { return dtBirthDate; }
	}
	[XmlElement(DataType = "date")]
	public DateTime? DeathDate
	{
		set
		{
			dtDeathDate = value;
			OnPropertyChanged("DeathDate");
		}
		get { return dtDeathDate; }
	}

	//PropertyChanged 이벤트 발생
	protected virtual void OnPropertyChanged(string strPropertyName)
	{
		if(PropertyChanged != null)
			PropertyChanged(this, new PropertyChangedEventArgs(strPropertyName));
	}
}

이 클래스가 INotifyPropertyChanged 인터페이스를 제공하기 때문에 이 클래스의 프로퍼티는 데이터 바인딩에 소스로 참여할 수 있다. 하지만 의존 프로퍼티가 이 클래스의 프로퍼티를 뒷받침하지 않기 때문에 데이터 바인딩 타깃이 될 수는 없다. 보통의 경우 소스 역할만으로도 충분하다. 

OnPropertyChanged 메소드는 꼭 필요한 메소드는 아니지만 PropertyChanged 이벤트를 발생시키기에 좋은 자리를 제공해준다. INotifyPropertyChanged 인터페이스를 제공하는 대부분의 클래스들이 그런 메소드를 갖는다. 클래스를 정의하는 취향에 따라 OnPropertyChanged 메소드의 인자를 PropertyChangedEventArgs 타입으로 정의하기도 하고 필자가 제시한 방법으로 정의하기도 한다. 필자의 방법이 조금 더 간단하다. 

다음 단계는 데이터 입력 폼을 만드는 것이다. 이를 위해 Window나 Page를 이용할 수도 있지만 Panel을 이용하는 것이 가장 유연한 방법이다. 다음의 PersonPanel 클래스는 Grid를 이용해서 3개의 TextBox 컨트롤과 2개의 DatePicker 컨트롤을 표시한다(DatePicker 컨트롤은 이전 장의 CreateDatePciker 프로젝트에서 사용했다)TextBox 컨트롤은 퍼스트 네임, 미들 네임, 라스트 네임을 입력하기 위해 사용하고, DatePicker 컨트롤은 생일과 사망일을 입력하기 위해 사용한다. Label 컨트롤로 각 데이터 입력 컨트롤을 식별한다. 


<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:dp="clr-namespace:Petzold.CreateDatePicker" xmlns:src="clr-namespace:Petzold.SSingleRecordDataEntry" 
	x:Class="Petzold.SingleRecordDataEntry.PersonPanel">
	<Grid.Resources>
		<Style TargetType="{x:Type Label}">
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Margin" Value="12" />
		</Style>

		<Style TargetType="{x:Type dp:DatePicker}">
			<Setter Property="Margin" Value="12" />
		</Style>
	</Grid.Resources>

	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="Auto" />
		<ColumnDefinition Width="Auto" />
	</Grid.ColumnDefinitions>

	<Grid.RowDefinitions>
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
		<RowDefinition Height="Auto" />
	</Grid.RowDefinitions>

	<Label Grid.Row="0" Grid.Column="0" Content="_First Name: " />

	<TextBox Grid.Row="0" Grid.Column="1" Margin="12" Text="{Binding Path=FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

	<Label Grid.Row="1" Grid.Column="0" Content="_Middle Name: " />

	<TextBox Grid.Row="1" Grid.Column="1" Margin="12" Text="{Binding Path=MiddleName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

	<Label Grid.Row="2" Grid.Column="0" Content="_Last Name: " />

	<TextBox Grid.Row="2" Grid.Column="1" Margin="12" Text="{Binding Path=LastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

	<Label Grid.Row="3" Grid.Column="0" Content="_Birth Date: " />

	<dp:DatePicker Grid.Row="3" Grid.Column="1" Margin="12" HorizontalAlignment="Center" Date="{Binding Path=BirthDate, Mode=TwoWay}" />

	<Label Grid.Row="4" Grid.Column="0" Content="_Death Date: " />

	<dp:DatePicker Grid.Row="4" Grid.Column="1" Margin="12" HorizontalAlignment="Center" Date="{Binding Path=DeathDate, Mode=TwoWay}" />
</Grid>

3개의 TextBox 컨트롤이 자신의 Text 프로퍼티에 바인딩 정보를 표시하고 있다. 그리고 2개의 DatePicker 컨트롤이 자신의 Date 프로퍼티에 바인딩 정보를 표시하고 있다. 이들 바인딩 정보는 Path 프로퍼티와 Mode 프로퍼티, UpdateSourceTrigger 프로퍼티로 구성돼 있다. Path는 Person 클래스의 어느 프로퍼티에 바인딩할지를 지정한다. Mode는 동작 모드를 나타낸다. 여기서는 TwoWay라고 설정했다. 그래서 컨트롤의 값을 수정하면 데이터 소스의 값이 함께 바뀐다. UpdateSourceTrigger는 PropertyChanged라고 설정했다. PropertyChanged라고 설정했기 때문에 Text 프로퍼티의 값이 변경될 때마다 소스 데이터가 갱신된다. 
UpdateSourceTrigger를 기본값으로 두었다면 TextBox가 포커스를 잃을 때 소스 데이터가 갱신됐을 것이다. 

여기까지의 바인딩 정보는 데이터 소스를 명시하고 있지 않기 때문에 아직 불완전하다. 일반적으로 데이터 소스는 바인딩 정보의 Source 프로퍼티나 ElementName 프로퍼티에 지정한다. 데이터 소스를 명시하는 또 하나의 방법은 FrameworkElement의 DataContext 프로퍼티에 설정하는 것이다. 

DataContext 의 장점은 그 프로퍼티가 비주얼 트리를 통해 상속된다는 것이다. 이는 단순하지만 무척 유용하다. PersonPanel의 DataContext 프로퍼티를 Person 타입 객체로 설정하면 (트리에서 PersonPanel의 하위에 있는)TextBox와 DatePicker 컨트롤도 해당 Person 객체의 프로퍼티를 표시할 것이다. 그리고 사용자가 컨트롤에 입력하는 데이터도 해당 Person 객체에 반영될 것이다 

이처럼 패널의 DataContext 프로퍼티를 이용해서 특정 객체와의 바인딩 관계를 한 번만 설정하면 해당 패널 위의 여러 컨트롤과 해당 특정 객체가 갖고 있는 여러 프로퍼티 사이의 바인딩 관계가 한꺼번에 설정된다. 

PersonPanel.cs 코드 비하인드 파일은 다음과 같이 간단하다. 

public partial class PersonPanel
{
	public PersonPanel()
	{
		InitializeComponent();
	}
}

Person 객체와 PersonPanel 위에 있는 컨트롤들 사이의 바인딩 메커니즘을 좀 더 분명하게 이해하기 위해 26장의 첫 번째 프로젝트는 단 한개의 Person 객체만을 파일로부터 읽고 쓴다. 그래서 프로젝트의 이름이 SingleRecordDataEntry다. 이 프로그램에 의해 생성되는 데이터베이스는 단 한개의 Person 타입 레코드만 갖는다.

다음은 입력 패널 PersonPanel을 포함하고 있는 SingleRecordDataEntry 프로젝트의 프로그램 창에 대한 정의다. 이 프로젝트는 New, Open, Save 메뉴 항목을 포함하고 있다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:pnl="clr-namespace:Petzold.SingleRecordDataEntry" x:Class="Petzold.SingleRecordDataEntry.SingleRecordDataEntry" 
		Title="Single-Record Data Entry" SizeToContent="WidthAndHeight" ResizeMode="CanMinimize">
	<DockPanel Name="dock">
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="_File">
				<MenuItem Header="_New" Command="New" />
				<MenuItem Header="_Open..." Command="Open" />				
				<MenuItem Header="_Save..." Command="Save" />
			</MenuItem>
		</Menu>

		<!-- 정보를 입력하기 위한 PersonPanel -->
		<pnl:PersonPanel x:Name="pnlPerson" />
	</DockPanel>

	<Window.CommandBindings>
		<CommandBinding Command="New" Executed="NewOnExecuted" />
		<CommandBinding Command="Open" Executed="OpenOnExecuted" />
		<CommandBinding Command="Save" Executed="SaveOnExecuted" />
	</Window.CommandBindings>
</Window>

코드를 통해 알 수 있듯이 File 메뉴에 포함된 3개의 메뉴 항목에는 Executed 핸들러가 커맨드 바인딩에 의해 연결돼 있다. DockPanel 내부에 위치하고 있는 PersonPanel 객체에는 pnlPerson이라는 이름을 붙였다. 

3개의 Executed 이벤트 핸들러는 SingleRecordDataEntry 프로젝트의 코드 비하인드 파일에 존재한다. 

using Microsoft.Win32;
using System;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Xml.Serialization;

public partial class SingleRecordDataEntry : Window
{
	const string strFilter = "Person XML files (*.PersonXml)|" + "*.PersonXml|All files (*.*)|*.*";
	XmlSerializer xml = new XmlSerializer(typeof(Person));

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new SingleRecordDataEntry());
	}
	public SingleRecordDataEntry()
	{
		InitializeComponent();

		//File New 명령을 시뮬레이션
		ApplicationCommands.New.Execute(null, this);

		//panel의 첫 번째 TextBox에 포커스를 줌
		pnlPerson.Children[1].Focus();
	}
	//각 메뉴 항목에 대한 이벤트 핸들러
	void NewOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		pnlPerson.DataContext = new Person();
	}
	void OpenOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		OpenFileDialog dlg = new OpenFileDialog();
		dlg.Filter = strFilter;
		Person pers;

		if((bool)dlg.ShowDialog(this))
		{
			try
			{
				StreamReader reader = new StreamReader(dlg.FileName);
				pers = (Person)xml.Deserialize(reader);
				reader.Close();
			}catch(Exception exc)
			{
				MessageBox.Show("Could not load file: " + exc.Message, Title, MessageBoxButton.OK,MessageBoxImage.Exclamation);
				return;
			}
			plnPerson.DataContext = pers;
		}
	}
	void SaveOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		SaveFileDialog dlg = new SaveFileDialog();
		dlg.Filter = strFilter;

		if((bool)dlg.ShowDialog(this))
		{
			try
			{
				StreamWriter writer = new StreamWriter(dlg.FileName);
				xml.Serialize(writer, pnlPerson.DataContext);
				writer.Close();
			}catch(Exception exc)
			{
				MessageBox.Show("Could not save file: " + exc.Message, Title, MessageBoxButton.OK,MessageBoxImage.Exclamation);
				return;
			}
		}
	}
}

New 명령은 Person 타입의 객체를 새로 만들고 이를 PersonPanel의 DataContext프로퍼티로 설정한다.(이 클래스의 생성자도 New 명령을 시뮬레이션하고 있다). 프로그램을 실행하면 Person 객체의 기본값이 PersonPanel에 표시되는 것을 볼 수 있을 것이다. 

Open 명령과 Save 명령은 각기 OpenFileDialog와 SaveFileDialog를 표시한다. 이 대화상자는 클래스의 첫 부분에서 정의한 strFilter 문자열을 공유하며, 기본적으로 PersonXml파일 타입을 액세스 한다. OpenOnExecuted 메소드와 SaveOnExecuted 메소드도 클래스의 첫 부분에서 정의한 XmlSerializer 객체를 공유한다. XmlSerializer 객체는 Person 객체를 XML 포맷으로 저장하는 역할을 한다. SaveOnExecuted 메소드는 Serialize 메소드를 통해 Person 객체를 XML 파일로 변환한다. 이때 변환되는 Person 객체는 PersonPanel의 DataContext 프로퍼티로 지정돼 있는 객체이다. OpenOnExecuted 메소드는 이전에 저장한 파일을 읽어서 Deserialize 메소드를 통해 이를 Person 객체로 변환한다. 그리고 변환된 객체를 PersonPanel의 DataContext 프로퍼티로 지정한다. 

SingleRecordDataEntry 프로그램으로 여러 개의 파일을 저장할 수는 있지만 각 파일에는 단 한개의 Person 객체만 포함된다. 파일은 다음과 같은 모습을 띈다. 

SingleRecordDataEntry 프로그램으로 여러 개의 파일을 저장할 수는 있지만 각 파일에는 단 한개의 Person 객체만 포함된다. 파일은 다음과 같은 모습을 띤다. 

<?xml version="1.0" encoding="utf-8"?>
<Person xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<FirstName>Johannes</FirstName>
	<MiddleName />
	<LastName>Brahms</LastName>
	<BirthDate>1833-05-07</BirthDate>
	<DeathDate>1897-04-03</DeathDate>
</Person>

이제 다음 할 일은 여러 개의 Person 객체를 집합으로 관리하는 것이다. 닷넷 프레임워크에는 객체의 컬렉션을 저장할 수 있는 여러 클래스가 구비돼 있다. 간단한 처리만 필요할 경우 필자는 List 제너릭 클래스를 사용한다. 하지만 데이터베이스를 다룰 필요가 있을 경우에는 System.Collections.ObjectModel 네임스페이스에 정의돼 있는 ObservableCollection 제너릭 클래스를 사용하는 것이 유리하다. Person 객체의 컬렉션은 다음과 같이 정의할수 있다. 

ObservableCollection<Person> people = new ObservableCollection<Person>();

ObservableCollection 클래스를 계승해서 새로운 클래스를 정의할 수도 있다(People이라고 이름 짓자)
public class People : ObservableCollection<Person>
{
}

그리고 People 타입의 객체를 생성한다
People people = new People();

두번째 방법의 장점은 People 객체에 필요한 메소드를 추가해 넣을 수 있다는 점이다. 즉 People 객체를 파일에서 읽거나 저장하는 메소드를 추가해 넣을 수 있다(다음에 소개할 MultiRecordDataEntry 프로젝트는 이 방식을 이용한다.)

ObservableCollection은 제너릭 클래스이기 때문에 Person 타입의 새로운 객체를 컬렉션에 추가할 때 캐스팅을 하지 않아도 된다. 
		
people.Add(new Person());

그리고 컬렉션에 접근할 때 인덱스를 이용할 수도 있다. 이 경우 결과는 Person 타입 객체다. 

Person person = people[5];

위에서 제시한 2 가지 편리한 점은 모든 제너릭 컬렉션 클래스에서 찾아볼 수 있는 것이지만 ObservableCollection은 PropertyChanged와 CollectionChanged라는 중요한 이벤트 2가지를 추가로 정의한다. 

PropertyChanged 이벤트는 컬렉션에 포함된 어느 멤버의 프로퍼티가 바뀔 때마다 발생한다. 물론 이것은 ObservableCollection에 포함된 멤버가 INotifyPropertyChanged 인터페이스를 제공하며, 해당 멤버가 자신의 프로퍼티가 바뀔 때마다 스스로 PropertyChanged 이벤트를 발생시킬 때만 유효한 설명이다(다행히 Person 클래스는 이 조건을 만족한다) ObservableCollection 은 컬렉션에 포함된 각 멤버가 발생시키는 PropertyChanged 에 대한 이벤트 핸들러를 갖고 있으며, 여기서 자신의 PropertyChanged 이벤트를 발생시킨다. 

CollectionChanged 이벤트는 컬렉션 자체가 바뀔 때마다 발생한다. 즉 항목이 컬렉션에 추가되거나 삭제되거나 교체되거나 컬렉션 안에서의 위치가 옮겨질 때 발생한다. 

MultiRecordDataEntry 프로젝트는 SingleRecordDataEntry 프로젝트의 Person.cs, PersonPanel.xaml, PersonPanel.cs 파일을 포함하고 있다. 뿐만 아니라 25장에서 살펴본 CreateDatePicker프로젝트의 DatePicker 파일들도 포함하고 있다. People.cs 파일은 이 프로젝트에서 처음 선보이는 3개의 새로운 파일 중 하나다. 이 파일은 ObservableCollection 클래스로부터 파생된 People 클래스를 정의하고 있다. 이 클래스는 Person 객체들의 컬렉션을관리하는 역할을 한다. 

using Microsoft.Win32;
using Petzold.SingleRecordDataEntry;
using System;
using System.IO;
using System.Collections.ObjectModel;
using System.Windows;
using System.Xml.Serialization;


public class People : ObservableCollection<Person>
{
	const string strFilter = "People XML files (*.PeopleXml)|" + "*.PeopleXml|All files (*.*)|*.*";

	public static People Load(Window win)
	{
		OpenFileDialog dlg = new OpenFileDialog();
		dlg.Filter = strFilter;
  		People people = null;
		if((bool)dlg.ShowDialog(win))
		{
			try
			{
				StreamReader reader = new StreamReader(dlg.FileName);
				XmlSerializer xml = new XmlSerializer(typeof(People));
				people = (People)xml.Deserialize(reader);
				reader.Close();
			}catch(Exception exc)
			{
				MessageBox.Show("Could not load file: " + exc.Message, win.Title, MessageBoxButton.OK, MessageBoxImage.Exclamation);
				people = null;
			}
		}
		return people;
	}
	public bool Save(Window win)
	{
		SaveFileDialog dlg = new SaveFileDialog();
		dlg.Filter = strFilter;
		if((bool)dlg.ShowDialog(win))
		{
			try
			{
				StreamWriter writer = new StreamWriter(dlg.FileName);
				XmlSerializer xml = new XmlSerializer(GetType());
				xml.Serialize(writer, this);
				writer.Close();
			}catch(Exception exc)
			{
				MessageBox.Show("Could not save: " + exc.Message,win.Title, MessageBoxButton.OK, MessageBoxImage.Exclamation);
				return false;
			}		
		}
		return true;
	}
}

이 클래스도 Load 메소드와 Save 메소드를 갖는다. 이 메소드들은 OpenFileDialog 대화상자나 SaveFileDialog 대화상자를 표시하고, XmlSerializer를 이용해서 People 타입 객체를 파일로부터 읽거나 저장한다. Load 메소드가 People 타입 객체를 반환하는 정적 메소드인 것을 눈여겨 보자. Load 메소드와 Save 메소드는 모두 Window 타입 객체를 인자로 전달받는 다. 이 메소드들은 인자로 전달받은 Window 객체를 ShowDialog 메소드의 인자로 사용한다. 그리고 파일 입출력 중에 문제가 발생하면 호출하는 MessageBox.Show 메소드의 타이틀 인자로도 사용한다(People 클래스에 XmlSerializer 코드를 추가하는 것은 의미 있다고 생각하지만 보통의 경우라면 대화상자 코드는 추가하지 않았을 것이다. 대화상자를 표시하지 않고 파일을 읽거나 써야 할 경우가 있을 것이기 때문이다. People 클래스에 대화상자를 추가한 것은 이번 장에서 소개하는 다른 프로그램들의 편의를 위해서였다. )

MultiRecordDataEntry 프로그램은 여러 사람의 정보가 담긴 파일을 사용하지만 정보를 표시할 때는 PersonPanel을 이용해서 한 사람의 정보를 표시한다. 이 때문에 프로그램에 데이터 베이스를 탐색하는 기능을 추가해야 한다. 한 가지 접근방법은 다음 레코드로 이동하는 버튼 이전 레코드로 이동하는 버튼, 처음 레코드로 이동하는 버튼, 마지막 레코드로 이동하는 버튼을 두고 ,버튼 선택에 따라 현재(current)레코드를 관리하는 것이다. 

대부분의 경우 파일에 있는 레코드만 사용하고 싶지는 않을 것이다. 새로운 레코드를 추가하거나 기존 레코드를 삭제하는 기능도 필요하다. 그래서 레코드 이동 버튼 이외에 Add New 버튼과 Delete 버튼이 필요하다. 

다음 MultiRecordDataEntry.xaml 파일은 우리에게 친숙한 New, Open, Save 메뉴가 포함된 프로그램 창의 레이아웃을 정의한다. 프로그램 창의 나머지 부분에는 PersonPanel과 방금 설명한 6개의 버튼이 있다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:pnl="clr-namespace:Petzold.SingleRecordDataEntry" x:Class="Petzold.MultiRecordDataEntry.MultiRecordDataEntry" Title="Multi-Record Data Entry"
	SizeToContent="WidthAndHeight" ResizeMode="CanMinimize">
	<DockPanel Name="dock">
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="Top">
				<MenuItem Header="_New" Command="New" />
				<MenuItem Header="_Open..." Command="Open" />
				<MenuItem Header="_Save..." Command="Save" />
			</MenuItem>
		</Menu>
		<StackPanel>
			<!-- 데이터를 입력할 PersonPanel -->
			<pnl:PersonPanel x:Name="pnlPerson" />
			<!-- 탐색, 추가, 삭제를 위한 버튼들 -->
			<UniformGrid Columns="6" HorizontalAlignment="Center">
				<UniformGrid.Resources>
					<Style TargetType="{x:Type Button}">
						<Setter Property="Margin" Value="6" />
					</Style>
				</UniformGrid.Resources>
				<Button Name="btnFirst" Content="First" Click="FirstOnClick" />
				<Button Name="btnPrev" Content="Previous" Click="PrevOnClick" />
				<Button Name="btnNext" Content="Next" Click="NextOnClick" />
				<Button Name="btnLast" Content="Last" Click="LastOnClick" />
				<Button Name="btnAdd" Content="AddNew" Click="AddOnClick" />
				<Button Name="btnDel" Content="Delete" Click="DelOnClick" />
			</UniformGrid>
		</StackPanel>
	</DockPanel>
	<Window.CommandBindings>
		<CommandBinding Command="New" Executed="NewOnExecuted" />
		<CommandBinding Command="Open" Executed="OpenOnExecuted" />
		<CommandBinding Command="Save" Executed="SaveOnExecuted" />
	</Window.CommandBindings>
</Window>


다음에 이어지는 MultiRecordDataEntry.cs 파일이 프로그램 창을 완성한다. 프로그램 창은 3개의 메뉴 항목과 6개의 버튼에 대한 이벤트 핸들러를 갖고 있다. 이 클래스는 2개의 데이터 필드를 관리한다. 현재 로드된 파일을 나타내는 People 타입 객체와 index라는 정수 타입의 변수이다. 이 index 변수는 PersonPanel이 현재 표시하고 있는 레코드의 인덱스를 나타낸다. 이 변수는 People 컬렉션 객체의 인덱스를 나타내며, First, Pervious, Next, Last 버튼의 이벤트 핸들러에서 변경된다. 

People 클래스에 Load 메소드와 Save 메소드가 이미 존재하기 때문에 3개의 메뉴 항목에 대한 이벤트 핸들러를 쉽게 정의할 수 있다. New 메뉴 항목과 Open 메뉴 항목은 새로운 People 객체를 만들고 InitializeNewPeopleObject 메소드를 호출한다. 이 메소드는 index변수를 0으로 설정한다. People 객체에 레코드가 없다면(New 메뉴 항목을 선택했을 때가 그렇다), 이 메소드는Person 레코드 객체 한개를 생성해서 컬렉션에 추가한다. 모든 경우에 PersonPanel 의 DataContext 는 People 컬렉션의 첫 Person 객체로 설정된다. EnableAndDisableButtons 메소드는 버튼을 활성화시키는 역할을 한다. 현재 표시되고 있는 레코드가 처음 레코드가 아니라면 Previous 버튼을 활성화시키고, 현재 표시되고 있는 레코드가 마지막 레코드가 아니라면 Next 버튼을 활성화시킨다. 
	
using Petzold.SingleRecordDataEntry;
using System;
using System.Collections.Specialized;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public partial class MultiRecordDataEntry
{

	People people;
	int index;

	[STAThread]
	public static void Main()
	{
		Application app= new Application();
		app.Run(new MultiRecordDataEntry());
	}
	public MultiRecordDataEntry()
	{
		InitializeComponent();

		//File New 명령을 시뮬레이션 한다.
		ApplicationCommands.New.Execute(null, this);

		//panel의 첫 TextBox에 포커스를 준다. 
		pnlPerson.Children[1].Foucs();
	}
	//메뉴 항목들에 대한 이벤트 핸들러
	void NewOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		people = new People();
		InitializeNewPeopleObject();
	}
	
	void OpenOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		people = new People.Load(this);
		InitializeNewPeopleObject();
	}
	void SaveOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		people.Save(this);
	}
	void InitializeNewPeopleObject()
	{
		index = 0;

		if(people.Count == 0)
			people.Insert(0, new Person());

		pnlPerson.dataContext = people[0];
		EnableAndDisableButtons();
	}
	//버튼들에 대한 이벤트 핸들러
	void FirstOnClick(object sender, RoutedEventArgs args)
	{
		pnlPerson.dataContext = people[index = 0];
		EnableAndDisableButtons();
	}
	void PrevOnClick(object sender, RoutedEventArgs args)
	{
		pnlPerson.DataContext = people[index -= 1];
		EnableAndDisableButtons();
	}
	void NextOnClick(object sender, RoutedEventArgs args)
	{
		pnlPerson.DataContext = people[index += 1];
		EnableAndDisableButtons();
	}
	void LastOnClick(object sender, RoutedEventArgs args)
	{
		pnlPerson.DataContext = people[index = people.Count - 1];
		EnableAndDisableButtons();
	}
	void AddOnClick(object sender, RoutedEventArgs args)
	{
		people.Insert(index = people.Count, new Person());
		pnlPerson.DataContext = people[index];
		EnableAnDisableButtons();
	}
	void DelOnClick(object sender, RoutedEventArgs args)
	{
		people.RemoveAt(index);

		if(people.Count == 0)
			people.Insert(0, new Person());

		if(index > people.Count-1)
			index--;
		pnlPerson.DataContext = people[index];
		EnableAnDisableButtons();
	}
	void EnableAnDisableButtons()
	{
		btnPrev.IsEnabled = index != 0;
		btnNext.IsEnabled = index < people.Count-1;
		pnlPerson.Children[1].Foucs();
	}
}

6개 버튼에 대한 이벤트 핸들러 역시 간단하다 4개의 탐색 버튼에 대한 이벤트 핸들러는 새로운 index 값을계산하고 새로 계산한 값으로 People 컬렉션에서 레코드를 찾은 다음 찾은 레코드로 PersonPanel 의 DataContext 를 설정한다. Add New 버튼 핸들러는 새로운 Person 객체를 만들어서 컬렉션에 추가한다. Delete 버튼은 현재 레코드를 삭제한다. 그 결과 컬렉션이 비게 되면 새로운 Person 객체를 추가한다. 

MultiRecordDataEntry 프로그램이 읽고 저장하는 파일의 내용은 다음과 같다. 