using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Control;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

public partial class Window1: System.Windows.Window
{
	public Window1()
	{
		InitializeComponent();
	}
}


이 코드에 필자는 리소스를 추가하는 C# 구문을 넣었다. 

using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Control;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

public partial class Window1 : Window
{
	public Window1()
	{
		Resources.Add("thicknessMargin", new Thickness(24, 12, 24, 23));
		
		InitializeComponent();
	}
}

Window1.xaml 파일 속의 StackPanel은 Grid를 대체하고 4개의 TextBlock 엘리먼트가 LinearGradientBrush 리소스와 Thickness 리소스를 사용한다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="GradientBrushResourceDemo.Window1" Title="GradientBrushResourceDemo" Height="300" Width="300">
	<StackPanel>
		<TextBlock Margin="{StaticResource thicknessMargin}" Foreground="{StaticResource brushGradient}">
			Gradient text
		</TextBlock>
		<TextBlock Margin="{StaticResource thicknessMargin}" Foreground="{StaticResource brushGradient}">
			of black, green, and gold
		</TextBlock>
		<TextBlock Margin="{StaticResource thicknessMargin}' Foreground="{StaticResource brushGradient}" >
			Makes an app pretty,
		</TextBlock>
		<TextBlock  Margin="{StaticResource thicknessMargin}" Foreground="{StaticResource brushGradient}" >
			Make an app bold.
		</TextBlock>
	</StackPanel>
</Window>

필자가 미리 비주얼 스튜디오에서 생성된 프로젝트로 예제를 제작하지 않는다는 것은 공공연한 사실이다. 가장큰 이유는 파일 이름이 App나 Window보다는 의미있고 다양해야 한다는 생각 때문이다. 하지만 이제 Application.Resource가 어떤 의미이고 그것을 어떻게 사용하는지에 대해 보았기 때문에 이제부터 비주얼 스튜디오 프로젝트와 XAML 디자이너를 사용하는 것은 관계없다(다만 나에게 묻지만 말아줬으면 한다. )

이번 장의 앞부분에서 필자는 2개의 다른 폰트 크기를 프로그램에서 어떻게 정적 읽기 전용 필드로 정의해 사용할 수 있는지에 대해 설명했다. XAML은 또한 x:Static이라는 마크업 확장으로 다른 정적프로퍼티나 필드를 참조할 수 있고 이것은 열거형 멤버와도 사용될 수 있다. 

예를 들어 Button의 Content 프로퍼티를 SomeClass 클래스의 SomeStaticProp이라는 이름의 정적 프로퍼티로 설정하고 싶다고 생각해보자. 이때 마크업 확장의 문법은 다음과 같다. 

Content="{x:Static SomeClass.SomeStaticProp}"

아니면 x:Static 엘리먼트를 다음과 같이 프로퍼티 엘리먼트 문법으로 사용할 수도 있다. 

<Button.Content>
	<x:Static Member="SomeClass:SomeStaticProp" />
</Button.Content>

이 정적 필드나 프로퍼티의 타입은 설정할 프로퍼티의 타입과 정확히 대응되거나 이 과정을 처리할 컨버터가 있어야 한다(물론 Content 프로퍼티는 object 타입이므로 어떤 것도 올 수 있다. )
특정 엘리먼트를 제목 표시줄과 동일한 높이로 설정하고 싶다면 다음과 설정해야 할것 이다. 
Height="{x:Static SystemParameters.CaptionHeight}" 

WPF내에서 정의된 정적 프로퍼티나 필드만을 참조할수 있는 것은 아니다. 다만 WPF 클래스가 아닌 것에 접근하려면 클래스가 존재하는 CLR 네임스페이스를 XML 네임스페이스 선언에 포함해야 한다. 

XML 접두어 s로 System 네임스페이스를 연결한 다음의 XAML 프로그램이 Environment클래스의 정적 프로퍼티로부터 정보를 보여준다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:s="clr-namespace:System;assembly=mscorlib">
	<TextBlock>
		<Label Content="Operating System Version: " />
		<Label Content="{x:Static s:Environment.OSVersion}" />
		<LineBreak />
		<Label Content=".NET Version: "/>
		<Label Content="{x:Static s:Environment.MachinName}" />
		<LineBreak />
		<Label Content="User Name: " />
		<Label Content="{x:Static s:Environment.UserName}" />
		<LineBreak />
		<Label Content="User Domain Name: " />
		<Label Content="{x:Static s:Environment.UserDomainName}" />
		<LineBreak />
		<Label Content="System Directory: " />
		<Label Content="{x:Static s:Environment.SystemDirectory}" />
		<LineBreak />
		<Label Content="Current Directory: " />
		<Label Content="{x:Static s:Environment.CurrentDirectory}" />
		<LineBreak />
		<Label Content="Command Line: "/>
		<Label Content="{x:Static s:Environment.CommandLine}" />
	</TextBlock>
</StackPanel>

이 프로그램은 프로퍼티의 문자열을 보여주기 위한 것이기 때문에 대부분의 프로퍼티는 문자열을 반환한다. 하지만 현재 작동 중인 마이크로소프트 윈도우의 버전을 보여주는 OperatingSystem 타입의 OsVersion과 Version 타입의 Version(.NET 버전을 나타내는)은 문자열을 반환하지 않는다. 다행히 이 클래스의 ToString 메소드는 정보를 볼 수 있게 문자열 형태로 변환해 준다. 

사실 이 2개의 x:Static 마크업 구문이 TextBlock의 Text 프로퍼티에 간단히 설정될 수 있었던 것은 아니다. 문자열이 아닌 객체를 문자열로 변환하기 위한 자동화된 변환 방법이 없기 때문이다. 대신에 필자는 Label 컨트롤의 Content 프로퍼티에 x:Static 구문을 설정했는데, 기억하겠지만 Content 프로퍼티는 어떤 객체도 될 수 있고, 설정하는 객체는 ToString 메소드로 표현되기 때문이다. 이 Label 엘리먼트를 TextBlock(이 경우 이것은 InlineUIContainer 엘리먼트의 부분이 된다)의 자식으로 만들면 사이사이에 LineBreak를 사용함으로써 결과를 여러 줄로 표현할 수 있다. 

이 프로그램을 XAML Cruncher나 유사 프로그램에서 실행하는 데는 문제가 없지만 인터넷 익스플로러에서는 실행할 수 없다. 그것은 OSVersion과 Version을 제외한 모든 항목이 인터넷 익스플로러에서는 허용되지 않는 보안 권한을 요구하기 때문이다. 

x:Static 을 사용하는 또 다른 방법은 정적 필드나 프로퍼티를 프로젝트의 C# 코드 속에 정의하고 그것을 XAML 파일에서 접근하는 방법이다. 다음에 볼 AccessStaticFields 프로젝트에는 여느 때와 같이 Window 클래스를 구성하는 XAML 파일과 c# 파일이 있다. 다만 이 프로젝트는 Constants 클래스에 3개의 정적 읽기 전용 필드와 프로퍼티가 정의된 Constants.cs 파일을 포함한다. 다음이 이 정적 클래스이다. 


using System;
using System.Windows;
using System.Windows.Media;

public static class Constants
{
	//public 정적 멤버들
	public static readonly FontFamily fntfam = new FontFamily("Times New Roman Italic");

	public static double FontSize
	{
		get { return 72 / 0.75;
	}
	public static readonly LinearGradientBrush brush = new LinearGradientBrush(Colors.LightGray, Colors.DarkGray, new Point(0, 0), new Point(1, 1));
	}
}

2개의 항목은 정적 읽기 전용 필드로, 나머지 하나는 정적 읽기 전용 프로퍼티로 정의되었는데, 이것은 다양성을 위해서이기 때문에 특별한 의미는 없다.(이들이 읽기 전용일 이유도 없지만 이 필드가 XAML 파일 안에서 설정되면 안되기 때문에 읽기 전용으로 정의했다. ) 이 정적 필드와 프로퍼티가 표준 WPF 어셈블리가 아닌 프로젝트의 소스 코드 부분에서 정의됐기 때문에 XAML 파일은 필드와 프로퍼티가 있는 클래스의 네임스페이스와 연결된 접두어를 XML 네임스페이스 선언에서 정의할 필요가 있다. 

다음에 접두어 src를 CLR 네임스페이스 Petzold.AccessStaticFields와 연결시킨 XAML 파일이 있다. 이 파일은 x:Static 마크업 확장을 이용해 정적 필드와 프로퍼티에 접근하는데, 이 마크업 확장 중 2개는 프로퍼티 속성 문법을 사용하는 반면 나머지 한 개는 프로퍼티 엘리먼트 문법을 사용한다(다시 말하지만 이것은 다양성을 위해서이다. )


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:src="clr-namespace:Petzold.AccessStaticFields" x:Class="Petzold.AccessStaticFields.AccessStaticFields" Title="Access Static Fields"
	SizeToContent="WidthAndHeight" >
	<TextBlock Background="{x:Static src:Constants.brush}" FontSize="{x:Static src:Constants.FontSize}" TextAlignment="Center">
		<TextBlock.FontFamily>
			<x:Static Member="src:Constants.fntfam" />
		</TextBlock.FontFaimily>
		Properties from<LineBreak />Static Fields
	</TextBlock>
</Window>

다음 코드 비하인드 파일은 평범하다. 


using System;
using System.Windows;
using System.Windows.Control;
using System.Windows.Input
using System.Windows.Media;

public partial class AccessStaticFields : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new AccessStaticFields());
	}
	public AccessStaticFields()
	{
		InitializeComponent();
	}
}

이 정적 필드와 프로퍼티가 스탠드 얼론 파일 속에 있을 필요는 물론 없다. 이 프로젝트의 초기 버전에서 필자는 이것을 AccessStaticFields 클래스의 C# 부분에 넣었고 x:Static 마크업 확장이 src:Constants 클래스를 참조하는 대신 src:AccessStaticFields를 참조했다. 하지만 애플리케이션에서 사용되는 수많은 상수를 위해 스탠드 얼론 정적 클래스가 있는 것이 낫다고 판단했다. 

지금까지 객체를 리소스로 정의하고 StaticResource 마크업 확장으로 그 객체를 참조하는 방법에 대해 살펴보았다. 또한 x:Static 를 사용해 어떻게 클래스의 정적 프로퍼티와 필드를 참조하는지에 대해서도 다뤘다. 이제 남은 것은 인스턴스 프로퍼티와 특정 객체의 필드를 참조하는 방법이다. 이 방법은 객체와 그 객체의 프로퍼티를 명세할 필요가 있으며 문법은 StaticResour와 x:Static 이 다룰수 있는 범위를 넘어선다. 이것은 데이터 바인딩이 하는 일인데 자세한 것은 23장에서 살펴보자. 

다음에 x:Static 을 사용한 또 다른 예제가 있다. 이 스탠드얼론 XAML 파일은 x:Static 표현을 사용해 Label 컨트롤의 Content 속성과 Foreground 속성을 설정한다. 


<Label xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:s="clr-namespace:System;assembly=mscorlib" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="48"
	Content="{x:Static s:DateTime.Now}" Foreground="{x:Static SystemColors.ActiveCaptionBrush}" />

DateTime.Now 객체는 DateTime 타입인데, 이 객체의 ToString 메소드에서 반환된 문자열을 Content 프로퍼티가 보여주기 때문에 날짜와 시간이 정리된 형태로 출력된다. 또한 XAML 파일의 마지막 줄은 정적 SystemColors.ActiveCaptionBrush 프로퍼티에서 가져온 Brush 객체를 Foreground 프로퍼티에 설정하므로 문자열의 색깔은 창의 제목 표시줄과 동일한 색깔로 표시된다. 

시간이 매 초마다 자동으로 변하는 것을 기대하는 것은 과한 욕심이다. XAML Cruncher(또는 유사 프로그램)를 사용해 DisplayCurrentDateTime.xaml을 실행하면 Label 컨트롤을 생성할 때에만 DateTime.Now 프로퍼티를 얻어오기 때문이다. 하지만 XAML 파일에 무의미한 공백을 하나 입력하거나 F5 키를 누르면 XAML Cruncher는 XamlReader.Load를 새로 호출해 갱신된 시간을 보여준다. 

그러면 시스템 색이 바뀌면 어떤 일이 벌어질까? 프로그램이 자동적으로 Label 의 전경색을 바꿀까? 바탕화면에서 마우스 오른쪽 버튼을 클릭해 속성 메뉴를 선택한 후 제어판의 디스플레이 설정을 열어보자. 화면 배색 탭을 선택해 색 구성표를 보면 기본은 파란색이지만 은색이나 황록색을 선택할 수도 있다. 색깔을 변경한 후 적용이나 확인을 클릭해보자(마이크로소프트 윈도우 비스타에서는 바탕 화면에서 마우스 오른쪽 버튼을 클릭하고 메뉴에서 개인 설정을 선택한 후 목록에서 색상 및 모양을 선택한다)

윈도우가 새로운 시스템 색을 설정함과 동시에 모든 창의 제목 표시줄 색이 변경되는 것을 볼 수 있다 마찬가지로 XAML Cruncher의 제목 표시줄 색도 변하는데, Label에 의해 보여지는 문자열의 색은 여전히 같은 것을 볼 수 있다. 

실망했는가? 아마 놀라지 않았을 것이다. 이것은 날짜와 시간 컨텐트를 보여주는 것과 같은 상황이기 때문이다. 정적 프로퍼티인 SystemColors.ActiveCaptionBrush를 Label이 생성될 때 한 번만 가져오고 프로퍼티가 변경되었을 때 그것을 자동으로 가져와 갱신해주는 어떠한 메커니즘은 존재하지 않는다. 물론 날짜와 시간 컨텐트와 마찬가지로 XAML Cruncher에서 DisplayCurrentDateTime.xaml 파일에 무의미한 공백을 하나 입력하거나 F6키를 누른다면 파일이 다시 파싱되어 Label은 새로 바뀐 시스템 색으로 재생성될 것이다. 

그럼 시스템 색이 변경되었을 때 어떻게 자동으로 Label 전경색을 바꿀수 있을까? 이제 그 방법에 대해 알아보자. 

SystemColors,SystemParameters, SystemFonts 클래스는 모두 XAML 파일이 x:Static 마크업 확장을 사용해 접근할 수 있는 광대한 정적 프로퍼티들의 컬렉션이다. 이 클래스를 살펴보았다면 의문이 있었을 것이다. 모든 정적 프로퍼티에서 "xx"라는 프로퍼티와 "xxKey"라는 프로퍼티는 쌍을 이뤄 존재하기 때문이다. 여기서 "key"로 끝나는 모든 프로퍼티는 ResourceKey 타입의 객체를 반환한다. 

정적 SystemColors.ActiveCaptionBrush 프로퍼티는 SolidColorBrush 타입의 객체를 반환하는데, 이것은 Brush 타입의 객체를 요구하는 Label의 Foreground 프로퍼티를 할당하는데 문제가 없다. 

SystemColors.ActiveCaptionBrushKey 프로퍼티는 ResourceKey 타입의 객체를 반환하는 데, ResourceKey 객체는 SystemColors.ActionCaptionBrush에서 얻어진 것과같이 브러시에 접근할수 있는 방법을 제공한다. ResourceKey는 사전의 Key와 같은데, XAML 리소스에서 x:Key 속성을 사용해 정의했던 키와 유사하다. ResourceKey 객체의 가장 큰 차이점은 Assembly 타입의 속성을 포함해 XAML 파서가 사전이 저장된 어셈블리를 알 수 있다는 것이다. 

SystemColors.ActiveCaptionBrushKey에 의해 반환된 키로 StaticResource 마크업 확장을 사용해 브러시에 접근할수 있다면 다음과 같은 형태로 표현될 것이다. 

Foreground ="{StaticResource  SystemColors.ActiveCaptionBrushKey}"

아니다 사실 이것은 동작하지 않는다. DisplayCurrentDateTime.xaml에서 Foreground 속성을 이것으로 대체하면 리소스를 찾을 수 없다는 에러 메시지를 보게 된다. 그것은 파서가 SystemColors.ActiveCaptionBrushKey라는 문자열 키로 리소스를 찾을 것이기 때문이다. 하지만 여기에는 정적 프로퍼티인 SystemColors.ActiveCaptionBrushKey 에서 반환된 키에 의해 참조된 리소스가 필요하다