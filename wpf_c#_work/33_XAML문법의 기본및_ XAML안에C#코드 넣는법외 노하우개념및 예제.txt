<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.CompileXamlWindow.CompileXamlWindow" Title = "Compile XAML Window" SizeToContent="WidthAndHeight" 
	ResizeMode="CanMinimize">
	<StackPanel>
		<Button HorizontalAlignment = "Center" Margin="24" Click="ButtonOnClick">
			Click the Button
		</Button>

		<Ellipse Name="elips" Width="200" Height="100" Margin="24" Stroke="Black" />

		<ListBox Name="lstbox" Width="150" Height="150" Margin="24" SelectionChanged = "ListBoxOnSelection" />
	</StackPanel>
</Window>

실제로 이 XAML 문서는 다음과 같은 C# 문법의 클래스를 정의한다. 

public partial class CompileXamlWindow : Window
{
	...
}

partial 키워드는 CompileXamlWindow 클래스가 다른 어딘가에 추가적인 코드를 가지고 있다는 것을 명시해 그 코드는 C# 코드 비하인드 파일 속에 있다. 

또한 XAML 엘리먼트는 버튼의 클릭 이벤트를 또 다른 속성으로 포함하는데, ButtonOnClick이라는 핸들러에 이벤트를 할당하는 것을 주목해보자. 이 이벤트 핸들러는 어디 있을까? 이것은 CompileXamlWindow 클래스의 C# 부분에 있다. 마찬가지로 ListBox도 SelectionChanged 이벤트를 위한 이벤트 핸들러 역시 필요하다. 

또한 Ellipse와 ListBox는 각기 elips와 lstbox라는 이름을 Name 속성으로 가지고 있다. 이전에 어떻게 프로그램이 FindName 메소드를 통해 이 엘리먼트를 찾는지 보았다. 프로젝트의 XAML을 컴파일 할 때 Name 속성은 굉장히 중요한 역할을 하는데, 이것이 클래스의 필드가 되기 때문이다. 결과적으로 XAML로부터 생성된 클래스는 다음과 같다. 

public partial class CompileXamlWindow : Window
{
	Ellipse elips;
	ListBox lstbox;
	...
}

CompileXamlWindow 클래스를 C#으로 코딩한 부분에서 이 필드를 바로 참조할 수 있는데, 다음이 CompileXamlWindow 클래스의 나머지 부분에 해당하는 코드 비하인드 파일이다. 


using System;
using System.Reflection;
using System.Window;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public partial class CompileXamlWindow : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new CompileXamlWindow());
	}
	public CompileXamlWindow()
	{
		//필드를 초기화하고 이벤트 핸들러를 가져오기 위해 필요한 메소드 호출
		InitalizeComponent();

		//브러시 이름으로 ListBox를 채움
		foreach(PropertyInfo prop in typeof(Brushes).GetProperties())
			lstbox.Items.Add(prop.Name);
	}
	//MessageBox를 띄워주는 Button 이벤트 핸들러
	void ButtonOnClick(object sender, RoutedEventArgs args)
	{
		Button btn = sender as Button;
		MessageBox.Show("The button labled '" + btn.Content+ "' has been clicked.");
	}
	//Ellipse외 Fill 프로퍼티를 바꾸는 ListBox 이벤트 핸들러
	void ListBoxOnSelection(object sender, SelectionChangedEventArgs args)
	{
		ListBox lstbox = sender as ListBox;
		string strItem = lstbox.SelectedItem as string;
		PropertyInfo prop = typeof(Brushes).GetProperty(strItem);
		elips.Fill = (Brush)prop.GetValue(null, null);
	}
}

CompileXamlWindow는 예상대로 Window를 상속받는데, 선언에는 partial 키워드를 포함하고, 정적 Main 메소드는 InitializeComponent의 호출로 시작된다. 이 InitializeComponent 메소드는 CompileXamlWindow 클래스의 일부인데, 어디에서도 볼 수가 없다. 사실 나중에 이 메소드를 간단히 살펴보겠지만 지금은 이것이 XAML로부터 생성된 ListBox와 Ellipse 엘리먼트 필드 이름을 lstbox와 elips로 설정하고 Button과 ListBox 컨트롤의 이벤트 핸들러를 연결시키는 매우 중요한 기능을 한다는 것만 알아두자. 

CompileXamlWindow 생성자는 리스트 박스를 채우는 것 이외에 Title 프로퍼티나 기타 Window의 어떤 컨텐트도 설정하지 않는다. 왜냐하면 이미 모든 것이 XAML에서 수행됐기 때문이다. 남은 코드는 2개의 이벤트 핸들러를 위해 구현되었는데, ButtonOnClick 핸들러는 지긋지긋한 MessageBox를 띄워주며, ListBox의 SelectionChanged 이벤트 핸들러는 Ellipse 객체의 Fill 프로퍼티를 변경한다. 이 이벤트 핸들러에서 sender 인자로부터 받은 ListBox 객체를 이용하지 않고도 lstbox필드를 통해 직접 접근할 수 있다. 따라서 이벤트 핸들러의 첫 번째 구문을 삭제해도 프로그램은 문제없이 돌아간다. 

프로젝트를 컴파일하고 실행했을 때 그것이 정상 동작하는 것이 당연히 가장 중요한 관심사이지만 여기서는 그것이 어떻게 동작하는지에 대해 다뤄줬으면 할 것이다. 

프로젝트의 하위 디렉토리인 obj에서 볼 수 있는 하위 디렉토리인 Release 또는 Debug(프로젝트 컴파일 형태에 따라)를 살펴보면 CompileXamlWindow.baml라는 파일을 볼 수 있다. 이 파일의 확장자는 바이너리 XAML을 나타내는 BAML인데, 예상과 같이 이것은 바멜이라고 발음한다. 이 파일은 XAML 파일이 파싱되고 토큰나이징된 후 만들어진 바이너리 형태의 파일인데, 애플리케이션 리소스로서 실행 파일의 일부가 된다. 

또한 CompileXamlWindow.g.cs라는 파일을 볼 수 있는데, 이것은 XAML 파일로부터 산출된 코드이다. (g는 산출됨(generated)을 표현) 메모장 등 편집기로 파일을 열어보면 이것은 CompileXamlWindow 클래스의 다른 부분임을 알 수 있는데, CompileXamlWindow.cs 파일과 함께 컴파일된다. 클래스 위쪽에는 lstbox와 elips가 선언된 것을 볼 수 있으며, InitializeComponent 메소드는BAML 파일을 실행 시에 로드하고 그것을 엘리먼트 트리 속으로 변환하는 메소드다. 또한 파일의 아래쪽에는 lstbox와 elips 필드를 설정하고 이벤트 핸들러를 연결시키는 메소드를 볼 수 있다.(비주얼 스튜디오는 때로 이 생성된 파일에 대한 컴파일 오류 메시지를 보여주는데, 그것은 산출된 코드를 편집하는 것 외에 다른 무언가의 조작이 필요하다는 것이다).

CompileXamlWindow 클래스의 생성자가 실행될 때 Window의 Content 프로퍼티는 null이고 창의 모든 프로퍼티(Title, SizeToWindow, ResizeMode와 같은)는 기본값을 가지는데, InitializeComponent를 호출하면 Content는 StackPanel로 설정되고 다른 프로퍼티는 XAML 파일에 지정된 값으로 설정된다. 

CompileXamlWindow 프로그램 속에 작성된 XAML과 C# 코드 같은 연결(동일한 클래스를 공유하면서 이벤트 핸들러를 지정하고 필드를 설정하는 형태)은 XAML을 코드와 함께 컴파일했을 때만 가능하다. XamlReader.Load의 호출을 통해 XAML을 실행 중에 로드하는 것은 선택의 폭이 더 제한적인데, XAML에 의해 생성된 객체를 접근할 권한은 가질 수 있어도 이벤트 핸들러를 설정하거나 객체를 필드로 저장하는 것은 그만큼 쉬운 일이 아니다. 

프로그래머들이 XAML에 대해 자주 묻는 질문 중의 하나는 자신의 클래스를 XAML 내에서 사용할 수 있는지이다. 결론은 할 수 있다. 자신의 C# 파일에 있는 사용자 정의 클래스를 사용하기 위해서는 다른 네임스페이스를 선언하기만 하면 된다.

C# 파일에 MyControl이라는 이름과 MyNameSpace라는 CLR 네임스페이스를 가지고 있는 사용자 정의 컨트롤이 있다고 생각해보자. 먼저 C# 파일을 프로젝트 속에 포함시키고, XAML 파일에는 반드시 접두어와 함께 CLR 네임스페이스를 지정해야 한다. 예를 들어 stuff라는 접두어를 가진 네임스페이스의 선언은 다음과 같다. 

xmlns:stuff="clr-namespace:myNameSpace"

"clr-namespace" 문자열은 반드시 소문자여야하고 콜론이 붙어야 한다(이것은 XML의 대중화된 네임스페이스 선언 중에 하나인 http:과 비슷하다. 다음 20장에서는 외부 동적 라이브러리의 네임스페이스를 참조할 때 쓰는 좀 더 진보된 문법에 대해 다루겠다)이 네임스페이스 선언은 반드시 MyControl이나 MyControl엘리먼트 속성을 최초로 참조하기 전에 선언돼야 한다. myControl 엘리먼트는 다음과 같이 그 앞에 접두어 stuff를 요구한다. 

<stuff:MyControl ...>

어떤 접두어를 사용해야 할까?(일반적인 목적의 솔루션으로 "stuff"는 적절하지 않을 것으로 생각된다.) 짧은 접두어가 보편적이지만 필수는 아니기 때문에 CLR 네임스페이스의 소스 코드를 프로젝트에 포함할 경우 이런 각 네임스페이스에 필요한 접두어의 혼란을 피하려면 접두어는 CLR 네임스페이스와 비슷하게 짓는 것이 무방하다. 필요한 사용자 정의 클래스 전부가 하나의 네임스페이스에 속해 있는 경우라면 접두어로 src(소스 코드를 의미)가 자주 쓰인다. 

UseCustomClass라는 이름의 새로운 프로젝트를 생성해보자. 이 프로젝트는 13장 리스트 박스 선택에 있는 SelectColorFromGrid 프로젝트의 ColorGridBox.cs 파일과 링크를 포함하고 있다. ColorGridBox 클래스는 Petzold.SelectColorFromGrid 네임스페이스에 속해 있기 때문에 XAML 파일에서 이 클래스를 사용하기 위해서는 다음과 같이 네임스페이스를 선언할 필요가 있다. 

xmlns:src="clr-namespace:Petzold.SelectColorFromGrid"

접두어 src를 사용해 ColorGridBox를 참조하는 네임스페이스를 포함하는 UseCustomClass.xaml 파일을 살펴보자. 




<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x ="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:src="clr-namespace:Petzold.SelectColorFromGrid" x:Class = "Petzold.UseCustomClass.UseCustomClass" Title="Use Custom Class"
	SizeToContent = "WidthAndHeight" ResizeMode="CanMinimize">
	<StackPanel Orientation="Horizontal">
		<Button HorizontalAlignment="Center" VerticalAlignment="Center" Margin="24">
			Do-nothing button to test tabbing
		</Button>
		
		<src:ColorGridBox HorizontalAlignment="Center" VerticalAlignment="Center" Margin="24" 
			SelectionChanged="ColorGridBoxOnSelectionChanged" />
		<Button HorizontalAlignment="Center" VerticalAlignment="Center" Margin="24">
			Do-nothing button to test tabbing
		</Button>
	</StackPanel>
</Window>

다음 코드 비하인드 파일에는 Main 메소드를 비롯해 InitializeComponent를 호출하는 부분과 ColorGridBox 컨트롤을 위한 SelectionChanged 이벤트 핸들러를 포함하고 있다. 

using Petzold.SelectColorFromGrid;
using System;
using System.Reflection;
using System.Window;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;


public partial class UseCustomClass : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new UseCustomClass());
	}
	public UseCustomClass()
	{
		InitializeComponent();
	}
	void ColorGridBoxOnSelectionChanged(object sender, SelectionChangedEventArgs args)
	{
		ColorGridBox clrbox = args.Source as ColorGridBox;
		Background = (Brush)clrbox.SelectedValue;
	}
}

UseCustomClass.cs 파일에는 네임스페이스 Petzold.SelectColorFromGrid를 위한  using문이 필요하다. 왜냐하면 이벤트 핸들러가 ColorGridBox 클래스를 참조하기 때문인데, 이 부분을 ListBox(ColorGridBox가 상속받은 클래스)로 바꾸면 using문을 생략할 수 있다. 또한 데이터 바인딩을 정의하면 SelectionChanged 이벤트 핸들러를 완전히 XAML 파일 속으로 넣는 것이 가능한데, 이 방법은 문법이 약간 예외적이기 때문에 23장에서 설명하겠다. 

이전에 언급했다시피 애플리케이션은 보통 그 안의 모든 창이나 대화상자에 대응되는 하나의 XAML 파일을 갖는 것이 일반적이지만 이 XAML 파일은 Window 이외의 엘리먼트에는 적용되지 않는다. 다음 UseCustomXamlClass 프로젝트는 Button(매우 간단한 것이기는 하지만)에서 파생된 사용자 정의 클래스를 XAML 속에서 완벽하게 정의한다. XAML 내의 사용자 정의 클래스는 클래스 정의를 위한 장소인 루트 엘리먼트상의 x:Class 에서 정의했다. 다음 XAML파일은 Button으로부터 파생된 CenterButton 클래스를 정의하고 HorizontalAlignment와 VerticalAlignment프로퍼티를 Center로 설정하며 약간의 간격을 주었다. 

<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.UseCustomXamlClass.CenterredButton" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="12" />

이 프로젝트는 Window로부터 파생된 클래스를 위해 별도의 XAML 파일을 포함하고 있는데, 이 파일은 XML의 네임스페이스에 프로젝트의 네임스페이스를 가지고 있기 때문에 StackPanel이 5개의 CenteredButton 클래스 인스턴스를 가질 수 있다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml
	xmlns:src="clr-namespace:Petzold.UseCustomXamlClass" x:Class="Petzold.UseCustomXamlClass.UseCustomXamlClass"
	Title = "Use Custom XAML Class">
	<StackPanel Name="stack">
		<src:CenteredButton>Button A</CenteredButton>
		<src:CenteredButton>Button B</CenteredButton>
		<src:CenteredButton>Button C</CenteredButton>
		<src:CenteredButton>Button D</CenteredButton>
		<src:CenteredButton>Button E</CenteredButton>
	</StackPanel>
</Window>

StackPanel에는 stack이란 Name 속성값이 있는데, 이 이름을 코드 비하인드 파일에서 간단히 사용해 5개의 버튼(총 열 개)을 StackPanel에 더 추가했다. 


using System;
using System.Window;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;


public partial class UseCustomXamlClass : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new UseCustomXamlClass())
	}
	public UseCustomXamlClass()
	{
		InitializeComponent();

		for(int i=0; i<5; i++)
		{
			CenteredButton btn = new CenteredButton();
			btn.Content = "Button No. " + (i+1);
			stack.Children.Add(btn);
		}
	}
}

Window나 다른 엘리먼트 혹은 컨트롤을 위한 XAML 파일을 만드는 것 이외에 Application객체를 위한 XAML 파일을 만드는 것 또한 일반적이다. 흥미로운 사실은 이 작업을 통해 프로그램에 더 이상 명확한 Main 메소드가 필요 없어진다는 사실이다. 한 번 만들어 보자. 이 프로젝트 이름은 IncludeApplicationDefinition이며, 2개의 XAML 파일(하나는 Application을 위한 것이고 다른 하나는 Window를 위한것)과 2개의 대응되는 코드 비하인드 파일을 가지고 있다. Window를 위한 XAML 파일은 버튼 하나만을 포함하는 매우 간단한 파일이다. 



<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml
	 x:Class="Petzold.IncludeApplicationDefinition.MyWindow"
	Title = "Include Application Definition" SizeToContent="WidthAndHeight" ResizeMode="CanMinimize">
	<Button HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1.5in" Click="ButtonOnClick">
		Click the Button
	</Button>
</Window>

이 XAML은 Petzold.IncludeApplicationDefinition이라는 네임스페이스와 MyWindow.cs 파일에 정의된 Window 파생 클래스인 MyWindow를 부분 클래스로 공유한다. 이 클래스 생성자는 InitializeComponent를 호출하고, Button의 Click 이벤트를 위한 이벤트 핸들러를 포함하고 있다. 

using System;
using System.Windows;
using System.Windows.Control;
using System.Windows.Input

public partial class MyWindow: Window
{
	public MyWindow()
	{
		InitializeComponent();
	}
	void ButtonOnClick(object sender, RoutedEventArgs args)
	{
		Button btn = sender as Button;

		MessageBox.Show("The button labled '" + btn.Content + "' has been clicked.");
	}
}

두 번째 XAML 파일은 Application 객체를 위한 것인데, 네임스페이스는 여전히 Petzold.IncludeApplicationDefinition이지만 클래스는 MyApplication이다. 


<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml
	x:Class="Petzold.IncludeApplicationDefinition.MyApplication" StartupUri="MyWindow.xaml" />

MyApplication.xaml 파일의 빌드 작업은 반드시 ApplicationDefinition으로 설정돼야 하며, 비주얼 스튜디오는 특정 상황(파일명을 바꾸는 행위 같은)에서 빌드 작업 설정을 바꿀 수 있음에 주의해야 한다. Application 객체의 정의를 위한 XAMl 파일의 사용이 처음이면 Main 메소드가 프로젝트에 없다는 에러 메시지를 보게 되는데, 이럴 때 Application 객체를 위한 XAML 파일의 빌드 작업을 확인해보자. 

MyWindow.xaml 파일을 참조하는 StartupUri라는 마지막 속성을 주목해보자. 애플리케이션이 구동되기 전에 MyWindow.xaml 파일은 당연히 MyWindow.baml로 컴파일 되고 애플리케이션 리소스를 생성하지만 그것은 단지 애플리케이션이 띄울 초기 Window 객체 그 자체에 지나지 않는다. 따라서 StartupUri는 일반적으로 Main 함수에서 호출되는 Run 메소드를 대체해 초기 Window 객체를 띄운다. 

마지막으로 아무 일도 하지 않는 MyApplication.cs가 있는데, MyApplication.xaml 파일 속성에 이벤트 핸들러가 정의되어 있으면 이곳에서 Application 객체를 위한 이벤트 핸들러를 구현할 수 있다. 


using System;
using System.Windows;

public partial class MyApplication : Application
{
}

이것이 바로 Main 메소드가 없는 프로젝트의 전부이다. 하지만 이 프로그램을 컴파일하고 난 뒤 생성된 MyApplication.g.cs 파일에서는 Main 메소드가 있는 것을 확인할 수 있다. 

MyApplication.cs 파일은 사실 필요 없기 때문에 프로젝트에서 완전히 삭제해도 프로젝트는 전과 같이 동작한다(사실 필자가 이 프로젝트를 처음 합쳤을 때 우연히 MyApplication.xaml과 MyApplication.cs 속에 다른 클래스 이름을 사용했지만 프로젝트는 문제없이 컴파일됐고 역시 잘 작동했다!).

프로젝트에 코드 파일 없이(많은 애플리케이션에 해당되진 않지만)하나의 XAML 파일만 갖는 것도 역시 가능하다. 코드가 없는 프로젝트는 컨트롤이 XAML 속에 데이터 바인딩을 가지고 있을 때나 XAML 애니메이션을 사용할 때 사용될 수 있다. 다음의 CompileXamlOnly란 이름의 프로젝트는 2개의 파일을 가지고 있으며, 첫 번째 Application 파일은 다음과 같다. 

<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" StartupUri="XamlOnlyWindow.xaml" />

이전에 언급했듯이 이 Application 파일은 반드시 빌드 작업이 ApplicationDefinition이어야 하고 그렇지 않으면 프로그램이 동작하지 않음을 기억하자. 또한 StartupUri에는 XamlOnlyWindow.xaml 파일이 설정되어 있는데 다음과 같다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Title="Compile XAML Only"
	SizeToContent = "WidthAndHeight" ResizeMode="CanMinimize">
	<StackPanel>
		<Button HorizontalAlignment="Center" Margin="@4">
			Just a Button			
		</Button>

		<Ellipse Width="200" Height="100" Margin="24" Stroke="Red" StrokeThickness="10" />

		<ListBox Width="100" Height="100" Margin="24">
			<ListBoxItem>Sunday</ListBoxItem>
			<ListBoxItem>Monday</ListBoxItem>
			<ListBoxItem>Tuesday</ListBoxItem>
			<ListBoxItem>Wednesday</ListBoxItem>
			<ListBoxItem>Thursday</ListBoxItem>
			<ListBoxItem>Friday</ListBoxItem>
			<ListBoxItem>Saturday</ListBoxItem>
		</ListBox>
	</StackPanel>
</Window>

앞에서 보면 어떤 파일도 클래스 이름을 정의하지 않는다는 것을 알 수 있다. 사실 비주얼 스튜디오는 단지 Application XAMl 파일만을 위한 코드를 생성하고, 그것에 Application~과 같은 클래스 이름을 붙이는 걸 확인할 수 있다. 생성된파일은 Main 메소드를 포함하고 있으며, Window XAML 파일을 위해 생성된 코드는 없지만 비주얼 스튜디오는 이 Window를 BAML 파일로 컴파일한다. 따라서 실제 구조는 명확한 코드를 가진 프로젝트들과 유사하다. 

Application 클래스를 위한 BAML 파일은 필요 없는데, Application 클래스가 엘리먼트트리나 실행 중에 필요한 어떤 것도 정의하지 않기 때문이다. 

XAML만으로 개발을 시작한 애플리케이션이 있다고 가정해보자. 그런데 어느날 C# 코드를 애플리케이션에 넣어야 하는데, 그 작은 코드를 넣기 위해 하나의 C# 파일을 생성하기는 싫다. 왜 그런지는 이유는 아마 프로젝트를 만든 사람만이 말해줄 수 있을 것 같다. 다행히 XAML 파일 속에 C# 코드를 넣는 것이 가능한데, 이것이 멋지진 않지만 수행되는 데는 문제가 없다. 

다음은 EmbedCodeInXaml이라고 이름 붙인 프로젝트의 첫 번째 파일인 Application 클래스 이다. 


<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" StartupUri="EmbededCodeWindow.xaml" />

StartupUri는 Button, Ellipse, ListBox와 약간의 C# 코드를 가진 EmbededCodeWindow.xaml 파일을 참조한다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml
	x:Class = "Petzold.CompileXamlOnly.EmbededCodeWindow" Title="Embed Code in XAML" SizeToContent="WidthAndHeight"
	ResizeMode="CanMinimize" Loaded="WindowOnLoaded">
	<StackPanel>
		<Button HorizontalAlignment="Center" Margin="24" Click="ButtonOnClick">
			Click the Button
		</Button>
	
		<Ellipse Name="elips" Width = "200" Height="100" Margin="24" Stroke="Red" StrokeThickness="10" />

		<ListBox Name="lstbox" Width="150" Height="150" Margin="24" SelectionChanged="ListBoxOnSelection" />

	<x:Code>
		<![CDATA[
	void WindowOnLoaded(object sender, RoutedEventArgs args)
	{
		foreach(System.Reflection.PropertyInfo prop in typeof(Brushes).GetProperties())
			lstbox.Items.Add(prop.Name);
	}
	void ButtonOnClick(object sender, RoutedEventArgs args)
	{
		Button btn = sender as Button;
		MessageBox.Show("The button labeled '" + btn.Content + "' has been clicked.");
	}
	void ListBoxOnSelection(object sender, SelectionChangedEventArgs args)
	{
		string strItem = lstbox.SelectedItem as string;
		System.Reflection.PropertyInfo prop = typeof(Brushes).GetProperty(strItem);
		elips.Fill = (Brush)prop.GetValue(null, null);
	}
		]]>
	</x:Code>
	</StackPanel>
</Window>

내장된 코드는 x:Code 엘리먼트와 x:Code 엘리먼트 안에 CDATA 구역이 필요하다. XML 명세는 CDATA(Character Data를 의미함)를 XML 파일 내에서 상황에 따라 마크업으로 인식될 수 있는 텍스트 블록을 위한구역으로 정의한다. 이것은 당연히 C#을 비롯한 여타 다른 프로그래밍 언어에서도 사용할 수 있는 기호이다. 

CDATA 구역은 항상 <![CDATA[" 문자열로 시작되며, "]]> 문자열로 끝난다. CDATA 구역 내에는 어떤 상황에서도 "]]>" 문자열이 있을 수 없으며, 다음과 같은 C# 코드를 작성했을 경우 문제가 생길 수 있다. 

if(array1[array2[i]]>5)

앞과 같이 CDATA 구분자로 혼동될 수 있는 코드에는 약간의 공백을 넣으면 문제없다. 

이 프로젝트가 컴파일되는 동안에 C# 코드는 EmbededCodeWindow.g.cs 파일로 넘겨지며, 이 코드는 필드를 정의할 수 없다. 또한 생성된 코드 파일에서 내장된 코드가 필요한 네임스페이스에 대한 using 문을 자동으로 포함하지 않는 경우 내장 코드는 검증된 네임스페이스이름을 필요로 한다. 그리고 EmbededCodeWindow.xaml 속의 내장된 코드는 System.Reflection 네임스페이스 속의 클래스를 완전히 검증하는 것이 필요함을 알아 두어야 한다. 

XAML 파일 안에 내장 C# 코드를 넣는 것이 때로는 편하지만 사실 이것을 일반적인 목적의 솔루션으로는 사용한다는 것은 아주 지저분하고 어리석은 짓이다. XAML 파일에 내장 코드를 사용하지 않는 것이 더 행복하고 만족스러운 삶을 살 수 있다. 따라서 지금까지 본 것은 잊는 것이 좋을것 같다. 

5장의 StackPanel과 WrapPanel의 DesignAButton 프로그램을 아마 기억할 것이다. 이 프로그램은 StackPanel을 Button의 Content 프로퍼티에 할당했고, 2개의 Polyline 객체와 하나의 Label, 비주얼 스튜디오와 함께 포함된 이미지 라이브러리로부터 얻은 BOOK06.ICO라는 이름의 아이콘을 보여주는 Image 객체로 StackPanel을 장식했다. 그럼 이 프로그램을 XAMl만의 프로젝트 정확히 말하면 XAMl과 아이콘 파일을 포함한 프로젝트로 흉내 내보자. 

아이콘 파일은 반드시 Resource로 빌드 작업이 설정돼야 하고, 다음의 DesignXamlButtonApp.xaml 파일은 ApplicationDefinition으로 빌드 작업이 설정돼야 한다. 



<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" StartupUri="DesignXamlButtonWindow.xaml" />

이 프로젝트의 마지막 부분은 Page로 빌드 작업을 가진 Window를 위한 XAMl 파일이다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Title="Design XAML Button" SizeToContent="WidthAndHeight"
	ResizeMode="CanMinimize">
	<Button HorizontalAlignment="Center" VerticalAlignment="Center" Margin="24">
		<StackPanel>
			<Polyline Stroke="Black" Points="0 10, 10 0, 20 10, 30 0, 40 10, 50 0, 60 10, 70 0, 80 10, 90 0, 100 10" />

			<Image Margin="0,10,0,0" Source="BOOK06.ICO" Stretch="None" />

			<Label HorizontalAlignment="Center" 
				_Read Books!
			</Label>

			<Polyline Stroke="Baclk" Points="0 0, 10 10, 20 0, 30 10, 40 0, 50 10, 60 0, 70 10, 80 0, 90 10, 100 0" />
		</StackPanel>
	</Button>
</Window>

이 창은 하나의 Button만을 포함하고 있지만 Button은 StackPanel을 포함하고 있으며, 이 StackPanel이 다른 네 개의 엘리먼트를 포함하고 있다. 2개의 Polyline 엘리먼트는 X와 Y로 짝지어진 11개의 연속된 좌표를 명시하는데, 콤마가 좌표를 구분하는 것에 주목하자. 이와 반대로 공백으로 각 좌표를 구분하고 콤마로 X와 Y를 구분할 수도 있으며, 공백이나 콤마만으로 둘을 구분할 수도 있다. 