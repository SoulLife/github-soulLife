<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.NavigationDemo.MyApp" StartupUri="FrameNavigationDemoWindow.xaml" />

StartupUri 속성은 다음 파일인 FrameApplicationDemoWindow.xaml을 가리킨다. 

<NavigationWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Title="Frame Navigation Demo" FontSize="24">
	<NavigationWindow.Content>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition />
				<RowDefinition />
			</Grid.RowDefinitions>

			<Frame Grid.Row="0" Background="Aqua" Source="Page1.xaml" />
			<Frame Grid.Row="1" Background="Pink" Source="Page2.xaml" />
		</Grid>
	</NavigationWindow.Content>
</NavigationWindow>


이 파일의 루트 엘리먼트는 Window이지만 창은 2개의 Frame을 포함한다. 이 두 Frame은 각기 다른 색깔을 가지고 있기 때문에 쉽게 구분이 되며, 각기 다른 Page 파일을 가리킨다. 또한 각 Frame은 스탠드 얼론 네비게이션 크롬을 가지지만 이것은 탐색을 시작한 후에 나타난다. 

페이지 사이를 탐색하는 것은 두 Frame 엘리먼트 내에서 완전히 독립적이다. 하지만 Frame NavigationDemoWindow.xaml 속에서 Window를 NavigationWindow로 바꾸면 하나의 네비게이션 크롬만 창의 상단에서 볼 수 있다. 하지만 이 두 프레임은 여전히 독립적으로 탐색이 가능하며 뒤로 가기, 앞으로 가기 버튼을 각 프레임을 구별한다. 

이제 YellowPad 프로젝트로 돌아가 도움말을 만들어 보자. YellowPad 프로젝트는 Help라는 디렉토리에 열 개의 XAML 파일과 PNG 파일 형식의 대화상자 이미지 3개가 들어있다. XAML 파일은 서로 비슷한데, 모두 Page 내의 FlowDocumentReader 속에 FlowDocument 를 포함하며, 이 FlowDocument는 도움말, 이미지, 다른 도움말 링크를 포함한다. 다음은 Help 디렉토리에서 볼 수 있는 전형적인 파일이다. 

<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Title="The Eraser Tool Dialog">
	<FlowDocumentReader ViewingMode="Scroll">
		<FlowDocument>
			<Paragraph TextAlignment="Center" FontSize="16pt">
				The Eraser Tool Dialog
			</Paragraph>
			<Paragraph >
				The<Bold>Eraser Tool</Bold> dialog lets you change the dimensions and Shape of the eraser.
			</Paragraph>
			<BlockUIContainer>
				<Image Souce ="EraserToolDialog.png" Stretch="None" />
			</BlockUIContatiner>
			<Paragraph>
				Use the <Bold>Width</Bold> and <Bold>Height</Bold> fields to specify the dimensions of the eraser in points
				(1/72<Run BaselineAlignment="Superscript">nd</Run> inch).
			</Paragraph>
			<Paragraph>
				Use the <Bold>Rotation</Bold> field to specify a
				rotation of the eraser. The rotation only makes sense when the horizontal and vertical dimensions of the eraser
				are unequal.
			</Paragraph>
		</FlowDocument>
	</FlowDocumentReader>
</Page>

YellowPadHelp.xaml 파일은 도움말 창의 배치를 담당하며 NavigationWindow는 3개의 열을 포함한 Grid를 자식으로 포함한다. 

<NavigationWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.YellowPad.YellowPadHelp" Title="YellowPad Help" Width="800" Height="600" ShowInTaskbar="False" 	WindowStartupLocation="CenterScreen" >

	<NavigationWindow.Content>
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="25*" />
				<ColumnDefintion Width="Auto" />
				<ColumnDefinition Width="75*" />
			</Grid.ColumnDefinitions>

			<TreeView Name="tree" FontSize="10pt" SelectedItemChanged="HelpOnSelectedItemChanged">
			<TreeViewItem Header="Program Overview" Tag="Help/Overview.xaml" />
			<TreeViewItem Header="Exploring the Menus">
				<TreeViewItem Header="The File Menu" Tag="Help/FileMenu.xaml" />
				<TreeViewItem Header="The Edit Menu" Tag="Help/EditMenu.xaml" />
				<TreeViewItem Header="The Stylus-Mode menu" Tag="Help/StylusModeMenu.xaml" />
				<TreeViewItem Header="The Eraser-Mode Menu" Tag="Help/EraserModeMenu.xaml" />
				<TreeViewItem Header="The Tools Menu" Tag="Help/ToolsMenu.xaml" />
				<TreeViewItem Header="The Stylus Tool Dialog" Tag="Help/StylusToolDialog.xaml" />
				<TreeViewItem Header="The Eraser Tool Dialog" Tag="Help/EraserToolDialog.xaml" />
			</TreeViewItem>

			<TreeViewItem Header="The Help Menu" Tag="Help/HelpMenu.xaml" />

			<TreeViewItem Header="Copyright Information" Tag="Help/Copyright.xaml" />

			<GridSplitter Grid.Column="1" Width="6" HorizontalAlignment="Center" VerticalAlignment="Stretch" />
			<Frame Name="frame" Grid.Column="2" />
		</Grid>
	</NavigationWindow.Content>
</NavigationWindow>


Grid의 첫 번째 열은 목록을 보여주는 TreeView인데, 각 TreeViewItem의 Tag 프로퍼티는 그 항목과 관련된 XAML 파일로 설정된다. 또한 가운데 GridSplitter 오른쪽은 frame 이라는 이름의 Frame이며, TreeView의 SelectedItemChanged 이벤트 핸들러는 YellowPadHelp.cs 코드 비하인드 파일 속에서 구현된다. 


using System;
using System.Windows;
using System.Windows.Control;

public partial class YellowPadHelp
{
	public YellowPadHelp()
	{
		InitializeComponent();

		//TreeView 의 첫번 째 항목을 선택하고 포커스를 줌
		(tree.Items[0] as TreeViewItem).IsSelected = true;
		tree.Focus();
	}
	void HelpOnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> args)
	{
		TreeViewItem item = args.NewValue as TreeViewItem;

		if(item.Tag == null)
			return;

		//선택된 항목의 Tag 프로퍼티를 탐색함
		frame.Navigate(new Uri(item.Tag as string, UriKind.Relative));
	}
}

사용자가 왼쪽 TreeView의 항목을 선택하면 이벤트 핸들러는 Tag 프로퍼티를 얻고 이것을 Uri로 변환해 Frame 의 Navigate 메소드로 전달하면서 페이지를 탐색한다. 앞으로 25장에서는 도움말 정보를 보여주는 약간 더 일반적인 방법에 대해 다룰 것이다. 

NavigationWindow, Frame, NavigationServices 클래스 모두 필요할 때 탐색이나 중지 진행 상황을 확인해 볼 수 있는 다양한 이벤트를 지원하며, 당연히 이 이벤트는 로컬에서 페이지를 읽을 때보다는 네트워크상에서 페이지를 읽을 때 더 유용할 것이다. 

네비게이션 애플리케이션 중에 흔히 볼 수 있는 유형은 마법사(wizard)이다. 마법사는 동일한 창에서 축적된 내용을 연속된 페이지로 보여주는 프로그램 형태이다. 일반적으로 마법사의 첫 번째와 마지막 페이지를 제외한 그 사이에 위치한 페이지는 이전(Previous)과 다음(Next) 버튼을 가지며, 이 버튼을 통해 페이지 사이를 이동한다. 

마법사에서 탐색을 위해 Previous, Next 버튼을 사용하기 때문에 NavigationWindow나 Frame이 내장된 WPF 마법사는 네비게이션 크롬을 보여줄 필요가 없다(NavigationWindow의 ShowsNavigationUI를 false로 설정하거나 Frame의 NavigationUIVisibility를 Hidden으로 설정함)프로그램 자체는 Previous, Next 버튼의 Click 이벤트 핸들러에서 탐색을 관리하는데, 일일이 탐색을 제어할 필요 없이 WPF 탐색 기능을 사용하면 마법사를 쉽게 구현할 수 있다. 쉽게 말해 Previous, Next 버튼을 이용한 페이지 탐색을 일일이 추적할 필요 없다. 

탐색 중에 마법사 페이지가 사용자가 입력한 정보를 읽어버리지 않는 것은 매우 중요하다. 

즉, 사용자가 Previous , Next 버튼을 눌러 방문했던 페이지를 다시 탐색할 때도 이미 입력한 정보는 그대로 보존돼야 한다. 하지만 입력한 정보가 사라지는 현상은 기존의 마법사에서 종종 볼 수 있었으며, 특히 웹 페이지에서는 흔하게 볼 수 있다. 따라서 이런 현상을 발생하지 않도록 구현하는 것이 매우 중요하다. 

그럼 이제 지금껏 말한 조건을 만족할만한 간단한 마법사를 만들어보자. 이 프로젝트에 15개나 되는 소스 코드 파일이 있다고 지레 겁먹을 필요는 없다. 마법사 속의 페이지는 각기 하나의 XAML 파일과 C# 파일을 필요로 하며, 페이지 중 하나는 별도의 XAML 파일과 C# 파일로 구현된 특정 페이지를 보여주는 옵션이 있다. 또한 전체를 관장하는 창 또한 하나의 XAML 과 C# 파일이 필요하다. 

프로젝트의 15번째 마지막 파일에는 마법사에서 얻어진 정보를 저장하는 public 필드가 있다. 

using System;
using System.Windows;
using System.Windows.Control;


public class Vitals
{
	public string Name;
	public string Home;
	public string Gender;
	public string FavoriteOS;
	public string Directory;
	public string MomsMaidenName;
	public string Pet;
	public string Income;

	public static RadioButton GetCheckedRadioButton(GroupBox grpbox)
	{
		Panel pnl = grpbox.Content as Panel;

		if( pnl != null)
		{
			foreach(UIElement el in pln.Children)
			{	
				RadioButton radio = el as RadioButton;

				if(radio != null && (bool)radio.IsChecked)
					return radio;
			}
		}
		return null;
	}
}

이것은 마법사를 통해 페이지를 탐색하면서 축적된 정보를 저장하는 중요한 장소이다. 프로그램 내에서 필드는 간편하게 string 변수를 사용했지만 이 중 몇 가지 필드는 GroupBox로 둘러싸인 StackPanel 내부에 그룹 지어진 RadioButton 컨트롤을 직접 상속받았다. 따라서 이 그룹 내에서 선택된 RadioButton을 가져오기 쉽게 하기 위해 정적 메소드를 구현했다. 

프로그램이 실행되는 내내 Computer Dating Wizard 프로그램은 다음의 XAML 파일을 기본으로 한 작은 창 하나만을 띄우게 된다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.ComputerDatingWizard.ComputerDatingWizard" WindowStartupLocation="CenterScreen" Title="Computer Dating Wizard" 	Width="300"	Height="300" ResizeMode="NoResize">
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
		<Grid.RowDefinitions>

		<TextBlock Grid.Row="0" Margin="12" FontSize="16" FontStyle="Italic" HorizontalAlignment="Center">
			Computer Dating Wizard
		</TextBlock>

		<Frame Grid.Row="1" Name="frame" NavigationUIVisibility="Hidden" Padding="6" />
	</Grid>
</Window>

창은 일반적인 마법사와 같이 고정된 크기이며, 클라이언트 영역은 두 부분으로 나누어져 하나는 텍스트 Computer Dating Wizard를 보여주고 다른 하나는 다양한 페이지를 보여주는 Frame 으로 구성된다. 

마법사에서는 창 아래의 Previous, Next 버튼으로 탐색이 가능하기 때문에 Frame의 네비게이션 크롬은 필요없다. 따라서 Frame의 NavigationUIVisibility 프로퍼티를 Hidden으로 설정한다. 

이 클래스의 C# 부분에서는 Main 메소드(물론 애플리케이션 정의 파일로 대체할 수도 있다)를 포함하며 생성자에서 InitializeComponent를 호출한다. 

using System;
using System.Windows;
using System.Windows.Control;


public partial class ComputerDatingWizard
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new ComputerDatingWizard());
	}
	public ComputerDatingWizard()
	{
		InitializeComponent();

		//초기 페이지를 탐색함
		frame.Navigate(new WizardPage());
	}
}

생성자에서는 Navigate 메소드의 인자에 Uri 인스턴스 대신 객체를 전달해 호출했다. 이것이 비록 객체 형태로 정의돼있긴 하지만 트리의 루트 엘리먼트이기 때문에 URI 형태로 명시된 XAML 파일과 밀접하게 대응된다. 그리고 앞의 생성자에서 쓰인 Navigate 형태는 몇가지 상황에서 약간 유용한 면이 있다. 객체에 몇 가지 프로퍼티를 설정하고 전달하거나 전달할 객체의 생성자에 인자가 필요한 경우와 같은 때이다. 앞으로 후자의 방법은 Vitals 클래스의 인스턴스를 마법사의 여러 페이지를 전달하기 위해 사용될 것이다. 

ComputerDatingWizard 클래스는 Frame 컨트롤상에서 Navigate를 직접 호출할 수 있다. 왜냐하면 Frame 컨트롤이 클래스의 일부분이기 때문이다. 반면 나머지 페이지는 Frame 객체에 직접 접근할 수 없기 때문에 탐색을 위해서 NavigationServices 객체를 사용해야 한다. 

WizardPage() 클래스는Begin 버튼과 간단한 소개 메시지를 보여주는 페이지이다. 


<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.ComputerDatingWizard.WizardPage0" >
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		
		<FlowDocumentScrollViewer Grid.Row="0" Margin="6" VerticalScrollBarVisibility ="Hidden">
			<FlowDocument FontSize="10pt">
				<Paragraph>
					Welcome to the Computer Dating Wizard.
					This program probes the
					<Italic>Inner You</Italic> to
					match you with the mate of your dreams.
				</Paragraph>
				<Pragraph>
					To begin, click the Begin button.
				</Pragraph>
			</FlowDocument>
		</FlowDocumentScrollViewer>

		<!-- 오른쪽 아래 구석에 위치한 탐색 버튼 -->
		<Grid Grid.Row="2">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Button Grid.Column="1" Click="BeginButtonOnClick" MinWidth="72" Margin="6" Content="Begin &gt;" />
		</Grid>
	</Grid>
</Page>

이 페이지를 출력하는 Frame은 COmputerDatingWizard.xaml에서 지정된 전체 크기에서 Frame 상단에 위치한 TextBlock 의 크기를 뺀 나머지 고정된 크기를 가지고 있다. 하지만 각 페이지에 있는 탐색 버튼은 클라이언트 영역 하단에 위치해야 한다. 따라서 WizardPage().xaml 내의 Grid는 첫째와 셋째 행의 크기를 Auto로 설정하고, 둘째 행이 나머지 영역을 점유하도록 3개의 행을 정의한다. FlowDocumentScrollViewer는 첫째 행을 사용하고, 셋째 행은 파일 하단에 정의된 Grid 패널에 의해 점유된다. 둘째 행을 특별히 사용하진 않지만, 그것이 존재함으로써, 셋째 행을 하단에 위치시킬 수 있다. 이것과 비슷하게 하단의 Grid는 2개의 열을 정의하는데, 첫째 열이 나머지 영역 모두를 점유하게 하고, 둘째 열의 너비를 Auto로 지정함으로써 둘째 열에 위치한 Begin 버튼을 오른쪽 끝에 위치하게 한다. 

버튼이 창의 같은 위치에 놓일 수 있도록 이 방법은 프로젝트 전체를 통해 사용된다. 

다음 WizardPage()의 코드 비하인드 파일은 Begin 버튼의 이벤트 핸들러를 구현한다. 



using System;
using System.Windows;
using System.Windows.Control;


public partial class WizardPage0
{
	public WizardPage0()
	{
		InitializeComponent();
	}
	void BeginButtonOnCLick(object sender, RoutedEventArgs args)
	{
		if(NavigationService.CanGoForward)
			NavigationService.GoForward();
		else
		{
			Vitals vitals = new Vitals();
			WizardPage1 page = new WizardPage1(vitals);
			NavigationService.Navigate(page);
		}
	}
}

사용자는 WizardPage0 페이지를 2가지 형태로 볼 수 있다. 첫째 프로그램을시작했을 때 볼 수 있으며, 둘째 두 번째 페이지(WizardPage1.xaml)에서 Previous 버튼을 눌렀을 때 볼 수 있다. 프로그램은 Navigate 메소드를 사용해 페이지 사이를 이동하기 때문에 페이지는 저널(journal)에 축적된다. NavigationWindow, Frame, NavigationServices 클래스 모두 이 저널이 이전 페이지로 이동할 경로나 앞으로 가기 버튼을 클릭해 이미 방문했던 페이지를 다시 방문할 만한 경로가 있는지 여부를 확인할 수 있는 2개의 프로퍼티를 정의한다. 이 프로퍼티는 CanGoBack와 CanGoForward이며 NavigationWindow, Frame, NavigationServices 클래스는 실제 페이지로 이동하는 GoBack, GoForward 메소드도 제공한다. 

사용자가 마법사를 시작하면 WizardPage0.xaml에서 Begin 버튼을 누르고 WizardPage1.xaml에서 Previous 버튼을 누른다. 그 후 다시 WizardPage0.xaml의 Begin 버튼을 누르면 Begin 버튼의 Click 핸들러는 CanGoForward 프로퍼티가 true이기 때문에 페이지 사이에 이전에 어떤 일이 벌어졌었는지 알 수 있다. 따라서 Click 핸들러는 WizardPage1.xaml 로 가기 위해 GoForward메소드를 호출한다. GoBack, GoFoward(호출 가능할 때)를 호출하면 사용자의 입력을 그대로 보존한 채 이미 이전에 생성된 페이지를 방문할 수 있다는 장점이 있다. 

CanGoForward가 false일 때는 사용자가 WizardPage0.xaml를 처음 보는 것이기 때문에 사용자가 Begin 버튼을 누르면 WizardPage0 클래스는 Vitals 타입의 객체를 생성하고 이 객체를 마법사 전체에서 유지한다. 그후 핸들러는 WizardPage1 타입의 객체를 생성하고 Vitals 객체를 WizardPage1의 생성자에게 넘긴 후 그 페이지를 탐색한다. 

다음 XAML 파일은 WizardPage1 클래스의 레이아웃을 담당한다. 

<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.ComputerDatingWizard.WizardPage1">
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="50*" />
			<ColumnDefinition Width="50*" />
		</Grid.ColumnDefinitions>

		<!-- Name을 위한 TextBox -->
		<StackPanel Orientation="Horizontal" Grid.ColumnSpan="2" Margin="12">
			<Label>
				Name:
			</Label>
			<TextBox Name="txtboxName" Width="200" />
		</StackPanel>

		<!-- Home을 위한 GroupBox -->
		<GroupBox Grid.Row="1" Grid.Column="0" Name="grpboxHome" Header="Home" Margin="12">
			<StackPanel>
				<RadioButton Content="House" Margin="6" IsChecked="True" />
				<RadioButton Content="Apartment" Margin="6" />
				<RadioButton Content="Cave" Margin="6" />
			</StackPanel>
		</GroupBox>

		<!-- Gender를 위한 GroupBox -->
		<GroupBox Grid.Row="1" Grid.Column="1" Name="grpboxGender" Header="Gender" Margin="12" >
			<StackPanel>
				<RadioButton Content="Male" Margin="6" IsChecked="True" />
				<RadioButton Content="Female" Margin="6" />
				<RadioButton Content="Flexible" Margin="6" />
			</StackPanel>
		</GroupBox>

		<!-- 오른쪽 아래 구석에 위치한 탐색 버튼 -->
		<Grid Grid.Row="3" Grid.ColumnSpan="2" >
			<Grid.ColumnDefintions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefintion Width="Auto" />
			</Grid.ColumnDefinitions>
			<Button Grid.Column="1" Click="PreviousButtonOnClick" MinWidth="72" Margin="6" Content="&lt; Previous" />
			<Button Grid.Column="2" Click="NextButtonOnClick"  MinWidth="72" Margin="6" Content="Next &gt;" />
		</Grid>
	</Grid>
</Page>


이 페이지는 1개의 TextBox와 3개의 RadioButton 컨트롤이 있는 2개의 GroupBox 컨트롤을 포함한다. 또한 하단에는 Previous, Next 버튼이 있다. 

WizardPage1 클래스의 코드 비하인드 파일에서 생성자는 InitializeComponent를 호출한 후(이외에 페이지를 생성하는 코드에서 그 페이지에 대한 InitializeComponent를 호출할 수도 있다) 인자로 받은 Vitals 객체를 필드에 저장한다. 


using System;
using System.Windows;
using System.Windows.Control;

public partial class WizardPage1 : Page
{
	Vitals vitals;

	//생성자
	public WizardPage1(Vitals vitals)
	{
		InitializeComponent();
		this.vitals = vitals;
	}
	//Previous와 Back 버튼의 이벤트 핸들러
	void PreviousButtonOnClick(object sender, RoutedEventArgs args)
	{
		NavigationService.GoBack();
	}
	void NextButtonOnClick(object sender, RoutedEventArgs args)
	{
		vitals.Name = txtboxName.Text;
		vitals.Home = Vitals.GetCheckedRadioButton(grpboxHome).Content as string;
		vitals.Gender = Vitals.GetCheckedRadioButton(grpboxGender).Content as string;

		if(NavigationService.CanGoForward)
			NavigationService.GoForward();
		else
		{
			WizardPage2 page = new WizardPage2(vitals);
			NavigationService.Navigate(page);
		}
	}
}

Previous 버튼은 이벤트 핸들러에서 GoBack을 간단히 호출하는 것으로 구현 가능하며, GoBack을 호출하면 항상 WizardPage0.xaml 로 이동한다. 왜냐하면 이 페이지가 WizardPage1.xaml로 갈 수 있는 유일한 통로이기 때문이다. 

Next 버튼의 이벤트 핸들러는 페이지에서 사용자 입력을 받고 정보를 Vitals 객체에 저장한다. 이 이벤트 핸들러가 페이지에서 사용자가 입력한 정보를 저장할 수 있는 마지막 단계이다. 물론 사용자가 페이지로 다시 돌아올 수도 있지만 어차피 마법사를 계속 진행하려면 Next 버튼을 다시 누를 수밖에 없기 때문에 이 시점에서 수정된 정보를 저장할 수 있다. 

Next 이벤트 핸들러는 그 다음 WizardPage0에서 WizardPage1로 이동했던 것처럼 WizardPage2 클래스로 이동한다. 하지만 이 단계에서 사용자에게 입력받은 라디오 버튼 그룹의 선택에 따라 경로를 다르게 할 수도 있을 것이다. 

WizardPage2 클래스를 시작하는 다음의 XAML 파일을 살펴보자. 			


<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.ComputerDatingWizard.WizardPage2" >
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>

		<!-- 원하는 운영체제를 위한 TextBox -->
		<TextBlock Grid.Row="0" Margin="0, 12, 0, 0">
			Favorite operating system:
		</TextBlock>
		<TextBox Grid.Row="1" Name="txtboxFavoriteOS" Text="Microsoft Windows Vista, of course!" />

		<!-- 원하는 디스크의 디렉토리를 위한 TextBox -->
		<TextBlock Grid.Row="2" Margin="0, 12, 0, 0" >
			Favorite disk directory:
		</TextBlock>
		<TextBox Grid.Row="3" Name="txtboxFavoriteDir" Text="C:\" />
		<Button Grid.Row="4" Click="BrowseButtonOnClick" HorizontalAlignment="Right" MinWidth="72" Margin="0, 2, 0, 0" Content="Browse..." />

		<!-- 오른쪽 아래 구석에 위치한 탐색 버튼 -->
		<Grid Grid.Row="6" >
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Button Grid.Column="1" Click="PreviousButtonOnClick" MinWidth="72" Margin="6" Content="&lt; Previous" />
			<Button Grid.Column="2" Click="NextButtonOnClick" MinWidth="72" Margin="6" Content="Next &gt;" />
		</Grid>
	</Grid>
</Page>

이 페이지는 여느 페이지와는 약간 다른데 일반적인 Previous 와 Next 버튼 이외에 사용자가 원하는 디스크 디렉토리를 입력하는 TextBox와 Browse 버튼이 있다. 쉽게 추측 가능하듯이 TextBox에 직접 디렉토리를 입력할 필요는 없고 Browse 버튼을 클릭한 후 TreeView 컨트롤을 가진 창이나 페이지가 나타나면 거기서 사용자가 원하는 디렉토리를 선택하면 된다. 

Browse 버튼을 누르는 것은 물론 옵션이기 때문에 이 기능은 마법사 본래의 기능과는 별개이다. 다만 Browse 버튼은  2가지 방법으로 처리할 수 있는데 하나는 ComputerDatingWizard 창 위에 별도의 모달 대화상자를 띄우는 것이고, 다른 하나는 페이지 상에서 다른 마법사의 페이지와 같이 구현하는 방법이다. 여기서는 후자가 사용됐다. 

Browse 버튼을 통해 띄운 창이나 페이지는 반드시 반환값을 넘겨야 한다. 이 경우 반환값은 DirectoryInfo 값이 가장 적절할 것이다. 이 값은 WizardPage2 속의 코드에서 반환돼야 하며, WizardPage2는 그 반환된 값을 이용해 TextBox에 선택된 디스크 디렉토리 경로를 입력할 수 있으며, 대화상자를 사용할 경우에는 이 정보를 위한 프로퍼티를 정의해 그 값을 얻어올 수 있으며, DialogResult 프로퍼티로 사용자의 OK, Cancel 버튼의 클릭 여부를 알 수 있다. Page 클래스에서도 마찬가지로 DirectoryInfo 프로퍼티를 정의할 수 있지만 페이지에서 값을 반환하는 것은 약간 복잡하다. 왜냐하면 이 페이지는 마법사 페이지 탐색에서 약간 예외적이므로 주요 탐색 경로에서는 빼야 하기 때문이다. 다시 말하면 이 페이지를 방문하고 WizardPage2.xaml에서 GoForward를 호출하더라도 다시 이 페이지를 탐색하는 일이 없어야 한다. 

이 과정은 Page를 상속받은 PageFunction이라는 클래스에서 수행된다. PageFunction은 값을 반환하는 페이지를 띄우는 것이 목적이며, 제너릭(Generic)클래스이기 때문에 클래스의 정의 부분에는 클래스에서 반환할 데이터의 타입이 정의돼야 한다. 또한 PageFunction은 이동경로를 수정해 마법사가 원래의 경로를 벗어나 이 페이지를 반복 호출하게 하지 않는다. 

TreeView를 보여주기 위해 PageFunction을 상속받은 클래스는 DirectoryInfo 타입의 객체를 반환하기 때문에 DirectoryPage로 이름 붙였다. 다음 DirectoryPage.xaml을 살펴보자. 


<PageFunction xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:io="clr-namespace:System.IO; assembly=mscorlib" xmlns:tree="clr-namespace:Petzold.RecurselDirectoriesIncrementally"
	x:Class="Petzold.ComputerDatingWizard.DirectoryPage" x:TypeArguments="io:DirectoryInfo">
	<Grid>	
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		
		<TextBlock Grid.Row="0" FontSize="16" FontStyle="Italic" HorizontalAlignment="Center">
			Computer Dating Wizard
		</TextBlock>

		<tree:DirectoryTreeView x:Name="treevue" Grid.Row="1" />

		<!-- 오른쪽 아래 구석에 위치한 탐색 버튼 -->
		<Grid Grid.Row="2">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
			<Grid.ColumnDefintions>
			<Button Grid.Column="1" Click="CancelButtonOnClick" IsCancel="True" MinWidth="60" Margin="6" >
				Cancel
			</Button>
			<Button Grid.Column="2" Name="btnOk" Click="OkButtonOnClick" IsEnabled="False" IsDefault="True" MinWidth="60" Margin="6">
				OK
			</Button>
		</Grid>
	</Grid>
</PageFunction>

루트 엘리먼트상의 x:Class 속성은 여느 때와 같이 클래스의 이름을 정의한다. 하지만 PageFunction은 제너릭 클래스이기 때문에 루트 엘리먼트는 제너릭 타입을 명시하는 x:TypeArguments 속성이 필요하며, 그것이 여기서는 DirectoryInfo로 설정됐다. 따라서 이 DirectoryInfo가 정의된 System.IO의 네임스페이스 접두어 선언 역시 필요하다. 또한 tree 접두어의 경우는 16장의 RecurseDirectoriesIncrementally 프로젝트와 연결돼 있다. RecurseDirectoriesIncrementally 프로젝트에 이 페이지의 대부분을 차지하는 DirectoryTreeView가 존재한다. 마지막으로 PageFunction은 Cancel과 OK 버튼을 생성한다. 

DirectoryPage를 위한 다음의 DirectoryPage.cs를 살펴보자. 

using Petzold.RecurseDirectoriesIncrementally;
using System;
using System.IO;
using System.Windows;
using System.Windows.Control;
using System.Windows.Navigation;

public partial class DirectoryPage : PageFunction<DirectoryInfo>
{
	//생성자
	public DirectoryPage()
	{
		InitializeComponent();
		treevue.SelectedItemChanged += TreeViewOnSelectedItemChanged;
	}
	//OK 버튼을 활성화시키는 이벤트 핸들러
	void TreeViewOnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> args)
	{
		btnOk.IsEnabled = args.NewValue != null;
	}
	//Cancel 과 OK 버튼의 이벤트 핸들러
	void CancelButtonOnClick(object sender, RoutedEventArgs args)
	{
		OnReturn(new ReturnEventArgs<DirectoryInfo>());
	}
	void OkButtonOnClick(object sender, RoutedEventArgs args)
	{
		DirectoryInfo dirinfo = (treevue.SelectedItem as DirectoryTreeViewItem).DirectoryInfo;
		OnReturn(new ReturnEventArgs<DirectoryInfo>(dirinfo));
	}
}

생성자에서 DirectoryTreeView 컨트롤에 SelectionChanged 이벤트 핸들러를 연결하기 때문에 디렉토리가 선택되었을 때만 OK 버튼을 활성화시키는 것이 가능하다. 또한 생성자가 인자를 가지면 이 페이지를 호출한 페이지에서 정보를 인자로 받아 자기 자신을 초기화할 수도 있을 것이다. 

PageFunction 을 상속한 클래스는 반환할 객체의 타입이 필요한 제너릭 클래스 ReturnEventArgs를 인자로 OnReturn 을 호출한 후 종료된다. 반환되는 객체 그 자체는 ReturnEventArgs의 생성자로 전달되며 Cancel 버튼을 눌렀을 때는 인자를 전달하지 않는다. PageFunction이 종료될 때 RemoveFromJournal 프로퍼티는 기본적으로 true로 설정돼 있기 때문에 자동적으로 페이지 탐색 히스토리에서 자신을 삭제하므로 마법사의 주요 탐색 경로에서 빠지게 된다. 

WizardPage2 클래스 속 Browse 버튼의 Click 이벤트 핸들러는 다음의 WizardPage2.cs 코드 비하인드 파일에서 구현된다. 


using System;
using System.IO;
using System.Windows;
using System.Windows.Control;
using System.Windows.Navigation;

public partial class WizardPage2
{
	Vitals vitals;

	//생성자
	public WizardPage2(Vitals vitals)
	{
		InitializeComponent();
		this.vitals = vitals;
	}

	//Browse 버튼 이벤트 핸들러
	void BrowseButtonOnCLick(object sender, RoutedEventArgs args)
	{
		DirectoryPage page = new DirectoryPage();
		page.Return += DirPageOnReturn;
		NavigationService.Navigate(page);
	}
	void DirPageOnReturn(object sender, ReturnEventArgs<DirectoryInfo> args)
	{
		if(args.Result != null)
			txtboxFavoriteDir.Text = args.Result.FullName;
	}
	//Previous와 Back 버튼 이벤트 핸들러
	void PreviousButtonOnClick(object sender, RoutedEventArgs args)
	{
		NavigationService.GoBack();
	}
	void NextButtonOnClick(object sender, RoutedEventArgs args)
	{
		vitals.FavoriteOS = txtboxFavoriteOS.Text;
		vitals.Directory = txtboxFavoriteDir.Text;
	
		if(NavigationService.CanGoForward)
			NavigationService.GoForward();
		else
		{
			WizardPage3 page = new WizardPage3(vitals);
			NavigationService.Navigate(page);
		}
	}
}

사용자가 Browse 버튼을 클릭하면 이벤트 핸들러는 DirectoryPage 객체를 생성하고 Return 이벤트 핸들러를 설정한 후 DirectoryPage 페이지를 탐색한다. Return 이벤트 핸들러는 PageFunction이 반환한 값을 ReturnEventArgs의 인자인 Result 프로퍼티에서 얻는다. 알다시피 PageFunction 의 파생 클래스인 DirectoryPage를 위한 Result 프로퍼티의 객체 타입은 DirectoryInfo인데, 이것은 사용자가 선택한 디스크 디렉토리를 나타낸다. 반면 사용자가 Cancel 버튼을 클릭할 경우에 이 객체는 null이 된다. 마지막으로 이벤트 핸들러는 이 디렉토리의 이름을 TextBox에 입력한다. 

WizardPage2.cs의 나머지 부분은 사용자의 입력을 저장하고 다음 WizardPage3.xaml을 탐색하는 일반적인 Next 버튼 핸들러이다. 

WizardPage3.xaml 페이지는 Next 버튼 대신 마지막 페이지임을 알리는 Finish 버튼으로 바뀐 것 이외에는 WizardPage1.xaml과 유사하다. 이전과 마찬가지로 XAML 파일에서 다음과 같이 컨트롤과 버튼의 배치가 결정된다. 