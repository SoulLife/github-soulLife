CHAPTER22 : 창, 페이지, 탐색

22장의 이전에는 주로 작은 규모의 스탠드얼론 XAML에 주로 사용되는 XAML의 다양한 기능을 소개했다. 이 XAML 파일은 당연히 중요한 기술을 제공한다. 하지만 작은 것에 극단적으로 집중하다 보면 큰 그림을 놓치게 되는 것이 사실이다. 따라서 22장에서는 XAML와 C# 코드를 결합해 메뉴와 대화상자를 모두 갖춘 완전한 프로그램을 다루기로 한다. 

이 전통적인 WPF 프로그램을 소개하는 또 다른 이유는 이것을 WPF 네비게이션 애플리케이션과 비교해보기 위함이다. 하나의 애플리케이션 창을 가지고 메뉴와 대화상자를 통해 사용자의 입력과 명령으로 동작하는 일반적인 애플리케이션과는 달리 WPF 네비게이션 애플리케이션은 하이퍼링크를 통해 창(혹은 창의 일부분)의 내용을 바꾸면서 마치 웹사이트와 연결된 페이지 같이 동작한다. 따라서 이런 애플리케이션은 클라이언트 애플리케이션이지만 웹 애플리케이션과 매우 흡사하게 동작한다. 

22장에서는 또한 WPF 애플리케이션을 배포하기 위한 3가지 파일 형식에 대해 알아볼 것이다. 첫 번째는 물론 전통적인 .exe 형식이다. 이전의 .exe 파일로 결과가 생성되는 다양한 WPF 애플리케이션을 기억할 것이다. 나머지는 XAMl Cruncher(혹은 유사 프로그램)에서 개발돼 인터넷 익스플로러에서 호스팅되는 스탠드얼론 XAML 파일 형태이다. 

이 두 유형 사이에 파일확장자.xbap을 갖는 XAML 브라우저 애플리케이션이 존재한다. 이름이 의미하고 있듯이 XAML 브라우저 애플리케이션은 스탠드얼론 XAML 파일과 같은 형태로 인터넷 익스플로러에서 호스팅된다. 이것은 XAML과 C# 코드로 이루어져 있으며 컴파일된다. 또한 이것은 인터넷 익스플로러의 내에서 실행되기 때문에 보안 설정이 애플리케이션이 할 수 있는 일을 제한한다. 쉽게 말하면 근본적으로 사용자의 컴퓨터에 해를 끼칠 가능성이 있는 일은 할 수 없으며, 그렇기 때문에 기존 ActiveX와는 달리 특별한 권한 요청이 필요 없다. 

그럼 이제 .exe 파일로 배포되는 전통적인 형태의 애플리케이션을 보자. 앞으로 볼 프로그램은 태블릿 PC에서 스타일러스 펜의 입력을 받고 그것을 화면에 보여주는 InkCanvas를 이용할 것이다. InkCanvas는 태블릿 PC 뿐만 아니라 일반 컴퓨터의 마우스 입력에도 반응하며, 다음의 간단한 스탠드얼론 XAML 파일을 실행하는 것으로 쉽게 동작해 볼 수 있다. 

<InkCanvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  />

원래 이 프로그램을 여러 페이지에 그림을 그릴수 있도록 노란색의 작은 노트패드를 닮은 형태로 만들생각 이었지만, 여러 페이지를 저장하려면 특별한 파일 형식이 필요하기 때문에 하나의 페이지만 나오게 제한했다. 다만 이름은 기존에 정한 프로젝트 이름이 YellowPad였기 때문에 그냥 사용하기로 결정했다. 

YellowPadWindow.xaml 파일은 메인 애플리케이션 창을 구성한다. 이 파일의 대부분은 프로그램의 메뉴를 정의하며, 각 메뉴는 계층적으로 구성된 MenuItem 타입의 엘리먼트가 필요하고 DockPanel 위쪽에 도킹될수 있도록 Menu 엘리먼트로 감싸야 한다. 몇 가지 메뉴 항목은 Command 프로퍼티를 ApplicationCommands의 정적 프로퍼티인 New, Open, Save로 설정하지만 그외 다른 것들은 Click 이벤트로 설정한다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:src="clr-namespace:Petzold.YellowPad" x:Class="Petzold.YellowPad.YellowPadWindow" Title="Yellow Pad" SiztToContent="WidthAndHeight" >

	<DockPanel>
		<Menu DockPanel.Dock="Top">

			<!-- File 메뉴 -->	
			<MenuItem Header="_File">
				<MenuItem Header="_New" Command="New" />
				<MenuItem Header="_Open..." Command="Open" />
				<MenuItem Header="_Save..." Command="Save" />
				<Separator />
				<MenuItem Header="E_xit" Command="Close" />
			</MenuItem>

			<!-- Edit 메뉴 -->
			<MenuItem Header="_Edit" SubmenuOpened="EditOnOpened">
				<MenuItem Header="Cu_t" Command="Cut" />
				<MenuItem Header="_Copy" Command="Copy" />
				<MenuItem Header="_Paste" Command="Paste" />
				<MenuItem Header="_Delete" Command="Delete" />
				<Separator />
				<MenuItem Header="Select _All" Command="SelectAll" />
				<MenuItem Header="_Format Selection..." Name="itemFormat" Click="FormatOnClick" />
			</MenuItem>

			<!-- Stylus-Mode 메뉴 -->
			<MenuItem Header=_Stylus-Mode" SubmenuOpened="StylusModeOnOpened">
				<MenuItem Header="_Ink" Click="StylusModeOnClick" Tag="{x:Static InkCanvasEditingMode.Ink}" />
				<MenuItem Header="Erase by_Point" Click="StylusModeOnClick" Tag="{x:Static InkCanvasEditingMode.EraseByPoint}" />
				<MenuItem Header="_Erase by Stroke" Click="StylusModeOnClick" Tag="{x:Static 					InkCanvasEditingMode.EraseByStroke}"/>
				<MenuItem Header="_Select" Click="StylusModeOnClick" Tag="{x:Static InkCanvasEditingMode.Select}" />
			</MenuItem>
			
			<!-- Eraser-Mode 메뉴(태블릿 PC가 아닐 경우에 숨김) -->
			<MenuItem Header="E_raser-Mode" SubmenuOpened="EraserModeOnOpened" Name="menuEraserMode">
				<MenuItem Header="_Ink" Click="EraserModeOnClick" Tag="{x:Static InkCanvasEditingMode.Ink}" />
				<MenuItem Header="_Erase by _Point" Click="EraserModeOnClick" Tag="{x:Static InkCanvasEditingMode.Point}"
				<MenuItem Header="_Erase by Stroke" Click="EraserModeOnClick" Tag="{x:Static 					InkCanvasEditingMode.EraseByStroke}"/>
				<MenuItem Header="_Select" Click="EraserModeOnClick" Tag="{x:Static InkCanvasEditingMode.Select}" />
			</MenuItem>

			<!-- Tools 메뉴 -->
			<MenuItem Header="_Tools">
				<MenuItem Header="_Stylus..." Click="StylusToolOnClick" />
				<MenuItem Header="_Eraser..." Click="EraserToolOnClick" />
			</MenuItem>
		
			<!-- Help 메뉴 -->
			<MenuItem Header="_Help" >
				<MenuItem Header="_Help..." Command="Help" />
				<MenuItem Header="_About YellowPad..." Click="AboutOnClick"/>
			</MenuItem>

			<!-- InkCanvas 엘리먼트가 ScrollVierew에 속함 -->
			<ScrollViewer VerticalScrollBarVisibility="Auto">
				<InkCanvas Name="inkcanv" Width="{x:Static src:YellowPadWindow.widthCanvas}" Height="{x:Static 					src:YellowPadWindow.heightCanvas}" Background=LemonChiffon">
					<Line Stroke="Red" X1="0.875in" Y1="0" X2="0.875in" Y2="{x:Static src:YellowPadWindow.heightCanvas}" />
					<Line Stroke="Red" X1="0.9375in" Y1="0" X2="0.9375in" Y2="{x:Static src:YellowPadWindow.heightCanvas}" />
				</InkCanvas>
			</ScrollViewer>
		</DockPanel>

	<!-- 모든 CommandBinding 객체를 모음 -->
	<Window.CommandBindings>
		<CommandBinding Command="New" Executed="NewOnExecuted" />
		<CommandBinding Command="Open" Executed="OpenOnExecuted" />
		<CommandBinding Command="Save" Executed="SaveOnExecuted" />
		<CommandBinding Command="Close" Executed="CloseOnExecuted" />
		<CommandBinding Command="Cut" CanExecute="CutCanExecute" Executed="CutOnExecuted" />
		<CommandBinding Command="Copy" CanExecute="CutCanExecute" Executed="CopyOnExecuted" />
		<CommandBinding Command="Paste" CanExecute="PasteCanExecute" Executed="PasteOnExecuted" />
		<CommandBinding Command="Delete" CanExecute="CutCanExecute" Executed="DeleteOnExecuted" />
		<CommandBinding Command="SelectAll" Executed="SelectAllOnExecuted" />
		<CommandBinding Command="Help" Executed="HelpOnExecuted" />
	</Window.CommandBindings>
</Window>

메뉴 정의의 뒷 부분에서 DockPanel의 내부는 InkCanvas를 감싼 ScrollViewer로 설정했으며, 배경색으로 LemonChiffon을 설정하고 2개의 붉은 수직선을 넣었다(파란색 수평선은 나중에 나옴)InkCanvas의 가로 크기는 YellowPadWindow 클래스의 정적 멤버로 설정하며(이 클래스는 다음 C# 파일에 정의돼 있다) 마지막 부분에 메뉴의 Command 프로퍼티를 CanExecute와 OnExecuted 핸들러와 연결하는 CommandBinding 엘리먼트를 볼 수 있다. 

YellowPadWindow의 C# 부분을 6개의 파일로 분리했는데, 하나는 YellowPadWindow.cs이고 나머지는 YellowPadWindow.File.cs와 같이 최상위 메뉴의 항목이 확장자 앞에 붙는 형태로 만들었다. 

다음 YellowPadWindow.cs 파일은 YellowPadWindow.xaml 안에서 참조되는 InkCanvas의 크기를 설정하기 위한 public, static, read-only 필드의 정의를 시작으로 구성된다. 


using System;
using System.Windows;
using System.Windows.Control;
using System.Windows.Ink;
using System.Windows.Input
using System.Windows.Media;
using System.Windows.Shapes;


public partial class YellowPadWindow : Window
{
	//노트패드의 크기를 5 X 7인치로 지정
	public static readonly double widthCanvas = 5 * 96;
	public static readonly double heightCanvas = 7 * 96;

	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new YellowPadWindow());
	}
	public YellowPadWindow()
	{
		InitializeComponent();

		//파란색 수평선을 1/4 인치 간격으로 그림
		double y = 96;

		while( y < heightCanvas)
		{
			Line line = new Line();
			line.X1 = 0;
			line.Y1 = y;
			line.X2 = widthCanvas;
			line.Y2 = y;
			line.Stroke = Brushes.LightBlue;
			inkcanv.Children.Add(line);

			y += 24;
		}
		//태블릿이 나타나지 않을 경우 Eraser-Mode 메뉴를 비활성화시킴
		if(Tablet.TabletDevices.Count == 0)
			menuEraserMode.Visibility = Visibility.Collapsed;
	}
}

YellowPadWindow 생성자는 (당연히) InitializeComponent를 호출하고 노트패드에 1/4인치 간격으로 수평선을 긋는다. Line 엘리먼트를 XAML 에 넣을까도 고민했지만 반복적인 코드를 마크업에 넣기 싫었고, 어차피 수직 크기가 변할 경우 이것도 유동적으로 달려져야 하기때문에 이것을 C# 코드에 넣었다. 

생성자는 프로그램이 태블릿 PC에서 실행되지 않을 경우에 최상위 메뉴 하나를 비활성화 시킨다. 하지만 이 메뉴가 없어도 일반 컴퓨터에서 특별히 제한되는 기능은 없다. 

사용자가 스타일러스 펜이나 마우스로 InkCanvas에 그리면 InkCanvas는 Stroke 객체 컬렉션인 StrokeCollection 타입의 Strokes 프로퍼티에 입력을 저장한다. (InkCanvas는 System.Windows.Controls 네임스페이스에 정의돼 있지만 Stroke와 StrokeCollection은 System.Windows.Ink에 정의돼 있음) 태블릿 PC에서 선(stroke)은 사용자가 화면을 스타일러스 펜으로 건드리고 움직인후 뗄 때 그려진다. 또한 마우스를 사용할 때는 왼쪽 마우스를 누른 상태에서 마우스를 움직이고 왼쪽 마우스를 뗄 때 그려진다. 둘 다 InkCanvas는 스타일러스 펜이나 마우스의 움직임에 따라 화면에 선을 그린다. 

컴퓨터 그래픽 용어 속에서 선은 기본적으로 점의 연속에 의해 연결된 선인 폴리라인 이다. 따라서 Stroke 객체는 StylusPoint 객체들의 컬렉션인 StylusPointCollection 타입의 StylusPoints 프로퍼티를 가진다.(StylusPoint와 StylusPointCollection은 System.Windows.Input 네임스페이스에 정의돼 있다) StylusPoint 구조체에는 점의 좌표를 나타내는 X, Y 프로퍼티 그리고 화면에 스타일러스 펜의 압력을 저장하는 PressureFactor 프로퍼티가 있다. InkCanvas는 기본적으로 이 압력이 높으면 굵은 선을 그린다(마우스를 사용할 때는 해당되지 않는다)

미래의 태블릿 PC는 압력과 위치 이외에도 스타일러스 펜의 추가적인 정보를 저장할 것이다. 이 정보가 StylusPoint의 Description 프로퍼티를 통해 다뤄진다. 그리고 StylusPointProperties의 정적 읽기 전용 필드를 살펴보면 앞으로 어떤 정보가 저장될지 감을 잡을 수 있다. 

StylusPoints 프로퍼티 외에 Stroke 클래스는 DrawingAttributes 프로퍼티를 정의하는데, 각 선은 자체 색상을 가지며 이 색상이 DrawingAttributes 객체에 있다. 또한 DrawingAttributes는 스타일러스 펜과 마우스로 그리는 선의 높이와 폭을 나타내는 Width와 Height를 포함하며 이 두 값은 효과에 따라 달라진다. 스타일러스 펜의 촉은 PenTip 프로퍼티에 저장되며 사각이거나 타원형일 수도 있고 2개를 번갈아 사용할 수도 있다. InkCanvas는 현재 선에 적용되는 DrawingAttributes를 DefaultDrawingAttributes에 저장한다. 

StrokeCollection은 선의 컬렉션을 Ink Serialized Format(ISF)형식으로 저장하는 Save 메소드를 정의하고, 이것의 생성자는 ISF 파일을 업로드한다. Ink Serialized Format 형식은 태블릿 PC 소프트웨어 개발 키트의 1.7 버전상에서 지원되며 Windows Forms와 Win32 API로 개발된 태블릿 PC 애플리케이션과도 호환된다. 

YellowPadWindow의 YellowPadWindow.File.cs 에서는 File 메뉴 하위의 4가지 항목을 처리한다. 프로그램 코드를 짧게 하기 위해 로드한 파일을 저장하는 것을 생략했으며, 파일을 저장하지 않고 프로그램을 종료할 때 사용자에게 저장 여부를 묻는 부분도 역시 넣지 않았다. 
Open과 Save 명령은 대부분 Ink Serialized Format을 사용해 입력과 출력을 처리한다. 

using Microsoft.Win32;
using System;
using System.IO;
using System.Windows;
using System.Windows.Ink;
using System.Windows.Markup
using System.Windows.Media;
using System.Windows.Input


public partial class YellowPadWindow: Window
{
	//File New 커맨드 : 모든 선을 지움
	void NewOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		inkcanv.Strokes.Clear();
	}
	//File Open 커맨드 : OpenFileDialog를 열고 ISF 파일을 로드
	void OpenOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		OpenFileDialog dlg = new OpenFileDialog();
		dlg.CheckFileExiste = true;
		dlg.Filter = "Ink Serialized Format (*.isf) |*.isf|" + All files (*.*) | *.*";

		if((bool)dlg.ShowDialog(this))
		{
			try
			{
				FileStream file = new FileStream(dlg.FileName, FileMode.Open, FileAccess.Read);
				inkcanv.Strokes = new StrokeCollection(file);
				file.Close();
			}catch(Exception exc)
			{
				MessageBox.Show(exc.Message, Title);
			}
		}
	}
	//FIle Save 커맨드: SaveFileDialog를 띄움
	void SaveOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		SaveFileDialog dlg = new SaveFileDialog();
		dlg.Filter = "Ink Serialized Format (*.isf)|*.isf|" + "XAML Drawing File (*.xaml)|*.xaml|" + "All files (*.*)|*.*";

		if((bool)dlg.ShowDialog(this))
		{
			try
			{
				FileStream file = new FileStream(dlg.FileName, FileMode.Create, FileAccess.Write);
			
				if(dlg.FilterIndex == 1 || dlg.FilterIndex == 3)
					inkcanv.Strokes.Save(file);
				else
				{
					//DrawingGroup 객체로 선을 저장
					DrawingGroup drawgrp = new DrawingGroup();

					foreach(Stroke strk in inkcanv.Strokes)
					{
						Color clr = strk.DrawingAttributes.Color;

						if(strk.DrawingAttributes.IsHeightlighter)
							clr = Color.FromArgb(128, clr.R, clr.G, clr.B);
						drawgrp.Children.Add(new GeometryDrawing(new SolidColorBrush(clr), null, strk.GetGeometry()));
					}		
				XamlWriter.Save(drawgrp, file);

				}
				file.Close();
			}catch(Exception exc)
			{
				MessageBox.Show(exc.Message, Title);
			}
		}
	}
	//File Exit 항목 : 창을 닫음
	void CloseOnExecuted(object sender, ExecutedRoutedEventArgs args)
	{
		Close();
	}
}

앞에서 보듯이 SaveFileDialog는 "XAML Drawing File"로 선을 저장하는 옵션을 포함하는데, 이것은 약간의 추가 설명이 필요하다. 

그래픽 프로그래밍에서 스타일러스 펜을 사용할 수 있다는 점이 태블릿 PC의 가장 매력적인 요소이다. Stroke 클래스는 Geometry 타입의 객체를 반환하는 GetGeometry 메소드를 정의함으로써 스타일러스 펜을 사용할 수 있게 한다. 28장에서 Geometry 객체를 살펴보겠지만 여기서 알아두어야 할 것은 가장 보편화된 형태의 Geometry는 연결, 비연결된 직선과 커브의 집합인 기존의 그래픽 패스와 꽤 흡사하다는 것이다. 실제적으로 Stroke의 GetGeometry 메소드가 반환하는 Geometry 객체는 단지 선을 정의하는 폴리라인이 아니라 스타일러스 펜 촉의 크기, 모양, 화면에 대한 스타일러스 펜의 압력을 고려해 그린 선에 대한 아웃라인(outline)이라 할 수 있다. 

Geometry는 순수하게 분석에 입각한 점과 선, 커브 등으로 이루어진 기하학이다. 외곽선 브러시(outline brush), 채우기 브러시(fill brush)와 조합된 Geometry는 GeometryDrawing 타입의 객체이다. 따라서 SaveOnExecuted 메소드의 추가적인 메소드는 각 Stroke의 Geometry를 특정 색으로 칠하기 위한 DrawingAttributes를 사용한다. 각 GeometryDrawing 객체는 Stroke 객체와 대응되고 이것은 DrawingGroup 객체에서 조립되는데, 이것을 XamlWriter.Save 메소드를 사용해 저장하는 것이다. (GeometryDrawing과 DrawingGroup 둘 다 추상 Drawing 객체에서 상속되었으며, 31장에서 이 개념을 자세히 보도록 하겠다. )

그럼 파일에 DrawingGroup 객체가 있다면 무엇을 할 수 있을까? Drawing 타입의 객체로는 DrawingImage 객체를 만드는 것이 가능하다. 

DrawingImage drawimg = new DrawingImage(drawing);

DrawingImage는 ImageSource를 상속받았고 ImageSource는 3장 ShowMyFace 프로그램에서 보았던 Image의 Source 프로퍼티 타입이다. Image는 보통 비트맵 이미지를 보여주는데, DrawingImage는 벡터 이미지도 보여줄 수 있다. 

따라서 YellowPad 프로그램에서 그린 것이라면 쉽게 WPF 그래픽 객체로 보여줄 수 있는 형태로 저장이 가능하다. 이것은 YellowPad의 About 상자에서 볼 수 있는 필자의 서명을 포함한 저작권 공지를 저장하는 데 사용됐다. 

최상위 메뉴의 두 번째 항목은 Edit이지만 이것은 나중에 다루고 Edit 항목 다음의 두 항목인 Stylus-Mode와 Eraser-Mode를 먼저 살펴보자. Stylus-Mode는 스타일러스 펜이나 마우스로 화면에 그림을 그리는 것과 관계된 메뉴이며, 이것은 InkCanvas의 EditMode 프로퍼티와 대응된다. 반대로 Eraser-Mode는 스타일러스 펜을 뒤집어 지우개를 사용하는 것과 관계된 메뉴이며, 이것은 InkCanvas의 EditingModeInverted 프로퍼티와 대응된다. 다만 Eraser-Mode는 태블릿 PC가 아닌 일반 컴퓨터에서는 적용할 수 없는 기능이기 때문에 프로그램이 태블릿 PC에서 동작할 때만 쓸 수 있다. 

EditingMode와 EditingModeInverted 둘 다 InkCanvasEditingMode 열거형으로 설정되는데, 기본적으로 EditingMode는 InkCanvasEditingMode.Ink로 EditingModeInverted는 부분만 삭제해도 전체 선이 삭제되는 InkCanvasEditingMode.EraseByStroke로 설정된다. 또 한 마우스 사용자가 선을 삭제할 수 있게 하기 위해 동일한 옵션을 Stylus-Mode와 Eraser-Mode 모두에 넣었다. Ink와 EraseByStroke 외에는 EraseByPoint 메뉴(전체 선을 지우지 않고 하나의 선을 2개의 선으로 자른다)와 Selection이 있는데, Selection 옵션은 하나 이상의 선을 올가미 형태의 객체를 사용해 선택할 때 사용한다. 그 외 나머지 InkCanvasEditingMode 멤버인 GestureOnly, InkAndGestrue, None은 생략했다. 

YellowPadWindow.Mode.cs 파일은 Stylus-Mode와 Eraser-Mode 항목을 비슷한 방법으로 처리하는데, 하위 메뉴를 열면 메뉴에서 InkCanvas 객체의 현재 프로퍼티에 설정된 항목을 체크하고 Click 핸들러를 통해 선택된 항목을 InkCanvas에 적용한다. 

using System;
using System.Windows;
using System.Windows.Control;

public partial class YellowPadWindow : Window
{
	//Stylus-Mode 하위 메뉴가 열리면 항목 중 하나를 체크함
	void StylusModeOnOpened(object sender, RoutedEventArgs args)
	{
		MenuItem item = sender as MenuItem;

		foreach(MenuItem child in item.Items)
			child.IsChecked = inkcanv.EditingMode == (InkCanvasEditingMode)child.Tag;
	}
	//선택된 항목을 EditingMode 프로퍼티에 설정
	void StylusModeOnClick(object sender, RoutedEventArgs args)
	{
		MenuItem item = sender as MenuItem;
		inkcanv.EditingMode = (InkCanvasEditingMode)item.Tag;
	}
	//Eraser-Mode 하위 메뉴가 열리면 항목 중 하나를 체크함
	void EraserModeOnOpened(object sender, RoutedEventArgs args)
	{
		MenuItem item = sender as MenuItem;
		
		foreach(MenuItem child in item.Items)
			child.IsChecked = inkcanv.EditingModeInverted == (InkCanvasEditingMode)child.Tag;
	}
	//선택된 항목으로 부터 EditingModeInverted 프로퍼티를 설정
	void EraserModeOnClick(object sender, RoutedEventArgs args)
	{
		MenuItem item = sender as MenuItem;
		inkcanv.EditingModeInverted = (InkCanvasEditingMode)item.Tag;
	}
}

InkCanvas의 실제 프로퍼티의 값을 바탕으로 메뉴의 항목을 체크하는 것이 가장 확실하다. 왜냐하면 EditingMode는 메뉴를 통하지 않고도 설정이 바뀔 수 있기 때문이다. 예를 들어 InkCanvas의 Select 메소드가 호출되는 경우에 EditingMode는 Select가 된다. 

앞에서 언급했듯이 InkCanvas에는 앞으로 그릴 모든 선에 적용되는 색상, 스타일러스 펜 크기, 모양을 포함하는 DrawingAttributes 타입의 DefaultDrawingAttributes를 가진다. 또한 DrawingAttributes는 불리언 타입의 IgnorePressure와 IsHighlighter 프로퍼티를 포함하는데, IgnorePressure 프로퍼티로 선을 그릴때 스타일러스 펜의 압력을 무시할 수 있으며, IsHighlighter 프로퍼티는 선의 색을 128 알파 채널을 통해 반투명으로 만드는 용도로 쓰인다. 

지우개는 모양과 크기만을 바꿀 수 있어 상대적으로 융통성이 떨어진다. InkCanvas의 EraserShape 프로퍼티는 Height, Width, Rotation 프로퍼티를 가지는 StylusShape 타입의 추상 클래스인데, 이 StylusShape를 EllipseStylusShape와 RectangleStylusShape가 상속 받는다. 

스타일러스 펜과 지우개를 다루는 방법은 차이가 있지만 동일한 대화상자를 통해 둘의 인터페이스를 구현했다. 프로그램에서 스타일러스 펜과 지우개는 공통적인 도구라고 할 수 있기 때문에 다음 XAML 파일에서 정의된 대화상자는 Stylus Tool이란 이름을 가지며, 대화상자에는 DrawingAttributes 프로퍼티의 대부분을 설정할 수 있는 컨트롤을 포함한다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:color="clr-namespace:Petzold.ListColorsElegantly" x:Class="Petzold.YellowPad.StylusToolDialog" Title = "Stylus Tool"
	ShowInTaskbar="False" WindowStartupLocation="CenterOwner" SizeToContent="WidthAndHeight" ResizeMode="NoResize">
	<Grid Margin="6">
		<Grid.ColumnDefinitions>
			<ColumnDefinition />
			<ColumnDefinition />
		</Grid.ColumnDefinitions>

		<Grid.RowDefinitions>
			<RowDefinition />
			<RowDefinition />
			<RowDefinition />
			<RowDefinition />
			<RowDefinition />
		</Grid.RowDefinitions>

		<!-- 3 X 3 Grid가 3개의 TextBox 컨트롤을 보여줌 -->
		<Grid Grid.Row="0" Grid.Column="0">
			<Grid.RowDefinitions>
				<RowDefinition />
				<RowDefinition />
				<RowDefinition />
			<Grid.RowDefinitions>

			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>

			<Label Content="_Width:" Grid.Row="0" Grid.Column="0" Margin="6 6 0 6" />
			<TextBox Name="txtboxWidth" Grid.Row="0" Grid.Column="1" Width="50" TextAlignment="Right" Margin="0 6 0 6" />
			<Label Content="points" Grid.Row="0" Grid.Column="2" Margin="0 6 6 6" />
			<Label Content="_Height:" Grid.Row="1" Grid.Column="0" Margin="6 6 0 6" />
			<TextBox Name="txtboxHeight" Grid.Row="1" Grid.Column="1" Width="50" TextAlignment="Right" Margin="0 6 0 6" />
			<Label Content="points" Grid.Row="1" Grid.Column="2" Margin="0 6 6 6" />

			<Label Content="_Rotation:" Grid.Row="2" Grid.Column="0" Margin="6 6 0 6" />
			<TextBox Name="txtboxAngle" Grid.Row="2" Grid.Column="1" Width="50" TextAlignment="Right" Margin="0 6 0 6" />
			<Label Content="degrees" Grid.Row="2" Grid.Column="2" Margin="0 6 6 6" />
		</Grid>

		<!-- GroupBox가 스타일러스 펜 촉을 위한 2개의 RadioButton 컨트롤을 가짐 -->
		<GroudBox Header="_Stylus Tip" Grid.Row="1" Grid.Column="0" Margin="6" >
			<StackPanel>
				<RadioButton Name="radioEllipse" Content="Ellipse" Margin="6" />
				<RadioButton Name="radioRect" Content="Rectangle" Margin="6" />
			</StackPanel>
		</GroupBox>
		
		<!-- pressure와 highlighter를 위한 2개의 CheckBox 컨트롤 -->
		<CheckBox Name="chkboxPressure" Content="_Ignore pressure" Grid.Row="2" Grid.Column="0" Margin="12 6 6 6" />
		<CheckBox Name="chkboxHighlighter" Content="_Highlighter" Grid.Row="3" Grid.Column="0" Margin="12 6 6 6" />

		<!-- ListColorsElegantly 프로젝트에서 가져온 ColorListBox -->
		<color:ColorListBox x:Name="lstboxColor" Width="150" Height="200" Grid.Row="0" Grid.Column="1" Grid.RowSpan="3" Margin="6" />

		<!-- OK와 Cancel 버튼 -->
		<UniformGrid Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Columns="2" >
			<Button Content="OK" Name="btnOk" Click="OkOnClick" IsDefault="True" MinWidth="60" Margin="6" 				HorizontalAlignment="Center" />
			<Button Content="Cancel" IsCancel="True" MinWidth="60" Margin="6" HorizontalAlignment="Center" />
		</UniformGrid>
	</Grid>
</Window>

ColorListBox는 13장의 ListColorsElegantly 프로그램에서 가져왔기 때문에 XAML 파일은 그 프로젝트의 네임스페이스를 명시하는 XML 네임스페이스 선언이 필요하다. 

StylusToolDialog.cs 파일은 StylusToolDialog 클래스의 나머지 부분을 정의한다. DrawingAttributes 프로퍼티는 set 접근자 속에서 컨트롤을 초기화 하며 get 접근자에서 새로운 DrawingAttributes 객체를 생성한 후 대화상자에서 가져온 설정을 객체에 설정한다. 대화 상자는 포인트(1/72인치)로 촉의 너비와 높이를 보여주기 때문에 set과 get 접근자에서 변환을 위한 계산이 필요하다. 



using System;
using System.Windows;
using System.Windows.Control;
using System.Windows.Ink;
using System.Windows.Media;


public partial class StylusToolDialog : Window
{
	//생성자
	public StylusToolDialog()
	{
		InitializeComponent();
	
		//Ok 버튼을 활성화시키기 위해 이벤트 핸들러를 설정
		txtboxWidth.TextChanged += TextBoxOnTextChanged;
		txtboxHeight.TextChanged += TextBoxOnTextChanged;
		txtboxAngle.TextChanged += TextBoxOnTextChanged;

		txtboxWidth.Focus();
	}
	//public 프로퍼티가 컨트롤을 초기화하고 그 값을 반환
	public DrawingAttributes DrawingAttributes
	{
		set
		{
			txtboxHeight.Text = (0.75 * value.Height).ToString("F1");
			txtboxWidth.Text = (0.75 * value.Width).ToString("F1");
			txtboxAngle.Text = (180 * Math.Acos(value.StylusTipTransform.Mll) / Math.PI).ToString("F1");
			chkboxPressure.IsChecked = value.IgnorePressure;
			chkboxHighlighter.IsChecked = value.IsHighlighter;

			if(value.StylusTip == StylusTip.Ellipse)
				radioEllipse.IsChecked = true;
			else
				radioRect.IsChecked = true;

			lstboxColor.SelectedColor = value.Color;
			lstboxColor.ScrollIntoView(lstboxColor.SelectedColor);
		}
		get
		{
			DrawingAttributes drawattr = new DrawingAttributes();
			drawattr.Height = Double.Parse(txtboxHeight.Text) / 0.75;
			drawattr.StylusTipTransform = new RotateTransform(Double.Parse(txtboxAngle.Text)).Value;
			drawattr.IgnorePressure = (bool)chkboxPressure.IsChecked;
			drawattr.IsHighlighter = (bool)chkboxHighlighter.IsChecked;
			drawattr.StylusTip = (bool)radioEllipse.IsChecked ? StylusTip.Ellipse:StylusTip.Rectangle;

			drawattr.Color = lstboxColor.SelectedColor;
			return drawattr;
		}
	}
	//모든 필드가 유효할 때 이벤트 핸들러가 OK 버튼을활성화 함
	void TextBoxOnTextChanged(object sender, TextChangedEventArgs args)
	{
		double width, height, angle;

		btnOk.IsEnabled = Double.TryParse(txtboxWidth.Text, out width) && width / 0.75 >= DrawingAttributes.MinWidth &&
			width / 0.75 <= DrawingAttributes.MaxWidth && Double.TryParse(txtboxHeight.Text, out height) &&
			height / 0.75 >= DrawingAttributes.MinHeight && height / 0.75 <= DrawingAttributes.MaxHeight &&
			Double.TryParse(txtboxAngle.Text, out angle);
	}
	//OK 버튼이 대화상자를 종료함
	void OkOnClick(object sender, RoutedEventArgs args)
	{
		DialogResult = true;
	}
}

get 접근자에서는 Double.Parse 를 특별한 예외 처리 없이 호출할 수 있다. 왜냐하면 대화상자의 OK 버튼이 3개의 TextBox 컨트롤 모두가 유효한 double 값을 가질 때만 활성화되기 때문이다. 이것은 3개의 TextBox 컨트롤에게 전부 적용되는 TextChanged 핸들러 속에서 구현돼있다. 

EraserToolDialog는 StylusToolDialog를 상속하며, 이것의 생성자에서 새로운Title 프로퍼티를 대화상자에 설정하고 지우개에 필요 없는 3개의 컨트롤을 숨긴다. 