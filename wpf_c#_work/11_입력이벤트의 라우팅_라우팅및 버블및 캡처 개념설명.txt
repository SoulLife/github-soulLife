CHAPTER 09 : 입력 이벤트의 라우팅
WPF에서의 주된 사용자 입력 3가지는 키보드와 마우스, 스타일러스 펜이다(스타일러스 펜의 입력은 태블릿 PC나 디지타이징 태블릿에서 사용한다). 앞서 살펴본 코드들은 키보드와 마우스 이벤트를 처리하는 이벤트 핸들러를 사용했다. 이번 장에서는 입력 이벤트에 대해서 더욱포괄적으로 살펴볼 것이다. 

입력 이벤트는 위임자와 함께 정의되어 있으며 그 위임자의 두번째 인자는 InputEventArgs를 거쳐 RoutedEventArgs를 상속받는 타입이다. 다음 클래스 계층도는 InputEventArgs의 모든 자손을 보여준다. 

Object
	EventArgs
		RoutedEventArgs
			InputEventArgs
				KeyboardEventArgs
					KeyboardFocusChangedEventArgs
					KeyEventArgs
				MouseEventArgs
					MouseButtonEventArgs
					MouseWheelEventArgs
					QueryCursorEventArgs
				StylusEventArgs
					StylusButtonEventArgs
					StylusDownEventArgs
					StylusSystemGestureEventArgs
				TextCompositionEventArgs

RoutedEventArgs는 이벤트 라우팅을 지원하는 한 부분으로 WPF에서 광범위하게 사용된다. RoutedEventArgs는 엘리먼트가 매우 유연한 방법으로 이벤트를 처리할 수 있게 하는 메커니즘이다. 이벤트가 엘리먼트 트리를 따라 위나 아래로 이동될 때 이를 라우팅된다고 말한다. 

사용자가 마우스 버튼을 누른다. 그럼 누가 이벤트를 받을까? 답은 마우스 포인터 아래에서 가장 앞에 있고, 눈에 보이며, 활성화된 컨트롤이다. 창에 버튼이 있고 사용자가 버튼을 클릭한다면 버튼이 이벤트를 받게 된다. 매우 간단하다. 

그러나 WPF에서는 이런 간단한 접근방법으로는 잘 설명되지 않는 부분이 있다. 버튼은 그냥 버튼이 아니다. 버튼에는 컨텐트가 있으며, 이 컨텐트에는 패널이 있고, 패널에는 Shape이나 Image, TextBlock등이 포함된다. 이런 각 엘리먼트가 마우스 이벤트를 받을 수 있다. 때로는 각 엘리먼트들이 그들 자신의 마우스 이벤트를 처리하는 것이 적절하기도 하다. 그러나 항상 그런 것은 아니다. 어떤 엘리먼트가 단순히 버튼을 꾸미는 것이라면 그냥 버튼이 이벤트를 처리하게 하는 것이 더 합리적이다. Shape이나 Image, TextBlock, 패널을 통해 버튼으로 이벤트를 전달하는 메커니즘이 있다면 도움이 될 것이다. 

사용자가 키보드의 키를 누른다고 하자. 누가 이벤트를 받게 될까? 답은 입력 포커스를 갖고 있는 컨트롤이다. 에를 들어 창에 여러 개의 텍스트 블록이 있다면 그중 오직 하나만 입력 포커스를 갖고 있으며, 이벤트를 받는 것도 이것 하나다. 

그런데 Window 객체에서 먼저 키보드 이벤트를 조사할 수 있는 메커니즘이 있다면 좋지 않을까? 텍스트 박스가 먼저 이벤트를 받더라도 그 이벤트를 처리하는 데 관심이 있는 무엇인가 있는지를 Window 객체에서 결정할 수 있을 것이다.(4장의 EditSomeRichText 프로그램에서 사용자가 Ctrl+O나 Ctl + S를 누를때 파일 대화상자를 출력하는 것이 매우 간결하게 되어 있다)

WPF에서는 이벤트 라우팅을 통해 이 두 시나리오가 가능해진다. 이벤트가 발생하는 소스(source)에 해당되는 엘리먼트가 항상 있다. 마우스나 스타일러스 이벤트에 대해서 이벤트의 소스는 보통 마우스나 스타일러스 바로 아래의 가장 앞에 있는 엘리먼트가 된다. 이 엘리먼트는 눈에 보여야 하고 활성화되어야 한다(즉, 엘리먼트의 Visibility 프로퍼티는 Visibility.Visiable이어야 하며, IsEnabled 프로퍼티는 true이어야 한다)엘리먼트가 보이지 않거나 비활성화되었다면 이벤트의 소스는 보이면서 활성화된 엘리먼트 중 가장 앞에 있는 것이 된다. 

키보드 이벤트의 소스는 입력 포커스를 갖는 엘리먼트다. 키보드와 마우스 이벤트 모두 오직 하나의 엘리먼트가 특정 이벤트의 소스가 되지만 엘리먼트 트리에서 소스 엘리먼트의 조상 모두가 그 이벤트에 대해 접근할 수 있다. 

UIElement 클래스에는 사용자 입력 이벤트의 대부분이 정의되어 있다. 한 예로 UIElement 관련 문서의 Events 부분에는 사용자가 마우스 버튼을 클릭할 때 발생하는 MouseDown 이벤트가 나와있다. Methods 부분에서는 이 이벤트에 대응하는 protected의 가상 메소드인 OnMouseDown을 볼 수 있다. UIElement 에서 파생된 어떤 클래스도 MouseDown 이벤트 핸들러를 설치하지 않고 OnMouseDown 메소드를 오버라이딩할 수 있다. 두 가지 접근 방법이 기능적으로는 동일하지만 OnMouseDown이 호출되고 난 후 MouseDown 이벤트가 발생된다. 

OnMouseDown과 같은 가상 메소드를 오버라이딩할 때 보통 다음과 같은 방법으로 베이스 클래스의 메소드를 먼저 호출한다. 

protected override void OnMouseDown(MouseEventArgs args)
{
	base.OnMouseDown(args);
	...
}

윈도우 폼에서는 베이스 클래스의 OnMouseDown 메소드를 호출하는 것이 매우 중요했다. 베이스 클래스에서 MouseDown 이벤트를 발생시키기 때문이다. 윈도우 폼의 Control 클래스에 구현된 OnMouseDown 메소드는 다음과 같은 모습이 될 것이다. 

//WPF가 아닌 윈도우 폼에서의 형태임
protected virtual void OnMouseDown(MouseEventArgs args)
{
	...
	if(MouseDown != null)
		MouseDown(this, args);
	...
}

윈도우 폼에서 MyControl이라는 클래스가 Control을 상속받게 하고 OnMouseDown을 오버라이딩한다고 가정하자. 이때 베이스 클래스의 메소드를 호출하지 않을 수도 있다. 보통 좋은 방법은 아니다. 프로그램에서 MyControl 타입의 객체를 생성하고, 그 객체에 MouseDown 이벤트 핸들러를 붙이면 그 핸들러는 어떤 이벤트도 받지 못하게 되기 때문이다. 

WPF에서 이 문제는 더 이상 쟁점이 되지 않는다. MouseDown 이벤트를 OnMouseDown 의 외부에서 발생시키기 때문이다 . UIElement 클래스의 OnMouseDown 에 대한 문서를 보면 이 메소드는 기본 구현이 없음 이라고 되어 있다. 다른 말로 하면 UIElement의 OnMouseDown 메소드의 내용은 비어있다. UIElement를 직접 상속받는 클래스에서 베이스 클래스의 메소드를 호출하지 않고도 OnMouseDown를 안전하게 오버라이딩 할 수 있고, 그 클래스를 상속받거나 인스턴스화하는 다른 클래스에서 역효과가 생기지 않는다. 입력과 관계된 다른 UIElement의 가상 메소드에서도 기본 구현 없음 이라는 동일한 문구를 보게 될 것이다. 

WPF 문서에는 클래스가 가상 메소드를 언제 정의하는지 뿐만 아니라, 클래스가 그 메소드를 언제 오버라이딩하는지도 명시되어 있다. UIElement를 직접 상속받는 클래스인 FrameworkElement의 메소드 목록을 살펴보자. OnMouseDown를 발견할 수 있는가? 아니다. FrameworkElement에는 OnMouseDown메소드가 오버라이딩되지 않았다. 이제 FrameworkElement를 바로 상속받는 Control을 확인해보자. 역시 OnMouseDown는 목록에 없다. 이제 ButtonBase를 확인해보자. 여기에서는 OnMouseDown의 오버라이딩이 아닌 OnMouseLeftButtonDown의 오버라이딩을 볼 수 있을 것이다. 이것은 ButtonBase가 Click 이벤트를 생성하기 위해 사용하는 메소드와 관련된 메소드다. 단 ButtonBase의 OnMouseLeftButtonDown 메소드는 MouseLeftButtonDown 이벤트의 발생을 책임지는 것이지 Click 이벤트의 발생을 책임 지지는 않는다. ButtonBase를 상속하고 베이스 클래스의 메소드 호출 없이 OnMouseLeftButtonDown을 오버라이딩하면 효율적으로 Click 이벤트를 비활성화 시키게 된다. ButtonBase의 OnMouseLeftButtonDown에 대한 문서에는 기본 구현 없음 이라는 말이 나와 있지 않다. 

UIElement에서 On 메소드와 대응하는 이벤트가 발생하지 않더라도 다른 클래스에서 다른 방법을 취할 수 있다. 예를 들어 ButtonBase에는 OnClick메소드가 정의되어 있다. ButtonBase의 OnMouseLeftButtonDown의 오버라이딩은 거의 확실히 OnClick을 호출하며, OnClick 메소드는 Click 이벤트의 발생을 책임진다. 앞서의 OnMouseLeftButtonDown 메소드경우에서처럼 ButtonBase를 상속해 베이스 클래스의 메소드를 호출하지 않고 OnClick을 오버라이딩하면 이 클래스에 기반한 어떤 객체라도 Click 이벤트가 비활성화 되는 것이다. 

일반적인 규칙에 따르면 특별한 이유가 없는 한 가상 메소드를 오버라이딩할 때마다 베이스 클래스의 메소드를 호출한다. 필자의 경우에는 문서에 불필요하다고 나와 있는 메소드인 경우라도 이 규칙을 따르는 경향이 있다. 

MouseDown 이벤트와 protected 의 OnMouseDown 가상 메소드는 UIElement 클래스의 다른 관련 멤버로 연결된다. UIElement 문서화의 Fields 부분을 보면 MouseDownEvent라는 RoutedEvent 타입의 정적 읽기 전용 필드를 볼 수 있다. 9장에서 살펴보겠지만 이 RoutedEvent객체는 의존 프로퍼티와 유사한 역할을 한다. MouseDownEvent는 몇 개의 메소드 호출에서 MouseDown 이벤트를 참조하는 쉬운 방법을 제공하며, RoutedEvent 클래스는 어떻게 이벤트가 엘리먼트 트리상의 다른 엘리먼트로 라우팅되는지의 정보를 캡슐화 한다. 

UIElement 문서에서 PreviewMouseDown 이벤트와 OnPreviewMouseDown 메소드, PreviewMouseDownEvent라는 필드도 볼 수 있다. 이런 이름의 패턴은 UIElement에 정의된 대부분의 사용자 입력 이벤트에서 나타난다. 간단히 이 두 이벤트가 어떻게 동작하는지 살펴보자. 

9장의 시작 부분에서 살펴본 클래스 계층도를 보면 WPF의 사용자 이벤트에서 RoutedEventArgs가 중요한 클래스임을 짐작할수 있으며, InputEventArgs뿐만 아니라 다른 클래스들도 RoutedEventArgs를 상속함을 알 수 있다. 

RoutedEventArgs에는 4개의 프로퍼티만 정의되어 있으며, 이는 이벤트 처리에 유용하게 사용된다. 이중 하나가 RoutedEvent이며, RoutedEvent 타입의 객체다. RoutedEventArgs의 RoutedEvent 프로퍼티는 이벤트 그 자체를 의미한다. 

MouseDown 이벤트를 예로 들면 이 프로퍼티는 MouseDownEvent가 될 것 이다.이는 UIElement에 정의된 정적 필드다. 아래와 같은 구문을 사용해서 서로 다른 타입의 이벤트에 대해 같은 이벤트 핸들러를 사용할 수도 있다. 

if(args.RoutedEvent == MouseDownEvent)
{
	...
}else if(args.RoutedEvent == MouseUpEvent)
{
	...
}

RoutedEventArgs의 Source와 OriginalSource 프로퍼티는 모두 object 타입이며, 이름에서 암시하듯이 이벤트의 소스에 해당하는 엘리먼트를 가리킨다. 일반적으로 Source 프로퍼티가 매우 중요하지만 몇 가지 경우에는 OriginalSource 프로퍼티도 확인할 필요가 생길 것이다. 

RoutedEventArgs의 Handled 프로퍼티는 초기에 false이지만, 이벤트가 더 이상 라우팅되는 것을 막기 위해 true로 설정할 수 있다. 4장의 EditSomeRichText 프로그램에서 Ctrl + O와 Ctrl + S의 키 누름이 RichTextBox로 가는 것을 막기 위해 이 프로퍼티를 사용한 적이 있다. 

InputEventArgs에는 RoutedEventArgs에서 정의된 프로퍼티 외에 입력 장치를 확인하기 위한 InputDevice 타입의 Device 프로퍼티와 int 타입의 TimeStamp 프로퍼티가 추가 되었다. 

실제 라우팅 이벤트에 대해 살펴보자. 아래의 ExamineRoutedEvents 프로그램에 대해 먼저 알아야 할 것은 Window가 아닌 Application을 상속받았다는 사실이다. 그 후에 Window 타입의 객체와 몇 개의 다른 엘리먼트를 생성한다. 프로그램의 최초 버전에서는 Window를 상속받는 ExamineRoutedEvents라는 클래스를 정의했었다. 그러나 프로그램에서 TextBlock이나 Button , Grid와같이 클래스 이름을 텍스트로 출력하는데, ExamineRoutedEvents라는 이름의 클래스를 출력하는 것보다 단순히 Window라고 출력하는 것이 훨씬 자연스럽기 때문에 지금의 모습이 되었다. 





using System;
using System.Windows;
using System.Windows.Controls;
using System.WIndows.Documnets;
using System.Windows.Input;
using System.Windows.Media;

public class ExamineRoutedEvents : Application
{
	static readonly FontFamily fontfam = new FontFamily("Lucida Console");
	const string strFormat = "{0,-30} {1,-15} {2,-15} {3, -15}";
	StackPanel stackOutput;
	DateTime dtLast;

	[STAThread]
	public static void Main()
	{
		ExamineRoutedEvents app = new ExamineRoutedEvents();
		app.Run();
	}
	protected override void OnStartUp(StartupEventArgs args)
	{
		base.OnStartup(args);
		
		// Window 생성
		Window win = new Window();
		win.Title = "Examine Routed Events";

		// Grid를 생성하고 Window의 Content로 지정
		Grid grid = new Grid();
		win.Content = grid;

		//3개의 행 생성
		RowDefinition rowdef = new RowDefinition();
		rowdef.Height = GridLength.Auto;
		grid.RowDefinitions.Add(rowdef);

		rowdef = new RowDefinition();
		rowdef.Height = GridLength.Auto;
		grid.RowDefinitions.Add(rowdef);

		rowdef = new RowDefinition();
		rowdef.Height = new GridLength(100, GridUnitType.Star);
		grid.RowDefinitions.Add(rowdef);

		// Button을 생성하고 Grid에 추가
		Button btn = new Button();
		btn.HorizontalAlignment = HorizontalAlignment.Center;
		btn.Margin = new Thickness(24);
		btn.Padding = new Thickness(24);
		grid.Children.Add(btn);

		//TextBlock을 생성하고 Button에 추가
		TextBlock text = new TextBlock();
		text.FontSize = 24;
		text.Text = win.Title;
		btn.Content = text;

		//ScrollViewer 위에 제목 표시줄 생성
		TextBlock textHeadings = new TextBlock();
		textHeadings.FontFamily = fontfam;
		textHeadings.Inlines.Add(new Underline(new Run(String.Format(strFormat, "Routed Event", "sender", "Source", "OriginalSource"))));
		grid.Children.Add(textHeadings);
		Grid.SetRow(textHeadings, 1);

		// ScrollViewer 생성
		ScrollViewer scroll = new ScrollViewer();
		grid.Children.Add(scroll);
		Grid.SetRow(scroll, 2);

		//이벤트 출력을 위한 StackPanel 을 생성
		stackOutput = new StackPanel();
		scroll.Content = stackOutput;

		//이벤트 핸들러 추가
		UIElement[] els = {win, grid, btn, text };

		foreach(UIElement el in els)
		{
			//키보드
			el.PreviewKeyDown += AllPurposeEventHandler;
			el.PreviewKeyUp += AllPurposeEventHandler;
			el.PreviewTextInput += AppPurposeEventHandler;
			el.KeyDown += AllPurposeEventHandler;
			el.KeyUp += AllPurposeEventHandler;
			el.TextInput += AllPurposeEventHandler;

			//마우스
			el.MouseDown += AllPurposeEventHandler;
			el.MouseUp += AllPurposeEventHandler;
			el.PreviewMouseDown += AllPurposeEventHandler;
			el.PreviewMouseUp += AllPurposeEventHandler;

			//스타일 러스
			el.StylusDown += AllPurposeEventHandler;
			el.StylusUp += AllPurposeEventHandler;
			el.PreviewStylusDown += AllPurposeEventHandler;
			el.PreviewStylusUp += AllPurposeEventHandler;

			// Click
			el.AddHandler(Button.ClickEvent, new RoutedEventHandler(AllPurposeEventHandler));
		}
		//창을 보여줌
		win.Show();
	}
	void AllPurposeEventHandler(object sender, RoutedEventArgs args)
	{
		//시간이 지날 때 빈 줄 추가
		DateTime dtNow = DateTime.Now;
		if( dtNow - dtLast > TimeSpan.FromMilliseconds(100))
			stackOutput.Children.Add(new TextBlock(new Run(" ")));
		dtLast = dtNow;

		//이벤트 정보를 출력
		TextBlock text = new TextBlock();
		text.FontFamily = fontfam;
		text.Text = String.Format(strFormat, args.RoutedEvent.Name, TypeWithoutNamespace(sender),TypeWithoutNamespace(args.Source),
					TypeWithoutNamespace(args.OriginalSource));
		stackOutput.Children.Add(text);
		(stackOutput.Paren as ScrollViewer).ScrollToBottom();
	}
	string TypeWithoutNamespace(object obj)
	{
		string[] astr = obj.GetType().ToString().Split(".");
		return astr[astr.Length-1];
	}
}

이 프로그램에서 생성된 엘리먼트는 다음과 같은 트리로 나타낼 수 있다. 

				Window
				Grid
	Button			TextBlock		ScrollViewer
	TextBlock					StackPanel
						TextBlock...

Window 객체는 트리의 루트(root)가 된다. Window의 관점에서 보면 다른 모든 엘리먼트는 루트의 아래에 있는 것이며, TextBlock 엘리먼트 중 하나의 관점에서 보면 Window는 위 에 있는 것으로 간주한다. 

ExamineRoutedEvents 프로그램에서 Window, Grid, Button 엘리먼트, Button의 TextBlock 컨텐트 등에 대해 다양한 이벤트 핸들러를 설치하고 있다. 이런 이벤트 핸들러는 공통된 몇 가지의 키보드, 마우스, 스타일러스 이벤트를 포함하고 있으나 모두 AppPurposeEventHandler라는 동일한 메소드를 공유한다. 

AppPurposeEventHandler가 새로운 이벤트를 받을 때마다 새로운 TextBlock 객체를 생성한다(트리에서 생략 표시가 된 TextBlock에 해당)이 TextBlock 객체는 이벤트에 대한 정보를 출력하는데, 여기에는 이벤트 핸들러의 첫 번째 인자(보통 sender)와 RoutedEventArgs 인자의 RoutedEvent, Source, OriginalSource 프로퍼티가 포함된다. 이벤트 핸들러는 그 후에 TextBlock을 ScrollViewer의 컨텐트인 StackPanel에 추가한다. 트리에서 가운데 있는 TextBlock엘리먼트는 단순히 출력되는 정보의 제목을 표시한다. 

AppPurposeEventHandler에서는 출력 결과를 읽기 편하게 이벤트가 발생한 지 최소 100밀리 초가 지나면 빈 줄 하나를 넣는다. 매우 빠르게 타이핑한다거나, 어떤 이유로 이벤트가 지연되는 경우에는 이 기능이 항상 완벽하게 동작하지는 않을 것이다. 

프로그램을 실행시키면 상단에 Examine Routed Events 라는 텍스트를 가진 큰 버튼을 볼 수 있다. 그 텍스트에서 오른쪽 마우스 버튼을 클릭해보자. 아래 표와 같이 연속된 이벤트들의 목록을 보게 될 것 이다. PreviewMouseUp 이벤트와 MouseUp 이벤트도 이와 유사한 패턴을 보인다(OriginalSource에서 ButtonChrome이 보인다면, 버튼 뒤에 있는 텍스트를 클릭하지 않은 것이다)

RoutedEvent			sender			Source			OriginalSource
PreviewMouseDown		Window			TextBlock			TextBlock
PreviewMouseDown		Grid			TextBlock			TextBlock
PreviewMouseDown		Button			TextBlock			TextBlock
PreviewMouseDown		TextBlock			TextBlock			TextBlock
MouseDown			TextBlock			TextBlock			TextBlock
MouseDown			Button			TextBlock			TextBlock
MouseDown			Grid			TextBlock			TextBlock
MouseDown			Window			TextBlock			TextBlock

이벤트 핸들러의 첫 번쨰 인자는 보통 sender라 부르며 이벤트 핸들러를 붙인 객체가 된다. 이 인자는 애플리케이션으로 이벤트를 보낸 객체를 가리킨다. RoutedEventArgs의 Source프로퍼티는 실제 이벤트를 일으킨 엘리먼트가 된다. 

표에 나타낸 내용들이 이벤트 라우팅의 핵심이다. PreviewMouseDown 이벤트는 터널링(tunneling)이벤트의 한 예다. 이 이벤트는 비주얼 트리의 루트에서 시작해서 마우스 커서 바로 아래에 있는 엘리먼트까지 터널 다운(tunnels down)을 한다. 이에 반해 MouseDown 이벤트는 버블링(bubbling)이벤트다. 이 이벤트는 부모를 통해 루트 엘리먼트까지 버블업(bubbles up)을 한다(이런 다운과 업이란 용어는 루트가 상단에 있는 트리 모습에 기인한다)

이벤트 라우팅은 이벤트를 처리하는 데에 매우 유연한 방법을 제공한다. 마우스 버튼을 누르는 행동에 대해 트리에서 위에 있는 엘리먼트가 먼저 처리할 것을 요구한다면 PreviewMouseDown 이벤트를 처리함으로써 그렇게 할 수 있다. 엘리먼트 중 어느 하나가 트리 아래에 있는 엘리먼트가 무시한 MouseDown 이벤트만을 다루려고 한다면 MouseDown 을 처리함으로써 그 이벤트를 받을 수 있다 

이제 마우스 커서를 약간 움직여서 버튼의 텍스트를 벗어나게 하되 그래도 버튼 내에는 위치하게 하고 다시 오른쪽 버튼을 클릭해보자. 그럼 다음과 같은 내용을 보게 될 것이다. 

RoutedEvent			sender			Source			OriginalSource
PreviewMouseDown		Window			Button			ButtonChrome
PreviewMouseDown		Grid			Button			ButtonChrome
PreviewMouseDown		Button			Button			ButtonChrome
MouseDown			TextBlock			Button			ButtonChrome
MouseDown			Button			Button			ButtonChrome
MouseDown			Grid			Button			ButtonChrome


PreviewMouseUp과 MouseUp에 대해서도 동일한 패턴을 볼 수 있다. 표를 보면 TextBlock은 이 이벤트에 포함되지 않았는데, 마우스 포인터 아래에 더 이상 존재하지 않기 때문이다. 대신 Button 객체가 이벤트를 발생시키는데, Source 프로퍼티를 보면 알 수 있다. 그러나 OriginalSource 프로퍼티는 마우스포인터 아래에 있는 실제 객체인 ButtonChrome 타입의 객체를 가리키고 있다. ButtonChrome에 대해 들어본 적이 없을 것이다. 이 프로그램을 실행 시키기 전까지는 필자 역시 들어보지 못했다. ButtonChrome은 Decorator를 상속받으며, Microsoft.Windows.Themes 네임스페이스에 있다. Button의 표면을 그리기 위해 ButtonChrome이 사용된다(역자주 : 윈도우 비스타가 아닌 XP에서 실행한다면 ClassicBorderDecorator와 같은 다른 이름을 보게된다)

여기서 배울 수 있는 것은 단순하다. 즉 OrigrinalSource 프로퍼티는 많은 경우에 무시해도 무방하며, 보통은 Source 프로퍼티에 초점을 맞출 것이다(그러나 Source가 원하는 대상을 나타내지 않고, OrigninalSource가 이를 나타내는 것이라면 당연히 이쪽을 사용한다)

지금까지 오른쪽 마우스 버튼의 클릭에 대해 언급해왔다. 여기엔 그만한 이유가 있다. TextBlock에서 왼쪽 버튼을 클릭하면 다음과 같은 결과를 보게 된다. 

RoutedEvent			sender			Source			OriginalSource
PreviewMouseDown		Window			TextBlock			TextBlock
PreviewMouseDown		Grid			TextBlock			TextBlock
PreviewMouseDown		Button			TextBlock			TextBlock
PreviewMouseDown		TextBlock			TextBlock			TextBlock
MouseDown			TextBlock			TextBlock			TextBlock


그런 후 MouseDown 이벤트가 끝난다. 더 이상은 없다. 무슨 일이 생긴 것일까?

Button 클래스는 왼쪽 마우스 버튼에 대해 매우 많은 관심을 갖는다.이 클래스에서 Click 이벤트가 발생되기 때문이다. 전에도 언급했지만 ButtonBase에서 OnMouseLeftButtonDown 메소드를 오버라이딩한다. 이 메소드가 호출되면 ButtonBase는 결국에 Click 이벤트를 발생시키는 작업을 수행한다. ButtonBase가 사실상 왼쪽 마우스 버튼을 처리하고 RoutedEvent Args의 Handled 프로퍼티를 true로 설정한다. 이 플래그로 인해 MouseDown 이벤트 핸들러의 호출이 중지되며 더 이상 이벤트가 트리를 통해 라우팅되지 않는다. 

눌렀던 왼쪽 마우스 버튼을 놓으면 다음과 같은 이벤트들을 볼 수 있다. 

RoutedEvent			sender			Source			OriginalSource
PreviewMouseUp			Window			Button			Button
PreviewMouseUp			Grid			Button			Button
PreviewMouseUp			Button			Button			Button
Click				Button			Button			Button
Click				Grid			Button			Button
Click				Window			Button			Button

TextBlock은 더 이상 포함되지 않았다 Button은 마우스를 캡처(capture)하며(캡처 기법에 대해 서는 다시 논의할 것이다)이벤트의 소스가 된다. OnLeftMouseButtonUp메소드를 호출하는 동안 ButtonBase에서는 이벤트 인자의 Handled 프로퍼티를 true로 세팅하고 , Click 이벤트를 발생시킨다. Click 이벤트는 트리의 위로 Window까지 올라간다(Click 이벤트는 버블링만 존재한다. 터널링이 되는 PreviewClick이란 이벤트는 없다)

Click 이벤트는 ButtonBase에 정의되어 있고, Button에서 상속받는다. Window 클래스나 Grid 클래스에서는 Click 이벤트에 대해서는 아무것도 알수 없다. 그래서 보통 Window나 Grid 객체에 Click 이벤트를 설치할 수 없다. 그러나 UIElement에는 AddHandler 메소드(그리고 이에 대응하는 RemoveHandler 메소드)가 정의되어 있어서 같은 트리에 있는 어떤 엘리먼트에 대해서라도 라우팅 이벤트 핸들러를 설치할 수가 있다. 이 메소드는 첫 인자로 RoutedEvent타입을 받는다. 다음은 ExamineRoutedEvevnts 프로그램에서 어떻게 AddHandler를 사용해 다른 엘리먼트에 Click 이벤트 핸들러를 설치하는지를 보여준다. 

el.AddHandler(Button.ClickEvent, new RoutedEventHandler(AppPurposeEventHandler));

패널에 핸들러를 설치하는 방법은 여러 개의 자식 엘리먼트로부터 오는 특정 이벤트의 처리를 통합하는 데 매우 유용한 기법이다. 예제 프로그램을 태블릿 PC에서 실행시키고 스타일러스 펜으로 버튼을 탭(tap)해보자. 그러면 먼저 PreviewStylusDown 이벤트가 트리를 따라 Window에서 Grid를 거쳐 Button에서 TextBlock으로 터널 다운하는 것을 볼 것이며, 그 다음 StylusDown 이벤트가 TextBlock에서 Button을 거쳐 Grid와 Window까지 트리를 따라 버를업할 것이다. 이 시점에서 왼쪽 마우스 버튼을 클릭했을 때와 같이 PreviewMouseDown과 MouseDown 이벤트가 발생한다. 스타일러스 펜을 화면에서 떼면 PreviewStylusUp 이벤트가 Window에서 Button까지 터널 다운하며, StylusUp 이벤트가 Button에서 Window까지 버블 업한다(TextBlock은 없다) 그런 후 PreviewMouseUp과 MouseUp이벤트가 발생한다. 스타일러스는 항상 스타일러스 이벤트뿐만 아니라 마우스 이벤트까지 발생시킨다. 

마우스나 스타일러스 펜으로 버튼을 클릭했기 때문에 입력 포커스를 갖게 된다. 이제 기능키를 눌러보자. PreviewKeyDown 이벤트가 Window에서 Grid, Button 으로터널 다운되며, 그뒤 KeyDown 이벤트가 Button에서 Grid, Window로 버블업하는 것을 볼 수 있다. 분명히 TextBlock이 아닌 Button이 입력 포커스를 갖고 있다. 키를 떼면 같은 패턴으로 PreviewKeyUp이벤트가 터널 다운되고, KeyUp 이벤트가 버블 업한다. 

이제 글자 키를 눌러보자. 3개의 PreviewKeyDown 이벤트와 3개의 KeyDown 이벤트를 볼 것이다. 그 뒤로 3개의 PreviewTextInput 이벤트와 3개의 TextInput 이벤트가 나타난다. TextInput 이벤트는 키보드로부터 생성된 실제 텍스트 입력을 가리킨다. 키를 때면 3개의 PreviewKeyUp과 3개의 KeyUp 이벤트를 보게 될 것이다. 

이제 Space Bar를 눌러보자. 왼쪽 마우스 버튼의 경우처럼 Button 컨트롤은 Space Bar와도 연관이 있다. 결과 내용은 다음 표와 같다. Button에서 KeyDown 이벤트의 처리가 종료되고 그 후 KeyUp 이벤트와 Click 이벤트가 보인다. Enter 키를 누르는 경우에도 유사한 결과를 보게 된다. 

RoutedEvent			sender			Source			OriginalSource
PreviewKeyDown			Window			Button			Button
PreviewKeyDown			Grid			Button			Button
PreviewKeyDown			Button			Button			Button
PreviewKeyUp			Window			Button			Button
PreviewKeyUp			Grid			Button			Button
PreviewKeyUp			Button			Button			Button
Click				Button			Button			Button
Click				Grid			Button			Button
Click				Window			Button			Button

클래스에서 라우팅되는 이벤트를 정의하는 것은 의존 프로퍼티를 정의하는 것과 유사하다. 어떤 컨트롤이 있는데, 여기에 Click과 유사한 Knock이라는 이벤트가 필요하다고 가정하자. 먼저 다음과 같이 Knock(그리고 선택적으로 PreviewKnock)에 대한 RoutedEvent 타입의 정적 읽기 전용의 필드를 정의해야 한다. 

public static readonly RoutedEvent KnockEvent;
public static readonly RoutedEvent PreviewKnockEvent;

관습상 필드 이름은 이벤트 이름 뒤에 Event란 단어를 붙인다. 


필드 정의나 정적 생성자에서 EventManager.RegisterRoutedEvent라는 정적 메소드를 호출한다. 첫 번째 인자는 이벤트의 이름을 텍스트로 쓴다. 

KnockEvent = EventManager.RegisterRoutedEvent("Knock", RoutingStartegy.Bubble, typeof(RoutedEventHandler), typeof(YourClass));

PreviewKnockEvent = EventManager.RegisterRoutedEvent("PreviewKnock", RoutingStrategy.Tunnel, typeof(RoutedEventHandler), typeof(YourClass));

두 번째 인자는 Knock 이벤트에 대해서는 RoutingStrategy.Bubble이며, PreviewKnock 이벤트에 대해서는 RoutingStrategy.Tunnel이다. RoutingStrategy 열거형의 나머지 한 멤버는 Direct이며, 이벤트가 라우팅되지 않음을 뜻한다. 세 번째 인자는 여기에서 RoutedEventHandler이지만 RoutedEventArgs 또는 그 자손을 인자로 하는 어떤 위임자도 올 수 있다. 네 번째 인자는 이 이벤트가 정의된 클래스의 타입이다. 

또한 실제 Knock과 PreviewKnock 이벤트를 정의해야한다. 아래 구문을 보면 첫 줄은 보통의 .NET이벤트를 정의하는 방법과 비슷하게 보인다. 즉 event 키워드와 그 이벤트와 관련된 위임자를 사용한다. 

public event RoutedEventHandler Knock
{
	add { AddHandler(KnockEvent, value);	}
	remove { RemoveHandler(KnockEvent, value);	}
}

그러나 이 이벤트 정의에는 add와 remove 접근자도 포함돼야 한다. 이 접근자는 정적 라우팅 이벤트를 참조한다. AddHandler와 RemoveHandler는 DependencyObject에 정의되어 있다. value 인자는 이벤트 핸들러다. PreviewKnock 이벤트의 정의도 비슷하지만 PreviewKnockEvent를 참조한다. 

클래스에서 실제로 이 이벤트를 발생시킬 때가 되면 RoutedEventArgs(또는 그 자손)타입의 객체를 생성한다. 

RoutedEventArgs argsEvent = new RoutedEventArgs();
argsEvent.RoutedEvent = YourClass.PreviewKnockEvent;
argsEvent.Source = this;
RaiseEvent(argsEvent);
argsEvent = new RoutedEventArgs();
argsEvent.RoutedEvent = YourClass.KnockEvent;
argsEvent.Source = this;
RaiseEvent(argsEvent);

RoutedEvent가 RoutedEventArgs의 Source 프로퍼티가 될 것임을 알 수 있다. RoutedEventArgs에는 또한 2 개의 값을 받는 생성자가 정의되어 있다. 명시적으로 OriginalSource를 설정하지 않으면 기본값으로 OriginalSource는 Source와 같이 설정된다. RaiseEvent메소드는 UIElement에 정의되어 있다. 터널링 이벤트에 대해 RaiseEvent를 먼저 호출하고  그 다음에 버블링 이벤트에 대한 호출이 온다는것에 주의해야 한다. 

Knock과 PreviewKnock 이벤트를 사용하는 완전한 프로그램은 10장에서 소개할 것이다. 

UIElement 클래스에 구현된 사용자 입력 이벤트에 대해 논의해왔지만 이 이벤트들은 ContentElement에도 구현되어 있다. ContentElement 클래스를 상속받는 클래스에는 TextElement, FixedDocument, FlowDocument가 있다. ContentElement 객체는 다른 엘리먼트에 의해 화면상에 그려진다. UIElement와 ContentElement모두 IInputElement 인터페이스를 구현하는데, 이 인터페이스에는 또한 UIElement와 Content Element에 정의된 대부분의 사용자 입력 이벤트를 포함한다(전부는 아니다).

UIElement와 ContentElement모두 Mouse로 시작하는 10개의 이벤트와 PreviewMouse로 시작하는 8개의 이벤트가 정의되어 있다. 

MouseMove, PreviewMouseMove, MouseEnter, MouseLeave 이벤트에 대한 이벤트 핸들러는 모두 MouseEventHandler 타입이고 ,이 이벤트에는 MouseEventArgs 타입의 객체가 동반된다(PreviewMouseEnter나 PreviewMouseLeabe 이벤트는 없다)MouseMove 이벤트는 마우스 커서가 엘리먼트 표면을 따라 움직일 때마다 계속 발생한다. MouseEnter와 MouseLeave 이벤트는 마우스 커서가 엘리먼트 영역으로 들어갈 때와 나갈 때 발생한다. UIElement와 ContentElement에는 이와 관련된 2개의 읽기 전용 프로퍼티도 정의되어 있다. 마우스 커서가 엘리먼트 위에 있을 때면 IsMouseOver가 true가 된다. IsMouseDirectlyOver는 마우스 커서가 엘리먼트 위에 있을 때 true가 되지만 자식 엘리먼트 위에 있는 경우는 제외된다. 

MouseMove, MouseEnter, MouseLeave 이벤트를 처리할 때 마우스 버튼이 눌려졌다면 어떤 마우스 버튼인지를 알아야 할 것이다. MouseEventArgs에는 마우스에 있는 모든 버튼 타입에 대한 읽기 전용의 프로퍼티들이 있다. 여기에는 LeftButton, MiddleButton, RightButton뿐만 아니라 2개의 확장 버튼인 XButton1과 XButton2가 있다. 이 프로퍼티는 각각 MouseButtonState 열거형의 멤버인 Pressed와 Released로 설정된다. 

특히 MouseMove 이벤트의 경우에는 마우스 커서의 위치도알 필요가 있다. MouseEventArgs에 정의된 GetPosition 메소드에는 IInputElement 인터페이스를 구현하는 타입의 인자가 필요하며, 이 메소드는 그 엘리먼트의 좌측 상단 모서리를 기준으로 하는 상대 위치를 장치독립적 좌표로 된 Point 객체로 반환한다. 

MouseDown, MouseUp, PreviewMouseDown, PreviewMouseUp 이벤트는 엘리먼트 위에서 사용자가 마우스 버튼을 누르거나 뗄 때 발생한다. 이 이벤트들은 MouseButtonEventArgs 타입의 객체를 동반한다. 어떤 버튼과 관련 있는지는 ChangedButton 프로퍼티를 통해 확인할수 있다. 이 프로퍼티는 MouseButton 열거형의 멤버로 Left, Middle, Right, XButton1, XButton2가 있다. 사용자가 2개의 버튼을 동시에 누르면 각 버튼에 대해 MouseDown 이벤트가 발생한다. 

MouseButtonEventArgs 클래스에는 ButtonState라는 프로퍼티도 정의되어 있으며, MouseButtonState 열거형의 멤버로 설정된다. 명백하게 MouseDown 이벤트에서의 ButtonState 프로퍼티는 MouseButtonState.Pressed가 될 것이며, MouseUp이벤트에서는 MouseButtonState.Released가 될 것이다. 그렇지만 같은 이벤트 핸들러에서 MouseDown과 MouseUp모두를 처리하는 경우에는 이 프로퍼티로 두 이벤트를 구별할 수 있다. 

UIElement와 ContentElement 클래스에는 왼쪽과 오른쪽 마우스 버튼에 대한 구체적인 이벤트도 정의되어 있는데, 이는 MouseLeftButtonDown, MouseRightButtonDown, MouseLeftButtonUp, MouseRightButtonUp과 이에 관련된 Preview 형태들이다. 이들 이벤트는 편리함의 차원에서 생각 하면 된다. MouseLeftButtonDown 이벤트의 처리는 다음과 같이 MouseDown이벤트 처리 안에서 if문을 넣어 처리하는 것과 아무런 차이가 없다. 

if (args.ChangedButton == MouseButton.Left)
{
	...
}

이와 같은 왼쪽 버튼과 오른쪽 버튼에 대한 이벤트를 어떻게 적용하는지 알아보기 위해 ExamineRoutedEvents의 foreach 루프에 다음 구문을 추가해보자. 

el.MouseLeftButtonDown += AppPurposeEventHandler;
el.MouseLeftButtonUp += AppPurposeEventHandler;
el.PreviewMouseLeftDown += AppPurposeEventHandler;
el.PreviewMouseLeftUp += AppPurposeEventHandler;

el.MouseRightButtonDown += AppPurposeEventHandler;
el.MouseRightButtonUp += AppPurposeEventHandler;
el.PreviewMouseRightButtonDown += AppPurposeEventHandler;
el.PreivewMouseRightButtonUp += AppPurposeEventHandler;

결과를 보면 down과 up 이벤트 사이에서 추가된 이 이벤트들을 볼 수 있다. 트리의 각 엘리먼트에서 MouseUp과 이벤트 이전에 MouseLeftButtonUp이나 MouseRightButtonUp 이벤트도 발생되며, down과 preview에 대해서도 비슷하게 동작한다. 

MouseWheel과 PreviewMouseWheel 이벤트는 일부 최신 마우스 장치에 있는 휠의 움직임을 알려준다. 

휠은 부드럽게 움직이지 않고 딸깍거리는 게 느껴지면서 움직인다. 이를 틱(tick)이라 하는데, 요즘의 휠 마우스 장치는 각 틱에 120의 값이 부여된다. 미래의 휠 마우스 장치는 더 세밀한 틱을 가질 것이며 더 작은 값으로 조정될 것이다. 현재의 경우 MouseWheelEventArgs 의 Delta 프로퍼티는 휠을 사용자의 반대 방향으로 움직일 때 틱당 120이며, 사용자 쪽으로 움직일 때는 -120이다. 마우스 휠이 있는지의 여부는 SystemParameters.IsMouseWheelPresent 값으로 판단할 수 있다. 

또한 Mouse 클래스의 정적 프로퍼티를 통해 현재의 마우스 위치와 마우스 버튼 상태에 대한 정보를 얻을 수도 있다. Mouse 클래스에는 마우스 이벤트 핸들러를 붙이거나 제거하는 정적 메소드도 있다. MouseDevice 클래스에는 마우스 위치와 버튼 상태에 대한 인스턴스 메소드가 있다. 

또한 Mouse 클래스의 정적 프로퍼티를 통해 현재의 마우스 위치와 마우스 버튼 상태에 대한 정보를 얻을 수도 있다. Mouse 클래스에는 마우스 이벤트 핸들러를 붙이거나 제거하는 정적 메소드도 있다. MouseDevice 클래스에는 마우스 위치와 버튼 상태에 대한 인스턴스 메소드가 있다. 

Control 클래스에는 MouseDoubleClick 이라는 마우스 이벤트와 이에 대응하는 OnMouseDoubleClick 메소드가 정의되어 있다. 이 메소드는 MouseButtonEventArgs 타입의 객체를 동반한다.

마우스는 화면상에 마우스 커서라고 부르는 비트맵으로 표현된다. WPF에서 이 커서는 Cursor 타입의 객체이며, Cursors 클래스에서 가장 편리하게 사용할 수 있다. 엘리먼트에 특정 커서를 연결시키려면 Cursor 객체를 FrameworkElement에 정의된 Cursor 프로퍼티에 설정하면 된다. 또는 좀 더 유연하게 QueryCursor 이벤트(또는 OnQueryCursor 메소드를 오버라이딩)에 대한 핸들러를 붙일 수도 있다. 이 이벤트는 마우스를 움직일 때마다 발생한다. 이 이벤트에 수반되는 QueryCursorEventArgs 객체는 Cursor라는 프로퍼티가 포함되어 있어서 적절한 Cursor 객체로 설정할 수 있다. 

MouseDown과 MouseUp 이벤트가 한 쌍으로 발생할 것이라고 믿기 쉽다. 그러나 절대로 그렇지 않다. 예를 들어 사용자가 마우스 커서를 애플리케이션의 창으로 이동시켜 버튼을 누른다고 가정하자. 창은 MouseDown 이벤트를 얻는다. 이제 버튼을 누른채로 마우스 커서를 창의 밖으로 이동시키고 버튼을 떼 보자. 애플리케이션에서는 이 이벤트에 대해 알 수 없다. 

때로는 이런 평범한 마우스 동작이 바람직하지 않겠지만 때로는 프로그램에서 창 바깥에서의 마우스에 대해 무슨일이 일어나는지 알고 있으면 편리하다. 한 예로 그리기 프로그램에서 사용자가 버튼을 누른채 그림을 그리다 마우스가 일시적으로 창 바깥으로 빠져나가는 경우를 생각해보자. 마우스가 창의 경계 바깥에 있더라도 계속해서 MouseMove 이벤트를 받는 것이 더 좋을 것이다. 

다른 경우로 표준 Button 컨트롤을 살펴보자. 마우스 버튼을 눌렀다 떼면 Button에서는 Click 이벤트가 발생한다. 그러나 앞서 처리되는 Click 이벤트는 분명 더 복잡하다. 마우스가 버튼위에 있을 때 왼쪽 마우스 버튼을 눌렀다면 버튼 표면은 눌러졌음을 표현하기 위해 더 어두워진다. 이제 마우스 버튼을 누른채로 마우스 커서를 Button 객체 바깥으로 이동시킨다. 눌려진 표면이 다시 정상 상태로 바뀌는 것을 볼 수 있다. 마우스 버튼을 떼고 마우스 커서를 다시 버튼으로 이동시키면 Button은 마우스 버튼이 떼어졌는지를 알게 된다. 

이런 동작은 마우스 캡처라는 처리를 통해 가능하다. 마우스를 캡처하려면 엘리먼트가 CaptureMouse 메소드를 호출해야 한다. 이 메소드는 UIElement나 ContentElement(또는 Mouse 클래스의 정적 Capture 메소드)에 정의되어 있다. 메소드는 캡처가 성공했는지를 bool로 반환한다. MouseDown 이벤트가 아닌 곳에서 마우스를 캡처하는 것은 별로 좋은 생각이 못된다. 이는 사용자에게 혼란을 줄 수 있으며 유용하지도 않다. 

엘리먼트가 CaptureMouse를 호출한 후에는 마우스 커서가 엘리먼트를 벗어나더라도 MouseMove와 MouseUp 이벤트를 계속해서 받게 된다. 이때는 읽기 전용 IsMouseCaptured 프로퍼티가 캡처 중임을 의미하는 true가 된다. 엘리먼트가 MouseUp 이벤트를 받게 되면 ReleaseMouseCapture나 null을 인자로하는 정적 Mouse.Capture 메소드를 호출해서 마우스 캡처를 중지하는 것이 적절하다. 

마우스캡처는 윈도우의 적절한 동작을 방해할 가능성을 안고 있다. 이런 이유로 윈도우가 프로그램의 마우스 캡처를 일방적으로 풀 수 있다. MouseUp 이벤트를 받고서도 마우스 캡처를 중지하지 않으면 사용자가 다른 창을 클릭할 때 마우스 캡처가 중단된다. 심지어 모든 규칙을 지키더라도 윈도우가 화면상에 갑자기 시스템 모달 대화상자를 띄울 필요가 있다면 마우스 캡처가 중단된다. 

마우스 캡처가 필요한 경우에는 LostMouseCapture 이벤트에 대한 이벤트 핸들러도 설치해서 필요한 정리 작업을 수행해야 한다. LostMouseCapture 이벤트는 null인자의 Mouse.Capture를 호출할 때에도 발생하므로 보통의 마우스 캡처 중단과 강제적인 중단을 구별할 필요가 생길 것이다. 

다음의 DrawCircles 프로그램을 통해 마우스 캡처와 여러 마우스 이벤트에 대해 살펴보기로 하자. 

소스 코드를 보기 전에 프로그램을 실행시켜보자. 창 위에서 왼쪽 마우스 버튼을 누르고 마우스를 드래깅하면 클라이언트 영역에서 원이 그려진다. 최초에 클릭한 지점이 원의 중심이 된다. 눌렀던 왼쪽 마우스버튼을 떼면 경계선은 파란색이고 내부는 빨간색인 원의 확정된다. 

만들어진 원 위에서 오른쪽 마우스 버튼을 누르고 드래깅을 하면 원이 이동된다. 원 위에서 마우스의 가운데 버튼을 누르면 원의 내부가 빨간색이나 투명한 색으로 토글된다 Esc 키를 누르면 그리기나 드래깅 동작이 중단된다. 