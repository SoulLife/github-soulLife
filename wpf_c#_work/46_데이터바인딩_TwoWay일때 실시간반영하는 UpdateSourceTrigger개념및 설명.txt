<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:s="clr-namespace:System;assembly=mscorlib" FontSize="12pt" Name="page">
	<StackPanel>
		<TextBlock HorizontalAlignment="Center">
			First element is StackPanel
		</TextBlock>
		
		<ListBox HorizontalAlignment="Center" Margin="24">
			<ListBoxItem>First ListBox Item</ListBoxItem>
			<ListBoxItem>Second ListBox Item</ListBoxItem>
			<ListBoxItem>Third ListBox Item</ListBoxItem>
			<ListBoxItem>Fourth ListBox Item</ListBoxItem>
			<ListBoxItem>Fifth ListBox Item</ListBoxItem>
		</ListBox>

		<TextBlock HorizontalAlignment="Center">
			<Label Content="Number of characters in third ListBox item = " />
			<Label Content="{Binding ElementName=page, Path=Content.Children[1].Items[2].Content.Length}" />
			<LineBreak />
			<Label Content="Number of characters in selected item = " />
			<Label Content="{Binding ElementName=page, Path=Content.Children[1].SelectedItem.Content.Length}" />	
		</TextBlock>
	</StackPanel>
</Page>

Name 속성이 있는 엘리먼트는 루트 엘리먼트가 유일하다. Page에는 2개의 TextBlock 엘리먼트가 ListBox의 위와 아래에 위치하며, ListBox는 5개의 ListBoxItem컨트롤을 포함한다. 마지막 TextBlock 에 내장된 Label 컨트롤은 ListBox의 세 번째 항목의 텍스트 길이와 선택된 항목의 텍스트 길이를 보여준다. 마지막 Label을 위한 Path의 정의는 다음과 같다. 

Path=Content.Children[1].SelectedItem.Content.Length

이것이 C# 코드에 내장된 프로퍼티의 연속으로 보이긴 하지만 이것은 단지 문자열일 뿐이며, 문자열로 파싱된다. 파서는 리플렉션을 통해 이 항목이 올바른지를 검증하고 올바르지 않다해도 파싱은 어떤 에러나 예외 상황을 발생시키지 않고 그냥 취소된다. Path는 왼쪽에서부터 Page의 Content(StackPanel), StackPanel의 Children 컬렉션(ListBox)의 두 번째 항목, ListBox의 SelectedItem(ListBoxItem), ListBoxItem의 Content(string), string의 Length 프로퍼티 등으로 구성되어 있다. 

23자으이 앞 부분에서 스크롤바 하나를 움직였을 때 Value 프로퍼티가 16자리의 배정밀도 부동소수(double precision floating-point number)로 표현되었을 때 느낌이 어땟는가? 필자는 이것이 매우 멋지다고 생각되기도 하면서 한편으로 좀 과하다는 생각이 들었다 하지만 이것이 겉으로 보이는 숫자 표현만을 위한 문제는 아니다. ScrollBar의 부동소수점 결과는 정수형을 기대하는 어떤 것과의 바인딩에서 잠재적인 문제점을 노출할 수도 있다. 

데이터가 바인딩 소스에서 타깃으로 전달될 때(혹은 반대의 경우에도)데이터는 특정한 타입에서 다른 타입으로 변환되어야 할 것이다. 이 변환을 위해 Binding 클래스는 Converter라는 이름의 프로퍼티를 포함하며, 이 프로퍼티에 변환을 위한 Convert와 ConvertBack 메소드를 구현한 클래스를 설정할 수 있게 한다. 

변환을 수행하는 클래스는 반드시 IValueConverter 인터페이스를 구현해야 하는데, 그 형태는 다음과 같다. 

public class MyConverter: IValueConverter
{
	public object Convert(object value, Type typeTarget, object param, CultureInfo culture)
	{
		...
	}
	public object ConvertBack(object value, Type typeTarget, object param, CultureInfo culture)
	{
		...
	}
}

value 인자는 변환될 객체이고, typeTarget는 변환될 객체의 타입이다. 이것은 메소드가 반환하는 객체의 타입인데, 그 타입의 객체를 반환할 수 없다면 메소드는 null을 반환해야 한다. 세 번째 인자는 Binding의 ConvertParameter프로퍼티가 명시한 객체이고 ,마지막 인자는 변환을 수행할 때 사용되는 컬처(culture)를 명시한다(대부분 이것은 무시된다)

C#에서 Binding을 생성하려면 Convert 프로퍼티를 IValueConverter 인터페이스를 구현한 클래스로 설정해야 한다. 

Binding bind = new Binding(); bind.Convert = new MyConverter();

그리고 변환을 위한 Convert와 ConvertBack에 param인자로 전달할 바인딩의 Convert Parameter 프로퍼티 또한 설정이 필요할 것이다. 

XAML에서 MyConverter 클래스를 Binding 정의에 설정하는 것은 약간 우회할 필요가 있는데, MyConverter 타입의 객체를 생성한 후 그 객체를 마크업 내에서 참조해야 한다. 방법은 21장에서 배운 리소스를 이용하면 된다. 

그러므로 XAML의 Resources 절에서 IValueConverter를 구현하는 클래스를 명시하고 그 것을 key로 연결시키자.

<src:MyConverter x:key="conv" />

MyConverter앞에는 src 접두어가 붙어있는데, MyConverter가 프로젝트의 C# 코드에 있으며, 프로젝트의 네임스페이스를 src접두어와 연결한 XML 네임스페이스 선언이 포함됐다고 가정했기 때문이다. 

Binding 정의 내에서는 MyConverter 객체를 참조하기 위해 StaticResource 마크업 확장을 사용한다. 

"{Binding ... Convert={StaticResource conv}, ...}"

ConverterParameter 프로퍼티 또한 이곳에 넣을 수 있는데, 변환 인자로 변환에 필요한 추가적인 정보를 전달할 수 있다.(간단한 예제를 볼 것이다)하지만 이것이 변환 클래스에 추가적인 정보를 전달할 유일한 방법은 아니다. 클래스는 반드시 IValueConverter 인터페이스를 구현해야 하지만 구현한 클래스에 public 프로퍼티를 정의하는 것을 금지하지는 않는다. 따라서 클래스를 XAML 파일의 Resources 절에 포함한 후 미리 클래스에 정의한 public 프로퍼티에 값을 설정하는 것으로 추가적인 정보 전달이 가능하다. 

<src:MyConverter Decimals="4" s:Key="conv" />

다음은 double 을 decimal로 변환하는 클래스인데, 변환 인자로 decimal결과를 반올림 할 자릿수를 넘긴다. 


using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;


[ValueCOnversion(typeof(double), typeof(decimal))]
public class DoubleToDecimalConverter : IValueConverter
{
	public object Convert(object value, Type typeTarget, object param, CultureInfo culture)
	{
		decimal num = new Decimal((double)value);
	
		if(param != null)
			num = Decimal.Round(num, Int32.Parse(param as string));
	
		return num;
	}
	public object ConvertBack(object value, Type typeTarget, object param, CultureInfo culture)
	{
		return Decimal.ToDouble((decimal)value);
	}
}

WPF 문서에서는 ValueConversion 속성을 클래스 정의의 바로 밑에 포함하게 권고하고 있는데, 이것은 개발 툴에게 이 클래스의 역할을 주지시키기 위함이다. 변환 루틴을 얼마나 견고하게 작성하느냐 하는 것은 전적으로 작성자의 몫이다. 물론 이 루틴을 자신의 코드에서 사용할 것이라면 인자의 타입을 예측하는 것은 별로 어렵지 않을 것이다. 예를 들어 Convert메소드의 param인자가 안전하게 정수형으로 파싱될 수 있는 문자열이라고 가정하면 반환값 또한 typeTarget 인자를 확인할 필요 없이 Decimal일 것이라고 추측할 수 있기 때문이다. 

DoubleToDecimalConverter 클래스는 Window 정의를 가진 DecimalScrollBar 프로젝트의 일부이다. 


<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:src="clr-namespace:Petzold.DecimalScrollBar" Title="Decimal ScrollBar">
	<Window.Resources>
		<src:DoubleToDecimalConverter x:Key="conv" />
	</Window.Resources>
	<StackPanel>

		<!-- 바인딩 소스 -->
	
		<ScrollBar Name="scroll" Orientation="Horizontal" Margin="24" Maximum="100" LargeChange="10" SmallChange="1" />

		<!-- 바인딩 타깃 -->

		<Label HorizontalAlignment="Center" Content="{Binding ElementName=scroll, Path=Value, 
			Converter={StaticResource conv}, ConverterParameter=2}" />
	</StackPanel>
</Window>


Resource 절은 DoubleDecimalConverter 클래스를 포함하며, 이것을 conv키와 연결시킨다. Label 엘리먼트 내의 Binding 정의는 StaticResouce로 이 변환 클래스를 참조하고 ConverterParameter 프로퍼티에 값2를 설정한다(물론 ConverterParameter에 문자열을 설정하는 것이 간단하지만 실은 어떤 타입의 객체도 ConverterParameter에 설정할 수 있다. 다만 이 경우 객체를 설정하려면 그것이 반드시 리소스여야 하며, StaticResource로 참조되어야 한다) 애플리케이션 정의파일은 다음과 같이 프로젝트를 마무리한다. 
<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" StartupUri="DecimalScrollBarWindow.xaml">
</Application>

프로그램에서 스크롤바를 움직이면 값은 소수점 둘째 자리까지 표시된다. 

변환 클래스가 항상 필요한 바인딩 타입은 멀티 바인딩이다. 멀티 바인딩은 여러 소스로부터 얻어진 객체를 하나의 타깃 객체로 모으는 역할을 한다. 멀티바인딩 컨버터는 IMultiValueConverter 인터페이스를 반드시 구현해야 하며 멀티 바인딩의 전통적인 예 중의 하나는 빨간색, 녹색, 파란색의 삼원색을 하나의 Color 객체로 합치는 예제이다. 

ColorScroll 프로젝트는 대부분의 기능을 XAML로 구현한 것을 제외하면 6장의 ScrollCustomColors와 유사하다. 기억하겠지만 ScrollCustomColors는 빨간색, 녹색, 파란색을 위한 3개의 스크롤바를 포함하고 있다. 원래 프로그램은 삼원색으로 SolidColorBrush를 생성하기 위해 이벤트 핸들러가 있었지만 ColorScroll 프로젝트는 바인딩을 사용한다. 다음 애플리케이션 정의 파일을 먼저 살펴보자. 

<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" StartupUri="ColorScrollPage.xaml" >
</Application>

다양한 시도를 위해서 메인 XAML 파일에 Window 대신 Page를 생성했다. Resources 절은 2개의 변환 클래슬르 정의하는데, 하나는 스크롤바에서 받은 double 값을 레이블을 위한 byte 값으로 변환하는 클래스이며, 또 하나는 3개의 스크롤바 값으로부터 ScrollColorBrush를 생성하는 클래스이다. ScrollCustomCoolors에서와 같이 레이아웃은 2개의 Grid 패널을 필요로 한다. 첫 번째 Grid는 3개의 열을 가지고 있으며, 왼쪽 열에 스크롤바와 레이블을 포함한 두 번째 Grid가 있다. 또한 맨 오른쪽에는 결과 색을 출력하는 Border 엘리먼트가 있으며, 그 사이에는 GridSplitter가 위치하고 있다. 

<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:src="clr-namespace:Petzold.ColorScroll" WindowTitle="Color Scroll">
	<Page.Resources>
		<src:DoubleToByteConverter x:Key="convDoubleToByte" />
		<src:RgbToColorConverter x:Key="convRgbToColor" />
	</Page.Resources>

	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" />
			<ColumnDefinition Width="Auto" />
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>

		<!-- ScrollBar와 Label 컨트롤을 가진 Grid -->

		<Grid Grid.Row="0" Grid.Column="0">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="100*" />
				<RowDefinition Height="Auto" />
			<Grid.RowDefinitions>

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="33*" />
				<ColumnDefinition Width="33*" />
				<ColumnDefinition Width="33*" />
			</Grid.ColumnDefinitions>

			<!-- 빨간색 -->

			<Label Content="Red" Foreground="Red" HorizontalAlignment="Center" Grid.Row="0" Grid.Column="0" />

			<ScrollBar Name="scrRed" Background="Red" Value="128" Minimum="0" Maximum="255" SmallChange="1" LargeChange="16"
				Focusable="True" Grid.Row="1" Grid.Column="0" />

			<Label Content="{Binding ElementName=scrRed, Path=Value, Mode=OneWay, Converter={StaticResource convDoubleToByte}}" 
				HorizontalAlignment="Center" Grid.Row="2" Grid.Column="0" />


			<!-- 녹색 -->

			<Label Content="Green" Foreground="Green" HorizontalAlignment="Center" Grid.Row="0" Grid.Column="1" />

			<ScrollBar Name="scrGreen" Background="Green" Value="128" Minimum="0" Maximum="255" SmallChange="1" LargeChange="16"
				Focusable="True" Grid.Row="1" Grid.Column="1" />

			<Label Content="{Binding ElementName=scrGreen, Path=Value, Mode=OneWay, Converter={StaticResource convDoubleToByte}}" 
				HorizontalAlignment="Center" Grid.Row="2" Grid.Column="1" />

			<!-- 파란색 -->

			<Label Content="Blue" Foreground="Blue" HorizontalAlignment="Center" Grid.Row="0" Grid.Column="2" />

			<ScrollBar Name="scrBlue" Background="Blue" Value="128" Minimum="0" Maximum="255" SmallChange="1" LargeChange="16"
				Focusable="True" Grid.Row="1" Grid.Column="2" />

			<Label Content="{Binding ElementName=scrBlue, Path=Value, Mode=OneWay, Converter={StaticResource convDoubleToByte}}" 
				HorizontalAlignment="Center" Grid.Row="2" Grid.Column="2" />
		</Grid>

		<GridSplitter Grid.Row="0" Grid.Column="1" Width="6" HorizontalAlignment="Center" VerticalAlignment="Stretch" />

		<Border Grid.Row="0" Grid.Column="2">
			<Border.Background>
				<MultiBinding Converter="{StaticResource convRgbToColor}" >
					<Binding ElementName="scrRed" Path="Value" Mode="OneWay" />
					<Binding ElementName="scrGreen" Path="Value" Mode="OneWay" />
					<Binding ElementName="scrBlue" Path="Value" Mode="OneWay" />
				</MultiBinding>
			</Border>
		</Border>
	</Grid>
</Page>

3개의 Label 컨트롤은 스크롤바 아래에 위치하면서 스크롤바의 값을 보여주는데, 각기 데이터 바인딩이 되어있다. 다음은 빨간색을 위한 Binding 이 Label의 Content프로퍼티를 ScrollBar의 Value 프로퍼티로 설정한다(엘리먼트 이름은 scrRed임)

Content="{Binding ElementName=scrRed, Path=Value, Mode=OneWay, Converter={StaticResource convDoubleToByte}}"

컨버터로는 다음 클래스를 참조하는 정적 리소스를 convDoubleToByte 키를 통해 설정한다. 


using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

[ValueConversion(typeof(double), typeof(byte))]
public class DoubleToByteConverter : IValueConverter
{
	public object Convert(object value, Type typeTarget, object param, CultureInfo culture)
	{
		return (byte)(double)value;
	}
	public object ConvertBack(object value, Type typeTarget, object param, CultureInfo culture)
	{
		return (double)(byte)value;
	}
}

이 클래스에서는 이미 구현이 되어있지만 바인딩이 소스에서 타깃으로 OneWay이므로 ConvertBack 메소드는 사실 필요 없다. 따라서 간단히 null을 반환해도 된다. Convert 메소드 내에서는 일단 객체를 double로 형 변환한 후 byte로 형 변환해야 하는데, 객체를 바로 byte로 변환할 경우에는 런타임 예외가 발생한다. 

멀티 바인딩은 ColorScrollPage.xaml의 아랫부분에서 볼 수 있는데, 바인딩은 Border 엘리먼트의 Background 프로퍼티를 설정한다. 

<Border.Background>
	<MultiBinding Converter="{StaticResource convRgbToColor}">
		<Binding ElementName="scrRed" Path="Value" Mode="OneWay" />
		<Binding ElementName="scrGreen" Path="Value" Mode="OneWay" />
		<Binding ElementName="scrBlue" Path="Value" Mode="OneWay" />
	</MultiBinding>
</Border.Background>

MultiBinding 엘리먼트는 항상 하나 이상의 Binding 엘리먼트를 자식으로 포함하고 있다. 컨버터는 파일의 Resources 절에 정의되어 convRgbToColor란 키 이름으로 참조하며, 반드시 세 개의 바인딩으로부터 얻어진 값 3개를 Border 컨트롤의 Background 프로퍼티 설정에 알맞은 객체로 변환해야 한다. 다음 IMultiValueConverter 인터페이스를 구현한 컨버터 클래스를 살펴보자. 


using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;

public class RgbToColorConverter : IMultiValueConverter
{
	public object Convert(object[] value, Type typeTarget, object param, CultureInfo culture)
	{
		Color clr = Color.FromRgb((byte)(double)value[0],(byte)(double)value[1],(byte)(double)value[2]);
		
		if(typeTarget == typeof(Color))
			return clr;
		
		if(typeTarget == typeof(Brush))
			return new SolidColorBrush(clr);

		return null;
	}
	public object[] ConvertBack(object value, Type[] typeTarget, object param, CultureInfo culture)
	{
		Color clr;
		object[] primaries = new object[3];

		if(value is Color)
			clr = (Color)value;
		else if(value is SolidColorBrush)
			clr = (value as SolidColorBrush).Color;
		else
			return null;

		primaries[0] = clr.R;
		primaries[1] = clr.G;
		primaries[2] = clr.B;
		return primaries;
	}
}


Convert 메소드의 첫 번째 인자는 객체의 배열인데 MultiBinding 엘리먼트의 Binding 자식을 모두 받기 위해서는 다수의 객체를 받을 수 있는 형태여야 하기 때문이다. 이 컨버터는 배열에 double 타입의 세 객체가 들어올 것임을 이미 알고 있기 때문에 바로 이 값을 byte로 형변환하고 Color 객체를 생성한다. 다만 여기서 typeTarget인자가 Color인지 Brush인지 구별해 이 루틴을 좀 더 보편화 시켰다. 

이 OneWay 바인딩에서 ConvertBack 메소드는 절대 호출되지 않기 때문에 간단히 null을 반환해도 된다. 하지만 여기서는 Color나 SolidColorBrush인자로부터 삼원색을 분리해 배열로 반환했다 MultiBinding 엘리먼트의 자식 Binding 엘리먼트가 그 자신을 위한 컨버터를 참조할 수도 있다. 예를 들어 ColorScroll 프로그램 내에서 각 Binding 엘리먼트가 DoubleToByteConverter를 참조할 수 있다. 이 경우 RgbToColorConverter에 입력되는 값은 배정밀도 부동소수가 아닌 byte 배열이 될 것이다. 

지금까지 본 바인딩은 소스 엘리먼트로 타깃을 즉시 갱신했지만 항상 이런 방식이 요구되는 것은 아미ㅕ, 다른 방식의 수행이 요구될 떄도 있다. 

다음의 스탠드얼론 XAML 파일은 3쌍의 TextBox 컨트롤을 포함한다. 각 쌍은 TwoWay 바인딩으로 연결된 Text 프로퍼티를 가지고 있다. 왼쪽에 배치된 TextBox 컨트롤은 소스이며, 오른쪽은 타깃이다. 


<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="*" />
		<ColumnDefintion Width="*" />
	</Grid.ColumnDefinitions>

	<Grid.RowDefinitions>
		<RowDefintion Height="Auto" />
		<RowDefintion Height="Auto" />
		<RowDefintion Height="Auto" />
		<RowDefintion Height="Auto" />
	<Grid.RowDefintions>

	<Label Grid.Row="0" Grid.Column="0" Margin="24 24 24 0" Content="Source TextBox Controls" />
	<Label Grid.Row=0" Grid.Column="1" Margin="24 24 24 0" Content="Target TextBox Controls" />

	<TextBox Grid.Row="1" Grid.Column="0" Name="txtbox1" Margin="24" />
	<TextBox Grid.Row="1" Grid.Column="1" Margin="24" Text="{Binding ElementName=txtbox1, Path=Text, Mode=TwoWay}" />

	<TextBox Grid.Row="2" Grid.Column="0" Name="txtbox2" Margin="24" />
	<TextBox Grid.Row="2" Grid.Column="1" Margin="24" Text="{Binding ElementName=txtbox2, Path=Text, Mode=TwoWay}" />

	<TextBox Grid.Row="3" Grid.Column="0" Name="txtbox3" Margin="24" />
	<TextBox Grid.Row="3" Grid.Column="1" Margin="24" Text="{Binding ElementName=txtbox3, Path=Text, Mode=TwoWay}" />
</Grid>


왼쪽 상단의 TextBox를 클릭해 값을 입력해 보자. 이것이 TwoWay 바인딩의 소스인데, 어떤 것을 타이핑해 넣으면 타이핑한 내용이 바인딩된 오른쪽 TextBox에도 즉시 나타난다. 이제 TAB 키를 눌러보자. 이제 오른쪽 타깃 TextBox에 입력 포커스가 있을 것이다. 여기에 어떤 것을 타이핑해 넣어보자. 입력한 텍스트가 현재 포커스를 가진 TextBox에는 나타나지만 왼쪽 바인딩 소스 TextBox에는 내용이 바로 갱신되지 않는다. 바인딩은 명확히 TwoWay 바인딩인데도 불구하고 말이다. 

다시 TAB 키를 눌러보자. 그러면 오른쪽의 타깃 TextBox가 입력 포커스를 잃는 것과 동시에 타깃의 모든 내용이 바운딩된 왼쪽 소스 TextBox로 전송된다. 타깃이 입력 포커스를 잃을 때까지 소스가 갱신되지 않았던 것을 제외하면 이것은 확실히 TwoWay 바인딩이다. 계속해서 TAB 키를 누르고 각 TextBox에 텍스트를 입력해보자.

기본적으로 TextBox의 Text 프로퍼티가 TwoWay 바인딩의 타깃 프로퍼티일 때 바인딩 소스는 타깃이 입력 포커스를 잃을 때까지 타깃으로부터 값이 갱신되지 않는다. 이해를 위해서 BindToTextBox 프로그램의 왼쪽 소스가 TextBox가 아닌 어떤 데이터베이스와 연동됐다고 생각해보자. 오른쪽 TextBox 컨트롤은 데이터베이스의 값을볼 수도 있고, 편집도 가능하다고 가정할 때 데이터베이스에 어떤 것이 변경됐다면 결과를 즉시 확인하고 싶을 것이다. 따라서 타깃 TextBox의 Text 프로퍼티는 소스를 변경함에 따라 즉시 갱신된다. 

하지만 데이터베이스의 필드 값을 바꾸려고 TextBox에 텍스트를 입력할 때 실수로 키나 백스페이스를 잘못 입력해서 또는 고양이가 갑자기 뛰어올라 눌러진 모든 키 입력이 데이터베이스에 바로 갱신되길 원하는가? 아마도 아닐 것이다. 오직 텍스트의 입력이 끝났을 때 소스가 갱신되길 원할 것이다. 바인딩에서 입력 작업이 끝났다는 것을 감지할 수 있는 간단한 방법은 TextBox가 입력 포커스를 잃을 때를 감지하는 것이다. 

이 동작은 Binding의 UpdateSourceTrigger를 설정하면 바꿀 수 있다. 이것을 UpdateSourceTrigger 열거형인 LostFocus(TextBox의 Text를 위한 기본값), PropertyChanged(대부분의 프로퍼티에 기본임)소스에 변경을 반영하기 위해 프로그램에서 특별한 작업이 필요한 Explicit으로 설정할 수 있다. 

BindToTextBox.xaml 의 바인딩 중 하나를 다음과 같이 바꿔보자. 

Text="{Binding ElementName=txtbox1, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"

이제 타깃 TextBox의 모든 키 입력에 소스 TextBox값이 변경된다. 

UpdateSourceTrigger.Explicit 옵션은 추가적인 작업이 요구되는데, 이 옵션을 사용한 프로그램은 바인딩을 정의한 엘리먼트 상에서 GetBindingExpression(FrameworkElement에 정의된 메소드)을 호출해 BindingExpression 객체 인스턴스를 얻어야 한다. 이 메소드의 인자는 바인딩에 포함된 DependencyProperty이다. 

BindingExpression bindexp = txtboxSource.GetBindingExpression(TextBox.TextProperty);

그 후 타깃으로부터 소스를 갱신하고 싶을 때는(아마도 Update 같은 버튼을 누르는 것으로)다음을 호출한다. 

bindexp.UpdateSource();

이 호출은 바인딩 모드를 바꿀 수 없는데, 바인딩 모드는 반드시 TwoWay이거나 OneWayToSource이어야 하고 그 외의 값이면 호출은 무시된다. 

데이터바인딩을 데이터베이스 ,다른 외부 클래스, 객체에서 사용하려면 ElementName 프로퍼티의 사용을 멀리해야 할 것이다. 물론 ElementName은 두 엘리먼트를 바인딩할 때 매우 유용하지만 이 제약을 넘어설 필요가 있다. 

ElementName으로 바인딩의 소스를 명시하는 것 대신에 23장의 남은 대부분에서 바인딩은 Binding 클래스 Source 프로퍼티를 사용한다. Source 프로퍼티는 객체를 참조하며, Path는 계속해서 객체의 프로퍼티(또는 연속적으로 이어진 프로퍼티)를 참조한다. 

Source 를 위해 사용 가능한 방법 한 가지는 x:Static 마크업 확장이다. 21장에서 보았듯이 x:Static은 XAML 파일이 클래스 내에 정적 필드나 프로퍼티를 참조하게 할 수 있다. x:Static 자체만으로도(Environment 클래스의 정적 프로퍼티들을 사용할 때와 같이)이런 프로퍼티는 얻어올 수 있지만 진정으로 필요한 것은 정적 프로퍼티가 참조하는 객체의 프로퍼티일 것이다. 이 경우 바인딩이 필요하다. 

예를 들어, System.Globalization 네임스페이스 내에 있는 DateTimeFormatInfo 클래스의 DayNames 프로퍼티를 생각해보자. DayNames는 요일에 해당하는 문자열 배열을 반환하는 인스턴스 프로퍼티이다. DayNames 에 접근하기 위해서는 DateTimeFormatInfo 타입의 객체가 필요하며, DateTimeFormatInfo 클래스 자체는 이 클래스의 인스턴스가 접근할 수 있게 허용 하는 2개의 정적 프로퍼티를 제공한다. DateTimeFormatInfo.InvariantInfo 프로퍼티는 변함이 없는 컬쳐(마이크로 소프트가 속해 있는 컬쳐)에 적용 가능한 DateTimeFormatInfo의 인스턴스를 반환하는 반면 DateTimeFormatInfo.CurrentInfo는 사용자 자신의 컬처에 해당하는 인스턴스를 반환한다. 

C#에서는 다음과 같이 요일에 해당하는 문자열 배열을 현재 사용자의 언어로 저장한다. 

string[] strDayNames = DateTimeFormatInfo.CurrentInfo.DayNames;

XAMl에서는 이 정보를 얻기 위해서 바인딩을 정의해야 한다. Source 프로퍼티는 정적 프로퍼티 DateTimeFormatInfo.CurrentInfo를 위한 x:Static 마크업 확장으로 설정되며, 바인딩의 Path 프로퍼티는 문자열 DayNames로 설정된다. 또한 XAML은 System.Globalization 네임스페이스와 접두어(예를 들면 g)를 연결한 XML 네임스페이스 선언을 필요로 한다.