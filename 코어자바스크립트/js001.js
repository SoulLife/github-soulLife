window.onload = function () {    
   //생성자 호출 : 함수나 메서드 호출 앞에 new 키워드가 있다면, 그것은 생성자 호출이다 생성자 호출은 일반 함수와 메서드 호출에 비해 매개변수, 
   //호출 컨텍스트와 반환 값을 다루는 방식이 다르다. 생성자 호출에서 괄호 안에 전달인자 목록이 포함되어 있다면 우선 전달인자 표현식이 평가되고,
   //함수와 메서드 호출의 경우와 마찬가지로 평가된 전달인자가 생성자 함수에 전달된다. 그러나 생성자에 매개변수가 엇ㅂ다면 자바스크립트 생성자 호출 문법은 전달인자
   //목록과 괄호를 아예 생략하는 것을 허용한다. 즉, 생성자 호출에서 한 쌍의 빈 괄호를 언제나 생략할 수 있다는 말이다. 
   var o = new Object();
   var o = new Object;
   //생성자를 호출하면 생성자의 prototype프로퍼티를 상속받은 새로운 빈 객체가 생성된다. 생성자 함수는 객체를 초기화하고, 새로 생성된 이 객체는 생성자 함수의 호출
   //호출 컨텍스트로 사용된다. 따라서 생성자 함수는 새로 생성된 객체를 this 키워드로 참조할 수 있다. 주의할 것은 생성자 호출이 마치 메서드 호출처럼 보일지라도, 메서드가 속한 객체가
   //아닌 새로 생성된 객체가 호출 컨텍스트로 사용된다는 점이다. 즉 new o.m()과 같은 표현식에서 o가 호출 컨텍스트로 사용되지는 않는다는 뜻이다. 
   //생성자 함수는 보통 return 키워드를 사용하지 않는다. 일반적으로 생성자 함수는 새 객체를 초기화하고, 생성자 함수 몸체의 끝에 이르면 암시적으로 그 객체를 반환한다.
   //이 경우 새 객체가 생성자 호출 표현식의 값이다. 그러나 만약 생성자가 return문을 사용하여 명시적으로 어떤 객체를 반환한다면 반환된 객체가 생성자 호출 표현식의 값이 된다.
   //만약 생성자가 반환값 없이 return문만을 사용하거나 기본 자료형 값(primitive value)을 반환한다면 그 반환 값은 무시되고 새로 생성된 객체가 호출 표현식의 값으로 사용된다.

   //간접호출 : 자바스크립트 함수는 객체이고, 모든 자바스크립트 객체와 같이 함수에도 메서드가 있다. 이 메서드 중call()과 apply()는 함수를 간접적으로 호출한다.
   //두 메서드 모두 호출 때 this값을 명시적으로 지정할 수 있는데 이는 어떤 함수든지 특정 객체의 메서드로 호출할 수 있다는 의미다. 심지어 함수가 실제로 그 객체에
   //속하지 않더라도 말이다. call()메서드는 자신에게 주어진 전달인자를 호출할 함수의 전달인자로 사용하고 apply()메서드는 값 배열을 전달인자로 사용한다.
   //call()과 apply()메서드는 뒤에서 자세히 다룬다. 

   //함수 전달인자와 매개변수 : 자바스크립트에서 함수를 정의할 때는 함수 매개변수의 타입, 즉 자료형을 명시하지 않는다. 그리고 함수를 호출할 때도 전달하는 인자 값의 자료형을
   //검사하지 않는다. 심지어는 전달인자의 개수도 검사하지 않는다. 함수 호출 시 해당 함수에 정의된 매개변수보다 적거나 더 많은 인자가 전달되었을 때 어떤 일이 일어나는 지가
   //이 장의 세부 절에서 설명할 내용이다. 또한 함수에 전달된 인자가 적절한지를 확인하기 위해 전달인자의 형식을 어떻게 명시적으로 테스트할수 있는지도 다를 것이다. 
};
