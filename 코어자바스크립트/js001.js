window.onload = function () {    
    //자바스크립트는 진정한 의미에서의 다차원 배열을 지원하지는 않는다. 그러나 배열의 배열을 사용해 다차원 배열을 흉내낼 수있다. 
    //배열 내의 배열에 있는 원소에 접근하기 위해서는 단순히 [] 연산자를 두 번 사용하면 된다. 예시로 matrix가 배열의 배열이라고 가정하자
    //matrix[x]의 모든 배열 원소는 숫자 배열이다. 이 숫자 배열의 특정 숫자에 접근하기 위해서는matrix[x][y]와 같이 쓸수있다.
    //예를들어 구구단 표를 작성하기 위해 2차원 배열을 사용하는 방법은 다음과같다. 
    //다차원 배열을 만든다
    var table = new Array(10); 
    for(var i=0; i<table.length; i++)
    {
        table[i] = new Array(10); //각 행에 열 개의 열을 만든다
    }
    //배열을 초기화 한다 
    for(var row = 0; row < table.length; row++)
    {
        for(var col = 0; col<table[row].length; col++)
        {
            table[row][col] = row * col;
        }
    }
    //5*7을 계산하기 위하여구구단 표를 사용한다
    var product = table[5][7]; // 35
    console.log(product);

    //배열 메서드 : ECMAScript3의 Array.prototype은 배열을 다루는데 필요한 여러 종류의 함수들을 정의하고 있다. 정의된 함수들은
    // 모든 배열에서 메서드로 사용할 수있다. 
    //join(): Array.join()메서드는 배열의 모든 원소를 문자열로 반환하고 변환한 문자들을 이어 붙인 결과를 반환한다. 
    //이때 결과로 반환되는 문자열에서 배열의 원소들을 구별하기 위해 구분자(separator)문자열을 사용한다. 별도로 구분자 문자열을 지정하지 않으면
    //심표(,)가 기본값으로 사용된다. 예를 들어 다음의 코드는 "1,2,3"문자열을 생성한다.
    var a = [1,2,3]; //세 개의 원소를 가진 배열을 생성한다.
    a.join(); // 1,2,3
    a.join(" "); // 1 2 3
    a.join(""); 123
    var b = new Array(10); //길이가 10인 빈 배열을 생성한다.
    b.join("-"); //-----------아홉개의 하이픈 문자열이 생성된다.
    //Array.join()메서드는 String.split()메서드와는 반대로 작동한다. String.split()메서드는 문자열을 조각들로 분리하고 이 조각들을 원소로 하는 배열을 생성한다.

    //reverse() : Array.reverse()메서드는 배열의 원소 순서를 반대로 뒤집어 반환한다. 이 작업은 배열 안에서 직접 수행된다. 다시 말해 순서가 뒤바뀐 새로운 배열을
    //생성하는 것이 아니라 이미 존재하는 배열안에서 원소들의 순서를 뒤바꾼다.
    var a = [1,2,3];
    a.reverse().join(); // a는 [3,2,1]이되고, 문자열 '3,2,1'을 생성한다

    //sort() : Array.sort()메서든느 배열 안의 원소들을 정렬하여 반환한다. sort()메서드를 별도의 전달인자 없이 호출하면, 배열안의 원소들을 알파벳순으로 정렬한
    //다 필요한 경우 비교를 위해 원소들이 잠시 문자열로 변환된다. 
    var a = new Array("banana","cherry","apple");
    a.sort();
    var s = a.join(", "); // s === 'apple, banana, cherry'
    //배열에 undefined원소들이 존재하면 이 원소들은 배열의 끝부분으로 정렬된다. 
    //알파벳순이 아니라 다른 순서로 배열을 정렬하려면 sort()메서드의 전달인자를 통해 비교 함수를 직접 명시해주어야 한다. 비교 함수는 전달인자를 두 개 받아서
    // 정렬된 배열에서 어떤 것이 먼저 나타나야 하는지 판단한다. 만약 첫번째 인자가 두 번째보다 먼저 나타나야 한다면 비교 함수는 0보다 작은 숫자를 반환해야 한다
    //만약 첫 번째 인자가 두번째 인자 뒤에 나타나야 한다면 0보다 큰 숫자를 반환해야 하며 만약 두 값이 동등하다면(따라서 그들 간의 순서를 정의하는 것이
    //무의미하다면)0을 반환해야 한다. 예를들어 배열 원소들을 알파벳 순이 아닌 번호순으로 정렬하려면 다음과 같이 코드를 작성할수있다.
    var a = [33, 4, 1111, 222];
    a.sort(); //알파벳순 : 111,222,33,4
    a.sort(function(a,b){ //번호순: 4, 33, 222, 1111
        return a - b; //0보다 작은값 0, 또는 0보다 큰 값을 반환한다. 이때 반환 값에 따라 정렬이 달라진다. 
    });
    console.log(a);
    a.sort(function(a,b){ return b - a;})//내림차순으로 정렬한다. 
    console.log(a);

    //배열 원소를 정렬하는 또 다른 예로 ,대 소문자를 구분하지 않는 알파벳순으로 배열을 정렬할수있다. 이때 비교 함수는 전달인자들을 toLowerCase()메서드를
    //사용해 소문자로 바꾼 후 비교 작업을 수행한다. 
    a = ["ant", "Bug", "cat", "Dog"];
    a.sort(); // 대소문자를 구분한 정렬 : Bug, Dog, ant, cat]
    a.sort(function(s,t){ //대소문자를 구분하지 않은 정렬
        var a = s.toLowerCase();
        var b = t.toLowerCase();
        if(a < b)return -1;
        if(a > b)return 1;
        return 0;
    }); //ant, bug, cat, dog

    //concat() : Array.concat()메서드는 기존 배열의 모든 원소에 concat()메서드의 전달인자들을 추가한 새로운 배열을 반환한다. 만약 concat()메서드의 전달인자로
    // 배열을 전달하면 이 배열안의 원소들을 꺼내어 반환하는 배열에 추가한다. 하지만 배열의 원소중에 배열이 있는 중첩 배열의 경우네느 중첩된 배열의 원소까지
    //꺼내지는 않음을 명심하자 예를 들면 다음과 같다.
    var a = [1,2,3];
    a.concat([4,5]); //[1,2,3,4,5]를 반환한다
    a.concat([4,5]); //1,2,3,4,5]를 반환한다
    a.concat([4,5],[6,7]); //[1,2,3,4,5,6,7]을 반환한다
    a.concat([4,[5,6,7]]); //[1,2,3,4,5,6,7]을 반환한다. 

    //slice() : Array.slice() 메서드는 부분 배열(subarray)을 반환한다. 여기서 부분 배열이란 배열에서 잘라낸 원소들을 담은 새 배열이다. 
    //slice()메서드는 전달인자를 두개 받는데 각 인자는 반환될 부분의 처음과 끝을 명시한다. 반환되는 배열은 첫번째 전달인자가 지정하는 위치부터 두번째 전달
    //인자가 지정하는 위치 이전 까지의 모든 원소를 포함한다. 만약 전달인자를 하나만 명시하면 그위치에서 배열 끝까지의 모든 원소를 포함하는 부분 배열을 반환한다.
    //만약 전달인자가 음수라면, 배열의 마지막 원소에서부터의 상대적인 위치를 가리키는 것이다. 예를 들어 전달인자 -1은 배열의 마지막 원소를 가리키며, 전달인자
    //-3은 배열의 마지막 원소부터 앞쪽으로 세번째 원소를 가리킨다. 
    var a = [1,2,3,4,5];
    a.slice(0,3); //[1,2,3]을 반환한다
    a.slice(3); // 4,5f를 반환한다
    a.slice(1,-1); //2,3,4를 반환한다
    a.slice(-3,-2); //3를 반환한다.

    //splice() : Array.splice()메서드는 배열의 원소를 삽입하거나 원소를 제거하려 할때 범용적으로 사용할 수 있는 메서드다. splice()메서드는 slice()나
    //concat()메서드와는 달리 호출 대상 배열을 바로 수정한다. splice()메서드는 slice()메서드와 이름이 매우 유사하지만 수행하는 작업은 완전히 다름을 유념하자.
    //splice() 메서드는 배열의 원소를 삭제하거나 배열에 새로운 원소를 삽입하는데 사용할수있으며 이 두 작업을 동시에 수행할 수도있다. 배열 안의 원소들을 빈틈없이
    //배치하기 위해서 원소를 추가하거나 삭제할 때 필요에 따라 나머지 원소들의 인덱스 값이 증가하거나 감소할 수있다. splice()의 첫 번째 전달인자는 배열상에서
    //삽입 혹은 삭제 작업을 시작할 위치를 지정하며, 두번째 전달인자는 배열에서 삭제할 원소의 개수를 지정한다 두 번째 전달인자를 지정하지 않으면 첫 번째 전달인자로
    //지정한 배열의 시작 위치에서 마지막 원소까지 전부 삭제한다. splice()는 이렇게 삭제한 배열을 반환하며, 만약 삭제된 원소가 하나도 없다면 빈 배열을 반환한다.
    var a = [1,2,3,4,5,6,7,8];
    a.splice(4); // 5,6,7,8을 반환한다 a는 이제 [1,2,3,4]
    a.splice(1,2); //2,3을 반환한다 a는 이제[1,4]
    a.splice(1,1); //4를 반환한다 a는 이제[1]
    //splice()의 처음 두 전달인자는 배열에서 삭제할 원소들을 지정하는 데 사용되었다. 세번째 전달인자부터는 배열에 새롭게 삽입할 원소들을 지정하는 데 사용되며
    //이때 삽입 작업은 첫 번째 전달인자로 지정된 시작 위치부터 수행한다.
    var a = [1,2,3,4,5];
    a.splice(2,0,"a","b"); // []를 반환한다 a는 이제 [1,2,a,b,3,4,5]
    a.splice(2,2,[1,2],3); //a,b를 반환한다 a는이제 [1,2,[1,2],3,3,4,5]
    //concat()메서드와는 달리 splice()메서드는 전달인자로 배열이 전달되면 그 배열의 원소들을 꺼내어 삽입하지 않고 배열 그 자체를 삽입한다 
    

};
