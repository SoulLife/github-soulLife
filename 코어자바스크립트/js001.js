window.onload = function () {    
   //자신만의 함수 프로퍼티 정의하기 : 자바스크립트에서 함수는 원시 값이 아니지만 특별한 종류의 객체이고 이는 함수가 프로퍼티를 가질 수 있음을 의미한다. 함수가
   //여러번 호출되어도 그값이 유지되어야 하는 정적 변수가 필요할 때는 전역변수를 선언해서 네임스페이스를 난잡하게 하기보다 함수의 프로퍼티를 사용하는 것이 편리한
   //경우가 많다. 예를 들어 호출될 때마다 유일한 정수 값을 반환하는 함수를 작성한다고 가정해보자. 이 함수는 같은 값을 두번 반환해서는 안된다. 이런 정보를 전역변수에
   //저장할 수도 있지만 부적합한 면이 있는데 왜냐하면 그 정보는 오직 해당 함수만사용하기 때문이다. 이러한 정보는 함수 객체의 프로퍼티에 저장하는 편이 더 낫다. 
   //다음은 호출될 때마다 유일한 값을 반환하는 예제다. 
   //함수 객체의 카운터 프로퍼티를 초기화한다. uniqueInteger 함수 정의는 끌어올려져 해석되기 때문에(hoisted)
   //실제 uniqueInteger 함수 정의문 앞에서 이렇게 먼저 할당을 할 수 있다. uniqueInteger.counter = 0;

   //이 함수는 호출될 때마다 매번 다른 정수를 반환한다. 다음 반환 값을 기억하기 위해 자신의 프로퍼티를 사용한다.
   function uniqueInteger()
   {
      return uniqueInteger.counter++; //카운터 프로퍼티를 반환하고 증가 시킨다. 
   }
   //앞서 계산한 결과를 캐시하도록 자신의 프로퍼티를 사용(함수 자신을 배열처럼 다룬다)다음 factorial()함수를 살펴보자.
   //팩토리얼을 계산하고 계산 결과를 함수 자신의 프로퍼티에 캐시한다. 
   function factorial(n)
   {
      if(isFinite(n) && n > 0 && n ==Math.round(n)) //유한, 양의 정수만 받음
      {
         if(!(n in factorial))
         
            factorial[n] = n * factorial(n-1); //팩터리얼을 계산하고 계산값 캐시
         return factorial[n];
         
      }else return NaN; //잘못된 입력 값이 들어오면 NaN을 반환한다.
   }
   factorial[1] = 1; //캐시를 기본 경우(1)에 대한 값으로 초기화 한다. 

};

