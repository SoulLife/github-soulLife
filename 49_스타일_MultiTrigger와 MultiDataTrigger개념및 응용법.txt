다음의 XAML에서는 Setter 엘리먼트의 Value 속성을 데이터 바인딩했다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<StackPanel.Resources>
		<Style TargetType="{x:Type Button}">
			<Setter Property="FontSize" Value="{Binding ElementName=scroll, Path=Value}" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="Margin" Value="24" />
		</Style>
	</StackPanel.Resources>

	<ScrollBar Name="scroll" Orientation="Horizontal" Margin="24" Minimum="11" Maximum="100" Value="24" />

	<Button>
		Button Number 1
	</Button>
	<Button>
		Button Number 2
	</Button>
	<Button>
		Button Number 3
	</Button>
</StackPanel>

Button을 위한 Style 엘리먼트는 FontSize 프로퍼티의 Value속성을 scroll이란 ScrollBar의 Value프로퍼티와 바인딩해 Setter를 설정했다. 따라서 스크롤바를 조정하면 버튼은 커지고 작아진다. 

그동안 간단한 컨트롤과 TextBlock 엘리먼트를 위한 스타일만을 보았지만 스타일은 그래픽을 그리는 데 있어서도 큰 역할을 한다. 다음 XAML 파일은 TargetType을 Ellipse로 설정한 스타일을 보여준다. Style은 각 타원의 외형과 크기를 정의하며, 각 Ellipse 엘리먼트의 위치와 색상은 개별적으로 설정된다. 

<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<Canvas.Resources>
		<Style TargetType="{x:Type Ellipse}" >
			<Setter Property="Stroke" Value="Black" />
			<Setter Property="StrokeThickness" Value="3" />
			<Setter Property="Width" Value="96" />
			<Setter Property="Height" Value="96" />
		</Style>
	</Canvas.Resources>

	<Ellipse Canvas.Left="100" Canvas.Top="50" Fill="Blue" />
	<Ellipse Canvas.Left="150" Canvas.Top="100" Fill="Red" />
	<Ellipse Canvas.Left="200" Canvas.Top="150" Fill="Green" />
	<Ellipse Canvas.Left="250" Canvas.Top="100" Fill="Cyan" />	
	<Ellipse Canvas.Left="300" Canvas.Top="50" Fill="Magenta" />
</Canvas>

22장의 YellowPad 프로그램 속의괘선과 유사한 연속된 수평선을 그린다고 생각해보자. Style 엘리먼트는 Stroke색상을 위한 Setter를 포함하고, 각 수평선은 같은 X 좌표에서 시작하고 끝나기 때문에 Style은 당연히 x1과 x2를 설정하기 위한 Setter를 포함할 수 있을 것이다. 

<Style TargetType="Line">
	<Setter Property="Stroke" Value="Blue" />
	<Setter Property="X1" Value="100" />
	<Setter Property="X2" Value="300" />
</Style>

그 후 각 Line 엘리먼트를 다음과 같이 간단히 표현할 수 있을 것이다. 

<Line Y1="100" Y2="100" />
<Line Y1="125" Y2="125" />
<Line Y1="150" Y2="150" />
...

이것이 특별히 나쁠 것은 없다. 하지만 이 선의 위치를 약간 조정할 필요가 있을 때는 Y1과 Y2의 값을 수작업으로 하나하나 변경해야 하고 이것에 상당한 시간이 소요될 것이다. 하지만 이것이 수평선이고 Y1과 Y2의 값이 앞의 코드처럼 항상 같다고 가정한다면 각 Line 엘리먼트를 하나의 값만으로 명시하는 방법을 고려해볼 수 있을 것이다. 

방법은 23장의 마지막 부분에서 다뤘던 RelativeSource을 사용한 Binding에 있다. Y2 프로퍼티를 위한 Setter를 정의해 Y2가 Y1 프로퍼티의 값과 같다고 명시하면 되는 것이다. 

<Setter Property="Y2" Value="{Binding RelativeSource={RelativeSource self}, Path=Y1}" />

그리고 각 Line 엘리먼트에 Y1 값만을 명시하면 이 값은 Y2에서 참조된다. 

다음의 XAML 파일은 이 방법을 사용해 그리드의 수직선과 수평선을 그린다. base라는 x:Key를 가진 스타일은 선의 색상을 정의하며, 이 스타일을 기본으로 한 horz와 vert 스타일이 있다. 

<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Canvas.Resources>
		<Style x:Key="base" TargetType="Line">
			<Setter Property="Stroke" Value="Blue" />
		</Style>
		<Style x:key="horz" TargetType="Line" BasedOn="{StaticResource base}">
			<Setter Property="X1" Value="100" />
			<Setter Property="X2" Value="300" />
			<Setter Property="Y2" Value="{Binding RelativeSource={RelativeSource self}, Path=Y1}" />
		</Style>

		<Style x:Key="vert" TargetType="Line" BasedOn="{StaticResource base}">
			<Setter Property="Y1" Value="100" />
			<Setter Property="Y2" Value="300" />

			<Setter Property="X2" Value="{Binding RelativeSource={RelativeSource self}, Path=X1}" />
		</Style>
	</Canvas.Resources>

	<Line Style="{StaticResource horz}" Y1="100" />
	<Line Style="{StaticResource horz}" Y1="125" />
	<Line Style="{StaticResource horz}" Y1="150" />
	<Line Style="{StaticResource horz}" Y1="175" />
	<Line Style="{StaticResource horz}" Y1="200" />
	<Line Style="{StaticResource horz}" Y1="225" />
	<Line Style="{StaticResource horz}" Y1="250" />
	<Line Style="{StaticResource horz}" Y1="275" />
	<Line Style="{StaticResource horz}" Y1="300" />

	<Line Style="{StaticResource vert}" X1="100" />
	<Line Style="{StaticResource vert}" X1="125" />
	<Line Style="{StaticResource vert}" X1="150" />
	<Line Style="{StaticResource vert}" X1="175" />
	<Line Style="{StaticResource vert}" X1="200" />
	<Line Style="{StaticResource vert}" X1="225" />
	<Line Style="{StaticResource vert}" X1="250" />
	<Line Style="{StaticResource vert}" X1="275" />
	<Line Style="{StaticResource vert}" X1="300" />
</Canvas>


물론 이런 유형의 반복적인 엘리먼트를 그릴 때는 당연히 C#의 for 루프 사용을 고려해야 한다고 생각하지 모르지만 각 엘리먼트 내의 숫자 반복을 이정도로 줄일 수 있다면 XAML을 사용하는 것 또한 고려할 만 하다. 

Style 프로퍼티는 FrameworkElement을 위해서만 정의할 수 있는 것이 아니라 FrameworkContentElement를 위해서도 정의할 수 있다. 즉 TextElement 를 상속받은 클래스를 위해 스타일을 정의할 수 있는 것이다. 또한 FlowDocument 내의 항목을 포맷팅하기 위해 스타일을 정의하는 것도 가능하다. 다음은 Alice's Adventures in Wonderland로부터 발췌한 첫 번째 절에 2개의 Paragraph 스타일이 정의돼 있다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"		
	Title="I. Down the Rabbit-Hole">
	<Page.Resources>
	
		<Style TargetType="{x:Type Paragraph}" x:Key="Normal">
			<Setter Property="TextIndent" Value="0.25in" />
		</Style>
		<Style TargetType="{x:Type Paragraph}" x:Key="ChapterHead">
			<Setter Property="TextAlignment" Value="Center" />
			<Setter Property="FontSize" Value="16pt" />
		</Style>
	</Page.Resources>
	<FlowDocumentReader>
		<FlowDocument>
			<Paragraph Style="{StaticResource ChapterHead}" >
				Chapter 1
			</Paragraph>
			<Paragraph Style="{StaticResource ChapterHead}">
				Down the Rabbit-Hole
			</Paragraph>
			<Paragraph Style="{StaticResour Normal}">
				Alice was beginning to get, very tired of sitting by
				her sister on the bank, and of having nothing to do:
				once or twice she had peeped into the book her sister
				was reading, but it had no pictures or conversations
				in it, &#201C;and what is the use of a book, &#201D;
				though, Alice, &#201C;without pictures or
				conversations?&#201D;
			</Paragraph>
			<Paragraph Style="{StaticResource Normal}">
				...
			</Paragraph>
		</FlowDocument>
	</FlowDocumentReader>
</Page>

물론 이것은 스타일을 사용한 흔한 기술이기 때문에 이 텍스트 스타일이 특별하다고 생각할 필요는 없다. 하지만 Cascading Style Sheets와 같은 검증된 기술도 이런 기술을 바탕으로 하고 있다는 것을 알아두자. 

Setter가 Style의 자식 중에서 가장 보편적으로 사용되는 것이지만 라우팅된 특정 이벤트의 이벤트 핸들러를 설정하기 위해서는 EventSetter 엘리먼트를 사용할 수도 있다. 이것으로 다수의 엘리먼트에서 이벤트 핸들러를 공유할 수 있다. EventSetterDemo 프로젝트는 XAML 파일과 C# 파일을 포함하고 있으며, 다음 XAML 파일에는 EventSetter 엘리먼트를 사용한 Style이 있다. 

<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="Petzold.EventSetterDemo.EventSetterDemo" Title="EventSetter Demo">
	<Window.Resources>
		<Style TargetType="{x:Type Button}" >
			<Setter Property="FontSize" Value="24" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="Margin" Value="24" />
			<EventSetter Event="Click" Handler="ButtonOnClick" />
		</Style>
	</Window.Resources>

	<StackPanel>
		<Button>
			Button Number 1
		</Button>
		<Button>
			Button Number 2
		</Button>
		<Button>
			Button Number 3
		</Button>
	</StackPanel>
</Window>

window 클래스의 C# 부분에는 EventSetter 엘리먼트에서 참조되는 이벤트 핸들러를 가지고 있다. 


using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

public partial class EventSetterDemo : Window
{
	[STAThread]
	public static void Main()
	{
		Application app = new Application();
		app.Run(new EventSetterDemo());
	}
	public EventSetterDemo()
	{
		InitializeComponent();
	}
	void ButtonOnClick(object sender, RoutedEventArgs args)
	{
		Button btn = args.Source as Button;
		MessageBox.Show("The button labeled " + btn.Content + "has been clicked", Title);
	}
}

앞에서 Style은 6개의 프로퍼티를 정의한다고 언급한 적이 있다. 지금까지 Setters, Resources, TargetType, BasedOn을 다뤘으며, 읽기 전용인 IsSealed 프로퍼티는 Seal 메소드가 호출되었을 때 true가 되고 이 메소드는 스타일이 사용중일 때 호출된다. 마지막 프로퍼티는 Triggers라는 이름의 프로퍼티인데, 엘리먼트의 프로퍼티나, 데이터바인딩, 이벤트 에서 발생하는 변화에 엘리먼트와 컨트롤이 어떻게 반응할지를 결정한다. 

세터나 트리거를 처음 볼때 서로 헷갈리기 쉬운 것은 세터나 트리거 둘 다 프로퍼티를 설정 하기 때문이다. 다만 Setter는 사실상 엘리먼트가 처음 생성되었을 때 프로퍼티를 설정하며, Trigger는 프로퍼티가 바뀌는 등의 행위가 발생되었을 때 프로퍼티를 설정한다. 

Style의 Triggers 프로퍼티는 TriggerBase 객체의 컬렉션인 TriggerCollection 타입이다. 추상 TriggerBase 클래스에서 파생된 클래스는 다음과 같다. 

Object
	DispatcherObject(abstract)
		DependencyObject
			TriggerBase(abstract)
				DataTrigger
				EventTrigger
				MultiDataTrigger
				MultiTrigger
				Trigger

특정 이벤트가 발생했을 때 컨트롤이나 엘리먼트의 변경을 초래하는 EventTrigger는 24장 에서 설명하지 않을 것이다. 일반적으로 EventTrigger는 그래픽 애니메이션을 발생시키기 때문에 이것은 30장에서 다루는 것이 적당하다고 생각했기 때문이다. (눈치챘을지 모르지만 FrameworkElement 자체도 Triggers라는 프로퍼티를 정의한다. 하지만 이 컬렉션으로 들어갈 수 있는 유일한 Trigger 객체가 EventTrigger 타입의 객체이기 때문에 역시 24장에서는 이 프로퍼티를 다루지 않을 것이다)

TriggerBase 중 가장 일반적인 파생 클래스는 특정 프로퍼티의 변화에 컨트롤이나 엘리먼트가 반응하는 방법을 정의하는 Trigger이다. 대부분 이 프로퍼티는 IsMouseOver 프로퍼티와 같은 사용자 입력 프로퍼티를 포함하는데, 이때 Trigger는 Setter에서 정의된 프로퍼티를 변경한다. 다음은 Style 엘리먼트에서 정의될 수 있는 전형적인 Trigger 정의이다. 

<Style.Triggers>
	<Trigger Property="Control.IsMouseOver" Value="True">
		<Setter Property="Control.FontStyle" Value="Italic" />
		<Setter Property="Control.Foreground" Value="Blue" />
	</Trigger>
</Style.Triggers>

Style 정의에서 Style.Triggers 프로퍼티 엘리먼트가 필요하다는 것을 알아두자. 여기서 Trigger 엘리먼트의 Property와 Value 속성은 IsMouseOver 프로퍼티가 true가 되었을 때 Trigger가 작동되게 명시하고 있다. Trigger의 프로퍼티가 Boolean으로만 제한되는 것은 아니지만 가장 흔하게 쓰이며, 이 프로퍼티는 반드시 의존 프로퍼티에 의해 지원돼야 한다. 

Style과 같이 Trigger는 Setters라는 이름의 프로퍼티를 가지고 있다. 이 프로퍼티 역시 Style 처럼 Trigger의 컨텐트 프로퍼티이며, Trigger는 하나 이상의 Setter 엘리먼트를 포함 할 수 있다. 이전 예제에서 보았던 Trigger 엘리먼트 내의 두 Setter 객체는 마우스가 컨트롤 위에 올라가면 컨트롤의 텍스트가 파란색의 이탤릭체로 표시되게 하고 있다(Trigger역시 SourceName이라는 프로퍼티를 가지고 있지만 이 프로퍼티를 스타일에서 사용하지는 않는다. 이것은 25장에서 살펴볼 템플릿에서 사용된다. )
다음은 두 개의 Trigger 엘리먼트를 가진 완전한 XAML 파일이다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<StackPanel.Resources>
		<Style x:Key="normal">
			<Setter Property="Control.FontSize" Value="24" />
			<Setter Property="Control.HorizontalAlignment" Value="Center" />
			<Setter Property="Control.Margin" Value="24" />
			<Style.Triggers>
				<Trigger Property="Control.IsMouseOver" Value="true" >
					<Setter Property="Control.FontStyle" Value="Italic" />
					<Setter Property="Control.Foreground" Value="Blue" />
				</Trigger>

				<Trigger Property="Button.IsPressed" Value="true">
					<Setter Property="Control.Foreground" Value="Red" />
				</Trigger>
			</Style.Triggers>
		</Style>
	</StackPanel.Resources>

	<Button Style="{StaticResource normal}" >
		Button Number 1
	</Button>
	<Button Style="{StaticResource normal}" >
		Button Number 2
	</Button>
	<Button Style="{StaticResource normal}" >
		Button Number 3
	</Button>
</StackPanel>

IsMouseOver 프로퍼티를 기본으로 한 Trigger 이외에 IsPressed 프로퍼티가 true일 때 전경색을 변경하는 또 다른 Trigger가 있다. 이 두 Trigger 모두 프로퍼티 값이 원래대로 돌아가면 Setter 엘리먼트에서 정의된 프로퍼티 값 역시 원래 상태로 돌아간다. 

두 Trigger 엘리먼트 순서는 두 트리거의 동작 방식에 영향을 미친다. Trigger 엘리먼트가 같은 프로퍼티를 두 번 설정하면 뒤 Trigger 엘리먼트는 이전 Trigger 엘리먼트를 오버라이딩한다. 앞의 XAML 파일에서 두 트리거 프로퍼티의 순서를 바꾸면 텍스트는 결코 빨간색으로 변할 수 없다. 왜냐하면 IsPressed가 true일 경우엔 IsMouseOver 역시 true가 되며, IsMouseOver가 true일 경우에 텍스트를 파란색으로 표시하라는 것이 IsMouseOver를 위한 Trigger의 마지막에 명시돼 있기 때문이다. 

순서를 올바르게 지정하기 힘들다면 MultiTrigger를 고려해볼 수 있다. MultiTrigger는 2개나 그 이상의 조건이 만족될 때 발생한다는 것을 제외하면 Trigger와 유사하다. 다음예제를 보자. 


<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<StackPanel.Resources>
		<Style x:Key="normal">
			<Setter Property="Control.FontSize" Value="24" />
			<Setter Property="Control.HorizontalAlignment" Value="Center" />
			<Setter Property="Control.Margin" Value="24" />

			<Style.Triggers>
				<Trigger Property="Button.IsPressed" Value="True" />
					<Setter Property="Control.Foreground" Value="Red" />
				</Trigger>

				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="Control.IsMouseOver" Value="True" />
						<Condition Property="Button.IsPressed" Value="False" />
					</MultiTrigger.Conditions>
					<Setter Property="Control.FontStyle" Value="Italic" />
					<Setter Property="Control.Foreground" Value="Blue" />
				</MultiTrigger>
			</Style.Trigger>
		</Style>
	</StackPanel.Resources>

	<Button Style="{StaticResource normal}" >
		Button Number 1
	</Button>
	<Button Style="{StaticResource normal}" >
		Button Number 2
	</Button>
	<Button Style="{StaticResource normal}" >
		Button Number 3
	</Button>
</StackPanel>

MultiTrigger의 Conditions 프로퍼티는 ConditionCollection 타입의 객체이며, 각 Condition 엘리먼트는 Property와 Value를 명시한다. 버튼 텍스트는 버튼 위에 마우스가 있을때 파란색으로 표시되며, 버튼이 클릭되면 텍스트는 빨간색으로 표시된다. 또한 버튼 텍스트는 버튼이 눌리지 않은 상태에서 마우스가 버튼 위에 있을 때 이탤릭체로 표시되며, 이것이 MultiTrigger가 설정한 조건이다. 

DataTrigger 클래스는 Property를 Binding 으로 대신하는 것을 제외하고는 Trigger와 유사하다. Binding은 일반적으로 다른 엘리먼트를 참조하며, DataTrigger는 이 Binding이 다음 파일에서 보여주는 것과 같이 특정 값을 가지게 될 때 프로퍼티를 설정할 수 있게 된다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<StackPanel.Resources>
		<Style TargetType="{x:Type Button}">
			<Setter Property="FontSize" Value="24" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="Margin" Value="24" />

			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=txtbox, Path=Text.Length}" Value="0">
					<Setter Property="IsEnabled" Value="False" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</StackPanel.Resources>

	<TextBox Name="txtbox" HorizontalAlignment="Center" Width="2in" Margin="24" />
	
	<Button>
		Button Number 1
	</Button>
	<Button>
		Button Number 2
	</Button>
	<Button>
		Button Number 3
	</Button>
</StackPanel>

DataTrigger는 txtbox란 이름으로 참조한 TextBox 엘리먼트를 바인딩한다. Path는 Text.Length인데 TextBox의 Text 프로퍼티 중 텍스트 길이를 명시하는 Length 프로퍼티를 참조한다. 이 값이 0일 때 Button의 IsEnabled 프로퍼티는 false로 설정되기 때문에 버튼이 활성화되기 위해서는 TextBox에 텍스트가 입력돼야 한다. 일반적으로 대화상자의 경우 특정 조건을 만족할 때 OK 버튼을 활성화시키기 때문에 이때 DataTrigger를 사용한다면 유용할 것이다. 

MultiDataTrigger와 DataTrigger의 관계는 MultiTrigger와 Trigger의 관계와 같다. MultiTrigger와 같이 MultiDataTrigger는 하나 이상의 Condition 엘리먼트를 포함하며, 이 Condition 클래스는 Property, Binding, Value 프로퍼티를 정의한다. 일반적인 트리거와 데이터 트리거를 섞어서 쓰길 원한다면 포기하길 바란다. MultiTrigger를 정의할 때는 Condition의 Property와 Value를 사용해야 하며, MultiDataTrigger를 사용할 때는 Binding과 Value 프로퍼티만을 사용해야 한다. 다음에 두 CheckBox 컨트롤이 체크되었을 때 버튼을 활성화시키는 XAML 파일이 있다. 

<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<StackPanel.Resources>
		<Style TargetType="{x:Type CheckBox}">
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="Margin" Value="24" />
		</Style>

		<Style TargetType="{x:Type Button}">
			<Setter Property="FontSize" Value="24" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="Margin" Value="12" />
			<Setter Property="IsEnabled" Value="False" />

			<Style.Triggers>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding ElementName=chkbox1, Path=IsChecked}" Value="True" />
						<Condition Binding="{Binding ElementName=chkbox2, Path=IsChecked}" Value="True" />
					</MultiDataTrigger.Conditions>
					<Setter Property="IsEnabled" Value="True" />
				</MultiDataTrigger>
			</Style.Triggers>
		</Style>
	</StackPanel.Resources>

	<CheckBox Name="chkbox1">
		Check 1
	</CheckBox>
	<CheckBox Name="chkbox2">
		Check 2
	</CheckBox>
	<Button>
		Button Number 1
	</Button>
	<Button>
		Button Number 2
	</Button>
	<Button>
		Button Number 3
	</Button>
</StackPanel>


지금까지 보았듯이 스타일은 컨트롤의 외관을 구성하는데 있어서 체계적인 방법을 제공해 편리함을 선사한다. 스타일은 XAML 에서 간단히 몇 줄을 사용해 유사한 엘리먼트 사이에서 코드의 반복을 줄일 수 있으며 , 애플리케이션 내의 컨트롤을 자신만의 특별한 형태로 꾸미는 것이 가능하다. 게다가 두 엘리먼트에 같은 프로퍼티 값이 필요할 때 스타일을 사용하면 값의 변경이 필요할 때도 매우 유용함을 느낄 수 있을 것이다. 