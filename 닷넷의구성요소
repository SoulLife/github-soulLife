2.2 닷넷의 구성 요소

닷넷은 플랫폼 독립성과 언어 독립성을 확보하기 위해 다음과 같은 여러 가지 장치들을 제공한다. 대부분 Common으로 시작하는데 그 만큼 닷넷이 공용성과 일반성을 역점에 두었다는 뜻이다.



CLR(Common Language Runtime)

직역하자면 공용 언어 런타임이라는 뜻인데 닷넷 실행엔진을 의미한다. 자바의 가상 머신(JVM)과 개념적으로 동일하다. 런타임이란 프로그램이 실행되기 위한 핵심 모듈들의 집합이다. 윈도우즈에서 실행되는 모든 프로그램은 kernel, user, gdi 모듈이 필요하고 MFC로 만든 프로그램은 mfcxx.dll이 꼭 필요한데 이런 모듈들을 런타임이라고 한다. CLR은 닷넷 프로그램 실행에 필수적인 런타임들의 집합이되 이름이 의미하듯이 모든 언어에 공용으로 사용된다. 어떤 언어로 만든 프로그램이든지 IL을 JIT로 컴파일 한 후 CLR과 연결되므로 제작 언어에 상관없이 CLR의 서비스를 받을 수 있다.



CLR은 닷넷의 핵심 커널이다. 응용 프로그램이 실행되면 CLR이 권한을 확인하고 프로세스를 생성하며 코드의 안전성을 검사한다. 보안 점검이 완료되면 첫 번째 스레드를 생성하여 응용 프로그램의 코드를 실행시킨다. 실행 중에 응용 프로그램의 요청을 받아 때로는 직접처리하기도 하고 때로는 호스트 운영체제와 통신을 주선하기도 한다. CLR은 운영체제와 닷넷 응용 프로그램 사이에 위치하며 한마디로 닷넷 프로그램 실행을 위한 모든 서비스를 제공하는 실행 주체라고 할 수 있다.



닷넷 응용 프로그램은 운영체제와 직접 통신하지 않으며 반드시 CLR을 거쳐야 한다. CLR은 물론 플랫폼별로 따로 제공된다. CLR이 호스트 운영체제와의 통신을 책임지므로 응용 프로그램은 운영 체제에 대해서 독립적이다. 응용 프로그램은 호스트 운영체제는 거의 신경 쓸 필요가 없고 오로지 CLR과의 약속만 잘 지키면 된다.



CTS(Common Type System)

CTS는 모든 닷넷 언어들이 공동으로 사용하는 타입 체계를 정의한다. 언어끼리 함수를 호출하려면 인수나 리턴값에 대해 서로의 타입을 알수 있어야 한다. 예를 들어 C++에서 int 형의 값을 넘기면 VB에서는 Integer 타입으로 이 값을 받아들일 것이다. 이때 int와 Integer는 같은 타입이라는 것을 두 언어가 모두 알고 있어야 하며 물리적인 포맷이 같아야 한다. 두 타입의 길이나 형태가 다르다면 서로 다른 언어끼리 원활하게 통신할 수 없을 것이다.



함수 호출 뿐만 아니라 다른 언어가 정의한 객체를 포함한다거나 다른 언어가 정의한 클래스를 상속받을 때도 똑같은 문제가 있다. 진정한 언어 독립성을 확보하고 언어 간의 교차 프로그래밍이 가능하기 위해서는 개별 언어가 타입을 마음대로 정의해서는 안 되며 플랫폼 차원에서 공통의 타입을 정의할 필요가 있는데 이 타입 체계가 바로 CTS이다.



CTS는 닷넷 지원 언어들이 공동으로 사용하는 타입에 대한 약속이며 IL에서 사용 가능한 타입들의 집합이다. CTS에는 정수, 실수 같은 기본형뿐만 아니라 클래스, 배열 같은 좀 더 복잡한 타입까지 계층이 잘 정의되어 있다. CTS에 구체적으로 어떤 타입들이 정의되어 있는가는 다음 장에서 상세하게 살펴볼 것이다.



각 언어들은 CTS가 정의한 닷넷 내장 형식을 사용할 수 있는데 편의상 언어별로 고유한 키워드를 정의하기도 한다. 닷넷 지원 언어들은 CTS의 모든 타입을 의무적으로 지원할 필요는 없다. 예를 들어 비주얼 베이직은 부호 없는 정수형을 지원하지 않는다. 따라서 비주얼 베이직과 같이 동작해야 하는 언어들은 부호 없는 정수 타입을 외부 통신용으로 사용해서는 안된다. 물론 내부적인 용도로만 사용하는 것은 문제가 없다.



CLS(Common Language Specification)

각각의 언어들은 다른 언어와 구분되는 아주 고유한 특성들을 가지기도 한다. 예를 들어 명칭의 대소문자를 구분하는가, 다중 상속은 지원하는가, 연산자 오버로딩이 가능한가 등은 언어마다 다르다. 이렇게 언어마다 특성이 각각 다르면 언어 상호 운용이 아주 어려워진다. 그래서 닷넷은 언어들이 지켜야 하는 최소한의 사양을 정의하는데 이를 CLS라고 한다. CLS의 몇 가 지 예를 들어 보자.



* 전역 함수나 변수는 정의할 수 없다.

* 부호 없는 정수형은 인정하지 않는다.

* 명칭은 대소문자를 구분하지 않는다.

* 포인터를 사용할 수 없다.

* 연산자 오버로딩을 지원하지 않는다.



CLS는 닷넷용 언어가 되기 위한 최소한의 규정이다. 그래서 주로 기능을 제약하는 규칙들이 많은데 각양각색의 언어를 지원하기 위해 약간의 제한을 두는 것은 불가피하다. 닷넷용 온어들은 CLS의 모든 규칙을 다 만족하지 않아도 상관없다. 닷넷 전용 언어라고 하는 C#조차도 CLS를 완전히 만족하지는 못한다. 오로지 외부로 공개되는 부분에 대해서만 CLS를 만족하면 될 뿐이며 내부적인 처리를 위해서는 CLS를 만족하지 않는 기능도 얼마든지 사용할 수 있다.



예를 들어 부호없는 정수형은 CLS에 정의되어 있지 않으므로 외부에서  호출되는 함수가 부호없는 정수형을 리턴하는 것은 규칙에 맞지 않다. 그러나 함수 내부의 지역변수에 부호없는 타입을 사용하는 것은 상관없다. 또 CLS는 명칭의 대소문자 구분을 하지 말것은 권장하고 있으므로 외부로 공개되는 명칭을 대소문자만 다르게 작성해서는 안된다. C#으로 만든 프로그램이 Clac, calc, CALC이런 메서드를 외부로 엑스포트하면 대소문자 구분을 하지 못하는 비주얼 베이직은 이 메서드를 제대로 호출하지 못할 것이다. 임의의 언어에서 사용가능한 클래스를 만들고 싶다면 CLS를 잘 준수해야한다. 하지만 C#내부에서만 호출된다면 이런 메서드의 집합도 얼마든지 정의할 수 있다.



CLS는 언어를 만드는 사람들을 위한 명세이므로 응용 프로그램 개발자가 CLS의 모든 면을 자세히 알 필요는 없다. 닷넷을 좀 더 잘 이해하기 위한 참고 정보일 뿐이다. 각 언어의 컴파일러 제작사들은 CLS가 요구하는 만큼만 컴파일러를 만들면된다. 최소한의 규약만 지킨다면 C#이나 C++처럼 덩치가 크지 않아도 상관없고 기능이 아주 단순해도 상관없다.





BCL

닷넷에는 여러 가지 복잡한 기능을 제공하는 방대한 기본 클래스 라이브러리(BCL)가 탑재되어 있다. 닷넷은 플랫폼이면서 라이브러리라고 할수 있는데 사실 플랫폼은 응용 프로그램 제작을 위한 라이브러리를 포함할 수 밖에없다. 플랫폼이 라이브러리를 제공하지 않으면 응용 프로그램 개발자들이 해야할 일들이 너무 많아지기 때문이다. 마치 윈도우즈가 방대한 Win32 API를 제공하는 것처럼 닷넷도 같은 개념의 BCL을 제공한다.



BCL은 마이크로소프트가 미리 작성하여 제공하는 잘 정리된 클래스들의 거대한 집합이다. 제공되는 클래스들의 규모가 엄청날 뿐만 아니라 객체 지향적이고 문서화도 잘 되어 있어서 잡스러운 처리들의 대부분은 BCL을 호출하기만 하면된다. 닷넷을 공부한다는 것은 BCL의 클래스들을 하나 둘 씩 정복해 나가는 과정이라고 할 수 있다. BCL에 포함된 클래스의 목록과 기능을 대충 정리해 보자.



* 기본 타입에 대한 정보 제공

* 배열, 연결 리스트, 큐 등의 컬렉션 클래스

* 그래픽 라이브러리(GDI+)

* 스레드와 동기화 클래스

* 각종 컨트롤

* 파일 입출력

* 네트워크와 인터넷 프로그래밍

* 데이터베이스 액세스



응용 프로그램 제작에 필요한 기능들의 대부분이 BCL에 이미 구현되어 있으므로 공짜로 쓸 수 있는 기능들이 아주 많다. 더구나 BCL은 언어 차원이 아니라 닷넷이 플랫폼 차원에서 제공하는 라이브러리이므로 모든 언어들이 공유할 수 있다는 면에서 더 매력적이다. C#에서 BCL 사용법을 제대로 익혔다면 VB에서 BCL을 활용하는 것은 식은 죽 먹기라는 얘기다.









03 네임스페이스

다음장부터 본격적으로 C#의 문법에 대해서 배우는데 그 전에 문법 학습에 꼭 필요한 몇 가지를 먼저 학습한다. 닷넷용 언어들은 모두 공용의 라이브러리 (BCL)를 활용하며 BCL의 도움 없이는 제대로 된 닷넷 응용 프로그램을 만들 수 없다. 가장 기본적인 입출력문조차도 언어 차원에서는 제공되지 않으므로 라이브러리의 함수를 호출해야 한다. 닷넷 라이브러리를 제대로 활용하기 위해서는 네임스페이스와 using문에 대해 우선적으로 이해해야 한다.



원활한 실습을 위해서는 기본적인 입출력 방법을 먼저 익혀둘 필요가 있다. 아무리 간단한 문법도 화면에 찍어봐야 결과를 제대로 확인할 수 있으며 조건문이나 선택문 실습을 위해서는 사용자로부터 입력을 받는 방법도 알아야 한다. 입출력 없이 고리타분한 문법만 계속 공부하다가는 금방 흥미를 잃어버리기 때문에 입출력은 가장먼저 배워야할 주제이다. 또 방대한 라이브러리에서 원하는 정보를 빠르고 정확하게 찾는 능력도 중요하다. 이 절에서는 이런 기초적인 준비운동을 할 것이다.



3.1 네임스페이스 정의

C#의 구성 요소중 명칭(Identifier)은 변수나 상수, 함수, 타입 등을 구분하기 위해 사용자가 이름을 직접 붙이는 것이다. 표현하는 대상을 상징하는 가장 적절한 이름으로 사용자가 마음대로 붙일 수 있되 몇 가지 간단한 명칭 규칙을 지켜야 한다. 명칭 규칙 중에 가장 중요하고도 기본 적인 원칙은 같은 범위 내에서 두 개 의 다른 명칭이 중복되어서는 안된다는 것이다.



애써 이름을 붙이는 목적이 구분을 위해서이므로 중복되지 말아야 한다는 것은 지극히 상식적이지만 예상외로 명칭 간의 충돌은 빈번하다. 왜냐하면 명칭에 대한 중앙 통제 센터가 없고 개발자가 임의대로 이름을 붙일 수 있기 때문이다. 명칭이 중복되면 어떤 대상을 가리키는지 정확하게 판단할 수 없어 모호해지므로 에러로 처리된다. 다음 코드는 컴파일 되지 않는다

class MyClass {어쩌고 저쩌고}

class MyClass {이러쿵 저러쿵}



두 클래스의 내용은 다르지만 이름이 똑같기 때문에 이후 MyClass라는 명칭이 어떤 클래스를 칭하는지 알 수 없다. 위 선언문이 왜 에러인지는 논리적으로 설명하지 않아도 직관적으로 쉽게 이해될 것이다. 클래스끼리 뿐만 아니라 변수, 함수 등 명칭을 붙이는 모든 것들이 동일 범위에서 같은 이름을 가져서는 안 된다. 그러나 다른 범위에서는 같은 명칭을 사용해도 상관없다. 다음 코드는 별 문제 없이 컴파일 된다.



class SomeClass

{

           int value;

}

class OtherClass

{

           double value;

}



value라는 똑같은 이름의 변수가 두 개 있지만 소속된 클래스가 다르기 때문에 모호하지 않다. 마치 한 폴더에 같은 이름의 파일이 두 개 존재할 수 없지만 다른 폴더에는 이름이 같은 파일이 존재할 수 있는 것과 같다. 명칭이 충돌했을 경우 가장 쉬운 해결 방법은 한쪽의 이름을 다른 것으로 바꾸는 것이다. 이름이 같아서 충돌이 발생했으므로 이름을 바꾸면 해결된다.



그러나 이름을 바꾸는 것이 항상 가능한 것은 아니다. 규모가 큰 프로젝트에서는 대단히 많은 명칭이 필요하다. 이런 대형 프로젝트는 보통 여러 명의 팀원이 작업을 동시에 진행하므로 우연히라도 명치이 충돌할 가능성은 항상 있다. 워낙 많은 명칭이 사용되므로 더 이상 사용할 마땅한 이름이 없을 수도 있고 이미 여러 군데서 명칭을 참조하고 있다면 바꾸는 작업도 그리 간단하지 않다. 특히 외부모듈끼리 명칭이 충돌했을 때는 해결 방법이 전혀 없다.



프로젝트는 점점 대형화되고 있고 명칭충돌은 점점 더 자주 발생하므로 언어 차원에서 명칭 충돌을 해결할 근본적인 대책이 필요해졌다. 그래서 네임스페이스라는 개념이 등장한 것이다. 네임스페이스는 이름 그대로 명칭들을 저장하는 장소인데 명칭들이 저장되는 범위를 격리시키는 역할을 한다. C++에도 똑같은 기능이 있는데. 사용목적이나 문법 등이 거의 비슷하다. 예약어 namespace다음에 네임스페이스 이름과 블록을 구성하고 이 블록 안에 명칭들을 정의한다.



namespace A

{

   class MyClass{...}

}

namespace B

{

   class MyClass{...}

}



이렇게 쓰면 A에 속한 MyClass와 B에 속한 MyClass는 비록 이름이 같지만 소속이 다르므로 모호하지 않다. 소속이 달라 모호하지 않다는 것은 칭할 때 소속을 밝혀야 한다는 애기와 같다. 네임스페이스에 속한 명칭을 참조할 때는. 기호를 사용하여 A.MyClass, B.MyClass식으로 쓴다. C++은 네임스페이스와 명칭사이에 ::을 쓰고 클래스와 멤버 사이에는 . 을 쓰고 포인터와 멤버 사이에는 ->를 사용하는데 비해 C#은 네임스페이스나 클래스 구조체의 소속을 밝힐때 무조건. 을 사용하여 문법을 단순화 했다

모든 명칭은 항상 특정한 네임스페이스 안에 포함되어야 한다. 만약 네임스페이스 없이 외부에 명칭을 선언하면 기본 네임스페이스에 소속된다. 기본 네임스페이스에 속한 명칭은 소속을 밝히지 않고 명칭만으로 참조할 수 있다. 기본 네임스페이스는 프로젝트의 이름과 같은데 원할 경우 프로젝트 속성 대화상자에서 변경하라 수 있다. 예를 들어 CSExam 프로젝트의 기본 네임스페이스는 CSExam이다.



네임스페이스 안에는 클래스, 구조체, 열거형, 인터페이스 등의 타입들이 포함된다. 함수나 변수는 네임스페이스 안에 전역으로 직접 포함될 수 없으며 클래스나 구조체의 멤버로만 선언될 수 있다. 네임스페이스 안에는 또 다른 네임스페이스를 중복정의하여 명칭들을 계층적으로 조직화할 수도 있다. 즉 네임스페이스끼리는 얼마든지 중첩 가능하다. 마치 폴더 안에 또다른 서브 폴더를 만들 수 있는 것처럼 말이다.

namespace A

{

    namespace B

    {

              class MyClass{...}

    }

}

네임스페이스 A안에 또 다른 네임스페이스 B가 있고 B 안에 MyClass가 정의되어 있다. 중첩된 네임스페이스를 한꺼번에 정의하는 것도 가능하다.

namespace A.B

{

    class MyClass{...}

}

중첩된 네임스페이스 안쪽의 명칭을 참조할 때는. 기호를 연거푸 사용하면 된다. 위 선언문에서 MyClass는 A.B.MyClass로 참조할 수 있으며 이는 A에 속한 B에 속한 MyClass라는 뜻이다.





3.2 using

네임스페이스의 중첩 기능성을 활용하면 명칭들을 계층적으로 세분화하여 체계적으로 관리할 수 있다. 예를 들어 수백 명이 팀 프로젝트를 할 때 팀별로 네임스페이스를 구성하고 팀 네임스페이스안에 개발자별로 네임스페이스를 만들면 개발자끼리 명칭이 충돌할 일이 없을 것이며 명칭의 소속을 보면 어느 팀의 누가 만든 명칭인지를 금방 알 수 있다. 다음 예를 보자

namespace MiyoungSoft

{

   namespace Application Team

   {

       namespace KimSangHyung

       {

                class MyClass{...}

       }

        namespace ParkDaeHee{...}

    }

  namespace NetworkTeam{...}

  namespace GraphicTeam{...}

}



회사명 네임스페이스 안에 팀 네임스페이스가 있고 그 안에 개발자의 이름으로 된 네임스페이스가 있다. 이 개발자는 자신의 고유한 네임스페이스 안에서 명칭을 자유롭게 만들 수 있을 것이다. 그러나 이렇게 하면 충돌은 원천적으로 방지할 수 있지만 명칭을 참조하는 문장이 너무 길어져 불편하다. 위예에서 MyClass는 MiyoungSoft.ApplicationTeam.KimSangHyoung.MyClass로 참조해야 하며 이 클래스 안의 멤버를 참조하는 문장은 더 길어질 것이다.



명칭 참조문이 이렇게 길어지면 일단은 키보드를 많이 두드려야 하므로 입력 시간이 오래 걸리고 오타가 발생할 확률도 높아져 안 그래도 바쁘고 피곤한 개발자들의 시간과 노력을 낭비할 것이다. 그래서 긴 참조문을 짧게 쓸 수 있는 using이라는 문장이 제공된다. using 다음에 참조할 네임스페이스명을 적으면 컴파일러가 using 선언된 네임스페이스를 항상 참조한다.

using MiyoungSoft.ApplicationTeam.KimSangHyung;



이렇게 선언해두면 이 네임스페이스에서 명칭을 검색하므로 이후 MyClass를 참조할 때 앞쪽의 네임스페이스 소속문은 생략할 수 있다. 그냥 MyClass라고만 적어도 컴파일러가 using 선언된 네임스페이스를 알아서 검색해본다. 첫 실습으로 만들었던 FirstCon예제를 using문을 사용하여 다시 작성해 보자.



예제 FirstConNs

using System;

class FirstCon

{

    public static void Main()

    {

        Console.WriteLine("C Sharp");

    }

}

첫 줄에 using System; 선언이 있으므로 이후부터 등장하는 모든 명칭에 대해 이 네임스페이스를 검색할 것이다. Console 클래스는 System 네임스페이스에 정의되어 있으므로 원래는 System.Console이라고 써야 하지만 System을 using 선언했으므로 이후부터 Console이라고만 적으면 된다. System네임스페이스는 닷넷 라이브러리의 중요한 기능들을 대부분 포함하는 기본적인 네임스페이스이므로 대부분의 C# 소스는 using System으로 시작한다.



명칭을 참조할 때는 원칙적으로 소속된 네임스페이스를 다 적어야 하나 이것이 너무 불편하기 때문에 컴파일러가 알아서 네임스페이스를 검색하는 using 선언이 제공된다. 그러나 using은 어디까지나 소속을 찾는 약식 방법일 뿐이므로 항상 완벽하지는 않다. 다음 코드를 보자.



namespace A

{

     class MyClass{int i; }

}

namespace B

{

     class MyClass{double d; }

}



class CSTest

{

     public static void main()

     {

           A.MyClass objA = new A.MyClass();

           B.MyClass objB = new B.MyClass();

     }

}



A안에 MyClass가 있고 B안에도 MyClass가 있지만 소속된 네임스페이스가 다르므로 별 문제가 없다. A.MyClass, B.MyClass로 소속을 밝히면 구분 가능하며 전혀 모호하지 않다. 만약 이 소스를 다음과 같이 고치면 어떻게 될까.?



using A;

using B;

namespace A

{

     class MyClass{int i; }

}

namespace B

{

     class MyClass{double d;}

}

class CSTest

{

     public static void main()

     {

          MyClass objA = new MyClass();

          MyClass objB = new MyClass();

     }

}

A와 B에서 명칭을 다 검색하도록 using 선언했으므로 MyClass는 소속을 밝히지 않고도 사용할 수 있어야 한다. 그러나 MyClass가 using 선언된 두 네임스페이스에 동시에 존재하므로 어떤 네임스페이스에 속한 MyClass인지를 분간할 수 없으며 따라서 이 소스는 제대로 컴파일되지 않는다. 네임스페이스라는 격리된 공간 안에 같은 이름의 클래스를 정의하는 것은 가능해졌지만 양쪽을 모두 using 선언하여 참조문이 모호해진 것이다.



이런 경우는 한쪽의 using 선언을 없애든가 아니면 명칭 앞에 정확한 네임스페이스를 밝혀야 한다. 닷넷 기본 라이브러리에는 네임스페이스끼리의 충돌이 거의 없기 때문에 이런 경우는 사실 극히 드물다. using 선언은 긴 네임스페이스에 짧은 별명을 부여하는 또 다른 기능도 있다. 형식은 다음과 같다.



using 별명 = 네임스페이스;

별명을 지정하고 = 다음에 실제 네임스페이스를 지정하면 이후 별명으로 네임스페이스를 짧게 칭할 수 있다. 중첩된 네임스페이스는 길어서 일일이 입력하기 귀찮은데 이럴 때 별명을 지정하면 짧게 쓸 수 있다.



using MAK = MiyoungSoft.ApplicationTeam.KimSangHyoung;



삼중 중첩된 네임스페이스에 MAK라는 짧은 별명을 정의해 놓으면 이후 MAK라는 별명으로 이 네임스페이스에 속한 명칭을 바로 참조할 수 있다. MAK.MyClass라고 적으면 된다.





3.3 닷넷의 네임스페이스

네임스페이스의 기본적인 기능은 명칭의 선언 영역을 격리하여 명칭끼리의 충돌을 방지하는 것이지만 클래스를 기능별로 분류하는 역할도 한다. 닷넷의 라이브러리는 워낙 방대하기 때문에 모든 클래스들을 같은 범위에서 정의하면 명칭 충돌뿐만 아니라 명칭 검색 시간도 굉장히 오래 걸릴 것이다. 그래서 클래스들을 기능에 따라 그룹을 분류하여 네임스페이스에 체계적으로 정리해 놓았다.



닷넷의 루트 네임스페이스는 System이며 System 안에 기능별로 네임스페이스가 나누어져 있고 이 안에 클래스들이 정의되어 있다. 네임스페이스가 3중, 4중으로 중첩되어 있는 경우도 많다. 닷넷 라이브러리의 주요 네임스페이스는 다음과 같다. 이 네임스페이스 체계는 닷넷이 정의하는 것이므로 언어에 상관없이 동일하다.

 네임스페이스

 설 명

 System

 타입, 메모리 관리 등 핵심 클래스

 System.Collections

 배열, 연결 리스트 등의 컬렉션 클래스

 System.IO

 파일 입출력 및 네트워크 관련 클래스

 System.Windows.Forms

 윈도우즈 폼과 컨트롤

 System.Drawing

 GDI+

 System.Web

 웹 개발에 관련된 클래스

 System.Xml

 XML 관련 클래스들

 System.Security

 보안, 암호, 권한 관련 클래스



해당 기능을 쓰고 싶다면 기능을 제공하는 클래스들의 소속 네임스페이스에 대한 using 선언을 해야 하며 그러기 위해서는 어떤 클래스가 어떤 네임스페이스 소속인지를 알아야 한다. 각 클래스의 소속 네임스페이스 정보는 MSDN에 잘 정리되어 있어 언제든지 조사할 수 있다. 마치 C/C++언어에서 원하는 함수가 어떤 헤더 파일에 선언되어 있는지 관심을 가져야 하는 이유와 같다. 예를 들어 GDI+ 라이브러리를 쓰고싶다면 using System.Drawing; 선언이 필요하다.



루트 네임스페이스인 System에는 기본 타입들이 정의되어 있고 입출력, 쓰레기수집, 예외 처리등의 기본적인 기능이 제공된다. System 네임스페이스는 닷넷 응용 프로그램이 반드시 참조해야 하는 필수 네임스페이스이다. 그래서 대부분의 C# 소스는 항상 using System; 으로 시작된다 마치 C 소스가 거의 항상  #include <stdio.h>로 시작하고 윈도우즈 API 소스가 #include<windows.h>로 시작하는 것과 마찬가지이다.



using System; 선언은 System 네임스페이스 안에 정의된 클래스들을 사용할 것이므로 준비하라는 지시 사항이다. 컴파일러는 이 선언을 읽고 이후 나타나는 명칭들이 using 선언된 네임스페이스에 있는지 검색해 볼 것이다. using 선언은 C의 #include와 유사해 보이지만 물리적인 파일을 포함하는 것이 아니라 논리적인 네임스페이스를 참조한다는 점이 다르다.



using 선언은 꼭 필요한 것들만 선언하는 것이 좋다. 닷넷 라이브러리의 모든 네임스페이스들을 using 선언해 놓으면 명칭들을 자유롭게 쓸 수 있어서 좋기는 하겠지만 컴파일러가 명칭을 찾아야할 범위가 넓어지므로 컴파일 시간이 오래 걸리고 명칭 충돌 확률이 높아진다. 그러나 using은 컴파일 단계에서만 적용될 뿐이므로 using이 많다고해서 결과 프로그램이 느려지거나 커지는 것은 아니다.



이 책의 예제 소스들은 간결성을 위해 꼭 필요치 않은 using문은 가급적 삭제한다. 마법사는 콘솔 프로젝트에 대해 기본적으로 4개의 using문을 생성하며 윈폼 프로젝트에 대해 8개의 using문을 생성하는데 예제 길이에 비해 소스가 너무 길어져 지면을 낭비할 뿐만 아니라 보기에도 좋지 않아 가독성이 떨어진다. 문법 연구를 위해서는 System만 참조해도 충분하므로 당분간은 System 네임스페이스만 사용할 것이다.





4 기본적인 입출력

4.1 출력

닷넷의 입출력 관련 기능들은 모두 System 네임스페이스의 Console 클래스가 제공한다. Console의 메서드들을 통해 모니터에 문자열을 출력하고 키보드로부터 문자열을 입력받는다. C#은 순수한 언어일 뿐이며 언어 차원에서 입출력 기능을 제공하지는 않는다. 모든 입출력 기능은 닷넷 라이브러리에 의해 제공된다. 이는 C/C++ 언어도 마찬가지인데 printf함수나 cout 객체도 언어의 기능이 아니라 표준 라이브러리가 제공하는 것이다. 다만 C++의 라이브러리는 언어 차원의 표준이지만 C#이 사용하는 닷넷 라이브러리는 플랫폼 차원의 공통 라이브러리(BCL)라는 점이 다르다.



입출력 기능을 제공하는 Console 클래스가 System 네임스페이스에 포함되어 있으므로 입출력을 위해서는 소스 선두에 using System; 선언을 해야한다. 이 선언에 의해 Console 클래스와 그 메서드들을 곧바로 호출할 수 있다. 먼저 출력 메서드에 대해 알아보자. Console의 기본출력 메서드는 WriteLine이다. 총19가지 형식으로 오버로딩(중복정의)되어 있는데 자주 사용하는 몇 가지만 보이면 다음과 같다.



public static void WriteLine();

public static void WriteLine(char value);

public static void WriteLine(int value);

public static void WriteLine(double value);

public static void WriteLine(object value);

public static void WriteLine(string value);

public static void WriteLine(string format, params object[] arg);



정적 메서드이므로 Console 객체를 생성하지 않아도 Console.WriteLine형식으로 곧바로 호출 할 수 있다. 리턴 타입은 모두 void인데 출력만 하므로 특별히 리턴할 내용이 없다. 인수 타입으로 문자형, 정수형, 실수형, 문자열 등을 받아들인다. 출력할 수 있는 인수의 타입이 워낙 많아 무엇이든지 전달만 하면 화면으로 출력하며 닷넷이 정의하는 거의 모든 타입을 출력할 수 있다고 생각하면 거의 틀림없다. 따라서 인수로 어떤 타입을 받을 수 있는지 굳이 외울 필요도 없다.



인수 없이 WriteLine만 호출하면 출력없이 커서를 다음 줄 처음으로 내리기만 한다. string과 배열 인수를 받는 형식을 사용하면 서식 조립도 가능하다. 서식 조립은 비록 구식 방법이기는 하지만 문자열을 원하는 형식대로 정확하게 조립할 수 있는 아주 편리한 방법이기도 하다. C의 printf 함수와 기능상 동일하되 사용하는 방법은 조금 다르다.



다음 예제는 WriteLine의 여러 형식을 호출해 본다. 예제마다 하나씩 프로젝트를 매번 새로 만들 필요 없이 앞서 만든 프로그램의 소스 파일만 수정하면 된다 마법사로 프로젝트를 만드는 과정이 어렵지는 않지만 손이 많이 가므로 번거롭다. CSExam같은 더미 프로젝트를 하나 만들어 두고 소스만 바꿔서 입력하면 편리하다. 물론 매번 프로젝트를 새로 만들고 싶다면 굳이 말리지는 않겠지만 말이다.



static void Main(string[] args)
        {
            int i = 1234;
            double d = 5.6789;
            Console.WriteLine("문자열");
            Console.WriteLine(i);
            Console.WriteLine(d);

            //서식을 사용할 수 있다
            Console.WriteLine("정수는 {0}이고 실수는 {1}이다", i, d);
            Console.WriteLine("자릿수 테스트:->{0}<- ->{0,6}<- ->{0,-6}<-", i);
            Console.WriteLine("->{0:F0}<- ->{0:F2}<- ->{0:F4}<-", d);

         }



정수형 실수형 변수들을 골고루 선언해 놓고 변수와 상수 등을 출력해 보았다. 그리고 서식 조립도 해 보았다. 정수는 숫자로 출력하고 실수는 소수점과 함께 출력하며 문자열은 내용을 그대로 출력 한다.



실행 결과

 문자열

1234

5.6789

정수는 1234 이고 실수는 5.6789이다

자릿수 테스트:->1234<- ->  1234<- ->1234  <-

->6<- ->5.68<- ->5.6789<-



서식을 지정할 때는 문자열 안에 {} 괄호를 적고 괄호 안에 0부터 시작하는 인덱스를 적는다. 서식은 필요한 만큼 개수의 제약 없이 사용할 수 있으며 실행 중에 인수의 타입을 정확하게 판별할 수 있으므로 printf의 %d, %f처럼 타입을 구분할 필요도 없다. 서식의 개수만큼 뒤쪽에 실제 출력할 인수들을 나열하기만 하면 된다. 문자열 내의 서식{0}가 이어지는 다음 인수와 대응되고 {1}이 그다음 인수에 대응된다.



{0} 서식이 i와 대응되어 {0}자리에 i의 실제 값인 1234가 삽입되고 {1} 서식은 d와 대응되어 5.6789가 삽입된다. 서식이 꼭 순서를 지켜야할 필요는 없으며 필요할 경우 한 서식을 여러번 반복 해서 사용할 수도 있다. 한 변수의 값을 다른 형식으로 여러 번 출력하려면 {0}을 서식 문자열 내에 여러번 사용하면 된다. 다음 두 형식 모두 가능 하다.

Console.WriteLine("정수는 {1}이고 실수는{0}이다",d,i);

Console.WriteLine("{0}번 학생의 성적은 score{0}에 있다.",num);



서식의 순서가 예제의 호출문과 반대로 {1}이 먼저오고 {0}이 다음에 오지만 뒤쪽의 인수들 순서도 같이 바뀌었으므로 출력 결과는 동일하다. 두 번째 호출문은 {0}이 두 번 사용되었으며 둘 다 num 인수에 대응된다. {}안의 번호는 뒤쪽 인수의 순서 값일 뿐이며 모든 서식은 대응되는 변수로 대체 된다. 서식에는 인덱스 외에도 폭과 출력 형식을 지정할 수 있다. 서식의 완전한 형식은 다음과 같다.



형식 : { 인덱스, 폭:형식}

서식에서 지정한 폭은 최소 폭이며 실제 값이 이 폭보다 작더라도 무조건 지정한 폭만큼을 차지한다. 폭에 음수를 사용하면 왼쪽으로 정렬된다. 예제에서는 폭4의 i값을 여러가지 방법으로 출력해 보았는데 서식 앞 뒤의 -> <- 기호는 폭을 분명히 보기 위해 출력한 것이다. 결과는 다음과 같다.

{0} ->1234<- 4칸 차지

{0,6} ->  1234<- 6칸차지, 오른쪽으로 정렬

{0,-6} ->1234  <- 6칸 차지, 왼쪽으로 정렬



별다른 폭 지정이 없으면 i의 실제 폭만큼인 4칸만 차지한다. 폭6을 지정하면 6칸을 차지하고 남는 두 칸은 여백으로 채워진다. 폭 -6을 지정하면 6칸을 차지하되 글자들이 왼쪽으로 정렬되고 여백이 오른쪽으로 이동한다. 수치들은 오른쪽으로 정렬해야 액수 비교가 용이하지만 문자열은 왼쪽으로 정렬하는 것이 보기에 좋다. 단 이 폭은 어디까지나 최소 폭이지 강제폭이 아니므로 폭보다 넓은 값을 출력할 때는 폭 지정을 무시하고 값을 모두 출력한다. 즉123456을 폭3으로 출력한다고해서 123이 나 456만 출력하지는 않는다는 얘기다.



출력 형식은 값을 어떤 식으로 출력할 것인가를 지정하는데 똑같은 값도 필요에 따라 다른 형식으로 출력할 수 있다. 정수의 경우 10진수나 16진수 등의 진법을 지정할 수 있으며 실수는 소수점 형태와 유효 자릿수를 지정할 수 있다. 다음과 같은 출력 형식들이 있는데 대 소문자를 구분하므로 정확하게 적어야 한다.



 형 식

 설 명

 C

 통화 형태로 출력한다. 미국의 경우 $표시가 앞에 붙고 우리나라의 경우 \가 앞에 붙는다.

 D

 10진수, D 다음에 폭을 지정하면 남는 폭은 선행 제로를 붙인다. D6으로 1234를 출력하면 001234가 된다

 E

 부동 소수점 표기, 5.6789는 5.678900E+000으로 출력된다. 소문자 e를 사용하면 지수 표기 문자 E가 소문자로 출력된다.

 F

 고정 소수점 표기, 뒤쪽에 소수 이하의 자릿수를 지정하면 반올림 처리하여 출력한다.

 G

 E와 F중 짧은 쪽을 선택한다.

 N

 숫자 중간에 매 세 자리마다 콤마가 들어간 형태로 출력한다. 1234567은 1,234,567로 출력된다

 P

 퍼센트 형태로 표기한다. 100을 곱하고 소수점 이하 두 자리까지 출력하며 뒤에 %기호도 출력된다.

 X

 16진수 소문자 x를 쓰면 16진 문자 a~f가 소문자로 출력된다.



예제에서는 F 서식으로 유효 자릿수를 변경해 가며 실수 d를 출력해 보았다. F0는 소수점 첫째 자리에서 반올림하여 정수부만 출력하고 F2는 소수점 둘째 자리까지 출력하며 F4는 넷째자리까지 출력한다. 실수부는 정확한 값보다 필요한 자릿수까지만 출력하는 것이 보기에 좋으므로 유효 자릿수는 가급적 지정하는 것이 좋다. 예를 들어 평균 성적이나 이율 같은 정보는 보통 소수점 둘째 자리까지만 필요하며 뒤쪽에 더있어 봐야 정확도가 향상되는 것도 아니다.



WriteLine 메서드는 출력이 끝난 후 자동으로 개행하는 줄 단위 출력 함수이다. 아무리 짧은 내용이라도 한 줄을 차지한다. 이 메서드 외에 Write라는 메서드가 있는데 이 메서드는 모든 면에서 WriteLine과 동일하되 출력 후 개행하지 않는다는 점만 다르다. WriteLine은 무조건 개행해 버리므로 한줄에 여러 개의 정보를 연이어 출력할 때는 Write 메서드를 사용해야 한다.
