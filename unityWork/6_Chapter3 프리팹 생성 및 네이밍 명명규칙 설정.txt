※ 프리팹
프리팹(Prefab)의 사전적 의미는 조립식 주택 또는 미리 부품을 만들어 놓고 현장에서는 조립만 하는 건축 기법을 의미한다. 즉 자주 사용하는 객체를 미리 부품처럼 만들어 놓고 재사용할 수 있게 하는 것이다. 

유니티에서의 프리팹은 복사가 가능한 원본의 개념으로, 프리팹을 복제해서 만든 복사본(Clone)의 속성은 원본의 속성과 일치한다. 따라서 원본 프리팹을 수정하면 그 복사본은 수정 사항이 자동으로 일괄적으로 적용되는 특성이 있다. 

예를 들어 전투 로봇을 만들고 3개를 복사해 스테이지 곳곳에 배치했다가 나중에 모델이나 속성에 대해 변경사항이 발생하면 3개의 전투 로봇을 일일이 변경해야 한다. 하지만 [그림3-2]와 같이 로직이 완성된 전투로봇을 프리팹으로 전환한 다음 그 프리팹을 복사해 배치하고 나서 그림처럼 원본 프리팹을 수정해 포탑을 장착하고 저장하면 그 변경사항이 3개의 복사본에 자동으로 적용된다. 매우 편리하고 강력한 기능이다. 



※ 네스티드 프리팹
유니티 2018.3 버전부터 지원하기 시작한 네스티드 프리팹(Nested Prefab, 중첩 프리팹) 기능은 프리팹 하위에 다른 프리팹을 추가할수 있는 기능이다. 페어런트 프리팹과 별도의 인스턴스를 유지할 수 있는 프리팹을 추가할수 있기 때문에 많은 유니티 개발자로부터 요청이 있던 기능이다. 네스티드 프리팹의 장점은 다음과 같다. 

* 프리팹 하위에 프리팹을 추가할수 있기 때문에 개발 효율성을 높인다.
* OOP 개념의 상속이 가능하다. 다른 프리팹을 상속받아 다양한 기능을 추가할 수 있다. 
* 프리팹 모드 기능으로 프리팹만 수정할수 있는 별도의 인터페이스를 제공한다. 





※ 벽 만들기
이제 Floor 게임오브젝트의 네 군데 모서리에 배치할 벽을 프리팹으로 만들어 배치하자. 먼저 원본 프리팹을 하나 제작한 다음 그 프리팹을 복사하기로 한다. 메뉴에서[GameObject] > [3D Object] > [Cube]을 선택해 씬 뷰에 Cube 모델을 생성한다. Cube의 이름을 Wall로 변경하고 Transform 속성을 다음 표와 같이 설정한다. 

Transform 속성		X	Y	Z
Position			0	3	0
Rotation			0	0	0
Scale			50	6	1

이어서 벽에 연결할 머터리얼을 제작해보자 프로젝트 뷰의 04.Images/Materials 폴더 아래에 새로운 머터리얼을 생성하고 머터리얼 이름은 Wall로 변경한다. 머터리얼을 생성하면 셰이더는 기본 셰이더인 Standard로 설정된다. Standard 셰이더는 고품질을 내기 위한 셰이더이기에 모바일 플랫폼에서는 무겁다. 따라서 좀 더 가벼운 셰이더로 변경한다. 인스펙터 뷰에서 Shader 속성을 클릭한 후 [Mobile] > [Bumped Diffuse]를 차례로 선택해 셰이더를 수정한다. 

변경한 Mobile/Bumped Diffuse 셰이더는 메인 텍스처와 음영을 표현하기 위한 노멀 맵 텍스처로 구성돼있다. 프로젝트 뷰의 04.Images/YughuesFreeMetalMaterials/Materials 폴더에 있는 T_08_Diffuse텍스처를 Base (RGB)슬롯으로 드래그 앤드 드롭해 연결한다. 그다음 텍스처의 Tiling 속성중 X를 10으로 설정한다. 

하이러키 뷰에서 Wall 게임오브젝트를 선택하고 인스펙터 뷰를 확인한다. Mesh Renderer 컴포넌트의 Materials 속성은 배열 타입으로 머터리얼을 한 개 이상 연결할수 있다. Wall 머터리얼을 Mesh Renderer 컴포넌트의 Materials 속성의 Element0에 드래그 앤드 드롭해 직접 연결한다. 

단순히 Base 텍스처만 적용된 Wall 머터리얼을 적용한 벽 모델은 다음 그림과 같이 음영이나 표면의 흠집 같은 세밀함이 표현되지 않는다. 

바닥의 음영효과처럼 벽 모델 역시 노멀 맵을 적용해보자. 지금까지는 머터리얼을 만들고 해당 머터리얼을 선택한 후 텍스처를 추가하거나 속성값을 변경했다. 하지만 머터리얼을 매번 선택하지 않아도 속성을 수정할 수 있다. Wall 에ㅔ는 이미 머터리얼을 연결했기 때문에 인스펙터 뷰에서 바로 해당 머터리얼의 정보를 조회하거나 수정할 수 있다. 굳이 프로젝트 뷰에서 해당 머터리얼을 선택하지 않아도 된다. 

하이러키 뷰 또는 씬 뷰의 Wall을 선택하면 인스펙터 뷰의 하단에 Wall 머터리얼의 정보가 있는 것을 볼 수 있다. 머터리얼 정보가 축소돼 있다면 왼쪽에 있는 삼각형 모양 아이콘을 클릭하면 펼쳐진다. 

이제 프로젝트 뷰의 04.Images/YughuesFreeMetalMaterials/Materials/Textures폴더에 있는 T_08_Normal 텍스처를 인스펙터 뷰의 Normalmap 슬롯으로 드래그 앤드 드롭해 연결한다. 

Base 텍스처만 연결했을 떄와 다르게 리벳(못)자국과 표면의 흠집 등이 세밀하게 표현된 것을 확인할수 있다. 

앞서 Wall에 적용한 셰이더는 스페큘러 속성(빛을 반사하는 속성)이 표현되지 않기 때문에 금속성의 재질을 표현하지 못하는 것은 아쉬운 부분이다. Wall의 Shader를 Legacy Shaders/Bumped Specular로 변경하면 다음 그림과 같이 표면의 빛이 반사되는 효과를 볼 수 있다. 독자 여러분이 직접 셰이더의 MainColor, Specular Color, Shininess등의 속성을 수정해 재질감이 어떻게 변경되는지 확인해보자 





※ 프리팹 생성
하이러키 뷰의 Wall을 프리팹으로 만들어보자. 하이러키 뷰의 Wall을 프로젝트 뷰로 드래그 앤드 드롭하면 같은 이름으로 객체가 생성되는데, 바로 이 객체가 프리팹이다. 물론 프로젝트 뷰의 컨텍스트 메뉴에서 프리팹을 미리 생성한 다음에 연결할 수도 있지만 드래그 앤드 드롭 방식이 훨씬 편리하다. 

생성한 프리팹은 03.Prefabs 폴더로 옮겨서 분류한다. 앞으로 독자 여러분이 만드는 프리팹은 이 폴더에 분류하기로 한다. 



팁? 프리팹의 색상
유니티 에디터의 스킨이 Light로 설정돼 있으면 하이러키 뷰에 나열된 게임오브젝트의 글자색은 검은색이 기본색이고 스킨이 Dark로 설정돼 있으면 흰색이 기본으로 표시된다. 글자색이 청색인 것은 해당 게임오브젝트가 프리팹이거나 3D 모델임을 의미한다. 하이러키 뷰에서 청색으로 표시된 게임오브젝트를 선택하면 인스펙터 뷰에 프리팹 또는 3D 모델 여부가 텍스트로 표시되어 확인할 수 있다. 

프로젝트 뷰에 생성된 프리팹을 원본 프리팹이라 한다. 이 원본 프리팹을 삭제하면 하이러키 뷰에 있던 프리팹 복사본은 붉은색으로 표시된다. 이 경우 하이러키 뷰의 원본 프리팹과 연결이 끊어진 게임오브젝트를 프로젝트 뷰로 다시 드래그 앤드 드롭하면 청색으로 변경되며 새로운 연결이 생성된다. 따라서 프로젝트 뷰에 있는 프리팹을 삭제할 때는 주의해서 삭제해야 한다. 

반면 의도적으로 프리팹의 연결 고리를 끊고 일반 게임오브젝트로 환원시키고자 한다면 해당 프리팹을 선택한 후 마우스 오른쪽 버튼을 클릭하고 [Prefab] > [Unpack]을 선택한다. 중첩 프리팹의 경우 모든 하위 프리팹까지 일반 게임오브젝트로 환원시키고자 한다면 [Prefab] > [Unpack Completely]를 선택한다. 






※ 프리팹의 복제 및 네이밍
유니티의 모든 에셋은 복사본을 만들 수 있다. 즉 게임오브젝트, 프리팹, 각종 리소스는 물론 씬(Scene)도 복사할수 있다. 하이러키 뷰의 Wall을 선택하고 단축키(윈도우: Ctrl + D, 맥: command + D)를 누르면 Wall 프리팹이 복사된다. 세 개를 추가로 복사해 총 네개의 Wall 프리팹을 각 Floor 모서리 끝부분에 배치할 예정이다. Wall을 복사하면 해당 게임오브젝트의 이름 뒤에 자동으로 일련번호가 부여된다. 따라서 복사된 Wall 프리팹은 Wall (1), Wall (2), Wall (3)으로 이름이 부여됐을 것이다. 

복제된 프리팹은 [프리팹 이름] (번호)와 같은 형식으로 생성된다. 이 네이밍 방식이 낯설거나 마음에 들지 않는다면 변경할 수 있다. 메뉴에서 [Edit] > [Project Settings]를 선택한 후 [Editor]카테고리를 선택한다. 가장 아래쪽에 있는 Numbering Scheme에서 Game Object Naming을 변경한다. 네이밍은 다음 3가지 형식을 지원한다. 또한 GameObject Digits 속성으로 번호 앞에 0으로 채우는 수를 지정할수 있다. 

* Prefab (1)
* Prefab.1
* Prefab_1

필자는 [Prefab_1]을 선택해 [프리팹 이름]_[번호] 형식으로 복제본이 생성되게 설정했다. Project Settings의 변경사항은 별도의 저장 과정이 없으므로 윈도우를 닫는다. 

앞서 복제했던 Wall (1), Wall (2), Wall (3)프리팹을 모두 삭제한다. 하이러키 뷰의 처음 만든 Wall의 이름을 Wall_1로 변경한다. 

이름을 변경한 Wall_1을 선택한 후 세 번 복제하면 다음과 같이 번호가 순차적으로 증가한 이름을 볼 수 있다. 명명규칙은 개발자마다 취향이 다르기 때문에 어떤 것이 정답이라고 할 수 없다. 따라서 독자 여러분에게 가장 맞는 방식을 선택하면 된다. 