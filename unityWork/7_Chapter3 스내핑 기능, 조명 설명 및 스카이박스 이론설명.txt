※ 스내핑 기능
현재 복사한 Wall 프리팹은 모두 같은 위치에서 생성됐을 것이다. 이 Wall은 바닥의 네 군데 경계선 (엣지)쪽으로 이동해 게임 스테이지의 경계로 사용할 것이다. 물론 하이러키 뷰에서 하나씩 선택하고 씬 뷰에서 좌표축을 마우스로 드래그하는 방법으로 Floor의 모서리에 배치할 수 있지만 바닥의 모서리와 벽의 모서리를 정확히 맞닿게 하기란 거의 불가능에 가깝다. 눈으로 봐서는 바닥의 모서리와 벽의 모서리를 정확히 붙인 것처럼 보이지만 가까이 확대해보면 두 메시가 미세하게 떨어져 있거나 서로 묻혀있다. 

유니티는 이러한 불편한 점을 개선하기 위해 쉽게 화면에 배치할 수 있는 표면 스내핑(Surface Snapping)과 정점 스내핑(Vertex Snapping)기능을 제공한다. 스내핑은 자석처럼 딱 붙는 기능을 생각하면 된다. 그중 정점 스내핑은 메시의 꼭짓점과 꼭짓점을 붙이는 기능으로, 숙달되면 매우 쉽고 편리하게 배치할 수 있다. 다음 절차대로 차근차근 따라 해보자. 이때 유니티 툴 버튼은 반드시 Move Tool을 선택해야 한다. 

먼저 하이러키 뷰의 Wall_1을 선택하고 Z축을 마우스로 드래그해 바닥의 경계선 쪽으로 이동시킨다. 정확히 붙이려고 할 필요없이 작업하기 편한 정도로 바닥과 적당히 간격을 두어도 무방하다. 

정점 스내핑시킬 Wall_1을 선택한 후 키보드 V키를 누른 상태에서 마우스 커서를 꼭짓점 근처로 옮기면 Transform 축의 원점이 해당 꼭짓점으로 이동한다. 이때 꼭짓점 가운데 네모를 마우스로 드래그해 Floor쪽으로 이동하면 Floor의 가장 가까이 있는 꼭짓점으로 스내핑 된다. 원하는 꼭짓점에 스내핑되면 누르고있던 V키는 릴리스한다. 

나머지 Wall_2, Wall_3, Wall_4 역시 같은 방법으로 네 군데 경계로 위치를 이동시킨다. 각도를 90도 회전해야 할 경우 Transform 컴포넌트의 Rotation Y값을 90으로 설정한다. 다음 그림은 모든 벽을 외각에 배치해 완성한 모습이다. 





※ 조명
게임 개발에서 조명(Light)은 얼마나 효과적으로 사용하느냐에 따라 게임의 분위기나 완성도가 완전히 달라질 정도로 매우 중요한 요소중 하나다. 게임 화면 곳곳에 조명을 설치하면 할수록 시각적인 효과는 커지지만 조명을 처리하기 위한 렌더링 부하는 늘어날 수밖에 없다. 따라서 최소한의 조명으로 시각적인 효과와 게임 수행 속도 사이의 균형을 맞추는 데 항상 신경써야 한다. 

유니티는 게임 속도를 저하하지 않고 실시간 조명의 효과를 낼수 있는 라이트매핑 및 라이트 프로브 기능을 제공한다. 이 기능은 11장에서 살펴보자. 

유니티가 제공하는 조명은 Directional Light, Point Light, Spot Light, Area Light의 네 가지다. 메뉴에서 [Game Object] > [Light]를 차례로 선택해 원하는 조명을 생성할 수 있으며 새로운 씬이 만들어지면 기본적으로 Directional Light는 생성돼 있다. 이 네가지 조명을 하나씩 살펴보자. 




※ Directional Light
Directional Light는 전체 화면에 균일한 빛을 비춘다. 태양과 같은 조명으로 위치는 어디에 있든 관계가 없고 빛을 비추는 각도에 따라 그림자의 방향과 길이가 달라진다. 실시간 조명 중에서 가장 비용이 적게 드는 조명이다. 

팁? Directional Light의 위치
씬 뷰에서 Directional Light가 어디에 위치해도 무방하지만 적어도 Y축 좌표값을 0보다 크게 설정하는 것이 편리하다. 필자는 씬 뷰에서 작업할 때 방해되지 않도록 Directional Light의 Transform 컴포넌트의 y축 좌표를 10 또는 100정도로 설정한다. 




※ Point Light
Point Light는 일반 전구와 같은 성격을 띤다. 즉 Point Light가 위치한 좌표를 기준으로 360도 퍼져나가는 조명이다. Directional Light와는 달리 빛이 미치는 범위를 설정할 수 있는 Range 속성이 있다. 




※ Spot Light
Spot Light는 손전등과 같이 콘(Corn)모양으로 빛을 발하는 조명으로 실시간 조명 중에서 처리 비용이 가장 비싼 조명이다. 빛이 뻗어 나가는 각도를 조절할 수 있는 Spot Angle 속성이 있다. 




※ Area Light
Area Light는 사각형 형태의 조명으로 한쪽 면에서 빛을 발하는 조명이다. 메뉴에서 [Window] > [Rendering] > [Lighting]을 선택해 라이팅 뷰(Lighting View]를 연 다음 라이트맵을 베이크(Bake)해야만 확인할 수 있다. 유니티에서 제공하는 4개의 조명 중 Area Light만 실시간 조명이 아니며 주로 간접 조명으로 사용한다. 





※ 실시간 라이트매핑 기능
유니티는 백그라운드로 라이트맵을 베이킹할 수 있는 기능을 제공한다. 개발 중에 조명의 효과를 볼 수 있어 반복적인 작업에 매우 편리하다. 메뉴에서 [Window] > [Rendering] > [Lighting]을 선택하면 라이팅 뷰가 열린다. 



※ Lighting Settings 에셋
먼저 해당 씬의 조명 속성을 저장하는 Lighting Settings 에셋을 생성해야 한다. 라이팅 뷰의 상단에 있는 [Scene]탭을 선택하고 [New Lighting Settings] 버튼을 클릭해 에셋을 생성한다. 이름은 씬 이름과 동일하게 Play로 지정한다. Play 에셋은 01.Scenes 폴더로 이동해 분류한다. 




※ Auto Generate 옵션
라이팅 뷰의 아래에 있는 [Auto Generate]옵션을 체크하면 실시간 라이트맵을 베이크한다. 
아직 스테이지에 라이트매핑을 위해 설정한 것이 없기 때문에 계산 시간은 얼마 걸리지 않는 다. 정식적인 라이트맵을 만드는 과정은 11장에서 자세히 다룬다. 

Auto Generate 옵션에 체크하면 실시간으로 전역 조명의 연산 및 라이트매핑 작업을 진행하므로 유니티 에디터의 속도를 떨어뜨리는 원인이 된다. 따라서 작업에 방해가 될 정도로 속도가 저하되거나 끊김 현상이 발생한다면 Auto Generate 옵션을 끄고 필요할 때 라이트맵을 베이크한다. 





※ 하늘 표현 방식
게임에서 하늘을 표현하는 대표적인 방식으로는 Skybox와 SkyDome이 있다. 먼저 Skybox는 카메라가 볼 수 있는 하늘의 여섯 방면(left, front, right, back, top, bottom)의 이미지를 Cube형태로 배치해 표현한다. 반면에 SkyDome은 [그림 3-61]과 같이 돔(dome)형태의 메시에 하늘의 이미지 텍스처를 입혀 구현한다. 





※ 6 방면 스카이박스
먼저 6방면 스카이박스(6 side skybox)를 적용해보자. 프로젝트 뷰에서 04.Images/Materials 폴더에 새로운 머터리얼을 생성한 후 이름을 Skybox로 지정한다. 

생성한 Skybox 머터리얼의 Shader 콤보박스를 클릭한 다음 [Skybox] > [6 Sided]셰이더를 차례로 선택하면 6개의 텍스처를 지정할수 있게 머터리얼의 속성이 바뀐다. 

에셋 스토어에서 내려받은 Skybox Volume 2는 프로젝트 뷰의 04.Images/Skybox Volume 2 아래에 테마별로 Skybox가 분리돼 있다. 이 가운데 마음에 드는 테마를 선택해 여섯 방면의 이미지를 해당 텍스처에 차례로 하나씩 연결한다. 대부분 Skybox용 이미지 파일의 이름은 Front, Back, Left, Right, Up, Down의 형태로 지정돼 있으며 Down 이미지는 없을 수도 있다. 

Exposure 속성은 Skybox 텍스처의 노출을 설정하는 것으로 밝기를 조절할 수 있으며, Rotation 속성은Y 축을 기준으로 + 방향(시계방향)으로 텍스처를 회전시킬 수 있다. 





※ 스카이 박스 적용
완성된 Skybox 머터리얼을 적용해보자. 메뉴에서 [Window] > [Rendering] > [Lighting]을 선택하면 라이팅 뷰(Lighting View)가 열린다. 상단에서 [Environment]탭을 선택하고 Skybox Material 속성에 지금까지 설정한 Skybox 머터리얼을 드래그해 연결한다. 

더간단한 방법으로 Skybox 머터리얼을 씬 뷰의 하늘 영역에 직접 드래그 앤드 드롭해도 된다. 






※ 프로시저럴 스카이박스
유니티5부터 Skybox의 구현이 4가지 형태로 확장됐다. 앞서 진행했던 6 sided와 Cubemap, Panoramic, Procedural이 그것이다. 그 중에서 프로시저럴 스카이박스(Procedural Skybox)에 관해 살펴보자. 프로시저럴 스카이박스의 특징은 텍스처를 적용하지 않고 하늘의 색상, 대기 농도, 노출(밝기), 태양의 위치와 크기 등을 설정할 수 있다는 것이다. 유니티를 처음 열었을 때 적용된 하늘이 바로 이 프로시저럴 스카이박스다. 기본값인 Default-Skybox는 여러가지 설정값을 수정할 수 없으므로 별도의 프로시저럴 스카이박스 머터리얼을 만들어야 한다. 

프로젝트 뷰의 04.Images/Material 폴더에 새로운 머터리얼을 만들고 이름을 SkyboxPC로 지정한다. Shader 속성을 [Skybox] > [Procedural]로 수정한다. 

프로시저럴로 변경한 후 인스펙터에 표시된 속성의 기능은 다음 표와 같다. 직접 여러 가지 속성을 변경해보자. 


속성				설명
Sun				None : 태양 이미지를 표시하지 않음
				Simple : 태양 주변에 헤일로(Halo)처리를 하지 않음
				High Quality : 태양 주변에 헤일로 처리
Sun Size				태양 이미지 크기 조절
Sun Size Convergence		태양 주변의 퍼지는 빛의 범위를 조절(High Quality일 때만 표시됨)
Atmosphere Thickness		대기 농도 : 청명하거나 탁한 강도를 조절
Sky Tint				하늘 색상 조절
Ground				대지 색상 조절
Exposure				노출조절
[표 3-3]프로시저럴 스카이박스의 속성별 기능

프로시저럴 스카이박스의 여러 속성을 조절해 원하는 하늘을 만든 후 라이팅 뷰의 Sun Material에 연결하거나 씬 뷰에 직접 드래그해 하늘을 변경해보자

프로시저럴 스카이박스는 태양 이미지를 표현할수 있고, 위치도 변경할 수 있다. 즉 게임에서 해가 뜨고 지는 시스템을 적용한 경우에는 태양 이미지의 위치가 태양의 고도에 따라 같이 변경돼야 한다. 라이팅 뷰를 열어 [Environments]탭을 선택한 다음 Sun Source 속성에 기본 생성된 Directional Light가 연결된 것을 확인해보자. 이 속성은 Directional Light의 각도가 변경됐을 때 하늘에 표현된 태양 이미지의 위치를 변경해 마치 태양의 고도가 변경되는 것과 같은 효과를 낸다. 

테스트를 위해 SkyboxPC 머터리얼을 스카이박스에 적용시킨다. 라이팅 뷰의 Skybox Material에 연결하거나 씬 뷰의 빈 공간에 드래그 앤드 드롭한다. 이제 씬 뷰에 있는 Directional Light를 선택하고 Transform 의 Rotation 속성값을 변경해 회전시키면 태양 이미지의 위치가 변경되는 모습을 확인할 수 있다. 




※ 큐브맵 스카이박스
큐브맵 스카이박스(Cubemap Skybox)방식은 먼저 큐브맵을 생성한 후 하늘을 표현한다. 큐브맵은 여섯 방면 스카이박스와 마찬가지로 6장의 텍스처가 필요하며 주변 환경을 반사하는 효과에 주로 사용한다. 큐브맵 스카이박스를 적용하려면 여섯 방면의 이미지가 한 장의 텍스처에 있어야 하며, Texture Type을 Cubemap으로 설정해야 한다. 

다만 한장의 텍스처에 6방면의 이미지를 합칠 때는 다음과 같은 세 가지 방식으로 작업해야 한다. 

매핑 타입					이미지 형태
6 Frame Layout(Cube Environment)		여섯 방면의 이미지를 평면으로 배치
Latitude-Longitude(Cylindrical)		파노라마 이미지로 실린더 형태의 이미지
Mirrored Ball(Spheremap)			구체(Sphere)이미지
[표3-4] 큐브맵 스카이박스에 사용할 이미지 형태

팁? 큐브맵 정보
큐브맵 생성에 관한 자세한 내용은 다음 페이지를 참조한다.
http://docs.unity3d.com/Manual/class-Cubemap.html

정보? 6방면 스카이박스의 드로우콜 소모량
6방면 스카이박스(6 Side Skybox)는 6개의 텍스처를 사용하므로 기본적으로 6 드로우콜(DrawCall)을 소모하지만 큐브맵 스카이박스와 프로시저럴 스카이박스는 1 드로우콜만 소모하므로 좋은 대안이 될 수 있다. 또한 Sky Dome 역시 1장의 텍스처를 사용할 경우 1 드로우콜만 소모하므로 드로우콜을 낮출수 있다는 장점이 있다. 하지만 게임의 특성에 따라 카메라가 볼 수 있는 최대거리(Far clipping Plane)를 제한해야 할 때는 Sky Dome방식을 적용하는 것은 적핮하지 않을 수 있다. 




※ 정리
이번 장에서는 게임의 무대가 되는 스테이지를 제작했다. 아직 유니티를 사용하는 데 익숙하지 않아 제대로 완성하지 못한 독자도 있겠지만 전혀 실망할 필요는 없다. 유니티를 자주 사용하다 보면 점차 툴 사용에 익숙해질 것이며, 유니티에서 제공하는 다양한 단축키를 빨리 숙지하길 권장한다. 

이장까지의 소스 코드 내려 받기
https://github.com/IndieGameMaker/SpaceShooter2021/releases/tag/3장