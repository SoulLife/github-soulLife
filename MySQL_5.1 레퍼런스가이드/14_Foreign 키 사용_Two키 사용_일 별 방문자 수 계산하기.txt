3.6.6 Foreign 키 사용하기
MySQL에서 InnoDB 테이블은 Foreign 키 제한 검사를 지원한다. 

Foreign 키 제한은 단순히 두 테이블을 조인(join)하기 위해서 필요한 것이 아니다. InnoDB가 아닌 스토리지 엔진의 경우 컬럼이 REFERENCES tbl_name(col_name) 구문을 사용하도록 정의하는 것이 가능하지만 이것은 실제로 아무런 효과도 없으며 또한 지금 정의하는 컬럼은 다른 테이블에 있는 컬럼을 참조하도록 의도된 것이라는 것을 알려주는 메모 또는 코멘트 역할만 하게 된다. 이 신텍스를 다음과 같은 상황에서 사용할 때는 특히 중요하다. 

* MySQL은 col_name이 실제로 tbl_name에 있는지(또는 tbl_name 자체가 존재하는지)확인하기 위한 어떠한 종류의 CHECK도 실행하지 않는다. 

* MySQL은 정의한 테이블에서 열을 가져와서 삭제하는 것과 같은 행동을 tbl_name 에서는 전혀 하지 않는다. 다른 말로 표현하면 이 신텍스는 ON DELETE 또는 ON UPDATE가 구동하는데 아무런 영향을 미치지 않는다(ON DELETE 또는 ON UPDATE 구문을 REFERENCES 구문의 일부분으로 작성한다. 하더라도 이것은 무시되어 버린다.) 

* 이 신텍스는 column을 만든다. 이것은 어떤 종류의 인덱스 또는 키를 만들지는 않는다. 

* InnoDB 테이블 정의를 위해 이 신텍스를 사용하면 에러가 발생한다. 

아래와 나와있듯이 컬럼을 만들어서 조인(join) 컬럼으로 사용할 수 있다. 

CREATE TABLE person(
id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
name CHAR(60) NOT NULL,
PRIMARY KEY(id)
);

CREATE TABLE shirt(
id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
style ENUM('-t-shirt', 'polo', 'dress') NOT NULL,
color ENUM('red', 'blue', 'orange', 'white', 'black')NOT NULL,
owner SMALLINT UNSIGNED NOT NULL REFERENCES person(id),
PRIMARY KEY(id)
);

INSERT INTO person VALUES(NULL, 'Antonio Paz');
SELECT @last := LAST_INSERT_ID();

INSERT INTO shirt VALUES
(NULL, 'polo', 'blue', @last),
(NULL, 'dress', 'white', @last),
(NULL, '-t-shirt', 'blue', @last);

INSERT INTO person VALUES(NULL, 'Lilliana Angelovska');
SELECT @last := LAST_INSERT_ID();

INSERT INTO shirt VALUES
(NULL, 'dress', 'orange', @last),
(NULL, 'polo', 'red', @last),
(NULL, 'dress', 'blue', @last),
(NULL, '-t-shirt', 'white', @last);

SELECT * FROM person;

SELECT * FROM shirt;

SELECT s.* FROM person p INNER JOIN shirt s
ON s.owner = p.id
WHERE p.name LIKE 'Lilliana%' AND s.color <> 'white';

이러한 형태로 사용될 경우 REFERENCES 구문은 SHOW CREATE TABLE 또는 DESCRIBE 구문결과에 나타나지는 않는다. 

여기에서처럼 REFERENCES를 컬럼 정의문에서 코멘트 형태 또는 리마인더(reminder)로 사용하는 것은 MyISAM 테이블에서도 적용할 수 있다. 


3.6.7 Two 키 사용하기

단일 키를 사용하는 OR은 AND에서 다루어진 것처럼 매우 잘 동작을 한다. 

하지만 OR로 조합되어 있는 두 개의 다른 키에서 검색을 하는 경우에는 까다로운 일이 발생한다. 

SELECT field1_index, field2_index FROM test_table
WHERE field_index = '1' OR field2_index = '1';

이것은 MySQL 5.0.0에서부터 최적화 되었다. 

또한 두 개의 독립적인 SELECT 명령문에서 나오는 결과를 조합하는 UNION을 사용하면 문제를 효과적으로 해결할 수 있다. 

각각의 SELECT 명령문은 오직 한 개의 키만을 검색하고 최적화 시킨다. 


SELECT field1_index, field2_index FROM test_table WHERE field1_index = '1'
UNION
SELECT field1_index, field2_index FROM test_table WHERE field2_index = '1';


3.6.8 일 별 방문자 수 계산하기
아래의 예제는 비트 그룹 함수를 사용해서 월 별 일수를 계산해서 웹 사이트에 일 별로 방문한 사람의 수를 계산하는 방법을 나타내는 것이다.

CREATE TABLE t1(year YEAR(4), month INT(2) UNSIGNED ZEROFILL, day INT(2) UNSIGNED ZEROFILL);

INSERT INTO t1 VALUES(2000, 1, 1), (2000, 1, 20), (2000, 1, 30), (2000, 2, 2), (2000, 2, 23), (2000, 2, 23);

이 예제 테이블에는 사용자가 페이지를 방문하는 것을 나타내는 년-월-일(year-month-day)값이 있다. 월 별로 몇 일 동안 방문자가 있었는지 보기 위해서는 다음의 쿼리를 사용한다. 

SELECT year, month, BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1 GROUP BY year, month;

이에 대한 결과는 다음과 같다. 

쿼리는 중복된 엔트리를 자동으로 삭제하고 각 년/월 조합 테이블에서 얼마나 많은 날이 발생했는지를 계산한다. 