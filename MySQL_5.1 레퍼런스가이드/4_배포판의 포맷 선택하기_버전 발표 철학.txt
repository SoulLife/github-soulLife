2.1.2.2 배포판의 포맷 선택하기
설치할 MySQL 버전을 선택한 후에는 바이너리 배포판을 사용할지 아니면 소스 배포판을 사용할 지를 결정해야 한다. 대부분의 경우에는 주로 바이너리 배포판을 사용할 것이다. 바이너리 배포판은, 리눅스에 대한 RPM 파일 또는 Mac OS X를 위한 DMG 패키지와 같이, 많은 플랫폼에 대해 네이티브(native) 포맷으로 사용할 수 있다. 배포판은 또한 집 아카이브(Zip archive)또는 압축된 tar 파일 형태로 사용 가능하다. 

바이너리 배포판을 선택하는 이유는 다음과 같다. 

* 바이너리 배포판은 일반적으로 소스 배포판 보다 설치하기가 쉽다. 

* 다양한 사용자 요구 사항을 만족시키기 위해서, 우리는 바이너리 배포판에 여러 가지 서버를 제공하고 있다. mysqlid 는 보다 작고 빠른 최적화된 서버이며, mysqld-debug는 디버깅 컴파일을 한 서버이다. 
이러한 각 서버들의 구성 옵션은 서로 다르게 되어 있지만 동일 소스 코드를 사용해서 컴파일된 것들이다. 이전 버전의 모든 네이티브 MySQL 클라이언트들은 이러한 서버들에 접속을 할 수 있다. 

어떤 환경 아래에서는 소스 배포판으로 설치하는 것이 더 유익할 수도 있을 것이다. 

* MySQL을 특정 위치에 설치하길 원할 수 있다. 표준 바이너리 배포판은 어떤 위치에도 설치를 할 수 있지만, MySQL 컴포넌트를 사용자가 원하는 장소에 설치하기 위해서는 보다 많은 유연성을 필요로 한다. 

* mysqld을 구성해서 표준 바이너리 배포판에는 포함되어 있지 않은 기능들을 사용하고 싶을 수 있다. 이러한기능들을 사용하고자 할 때에는 다음과 같은 옵션을 사용하면 된다. 

* --with-libwrap
* --with-named-z-libs
* --with-debug[=full]

* 표준 바이너리에는 포함되어 있는 몇몇 기능들을 배제한 채로 mysqld을 구성할 수 있다. 예를 들면 배포판은 모든 문자열 셋을 지원하면서 컴파일 된다. 보다 작은 MySQL 서버를 원할 경우, 필요로 하는 문자열 셋만 지원하도록 MySQL을 재 컴파일 할 수 있다. 

* 특별한 컴파일러(pgcc와 같은)를 가지거나 또는 자신의 프로세서에 보다 최적화된 컴파일러 옵션을 사용하길 원할수 있다. 바이너리 배포판은 동일한 프로세서 패밀리에 있는 다양한 프로세서에서 동작하는 옵션을 가지고 컴파일 된다. 

* 현재까지의 모든 오류가 해결된 소스를 얻기 위해 비트 키퍼 저장소에서 최신의 버전을 사용하고자 원할 수 있다. 예를 들면, 오류를 발견하고 이것을 개발팀에 보고를 한다면 오류 해결은 소스 저장 공간에서 이루어지고 여기에서 해결된 것을 얻을 수 있다. 오류 해결이 실제로 해결되기 전에는 릴리즈 판에는 포함되지 않는다. 
* MySQL을 구성하는 C 및 C++코드를 읽거나 또는 수정하고 싶을 것이다. 이를 위해서는 소스 배포판이 필요하다. 

* 소스 배포판은 바이너리 배포판보다 더 많은 테스트와 예제를 가지고 있다. 

2.1.2.3 업데이트가 발표되는 방법 및 시기
MySQL은 매우 빠르게 릴리즈를 진행하며 우리는 새로운 개발자들이 다른 MySQL 개발자들과 정보를 공유하기를 원한다. 우리는 우리가 다른 사람들이 필요로 할 수 있는 새롭고 유용한 기능들을 가질 때마다 새로운 릴리즈를 발표하고자 노력한다. 

우리는 또한 사용자가 쉽게 구현하고자 원하는 기능들을 지원하고자 노력한다. 우리는 유료 사용자가 원하는 것에 유의하며 우리가 지원하는 고객들이 원하는 것에 대해 특히 유의하여 지원을 하고자 노력한다. 

새로운 버전을 다운로드하고 싶지 않는 사람은 없다. 뉴스 섹션에서 실제로 원하는 것들을 찾을 수 있을 것이다. 

우리는 MySQL을 업데이트할 때 아래의 정책을 사용한다. 

* 엔터프라이즈 서버는 매 18개월마다 출시가 될 것이며, 커뮤니티 서버는 일년에 2-3번 발표를 할 것이다. 
* 릴리즈는 각 시리즈 안에서 이루어 진다. 엔터프라이즈 서버 릴리즈 번호는 짝수를 사용한다(예를 들면 5.1.20) 커뮤니티 서버는 홀수를 사용한다(예를 들면 5.1.21)
* 플랫폼에 대한 바이너리 배포판의 주요 릴리즈는 우리가 진행한다. 다른 사람들이 시스템에 대한 바이너리 배포판을 만들 수는 있지만 그리 흔한 일은 아니다. 

* 우리는 작거나 또는 그리 치명적이지는 않은 오류를 우리가 발견할 때마다 가능하면 빨리 수정한다. 이러한 해결은 비트 키퍼 저장소에서 찾을수 있으며 다음 릴리즈에 추가된다. 
* 릴리즈판에서 치명적인 오류가 발견될 경우에는 가능한 한 빠른 시간에 새로운 버전에서 이를 수정하는 것이 원칙이다(우리도 다른 업체가 하는 방식을 따르는 것이다)


2.1.2.4 버전 발표 철학 - 릴리즈에는 알려진 버그가 없다
우리는 많은 시간과 노력을 들여 우리의 릴리즈판이 오류가 없도록 하고 있다. 우리는 지금까지 한번도 이미 알려져 있는 치명적인 반복 오류가 있는 상태로 MySQL 버전을 발표한 적이 없다. (치명적 오류는 일반적인 사용 상황에서 MySQL이 깨지거나, 정상적인 쿼리에 대해 부정확한 답을 만들어 내거나, 또는 보안상의 문제가 있다는 것을 의미한다)

우리는 모든 공개된 문제, 오류 및 데이터 베이스 디자인 정책에 대한 이슈 사항에 대한 것들을 문서로 정리를 하였다. 

우리는 안정적인 MySQL버전이 안전성에 문제가 없는 범위에서 모든 가능한 문제를 수정하는 것을 목표로 하고 있다. 경우에 따라서는 안정화(제품) 버전에서 수정하는 것이 아니라, 개발 단계에서 이를 진행한다는 것을 의미하기도 한다. 근본적으로는 이러한 이슈를 문서화 함으로서 사용자가 이를 인지할 수 있도록 하고 있다. 

우리는 다음과 같은 프로세스로 개발을 진행한다 

* 우리의 고객 지원 리스트에서 오류를 모니터링하며 오류 데이터 베이스는 http://bugs.mysql.com/과 MySQL외부 메일링 리스트에 있다. 
* 현재 사용되는 버전에 대한 모든 오류는 오류 데이터 베이스에 저장된다. 
* 하나의 오류를 해결하면 우리는 항상 이에 대한 테스트 케이스를 만들기 위해 노력하며 이것을 우리의 테스트 시스템에 포함시켜서 오류가 다시 발생하지 않도록 한다.(해결된 오류의 거의 90%가 테스트 케이스를 가지고 있다)
* 우리는 MySQL에 새롭게 추가한 각각의 새로운 기능들에 대해 테스트 케이스를 생성한다. 
* 새로운 MySQL 릴리즈를 만들기 전에 해당 MySQL 버전(3.23.x, 4.0.x, 4.1.x, 5.1.x 등)에 대해 보고된 모든 반복 오류가 해결되었는지 확인한다. 내부의 MySQL 디자인 정책상 어떤 것을 해결할 수 없다면 우리는 이것을 매뉴얼에 서류로 정리한다. 
* 우리는 바이너리를 지원하고 테스트 슈트 및 벤치마크 슈트를 돌릴 수 있는 모든 플랫폼을 구축한다. 
* 우리는 테스트 또는 벤치마크 슈트가 실패한 바이너리에 대해서는 발표하지 않는다. 문제가 소스에 있는 일반적인 에러로 인한 것이라면 우리는 그것을 해결하고 모든 시스템에서 다시 한번 테스트를 진행한다. 
* 프로세스 정립 및 테스트는 일주일간 진행한다. 우리가 이 과정 중에 치명적인 오류를 보고 받으면(예를 들면 코어 덤프에서 발생)우리는 이 문제를 해결하고 프로세스를 재 정립한다)
* http://dev.mysql.com/에 바이너리를 발표한 후에는 mysql 및 announce 메일링 리스트를 통해 이 메시지를 발표한다. 이 발표 메시지는 릴리즈에서 일어난 모든 변경 사항과 알게 된 모든 문제를 포함한다. 릴리즈 노트에 있는 알려진 문제들 섹션은 릴리즈를 사용할 때에만 필요한 것이다. 
* 우리의 사용자에게 MySQL의 새로운 기능들을 빠른 시간 안에 알려줄 수 있기 위해 새로운 버전을 매 4-8주 동안 만들도록 노력한다. 소스 코드 스냅 샷은 매일 생성되며 이것은 http://downloads.mysql.com/snapshots.php에서 볼 수 있다. 
* 우리의 노력에도 불구하고 릴리즈 판이 발표된 후에 특정 플랫폼에서 치명적인 문제를 발생시키는 어떠한 오류가 보고 되면 우리는 이것을 해결한 후 그 플랫폼에 해당하는 새로운 릴리즈를 만든다. 
* 안정화된 릴리즈를 만들기 위한 우리의 트랙 레코드는 매우 좋다. 최근 150개 릴리즈의 경우 우리는 이중에서 10개 미만의 오류를 새롭게 만들었다. 이 중에 세가지는 우리가 오랜 시간 동안 트랙 다운했던 구축 시스템 중에 하나에서 오류 glibc 라이브러리를 만든 오류였다. 