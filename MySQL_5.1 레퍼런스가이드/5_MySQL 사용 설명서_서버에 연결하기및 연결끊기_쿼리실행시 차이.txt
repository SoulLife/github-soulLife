CHAPTER03 : MySQL 사용 설명서
이 장에서는 mysql 클라이언트 프로그램을 사용해서 간단한 데이터 베이스를 만들고 사용하는 방법을 통해  MySQL을 다루는 방법을 설명하기로 한다. mysql(터미널 모니터 또는 모니터라고함)은 MySQL 서버에 연결하고, 쿼리를 구동 시키고, 결과를 볼 수 있도록 하여 주는 쌍방향(interactive)프로그램이다. mysql은 배치(batch)모드에서도 사용할 수 있다. 쿼리를 파일 안에 미리 만들어놓고 , mysql이 그 파일을 실행하게끔 할 수 있다. 여기에서는 이러한 mysql 사용 방법에 대해 설명하기로 한다. 

mysql에서 사용할 수 있는 옵션의 종류를 보기 위해서는 --help 옵션을 사용한다. 

shell>mysql --help

이 장에서는 mysql이 이미 머신에 설치되어 있고, MYSQL 서버에 연결할 수 있다고 가정한다. 이러한 상황이 아니라면 MySQL 관리자에게 연락을 해서 위의 과정이 이루어 지도록 해야 한다. 

이 장에서는 데이터베이스를 설정하고 사용하는 전체 과정에 대해 설명을 한다. 현재 있는 데이터 베이스에 접속하는 부분에만 관심이 있다면 데이터 베이스 및 테이블 생성 방법에 대한 부분은 건너 띄어도 된다. 

이 장은 원론적인 사용 설명서이기 때문에 많은 부분에서 상세한 기술은 하지 않을 것이다. 여기에서 다루는 주제에 대해 보다 자세한 정보를 얻기 위해서는 관련된 장을 참조하기 바란다. 


3.1. 서버에 연결하기 및 연결 끊기
일반적인 경우라면 서버에 연결하기 위한 mysql을 호출할 때 서버의 사용자 이름과 패스워드를 넣어주어야 한다. 로그인 한 서버가 아닌 다른 머신에서 MySQL 서버가 구동되어 있다면, 호스트 이름도 같이 지정해 주어야 한다. 어떤 파라미터를 사용해서 서버에 연결할 수 있는지는 서버 관리자에게 문의하면 된다(즉 사용할 수 있는 호스트 이름, 사용자 이름 및 패스워드) 올바른 파라미터 값을 알고 나면 아래와 같이 서버에 연결할 수 있게 된다. 

shell>mysql -h host -u user -p
Enter password: ********

host 및 user는 MySQL 서버가 돌아가고 있는 호스트 이름과 MySQL 계정에 있는 사용자 이름을 나타낸다. 설정한 것으로 입력하면 된다 ********는 패스워드를 말하는 것이다. mysql이 Enter password: 프롬포트를 나타내면 입력을 한다. 

이렇게 하고 나면 여러 가지 설치 관련 정보가 나온 후에 mysql> propmpt가 나오게 된다. 

shell>mysql -h host -u user -p
Enter password: ********
Welcome to the MySQL monitor. Commands end with : or / g

mysql> 프롬프트는 이제 mysql에 명령어를 입력할 수 있게 되었음을 말하는 것이다. MySQL이 구동되고 있는 머신에 로그인 한다면 호스트 이름을 생략하고 간단히 아래와 같이 입력을 하면 된다. 

shell>mysql -u user -p

로그인을 시도할 때 ERROR 2002(HY000): Can't connect to local MySQL server through socket'/tmp/mysql.sock'(2) 과 같은 에러가 나오면 이것은 해당 MySQL 서버의 데몬(유닉스) 또는 서비스(윈도우)가 동작되지 않고 있음을 의미하는 것이다. 이럴 경우에는 서버 관리자의 도움을 받거나 Chapter2 MySQL 설치 에서 사용중인 OS에 해당하는 부분을 참조하기 바란다. 

어떤 MySQL 설치 버전에서는 사용자가 로컬 호스트에서 돌아가는 서버에 익명으로 접속할 수 있도록 하는 것들도 있다. 이러한 경우에는 다른 옵션을 사용하지 않은 채로 단지 mysql만을 실행해서 서버에 연결할 수 있을 것이다. 

shell> mysql

서버에 성공적으로 접속을 한 후에는 QUIT(또는 \q)를 mysql> 프롬프트에 입력하면 언제든지 서버와 연결을 끊을 수 있다. 

mysql> QUIT
Bye

유닉스에서는 Control-D 를 사용해서 연결을 끊을수 있다. 
이후 섹션에서 보여주는 대부분의 예제들은 서버에 올바르게 연결되어 있다는 가정을 한다. 


3.2. 쿼리 입력하기
이전 섹션에서 설명 하였듯이 서버에 연결 되어 있어야 한다. 이제 쿼리를 만드는 방법에 대해 배워보도록 한다. 이 섹션에서는 정확히 알고 있는 몇몇 쿼리를 사용해서 명령어를 입력하는 기본 원칙에 대해 설명하기로 한다. 

여기에 있는 간단한 명령어는 서버가 현재의 날짜와 버전을 보여주도록 하는 것이다. mysql> 프롬프트 다음에 아래 내용을 입력을 한 후 엔터키(Enter)를 누른다. 

mysql>SELECT VERSION(), CURRENT_DATE;

이 쿼리는 mysql에 대한 몇 가지 내용을 설명하고 있다. 

*명령어는 세미콜론이 뒤에 나오는 SQL 명령문으로 구성된다(세미 콜론이 생략되는 예외적인 경우도 있다. 앞에서 언급한 QUIT가 이 중 하나이다. 다른 것들은 나중에 보기로 한다.)

* 명령어를 입력하면 mysql은 이 명령어를 서버에 보내서 실행을 하고 그 결 과를 화면에 보여준 후에 또 다른 mysql> 프롬프트를 내 보내서 다른 명령어를 받아들일 준비가 되었음을 알려준다. 

* mysql은 쿼리 결과를 표 형식(열과 행이 있는)으로 보여준다. 첫 번째 열에는 행의 레이블이 있다. 그 다음 열은 쿼리 결과 값이다. 일반적으로 컬럼 레이블은 데이터 베이스에서 가져오는 컬럼 이름이 된다. 위에서 보여준 것과 같이 테이블 컬럼이 아닌 수식 결과 값을 얻고자 한다면 mysql은 수식 자체가 된다. 

* mysql 은 얼마나 많은 줄이 생성되었고 쿼리를 처리하는데 시간이 얼마나 소모되었는지에 대한 정보를 보여 주는데, 이러한 것들은 서버 성능에 대한 대략적인 정보를 제공해준다. 이러한 값들은 정확한 값들이 아닌데, 그 이유는 대략적인 처리 시간(CPU, 머신 타임이 아님)만을 나타내고 서버의 로드 및 네트워크의 성능에 따라서 결과 값이 달라질수 있기 때문이다. 

키워드들은 어떤 문자 형식(대/소 문자)로도 입력할 수 있다. 아래의 쿼리는 모두 동일한 것들이다. 
mysql> SELECT VERSION(), CURRENT_DATE;
mysql> select version(), current_date;
mysql> SeLeCt vErSiOn(), current_DATE;

여기에 또 다른 쿼리가 있다. 이 쿼리는 mysql을 간단한 계산기 형태로 사용하는 예를 나타내는 것이다. 

mysql> SELECT SIN(PI()/4), (4+1)*5;

지금 까지 보여진 쿼리들은 상대적으로 간단한 단일 라인 명령문들이었다. 하나의 라인에 여러 개의 명령문을 입력하는 것도 가능하다. 각각의 명령문들은 세미콜론으로 구분한다. 
mysql> SELECT VERSION(); SELECT NOW();

명령어는 하나의 라인에서만 표현될 필요는 없고, 여러 라인이 필요한 긴 명령어를 입력하는 것도 문제가 없다. mysql은 입력하는 명령문을 입력 라인의 끝으로 구분하는 것이 아니라, 명령문은 끝을 가리키는 세미콜론을 가지고 구분한다(다른 말로 표현하면 mysql은 프리-포맷(free-format) 입력을 수용한다. mysql은 세미콜론이 나타날 때까지 모든 입력 라인을 실행하지 않는다)

여기에 간단한 다중 라인 명령문이 있다. 

mysql>SELECT
	->USER()
	->,
	->CURRENT_DATE;

이 예문에서는 다중 라인 쿼리의 처음 라인을 입력한 후에 프롬프트가 mysql>에서 ->로 변하는 것을 주목하자. 이것은 mysql이 아직 완전한 명령문을 가지지 않았고 나머지 부분이 입력되게 기다리고 있다는 것을 나타내는 것이다. 

명령어를 입력하는 도중에 입력한 명령어를 실행시키고 싶지 않을 경우 \c를 통해 취소 명령을 내릴수 있다. 

mysql> SELECT
	->USER()
	->\c
mysql>

여기에서도 역시 프롬프트의 변화를 주목하자 프롬프트는 \c이후에 mysql>로 다시 복귀되었으며, mysql은 새로운 명령어를 실행할 준비가 되었음을 나타낸다. 

아래의 테이블은 볼 수 있는 프롬프트의 형태이며, 각 프롬프트가 의미하는 mysql 상태를 정리한 것이다. 

Prompt		Meaning
mysql>		Ready for new command
->			Waiting for next line of multiple-line command
'>			Waiting for next line, waiting for completion of a string that began with a single quote(''')
''>			Waiting for next line, waiting for completion of a string that began with a double quote('"')
>			Waiting for next line waiting for completion of an identifier that began with a backtick(' ')
/*>			Waiting for next line, waiting for completion of a comment that began with /*

다중 라인 명령문들은 주로 단일 라인 명령문을 입력한 후에 실수로 세미콜론을 입력하지 않는 경우에 일어난다. mysql은 이러한 경우에 입력 사항이 더 있는지를 기다린다. 

mysql> SELECT USER()
	->

모든 명령어를 다 입력을 하였지만 -> 프롬프트가 나타나면 mysql이 세미콜론을 기다리고 있는 것이다. 명령문을 완료하기 위해 세미콜론을입력하면 mysql은 쿼리를 실행한다. 
mysql> SELECT USER()
	-> ;

'>과 ''> 프롬프트는 스트링 콜렉션 동안에 나타난다(다른 말로 표현하면 MySQL은 문장이 완료되길 기다린다)MySQL에서는 ''' 또는 '''' 문자를 가지고 문장을 쓸 수 있고(예를 들면 'hello' 또는 "goodbye") mysql은 문장을 여러 개의 라인에 걸쳐 입력할 수 있게 한다. '> 또는 "> 프롬프트를 보게 되면 이것은 ''' 또는 '"'로 시작되는 문장을 입력했으나 아직 까지 이 문장을 맺기 위해 나머지 인용 부호를 입력하지 않고 있다는 것을 의미한다. 이것은 종종 실수로 인용 부호를 누락하고 있다는 것을 가리켜 주기도 한다. 예를 들면
mysql> SELECT * FROM my_table WHERE name = 'Smith AND age < 30;
	'>

위와 같은 SELECT 명령문을 입력하였다면 Enter를 누르고 결과를 기다린다고 하더라도 아무런 일이 일어나지 않는다. 이 쿼리가 너무 오래 걸린다고 의심하지 말고 '> 프롬프트가 의미하는 것이 무엇인지를 찾아야 한다. 이 프롬프트는 mysql이 지금 문장을 완성하기 위해 무엇인가를 기다리고 있다는 것을 나타내고 있는 것이다. 

이 시점에서 할 수 있는 일은 무엇인가? 가장 간단한 것은 명령을 취소하는 것이다. 하지만 이와 같은 경우에는 \c만을 입력해서 종료할 수 없는데 그 이유는 mysql이 이것을 문장의 일부분으로 해석하기 때문이다. 이렇게 하는 것 대신에 문장 종료문자를 입력하고(mysql이 문장의 끝임을 알게끔) 그 후에 \c를 입력한다.

mysql> SELECT * FROM my_table WHERE name = 'Smith AND age < 30;
	'> '\c
mysql>

프롬프트는 다시 mysql>로 변하고 mysql은 새로운 명령어를 기다리게 된다. 

'> 프롬프트는 '>과 "> 프롬프트와 유사하지만 역방향(backick-quoted)인용 부호로 시작한 아이덴티파이어를 완성하지 않았음을 가리킨다. 

'>, "> 및 '> 프롬프트가 의미하는 것이 무엇인지 아는 것이 중요한데 그 이유는 실수로 완료가되지 않은(unterminated)문장을 입력한다면 그 이후의 모든 라인들이 -QUIT을 갖고 있는 문장 포함해서 -mysql에 의해 무시되기 때문이다. 현재의 명령어를 취소하기 전에 문장 종료인 인용부호를 입력해야 한다는 것을 모르고 있을 경우에는 특히 혼란을 일으킬수 있는 사항이다.