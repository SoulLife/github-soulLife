3.3.4.7 패턴 매칭

MySQL은 유닉스 유틸리티가 사용하는 vi, grep 및 sed등과 유사한 확장 규칙 수식(extendedregular expression)에 근거한 패턴 매칭 형식 뿐만 아니라 표준 SQL 패턴 매칭도 함께 제공한다. 

SQL 패턴 매칭은 '_'을 사용해서 단일 문자를 매칭하고 %를 사용해서 문자(제로 문자 포함)의 부정 숫자(arbitrary number)를 매칭한다. SQL 패턴은 디폴트로 대소 문자를 구분하지 않는다. 몇 가지 예문을 보기로 하자. SQL 패턴을 사용할 때에는 = 또는 <> 를 사용할 수 없다는 점을 주의한다. LIKE 또는 NOT LIKE를 대신 사용하도록 한다. 

b로 시작되는 이름을 찾기 위해서는 다음과 같이 쿼리를 입력한다. 

mysql>SELECT * pet WHERE name LIKE '%b';


fy로 끝나는 이름을 찾기 위해서는 다음고 같이 쿼리를 입력한다. 

mysql>SELECT * FROM pet WHERE name LIKE '%fy';

이름 안에 w가 있는 것을 찾기 위해서는 다음과 같이 쿼리를 입력한다. 

mysql>SELECT * FROM pet WHERE name LIKE '%w%';

정확히 5개의 문자로 되어 있는 이름을 찾기 위해서는 '_____' 패턴 문자를 5번 사용한다. 

mysql>SELECT * FROM pet WHERE name LIKE '_____';

MySQL이 확장 규칙 수식을 사용할 때에는 다른 형태의 패턴 매칭이 나타난다. 이러한 유형의 패턴 매칭을 테스트 하고자 할 때에는 REGEXP와 NOT REGEXP연산자를 사용한다(또는 RLIKE와 NOT RLIKE를 사용한다)

확장 규칙 수식의 몇 가지 특징을 알아보면 다음과 같다. 

* '.'는 모든 단일 문자를 매치 시킨다. 

* 문자 클래스 [...]는 대괄호 안에 있는 모든 문자를 매치시킨다 예를 들면 '[abc]'는 'a', 'b', 또는 'a', 'b', 또는 'c'를 매치시킨다. 문자 범위를 지정하기 위해서는 대쉬(dash)를 사용한다. '[a-z]'는 모든 문자를 매치 시키는 반면에 '[0-9]'는 모든 숫자를 매치시킨다. 

* '*'는 기호 앞에 문자의 0개 또는 그 이상의 인스턴스를 매치시킨다. 예를 들면 'x*'는 'x' 문자의 모든 수를 매치시키며, '[0-9]*'는 숫자의 모든 수를 매치 시키고 '.*'는 모든 것의 모든 숫자를 매치 시킨다. 

* REGEXP 패턴 매치는 테스트되는 값이 있는 모든 곳에서 매칭을 실행한다( 이것은 LIKE 패턴 매치와는 다른데, LIKE는 전체 값에서만 패턴 매치를 진행한다.)

* 테스트 되는 값의 처음 또는 끝을 매칭 하도록 패턴을 고정 시키기 위해서는 패턴의 처음에 '^'를 사용하거나 또는 끝에 '$'를 사용한다. 


확장 규칙 수식이 어떻게 동작을 하는지 보이기 위해서 이전에 사용한 LIKE 쿼리를 REGEXP 수식으로 다시 작성한다. 

b로 시작하는 이름을 찾기 위한 '^' 사용 패턴 쿼리를 입력한다. 

mysql>SELECT * FROM pet WHERE name REGEXP '^b';

REGEXP 비교문이 대소 문자를 구분하도록 하기 위해서는 BINARY 키워드를 사용하는 바이너리스트링을 만든다. 이 쿼리는 이름이 소문자 'b'로 시작하는 것만을 매치시킨다. 

mysql>SELECT * FROM pet WHERE name REGEXP BINARY '^b ';

'fy'로 끝나는 이름을 찾기 위해서는 '$'를 사용해서 이름의 끝을 매치시킨다. 

mysql>SELECT * FROM pet WHERE name REGEXP 'fy$';

이름에 'w'문자를 가지고 있는 것을 찾고자 하는 경우에는 다음의 쿼리를 사용한다. 

mysql>SELECT * FROM pet WHERE name REGEXP 'w';

레귤러 수식 패턴은 테스트되는 값에서 매칭을 하기 때문에 이전 SQL 패턴에서 사용한 것과 같이 와일드카드를 패턴의 양끝에 넣고 전체 값을 매칭 시키는 것이 불필요하게 된다. 

정확히 5개의 문자를 가지고 있는 이름을 찾기 위해서는 '^'와 '$'를 패턴 양쪽 끝에 놓고 중간에 다섯 개의 '.'인스턴스를 넣어둔다. 

mysql>SELECT * FROM pet WHERE name REGEXP '^.....$';

위의 쿼리를 {n}("n"번 반복 실행)연산자를 사용해서 작성할 수 있다. 

mysql>SELECT * FROM pet WHERE name REGEXP '^.{5}$';