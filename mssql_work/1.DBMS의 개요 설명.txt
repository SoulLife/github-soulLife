Section 01 : DBMS 개요

데이터베이스의 정의와 특징
데이터베이스를 데이터의 집합이라고 정의한다면 DBMS는 이 데이터베이스를 관리/운영하는 역할을 한다. 또한, 데이터베이스는 여러 사용자나 응용프로그램이 공유하고 동시에 접근이 가능해야 한다. 그래서 마이크로소프트의 엑셀(Excel)과 같은 프로그램이 데이터의 집합으로 사용될 수는 있어 DBMS와 비슷하게 보일 수도 있지만, 대용량을 관리하거나 여러  사용자가 공유하는 개념은 아니므로 DBMS라 부르지 않는다. 

데이터베이스는 데이터의 저장 공간 자체를 의미하기도 한다. 특히 SQL Server는 데이터베이스를 자료가 저장되는 디스크 공간(주로 파일로 구성됨)으로 취급한다. 

*종종 다른 책이나 소프트웨어에서 데이터베이스를 DBMS와 혼용해서 같은 용어처럼 사용하기도 한다. 바라보는 시각에 따라서 그렇게 취급하는 것이 틀리지는 않지만, 이 책에서 데이터베이스는 데이터의 집합 또는 데이터의 저장 공간으로 다룰 것이며, DBMS는 데이터베이스를 운영하는 소프트웨어를 의미하는 것으로 하겠다. 

다음 그림은 데이터베이스/DBMS/사용자/응용프로그램의 관계를 간단히 보여준다. 

[그림1-1]에 표현되어 있듯이 DBMS는 데이터베이스를 관리하는 소프트웨어 개념이다. 여러 사용자나 응용프로그램이 DBMS가 관리하는 데이터에 동시에 속하고 데이터를 공유하게 된다. 즉 DBMS에는 사용되는 데이터가 집중되어 관리되고 있다. 

[그림1-1]에서 DBMS를 SQL Server로 표현했지만 SQL Server 외에도 많이 사용되는 DBMS는 다음 [표1-1]과 같다. 

DBMS		제작사		운영체제			최신버전		기타
SQL Server	Microsoft		Windows			2012
Oracle		Oracle		Unix, Linux, Windows	11g R2		상용 시장 점유율 1위
DB2		IBM		Unix, Linux, Windows	10		메인프레임 시장 점유율 1위
MySQL		Oracle		Unix, Linux, Windows	5.5		오픈 소스(무료)
Access		Microsoft		Windows			2013		PC 용
SQLite		SQLite		Android, iOS		3.7		모바일 전용, 오픈 소스(무료)
[표1-1]많이 사용되는 DBMS


DBMS또는 데이터베이스는 다음과 같은 몇 가지 중요한 특징이 있다. 

*데이터의 무결성(Integrity)
데이터베이스 안의 데이터는 어떤 경로를 통해 들어 왔던지 데이터에 오류가 있어서는 안된다. 이 무결성을 위해서 데이터베이스는 제약조건(Constrain)이라는 특성이 있다. 
예를 들어, 학생 데이터에서 모든 학생은 학번이 반드시 있어야 하며, 각 학생의 학번은 서로 중복되면 안 되는 제약 조건이 있을 수도 있다. 이 제약 조건을 지키게 되면 학번만 안다면 그 학생이 어떤 학생인지 정확히 한 명의 학생을 추출할 수 있다. 즉 학번은 무결한 데이터로 보장할 수 있기에 성적증명서, 재학증명서 등을 자동발급기에서 출력할 때, 학번만 가지고도 정확히 자신의 것을 출력할 수 있게 된다. 

*데이터의 독립성
데이터베이스의 크기를 변경하거나 데이터 파일의 저장소를 변경하더라도, 기존에 작성된 응용프로그램은 전혀 영향받지 않아야 한다. 즉, 서로 의존 관계가 아닌 독립 관계여야 한다. 
예를 들어, 데이터베이스를 저장한 디스크가 새 것으로 변경되어도 기존에 사용하던 응용프로그램은 아무런 변경 없이 계속 사용되어야 한다. 

* 보안(Security)
데이터베이스 안의 데이터는 아무나 접근할 수 있는 것이 아니라, 데이터를 소유한 사람이나 데이터의 접근이 허가된 사람만이 데이터에 접근할수 있어야 한다. 또한 접근할 때 사용자의 계정에 따라서 다른 권한을 가져야 한다. 최근 들어 고객 정보의 유출 사고가 빈번한 상황에서 보안은 더욱 중요한 데이터베이스의 이슈가 되었다


*데이터 중복의 최소화
같은 데이터가 중복되어 저장되는 것을 방지한다. 
학교의 예를 들면 학생 정보를 이용하는 교직원(학생처, 교무처, 과사무실 등)은 여러 명이 될 수 있다. 이때, 엑셀을 사용한다면 각 직원마다 별도의 엑셀 파일을 사용해야 한다.그렇게 되면 한 명의 학생 정보가 각각의 엑셀 파일에 중복되어 관리된다. 이를 데이터베이스에 통합하면 하나의 테이블에 저장하고 이를 공유함으로써 데이터 중복이 최소화된다. 

*응용 프로그램 제작 및 수정이 쉬워짐
기존 파일 시스템을 사용할 때 각각 파일의 포맷에 맞춰 개발해야 하는 응용프로그램을 데이터베이스를 이용하면 통일된 방식으로 작성할 수 있고 유지보수도 쉽게 할 수 있다. 

*데이터의 안전성향상
대부분의 DBMS가 제공하는 백업/복원 기능을 이용하면 데이터가 깨지는 문제가 발생할 때 원상 복원 또는 복구하는 방법이 명확해진다. 




* 데이터베이스의 발전
당연히 초창기의 컴퓨터에는 데이터베이스라는 개념이 없었다. 몇 단계의 과정을 거쳐 데이터베이스를 사용하게 되었다. 


1. 오프라인으로 관리
아무리 오래 전이라도 데이터를 관리하고 있었을 것이다. 즉 컴퓨터가 없던 시기에도 회사를 운영하기 위해서는 수입과 지출이 있었을 것이고 그것을 종이에 연필로 기록했을 것이다. 물론 아직도 종이에 수입/지출을 직접 기록하고 관리하는 분야나 회사도 있다. 


2. 파일 시스템의 사용
컴퓨터를 사용하면서 종이에 기록하던 내용을 컴퓨터 파일로 기록하고 저장하게 되었다. 컴퓨터에 저장할 때 메모장이나 엑셀을 활용해서 저장하는데 이를 활용하기 위해 많은 응용프로그램들이 이 파일에 저장된 내용을 읽고 쓰는 기능을 하게 되었다. 그래서 컴퓨터에 저장된 파일의 내용은 읽고 쓰기가 편하게 약속된 형태의 구조를 사용한다. 

파일 시스템은 대개 하나의 응용프로그램마다 하나의 데이터 파일이 할당되게 된다. 즉 어떤 기능을 구현하면 기능의 개수만큼 데이터 파일의 숫자가 생겨야 한다. 
이것은 초기에는 큰 문제가 없을 수도 있지만, 시간이 지나 데이터의 양이 많아지게되면 데이터의 중복으로 인한 불일치가 발생한다. 

예를 들어 회원정보가 수록된 파일에는 회원 이름, 회원주소, 회원 연락처, 회원 가입일, 취미 등이 기록될 것이다. 또한, 회원이 물건을 구매한 구매 정보가 수록된 파일에도 마찬가지로 회원 이름, 회원 주소, 연락처, 구매한 물건, 가격, 수량 등이 기록되어야 한다. 
만약 회원이 이사를 가거나 연락처가 바뀌게 되면 회원 정보와, 구매 정보 모두를 변경해줘야 한다. 그런데 깜박 잊고 한 곳만 수정하게 되면, 나중에 시간이 지난 후에 두 정보가 일치하지 않더라도 어느 주소가 회원의 올바른 주소인지 알아내기가 어렵다. 
이러한 불일치가 파일 시스템의 큰 문제점 중 한가지다. 그러나 이러한 문제점에도 불구하고 파일 시스템은 소량의 데이터를 처리하는 데는 처리속도가 DBMS보다 훨씬 빠르며, 별도의 추가비용이 들지 않으므로 아직도 많이 사용된다. 


3. 데이터베이스 관리 시스템(DBMS: DataBase Management System)
파일 시스템의 단점을 보완하고 대량의 데이터를 보다 효율적으로 관리하고 운영하기 위해 사용되기 시작한 것이 DBMS다.
DBMS는 데이터의 집합인 데이터베이스를 잘 관리하고 운영하기 위한 시스템 또는 소프트웨어를 말한다. DBMS에 데이터를 구축하고 관리하고 활용하기 위해 사용되는 언어가 SQL(Structured Query Lanaguage)이다. SQL을 사용해서 DBMS에 중요한 정보들을 입력하고 관리하고 추출할 수 있게 된다. 




* DBMS 분류
DBMS의 유형은 크게 계층형(Hierarchical) DBMS, 망형(Network) DBMS, 관계형(Relational) DBMS, 객체지향형(Object-Oriented) DBMS, 객체관계형(Object-Relational) DBMS등으로 분류된다. 
현재 사용되는 DBMS중에 관계형 DBMS가 가장 많이 쓰이며, 일부 멀티미디어 분야에서 객체지향형이나 객체관계형 DBMS가 활용되고 있는 추세다.
우리가 배울 SQL Server와 더불어서 Oracle, DB2, MySQL, Access 등은 모두 관계형 DBMS이므로 이 책에서 다루게 되는 내용도 모두 관계형 DBMS(RDBMS)를 기준으로 맞춰진다. 


*여기서 잠깐 
오라클의 경우에는 Oracle 8 버전부터 객체관계형 DBMS라고 부르지만, 원칙적으로는 관계형 DBMS의 기능이 더 충실하며 관계형 DBMS로 더 많이 사용된다. SQL Server도 SQL Server 2008부터 비정형 데이터(예로 공간 데이터)를 지원하여 관계형 DBMS의 한계를 뛰어 넘기 위한 모습을 갖춰가고 있다. 




1. 계층형 DBMS(Hierarchical DBMS)
처음으로 나온 DBMS 개념으로 1960년대에 시작되었는데 [그림1-4]와 같이 각 계층은 트리(Tree)형태이며, 1:N 관계를 갖는다. 즉, 그림과 같이 사장 1명에 부서가 3개 연결되어 있는 구조다. 
계층형 DBMS의 문제는 처음 구축한 이후에는 그 구조를 변경하기가 상당히 까다롭다. 또한, 주어진 상태에서 검색은 상당히 빠르지만, 접근의 유연성이 부족해 임의의 검색은 어려움이 따른다. 

						노드 1
		노드 2-1				노드 2-2			노드2-3
	노드 3-1		노드3-2			노드3-3			노드 3-4
노드1은 노드2-1, 노드2-2, 노드2-3과연결
노드2-1은 노드3-1과 노드3-2와 연결
노드2-2는 노드3-3과연결
노드2-3는 노드3-4와연결




2. 망형 DBMS(Network DBMS)
망형 DBMS는 계층형 DBMS의 문제점을 개선하기 위해 1970년대에 시작되었으며, 1:1, 1:N, N:M(다대다)관계가 지원되어, 효과적이고 빠른 데이터 추출이 가능해졌다. 하지만 계층형과 마찬가지로 매우 복잡한 내부 포인터를 사용하고, 프로그래머가 이 모든 구조를 이해해야만 프로그램 작성이 가능하다는 단점이 있다. 

						노드 1
	노드 2-1					노드2-2			노드2-3
노드3-1		노드3-2				노드3-3			노드3-4

노드 1은 노드2-1, 노드2-2, 노드2-3과 연결
노드2-1은 노드3-1과 노드3-2와연결
노드3-2는 노드3-3과 연결
노드2-2는 노드3-3과 연결
노드2-3은 노드3-3과 노드3-4와 연결





3. 관계형 DBMS(Relational DBMS: RDBMS)
관계형 DBMS의 시초는 1969년 E.F.Codd라는 학자가 수학 모델을 근거로 하여 고안했다. RDBMS의 핵심 개념은 데이터베이스는 테이블(Table)이라 불리는 최소 단위로 구성되어 있다. 그리고 이 테이블은 하나 이상의 열로 구성되어 있다 라고 생각하면 된다. 

*테이블(Table)을 부르는 다른 용어로는 릴레이션(Relaction), 엔티티(Entity)등이 있다. 

			열이름
	아이디		회원이름		주소
행(로우)	Dang		당탕이		경기도 부천시 중동
행(로우)	Jee		지운이		서울 은평구 증산동
행(로우)	Han		한주연		인천 남구 주안동
행(로우)	Sang		상달이		경기 성남시 만안구
			열(컬럼)
[그림1-6]관계형 구조

관계형 DBMS에서 모든 데이터는 테이블에 저장되므로, 테이블이라는 구조가 RDBMS의 가장 기본이고 중요한 구성이 된다. 그러므로 이 테이블에 대해 잘 이해한다면 RDBMS의 기본적인 것을 이해했다고 말할 수 있다 
테이블은 데이터를 효율적으로 저장하기 위한 구조이다. 정보를 저장하기 위해 하나의 테이블이 아닌 여러 개의 테이블로 나누어 저장함으로써 불필요한 공간 낭비를 줄이고 데이터 저장의 효율성을 보장해줄 수 있다. 또한 이렇게 나뉜 테이블의 관계(Relation)를 기본 키(Primary Key)와 외래 키(Foreing Key)를 사용해 맺어줌으로써 두 테이블을 부모 와 자식의 관계로 묶을 수 있다. 
이후에 부모 테이블과 자식 테이블을조합해 결과를 얻고자 할 경우에는 SQL(Structured Query Lanaguage, 구조화된 징의 언어)의 조인(JOIN)기능을 이용하면 된다.
관계형 DBMS의 장점은 다른 DBMS에 비해 업무가 변화될 때 쉽게 변화에 순응할 수 있는 구조이며, 유지 보수 측면에서도 편리하다는 점이다. 또한, 대용량 데이터를 잘 관리하고 데이터 무결성(Integration)을 보장하므로 데이터에 동시 접근하는 응용프로그램을 사용할 경우에 RDBMS는 적절한 선택이 될 수 있다. 이와 반대로 RDBMS의 가장 큰 단점은 시스템 자원을 많이 차지해 시스템이 전반적으로 느려지는 점이다. 그러나 최근 들어 하드웨어의 급속한 발전으로 인해 이러한 단점은 많이 보완 되고 있다. 





* SQL 개요
SQL(Structured Query Lanaguage)는 관계형 데이터베이스에서 사용되는 언어로, 에스큐엘 또는 시퀄로 읽으면 된다. 
비유하자면 중국의 문화, 사회, 경제 등을 배우고자 한다면 우선 중국어를 잘 사용해야 가능한 것처럼, 우리가 공부하고자 하는 관계형 DBMS(그 중 SQL Server)를 배우고자 한다면 SQL을 익히는 게 필수다. SQL이 데이터베이스를 조작하는 언어지만 일반적인 프로그래밍 언어(C, C++, JAVA, C#등)와는 특성이 다르다. 
SQL은 국제 표준화 기관에서 표준화된 내용을 계속 발표해왔는데, SQL은 다음과 같은 특징이 있다. 


1. DBMS 제작사와 독립적이다
SQL은 모든 DBMS 제작회사에 공통으로 공개되고, 각 제작회사는 이 표준 SQL에 맞춰 DBMS를 개발하게 된다. 그러므로 표준 SQL은 대부분의 DBMS 제품에서 공통으로 호환된다. 

2. 다른 시스템으로의 이식성이 좋다. 
SQL 표준은 서버용, 개인용, 휴대용, 장비에서 운영되는 DBMS마다 상호 호환성이 뛰어나다. 그러므로 한 번 사용된 SQL이 다른 시스템으로 이식하는데 별 문제가 없다. 

3. 계속 발전하는 SQL 표준
SQL 표준은 SQL-86, SQL-89, SQL-92, SQL:1999, SQL:2003, SQL:2008, SQL:2011등 계속 개선된 표준안이 발표되어 왔으며, 지금도 개선안이 연구되고 보완되고 있다. 


4. 대화식 언어
기존 프로그래밍 언어는 프로그램 작성, 컴파일 및 디버깅, 실행이라는 과정을 거쳐야만 그 결과를 확인할 수 있었으나, SQL은 이와 달리 바로 질의하고 결과를 얻는 대화식 언어로 구성되어 있다. 

5. 분산형 클라이언트/서버 구조
SQL은 분산형 구조인 클라이언트/서버 구조를 지원한다. 즉 클라이언트에서 질의하면 서버에서 그 질의를 받아 처리한 후, 다시 클라이언트에 전달하는 구조다. 

주의할 점은 모든 DBMS의 SQL 문이 완벽하게 같지는 않다는 것이다. 즉 많은 회사가 되도록 표준 SQL을 준수하려고 노력하지만 각 회사의 DBMS마다 특징이 있어 완전히 통일하기는 어렵다. 그래서 각회사는 표준 SQL을 지키면서 자신의 제품에 특화시킨 SQL을 사용한다. 이를 오라클에서는 PL/SQL이라고 부르고 SQL Server에서는 T-SQL, MySQL에서는 그냥 SQL로 부른다 

각 회사의 제품은 모두 표준 SQL을 사용하면 공통으로 사용할수 있으며, 각 회사 제품의 특성에 맞춘 호환되지 않는 SQL 문도 사용한다. 이 책은 6장과 7창에서 표준 SQL및 SQL Server2012의 T-SQL에 대해 상세히 다룬다. 