※ 스키마
우선 데이터베이스 내에 있는 모든 개체(테이블, 뷰, 인덱스, 트리거, 프로시저 등)의 정식 명칭을 살펴보면 다음과 같은 형식을 갖는다. 

데이터베이스_이름.스키마_이름.개체_이름

여기서 스키마 (Schema)는 데이터베이스 내에 있는 개체들을 관리하는 묶음이라고 생각하면 된다. 

지금까지 우리는 테이블 이름에 별도의 스키마를 고려하지 않고 사용해왔다. 

즉 다음과 같은 형식으로 스키마를 고려하지 않고 테이블을 만들었다. 

CREATE TABLE myTbl (id int);

이렇게 스키마 이름을 생략하면 SQL Server 는 자동으로 디폴트 스키마인 dbo를 자동으로 붙여준다. 그러므로 앞의 구문은 다음과 같다. 

CREATE TABLE dbo.myTbl (id int);

또한, 원칙적으로 테이블 이름 앞에 데이터베이스 이름을 모두 붙이면 다음과 같이 테이블을 생성해야 한다. 

CREATE TABLE tableDB.dbo.myTbl(id int);

*여러 대의 서버를 운영 중이라면, 추가로 서버 이름까지 제일 앞에 붙일 수 있다. 필자의 경우엔 서버 이름이 HP-PC이므로 다음과 같은 형식이 가능하다. 필자의 서버 이름에는 하이픈(-)이 들어가서 대괄호([ ])로 묶어줬다. 

CREATE TABLE [HP-PC].tableDB.dbo.myTbl (id int);

앞의 구문에는 이미 데이터베이스 이름(tableDB)이 포함되어 있으므로, 꼭 USE tableDB로 데이터베이스를 선택해 놓을 필요는 없고, 아무 데이터베이스가 선택되어 있든지 관계없이 tableDB에 테이블을 생성할 수 있다. 

그런데 앞의 결과와 지금까지 사용해온 다음의 쿼리문의 결과는 같다. 즉 같은 쿼리라는 의미이다. 

USE tableDB;
CREATE TABLE myTbl(id int);

스키마 이름을 생략하면, 디폴트로 dbo 스키마가 붙게 된다. 또 현재 데이터베이스를 tableDB로 지정했으므로 디폴트로 tableDB데이터베이스가 붙게 된다. 

데이터베이스를 생성한 후에 별도의 스키마를 생성하지 않는다면 디폴트인 dbo 스키마와 시스템에서 제공하는 스키마만 존재한다. 

이번에는 사용자가 직접 스키마를 생성하고, 해당 스키마에 테이블을 생성하는 실습을 해보자. 


실습7 : 스키마를 실습해 보자.  테이블을 서로 다른 스키마에 생성해 보자. 

1. 실습용 데이터베이스를 만든다. 

USE tempdb;
CREATE DATABASE schemaDB;

2. 스키마를 2개 만든다. 
USE schemaDB;
GO
CREATE SCHEMA userSchema;
GO
CREATE SCHEMA buySchema;

3. 테이블을 생성하는데 스키마를 지정해서 생성한다. 
CREATE TABLE userSchema.userTBL (id int);
CREATE TABLE buySchema.buyTBL( num int);
CREATE TABLE buySchema.prodTBL( pid int);

4. 개체 탐색기에서 새로 고침을 하고 확인하면 schemaDB의 테이블이 서로 다른 스키마 이름으로 생성된 것이 확인된다. 

5. 이제는 테이블에 접근할 때 그냥 테이블 이름만으로는 접근할 수 없으며 반드시 '스키마이름.테이블이름'을 사용해야 한다. 

SELECT * FROM userTBL;

오류 메시지:
메시지 208, 수준 16, 상태 1, 줄 1
개체 이름 'userTBL'이 (가) 잘못되었습니다. 

앞의구문은 스키마를 생략했는데, 그럴 경우 dbo 스키마를 붙인다. 즉 SELECT * FROM dbo.userTBL을 접근했는데 schemaDB에는 userSchema.userTBL은 있어도 dbo.userTBL은 없으므로 당연히 접근할 수 없다. 

6. 사용한 데이터베이스를 삭제한다. 
USE tempdb;
DROP DATABASE schemaDB;

그런데 스키마를 강력하게 묶어준다기보다는 편하게 관리하려고 가볍게 테이블을 묶어준다고 생각하는 것이 좋다. 데이터베이스에 테이블이 몇 개 없다면 굳이 별도의 스키마에 테이블을 분류하지 않아도 괜찮다. 단 테이블이 많고 각각이 주제에 따라 분류할 필요가 있다면 스키마의 사용을 적극 고려하는 것이 좋다. SQL Server에서 제공하는 AdventureWorks 데이터베이스도 여러 개의 스키마를 사용 한다. 

개체 탐색기에서 AdventureWorks 데이터베이스의 [보안] > [스키마]를 확인하면 된다. db_가 붙은 것과 dbo, guest, INFORMATION_SCHEMA, sys를 제외하고는 사용자가 생성한 스키마다. 


마지막으로 앞의 실습에서 만들었던 schemaDB를 그림으로 간단히 표현하면 다음과 같다. 

우선은 스키마를 이 정도로만 이해하자. 스키마는 보안 및 사용자와도 밀접한 관련이 있어서 2권(관리와 응용)에서 관련된 내용을 학습한 후 좀 더 살펴보게 될 것이다. 