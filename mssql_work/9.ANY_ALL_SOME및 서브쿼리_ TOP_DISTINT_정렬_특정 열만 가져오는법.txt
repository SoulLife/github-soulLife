(4) ANY/ALL/SOME, 하위쿼리(SubQuery, 서브쿼리)
서브쿼리란 간단히 이야기하면 쿼리문 안에 또 쿼리문이 들어 있는 것을 뜻한다. 예를 들어, 김경호보다 키가 크거나 같은 사람의 이름과 키를 출력하려면, WHERE 조건에 김경호의 키를 직접 써줘야 한다. 

SELECT name, height FROM userTBL WHERE height > 177;

그런데 이 177이라는 키를 직접 써주는 것이 아니라 쿼리를 통해서 지정할 수 있다.

SELECT name, height FROM userTbl WHERE height > (SELECT height FROM userTbl WHERE name = '김경호');

후반부의 (SELECT height FROM userTbl WHERE name = '김경호');sms 177이라는 값을 돌려주므로 결국 177 이라는 값과 같은 값이 되어서, 앞의 두 쿼리는 같은 결과를 낸다. 

이번에는 지역이 경남인 사람의 키보다, 키가 크거나 같은 사람을 추출해보자. [그림6-10]을 보고 미리 결과를 예측해보자. 경남인 사람은 김범수(키 173)와 윤종신(키170)이므로 173 또는 170보다 작은 조용필을 제외한 나머지 9명이 출력되면 된다. 다음 예를 보지 않고 직접 쿼리문을 만들어보자. 

SELECT name, height FROM userTb1 WHERE height >= (SELECT height FROM userTb1 WHERE addr = '경남');

앞의 예와 같이 생각했는가? 그렇다면 실행해 보자. 

오류 메시지
메시지 512, 수준 16, 상태 1, 줄 1
하위쿼리에서 값을 둘 이상 반환했습니다. 하위 쿼리 앞에 =, !=, <, <=, >, >= 등이 오거나 하위쿼리가 하나의 식으로 사용된 경우에는 여러 값을 반환할 수 없습니다. 

논리적으로 틀린 것은 없는 듯하지만 오류가 나온다. 오류 메시지를 보니 하위쿼리가 둘 이상의 값을 반환하면 비교 연산자 (>=)를 쓸 수가 없다고 한다. 즉(SELECT height FROM userTb1 WHERE mobile1 = '경남')이 173과 170이라는 두 개의 값을 반환하므로오류가 나는 것이다. 

그래서 필요한 구문이 ANY 구문이다. 다음과 같이 고쳐서 실행해 보자. 

SELECT name, height WHERE userTb1 WHERE height >= ANY (SELECT height FROM userTb1 WHERE addr = '경남');

예상한 대로 키가 173보다 크거나 가틍ㄴ 사람, 또는 키가 170보다 크거나 같은 사람이 모두 출력될 것이다. 결국 키가 170보다 크거나 같은 사람이 해당된다. 

이번에는 ANY를 ALL로 바꿔서 실행해 보자. 7명만 출력되었다. 그 이유는 키가 170보다 크거나 같아야 할 뿐만 아니라 173 보다 크거나 같아야 하기 때문이다. 결국 키가 173보다 크거나 같은 사람만 해당된다. 

결론적으로 ANY는 하위쿼리의 여러 개의 결과 중 한가지만 만족해도 되며, ALL은 하위 쿼리의 결과 여러개를 모두 만족시켜야 한다. 참고로 SOME은 ANY와 같은 의미로 사용된다. 

이번에는 >= ANY 대신에 = ANY를 사용해 보자. 

SELECT name, height userTb1 WHERE height = ANY (SELECT height FROM userTb1 WHERE addr = '경남');

정확히 ANY 다음의 하위쿼리 결과와 같은 값인 173, 170에 해당되는 사람만 출력되었다.

이는 다음과 같은 구문이다. 즉 =ANY(하위쿼리)는 IN(하위쿼리)와 같은 의미이다. 

SELECT name, height FROM userTb1 WHERE height IN (SELECT height FROM userTb1 WHERE addr = '경남');



(5) 원하는 순서대로 정렬하여 출력 : ORDER BY
ORDER BY 절은 결과물에 대해 영향을 미치지는 않지만 결과가 출력되는 순서를 조절하는 구문이다. 

먼저 가입한 순서로 회원들을 출력해 보자. 

SELECT name, mDate FROM userTb1 ORDER BY mDate;

기본적으로 오름차순(Assending)으로 정렬된다. 내림차순(DEscending)으로 정렬하려면 열 이름 뒤에 DESC라고 적어주면 된다. 

SELECT name, mDate FROM userTb1 WHERE ORDER BY mDate DESC;

이번에는 여러 개로 정렬해 보자. 키가 큰 순서로 정렬하되 만약 키가 같을 경우에 이름순으로 정렬하려면 다음과 같이 사용하면 된다. ASC(오름차순)는 디폴트 값이므로 생략 해도된다. 

SELECT name, height FROM userTb1 ORDER BY height DESC, name ASC;

ORDER BY에 나온 열이 SELECT 다음에 꼮 있을 필요는 없다. 즉 SELECT userID FROM userTb1 ORDER BY height와 같은 구문을 사용해도 된다. 

참고로 ORDER BY에 사용되는 열의 크기는 전체 8060byte 이하여야 한다. 앞의 예에서 height 열과 name 열을 합쳐서 8060byte 이하여야 한다(이 예에서는 겨우 22byte밖에 안된다) 또한 ntext, text, image, geography, gemmetry, xml 등의 형식에는 ORDER BY를 사용할수 없다. 

ORDER BY는 어렵지 않은 개념이므로 이 정도면 충분하다. ORDER BY는 WHERE 절과 같이 사용되어도 무방하다. 그리고 ORDER BY 절은 쿼리문의 제일 뒤에 와야 한다는 것을 잊지 말자. 

*ORDER BY 절은 SQL Server의 성능을 상당히 떨어뜨릴 소지가 있다. 꼮 필요한 경우가 아니라면 되도록 사용하지 않는 것이 좋다. 



(6) DISTINCT, TOP(N), TABLESAMPLE 절

회원 테이블에서 회원들의 거주지역이 몇 군데인지 출력해 보자. 

SELECT addr FROM userTb1;

10개 행밖에 안되는 데도 중복된 것을 세는 것이 어렵다. 조금 전에 배운 ORDER BY를 사용해보자. 
SELECT addr FROM userTb1 ORDER BY addr;

아까보다는 쉽지만 그래도 중복된 것을 골라서 세기가 좀 귀찮다. 또 몇만 건이라면 정렬이 되었어도 세는 것을 포기해야 할 것이다. 이때 사용하는 구문이 DISTINCT 구문이다. 

SELECT DISTINCT addr FROM userTb1;

중복된 것은 1개씩만 보여주면서 출력되었다. 

이번에는 AdventureWorks DB를 잠깐 사용해 보자. Sales.CreditCard 테이블에는 ExpYear(신용카드 유효년도)와 ExpMonth(신용카드 유효월)라는 열이 있는데, 그 중에서 유효기간이 얼마 남지않은 Vista 카드의 카드 번호 10개를 알고 싶다면 어떻게 해야 할까? 조금 전에 배운 ORDER BY절을 사용하면 된다. 

USE AdventureWorks;
SELECT CreditCardID FROM Sales.CreditCard WHERE CardType = 'Vista' ORDER BY ExpYear, ExpMonth;

앞의 결과에서 제일 앞의 10건만 사용하면 된다. 그런데 10건을 보려고 필요 없는 4,655건을 더 출력하였다. 어쩌면 이런 일이 별것 아니라고 생각할 수도 있겠지만 이러한 조회가 굉장히 자주 일어난다면 SQL Server에 많은 부하를 준다. 그래서 상위의 N 개만 출력하는 TOP(N) 구문을 사용하면 된다. 

SELECT TOP(10) CreditCardID FROM Sales.CreditCard WHERE CardType = "Vista" ORDER BY ExpYear, ExpMonth;


딱 원하는 개수만큼만 출력되었다. 이는 개수의 문제보다는 SQL Server의 부하를 많이 줄여주는 방법이기도 하다. 


※여기서 잠깐?
악성 쿼리문이란 서버의 처리량을 많이 사용해서 결국 서버의 전반적인 성능을 나쁘게 하는 쿼리문을 뜻한다. 비유를 하자면 많은 사람(쿼리문)이 표를 끊으려고(처리되기 위해)줄을 서 있는데, 어떤 사람(악성 쿼리문)이 게속 판매원에게 필요치 않은 질문을 던져서 뒤에 서 있는 다른 많은 사람이 표를 끊는데 시간이 오래 걸리는 것과 같은 이치다. 지금은 SQL 문의 문법을 배우는 과정이므로 결과만 나온다면 잘 된 것처럼 느껴지겠지만, 실무에서는 얼마나 효과적으로 결과를 얻느냐가 더욱 중요한 이슈가 된다. 잘못된 악성 쿼리를 자꾸 만들지 않게 더욱 신경을 써서 SQL 문을 만들 필요가 있다. 이는 9장의 인덱스를 배우면서 자세히 살펴보도록 하겠다. 


TOP 구문은 변수, 수식 및 하위쿼리도 사용할 수도 있다. TOP()에 하위 쿼리를 사용해 보자. 

SELECT TOP(SELECT COUNT(*) / 100 FROM Sales.CreditCard) CreditCardID FROM Sales.CreditCard WHERE CardType = 'Vista' ORDER BY ExpYear, ExpMonth;

COUNT(*)는 행의 개수를 반환하는 함수이며, 이것을 100으로 나눈 결과이다. 즉 전체의 100분에 1(1%)개수만 보겠다는 의미이다. 결과는 191개 행이 조회될 것이다.

다른 예를 들면, 전체 상위 건수의 0.1%만 출력하는 쿼리문을 생각해보자. 그럴 경우에는 TOP(N) PERCENT를 사용하면 된다. 

SELECT TOP(0.1) PERCENT CreditCardID, ExpYear, ExpMonth FROM Sales.CreditCard WHERE CardType = 'Vista' ORDER BY ExpYear, ExpMonth;

4,600여 건의 0.1%인 4.6건(반올림해서 5건)이 출력되었다. 그런데 2005년 1월이 만기일인 카드가 더 있다면 어떻게 해야 할까? 예를 들어 100명의 학생 중 상위 3%인 3명만 장학금을 주려 한다고 생각해보자. 그런데 점수의 분포가 100점 1명, 99점 1명, 98점 5명이라면 어떻게 장학금을 줘야할까? 이런 경우에는 3등 5명에서 모두 장학금을 지급하는 것이 공평할 것이다. TOP(N) PECENT 구문도 이런 경우를 위해서 마지막 출력 값과 같은 값이 있다면 N%가 넘더라도 출력하는 WITH TIES 옵션이 있다. 

SELECT TOP(0.1) PERCENT WITH TIES CreditCardID, ExpMonth, ExpYear FROM Sales.CreditCard WHERE CardType = 'Vista' ORDER BY ExpYear, ExpMonth;


마지막 값과 같은 값을 모두 출력해서 122건이 출력되었다. 

TOP절은 위쪽에 출력되는 개수를 제한하는 방식이지만, 전체에서 무작위로 일정한 샘플 데이터를 추출하고자 하는 경우에는 TABLESAMPLE 절을 사용할 수 있다. 그런데 TABLESAMPLE 절을 사용하는 경우에는 대량의 행이 있는 테이블에서는 제대로 실행되며, 소량의 행이 있는 테이블에서는 예상대로 실행되지 않는다. 그 이유는 샘플링의 기준을 행의 개수로 하는 것이 아니라, 페이지(page)를 기준으로 하기 때문이다. 또한, 그 결과의 개수는 정확한 값이 아닌 근사치로 샘플을 추출해 준다.


* 페이지(Page)는 SQL Server 안에서 행 데이터가 저장된 최소의 물리적 단위로 약 8kbyte 의 크기를 갖는다. 예를 들어 하나의 행 데이터 값이 길다면 한개 페이지에 몇 건이 들어가지 않겠지만, 행 데이터의 값이 짧다면 한 개 페이지에 여러 건이 들어갈수 있다. 즉 페이지마다 저장된 행 데이터의 개수는 조금씩 다를 수 있다. 

예를 들어 AdventureWorks의 Sales.SalesOrderDetail 테이블의 5%를 샘플링해서 추출하고 싶다면 다음과 같이 사용할수 있다. 

USSE AdventureWorks
SELECT * FROM Sales.SalesOrderDetail TABLESAMPLE(5 PERCENT);

Sales.SalesOrderDetail 테이블의 경우 대략 12만 건 정도되므로 그 5%인 6000건 내외를 샘플링해줄 것이다. 이 구문을 실행할 때마다 다른 데이터를 샘플링해주며, 개수도 달라진다. 만약 전체 데이터의 5%를 추출하되, 건수가 5,000건이 넘을 경우에는 최대 5,000건 까지만 출력하고 싶다면 TOP(N)과 같이 사용하면 된다. 

SELECT TOP(5000) * FROM Sales.SalesOrderDetatil TABLESAMPLE(5 PERCENT);



(8) OFFSET과 FETCH NEXT
SQL Server 2012의 새로운 기능인 OFFSET은 지정한 행의 수만큼 건너 뛴 후에 출력하는 기능을 한다. 

간단한 다음 예를 보자. 
USE sqlDB;
SELECT userID, name, birthYear FROM userTb1
ORDER BY birthYear
OFFSET 4 ROWS;

전체 회원은 10명인데 그 중에서 4명을 건너 뛰고 5번째 행부터 출력되었다. 이는 나이가 어린 6명을 출력하는데 사용할 수 있다. 주의할 점은 OFFSET을 사용하려면 ORDER BY 문이 함께 나와야 한다는 점이다. FETCH NEXT는 출력될 행의 수를 지정할 수 있다. 다음 예를 보자. 

SELECT userID, name, birthYear FROM userTb1 ORDER BY birthYear OFFSET 4 ROWS FETCH NEXT 3 ROWS ONLY;

앞의 예를 보면 어렵지 않게 용도를 이해했을 것이다. FETCH NEXT에 3을 지정하면 3행만 출력하게 된다. 지금은 데이터가 적어서 큰 효과가 없지만 대용량의 데이터에서 특정 열로 지정한 후 ,몇 번째 행부터 몇개 행 가져오기를 할때 유용하게 사용될 수 있다. 



(9) SELECT INTO

SELECT INTO 구문은 테이블을 복사해서 사용할 때 주로 사용된다. 

SELECT 복사할 열 INTO 새로운테이블 FROM 기존테이블

다음은 buyTb1을 buyTb2로 복사하는 구문이다. 
USE sqlDB;
SELECT * INTO buyTb12 FROM buyTb1;
SELECT * FROM buyTb12;

또한 지정한 일부 열만 복사할 수도 있다. 

SELECT userID, prodName INTO buyTb13 FROM buyTb1;
SELECT * FROM buyTb13;

그런데 buyTb1은 Primary Key 및 Foreign Key가 지정되어 있다. 그것들도 복사가 될까? SSMS의 개체 탐색기에서 확인해 보면 PK나 FK 등의 제약 조건은 복사되지 않는 것을 알 수 있다. 

* 개체 탐색기의 데이터베이스에서 sqlDB가 보이지 않으면 데이터베이스를 선택한 상태에서 마우스 오른쪽 버튼을 클릭하고 [새로 고침]을 선택한다. 전에도 이야기했지만 쿼리문으로 데이터베이스나 테이블을 생성할 때 개체 탐색기에는 바로 보이지 않을 수 있다. 그럴 때는 [새로 고침]을 해주면 된다. 

※ 207페이지 부터 작성시작