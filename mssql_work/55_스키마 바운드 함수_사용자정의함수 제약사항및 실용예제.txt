※ 그 외 함수와 관련된 알아둘 내용

(1) 스키마 바운드 함수
스키마 바운드 함수란 함수에서 참조하는 테이블, 뷰 등이 수정되지 못하게 설정한 함수를 말한다. 

* 뷰에도 거의 같은 개념으로 스키마 바운드 뷰가 있다. 


예를 들어 함수 A의 내용이 테이블 B, 뷰 C를 참조하고 있을 경우 테이블 B, 뷰 C가 삭제되거나 열 이름이 바뀐다면 함수 A의 실행에 문제가 발생할 것이다. 이것을 방지하는 것이 스키마 바운드 함수이다.  스키마 바운드 함수의 생성은 옵션에 WITH SCHEMA BINDING을 사용하면 된다. 

(2)테이블 변수
일반적인 변수의 선언처럼 테이블 변수도 선언해서 사용할수 있다. 테이블 변수의 용도는주로 임시 테이블의 용도와 비슷하게 사용될 수 있다. 잠시 후 실습에서 확인해 보자. 


(3) 사용자 정의 함수의 제약 사항
* 사용자 정의 함수 내부에 TRY...CATCH 문을 사용할 수 없다. 
* 사용자 정의 함수 내부에 CREATE/ALTER/DROP 문을 사용할 수 없다. 
* 오류가 발생하면 즉시 함수의 실행이 멈추고 값을 반환하지 않는다. 



실습7 : 스칼라 함수를 연습해 보고 스키마 바운드 함수 및 테이블 변수에 대해서 실습해 보자. 
0. 필요하다면 sqlDB를 새로 복원시키자.
USE tempdb;
RESTORE DATABASE sqlDB FROM DISK = 'C:\SQL\sqlDB2012.bak' WITH REPLACE;

1. 스칼라 함수를 정의하고 사용해 보자. 
1-1 buyTbl 을 참조하는 스칼라 함수를 생성하자. 현재 할인 행사 중이라고 가정하고 입력된 사용자의 총 구매한 가격에 따라서 차등된 할인율을 적용하는 함수이다.

USE sqlDB;
GO
CREATE FUNCTON ufn_discount(@id NVARCHAR(10)
	RETURNS BIGINT
AS
BEGIN
	DECLARE @totPrice BIGINT;

	--입력된 사용자 id의 총 구매액
	SELECT @totPrice = SUM(price * amount)
	FROM buyTbl WHERE userID = @id GROUP BY userID;

	--총 구매액에 따라서 차등된 할인율을 적용
	SET @totPrice = 
	CASE
		WHEN (totPrice >= 1500 ) THEN @totPrice * 0.7
		WHEN (totPrice >= 1000 ) THEN @totPrice * 0.8
		WHEN (totPrice >= 500 ) THEN @totPrice * 0.9
		ELSE @totPrice
	END;

	--구매 기록이 없으면 0원
	IF @totPrice IS NULL
		SET @totPrice = 0;

	RETURN @totPrice;
END

1-2 함수를 사용해 보자. 
SELECT userID, name, dbo.ufn_discount(userID) AS [할인된 총 구매액] FROM userTbl;


1-3 buyTbl의 price열의 이름을 cost로 변경해 보자. 
EXEC sp_rename 'buyTbl.price', 'cost', 'COLUMN';

주의는 나오지만 변경될 것이다. 

1-4 다시 함수를 실행해 보자. 
SELECT userID, name, dbo.ufn_discount(userID) AS [할인된 총 구매액] FROM userTbl;

오류 메시지 :
메시지 207, 수준 16, 상태 1, 줄 1
열 이름 price이(가) 잘못되었습니다. 

함수에서 참조된 열 이름(price)이 없으므로 당연히 오류가 발생한다. 

1-5 일단 열의 이름을 원래대로 돌려 놓자. 

EXEC sp_rename 'buyTbl.cost', 'price', 'COLUMN';


2. 앞의 문제를 방지하려면 스키마 바운드 함수로 변경해 보자. 

2-1 ALTER FUNCTION 명령으로 변경한다. 
ALTER FUNCTION ufn_discount(@id NVARCHAR(10))
	RETURNS BIGINT
WITH SCHEMABIDING
AS
BEGIN
	DECLARE @totPrice BIGINT;

	--입력된 사용자 id의 총 구매액
	SELECT @totPrice = SUM(price * amount)
	FROM buyTbl WHERE userID = @id GROUP BY userID;

	--총 구매액에 따라서 차등된 할인율을 적용
	SET @totPrice = 
	CASE
		WHEN (totPrice >= 1500 ) THEN @totPrice * 0.7
		WHEN (totPrice >= 1000 ) THEN @totPrice * 0.8
		WHEN (totPrice >= 500 ) THEN @totPrice * 0.9
		ELSE @totPrice
	END;

	--구매 기록이 없으면 0원
	IF @totPrice IS NULL
		SET @totPrice = 0;

	RETURN @totPrice;
END

오류 메시지 :
메시지 4512, 수준 16, 상태 3, 프로시저 ufn_discount, 줄 28
이름 buyTbl이(가) 스키마 바인딩에 적합하지 않으므로 함수 ufn_discount을(를)스키마 바인딩할 수 없습니다. 이름은 두 부분으로 구성되어야 하며 개체는 자체 참조할 수 없습니다. 


오류가 발생했다. 함수에서 사용하는 개체의 이름에 꼭 스키마 이름을 지정해야 한다. 즉 FROM buyTbl을 FROM dbo.buyTbl로 변경해야 한다. 
ALTER FUNCTION ufn_discount(@id NVARCHAR(10))
	RETURNS BIGINT
WITH SCHEMABIDING
AS
BEGIN
	DECLARE @totPrice BIGINT;

	--입력된 사용자 id의 총 구매액
	SELECT @totPrice = SUM(price * amount)
	FROM dbo.buyTbl WHERE userID = @id GROUP BY userID;

	--총 구매액에 따라서 차등된 할인율을 적용
	SET @totPrice = 
	CASE
		WHEN (totPrice >= 1500 ) THEN @totPrice * 0.7
		WHEN (totPrice >= 1000 ) THEN @totPrice * 0.8
		WHEN (totPrice >= 500 ) THEN @totPrice * 0.9
		ELSE @totPrice
	END;

	--구매 기록이 없으면 0원
	IF @totPrice IS NULL
		SET @totPrice = 0;

	RETURN @totPrice;
END

성공적으로 실행될 것이다. 


2-3 buyTbl의 열 이름을 변경해 보자. 

EXEC sp_rename 'buyTbl.price', 'cost', 'COLUMN';

오류 메시지:
메시지 1536, 수준 16, 상태 1, 프로시저 sp_rename, 줄 497
개체 buyTbl.price이(가) 강제적으로 종속성에 참여하고 있으므로 이름을 바꿀 수 없습니다. 


스키마 바운드 함수에서 참조하는 열은 변경할 수가 없다. 


3. <실습 1>의 6번에서도 사용해 보았지만 테이블 변수를 다시 한 번 연습해 보자. 

3-1 @tblVar 테이블 변수를 선언하고 값을 입력해 보자. 

DECLARE @tblVar TABLE (id char(8), name nvarchar(10), addr nchar(2);
INSERT INTO @tblVar SELECT userID, name, addr FROM userTbl WHERE birthYear >= 1970;
SELECT * FROM @tblVar;


3-2 같은 용도의 임시 테이블을 선언해서 사용해 보자. 

CREATE TABLE #tmpTbl
(id char(8), name nvarchar(10), addr nchar(2));
INSERT INTO #tmpTbl SELECT userID, name, addr FROM userTbl WHERE birthYear >= 1970;
SELECT * FROM #tmpTbl;

결과는 같게 나왔고, 사용 용도도 임시 테이블과 테이블 변수는 거의 같게 사용될 수 있다. 차이점이라면 테이블 변수는 메모리에 생성되는 것이므로 다른 변수와 마찬가지로 한 번 사용한 후에는 다시 사용될 수 없고, 임시 테이블은 tempdb에 생성되는 것이므로 연결이 끊기거나 SQL Server가 다시 시작되기 전까지는 계속 남아 있다. 




여기서 잠깐?
시스템의 성능을 위해서는 작은 데이터를 임시로 사용할 때는 테이블 변수가 유리할 수 있고, 대용량의 데이터를 임시로 사용할 때는 임시 테이블이 더 나을 수 있다. 이유는 임시 테이블은 일반 테이블이 갖는 모든 성격을 갖게 되므로, 대용량의 데이터의 경우 비클러스터형 인덱스를 생성할수 있으나, 테이블 변수에는 비클러스터형 인덱스를 생성할 수가 없다. 테이블 변수는 명시적인 트랜잭션(BEGIN TRAN... COMMIT/ROLLBACK TRAN)내부에 있더라도 영향을 받지 않는다. 다음의 예를 보면 이해될 것이다. 

DECLARE @tblVar TABLE (id INT);
BEGIN TRAN
	INSERT INTO @tblVar VALUES(1);
	INSERT INTO @tblVar VALUES(2);
ROLLBACK TRAN
SELECT * FROM @tblVar;

일반 테이블이나 임시 테이블의 경우라면 ROLLBACK을 시켰으므로 아무 값도 나오지 않겠지만 테이블 변수는 명시적 트랜잭션의 영향을 받지 않았다. 





이상으로 저장 프로시저와 함수에 대한 내용을 마치겠다. 지금 소개된 내용만 잘 기억해도 SQL Server에서 충분히 저장 프로시저 및 함수의 응용을 할 수 있을 것이다. 