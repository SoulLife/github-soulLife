CHAPTER 11 : 저장 프로시저와 사용자 정의 함수


Section 01 : 저장 프로시저
저장 프로시저(Stored Procedure)란 SQL Server에서 제공되는 프로그래밍 기능이라고 생각하면 된다. 이것은 일반적인 프로그래밍과는 조금 차이가 있지만 SQL Server내부에서 사용되는 아주 적절한 방식을 제공해준다. 


※ 저장 프로시저의 개요
저장 프로시저는 한마디로 쿼리문의 집합으로써, 어떠한 동작을 일괄 처리하는 용도로 사용된다. 자주 사용되는 일반적인 쿼리를 사용하는 것보다는, 이것을 모듈화시켜서 필요할 때마다 호출만 하면 훨씬 편리하게 SQL Server를 운영할 수 있다. 

* 저장 프로시저도 데이터베이스의 계체 중의 한가지다.즉 테이블처럼 각 데이터베이스 내부에 저장된다는 의미다. 


(1) 저장 프로시저의 정의 형식
저장 프로시저를 정의하려면 다음과 같은 형식을 사용한다. 

CREATE { PROC | PROCEDURE } [schema_name.] procedure_name [; number ]
	[ { @parameter [ type_schema_name. ] data_type }
		[VARYING ] [ = default ] [ OUT | OUTPUT ] [READONLY]
	] [ ,.. n ]
[ WITH <procedure_option> [ ,.. n] ]
[ FOR REPLICATION ]
AS { [ BEGIN ] sql_statement [; ] [ ...n] [ END ] }
[;]

앞의 형식중 <procedure_option>에는 암호화를 위한 ENCRYPTION, 재컴파일을 위한 RECOMPILE등이 올 수 있다. 

* SQL Server 2008부터 매개변수에 TABLE 데이터 형식을 사용할수 있다. 그럴 때는 꼭 READONLY를 붙여줘야 한다. 


상세한 내용은 실습을 통해서 계속 알아보고 지금은 간단한 저장 프로시저의 생성 예를 보자. 


USE sqlDB;
GO

CREATE PROCEDURE usp_users
AS
	SELECT * FROM userTbl; --저장 프로시저 내용
GO

EXEC usp_users;

기존에는 SELECT * FROM userTbl;을 매번 사용해 왔으나 이제부터는 EXEC usp_users라고 호출만 하면 된다 지금의 예에서는 저장 프로시저에 간단히 한 줄 짜리 쿼리만 포함했지만 실무에서는 이 한줄이 수백, 수천 줄이 될 수도 있다. 그렇게 아주 긴 프로시저라 하더라도 사용할 때는 마찬가지로 EXEC 프로시저_이름으로만 호출하면 된다. 



(2) 저장 프로시저의 수정과 삭제
저장 프로시저의 수정은 간단히 ALTER PROCEDURE를 사용하면 되고 삭제는 DROP PROCEDURE를 사용하면 된다. 



(3) 매개변수의 사용
저장 프로시저는 실행할 때 입력 매개변수를 지정할 수 있다. 입력된 매개 변수는 저장 프로시저의 내부에서 다양한 용도로 사용될수 있다. 또한 저장 프로시저에서 처리된 결과를 출력 매개변수를 통해서 얻을 수도 있다. 입력 매개 변수를 지정하는 형식은 다음과 같다. 

@입력_매개 변수_이름 데이터_형식 [ = 디폴트 값]

디폴트 값은 프로시저를 실행하면서 매개변수에 값을 전달하지 않았을 때 사용되는 값이다. 

입력 매개변수가 있는 저장프로시저를 실행하려면

EXECUTE 프로시저_이름 [전달 값]

으로 실행하면 된다(EXECUTE를 줄여서 EXEC라고 써도된다. )


출력 매개변수 를 지정하려면 다음의 형식을 따른다(OUTPUT을 OUT으로 줄여서 써도 된다)

@출력_매개 변수_이름 데이터_형식 OUTPUT

출력 매개 변수가 있는 저장 프로시저를 실행하려면

EXECUTE 프로시저_이름 @변수명 OUTPUT

으로 실행하면 된다. 실제 사용되는 것은 잠시 후의 실습에서 확인하겠다. 



(4) 프로그래밍 기능
7장의 후반부에서 공부한 SQL 프로그래밍의 내용이 대부분이 저장 프로시저에 적용될 수 있다. 그렇게 함으로써 더 강력하고 유연한 기능을 포함하는 저장 프로시저를 생성할 수 있다. 이도 잠시 후의 실습에서 확인하겠다. 


(5) 리턴 값을 이용한 저장 프로시저의 성공 및 실패 확인
RETURN 문을 사용해서 리턴 값을 받게 되면 실행한 저장 프로시저가 성공적으로 수행되었는지 또는 실패했는지를 확인할 수 있다. 


(6) 저장 프로시저 내의 오류 처리
저장 프로시저 내부에서 오류가 발생했을 경우에는 @@ERROR 함수를 이용해서 오류 처리를 할 수 있다. 또한 TRY/CATCH 문을 이용해서 더욱 효과적으로 오류 처리를 할 수 있다. 


(7) 임시 저장 프로시저
생성한 저장 프로시저는 현재의 데이터베이스 내에 저장된다. 그런데 만약 저장 프로시저 이름 앞에 # 또는 ##을 붙이게 되면 임시 저장 프로시저로 생성되며 이것은 현재의 데이터베이스가 아닌 tempdb에 저장된다(따라서 SQL Server 를 재시작하면 임시 저장 프로시저는 없어진다. 