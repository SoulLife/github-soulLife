※ 트랜잭션의 개념과 작동 방식
트랜잭션(Transaction)의 개념은 DBMS에서 아주 중요한 부분중 하나이므로 잘 이해할필요가 있다. 트랜잭션을 정의하면 하나의 논리적 작업 단위로 수행되는 일련의 작업이다. 단순히 이야기하면 SQL의 묶음이라고 할 수 있다. SQL의 묶음에는 SELECT / INSERT / UPDATE / DELETE가 주로 해당된다. 특히 트랜잭션은 데이터를 변경시키는 INSERT, UPDATE, DELETE의 묶음이라고 생각해도 된다. 


※여기서 잠깐?
트랜잭션이 발생되는 SQL은 ALTER TABLE, FETCH, REVOKE, CREATE, GRANT, SELECT, TRUNCATE, TABLE, DROP, OPEN등이 있지만 대개는 INSERT / UPDATE / DELETE가 트랜잭션을 발생시킨다고 생각해도 큰 무리가 없다. 



그런데 우리는  지금까지 이 트랜잭션 즉 SQL의 묶음을 한 문장씩만 사용해왔다. 다음의 예를 생각해보자. 

USE sqlDB;
GO
UPDATE userTbl SET addr= N'제주' WHERE userID = N'KBS' --김범수
UPDATE userTbl SET addr= N'미국' WHERE userID = N'KKH' --김경호
UPDATE userTbl SET addr= N'호주' WHERE userID = N'JYP' --조용필
GO

앞의 쿼리문에서 트랜잭션이 몇번 발생했을까? UPDATE가 연속 3개 나왔으므로 3개를 하나로 묶어서 트랜잭션이 1번 발생한 것처럼 보일 수 있으나 사실은 3번 발생했다. 각각의 UPDATE는 트랜잭션을 각각 하나씩 발생시킨다. SQL을 트랜잭션 단위로 묶으려면 다음과 같이 SQL을 묶어줘야 한다. 

BEGIN TRANSACTION(또는 BEGIN TRAN)
	SQL 문장들
COMMIT TRANSACTION(또는 COMMIT TRAN 또는 COMMIT WORK)
* COMMIT TRANSACTION 대신에 ROLLBACK TRANSACTION을 사용하게 되면 현재 트랜잭션들이 모두 취소된다. 즉 BEGIN TRAN ~~~ ROLLBACK TRAN사이의 모든 데이터의 수정이 취소된다. 몇몇 특별한 경우를 제외하고는 일부로 ROLLBACK TRAN을 사용할 일은 별로 없으므로 그냥 알아만 두자. 


요약하면 커밋(COMMIT)은 현재까지의 임시 작업 내용을 확정짓는 것이고, 롤백(ROLLBACK)은 현재까지의 임시 작업을 취소시키는 것으로 보면 된다. 

그런데 SQL Server는 자동 커밋 모드 방식을 디폴트로 사용한다. 즉 별도로 BEGIN TRANSACTION.... COMMIT TRANSACTION으로 묶지 않는다면 쿼리의 각 문장마다 BEGIN TRANSACTION ... COMMIT TRANSACTION을 자동으로 포함시켜 준다. 
결국 앞의 세 UPDATE 문장은 다음과 같다. 
BEGIN TRANSACTION
UPDATE userTbl SET addr= N'제주' WHERE userID = N'KBS' --김범수
COMMIT TRANSACTION
BEGIN TRAN
UPDATE useTbl SET addr= N'미국' WHERE userID = N'KKH' --김경호
COMMIT TRAN
BEGIN TRAN
UPDATE userTbl SET addr= N'호주' WHERE userID = N'JYP' --조용필
COMMIT WORK

그래서 여러 개의 SQL을 트랜잭션으로 묶으려면 직접 BEGIN TRANSACTION ... COMMIT TRANSACTION으로 묶어줘야 한다. 

따라서 앞의 트랜잭션 세 개를 트랜잭션 하나로 만들려면 다음과 같이 직접 BEGIN TRANSACTION ... COMMIT TRANSACTION을 사용해서 하나로 묶어주면 된다. 
BEGIN TRAN
UPDATE userTbl SET addr= N'제주' WHERE userID = N'KBS' --김범수
UPDATE userTbl SET addr= N'미국' WHERE userID = N'KKH' --김경호
UPDATE userTbl SET addr= N'호주' WHERE userID = N'JYP' --조용필
COMMIT TRAN

트랜잭션은 트랜잭션로그 파일(*.ldf)에 저장된다. 즉 앞의 세 문장은 차례대로 트랜잭션 로그 파일에 기록된 후에 데이터 파일의 변경이 일어난다. 


변경되는 순서를 잘 살펴보도록 하자. 간단한 예로 기존에 들어있던 1,2,3의 데이터를 11, 22, 33으로 변경하는 세 문장을 실행한다고 가정해 보자. 이 가정은 단순화한 것이므로 SQL 문법은 신경쓰지 말자. 

BEGIN TRAN
UPDATE 1 -> 11
UPDATE 2 -> 22
UPDATE 3 -> 33
COMMIT TRAN



(1) BEGIN TRAN 실행
처음에 BEGIN TRAN 문장을 실행하면 지금부터 트랜잭션을 시작하는 것으로 인식된다. 그리고 BEGIN TRAN 문장이 일련번호와 함께 트랜잭션 로그 파일의 처음이나 이전의 체크 포인트 이후에 바로 이어서 기록된다. 

(2) UPDATE 1 -> 11실행
1의 UPDATE 1 -> 11이 실행되면 먼저 2처럼 데이터파일에 실제로 있는 데이터 '1'이 데이터 캐시(Data Cache)라고 부르는 메모리로 로딩(Loading)된다. 그리고 메모리의 '1'값을 3처럼 11로 변경한다. 메모리의 데이터가 변경되었다면 실행된 트랜잭션 중 UPDATE 1 -> 11을 트랜잭션 로그 파일에 일련번호를 붙여서 4처럼 순차적으로 기록하게 된다. 여기서 주의 깊게 볼 점은 아직 COMMIT TRAN을 실행하지 않았으므로, 트랜잭션 로그 파일(*.ldf)에만 UPDATE 문이 기록되었을 뿐 데이터 파일(*.mdf)에는 아무런 변화가 없다는 것이다. 

* 설명을 쉽게 하려면 그림 상에는 한 페이지(8Kbyte)에 하나씩 데이터를 넣어 놓았지만 실제로는 대개 한 페이지에 여러 개의 행이 들어간다. 그리고 로딩되는 단위는 페이지 단위이므로 해당되는 데이터가 들어있는 한 페이지(8Kbyte)가 모두 로딩된다. 



(3) UPDATE 2 -> 22, UPDATE 3 -> 33 실행
앞의 과정과 같은 과정을 거친다. 실행이 완료된 상태는 [그림10-5]와 같다. 메모리의 데이터가 모두 변경되고 , 트랜잭션 로그 파일에도 기록되었지만 ,아직도 데이터 파일은 기존의 데이터가 그대로 있다. 

(4) COMMIT TRAN 실행
* SQL Server는 WAL(Write-Ahead Logging: 미리 쓰기 로그)을 사용한다. 미리 쓰기 로그 기능이란 트랜잭션 로그 파일에 먼저 기록되고 나서 데이터 파일에 수정이 일어나는 것을 의미한다. 이 미리 쓰기 로그 기능으로 인해서 데이터의 일관성(무결성)이 유지된다. 


트랜잭션 내의 모든 SQL이 실행된 후에, 마지막으로 1의 COMMIT TRAN문을 실행하게 되면, 우선 2처럼 COMMIT TRAN문장을 일련번호와 함께 트랜잭션 로그 파일에 기록한다. 그런데 COMMIT TRAN 문장은 트랜잭션의 처리를 완료했다는 의미이므로 3처럼 메모리의 변경된 데이터(11, 22, 33)를 차례로 데이터 파일(*.mdf)에 적용시킨다(이를 데이터를 커밋시켰다라고 표현한다)데이터 파일에 적용되는 약간의 시간 후에 4처럼 데이터 파일의 변경이 완료되면 5처럼 #5:COMMIT TRAN 바로 다음으로 체크포인트(CheckPoint)를 설정해 놓는다. 


※ 여기서 잠깐?
메모리(데이터 캐시)에는 변경되었지만 아직 데이터 파일에는 변경되지 않은 데이터(페이지)를 더티 페이지(Dirty Page)라고 부른다. 이 더티 페이지가 데이터 파일에 성공적으로 적용된 직후에, 체크포인트(Checkpoint, 자동검사점)가 표시된다. 이 체크포인트를 강제로 발생시키려면 CHECKPOINT 문을 실행시키면 된다. 이 문을 실행하면 더티 페이지의 데이터가 모두 데이터 파일에 적용되고, 체크포인트의 표시도 추가된다. 이 외에도 체크포인트가 발생하는 경우는 주로 다음과 같다. 

* ALTER DATABASE를 사용할 때
* 정상적으로 SQL Server를 종료한 경우
* 각 데이터베이스에서 체크포인트를 주기적으로 생성하는 경우
* 데이터베이스를 백업한 경우

앞의 [그림10-3]~[그림10-6]까지의 트랜잭션 처리 과정(1)~(4)가 바로 데이터의 무결성을 보장하는 처리 과정이다. 앞에서 이야기했지만 데이터의 무결성이란 전부 되거나 전부 안되거나 이다. 즉 하나의 트랜잭션이 전부 적용되거나 또는 전부 적용되지 않아야 지 일부만 적용된다면 데이터의 무결성을 보장할 수 없다. 

다음의 사례를 통해 트랜잭션 로그 파일이 어떻게 데이터의 무결성을 보장하는지 확인해보자. 