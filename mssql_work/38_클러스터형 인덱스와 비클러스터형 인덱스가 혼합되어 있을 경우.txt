※ 클러스터형 인덱스와 비클러스터형 인덱스가 혼합되어 있을 경우

지금까지는 테이블에 클러스터형 인덱스만 있거나, 비클러스터형 인덱스만 있는 경우를 살펴보았다. 하지만 현실적으로 하나의 테이블에 클러스터형과 비클러스터형의 인덱스가 혼합되어 있는 경우가 더 많다. 

인덱스가 하나씩만 있는 것보다는 두 형태의 인덱스가 혼합되어서 조금 어렵게 느껴질 것 같다. 그래도 차근차근 보면 그리 어려운 이야기는 아니다. 이번에는 실습을 통해서 이해해 보도록 하겠다. 


실습2 : 한 테이블에 클러스터형 인덱스와 비클러스터형 인덱스가 모두 있을 경우를 살펴보자. 


0. 이번에는 열이 3개인 테이블을 사용해 보겠다. userTbl 열에는 클러스터형 인덱스를, name 열에는 비클러스터형 인덱스를 생성해보겠다. 그리고 addr 열은 그냥 참조용으로 사용하자. 

USE tempdb;
CREATE TABLE mixedTbl
(
	userID		char(8) NOT NULL,
	name		nvarchar(10) NOT NULL,
	addr		nchar(2)
);
GO
INSERT INTO mixedTbl VALUES('LSG', '이승기', '서울');
INSERT INTO mixedTbl VALUES('KBS', '김범수', '경남');
INSERT INTO mixedTbl VALUES('KKH', '김경호', '전남');
INSERT INTO mixedTbl VALUES('JYP', '조용필', '경기');
INSERT INTO mixedTbl VALUES('SSK', '성시경', '서울');
INSERT INTO mixedTbl VALUES('LJB', '임재범', '서울');
INSERT INTO mixedTbl VALUES('YJS', '윤종신', '경남');
INSERT INTO mixedTbl VALUES('EJW', '은지원', '경북');
INSERT INTO mixedTbl VALUES('JKW', '조관우', '경기');
INSERT INTO mixedTbl VALUES('BBK', '바비킴', '서울');

만약 페이지당 4개의 행이 입력된다고 가정하면 이 데이터는 다음과 같이 구성되어 있을 것이다. 
			1000			1001			1002
			LSG 이승기 서울	SSK 성시경 서울	JKW 조관우 경기
			KBS 김범수 경남	LJB 임재범 서울	BBK 바비킴 서울
데이터 페이지	KKH 김경호 전남	YJS 윤종신 경남
(Head 영역)		JYP 조용필 경기	EJW 은지원 경북
[그림 9-21]인덱스가 없는 데이터 페이지


1. 이 테이블의 userID에 클러스터형 인덱스를 먼저 생성해 보자. Primary Key로 지정하고 별다른 이야기가 없으면 디폴트로 클러스터형 인덱스가 생성된다고 이야기했다. 

ALTER TABLE mixedTbl
ADD CONSTRAINT PK_mixedTbl_userID
PRIMARY KEY (userID);

지금쯤은 여러분도 다음 그림을 보지 않고 구성할 수있을 것이다. 
			1000			1001			1002
			BBK 바비킴 서울	KBS 김범수 경남	SSK 성시경 서울
			EJW 은지원 경북	KKH 김경호 전남	YJS 윤종신 경남
리프 페이지		JKW 조관우 경기	LJB 임재범 서울
데이터페이지	JYP 조용필 경기	LSG 이승기 서울
[그림 9-22]혼합형 인덱스 중에서 클러스터형 인덱스의 구성후


2. 이번에는 UNIQUE 제약 조건으로 비클러스터형 인덱스를 추가해 보자. 
ALTER TABLE mixedTbl
ADD CONSTRAINT UK_mixedTbl_name
UNIQUE (name);


3. 클러스터형 인덱스와 비클러스터형 인덱스가 생성되어 있는지 확인해보자.

EXEC sp_helpindex mixedTbl;


4. 그렇다면 두 인덱스가 혼합된 내부 구조를 예상해 보자. 여러분의 예상과는 조금 빗나가 있을 것이다. 


클러스터형 인덱스의 경우에는 그대로변함이 없다. 하지만 의외인 것이 비클러스터형 인덱스이다. 우선 비클러스터형 인덱스의 루트 페이지와 리프 페이지의 키 값(여기서는 name 열)이 이름으로 구성되었으므로 일단 이름으로 정렬되었다. 특히 관심이 가는것은 비클러스터형의 리프 페이지다. 클러스터형 인덱스 페이지가 없었다면 아마도 데이터 페이지의 번호 + #오프셋 으로 구성되어 있었을 것이지만, 지금은 클러스터형 인덱스의 키 값(여기서는 userID)을 가지게 된다. 또 한 가지 중요한 점은 비클러스터형 인덱스를 검색한 후에는 그림에 표현된 것처럼 모두가 다시 클러스터형 인덱스의 루트 페이지부터 검색한다는 점이다. 

예를 들어 보자. 임재범 이란 사람의 주소를 알고 싶다면 다음의 쿼리를 실행하면 된다. 

SELECT addr FROM mixedTbl WHERE name = '임재범';

* 클러스터형 인덱스가 있든, 비클러스터형 인덱스가 있든, 두 가지가 혼합되어 있든, 아니면 인덱스가 아예 없든지 쿼리문의 실행 결과에는 아무런 차이가 없다. 인덱스는 단지 빨리 검색시켜 주는 역할을 할 뿐 결과의 내용과는 상관이 없다. 혼동하지 말기 바란다. 

앞의 쿼리를 수행하면 다음의 순서로 검색하게 된다. 

1. (페이지 번호 10번 읽음)비클러스터형 인덱스의 루트 페이지에서 은지원보다 큰 값이므로 200번 페이지에 있다는 것 확인
2.(페이지 번호 200번 읽음) 임재범은 클러스터형 인덱스의 키 값 LJB임을 확인한 후 무조건 클러스터 인덱스의 루트 페이지로 가서 찾음
3. (페이지 번호 20번 읽음) LJB은 KBS보다 크고 SSK보다 작으므로 1001번 페이지에 있는 것 확인
4. (페이지 번호 1001번 읽음) LJB 값을 찾고 그 주소인 서울을 찾아냄


그런데 왜 이렇게 구성했을까? 비클러스터형 인덱스의 리프 페이지에 기존처럼 데이터페이지의 번호 + #오프셋으로 하면 더 검색이 빠르고 효율적이지 않을까? 그렇다. 클러스터형 인덱스와 비클러스터형 인덱스를 분리해서 서로 관련 없이 구성한다면 검색에서는 더 우수한 성능을 보일 것이다. 하지만 치명적인 단점 때문에 그렇게 구성되지 않는다. 만약 [그림9-24]에 MMI 멍멍이 서울 행이 추가된다고 생각해 보자. 클러스터형 인덱스는 페이지 분할 등의 작업이 발생할 것이다. 이는 기존의 방식과 같다 그리고 비클러스터형 인덱스에도 100번 페이지에만 멍멍이 MMI 가 추가되면서 데이터의 순서가 약간 변경될 뿐 그렇게 큰 변화가 발생하지는 않을 것이다. 

하지만 만약 비클러스터형 인덱스의 리프페이지가 데이터 페이지의 번호 + #오프셋 으로 되어 있었다고 가정해 보자. 우선 데이터의 삽입으로 클러스터형 인덱스의 리프 페이지(=데이터 페이지)가 재구성되어서 데이터 페이지의 번호 및 #오프셋이 대폭 변경된다. 그러면 단 한 건의 행 삽입으로 데이터 페이지(=클러스터형의 리프페이지)의 페이지 번호 및 오프셋이 대폭 변경되므로 비클러스터형 인덱스 역시 많은 부분이 다시 구성되어야만 한다. 엄청난 시스템의 부하를 발생시킬 소지가 있다. 

그래서 비클러스터형 인덱스와 클러스터형 인덱스가 하나의 테이블에 모두 있을 경우에는 [그림9-24]와 같이 구성되는 것이다. 그렇게 되면 이름(name)으로 검색할 때 비클러스터형을 검색한 후에 다시 클러스터형을 검색해야 하므로 약간의 손해를 볼 수도 있겠지만 데이터의 삽입 때문에 비클러스터형 인덱스를 대폭 재구성하게 되는 큰 부하는 걸리지 않는다. 그런 이유로 SQL Server에서는 [그림 9-24]와 같이 구성하는 것이다. 



※ 여기서 잠깐?
시스템 성능을 향상하려면 조금 더 고려해야 할 사항이 있다 [그림9-24]를 보면 클러스터형 인덱스의 키(KKH, KBS 등)를 비클러스터형 인덱스가 저장하는 것을 확인할 수 있다. 그러므로 클러스터형 인덱스를 지정할 열(여기서는 userID)의 자릿수가 크다면 비클러스터형에 저장되어야 할 양도 더불어서 많아지게 된다. 그러면 차지하는 공간이 자연이 커질 수밖에 없다. 결국 비클러스터형 인덱스와 혼합되어 사용되는 경우에는 클러스터형 인덱스로 설정할 열은 되도록이면 적은 자릿수의 열을 선택하는 것이 바람직하다. 



5. 직접 검색해 보도록 하자. 
5-1 SSMS 메뉴의 [쿼리] > [실제 실행 계획 포함]을 선택하거나, 키보드의 <Ctrl + M>키를 눌러서 결과 창에 실행 계획까지 포함시키게 하자. 
5-2 다음 쿼리를 실행하고 결과의 [실행 계획]탭을 클릭해서 확인해 보자. 
SELECT addr FROM mixedTbl WHERE name = '임재범';

결과를 보면 Index Seek(NonClusterd)가 보인다. 이는 비클러스터형 인덱스를 검색했다는 의미다. 즉 [그림9-24]의 10번과 200번 페이지를 읽었다는 뜻이다. Key Lookup(clustered)는 클러스터형 인덱스를 검색했다는 의미다. 즉[그림9-24]의 20번과 1001번 페이지를 읽었다는 뜻이다. 즉 이번 <실습>4번에서 설명한 순서를 따르는 것이다(각 플랜에 마우스를 가져가면 상세한 내용이 나온다. )



※ 여기서 잠깐?
잠깐 용어를 구분하고 넘어가자 
(1) Table Scan : 테이블 검색, 데이터 페이지를 처음부터 끝까지 찾아본다는 의미로, 인덱스가 없을 경우거나 인덱스가 있어도 그냥 테이블을 찾아 보는 것이 빠른 경우다. 

(2) Index Seek : 비클러스터형 인덱스에서 데이터를 찾아본다는 의미이다. 

(3) RID Lookup : 비클러스터형 인덱스에서 키를 검색한 후에, 실제 데이터 페이지(Heap)을 찾아 본다는 의미다. 

(4) Clustered Index Seek : 클러스터형 인덱스에서 데이터를 찾아본다는 의미이다. 

(5) Key Lookup : 비클러스터형 인덱스에서 키를 검색한 후에 클러스터형 인덱스에서 데이터를 찾아본다는 의미이다. 결국 Clustered Index Seek 와 작동 방식이 비슷하다. 

(6) Clustered Index Scan : Table Scan(테이블 검색)과 비슷한 개념으로 전체를 찾아본다는 의미다. 클러스터형 인덱스의 리프 페이지는 결국 데이터 페이지이기 때문이다. 



5-3 클러스터형 인덱스의 키로만 검색하는 것의 실행 계획을 살펴보자. 결과를 보기 전에 여러분이 예상해 보자.

SELECT * FROM mixedTbl WHERE userID = 'LJB';

앞의 쿼리는 [그림9-24]의 클러스터형 인덱스를 검색(Clustered Index Seek)해서 결과를 내는 것을 확인할 수 있다. 즉 20번과 1001번 페이지를 읽었다. 

5-4 이번에는 그냥 전체 데이터를 가져오는 것을 생각해 보자. 과연 인덱스를 사용할 필요가 있을까?
SELECT * FROM mixedTbl;

대충 흘려보면 앞과 같은 것으로 오해할 수도 있으나 자세히 보면 Seek이 아닌 Scan으로 되어 있다. 이 결과는 Table Scan(테이블 검색)과 비슷하다. 즉 클러스터형 인덱스를 Scan(Seek과 다르다)한다는 의미는 클러스터형 인덱스의 리프 페이지 전체를 검색한다는 의미이다. 결국 클러스터형 인덱스의 리프 페이지는 곧 데이터 페이지이므로 전체 페이지를 검색하게 되는 것이다. 이해되지 않으면 [그림 9-22]를 보자. 

만약 여기서 Cluster Index Seek을 하면 어떨까? 어차피 데이터 전체를 가져와야 하는데, 쓸데없이 클러스터 인덱스의 루트 페이지를 왔다갔다할 필요는 없으므로 그냥 전체 데이터를 검색(Clustered Index Scan 또는 Table Scan)하는 것이 더 효율적이다. 

여기서 한가지 더 짚고 넘어가자. 


인덱스를 검색하는 일차 조건은 WHERE 절에 해당 인덱스를 생성한 열의 이름이 나와야 한다는 것이다. 물론 WHERE 절에 해당 인덱스를 생성한 열 이름이 나와도 인덱스를 사용하지 않는 경우가 많다. 

이에 대한 실습은 인덱스 생성 구문을 익힌 후에 다시 해보도록 하겠다. 