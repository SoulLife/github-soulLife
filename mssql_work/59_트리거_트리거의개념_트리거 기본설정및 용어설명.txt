CHAPTER13 : 트리거


Section 01 : 트리거의 개념

※트리거의 개요

8장에서 데이터의 무결성을위한 제약 조건 (Primary Key, Foreign Key 등)을 공부했다. 트리거(Trigger)는 SQL Server에서 제약 조건과 더불어 데이터 무결성을 위해서 사용할 수있는 또 다른 기능이다. 트리거는 테이블 또는 뷰와 관련된어 DML 문(Insert, Update, Delete 등)의 이벤트가 발생될 때 작동하는 데이터베이스 개체 중 하나다. 


여기서 잠깐?
트리거는 테이블에 적용되는 DML 트리거, 서버나 데이터베이스 개체에 적용되는 DDL 트리거, 사용자가 로그온할 때 실행되는 LOGON 트리거로 나눌 수 있다. DML 트리거는 테이블 또는 뷰와 관련되어 DML 문의 이벤트가 발생될 때 작동하고, DDL 트리거는 서버나 데이터베이스에 DDL 문(Create, Drop, Alter 등)의 이벤트가 발생될 때 작동되며, LOGON 트리거는 사용자의 로그온 이벤트가 발생하면 작동된다. 

DDL(데이터 정의어)트리거는 SQL Server 2005부터 LOGON 트리거는 SQL Server 2008부터 지원된다. 또한 SQL Server2008부터는 변경 데이터 캡처(CDC: Change Data Capture)도 사용할 수 있는데, 이는 변경된 데이터를 추적할 수 있게 하여 데이터의 일관성을 유지할 수 있게 도와준다. 변경 데이터 캡처를 이용해서 기존의 DML 트리거에서 많이 활용된 변경된 데이터의 기록 관리를 새로운 변경 데이터 캡처 기능으로 더 간편하고 강력하게 구성할 수도 있다. DDL 트리거, LOGON 트리거, 변경 데이터 캡처에 대해서는 2권(관리와 응용)에서 살펴볼 것이다. 1권(기본편)에서 이야기하는 트리거는 모두 DML 트리거를 지칭하는 것이므로 혼동하지 말자. 



트리거(Trigger)는 테이블 또는 뷰에 부착(Attach)되는 프로그램 코드라고 생각하면 된다. 저장 프로시저와 거의 비슷한 문법으로 그 내용을 작성할 수 있다. 그리고 트리거가 부착된 테이블에 이벤트(입력, 수정, 삭제)가 발생하면 자동으로 부착된 트리거가 실행된다. 

트리거는 저장 프로시저와 작동이 비슷하지만 직접 실행시킬수는 없고 오직 해당 테이블이나 뷰에 이벤트가 발생할 경우에만 실행된다. 그리고 트리거에는 저장 프로시저와 달리 매개 변수를 지정하거나 반환값(=Return 값)을 사용할 수도 없다. 

우선 간단한 트리거를 보고 그 작동에 대해 이해해 보자. 아직은 문법이 이해가 가지 않을 것이다. 그냥 작동되는 결과만 확인해 보자. 


실습1 : 간단한 트리거를 생성하고 결과를 확인해 보자. 

0. tempdb에 간단한 테이블을 생성하자. 
USE tempdb;
CREATE TABLE testTbl (id INT, txt NVARCHAR(5));
GO
INSERT INTO testTbl VALUES(1, N'싸이');
INSERT INTO testTbl VALUES(2, N'빅뱅');
INSERT INTO testTbl VALUES(1, N'투피엠');

1. testTbl에 트리거를 부착하자. 
CREATE TRIGGER testTrg --트리거 이름
ON testTbl -- 트리거를 부착할 테이블
AFTER DELETE, UPDATE -- 삭제, 수정 후에 작동하게 지정
AS
	PRINT(N'트리거가 작동했습니다'); --트리거를 실행할 때 작동되는 코드들

2. 데이터를 삽입, 수정, 삭제해보자. 다음을 한 줄씩 선택해서 실행해 보자 

INSERT INTO testTbl VALUES(4, N'인피니트');
UPDATE testTbl SET txt = N'투에이엠' WHERE id = 3;
DELETE testTbl WHERE id = 4;

결과 값:
(1개 행이 영향을 받음)

트리거가 작동했습니다.
(1개 행이 영향을 받음)

트리거가 작동했습니다.
(1개 행이 영향을 받음)


트리거가 부착된 테이블에 insert가 수행되면 1개 행이 영향을 받음이라는 메시지만 나오지만 update 와 delete가 수행되자 자동으로 트리거에서 지정한 SQL문인 PRINT도 실행하는 것을 확인할 수 있다. 

이렇듯 트리거는 테이블에 장착해서 사용할 수 있다. 이 예제에서 간단히 정의된 PRINT 문만 정의했지만 그부분을 실제로 필요로 하는 복잡한 SQL 문들로 대치하면 유용한 트리거로 작동할 것이다. 



※ 트리거의 종류
트리거(정확히는 DML 트리거) 는 다음과 같이 구분할 수 있다. 

(1) AFTER 트리거
테이블에 INSERT, UPDATE, DELETE 등의 작업이 일어났을 때 작동하는 트리거를 말한다. 이름이 뜻하는 것처럼 해당 작업 후에(After)작동한다. AFTER 트리거는 테이블에 만 작동하며 뷰에는 작동하지 않는다 


(2) INSTEAD OF 트리거
AFTER 트리거는 테이블에 이벤트가 작동한 후에 실행되지만 INSTEAD OF 트리거는 이벤트가 발생하기 전에 작동하는 트리거이다.  INSTEAD OF 트리거는 테이블뿐 아니라 뷰에도 작동되며, 주로 뷰에 업데이트가 가능하게 할 때 사용된다. AFTER 트리거와 마찬가지로 INSERT, UPDATE, DELETE 세 가지 이벤트로 작동한다.

(3) CLR 트리거
CLR 트리거는 T-SQL 저장 프로시저 대신 .NET Framework에서 생성되는 트리거를 말한다.CLR 트리거는 이 책의 범주를 벗어나므로 별도로 다루지 않겠다. 자세한 사항은 SQL Server 2012도움말을 참조하자. 


※ 트리거의 사용
트리거를 정의하는 형식은 다음과 같다. 

CREATE TRIGGER 트리거이름
ON { 테이블이름 | 뷰이름 }
[ WITH ENCRYPTION ]
{ FOR | AFTER | INSTEAD OF }
{ [INSERT ] [ , ] [ UPDATE ] [ , ] [ DELETE ] }
AS
	실행할 SQL 문들

* WITH ENCRYPTION : 트리거의 내용을 암호화시켜서 추후에 내용을 확인할수 없게 한다. 


* FOR | AFTER | INSTEAD OF
AFTER를 지정하면 해당 테이블에 SQL(INSERT, UPDATE, DELETE)이 수행되고, 작업이 정상적으로 끝난 후에 트리거의 내용이 실행된다. AFTER는 테이블에 대해서만 지정할 수 있으며 뷰에 대해서는 지정할 수 없다. 

* INSTEAD OF는 테이블 및 뷰에 지정할 수 있지만 주로 뷰에서 많이 사용된다. INSTEAD OF를 지정할 경우 해당 테이블이나 뷰에 지정한 SQL(INSERT, UPDATE, DELETE)가 작동하면 시도된 SQL은 무시되고 트리거에 지정된 SQL 문이 대신 작동하게 된다. 

FOR는 AFTER와 같은 것으로 생각하면 된다. 

* INSERT | UPDATE | DELETE
트리거가 실행되는 이벤트를 지정한다. 하나 이상으로 조합해서 작동시킬 수 있다. 

변경은 ALTER TRIGGER를 사용하면 되며, 삭제는 DROP TRIGGER를 사용하면 된다. 설명이 조금 복잡해 보이지만 직접 실습으로 작동 방식을 확인해보면 쉽게 이해할수 있다. 