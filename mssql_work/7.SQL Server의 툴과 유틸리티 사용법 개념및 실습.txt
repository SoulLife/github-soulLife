CHAPTER 05 : SQL Server의 툴과 유틸리티 사용하기


Section01 : SQL Server Management Studio

SQL Server Management Studio(줄여서 SSMS)는 SQL Server 2005부터 제공되는 통합된 SQL Server의 클라이언트 툴이다. 지금까지 앞장에서도 이 SQL Server Management Studio을 사용해왔지만, 이번에는 이 SQL Server Management Studio의 자세한 사용법을 살펴보겠다. 

SQL Server Management Studio는 간단히 말하면 SQL Server 엔진에 접속하는 클라이언트 도구다. 가장 많이 사용되는 기능으로 개체 탐색기에서 서버를 관리하거나, 쿼리 창에서 SQL을 입력하고 실행하는 기능이 대표적이다. 


※ SQL Server Management Studio 의 실행
SQL Server 2012을 설치한 후에, 윈도의 [시작] > [모든 프로그램] > [Microsoft SQL Server 2012] > [SQL Server Management Studio]를 선택하면 다음과 같은 SQL Server 2012로고 화면이 나온다. 



※[서버에 연결] 창
SSMS를 실행하면 계속 처음에 나오게 될 창이 다음과 같은 [서버에 연결]창이다. 간단히 이야기하면 이 창에서 처음 접속될 서버와접속되는 인증 유형을 선택한 후에 접속을 시도한다. 즉 아무나 SQL Server 2012엔진에 접속할 수 없고 인증된 사용자만 접속된다는 의미다. 

1. 서버 유형
[서버에 연결]창에서 서버 유형의 드롭다운 리스트를 클릭하면 서버 유형으로 데이터베이스 엔진, Analysis Services, Reporting Services, Integration Services 등의 4가지 유형이 나타난다. 4가지 서버 유형을 간단히 소개하면 다음과 같다. 

유형			기능
데이터베이스 엔진		관계형 데이터베이스 엔진을 의미하며, SQL Server의 핵심이다. 
Analysis Services		SSAS(SQL Server Analysis Services)로 불리며, OLAP(On-Line Analytical Processing)과 데이터 마이닝을 지원하는 BI(Business 			Intelligence) 솔루션이다. 
Reporting Services		SSRS(SQL Server Reporting Service)로 불리며, 원래의 데이터에서 필요로 하는 데이터를 추출하여 보고서를 만드는 기능을 한다. 
Integration Services	SSIS(SQL Server Integration Service)로 불리며, 외부로 데이터를 내보내거나 외부의 데이터를 변환하는 과정을 수행한다. 


※ 여기서 잠깐
OLAP(On-Line Analytical Processing)이란 최종 사용자가 의사결정을 얻으려고 데이터베이스에 실시간으로 접근하여 대화식으로 정보를 추출/분석하는 것을 말한다. OLAP은 다차원 정보에 접근이 가능해야 하는데 다차원 정보란 지난 달에 비해서 이번 달의 실적은 어떠한가? 등 최종 사용자가 이해하는 실제적인 차원의 정보를 의미한다. 



1권(기본편)에서는 SQL Server의 가장 기본이며 핵심인 데이터베이스 엔진만을 다루게 될 것이며, 2권(관리와 응용)에서 나머지 유형에 대해서 일부 다루게 될것이다.



2. 서버 이름
SSMS를 통해서 접근하게 될 SQL Server의 이름을 입력 또는 선택하는 부분이다. 직접 SQL Server 엔진이 설치된 컴퓨터의 이름을 입력해도 되며, 해당 서버의 IP 주소를 알고 있을 경우에는 IP 주소를 입력해도 된다. 원격지의 컴퓨터에 접속하려면 IP 주소를 입력하는 것이 가장 확실한 접속 방법이다. 

또한, 이 부분에 (local)또는 localhost 또는 127.0.0.1 이라고 입력해 주면 현재 SSMS를 실행하는 컴퓨터에 데이터베이스 엔진이 설치된 것으로 간주하고 접속하게 된다. 여러분은 현재 SQL Server 엔진이 설치된 컴퓨터에서 직접 SSMS를 실행하게 될 것이므로, (local)또는 localhost 또는 127.0.0.1이라고 써줘도 무방하다. 

앞으로 접속할 때는 현재 컴퓨터 이름(필자는 HP-PC)을 선택한 후에 접속하면 된다. 그런데 서버 이름에 접속하고자 하는 서버가 보이지 않는다면 드롭다운 버튼을 클릭한 후, <더 찾아보기...>를 선택하여 다음 그림과 같은 창에서 [로컬 서버]탭에서 해당 서버를 선택하면 된다. 

만약 로컬 서버(현재 SSMS를 실행하는 컴퓨터)가 아닌 외부 서버라면 [네트워크 서버]탭을 클릭해서 해당 서버를 선택해 주면 된다. 조금 전에 이야기했지만 외부 컴퓨터에 접속하는 가장 확실한 방법은 IP 주소를 직접 입력해주는 방법이다. 

지금은 외부 컴퓨터에 SQL Server 2012가 설치되어 있어도 접속되지 않을 것이다. 아직 보안 설정 등을 위한 SQL Server 구성 관리자를 설정해주지 않았기 때문이다.




3. 인증
SQL Server 2012에 접속하는 인증방식을 선택하는 부분이다. 이 책에서는 설치할 때 Windows 인증으로 설치했다. 그러므로 디폴트인 Windows 인증 모드로 접속하면 된다. Windows 인증은 SQL Server가 설치된 컴퓨터에서만 SSMS를 사용하거나(대부분 독자의 경우)또는 Windows 도메인 환경으로 구성된 회사의 내부에서만 SQL Server에 접속 하는 환경이라고 생각하면 된다. 이렇게 되면 외부에서는 접근하는 것이 근본적으로 차단되므로 보안이 더욱 강화되는 효과를 갖는다. 마이크로소프트에서도 이 인증모드를 적극 권장한다. 

SQL Server 인증은 도메인 환경을 사용하지 않거나, 주로 인터넷을 사용하는 외부에서 SQL Server 2012에 접근하고자 하는 경우에 사용되는 환경이다. 단지 사용자 아이디와 비밀번호만으로 SQL Server 2012에 접속하는 것이므로 보안상 그리 바람직하지 않지만 실질적으로 현업에서는 아직도 이 모드가 사용되고 있다. 


※ 여기서 잠깐
외부 컴퓨터에서 SQL Server 2012에 SQL Server 인증으로 접속하는 방법은 16장에서 실습을 통해 살펴볼 것이다. 
참고로 SQL Server 인증으로 접속하는 기본 사용자로 sa라는 이름의 사용자가 있다(System Administrator의 약자다)이 사용자는 모든 권한을 가지는 관리자의 역할을 한다. 이 사용자의 비밀번호를 외부에 알려주는 것은 아주 위험한 행동이다. 꼭 별도의 사용자를 생성해 준 후에 필요한 권한만을 부여하고, 그 사용자를 외부에 알려줘야 한다. 보안과 관련된 상세한 내용은 2권(관리와 응용)에서 살펴보겠다. 




4. 사용자 및 비밀번호
현재 인증이 Windows 인증 모드로 되어 있으므로, 사용자는 윈도에 접속한 사용자의 이름이 기본으로 설정되어 있을 것이다. 만약 SQL Server 인증으로 변경한다면 다음 그림과 같이 별도로 허가된 로그인과 암호를 입력해야 한다. 이 책에서는 대부분 디폴트인 Windows 인증 모드로 접속하게 된다. 




5. 연결 속성
<옵션> 버튼을 클릭하면 [연결 속성]탭 및 [추가 연결 매개 변수]탭이 나타난다. 특별한 경우를 제외하고는 거의 사용할 일이 없는 부분이라서 특별히 신경 쓸 필요는 없다. 연결할 데이터베이스는 특별히 연결하고자 하는 데이터베이스를 지정하는 부분이며, 네트워크 프로토콜은 서버에 접속하는 네트워크를 별도로 지정할 수 있는 부분이다. [추가 연결 매개 변수]탭은 연결 문자열을 추가로 직접 입력할 수 있는 창이다(아마 쓸일이 거의 없을것이다)
이리저리 설정이 많이 나왔지만 특별히 다른 서버에 접속하고 싶지 않은이상 계속 사용하던 컴퓨터라면 그냥 Windows 인증 모드로 <연결> 버튼만 누르면 지금까지와 같이 잘 접속될 것이다. 




※ SQl Server Management Studio의 화면구성

1. 도킹 윈도우
처음 나타나는 SSMS의 화면은 [그림5-6]과 같을 것이다. 앞으로 이 구성으로 주로 사용하게 된다. SSMS는 사용자가 화면 구성을 유연하고 원하는 대로 구성할 수 있는 기능을 제공한다.
[그림5-6]에 표시된 [개체 탐색기]창을 마우스로 드래그하면, 화면이 [그림5-7]과 같이 바뀐다. 이때 중앙에 나타나는 십자가 모양 부분 중에서 원하는 부분(상/하/좌/우)에 가져다 놓으면 각 윈도의 배치가 새로 바뀌게 된다. 


2. 개체 탐색기
개체 탐색기(Object Explorer)는 SQL Server 개체들을 검색하고 관리하는 강력한 도구이다 앞으로도 이 개체 탐색기를 이용해 많은 일을 할 수 있고, SQL Server 명령문이나 SQL 구문을 전혀 모르더라도 이 개체 탐색기를 통해서 대부분의 일들을 수행할 수 있을 정도이다. 
개체 탐색기에서 할 수 있는 일을 간략하게 나열하면 다음과 같다. 

* 데이터베이스 및 데이터베이스 개체의 생성 및 관리
* 데이터베이스의 삭제 및 속성 변경
* 보안관리
* 권한 및 제한 사항을 조절
* 로그 전달/미러링/복제 등의 환경 조절
* 백업의 생성 및 복원 수행
* 정책 관리, 리소스 관리, 데이터 컬렉션
* SQL Server 로그 기록의 조회 및 관리
* SQL Server 에이전트의 관리

등이다. 이 외에도 더 많은 기능이 있다. 개체 탐색기는 앞으로 이 책을 학습하면서 가장 많이 사용하게 되는 SSMS의 도구 중의 하나이다. 
개체 탐색기는 트리 형태로 되어 있어서, 각각의 항목을 + 기호를 클릭해서 확장할 수 있다. 다음 그림은 AdventrueWorks 데이터베이스의 테이블에 장착된 트리거를 조회한 결과이다(트리거의 내용은 13장에서 다룬다) 계속 + 를 클릭해서 확장하다가 마지막에 더블클릭하면 해당되는 내용의 속성 창이 뜨거나 오른쪽에 쿼리 창으로 나타난다. 



실습1 : 개체 탐색기를 이용해서 SQL 문을 자동 생성해 보자. 

개체 탐색기는 모든 개체에 대해서 SQL 문을 자동으로 생성해주는 기능을 가지고 있다. 이 기닝을 잘 이용하면 개체 생성을 위한 SQL 구문을 파악하기가 쉽다. 

1. 테이블을 만드는 SQL 문을 자동 생성해 보자.

1-1 3장에서 생성한 ShopDB의 dbo.memberTbl 테이블을 선택한 후, 마우스 오른쪽 버튼을 클릭하고[테이블 스크립팅] > [CREATE] > [새 쿼리 편집기 창]을 선택하면 다음과 같이 새로운 쿼리 창에 방금 선택한 테이블을 생성하는 SQL 구문이 나올 것이다. (ShopDB가 없으면 AdventrueWorks의 아무 테이블이나 사용해도 된다.)

쿼리창을 자세히 보면 CREATE TABLE 테이블 이름 ~ 과 같은 SQL 문이보인다. 즉 우리가 3장에서 SSMS의 그래픽 창에서 생성했던 memberTbl을 SQL문으로는 이와 같이 사용하면 되는 것이다(테이블 생성 SQL 문은 8장에서 상세히 다룬다. 

1-2 CREATE 외에도 SELECT/INSERT/UPDATE 등의 구문을 생성할 수 있다. 직접 해보자. 

2. 다른 개체들도 마찬가지로 SQL 구문의 생성이 가능하다. ShopDB의 뷰에 대해서도 실습해 보자. 

3. 실습이 끝나면 열린 쿼리 창을 모두 닫는다. 

그 외에도 개체 탐색기에 포함된 내용은 워낙 많아서 따로 소개하지는 않고, 앞으로 필요할 때마다 계속 나오게될 테니 그때마다 필요한 기능을 파악하자. 
우선 기본적인 개체 탐색기의 공통적인 사용법은 해당하는 개체를 선택한 상태에서 마우스 오른쪽 버튼을 클릭하면 필요한 메뉴가 나타난다는 점만 잘 기억하자. 


3. 쿼리창
데이터베이스를 학습하는데 가장 먼저 배우게 되는 것은 SQL(Structured Query Language)문이다. 3장에서도 사용해 보았고,앞으로도 계속 개체 탐색기와 더불어서 쿼리 창을 계속 사용하게 될 것이다. 쿼리 창을 간단히 표현하면 쿼리 문장(SQL 구문)을 입력하고 실행하는 텍스트 에디터라고 표현할 수 있다. 
이미 어느 정도 사용에 익숙해졌곘지만 쿼리 창을 사용하는 차례를 정리하면 다음과 같다. 

1. 새 쿼리 아이콘을 클릭하거나, 개체 탐색기에서 인스턴스가 선택된 상태에서 마우스 오른쪽 버튼을 클릭하고 [새 쿼리]를 선택해서 쿼리 창을 연다. 

2. 작업할 데이터베이스를 선택한다. 

3. SQL 문을 입력한다. 

4. 구문 분석 아이콘을 사용해 SQL 문이 문법상 이상이 없는지 확인한다(생략 가능)

5. SQL 구문에 이상이 없다면 <!실행> 아이콘을 클릭하거나 F5키를 눌러서 SQL 문장을 실행한다. 

6. 결과 창을 통해서 결과를 확인하거나 오류가 발생했다면 메시지를 통해서 오류를 확인한다. 


※여기서 잠깐
이 책에서는 쿼리, 쿼리문, SQL, SQL 문, T-SQL, T-SQL 문, Transact-SQL 등은 대부분의 상황에서 같은 의미로 사용된다. 필자도 특별히 구분해야 하는 경우를 제외하고는 문맥에 맞게 필요한 단어를 사용하도록 하겠으니 혼동하지 말자. 


차례를 글로 써서 좀 어색해 보이는 것일 뿐, 몇 번 사용하다 보면 자연스럽게 사용하게 될 것이다. 

한번 쿼리 창을 연 후에는 계속 SQL 문을 입력해서 사용하면 된다. 



실습2 : 쿼리 창을 이용하는 방법을 연습해보자. 
3장에서도 일부는 이미 실습했지만 다시 한번 확실히 실습해 보자. 

0. 먼저 열려있는 쿼리 창을 모두 닫는다. 쿼리 창 제목오른쪽 <X>를 클릭하거나 SSMS 메뉴의 [파일] > [닫기]를 선택하면 된다. 저장하겠냐고 묻는 창이 나오면 <아니오> 버튼을 선택한다. 

0-1 왼쪽 개체 탐색기에서 기본 인스턴스(컴퓨터 이름)을 선택한 후에 <새 쿼리> 아이콘을 클릭해서 새로운 쿼리창을 하나 연다. 

1. 다음과 같은 SQL 문을 입력한 후에 <!실행> 아이콘을 눌러서 실행한다(F5단축키)

USE AdventureWorks;
GO
SELECT * FROM HumanResources.Employee;
GO

오타가 나지 않았다면, 잘 실행되어 결과를 확인할 수 있을 것이다.

*SQL Server에서 각 SQL 문의 끝에 세미콜론(;)은 써줘도되고, 대개는 생략해도 된다. 하지만 오라클과 같은 DBMS는 SQL 문의 끝에 반드시 세미콜론을 써줘야만 문장의 끝임을 인식한다. 
또한 GO 문장은 앞 문장과 뒷 문장을확실하게 구분해주는 역할을 한다. 경우에 따라서는 반드시 써야 하는 경우도 있지만, 지금의 경우에는 생략해도 관계없다. 



2. SQL Server 2008 부터는 몇 글자만 입력해도 관련된 글자를 미리 나타나는 IntelliSense 기능이 지원되어서 그 이전보다는 오타가 나는 경우가 많이 줄었다. 그런데 데이터베이스의 이름 및 테이블 이름이 자체가 아예 기억나지 않은 경우가 있을 것이다. 우선 쿼리를 모두 지운 후에 USE만 입력하고 한 칸을 띄운 후에 다음 그림과 이 AdventureWorks 데이터베이스를 마우스 왼쪽 버튼을 누른 상태에서 쿼리 창에 끌어다 놓으면 글자가 자동으로 완성된다. 

HumanResources.Employee 테이블도 마찬가지로 해본다. 이러한 자동완성을 사용하면 오타를 줄이면서 훨씬 빠르게 SQL 코딩이 가능하다. 


3. SQL Server 2012에서는 SSMS에 간단한 새로운 기능이 몇 개 추가되었다. 

3-1 클립보드 링 순환 기능이 추가되었다. 이 기능은 복사를 여러 개 해놓고 돌아가면서 붙여넣기를 하는 기능이다. 

1). 쿼리 창에 다음 3줄을 입력한다. 

USE tempDB;
USE master;
USE AdventureWorks;

2)첫줄을 드래그해서 선택한 후 Ctrl+C를 눌러 복사한다. 
3) 두번째 줄 및 세 번째 줄도 같은 방식으로 따로따로 복사한다. 
4) 아래 빈 곳에 아무곳에나 커서를 놓고 SSMS 메뉴에서 [편집] > [클립보드 링 순환]을 선택하면 마지막에 복사한 것이 붙여진다. 

5) 다시 SSMS 메뉴에서[편집] > [클립보드 링 순환]을 선택하면 그 이전에 복사한 줄이 붙여넣기가 된다. 이렇게 클립보드 링 순환을 선택하면 복사해 놓은 것들을 역순으로 계속 붙여넣는 효과를 낸다. 키보드로는 Ctrl + Shift + V를 눌러도 같은 효과를 낸다. 

3-2 쿼리 창을 확대/축소하는 기능이 추가되었다. 쿼리 창의 왼쪽 아래에서 해당 축척을 선택하거나, 직접 입력하면 된다. 

3-3 코드 조각 삽입 기능이 추가되었는데, 샘플 SQL 코드를 입력해 준다. SQL 문법이 기억나지 않을 경우에 사용하면 유용하다. 쿼리창에서 마우스 오른쪽 버튼을 클릭하고 [코드 조각 삽입]을 선택하면 코드의 분류가 나타난다. 다음 예는 코드 조각 중에서 Table > 테이블 만들기를 선택한 결과다. 

3-4 코드 감싸기 기능이 추가되었는데, 이는 선택한 구문을 Begin, End, If, While 등으로 묶어준다. 앞에서 나온 샘플코드를 마우스로 드래그해서 선택한 후, 마우스 오른쪽 버튼을 클릭하고 코드 감싸기를 선택하면 Begin, If, While 중에서 선택하는 문이 나올 것이다. 그 중 필요한 것을 선택하면 해당 코드가 선택한 코드로 감싸준다. 

4. 여러 SQL 문을 실행하는 방법을 확인해 보자. 앞에서 이미 이야기한 것도 있지만, 초보자가 실수하기 쉬우므로 다시 확인하겠다 

4-1 기존의 SQL 문은 모두 지운 후에 이번에는 테이블을 생성하는 간단한 구문을 입력한 후 <!실행> 아이콘을 클릭해서 실행해 보자. 

USE tempDB;
GO
CREATE TABLE test (id INT);
GO
명령이 완료되었습니다. 라는 정상적인 메시지가 나올 것이다. 

4-2 이번에는 앞에서 입력한 구문을 지우지 말고 그 아래에 INSERT 문을 추가한 후에 <!실행> 아이콘을 클릭해서 실행해 보자. 

USE tempDB;
GO
CREATE TABLE test (id INT);
GO
INSERT INTO test VALUES(1);
GO

다음과 같은 오류 메시지가 나올 것이다. 
데이터베이스에 test(이)라는 개체가 이미 있습니다. 

4-3 왜 이런 오류 메시지가 나올까? 우리가 기대하기는 앞에서 이미 실행했던 USE tempDB 구문과 CREATE TABLE test (id INT)구문은 생략되고 마지막에 입력한 INSERT INTO test VALUES(1)만 실행되기를 기대했지만, 쿼리 창은 다시 제일 첫 문장부터 실행해서 이런 결과가 나온 것이다. 
그러므로 첫 줄의 CREATE 구문을 다시 실행하게 되어 이미 생성한 test라는 테이블을 또 생성하려고 하니 오류가 난 것이다. 그리고 마지막에 실행된 INSERT 구문은 정상적으로 실행되어서 (1개 행이 영향을 받음) 메시지도 같이 나온 것이다. 

4-4 앞으로는 SQL 문을 사용할 때 쿼리 창에 써있는 모든 SQL을 실행할 것이 확실하지 않다면 실행할 부분만을 마우스로 드래그해서 선택한 후에 <!실행> 아이콘을 누르거나, F5키를 눌러야 한다. 



5. 결과를 표 형태 외에 텍스트 형태로도 표시할 수 있다. 어떤 경우에는 텍스트 형태가 더 편리한 경우도 있다. 

5-1 다음의 간단한 쿼리 문을 실행해 보자(이제는 당연히 실행할 SQL 문은 마우스로 드래그해서 선택한 후에 실행하는 것을 기억할 것이다.)

USE AdventureWorks;
GO
SELECT * FROM Production.Product;

결과는 표 형태로 보일 것이다. 

5-2 아이콘 중에 <텍스트로 결과 표시>아이콘을 클릭하거나, Ctrl+T 단축키를 누른다. 또는 SSMS 메뉴의[쿼리] > [결과 처리 방법] > [텍스트로 결과 표시]를 선택해도 된다. 

5-3 조금 전의 쿼리 문을 다시 실행한다. 결과가 다음 그림과 같이 텍스트 형태로 보일 것이다. 텍스트 형태를 사용해야 하는 경우는 결과를 드래그해서 복사하고 다른 곳에 사용하는 경우에 편리하게 사용될 수 있다. 

5-4 다시 표 형태로 결과를 보려면 바로 오른쪽 아이콘인 <표 형태로 결과 표시> 아이콘을 클릭하거나, Ctrl+D 단축키를 누르면 된다. 또는 SSMS 메뉴의 [쿼리] > [결과 처리 방법] > [표 형태로 결과 표시]를 선택해도 된다. 


6. 이번에는 쿼리 결과를 텍스트 파일 또는 엑셀 파일로 저장해 보자. 

6-1 <표 형태로 결과 표시> 아이콘을 클릭한 후, 다시 한번 같은 쿼리 문을 실행한다. 

6-2 아래쪽 결과에서 마우스오른쪽 버튼을 클릭하고 [모두 선택]을 선택한 후에, 다시 마우스 오른쪽 버튼을 클릭하고 [복사(머릿글 포함)]를 선택한다. 

6-3 메모장(notepad.exe)를 실행한 후, 메모장 메뉴의 [편집] > [붙여넣기]를 선택하면 쿼리 결과가 모두 들어온다. 

첫줄은 제목 줄(컬럼 이름)도 되어 있다. 줄이 안 맞는 것처럼 보이는 것은 탭(Tab)문자로 구분되어 있기 때문이다. 

6-4 다시 SSMS의 표 형태의 결과에서 마우스 오른쪽 버튼을 클릭하고 [다른 이름으로 결과 저장]을 선택한다. 저장 창이 나오면 파일 형식을 CSV(쉼표로 구분) (*.csv)로 선택하고, 파일 이름 및 저장 장소는 적절히 입력한 후 <저장> 버튼을 클릭해서 저장한다. 

* CSV 파일은 콤마(,)로 셀이 구분되는 형식의 파일로 엑셀 등에서 쉽게 읽을 수 있다. 또한 메모장에서도 읽을 수 있다. 

6-5 마이크로소프트 엑셀을 실행해서 엑셀 메뉴의 [파일] > [열기]를 실행한다.[열기]창의 파일 형식을 텍스트 파일(*.prn, *.txt, *.csv)을 선택한 후에, 방금 저장한 csv 파일을 선택하고 <열기> 버튼을 클릭한다. 

* 엑셀이 설치되어 있지 않은 독자는 무료 오피스 프로그램인 오픈 오피스(http://www.openoffice.co.kr)를 내려 받아서 설치한 후 실습해도 된다. 오픈 오피스는 마이크로소프트 오피스 파일(엑셀, 워드, 파워포인트)를 모두 읽고 쓸 수 있으며, HWP 파일 읽기, PDF 저장 기능등을 무료로 제공해주는 오픈 소스 프로그램이다. 

6-6 엑셀의 텍스트 마법사가 실행되면, 구분 기호로 분리됨 이 선택된 상태에서 >다음> 버튼을 클릭한다. 

6-7 구분 기호는 쉼표를 선택하고 <다음> 버튼을 클릭한다. 

6-8 3단계 화면에서는 <마침> 버튼을 클릭한다(경우에 따라서는 이 화면에서 데이터 서식을 상세히 설정해야 하는 경우도 있다)

6-9 이제는 엑셀에서 읽어 들인 결과를 확인할 수 있다. 필요하다면 엑셀 파일로 저장한다(지금은 그냥 저장하지 않고 닫아도 된다.)



7. 이번에는 실행되는 SQL 문이 어떻게 실행되는지 실행 계획을 표시해 보자. 

* 실행 계획은 SQL 문장이 SQL Server 내부적으로 어떻게 작동하는지를 확인하기 위한 것이다. 지금은 별로 사용되지 않겠지만 9장 인덱스 부분에서 자주 사용하게 될 것이므로 지금은 사용법만 익혀두자.

7-1 아이콘 중에 <실제 실행 계획 포함>을 클릭하거나 Ctrl + M 단축키를 누른다. 또는 메뉴의[쿼리] > [실제 실행 계획 포함]을 선택해도 된다. 

7-2 다시 조금 전의 SQL 문인 SELECT * FROM Production.Product를 드래그해서 실행 한다. 

7-3 조금 전보다 약간 더 시간이 걸릴 것이다. 결과 중에 [실행 계획]탭을 클릭하면 다음 그림과 같이 실행된 SQL이 어떻게 실행되었는지를 나타내 준다.

7-4 결과의 그림에 마우스를 올려 놓으면 다음과 같이 상세한 내용이 풍선 도움말로 나온다. 이러한 내용은 데이터베이스 튜닝에 필요한 내용들인데 나중에 좀 더 살펴볼 기회가 있을 것이다. 


8 쿼리 결과의 통계를 확인해 보자. 
8-1 <클라이언트 통계 포함> 아이콘을 클릭하거나 메뉴의 [쿼리] > [클라이언트 통계 포함]을 선택한다. 

8-2 조금 전 SQL 문인 SELECT * FROM Production.Product를 드래그해서 다시 실행 한다. 

8-3 결과 창의 [클라이언트 통계]탭을 클릭하면 실행했던 쿼리의 각종 통계가 나온다. 역시 나중에 좀 더 살펴볼 기회가 있을 것이다. 





4. 디버깅 기능
SQL Server 2012에는 Visual Studio와 비슷하게 쿼리에대한 디버깅 기능이 포함되어 있다. 이 디버깅 기능을 통해서 저장 프로시저, 커서, 트리거 등의 프로그램의 문제점 파악이 더욱 용이해졌다(저장 프로시저, 커서, 트리거는 11, 12, 13장에서 학습할 것이다) 간단한 실습을 통해서 확인해보자. 




실습 3 : SQL Server  2012의 디버깅 기능을 사용해 보자. 
0. 먼저 기존 쿼리 창이 열려 있으면 모두 닫는다. 저장하겠냐고 묻는 창이 나오면 <아니오> 버튼을 선택한다. 

0-1 좌측 상단의 <새 쿼리> 아이콘을 클릭해서 새로운 쿼리 창을 하나 연다.

0-2 다음의 저장 프로시저를 입력만 하고, 실행하지 않는다. 저장 프로시저는 11장에서 배울 것이며, 지금은 디버깅 기능만 확인하려고 간단히 100과 200을 더해서 결과를 출력해주는 간단한 저장 프로시저를 사용하는 것이다. 

USE tempDB;
GO
CREATE PROCEDURE usp_test
AS
	DECLARE @var1 INT
	DECLARE @var2 INT
	SET @var1 = 100
	SET @var2 = 200
	PRINT @val1 + @var2
GO

EXEC usp_test;


1. 디버깅을 시작해 보자.
1-1<▶ 디버그>아이콘을 클릭하거나 SSMS 메뉴의 [디버그] > [디버깅 시작]을 선택해서 디버깅을 시작한다. 

1-2 화면이 디버깅 모드로 전환되고 쿼리의 첫 행의 왼쪽에 노란색 화살표가 표시된다. 이는 현재 첫번째 행을 실행하고 있는 중이라는 의미이다. 

1-3 SSMS 메뉴의 [디버그] > [한 단계씩 코드 실행]을 선택하거나, F11키를 눌러 한단계씩 실행한다. 

1-4 가장 아래의 EXEC usp_test로 화살표가 내려갔을 때 다시 F11키를 누른다. 

1-5 이제는 저장 프로시저 안으로 화살표가 들어간다. 다시 F11 키를 눌러 다음처럼 되게 한다. 
앞의 그림을 보면현재 SET @var1 = 100은 이미 실행되었기에 아래쪽의 @var1 변수에 100이 들어있는 것이 확인되고, SET @var2 = 200은 아직 실행 전이기에(커서가 있는 부분은 실행 바로 직전이다)아래쪽의 @var2 변수에는 아직 아무것도 들어있지 않은 것이다. 

1-6 이와 같이 변수의 값을 디버깅을 통해서 추적할 수있다. 물론 지금은 아주 간단한 구문이므로 이러한 디버깅 기능을 사용할 필요가 별로 없지만 복잡하고 긴 줄의 SQL 프로그래밍의 경우에는 프로그램상의 논리적 오류를 이와 같은 방법으로 추적할 수 있다. 

1-7 F11키를 두번 더 누르면 쿼리의 끝까지 디버깅이 완료되고 다음과 같이 결과 메시지가 출력된다. 





Section 02 : 프로파일러
프로파일러(Profiler)는 SQL Server의 최적화를 위해서 사용되는 유용한 도구로 SQL Server 2005부터 그 기능이 많이 향상되었다. 프로파일러의 주요한 용도는 SQL Server에서 발생하는 각종 이벤트를 추적하고 수집함으로써 현재 어떤 SQL 문이 서버의 성능을 떨어뜨리는지 쉽게 확인할수 있게 해주므로 문제 해결에 큰 도움을 준다. 이 책에서도 중간 중간 프로파일러를 사용하게 될 것이므로, 지금은 간단한 사용법을 익혀보자. 


실습4 : 프로파일러의 기본적인 사용법을 익혀본다. 

0. SSMS에서 기존의 쿼리 창을 모두 닫고, 새 쿼리 창을 하나 연다. 

1. 프로파일러를 우선 실행해 보자. 
1-1 SSMS 메뉴의 [도구] > [SQL Server Profiler]를 실행한다 
1-2 [서버에 연결]창이 나오면 서버 이름은 컴퓨터 이름(기본 인스턴스), 인증은 Windows 인증으로 설정되어 있는지 확인하고 <연결> 버튼을 클릭한다. 
1-3 다음 그림과 같이 [추적 속성]을 설정하는 창이 나온다 [일반]탭에서 추적 이름을 적당히 넣어주고, 템플릿 사용에서는 그냥 디폴트인 Standard(기본값)를 선택한다. (아직 <실행>버튼을 클릭하지 말자. 

1-4 [이벤트 선택]탭을 클릭하면 원하는 이벤트를 추가하거나 제외시킬 수 있다. 나중에 필요할 경우에는 여기서 보고자 하는 이벤트만을 골라내면 된다. 또한 <열 필터>버튼은 필터링을 통해서 원하는 범위의 이벤트 값만을 조회할수 있게 해주며 <열 구성> 버튼은 출력되는 열의 순서를 조절할 수 있게 해준다. 일단은 그대로 두고 <실행> 버튼을 클릭하자. 

1-5 SQL Server 프로파일러가 다음과 같이 실행된다. 


2. 쿼리 창에서 다음의 쿼리를 수행해 본다. 그리고 SQL Server profiler를 다시 확인해 보자. 

USE AdventureWorks;
GO
SELECT TOP 10 * FROM Person.Address;

간단한 문장을 조회했는 데도, 추적 이벤트는 많은 것이 발생했다. 이 중에서 앞으로 주의 깊게 보게 될 것은 다음 5가지 항목이다. 

* CPU : 이벤트에서 사용한 CPU 시간(밀리초)
* Reads : 이벤트 대신 서버에서 수행한 논리적 디스크 읽기 수
* Writes : 이벤트 대신 서버에서 수행한 물리적 디스크 쓰기 수
* Duration : 이벤트에서 사용한 시간
* SPID : 실행하는 프로세스의 ID

3. 너무 많아 복잡해 보이므로, 좀 더 간단한 템플릿을 사용해 보자. 
3-1 SQL Server Profiler 메뉴에서[파일] > [닫기]를 선택해서 기존 추적을 닫는다. 추적이 실행 중이라는 메시지가 나와도 무시하고 <예> 버튼을 클릭한다. 

3-2 메뉴의[파일] > [새 추적]을 선택하고 [서버에 연결]창이 나오면 마찬가지로 기본 인스턴스에 연결한다. 

3-3 추적 이름을 추적연습2 라고 주고 템플릿 사용을 TSQL_Duration을 선택한 후 <실행> 버튼을 눌러서 실행한다. 

4. 쿼리 창에서 다음의 SQL 문을 실행한다. 
USE AdventureWorks;
GO
SELECT * FROM production.Product;
GO
SELECT * FROM Production.ProductCostHistory;
GO
SELECT * FROM Sales.Customer;
GO
프로파일러를 살펴보자. 

3개의 SELECT 문장 중에서 세 번째인 SELECT * FROM Sales.Customer가 Duration이 가장 오래 걸렸다. 이는 대개 조회할 데이터가 많거나, 그렇지 않으면 SQL 문장에 문제가 있어서 그럴 확률이 높다. 실습 예에서는 314밀리초라서 별것이 아니라고 생각할수도 있지만, 이 쿼리 문장을 수백 명의 사용자가 매 10초에 1번씩 실행하는 문장이라고 생각하면 아주 심각한 상황이 발생할 수도 있다. 

*각자의 컴퓨터의 성능과 환경에 따라서 Duration은 다르게 나올 것이다. 하지만 Duration이 오래 걸리는 순서는 필자와 같을 것이다. 

그러므로 이렇게 비정상적으로 오래걸리는 SQL 문은 의심하고, 튜닝할 필요가 있는것이다( 지금 사용한 SQL 문은 당연히 모두 이상이 없다)

5. 또한 추적을 멈추거나 일시 중지할 수도 있다. 
SQL Server Profiler 메뉴의 [파일] > [추적 중지] 또는 [추적 일시 중지]를 선택하면 된다. 추적을 중지하게 되면 추후에 다시 추적을 시작했을 때 기존의 추적 기록은 모두 날라간다. 추적 일시 중지는 말 그대로 추적을 일시 중지한 후에 다시 추적하면 이어서 계속 추적을 하게 된다. 

6. 지금까지 추적한 기록을 저장할 수도 있다. 메뉴의 [파일] > [저장]을 선택하면 *.TRC 파일로 저장된다. 이렇게 저장한 내용을 나중에 메뉴의 [파일] > [열기]로 다시 열어서 확인할 수도 있다. 

7. 프로파일러를 종료한다. 

이 정도로 SQL Server 2012의 툴 및 유틸리티의 사용법을 마치고자 한다. 물론 SQL Server 2012의 방대한 기능을 모두 살펴볼 수는 없으므로 1권에서 사용되는 필수적인 것들만을 위주로 살펴보았다. 또한 계속 툴들의 기능만 나열한다면 효과적이지 않을 것이다. 앞으로 다른 내용들을 계속 진행하면서 더 필요한 툴이나 유틸리티의 사용법은 그때마다 살펴보는 것이 더 학습에 효과적일 것이다. 