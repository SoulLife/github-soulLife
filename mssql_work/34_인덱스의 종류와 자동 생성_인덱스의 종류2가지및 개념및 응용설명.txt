Section02 : 인덱스의 종류와 자동 생성

※ 인덱스의 종류
SQL Server에서 사용되는 인덱스의 종류는 크게 두 가지로 나뉘는데, 클러스터형 인덱스(Clustered Index)와 비 클러스터형 인덱스(Nonclustered Index)다. 이 두개를 비유하면 클러스터형 인덱스는 영어 사전과 같은 책이고, 비클러스터형 인덱스는 그냥 책 뒤에 찾아보기가 있는 일반 책과 같다. 

비클러스터형 인덱스는 앞에서 설명했던 데이터베이스 이론 책과 같이 찾아 보기가 별도로 있고 찾아 보기를 찾은 후에 그 옆에 표기된 페이지로 가야 실제 찾는 내용이 있는 것을 말한다. 클러스터형 인덱스는 영어 사전처럼, 책의 내용 자체가 순서대로 정렬이 되어 있어서 인덱스 자체가 책의 내용과 같은 것을 말한다. 더 상세한 내용은 잠시 후에 다시 이야기하겠지만, 지금은 우선 다음의 내용 하나만 기억해 두자. 지금은 잘 이해되지 않아도 계속 진행하면 당연한 이야기가 될 것이다. 

클러스터형 인덱스는 테이블당 한 개만 생성할 수 있고, 비클러스터형 인덱스는 테이블당 여러 개 생성할 수 있다. 또, 클러스터형 인덱스는 행 데이터를 인덱스로 지정한 열에 맞춰서 자동 정렬한다. 


※ 여기서잠깐?
튜닝이란 SQL 서버가 전보다 더욱 좋은 성능을 내게하는 전반적인 방법을 말한다(자동차의 성능을 높이는 자동차의 튜닝과 개념이 비슷하다.) 튜닝은 크게 두 가지 관점으로 볼 수 있다. 

하나는 응답 시간(Response Time)을 빨리 하는 것이다. 즉 A라는 사용자가 쿼리문을 실행하면 얼마나 빨리 결과를 얻는가가 관점이 되는 것이다. 이것은 사용자의 입장에서는 아주 효과적인 것처럼 보일 수 있지만 잘 생각해 봐야 한다. A 사용자는 기존에 1분 걸리던 것을 10초만에 얻게 되어서 아주 효과적으로 보일 수도 있고 마치 튜닝이 잘된것처럼 보여질 수는 있지만, 서버의 입장에서는 기존에는 1만큼의 작업만 하던 것을 100의 작업을 해야 하는 경우도 발생할 수 있다. 이런 경우에는 한 명의 사용자에게는 결과가 빨리 나오겠지만 전체적인 시스템의 성능은 오히려 현격히 나빠질 수도 있다. 

또 다른 하나는 서버의 부하량을 최소화하는 것이다. 즉 한명 한명 사용자의 응답 시간보다는 서버가 처리하는 총 작업량을 줄임으로써 시스템의 전반적인 성능을 향상시켜 서버가 더 많은 일을 할 수 있게 하는 것이다. 

물론 사용자의 응답 속도가 빠르다는 것은 서버에서 조금만 처리하게 해서 빨라지는 경우도 많이 있지만 그렇지 않은 경우도 종종 있으므로 주의해야 한다. 



※ 자동으로 생성되는 인덱스
앞에서 이야기한 인덱스의 개념과 장단점을 이해했다면 이제는 본격적으로 테이블에 적용되는 인덱스를 생각해 보자. 인덱스는 우선 테이블의 열(컬럼)단위에 생성된다. 

하나의 열에 인덱스를 생성할 수도 있고, 여러 열에 하나의 인덱스를 생성할 수도 있다. 우선은 하나의 열당 기본적으로 하나의 인덱스를 생성할 수있다고 생각해보자. 

sqlDB의 userTbl을 가지고 인덱스를 생각해 보자. 

회원 테이블(userTbl)
아이디	이름		생년		지역		국번		전화번호		키	가입일
LSG		이승기	1987		서울		011		1111111		182	2008.8.8
KBS		김범수	1979		경남		011		2222222		173	2012.4.4
KKH		김경호	1971		전남		019		3333333		177	2007.7.7
JYP		조용필	1950		경기		011		4444444		166	2009.4.4
SSK		성시경	1979		서울							186	2013.12.12
LJB		임재범	1963		서울		016		6666666		182	2009.9.9
YJS		윤종신	1969		경남							170	2005.5.5
EJW		은지원	1978		경북		011		8888888		174	2014.3.3
JKW		조관우	1965		경기		018		9999999		172	2010.10.10
BBK		바비킴	1973		서울		010		0000000		176	2013.5.5
PK열


열 하나당 인덱스 하나를 생성하면, 이 테이블에는 우선 8개의 서로 다른 인덱스를 생성할 수 있다. 

이 테이블을 정의할 때는 다음과 같이 SQL 문을 사용했다(기억나지 않으면 6장을 참조하자)

CREATE TABLE userTbl
(
	userID char(8) NOT NULL PRIMARY KEY,
	name nvarchar(10) NOT NULL,
	birthYear int NOT NULL,
	...

userTbl을 정의할 때 userID를 Primary Key로 정의했다. 이렇게 Primary Key로 지정하면 자동으로 userID 열에 클러스터형 인덱스가 생성된다. 

필자가 조금 전에 외우라고 했던 클러스터형 인덱스는 테이블당 한 개만 생성이라는 내용을 떠올려 보자. 그런데 Primary Key는 테이블당 몇 개가 생성이 가능한가? 당연히 기본 키(Primary key)는 테이블당 하나만 생성 가능하다. 그러므로 기본 키(1개만 가능)가 지정된 열에 클러스터형 인덱스(1개만 가능)가 생성되는 것은 자연스러운 일이다. 

물론 강제로 기본 키를 지정하는 열에 비클러스터형 인덱스를 생성하게 할 수도 있다. 
CREATE TABLE userTbl
(
	userID char(8) NOT NULL PRIMARY KEY NONCLUSTERED,
	name nvarchar(10) NOT NULL,
	birthYear int NOT NULL,
	...
앞처럼 테이블을 생성하면 userID에는 비클러스터형 인덱스가 생성된다. 클러스터형 인덱스는 테이블당 한 개를 만들수 있다고 했다. 그러므로 지금 userTbl에는 클러스터형 인덱스가 없으므로, 한 개의 클러스터형 인덱스를 만들 여분이 있게된다. 여기서 테이블 생성할 때 자동으로 생성되는 인덱스의 특징을 한 가지 더 짚고 넘어가자. 

제약 조건없이 테이블 생성할 때 인덱스를 만들수 없으며, 인덱스가 자동생성되기 위한 열의 제약 조건은 Primary key 또는 Unique 뿐이다. 

Primary Key 는 당연히 중복이 되지 않으므로 클러스터형 인덱스를 생성할 수있고, 중복 되지 않는 제약 조건인 UNIQUE에도 클러스터형 인덱스를 생성할 수있다. 단 테이블에는 하나의 클러스터형 인덱스만 존재한다. 잠깐 실습에서 확인해 보자. 



실습1 : 제약 조건으로 자동 생성되는 인덱스를 확인해 보자. 
0. tempdb에서 작업해 보자. 

1. 간단한 테이블을 만들어 보자. 
1-1 다음 구문으로 테이블을 생성해 보자.
USE tempDB;
CREATE TABLE tbl1
(
	a INT PRIMARY KEY,
	b INT,
	c INT
);

1-2 구성된 인덱스의 상태를 확인해 보자. (sp_help로 확인할 수도 있다)
EXEC sp_helpindex tbl1;

예상대로 a 열은 클러스터형(clustered)인덱스이며, 유일한(unique)인덱스가 생성되어 있는 것이 확인된다. 

인덱스의 이름(index_name)은 SQL Server가 자동으로 생성한 것이므로 신경 쓰지말자. 


※ 여기서 잠깐?
Index의 종류는 Clustered Index/Nonclustered Index로 나눌 수 있고, 또 Unique Index/Nonunique Index로 나눌수도 있다. Unique Index는 인덱스 값들이 서로 중복되지 않는 인덱스를 말한다. Primary Key나 Unique Key로 지정하면 당연히 서로 중복되는 데이터가 없으므로 Unique Index가 생성되는 것이다. 만약 Nonunique Index(인덱스 데이터가 중복되는 인덱스)를 생성하고 싶다면 Primary Key및 Unique Key로 지정되지 않은 열에 인덱스를 지정하면 된다. 이는 잠시후에 배울 Create Index 구문으로 생성이 가능하다. 이 책은 주로 Clustered Index/Nonclustered Index에 대해서만 다루게 될 것이며, Unique Index/Nonqunique Index에 대해서는 지금 다룬 정도만 기억해두면 되겠다. 


2. Primary Key와 함께 Unique 제약 조건도 생성해 보자. UNIQUE 제약 조건은 한 테이블에 여러 개 생성이 가능하다 

CREATE TABLE tbl2
(
	a INT PRIMARY KEY,
	b INT UNIQUE,
	c INT UNIQUE,
	d INT
);
GO
EXEC sp_helpindex tbl2;

UNIQUE 제약 조건으로 설정하면 비클러스터형 인덱스가 자동으로 생성되는 것을 확인할 수 있다. 비클러스터형 인덱스는 테이블당 여러 개가 생성될 수 있으므로 여러 개의 비클러스터형 인덱스가 생성된 것은 아무 문제가 되지 않는다. 


3. 이번에는 강제로 Primary Key를 비클러스터형 인덱스로 지정해 보자. 
CREATE TABLE tbl3
(
	a INT PRIMARY KEY NONCLUSTERED,
	b INT UNIQUE,
	c INT UNIQUE,
	d INT
);
GO
EXEC sp_helpindex tbl3;

모두 다 비클러스터형 인덱스로 지정되었다. 클러스터형 인덱스가 비었다고 UNIQUE가 클러스터형 인덱스가 되는 것은 아니다. 


4. 이번에는 강제로 UNIQUE에 클러스터형 인덱스를 지정해 보자. 
CREATE TABLE tbl4
(
	a INT PRIMARY KEY NONCLUSTERED,
	b INT UNIQUE CLUSTERED,
	c INT UNIQUE,
	d INT
);
GO
EXEC sp_helpindex tbl4;

UNIQUE로 지정한 b열에도 클러스터형 인덱스를 생성할 수 있다. 

5. 이번에는 클러스터형 인덱스를 두 개 지정해 보자.
CREATE TABLE tbl5
(
	a INT PRIMARY KEY NONCLUSTERED,
	b INT UNIQUE CLUSTERED,
	c INT UNIQUE CLUSTERED,
	d INT
);
오류 메시지:
메시지 8112, 수준 16, 상태 0, 줄 1
테이블 'tbl5'의 제약 조건에는 클러스터형 인덱스를 하나만 추가할 수 있습니다. 

오류 메시지가 클러스터형 인덱스는 하나만 만들수 있다고 알려주고 있다. 


6. 이번에는 b열에만 CLUSTERED를 명시하고, a열에는 아무것도 명시하지 말아보자. 
CREATE TABLE tbl5
(
	a INT PRIMARY KEY,
	b INT UNIQUE CLUSTERED,
	c INT UNIQUE,
	d INT
);
GO
EXEC sp_helpindex tbl5;

결과를 보면 Primary Key라고 지정하면 무조건 클러스터형 인덱스가 생성되는 것이 아니라 테이블에 클러스터형 인덱스로 강제 지정된 다른 열이 없을 경우에만 Primary Key가 지정된 열에 클러스터형 인덱스가 지정되는 것을 확인할 수 있다. 

7. 필자가 앞에서 클러스터형 인덱스는 행 데이터를 자신의 열을 기준으로 정렬한다고 이야기했다. 사실 이것은 6장에서 sqlDB의 회원 테이블을 만들었을 때 이미 확인한 것이나 마찬가지이다. 물론 그때는 인덱스에 대해서 전혀 몰랐으므로 일부 예리한 독자는 그냥 이상하다 라고 생각했을 수 있다. 

7-1 간단한 실습을 위해서 회원 테이블의 열만 정의해 보자. 

USE tempdb;
CREATE TABLE userTbl
(
	userID		char(8) NOT NULL PRIMARY KEY,
	name		nvarchar(10) NOT NULL,
	birthYear	int NOT NULL,
	addr		nchar(2) NOT NULL
);

7-2 데이터를 입력하고 확인해 보자. 

INSERT INTO userTbl VALUES('LSG', '이승기', 1987, '서울');
INSERT INTO userTbl VALUES('KBS', '김범수', 1979, '경남');
INSERT INTO userTbl VALUES('KKH', '김경호', 1971, '전남');
INSERT INTO userTbl VALUES('JYP', '조용필', 1950, '경기');
INSERT INTO userTbl VALUES('SSK', '성시경', 1979, '서울');
GO
SELECT * FROM userTbl;

입력할 때는 이승기, 김범수, 김경호, 조용필, 성시경의 순서였으나 확인해 본 결과 입력 되어 있는 차례는 조용필, 김범수, 김경호, 이승기, 성시경 이다. 이는 userID에 클러스터형 인덱스가 생성되어 있으므로 데이터가 입력되는 즉시 userID로데이터를 정렬하기 때문이다. 이에 대한 내부적인 작동도 잠시 후에 살펴보겠다. 



※ 여기서잠깐?
제약 조건의 정의는 대개 테이블의 생성 구문에서, 또는 바로 이어서 Alter 문으로 생성한다. 그러므로 아직 데이터가 입력되기 전에 Primary Key 및Unique키의 열에는 인덱스가 생성되어 있는 것이다. 따라서 인덱스 자체를 구성하는 시간이 걸리지는 않는다. 하지만 많은 데이터가 입력된 후에 Alter 문으로 Unique나 Primary를 지정하게 되면 인덱스를 함부로 구성하는데 많은 시간이 걸릴수도 있다. 즉 업무 시간에 운영중인 대량의 테이블 인덱스를 생성하면 시스템이 엄청나게 느려져 심각한 상황이 발생될 수도 있으니 주의해야 한다.(최신의 SQL Server 버전에서는 이전 버전에 비해 인덱스 생성 속도가 향상되기는 했지만 그래도 데이터의 양에 따라서 몇시간이나 그 이상의 시간이 걸릴 수도 있다.)