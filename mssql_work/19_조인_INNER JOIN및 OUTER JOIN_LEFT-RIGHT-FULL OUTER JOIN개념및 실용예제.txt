SELECT B.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM buyTbl B INNER JOIN userTbl U ON B.userid = U.userid;

테이블에 별칭을 주려면 간단히 FROM 절에 나오는 테이블의 이름 뒤에 별칭을 붙여주기만 하면 된다. 앞으로는 여러 개의 테이블이 관련된 조인에서는 이러한 방식을 사용할것을 적극 권장한다. 

[그림7-33]에서 'JYP' 아이디의 사용자가 구매했던 것과 조인한 것을 다시 생각해 보자. 같은 결과이지만 다음과 같이 아이디/이름/물품/주소/연락처만 출력되게 하고, 코드도 간결하게 수정했다. 

SELECT B.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM buyTbl B INNER JOIN userTbl U ON B.userid = U.userid 
WHERE B.userid = 'JYP';

구매 테이블의 'JYP'라는 아이디가 구매한 물품을 배송하려면 회원 테이블에서 'JYP' 에 해당하는 이름/주소/연락처를 가져온 것이다. 이를 반대로 생각해 보자. 이번에는 회원테이블(userTbl)을 기준으로 JYP라는 아이디가 구매한 물건의 목록을 보자. 

SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM userTbl U INNER JOIN buyTbl B
WHERE B.userid = 'JYP';

구매 테이블을 기준으로 한 것에서 순서 정도만 바꾸었을 뿐, 큰 차이는 없다. 결과도[그림 7-36]과 같다. 

이번에는 전체 회원들이 구매한 목록을 모두 출력해 보자. 지금필자가 전체 회원들이라고 이야기한 것에 주목하자. 앞의 쿼리문에서 WHERE 조건만 빼면 된다. 그리고 결과를 보기 쉽게 회원 ID 순으로 정렬하도록 하자. 

SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM userTbl U INNER JOIN buyTbl B ON U.userid = B.userid
ORDER BY U.userid;

어차피 구매 테이블의 목록이 12건이었으므로, 이상 없이 잘 나왔다. 앞의 결과도 아무런 이상이 없기는 하지만 필자가 조금 전에 말했던 전체 회원들과는 차이가 있다. 앞의 결과는 전체 회원들이 아닌 구매한 기록이 있는 회원들의 결과이다. 

앞의 결과에서 한 번도 구매하지 않은 회원인 이승기, 김경호, 임재범, 윤종신, 조관우는 나타나지 않았다. 여기서는 구매한 회원의 기록도 나오면서, 더불어 구매하지 않았더라도 회원의 이름/주소 등은 나오게 조인할 필요가 있다. 이렇게 조인해주는 방식이 OUTER JOIN 이다. 결국 INNER JOIN은 양쪽 테이블에 모두 내용이 있는 것만 조인되는 방식이고, OUTER JOIN 은 INNER JOIN과 마찬가지로 양쪽에 내용이 있으면 당연히 조인되고, 한쪽에만 내용이 있어도 그 결과가 표시되는 조인 방식이다. OUTER JOIN은 잠시 후에 상세히 알아보겠다. 

앞의 INNER JOIN 이 한쪽에는 없는 목록만 나오므로 유용한 경우도 있다. 예를 들어 쇼핑몰에서 한 번이라도 구매한 기록이 있는 우수 회원들에게감사 안내문을 발송하도록 하자의 경우에는 다음과 같이 DISTINCE 문을 활용해서 회원의 주소록을 뽑을 수 있다. 

SELECT DISTINCT U.userid, U.name, U.addr, FROM userTbl U INNER JOIN buyTbl B ON U.userid = B.userid ORDER BY U.userid;

앞의 결과를 EXISTS 문을 사용해서도 같은 결과를 낼 수 있다. 

SELECT U.userid, U.name, U.addr FROM userTbl U WHERE EXISTS(SELECT * FROM buyTbl B WHERE U.userid = B.userid);

하지만 EXISTS 문은 내부적인 처리 과정이 JOIN 보다 복잡하여 성능이 떨어지므로 권장하지 않는다. 앞의 JOIN을 사용하기를 권장한다. 

이번에는 세 개 테이블의 조인을 살펴보자. 세 개의 테이블을 테스트하는 예를 보자. 학생과 동아리의 관계를 생각해 보자. 한 학생은 여러 개의 동아리에 가입해서 활동할수 있고, 하나의 동아리에는 여러 명의 학생이 가입할수 있으므로 두 개는 서로 다대다(many-to-many)의 관계라고 표현할 수있다. 다대다 관계는 논리적으로는 구성이 가능하지만 이를 물리적으로 구성하려면 두 테이블 사이에 연결 테이블을 둬서 이 연결 테이블과 두 테이블이 일대다 관계를 맺게 구성해야 한다. 

앞의 구조는 테이블의 복잡성을 없애려고 학생의 이름 및 동아리명을 Primary Key로 설정했다. 

* 실제로는 학생 이름으로 Primary Key를 설정하지 않는다. 왜냐하면 이름이 같은 학생의 있다면 한명만 빼고 나머지는 자퇴해야 하는 웃지 못할 상황이 생길 수 있다. 

이 구조를 보면 학생 테이블과 동아리 테이블은 서로 직접적인 관련이 없다. 하지만 중간의 학생_동아리 테이블이 두 테이블의 연관 관계를 맺어주고 있다. 



실습6 : 세 개 테이블의 조인을 실습해 보자. 

[그림7-39]를 보고 3개 테이블을 정의하고 데이터를 입력해 보자. 연습을 위해서 6장 [그림6-10]을 만들 때 사용한 쿼리문을 참조하여 다음의 쿼리문을 보지 않고 [그림7-39]를 정의해 보자. 테이블 생성은 8장에서 배우지만, 미리 좋은 연습이 될 것이다. 

1. 테이블을 생성하고, 데이터를 입력하는 쿼리문을 작성해 보자. 
USE sqlDB;
CREATE TABLE stdTbl
( stdName NVARCHAR(10) NOT NULL PRIMARY KEY,
addr nchar(4) NOT NULL );
GO
CREATE TABLE clubTbl
( clubName nvarchar(10) NOT NULL PRIMARY KEY,
roomNo nchar(4) NOT NULL);
GO
CREATE TABLE stdclubTbl
( num int IDENTITY NOT NULL PRIMARY KEY,
stdName nvarchar(10) NOT NULL FOREIGN KEY REFERENCES stdTbl(stdName),
clubName nvarchar(10) NOT NULL FOREIGN KEY REFERENCES clubTbl(clubName), );
GO
INSERT INTO stdTbl VALUES('김범수', '경남'), ('성시경', '서울'), ('조용필', '경기'), ('은지원', '경북'), ('바비킴', '서울');
INSERT INTO clubTbl VALUES('수영', '101호'), ('바둑', '102호'), ('축구', '103호'), ('봉사','104호');
INSERT INTO stdclubTbl VALUES('김범수', '바둑'), ('김범수', '축구'), ('조용필','축구'), ('은지원','축구'), ('은지원','봉사'), ('바비킴','봉사');
GO


2. 학생 테이블, 동아리 테이블, 학생_동아리 테이블을 이용해서 학생을 기준으로 학생이름 /지역/가입한 동아리/동아리 이름을 출력해 보자. 
SELECT S.stdName, S.addr, C.clubName, C.roomNo FROM stdTbl S INNER JOIN stdclubTbl SC ON SC.stdName = S.stdName
INNER JOIN clubTbl C ON SC.clubName = C.clubName ORDER BY S.stdName;
GO

이 쿼리문은 학생_동아리 테이블과 학생 테이블의 일대다 관계를 INNER JOIN하고, 또한 학생_동아리 테이블과 동아리 테이블의 일대다 관계를 INNER JOIN 한다. 

앞의 그림에 나와있듯이 세개의 테이블이 조인되는 쿼리를 만드는 순서는 처음에 실선 박스로 표시된 stdTbl과 stdclubTbl이 조인되고, 그 후에 점선 박스로 표시된 stdclubTbl과 clubTbl이 조인되는 형식으로 쿼리문을 작성하면 된다. 

3. 이번에는 동아리를 기준으로 가입한 학생의 목록을 출력해 보자. 
SELECT C.clubName, C.roomNo, S.stdName, S.addr FROM stdTbl S INNER JOIN stdclubTbl SC ON SC.stdName = S.stdName 
INNER JOIN clubTbl C ON SC.clubName = C.clubName ORDER BY C.clubName;

특별한 것은 없다. 출력 차례만 바꾸고 정렬되는 기준만 동아리 이름으로 바꾼 것뿐이다. 


※ OUTER JOIN(외부 조인)
OUTER JOIN은 조인의 조건에 만족되지 않는 행까지도 포함시키는 것이라고 이야기했다. 자주 사용되지는 않지만, 종종 유용하게 사용되는 방식이므로 알아둘 필요가 있다. 

구문은 다음의 형식을 가진다
SELECT <열 목록> FROM <첫 번째 테이블(LEFT 테이블)>
< LEFT | RIGHT | FULL> OUTER JOIN <두 번째 테이블(RIGHT 테이블) > 
ON<조인될 조건>
[WHERE 검색조건];

좀 복잡한 것 같지만 전체 회원의 구매 기록을 보자. 단 구매 기록이 없는 회원도 출력되어야 한다의 쿼리문을 통해 살펴보자. 

USE sqlDB;
SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM userTbl U LEFT OUTER JOIN buyTbl B
ON U.userid = B.userid ORDER BY U.userid;

LEFT OUTER JOIN 의 의미를 왼쪽 테이블(userTbl)의 것은 모두 출력되어야 한다 정도로 해석하면 기억하기 쉬울 것이다. 또 LEFT OUTER JOIN을 줄여서 LEFT JOIN이라고만 써도 된다. 

앞과 같은 결과를 위해서 구문을 RIGHT OUTER JOIN으로 바꾸려면 단순히 왼쪽과 오른쪽 테이블의 위치만 바꿔주면 된다. 

SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM buyTbl B RIGHT OUTER JOIN userTbl U
ON U.userid = B.userid ORDER BY U.userid;

INNER JOIN의 활용 중에서 구매한 기록이 있는 우수 회원들의 목록만을 작업했다. 이번에는 한 번도 구매한 적이 없는 유령(?)회원의 목록을 뽑아보자. 

SELECT U.userid, U.name, B.prodName, U.addr, U.mobile1 + U.mobile2 AS [연락처] FROM userTbl U LEFT OUTER JOIN buyTbl B ON U.userid = B.userid
WHERE B.prodName IS NULL ORDER BY U.userid;

이번에는 FULL OUTER JOIN(전체 조인 또는 전체 외부 조인)에 대해서 살펴보자. FULL OUTER JOIN은 LEFT OUTER JOIN과 RIGHT OUTER JOIN을 합쳐진 것이라고 생각하면 된다. 그냥 줄여서 FULL JOIN 이라고 부른다. 즉 한쪽을 기준으로 조건과 일치하지 않는 것을 출력하는 것이 아니라. 양쪽 모두에 조건이 일치하지 않는 것을 모두 출력하는 개념이다. 활용도는 낮으므로 다음 실습에서 간단히 확인만 해두면 된다. 다음 실습에서는 3개 테이블의 LEFT/RIGHT OUTER JOIN 방식을 위주로 파악해 보자. 



실습7 : LEFT/RIGHT/FULL OUTER JOIN을 실습해 보자. 
<실습6>에서 3개의 테이블을 가지고 INNER JOIN했던 결과를 OUTER JOIN으로 고려해 보자. 또 두개의 조인을 고려한 FULL JOIN을 테스트해보자. 

1.<실습6>2번의 학생을 기준으로 출력된 결과를 보면, 동아리에 가입하지 않은 학생 '성시경'은 출력되지 않았다 OUTER JOIN으로 동아리에 가입하지 않은 학생도 출력되게 수정해 보자. 

간단히 INNER JOIN을 LEFT OUTER JOIN으로 변경하면 된다. 

USE sqlDB;
SELECT S.stdName, S.addr, C.clubName, C.roomNo FROM stdTbl S LEFT OUTER JOIN stdclubTbl SC  ON S.stdName = SC.stdName
LEFT OUTER JOIN clubTbl C ON SC.clubName = C.clubName ORDER BY S.stdName;


2. 이번에는 동아리를 기준으로 가입된 학생을 출력하되, 가입 학생이 하나도 없는 동아리도 출력되게 해 보자. 
SELECT C.clubName, C.roomNo, S.stdName, S.addr FROM stdTbl S LEFT OUTER JOIN stdclubTbl SC ON SC.stdName = S.stdName
RIGHT OUTER JOIN clubTbl C ON SC.clubName = C.clubName ORDER BY C.clubName;

클럽을 기준으로 조인해야 하므로 두 번째 조인은 RIGHT OUTER JOIN으로 처리해서 clubTbl이 조인의 기준이 되게 설정하면 된다. 


3. 두 결과를 하나로 합쳐보자. 즉 동아리에 가입하지 않은 학생도 출력되고, 학생이 한명도 없는 동아리도 출력되게 해 보자. LEFT/RIGHT OUTER JOIN 대신에 FULL OUTER JOIN을 사용하면 양쪽 방향으로 OUTER JOIN되는 효과를 거둔다. 

SELECT S.stdName, S.addr, C.clubName, C.roomNo FROM stdTbl S FULL OUTER JOIN stdclubTbl SC ON S.stdName = SC.stdName 
FULL OUTER JOIN clubTbl C ON SC.clubName = C.clubName ORDER BY S.stdName;

결과를 보면 가입한 학생이 없는 수영 동아리와 동아리에 가입하지 않은 성시경 학생이 모두 출력되었다. 