※ 임시 테이블
임시 테이블은 이름처럼 임시로 잠깐 사용되는 테이블이다. 테이블을 생성할 때 테이블 이름 앞에 '#' 또는 '##'을 붙이면 임시 테이블로 생성된다. 임시 테이블은 tempdb에 생성될 뿐 나머지 사용법등은 일반 테이블과 같이 사용할 수 있다. 

#을 앞에 붙인 테이블은 로컬 임시 테이블이라고 부르는데, 이는 테이블을 생성한 사람만 사용할 수 있다. 즉 다른 사용자는 해당 테이블이 있는지 조차 모른다. 

##을 앞에 붙인 테이블은 전역 임시 테이블이라고 부르는데, 이는 모든 사용자가 사용할 수 있는 테이블이다. 

임시 테이블이 삭제되는 시점은 다음과 같다. 

* 사용자가 DROP TABLE로 직접 삭제
* SQL Server가 재시작되면 삭제됨
-> 임시 테이블은 tempdb에 생성되는데, SQL Server가 재시작되면 tempdb도 다시 생성됨

* 로컬 임시 테이블은 생성한 사용자의 연결이 끊기면 삭제됨(즉 쿼리창이 닫히면 삭제됨)
* 전역 임시 테이블은 생성한 사용자의 연결이 끊기고 이 테이블을 사용중인 사용자가 없을 때 삭제됨


실습 5 : 임시 테이블을 사용해 보자. 
0. 모든 쿼리 창을 닫고, 쿼리 창을 하나 새로 연다(쿼리 창1 이라고 부르겠다)

1. (쿼리 창1)로컬 임시 테이블(#)과 전역 임시 테이블(##)을 생성 해 보자. 

USE tableDB;
CREATE TABLE #tempTbl ( ID INT, txt NVARCHAR(10));
GO
CREATE TABLE ##tempTbl(ID INT, txt NVARCHAR(10));

2(쿼리 창1)데이터를 입력한다. 
INSERT INTO #tempTbl VALUES(1, N'지역임시테이블');
INSERT INTO ##tempTbl VALUES(2, N'전역임시테이블');

3(쿼리창1) 테이블을 조회한다. 
SELECT * FROM #tempTbl;
SELECT * FROM ##tempTbl;

4(쿼리 창1)임시 테이블은 어느 데이터베이스에서도 똑같이 조회가 가능하다. 
USE master;
SELECT * FROM #tempTbl;
SELECT * FROM ##tempTbl;

5. 새로운 쿼리창을 하나 열고, 조회해 본다(쿼리 창2라고 부르겠다). 

5-1(쿼리창 2)우선 전역 임시 테이블을 조회해 본다. 결과가 잘 나온다. 
SELECT * FROM ##tempTbl;

5-2(쿼리창 1)지역 임시 테이블은 세션(쿼리 창)이 다르므로 조회되지 않는다. 
SELECT * FROM #tempTbl;
오류 메시지 :
메시지 208, 수준 16, 상태 0, 줄 1
개체 이름 '#tempTbl' 이(가) 잘못되었습니다. 

6.(쿼리 창2) 다음을 수행한다. 이는 전역 임시 테이블을 계속 사용중으로 설정하는 것이다. 
BEGIN TRAN
	INSERT INTO ##tempTbl VALUES(2, N'새 쿼리 창에서 입력');

* BEGIN TRAN 이 나온 후에 INSERT, UPDATE, DELETE등이 나오면 COMMIT TRAN이 나올때 까지는 실제로 완전히 적용된 상태가 아니다. 즉 해당 테이블을 사용중으로 보면 된다. 

7. 처음에 사용하던 쿼리 창1을 닫는다(저장할 필요는 없다.)
당연히 지역 임시 테이블은 자동 삭제된다. 

8. 트랜잭션을 커밋하고 전역 임시 테이블이 보이는지 확인해 보자. 
8-1 (쿼리 창2)전역 임시 테이블을 조회해 본다. 
SELECT * FROM ##tempTbl;

전역 임시 테이블을 생성했던 쿼리 창1이 닫히기는 했지만 전역 임시 테이블을 사용중이므로 아직은 잘 보인다. 

8-2(쿼리 창2)트랜잭션을 커밋하고 다시 조회해 본다. 
COMMIT TRAN;
SELECT * FROM ##tempTbl;
오류 메시지 :
메시지 208, 수준 16, 상태 1, 줄 2
개체이름 '##tempTbl'이(가) 잘못되었습니다. 

전역 임시 테이블도 더 이상 사용하는 사용자가 없고, 기존의 생성했던 세션(쿼리 창1)도 이미 닫혔으므로 자동 삭제된다. 


※ 테이블 삭제
테이블 삭제는 간단히 다음과 같은 형식을 사용한다. 
DROP TABLE 테이블이름;

단 주의할 사항은 외래 키(FOREIGN KEY)제약 조건의 '기준 테이블'은 삭제할 수가 없다. 먼저 외래 키가 생성된 외래키 테이블을 삭제해야 한다. [그림8-1]의 경우에 구매 테이블(buyTbl)이 아직 존재하는데, 회원 테이블(userTbl)을 삭제할 수 없다. 먼저 구매 테이블(buyTbl)을 삭제한 후에 회원 테이블(userTbl)을 삭제해야 한다. 여러 개의 테이블을 동시에 삭제하려면 DROP TABLE 테이블1, 테이블2, 테이블3 식으로 계속 나열하면 된다. 



※ 테이블 수정
테이블의 수정은 ALTER TABLE 문을 사용한다. 앞에서 제약 조건을 추가할 경우에 ALTER TABLE구문을 사용해 왔는데, 이미 생성된 테이블에 무엇인가를 추가/변경/수정/삭제 하는 것은 모두 ALTER TABLE을 사용한다. 

SQL Server 2012도움말에 나오는 형식은 다음과 같다. 

ALTER TABLE [ database_name . [schema_name ] . [schema_name . ] 
table_name
{
	ALTER COLUMN column_name
	{
		[type_schema_name.] type_name [ ( { precision [, scale] | max | xml_schema_collection } ) ]
		[COLLATE collation_name ]
		[ NULL | NOT NULL ] [SPARSE] | {ADD | DROP}
		{ROWGUIDCOL | PRESISTED | NOT FOR REPLICATION | SPARSE } }
		| [ WITH { CHECK | NOCHECK} ]
	
		| ADD
		{
			<column_definition>
			| <computed_column_definition>
		 	| <table_constraint>
			| <column_set_definition>
			} [,.. n]

		|DROP
		{
			[CONSTRAINT ] contraint_name
			[ WITH ( <drop_clustered_constraint_option> [,..n] ) ]
			| COLUMN column_name
		} [,..n]
		(... 중간 생략 ...)
	}
[;]

역시 예상대로 복잡하다. 하지만 실제로 많이 사용되는 것들은 그리 복잡하지 않다. 다음에 나오는 예로 익혀보자. 


(1) 열의 추가
[그림8-1]의 회원 테이블(userTbl)에 회원의 홈페이지 주소를 추가하려면 다음과 같이 사용한다. 

USE tableDB;
ALTER TABLE userTbl
ADD homepage NVARCHAR(30) -- 열 추가
DEFAULT 'http://www.hanb.co.kr' -- 디폴트 값
NULL; -- Null 허용함

열을 추가하게 되면 기본적으로 가장 뒤에 추가된다. 이 열의 순서를 변경하는 가장 쉬운 방법은 SSMS의 개체 탐색기에서 해당 테이블을 선택한 후에 마우스 오른쪽 버튼을 클릭하고 [디자인]을 선택한 다음 그림과 같이 위치를 옮길 열의 앞부분을 마우스로 드래그해서 원하는 위치에 가져다 놓으면 된다. 변경 후에 저장 아이콘을 클릭해 변경 사항을 저장한다. 

* SQL Server 2012의 개체 탐색기에서 테이블을 변경한 후에 저장할 때 다음과 같은 오류 메시지가 나올 수 있다. 
이런 경우에는 우선 <취소> 버튼을 눌러서 취소한 후, SSMS 메뉴[도구] > [옵션]을 선택해서 다음과 같이 디자이너 > 테이블 및 데이터베이스 디자이너를 클릭해서 테이블 옵션 중에서 테이블을 다시 만들어야 하는 변경 내용 저장 사용 안 함의 체크를 끄면 된다. 그리고 테이블을 다시 저장하면 잘 저장된다. 

변경된 열의 순서는 SSMS의 개체 탐색기나 EXEC sp_help userTbl로 확인할 수 있다. 



(2) 열의 삭제 
[그림 8-1]의 전화 번호 열을 삭제하려면 다음과 같이 사용한다. 
ALTER TABLE userTbl
DROP COLUMN mobile1;

그런데 mobile1 열은 특별한 제약 조건이 없으므로 삭제에 별 문제가 없지만, 제약 조건이 걸린 열을 삭제할 경우에는 제약 조건을 먼저 삭제한 후에 열을 삭제해야 한다. 이는 잠시후 실습을 통해서 확인해 보자. 


(3) 열의 데이터 형식 변경
[그림 8-1] 의 회원이름(name)열의 데이터 형식을 NVARCHAR(10)으로 변경하고 NULL값도 허용하려면 다음과 같이 사용한다. 
ALTER TABLE userTbl
ALTER COLUMN name NVARCHAR(20) NULL;

그런데 마찬가지로 제약 조건이 걸려있는 열은 좀 문제가 있다. 이것도 잠시 후의 실습에서 확인해 보겠다. 

열의 이름을 변경하려면 sp_rename 시스템 저장 프로시저를 사용해야 한다. 만약 name열을 username으로 변경하려면 다음과 같이 사용한다. 

EXEC sp_rename 'userTbl.name', 'username', 'COLUMN';

* sp_rename 사용 시 결과 메시지에 개체 이름 부분을 변경하면 스크립트 및 저장 프로시저를 손상시킬 수 있습니다. 라는 주의가 나올 수는 있으나, 변경은 된다. 이 주의에 써진 것처럼 name 열을 사용하도록 지정된 저장 프로시저, 트리거 등은 문제가 발생할 수 있다는 의미이다. 그러므로 되도록 열의 이름을 변경하지 않는 것이 바람직 하다. 


또 다른 방법으로는 개체 탐색기에서 테이블을 선택한 후, 마우스 오른쪽 버튼을 클릭하고 [디자인]을 선택한다. 그리고 간단히 열이름을 변경하면 된다. 그리고 테이블을 저장한다. 