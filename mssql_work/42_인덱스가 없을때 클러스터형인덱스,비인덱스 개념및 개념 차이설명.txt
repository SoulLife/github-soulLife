5. 앞에서는 정확한 값(CustomerID가 100인 것)하나를 검색할 때의 내부 방식을 확인해 보았다. 이번에는 어느 범위를 검색할 때를 확인해보자. 

5-1 인덱스가 없는 테이블을 범위로 검색해 보자. 

SELECT * FROM Cust WHERE CustomerID < 100;

어차피 Cust에는 인덱스가 없으므로, 테이블 검색을 하고 155페이지를 모두 읽어야 한다. 
즉 인덱스가 없다면 하나를 검색하든 범위로 검색하든 차이가 없다. 

5-2 클러스터형 인덱스 테이블을 범위로 검색해 보자. 
SELECT * FROM Cust_C WHERE CustomerID < 100;

실행 계획과 메시지를 확인해 보자.

데이터는 무려 99개나 조회되었는 데도 한개를 읽었던 CustomerID = '100'조건과 같은 두 페이지만 읽었다. 왜 그럴까? Cust_C 테이블의 구조를 예상해보면 다음 그림과 비슷하게 되었을 것이다. 

* 다음 그림은 정확한 것이 아니다. 숫자의 오차는 전혀 중요한 것이 아니므로, 대략적으로 그림과 같이 되었다고 생각하자. 

앞의 그림을 보면서 답해 보자. 이제 고객ID(CustomerID)100 이하를 읽으려면 어떤 페이지를 읽어야 하는가? 루트 페이지(100번 페이지)와 리프 페이지1개(001번 페이지)두 개만 읽으면 된다. 

그렇다면 다음의 쿼리는 몇 페이지를 읽을까? 예상해 보자. 

SELECT * FROM Cust_C WHERE CustomerID < 200;

3페이지만 읽는다 [그림9-47]을 보면 왜 3페이지인지 알 수 있을 것이다. 루트 페이지, 001번 페이지, 002번 페이지만 읽으면 고객 ID 200까지를 모두 찾을 수 있다. 

5-3 이번에는 다음 쿼리를 수행해 보자. 

SELECT * FROM Cust_C WHERE CustomerID < 400;

CustomerID의 최대값은 30118인데 그것보다 큰 값을 지정했으므로 전체 페이지를 검색하게 된다. 그래서 전체 클러스터형 인덱스의 개수인 162개를 읽었다. 

* sys.allocation_units 카탈로그 뷰를 확인하면 data_pages는 155개이지만 total_pages 는 161개이다. 이 차이는 지금은 별로 중요한 것이 아니니 그냥 무시하자. 


주의해서 볼 것은 전체 데이터를 가져와야 하는데도, Where 조건에 CustomerID가 있어서 Clustered Index Seek를 수행했다. 

5-4 이번에는 WHERE 조건이 없는 쿼리를 수행해 보자. 

SELECT * FROM Cust_C;

메시지를 보면 읽은 페이지수는 162로 같지만 실행 계획을 보면 Clustered Index seek 가 아닌 Scan으로 나온다. 즉 인덱스를 검색할 필요없이 테이블 스캔과 같은 개념인 인덱스 스캔을 한 것이다. 

5-5 이번에는 비클러스터형 인덱스 테이블을 범위로 검색해 보자. 

SELECT * FROM Cust_NC WHERE CustomerID < 100;

약 2만개 중에 100개밖에 검색하지 않았는 데도 테이블 검색(155 페이지 모두 읽기)을 했다. 즉 인덱스가 있는데도 불구하고 인덱스를 사용하지 않았다. 

Cust_NC의 인덱스 구성도를 예상하면 다음 그림과 비슷할 것이다. 

* 다음 그림에서도 숫자에는 연연하지 말자 이해가 쉽게 가정하여 지정한 것이 더 많다. 

앞의 그림에서 비클러스터형 인덱스에서 1~100까지 검색하는 것을 실행해 보자. 

* 루트 페이지인 10번 페이지를 읽어서 1번 고객 ID 부터는 100번 페이지에 있는 것을 알아 냈다. 
* 인덱스의 리프 페이지인 100번 페이지에 가보니 1~100까지의 고객 ID가 모두 있다. 
* 고객 ID 2를 찾으려고 페이지 1156번을 읽고, 백십 번째(#110)의 데이터에 접근한다. 
* 고객아이디3 을 찾으려고...
*....
* 고객 아이디 100번까지 반복


이렇게 데이터 페이지를 왔다갔다하며 읽어야 한다. 이렇게 읽을 바에는 차라리 인덱스가 없는것으로 치고 데이터 페이지에서 처음부터 찾아보는 것이 더 빠르다. 그래서 SQL Server가 알아서 인덱스가 있더라도 [그림9-51]와 같이 테이블 검색을 선택하여 수행하게 된다. [그림9-53]의 결과를 보면 CustomerID가 정렬되어 있지 않다. 즉 비클러스터형 인덱스의 10번이나 100번 페이지를 읽지 않고, 데이터 페이지인 1001번 페이지부터 차례로 검색한 결과임을 알 수 있다. 

5-6 앞의 5-5에서는 SQL Server가 인덱스를 사용하지 않았다. 강제로 인덱스를 사용하게 지정해 보자. 구문은 FROM 테이블 이름 WITH (INDEX(인덱스이름))으로 사용하며 강제로 지정한 인덱스를 검색하게 된다. 

SELECT * FROM Cust_NC WITH (INDEX(idx_cust_nc)) WHERE CustomerID < 100;

* 앞의 구문과 같이 WITH 절과 함께 강제로 인덱스를 사용하게 하는 것을 테이블 힌트(Hint)라고 한다. 이 테이블 힌트는 SQL Server의 실행 계획을 무시하는 것이므로 되도록 사용하지 않는 것이 좋다. 대부분의 경우에는 SQL Server가 최적의 실행 계획을 만들어 낸다. 


[그림9-57]을 보면 [그림9-54]에서 10번, 100번 페이지 등을 차례로 읽었으므로 CustomerID 순으로 정렬되어 결과가 나왔다. 


그런데 오해하기 쉬운 것이 비클러스터형 인덱스를 사용하니까 페이지를 101페이지만 읽었으므로 테이블 검색을 한 155페이지를 읽는 것보다는 효율이 좋지 않을까? 생각할 수도 있다. 하지만 결과를 보면 CustomerID가 정렬되어 있는 것이 보인다. 즉 인덱스를 기준으로 데이터 페이지를 이리저리 왔다갔다하면서 읽게 되어서 데이터 페이지를 읽은 개수는 적지만, 실제 수행하게 되는 시스템의 부하는 더 크기 때문에 5-5와 같이 SQL Server가 테이블 검색을 선택한 것이다. 

5-7 범위를 약간 줄여서 수행해 보자. 

SELECT * FROM Cust_NC WHERE CustomerID < 50;

메시지를 보니 51페이지만 읽었다. 그리고 실행 계획을 확인하니, 인덱스를 사용했다. 즉 적정 수량의 데이터를 읽을 경우에는 SQL Server가 알아서 인덱스를 사용한다. 

여기서 인덱스를 사용해야 하는 중요한 핵심을 찾을 수 있다. 기존에 생성해 놓은 비클러스터형 인덱스 중에서 전체 데이터의 1~3% 이상을 스캔하는 경우에는 SQL Server가 인덱스를 사용하지 않고 테이블 검색을 실시한다는 것이다. 이건 개략적인 추정치이며 상황에 따라서 다르다. 이 테이블의 경우에는 0.3% 이상(약 60개)의 데이터만 검색해도 테이블 스캔을 한다. 

즉 비클러스터형 인덱스가 있어도 인덱스를 사용하지 않는다는 것이다. 만약에 응용프로그램이 주로 전체 데이터의 1~3%이상 범위의 데이터를 검색(SELECT)하는 경우에는 차라리 인덱스를 만들지 않는 것이 시스템 성능에 도움이 된다. 이렇게 사용하지 않는 비클러스터형 인덱스는 데이터의 변경 작업(특히 INSERT)이 발생했을 때, 시스템의 성능을 나쁘게 만들 소지가 있다. 


※ 여기서 잠깐?
실무에서도 사용되지 않는 쓸모 없는 비클러스터형 인덱스를 몇 개만 삭제해도 성능이 향상되는 경우가 종종 있다. 


6. 이번에는 다른 열에 인덱스를 생성해서 사용해 보자. 

6-1 테이블을 복사해서 이번에는 CustomerID열이 아닌 TerritoryID 열에 인덱스를 생성해 보자. 
SELECT TOP(19820) * INTO Cust2_C
FROM AdventureWorks.Sales.Customer ORDER BY NEWID();
SELECT TOP(19820) * INTO Cust2_NC
FROM AdventureWorks.Sales.Customer ORDER BY NEWID();
GO
CREATE CLUSTERED INDEX idx_cust2_c on Cust2_C (TerritoryID);
CREATE NONCLUSTERED INDEX idx_cust2_nc on Cust2_NC (TerritoryID);

6-2 클러스터형 인덱스에서 TerritoryID가 2인 고객을 검색해 보자. 

SELECT * FROM Cust2_C WHERE TerritoryID = 2;

클러스터형 인덱스의 경우에는 인덱스를 잘 사용한 것을 확인할 수 있다. 

6-3 이번에는 비클러스터형 인덱스에서 TerritoryID가 2인 고객을 검색해 보자. 

SELECT * FROM Cust2_NC WHERE TerritoryID = 2;

이번에는 인덱스를 사용하지 않고 테이블 스캔을 했다. 

6-4 우선 TerritoryID에 입력되어 있는 데이터의 개수를 파악해 보자. 

SELECT DISTINCT TerritoryID FROM Cust2_NC;

약 2만 개의 데이터에 TerritoryID는 10가지밖에 없다. 즉 정확히 1~10까지 중에서 하나만 가져와도 엄청나게 많은 데이터(평균 10%=약2천건)를 가져오게 되는 것이다. 이것을 5-5에서 SELECT * FROM Cust_NC WHERE CustomerID < 100를 조회한 숫자(99건)보다 훨씬 많은 데이터를 가져오게 되어 인덱스를 사용하는 것보다 테이블 전체를 검색하는 것이 더 빠를 것이다. 이렇듯 데이터의 종류가 적은 열(= 데이터의 중복도가 높은 열)의 경우에는 비클러스터형 인덱스를 만들어도 인덱스를 사용하지 않게 된다. 결국 사용하지도 않을 것이므로 인덱스를 만들지 않는 것이 더 낫다. 

7. 이번에는 인덱스가 있어서 사용해야 하는 데도, 쿼리문을 잘못 만들어서 인덱스를 사용하지 않는 경우를 확인해 보자. 

7-0 다음 쿼리문은 인덱스를 잘 사용했고, 겨우 2페이지만 읽은 쿼리임을 이번 실습의 4-2에서 확인했다. 

SELECT * FROM Cust_C WHERE CustomerID = 100;

7-1 그런데 CustomerID에 어떤 가공을 해 보자. 1이란 숫자는 곱해도 그 값이 바뀌지 않으므로 다음과 같은 쿼리도 같은 쿼리가 된다. 실행해 보자. 

SELECT * FROM Cust_C WHERE CustomerID*1 = 100;

겨우 CustomerID에 1을 곱하는 작업을 했을 뿐인데 Clustered Index Seek가 아닌 Scan을 해서 전체 페이지를 읽어 버렸다. 즉 SQL Server가 인덱스를 사용하지 못한 것이다. 

이러한 잘못은 CustomerID * 1 = 100 부분에서 *1을 우측으로 넘겨서 해결할 수 있다. 더하기가 우측으로 넘어가면 빼기로 변하고 곱하기가 우측으로 넘어가면 나누기로 바뀌므로 , 다음과 같이 변경하면 SQL Server는 다시 인덱스를 사용하게 될 것이다. 여러분이 직접 확인해 보자. 
SELECT * FROM Cust_C WHERE CustomerID = 100 / 1;

이 예에서 보았듯이 인덱스가 생성된 열에 함수나 연산을 가하게 되면, 인덱스를 사용하지 못할 수가 있으니 조심해야 한다. 인덱스가 생성된 WHERE 에 들어 있는 열 이름에는 아무런 함수나 연산을 가하지 말아야 한다. 

* 이러한 실수는 응용프로그램 개발자들이 잘 일으키는 경향이 있다. 이러한 이유로 응용프로그램 개발자도 SQL문을 공부해야 하는 것이다. 

또한 최근 버전의 SQL Server는 이전 버전에 비해서 많이 향상되어 어떤 경우에는 열 이름에 함수가 적용되어도 인덱스를 사용하기도 한다. 하지만 앞의 사례와 같이 그렇지 못한 경우도 많다. 그러므로 최대한 열 이름에는 아무런 가공을 하지 말아야 한다. 