(4)ROLLUP()/GROUPING_ID()/CUBE() 함수
* ROLLUP과 기능이 비슷했던 COMPUTE, COMPUTER BY 절은 SQL Server 1012에서는 제거되었다. 

총합 또는 중간 합계가 필요하다면 GROUP BY절과 함께 ROLLUP 또는 CUBE를 사용하면 된다. 만약 분류(group Name)별로 합께 및 그 총합을 구하고 싶다면 다음의 구문을 사용해 보자. 

SELECT num, groupName, SUM(price * amount) AS [비용] FROM buyTb1 GROUP BY ROLLUP (groupName, num);


중간중간에 num 열이 NULL로 되어 있는 추가된 행이 각 그룹의 소합계을 의미한다. 또, 마지막 행은 각 소합계의 합계, 즉 총합계의 결과가 나왔다. 앞의 구문에서 num은 Primary Key이며, 그룹화되지 않게 하는 효과를 위해서 넣어 준 것이다. 만약 소합계 및 총합계만 필요하다면 다음과 같이 num을 빼면 된다. 

SELECT groupName, SUM(price * amount) AS [비용] FROM buyTb1 GROUP BY ROLLUP (groupName);

한눈에 데이터인지 합계인지를 알고 싶으면 GROUPING_ID() 함수를 사용할 수 있다. GROUPING_ID() 함수의 결과가 0이면 데이터, 1이면 합계를 위해 추가된 열이라고 보면 된다. 

SELECT groupName, SUM(price * amount) AS [비용] FROM buyTb1 GROUP BY ROLLUP(groupName);

CUBE 절도 ROLLUP과 비슷한 개념이지만, 다차원 정보의 데이터를 요약하는 데 더 적당하다. 

우선 다음 테이블과 같은 간단한 데이터를 가정해 보자. 

물품		색상		수량
컴퓨터		검정		11
컴퓨터		파랑		22
모니터		검정		33
모니터		파랑		44

이 테이블에서 물품별 소합계 및 색상별 소합계를 모두 보고싶다면 CUBE를 사용할 수 있다. 
USE sqlDB;
CREATE TABLE cubeTbl(prodName NCHAR(3), color NCHAR(2), amount INT);
GO
INERT INTO cubeTbl VALUES('컴퓨터', '검정', 11);
INERT INTO cubeTbl VALUES('컴퓨터', '파랑', 22);
INERT INTO cubeTbl VALUES('모니터', '검정', 33);
INERT INTO cubeTbl VALUES('모니터', '파랑', 44);
GO
SELECT prodName, color, SUM(amount) AS [수량합계]
FROM cubeTbl GROUP BY CUBE (color, prodName);

앞의 CUBE의 결과를 그림으로 특별히 설명하지 않아도 CUBE의 결과를 이해할수 있을 것이다. 

이로써 기본적이 SELECT 문의 틀을 살펴 보았다. 

[ WITH <common_table_expression>]
SELECT select_list [ INTO new_table ]
[ FROM table_source ]
[ WHERE search_condition ]
[ GROUP BY group_by_expression ]
[ HAVING search_condition ]
[ ORDER BY order_expression [ ASC | DESC ] ]

이제는 WITH절을 살펴보자. WITH 절은 SQL Server 2005부터 적용된 개념으로, SQL을 처음 고웁하는 독자라면 조금 어렵게 느껴지고 또한 깊게 들어갈수록 복잡한 것이 사실이다. 

기본적인 개념을 정확히 파악하는 것이 중요하므로 여러분이 쉽게 이해할수 있도록 간단한 예를 들어 살펴보자. 



※ WITH 절과 CTE
WITH 절은 CTE(Common Table Expression)를 표현하는 구문이다. CTE는 기존의 뷰, 파생 테이블, 임시 테이블 등으로 사용되던 것을 대신할 수 있으며, 더 간결한 식으로 보여지는 장점이 있다. CTE는 ANSI-SQL99표준에서 나온 것이다. 기존의 SQL은 대부분 ANSI-SQL92가 기준으로 하지만 최근의 DBMS는 대개 ANSI-SQL99와 호환이 되므로 다른 DBMS에서도 SQL Server와 같거나 비슷한 방식으로 응용된다. 

CTE는 비재귀적(Non-Recursive) CTE와 재귀적(Recursive)CTE 두 가지가 있다. 아직은 이해하기가 어려울 것이다. 계속 예를 보면서 이해해 보자. 

(1) 비재귀적 CTE
비재귀적 CTE는 말 그대로 재귀적이지 않은 CTE다이다. 단순한 형태이며, 복잡한 쿼리문장을 단순화시키는 데 적합하게 사용될 수 있다. 

우선 비재귀적 CTE의 형식을 보자. 

WITH CTE_테이블이름(열이름)
AS
(
	<쿼리문>
)
SELECT 열이름 FROM CTE_테이블이름;

*SELECT 필드들 FROM CTE_테이블이름; 외에 UPDATE 등도 가능하지만 주로 사용되는 것은 SELECT다. 


앞의 형식이 좀 생소해 보일 수도 있지만, 위쪽을 떼버리고 제일 아래의 SELECT 열이름 FROM CTE_테이블이름만 생각해도 된다. 그런데 기존에는 실제 DB에 있는 테이블을 사용했지만 CTE는 바로 앞의 WITH 절에서 정의한 CTE_테이블이름을 사용하는 것만 다르다. 즉 WITH CTE_테이블이름(열이름) AS... 형식의 테이블이 하나 더 있다고 생각하면 된다. 

쉽게 이해하기 위해서 앞에서 했던 buyTbl에서 총 구매액을 구하는 것을 다시 살펴보자. 

Use sqlDB;
SELECT userID AS [사용자], SUM(price*amount) AS [총구매액] FROM buyTb1 GROUP BY userID;

앞의 결과를 총 구매액이 많은 사용자 순서로 정렬하고 싶다면 어떻게 해야 할까? 물론 앞의 쿼리에 이어서 ORDER BY문을 첨가해도 된다. 하지만 그럴 경우에는 SQL 문이 더욱 복잡해 보일 수 있으므로 이렇게 생각해보자. 앞의 쿼리의 결과가 바로 abc라는 이름의 테이블이라고 생각하면 어떨까? 그렇다면 정렬하는 쿼리는 다음과 같이 간단해진다. 

WITH abc(userID, total)
AS
	( SELECT userID, SUM(price*amount) FROM buyTb1 GROUP BY userID)
SELECT * FROM abc ORDER BY total DESC;

*만약 결과 화면의 열 이름에 Alias를 주고싶다면 제일 마지막 행을 다음과 같이 사용하면 된다. 
SELECT userID AS [사용자], total AS [총구매액] FROM abc ORDER BY total DESC;

앞의 그림을 보면 CTE는 제일 아래 행의 SELECT 문만 보면 된다. 그리고 제일 아래의 FROM abc에서 abc는 실존하는 테이블이 아니라 바로 위에서 WITH 구문으로 만든 SELECT의 결과이다. 단 여기서 AS(SELECT ...에서 조회하는 열과 WITH abc(...와는 개수가 일치해야 한다. 즉 앞의 네모상자 안의 구문은 결국 abc 라는[그림6-5]과 같은 테이블이라고 간주하면 된다. 

다른 예를 들어 한 번더 연습해보자. 

회원 테이블(userTb1)에서 각 지역별로 가장 큰 키를 1명씩 뽑은 후에, 그 사람들 키의 평균을 내보자. 만약 전체의 평균이라면 집계 함수 AVG(height)만 사용하면 되지만, 각 지역별로 가장 큰 키의 1명을 우선 뽑아야 하므로이야기가 복잡해진다. 이럴 때 CTE를 유용하게 사용할수 있다. 한꺼번에 생각하지 말고 한 단계씩 분할해서 생각해 보자. 

1단계 > 각 지역별로 가장 큰 키를 뽑는 쿼리는 다음과 같다. 
SELECT addr, MAX(height) FROM userTb1 GROUP BY addr

2단계 > 앞의 쿼리를 WITH 구문으로 묶는다.
WITH cte_테이블이름(addr, maxHeight)
AS
	(SELECT addr, MAX(height) FROM userTb1 GROUP BY addr)

3단계 > 키의 평균을 구하는 쿼리를 작성한다. 
SELECT AVG(height) FROM cte_테이블이름

4단계 > 2단계와 3단계의 쿼리를 합친다. 이 예에서는 키의 평균을 실수로 만들려고 키에다 1.0을 곱해서 실수로 변환했다. 

WITH cte_userTb1(addr, maxHeight)
AS
	(SELECT addr, MAX(height) FROM userTb1 GROUP BY addr)
SELECT AVG(maxHeight * 1.0) AS [각 지역별 최고키의 평균] FROM cte_userTb1;

이제는 복잡한 쿼리를 작성해야 할 때 이러한 단계로 분할해서 생각하면, 이전보다 더 쉽게 SQL 문을 작성할 수 있을 것이다. CTE는 뷰 및 파생 테이블과 그 용도는 비슷하지만 개선된 점이 많다. 또한 뷰는 계속 존재해서 다른 구문에서도 사용할 수 있지만, CTE와 파생 테이블은 구문이 끝나면 값이 없어지게 된다. 즉 앞의 예에서 cte_userTb1은 다시 사용할 수 없다. 

CTE의 WITH 절은 CTE 외에 다른 문법의 옵션에도 여러번 사용된다. 예를 들어 다음과 같은 구문을 실행하면 오류가 난다. 

SELECT * FROM userTb1
WITH abc(userID, total)
AS
	(SELECT userID, SUM(price * amount) FROM buyTb1 GROUP BY userID)
SELECT * FROM abc ORDER BY total DESC;

오류메시지
메시지 336, 수준 15, 상태 1, 줄2
abc 근처의 구문이 잘못되었습니다. 이 문이 공통 테이블 식인 경우 세미클론으로 이전 문을 명시적으로 종료해야 합니다. 

그러므로 CTE의 WITH 절이 나올 경우에는 앞의 문장 이후에 GO를 써주거나 세미콜론(;)으로 확실히 앞 문장과 분리해줘야 오류가 발생하지 않는다. 

SELECT * FROM userTb1;
GO
WITH abc(userID, total)
...

또는 
SELECT * FROM userTb1;
WITH abc(userID, total)
...

추가로 좀 더 CTE에 대해서 이야기하면 CTE는 다음 형식과 같은 중복 CTE가 허용된다. 

WITH
	AAA (컬럼들)
		AS(AAA의 쿼리문),
	BBB(컬럼들)
		AS(BBB의 쿼리문),
	CCC(컬럼들)
		AS(CCC의 쿼리문)
SELECT * FROM [AAA 또는 BBB 또는 CCC]

그런데 주의할점은 CCC의 쿼리문에서는 AAA나 BBB를 참조할수 있지만 AAA의 쿼리문이나 BBB의 쿼리문에서는 CCC를 참조할수 없다. 즉 아직 정의되지 않은 CTE를 미리 참조할수 없다. 

다음의 간단한 예를 보면 중복 CTE를 쉽게 알 수 있을 것이다. 출력값은 291이 나온다. 

WITH
AAA(userID, total)
AS
	(SELECT userID, SUM(price*amount) FROM buyTb1 GROUP BY userID),
BBB(sumtotal)
AS
	(SELECT SUM(total) FROM AAA),
CCC(sumavg)
AS
	(SELECT sumtotal / (SELECT count(*) FROM buyTb1) FROM BBB)
SELECT * FROM CCC;