Section03 : SQL 프로그래밍
이번에 소개할 내용은 C, C#, VB, Java 등의 프로그래밍 언어를 공부한 경험이 있는 독자라면 비교적 반가운 부분이 될 것이다. 지금 익히는 것은 특히 11장, 12장, 13장의 저장프로시저, 커서, 트리거 부분의 기본이 되므로 잘 알아두자. T-SQL에서도 다른 프로그래밍 언어와 비슷한 분기, 흐름제어, 반복의 기능이 있다. 이러한 기능을 전에 소개했던 변수와 함께 잘사용한다면 강력한 SQL 프로그래밍이 가능하다. 

※ IF ... ELSE
조건에 따라 분기한다. 한 문장 이상이 처리되어야 할 때는 BEGIN...END 와 함께 묶어 줘야만 하며 실행할 문장의 한문장이라도 BEGIN ... END로 묶어주는 것이 좋다. 

형식:
IF <부울 표현식>
	BEGIN
		SQL 문장들1...
	END
ELSE
	BEGIN
		SQL 문장들2...
	END

간단한 구조다. <부울 표현식>(Boolean Expression) 부분이 참(True)이라면 SQL 문장들1을 수행하고 거짓(False)이라면 SQL 문장들 2를 수행한다. 물론 SQL 문장들1 또는 SQL 문장들2가 한 개의 문장이라면 BEGIN ... END는 생략할 수 있다. 또 거짓(False)일 경우이면서 아무것도 할 것이 없다면 ELSE 이하는 생략하면 된다. 

DECLARE @var1 INT --@var1 변수선언
SET @var1 = 100 --변수에 값 대입

IF @val1 = 100 --만약 @var1이 100이라면,
	BEGIN
		PRINT '@var1이 100이다'
	END
ELSE
	BEGIN
		PRINT '@var1이 100이아니다. '
	END

앞의 간단한 사용 예를 통해 쉽게 이해되었을 것이다. 

*전에 이야기했지만, DECLARE 로 선언한 변수는 실행 후 바로 소멸하므로 앞 문장은 모두 한 번에 드래그해서 실행해야 한다. 


※ 여기서 잠깐?
SQL Server 2008부터는 DECLARE 구문에서 바로 값을 대입할 수 있다. 즉 
DECLARE @var1 INT
SET @var1=100

두 줄을 다음과 같이 한줄로 줄여 쓸 수 있다. 
DECLARE @var1 INT = 100



이번에는 AdventureWorks DB의 HumanResources.Employee 테이블을 사용해 보자. 열에는 입사일(HireDate)열이 있는데, 직원번호 111번에 해당하는 직원의 입사일이 5년이 넘었는지를 확인해 보자. 

USE AdventureWorks

DECLARE @hireDate SMALLDATETIME --입사일
DECLARE @curDate SMALLDATETIME -- 오늘
DECLARE @years DECIMAL(5, 2) --근무한 년수
DECLARE @days INT -- 근무한 일수

SELECT @hireDate = HireDate -- HireDate 열의 결과를 @hiredate에 대입
FROM HumanResources.Employee WHERE BusinessEntityID = 111

SET @curDate = GETDATE() -- 현재 날짜
SET @years = DATEDIFF(year, @hireDate, @curDate) --날짜의 차이, 년 단위
SET @days = DATEDIFF(day, @hireDate, @curDate) --날짜의 차이, 일 단위 

IF( @years >= 5)
	BEGIN
		PRINT N'입사한지' + CAST(@days AS NCHAR(5)) + N'일이나지났습니다.'
		PRINT N'축하합니다'
	END
ELSE
	BEGIN
		PRINT N'입사한지' + CAST(@days AS NCHAR(5)) + N'일밖에안되었네요.'
		PRINT N'열심히일하세요.'
	END

결과 값:
입사한지 xxxx 일이지났습니다.
축하합니다. 




※ CASE
IF 구문은 이중 분기라는 용어를 종종 사용한다. 즉 참 아니면 거짓 두 가지만 있기 때문이다. 점수와 학점을 생각해보자. 90점 이상은 A, 80점이상은 B, 70점 이상은 C, 60점 이상은 D, 60점 미만은 F로 분할할수 있다. 이때 5가지의 경우에 따라 상황이 달라지므로 다중 분기라는 용어를 사용한다. IF 문으로 작성해 보자. 

DECLARE @point INT = 77, @credit NCHAR(1)

IF @point >= 90
	SET @credit = 'A'
ELSE
	IF @point >= 80
		SET @credit = 'B'
	ELSE
		if @point >= 70
			SET @credit = 'C'
		ELSE
			if @point >= 60
				SET @credit = 'D'
			ELSE
				SET @credit = 'F'

PRINT N'취득점수==> ' + CAST(@point AS NCHAR(3))
PRINT N'학점==>' + @credit

결과 값:
취득점수==> 77
취득학점==> C

각각의 IF 문안에서 실행할 문장이 하나라서 BEGIN ... END를 뺏는데도 좀 복잡해 보인다. 이중 분기인 IF를 중첩해서 사용하면 다중 분기를 만들 수도 있다. 하지만 이러한 경우에는 CASE 문을 사용하는 것이 더 간편하고 코드도 간결하다. 

DECLARE @point INT = 77, @credit NCHAR(1)

SET @credit = 
	CASE
		WHEN(@point >= 90) THEN 'A'
		WHEN (@point >=80) THEN 'B'
		WHEN (@point >= 70) THEN 'C'
		WHEN (@point >=60) THEN 'D'
		ELSE 'F'
	END

PRINT N'취득점수==> ' + CAST(@point AS NCHAR(3))
PRINT N'취득학점==> ' + @credit

앞에서는 CASE 구문의 결과는 하나의 값만을 돌려주고, 그 값을 @credit 변수에 대입하였다. IF 문을 사용하는 것보다 훨씬 코드가 간결해졌다. CASE 문은 혹시 조건에 맞는 WHEN 이 여러 개이더라도 먼저 조건이 만족하는 WHEN이 처리된다. 그리고 CASE를 종료한다. 

CASE 문의 활용은 SELECT 문에서 더 많이 사용된다. 


실습8 : CASE 문을 활용하는 SQL 프로그래밍을 작성해 보자. 

sqlDB의 내용이 기억나지 않는다면, 6장의 [그림6-10]을 다시 보면서 실습해 보자. 

sqlDB의 구매 테이블(buyTbl)에 구매액(price*amount)이 1,500원 이상인 고객은 최우수고객, 1000원 이상인 고객은 우수고객, 1원 이상인 고객은 일반고객 으로 출력해 보자. 또 전혀 구매 실적이 없는 고객은 유령고객이라고 출력해 보자. 이번 실습의 최종 결과를 먼저 보면 다음과 같다. 

0. sqlDB가 변경되었다면 필자와 같이 나오지 않을 수 있으므로, 백업해 놓은 것을 복원시키자(특별히 sqlDB를 변경하지 않았다면 생략해도 된다.)

USE tempdb;
RESTORE DATABASE sqlDB FROM DISK = 'C:\SQL\sqlDB2012.bak' WITH REPLACE;


1. 먼저 buyTbl에서 구매액(print*amount)을 사용자 아이디(userid)별로 그룹핑 한다. 또 구매액이 높은 순으로 정렬한다. 

USE sqlDB;
SELECT userid, SUM(price * amount) AS [총구매액] FROM buyTbl GROUP BY userid ORDER BY SUM(print * amount) DESC;


2. 사용자 이름이 빠졌으므로, userTbl과 조인해서 사용자 이름도 출력해 보자. 

SELECT B.userid, U.name, SUM(price * amount) AS [총구매액] FROM buyTbl B INNER JOIN userTbl U ON B.userid = U.userid 
GROUP BY B.useridl, U.name ORDER BY SUM(price * amount) DESC;


3. 그런데 buyTbl에서 구매한 고객의 명단만 나왔을 뿐 구매하지 않은 고객의 명단은 나오지 않았다. 오른쪽 테이블(userTbl)의 내용이 없더라도 나오게 하려면 RIGHT OUTER JOIN으로 변경한다. 

SELECT B.userid, U.name, SUM(price * amount) AS [총구매액] FROM buyTbl B RIGHT OUTER JOIN userTbl U ON B.userid = U.userid
GROUP BY B.userid, U.name
ORDER BY SUM(price * amount) DESC;


4. 그런데 결과를 보니 name은 제대로 나왔으나, 구매한 기록이 없는 고객은 userid 부분이 null로 나왔다. 또 메시지 탭을 보면 경고도 나왔다. 이유는 SELECT 절에서 B.userid를 출력하기 때문이다. buyTbl에는 윤종신, 김경호 등이 구매한 적이 없으므로 아예 해당 아이디가 없다. userid의 기준을 buyTbl에서 userTbl로 변경해보자.

SELECT U.userid, U.name, SUM(price * amount) AS [총구매액] FROM buyTbl B RIGHT OUTER JOIN userTbl U ON B.userid = U.userid
GROUP BY B.userid, U.name
ORDER BY SUM(price * amount) DESC;

5. 이제는 총구매액에 따른 고객 분류를 처음에 제시했던 대로 CASE 문만 따로 고려해 보자(다음은 실행하지 말자)

CASE
	WHEN (총구매액 >= 1500) THEN N'최우수고객'
	WHEN( 총구매액 >= 1000) THEN N'우수고객'
	WHEN( 총구매액 >= 1) THEN N'일반고객'
	ELSE N'유령고객'
END

6. 작성한 CASE 구문을 SELECT에 추가한다. 최종 쿼리는 다음과 같다. 
SELECT U.userid, U.name, SUM(price * amount) AS [총구매액],
CASE
	WHEN (총구매액 >= 1500) THEN N'최우수고객'
	WHEN( 총구매액 >= 1000) THEN N'우수고객'
	WHEN( 총구매액 >= 1) THEN N'일반고객'
	ELSE N'유령고객'
END AS [고객등급]

FROM buyTbl B RIGHT OUTER JOIN userTbl U ON B.userid = U.userid
GROUP BY B.userid, U.name
ORDER BY SUM(price * amount) DESC;


이로써 처음에 원했던 결과인[그림7-55]가 나오는 쿼리문을 작성했다. 무조건 제일 마지막의 쿼리문을 만들려고 하면 좀 어려울 수도 있으나, 하나씩 해결하면서 만들어 가면 그리 어렵지 않을 것이다.