※트리거

트리거(Trigger)란 테이블에 부착되어서, 테이블에 INSERT나 UPDATE 또는 DELETE 작업이 발생하면 실행되는 코드를 의미한다. 다른 개체에 비해서 개념이 조금 어려워서 처음에는 잘 이해되지 않을 수도 있다. 트리거의 자세한 내용은 13장에서 다시 알아보고, 지금은 간단한 사례를 통해서 트리거의 용도를 확인해보자. 

예를 들어, 이번에는 당탕이가 회원을 탈퇴하는 경우를 생각해보자. 회원에서 탈퇴하면, 간단히 회원 테이블(memberTBL)에서 당탕이의 정보를 삭제하기만 하면된다(즉 당탕이의 행 데이터를 지우면 된다) 그런데 나중에 회원에서 탈퇴한 사람이 누구누군지 정보를 알 수 있을까? 원칙적으로 당탕이는 이미 데이터베이스에서 없어졌으므로 알 수 있는 방법이 없다. 

그래서 당탕이의 행 데이터를 삭제하기 전에 그 내용을 다른 곳에 먼저 복사해 놓으면 된다. 그런데 이것을 매번 수작업으로하면 지우기 전에 다른 곳에 복사해 놓아야 한다는 것을 깜박 잊을 수도 있으니 이 또한 충분히 믿을 수 없다. 

이때 만약 회원 테이블(memberTBL)에 삭제 작업이 일어난다고 할때 삭제하기 전에 삭제될 데이터를 미리 다른 곳에 자동으로 저장하는 기능이 있다면 그런 실수를 하지 않게 될 것이다. 즉 사용자는 행 데이터를 삭제하기 전에 다른 곳에 저장해야 하는 업무적 부담에서 벗어나게 되며, 삭제된 모든 사용자는 완벽하게 별도의 곳에 저장되어 있을 것이다. 이것이 트리거의 대표적인 용도이다. 

*지금 예로 들은 트리거를 DML 트리거라고 부르며, 그 외에 DDL 트리거, 로그온 트리거 등도 있다. 가장 일반적인 트리거인 DDL 트리거는 13장에서, 그 외의 관리용으로 사용되는 DDL 트리거 및 로그온 트리거는 2권(관리와 응용)에서 상세히 살펴보겠다. 




실습8 : 가장 일반적으로 사용되는 DML 트리거의 용도를 실습해 보자. 

0. 먼저 데이터를 입력하고 수정하고 삭제하는 SQL 문을 연습해 보자. <실습 3>과 같이 SQL Server Management Studio의 개체 탐색기에서도 가능하지만 실무적으로는 지금 배울 SQL을 훨씬 많이 사용하게 될 것이다. (상세한 것은 6장에서 나오니 지금은 기본적인 것만 연습해보자)먼저, 새 쿼리 창을 열고 SSMS 왼쪽 상단의 현재 데이터베이스가 ShopDB인지 확인한다. 

0-1 회원 테이블에 새로운 회원 Figure/연아/경기도 군포시 당정동을 새로 입력하자. 

INSERT INTO memberTBL VALUES ('Figure', '연아', '경기도 군포시 당정동');

별로 어려울 것은 없다. SELECT * FROM memberTBL;로 데이터가 잘 입력되었는지 확인해보자.



0-2  이번에는 이름이 연아인 회원의 주소를 서울 강남구 역삼동으로 변경해 보자.

UPDATE memberTBL SET memberAddress = '서울 강남구 역삼동' WHERE memberName = '연아';

SELECT * FROM memberTBL;로 데이터가 잘 변경되었는지 확인해보자.



0-3 연아가 회원 탈퇴를 했다고 생각하고, 회원 테이블에서 삭제해 보자. 

DELETE memberTBL WHERE memberName = '연아';

SELECT * FROM memberTBL;로 데이터가 잘 삭제되었는지 확인해보자 그런데 연아가 예전에 회원이었다는 정보는 그 어디에도 기록되어 있지 않다. 혹시 연아가 나중에라도 이 쇼핑몰의 회원이었다는 증명을 요구한다면 그걸 증명해줄 방법이 없다. 



1. 앞과 같은 문제를 방지하기 위해서 회원 테이블에서 행 데이터를 삭제할 때 다른 테이블에 지워진 데이터와 더불어 지워진 날짜까지 기록되게 해 보자. 

1-0 먼저 지워진 데이터를 보관할 테이블(deletedMemberTBL)을 만들자. 이번에는 SQL로 만들어 보자(테이블을 생성하는 상세한 내용은 8장에서 배운다)

CREATE deletedMemberTBL
(	memberID	char(8),
	memberName	nchar(5),
	memberAddress	nchar(20),
	deletedDate date	--삭제한 날짜
);

1-1 회원 테이블(memberTBL)에 DELETE 작업이 일어나면 백업 테이블(deletedMemberTBL)에 지워진 데이터가 기록되는 트리거를 생성해 보자. 

CREATE TRIGGER trg_deletedMemberTBL --트리거 이름
ON memberTBL --트리거를 부착할 테이블
AFTER DELETE --삭제 후에 작동하게 지정
AS
	--deleted 테이블의 내용을 백업 테이블에 삽입
	INSERT INTO deletedMemberTBL 
	SELECT memberID, memberName, memberAddress, GETDATE() FROM deleted;

문법이 좀 어렵다. 세부 내용은 13장에서 배우고, 지금부터는 memberTBL에 삭제(delete)작업이 일어나면 삭제된 행이 deletedMemberTBL에 저장된다고만 알면 된다. 


2. 회원 테이블의 데이터를 삭제해 보고 삭제된 데이터가 백업 테이블에 들어가는지 확인해 보자. 


2-0 먼저 회원 테이블에 데이터가 4건 들어 있는지 확인해보자. 아마도 4건의 데이터가 보일 것이다. 

SELECT * FROM memberTBL;


2-1 이중에서 당탕이를 삭제해 보자.

DELETE memberTBL WHERE memberName = '당탕이";

메시지 창을 보면 SQL은 1건을 실행했는데, 총 2개의 행이 영향을 받았다는 메시지가 나올 것이다. 이는 DELETE 문에 의해서 지워진 행1개와 트리거에 의해서 새로 입력된 행1개를 각각 의미한다. 


2-2 회원 테이블에는 삭제되고, 백업 테이블에는 자동으로 들어갔는지 확인해 보자. 

SELECT * FROM memberTBL;
SELECT * FROM deletedMemberTBL;

회원 테이블(memberTBL)에서 삭제된 행이 트리거에 의해서 자동으로 백업 테이블(deletedMemberTBL)에 들어가 있는 것을 확인할 수 있다. 더불어서 deletedMemberTBL 테이블에는 삭제된 날짜(deletedDate)까지 자동으로 입력되어 있다. 

이정도면 트리거를 사용하는 기본적인 용도는 파악했을 것이다. 

지금 다룬 것 외에도 데이터베이스 개체에는 커서, 사용자 정의 함수 등이 있다. 이 내용들은 각 장에서 확인하겠다. 






Section 04 : 데이터베이스 백업 및 관리

백업(Backup)은 데이터베이스 관리 측면에서 가장 중요한 주제 중 한 가지다. 백업과 복원(Restore)에 대한 상세한 내용은 2권(관리와 응용)에서 상세히 다루겠지만, 워낙 중요한 주제이므로 간단한 시나리오를 통해서 백업의 필요성을 확인해 보자. 




※ 백업과 복원
백업은 현재의 데이터베이스를 다른 매체에 보관하는 작업을 말하며, 복원은 데이터베이스에 문제가 발생했을 때 다른 매체에 백업된데이터를 이용해서 원상태로 돌려놓는 작업을 말한다. 

단적으로 얘기해서 DBA(DataBase Administrator, 데이터베이스 관리자)가 해야할 가장 중요한 일을 꼭 한가지만 뽑으라면, 이 백업을 들 수 있겠다. 하드디스크가 깨져서 중요한 데이터를 잃어버린 경험을 해본 독자라면 백업의 필요성을 느낄 것이다. 하물며, 회사의 중요 정보가 보관되어 있는 서버의 디스크가 깨졌을 때 그내용을 모두 잃어버린다면? 생각만 해도 끔찍하다. 




실습9 : 간단한 백업과 복원을 실습해 보자. 

쇼핑몰 데이터베이스를 백업 받은 후에, 실수로 데이터를 모두 삭제해 버렸다. 원상태로 복원해 보자. 

0. 실제로 백업할 때는, 현재의 데이터베이스가 저장된 디스크에 백업해봤자 별 의미가 없다. 디스크가 깨진다면, 어차피 백업한 데이터까지 다 날아가기 때문이다. 그러므로 백업은 테이프(Tape)나 다른 디스크에 해야 의미가 있다. 

0-1 그러나 여러분은 테이프 장치나 별도의 디스크를 준비하기가 어려우므로, 윈도 탐색기에서 C:\백업장치\ 폴더를 만들어서 이 폴더가 테이프나 다른 디스크라고 가정하자. 


0-2 현재 데이터를 확인해 본다. 
USE ShopDB;
SELECT * FROM productTBL;

계속 실습을 따라서 진행한 독자는 3개의 데이터가보일 것이다. 사실 몇 개이든 관계는 없다 단지 현재 몇 개인지만 기억하자. 




1. 쇼핑몰 데이터베이스(ShopDB)를 백업하자. 

1-1 SSMS의 개체 탐색기에서 데이터베이스 > ShopDB를 선택한 후, 마우스 오른쪽 버튼을 클릭하고 [태스크] > [백업]을 클릭한다. 

1-2 데이터베이스를 ShopDB로 선택하고 나머지는 디폴트로 둔다. 그리고 대상에서 <제거> 버튼을 클릭해서 기존의 백업할 위치를 제거한다. 그리고 <추가> 버튼을 클릭한다. 

1-3 백업할 파일을 C:\백업장치\ShopDB.bak으로 직접 입력하고 <확인> 버튼을 클릭한다. 


1-4 최종적으로 대상 부분에 다음과 같이 백업할 위치가 설정되어 있으면 된다. 

1-5 [데이터베이스 백업]창에서 <확인> 버튼을 클릭하면 백업이 진행되고, 완료되었다는 메시지 창이 나올 것이다 <확인> 버튼을 클릭해서 메시지 창을 닫는다. 


2. 윈도 탐색기로 C:\백업폴더\를 확인하면 백업된 파일(ShopDB.bak)을 확인할 수 있다. 


3. 사고를 발생시키자, productTBL의 모든 데이터를 삭제하자. 

DELETE FROM productTBL;

큰 사고다. 삭제가 완료된 후에는 데이터를 살릴 방도는 없다. 당연히 다음의 SQL은 아무런 데이터를 보여줄 수 없을 것이다.(0건의 데이터가 조회된다.)

SELECT * FROM productTBL;


4. 백업 받은 데이터를 복원(Restore)시켜서, 실수로 삭제된 productTBL을 살려(?)내도록 하자.

4-1 사용 중인 DB는 복원할수 없으므로, 우선 현재 데이터베이스를 ShopDB에서 다른 DB로 변경해야 한다. 
USE tempDB;

또한 현재 쿼리 창외에 다른 쿼리창이 열려 있고 거기에서 ShopDB를 사용하고있어도 안된다. tempDB외에 다른 데이터베이스를 현재 데이터베이스로 해도 관계는 없다. 

4-2 SSMS의 개체 탐색기에서 데이터베이스를 선택한후 마우스 오른쪽 버튼을 크릵하고 [데이터베이스 복원]을 선택한다. 


4-3 [데이터베이스 복원]창에서 장치를 클릭한 후<...>버튼을 클릭한다. [백업지정]창에서 <추가> 버튼을 클릭해서 C:\백업장치\ShopDB.bak을 더블클릭한다. 그러면 [백업 지정]창의 백업 위치에 C:\백업장치\ShopDB.bak이 설정된다. <확인>버튼을 클릭해서 [백업 지정]창을 닫는다. 

4-4 다시 [데이터베이스 복원]창에서 다음과 같이 복원 부분이 자동으로 체크되어 있고 데이터베이스가 ShopDB로 선택되어 있으면 <확인> 버튼을 클릭한다. 

4-5 복원되었다는 메시지가 나올 것이다 <확인> 버튼을 클릭한다. 



5. 데이터가 잘 복원되었는지 확인한다. 

USE ShopDB;
SELECT * FROM productTBL;

원래대로 3개의 데이터가 보일 것이다. 이로써 완전한 데이터의 복구에 성공했다. 

백업과 복원에 대해 간단히 실습해 보았다. 백업과 복원은 훨씬 중요한 이야기가 더 많이 있으며, 실무에서는 다양한 경우가 발생할 수 있다. 이는 2권 (관리와 응용)에서 살펴보겠다. 





※ 온라인 설명서 사용법

앞으로 SQL Server를 잘 사용하려면 SQL Server 2012에서 제공해주는 Books Online(온라인 설명서 또는 도움말)을 활용할 수 있어야 한다. 워낙 방대한 내용이라서 하나씩 읽어 보기가 어려울 것이므로, 그때 그때 필요한 주제를 찾을 수 있어야 한다. 



실습 10 : 온라인 설명서를 사용해 보자. 

0. 우리는 2장에서 SQL Server 2012설치할 때 설명서 구성 요소를 설치하지 않았다(2장[그림2-17] 기능 선택을 확인) 그러므로 우선 추가로 도움말을 설치해 보자. 

0-1 SSMS 메뉴의 [도움말] > [도움말 설정 관리]를 선택한다. 

0-2 만약 [로컬 콘텐츠 위치 설정]창이 나오면 디폴트로 두고 <확인> 버튼을 클릭한다. 

0-3 [도움말 라이브러리 관리자]창에서 <온라인에서 콘텐츠 설치>를 클릭한다. 

0-4 잠시 기다리면 관련된 내용이 나타날 것이다. 아래로 조금 스크롤해서 SQL Server 2012아래에 있는 항목을 모두 추가한다. 그러면 오른쪽 부분이 업데이트 보류 중으로 변경된다. 선택이 완료되었으면 <업데이트> 버튼을 클릭한다. 

0-5 한동안 도움말의 내려 받기와 설치가 진행된다. 업데이트가 완료되면 <마침> 버튼을 클릭한다. 

0-6 다시 [도움말 라이브러리 관리자]창이 나오면 온라인 또는 로컬 도움말 선택을 클릭하고 <로컬 도움말 사용>을 선택한 후<확인> 버튼을 클릭한다 <끝내기> 버튼을 클릭해서 창을 닫는다. 


1. 여러분이 가장 많이 사용하게 될 주제 단어로 검색하는 방법을 익혀보자. 예를 들어, 테이블을 생성하는 CREATE PROCEDURE 문에 대한 정보를 얻어 보자. 

1-1 SSMS 메뉴의[도움말] > [도움말 보기]을 클릭한다. 

1-2 [Microsoft 도움말 뷰어]창이 나오면 좌측 하단의 <인덱스>를 클릭하고, 좌측 상단 빈칸에 CREATE PROCEDURE를 입력하면 해당되는 단어가 검색된다. 그 단어를 클릭하면 오른쪽 창에 설명이 나오며 아래로 스크롤하면 문법, 예제 등 상세한 정보를 확인할수 있다. 앞에서 도움말을 한글과 영문 모두 설치했으므로 한글 설명과 영문 설명이 모두 나올 것이다. 

* 도움말의 내용이 초보자를 위한 쉬운 구성이 아니기에 처음에는 그다지 도움이 되지 않지만, 중급자 이상이 된다면 도움말 없이는 SQL Server 2012를 사용하기 어려울 정도로 많은 정보를 제공해 준다. 


1-3 [Microsoft 도움말 뷰어]를 닫는다. 




2. 이번에는 작업 중에 도움말을 열어 보도록 하자

2-1 SSMS의 개체 탐색기에서 데이터베이스 > ShopDB를 선택한 후 마우스 오른쪽 버튼을 클릭하고 [속성]을 선택해서 [데이터베이스 속성]창이 나타나게 한다. 

2-2 [데이터베이스 속성]창에서 해당 페이지를 선택하고 도움말을 클릭하거나 F1키를 누르면 해당 상황의 도움말이 나온다. 

2-3 <취소>버튼을 클릭해서 [데이터베이스 속성]창을 닫는다. 



3. 이번에는 인덱스에 나오지 않는 용어를 찾아보자. 예를 들어 logon 트리거 라는 용어를 찾아보자. 우선 인덱스에서 좌측 상단에 입력해 보고 해당 내용이 색인 목록에 보이지 않는다면, 우측 상단의 빈칸에 해당 단어를 입력한 후 Enter 키를 누르면 된다. 해당되는 내용이 검색된다. 그러면 왼쪽 창에 검색된 목록이 나오고 각각을 클릭하면 오른쪽에 설명이 나온다. 







Section 05 : SQl Server 2012와 응용프로그램의 연결

이 책은 데이터베이스 자체에 대한 것이므로 다른 응용프로그램(C#, Visual Basic, Java 등)과는 주제가 다르기는 하지만 이번에는 앞에서구축한 쇼핑몰 데이터베이스가 실제로 다른 응용프로그램과 연계되어서 사용되는 모습을 간단히 살펴보자. 


※ 여기서 잠깐
지금 응용프로그램과 SQL Server 2012의 연동에 관해 살펴보는 것은 실무에서 어떻게 활용되는 지에 대해 감(?)을 잡기 위해 아주 간략하게 보는 것이다. 실제로 데이터베이스를 응용프로그램과 연동하는 방법이나, ASP.NET의 문법 등에 관한 사항은 이 책의 범위를 벗어난다. 비록 16장에서 Visual Basic .NET을 이용한 기본 연결법을 2권(관리와 응용)에서는 고급 응용프로그램 연동을법을 다루기는 하겠지만 역시 프로그래밍 문법에 대해서는 언급하지 않는다. 프로그래밍과 관련된 세부 내용은 다른 관련 서적이나 웹사이트를 참조해야 할 것이다. 

웹 서비스를 하기 위한 방법은 ASP.NET, ASP, JSP 등 다양한 기술이 있다. 우리는 무료 프로그램인 Microsoft Visual Web Developer 2012 Express를 사용해서 웹과 데이터베이스가 연동되는 것을 실습하도록 하자. 


실습 11 : SQL Server 2012에서 구축한 쇼핑몰 데이터베이스를 웹 상에서 서비스해 보자. 

0. 무료 개발 툴인 웹용 Microsoft VisualStudio Express 2012를 설치하자. 

*웹용 Microsoft Visual Studio Express 2012는 Windows 7, 8과 Windows Server 2008 R2, 2012에만 설치 되므로, 그 이전 버전의 Windows를 사용하거나, 웹용 Microsoft Visual Studio Express 2012의 설치에 문제가 있는 독자는 대신 Microsoft Visual Web Developer 2010 Express를 내려받아서 사용해도 거의 같게 실습할수 있을 것이다. 


0-1 SSMS가 실행되어 있다면 종료한다. 

0-2 http://www.microsoft.com/ko-kr/download/에 접속한 후 페이지 상단에 웹용Microsoft Visual Express 2012를 입력하여 검색한 후에 웹용 Microsoft Visual Studio Express 2012에서 설치파일을 내려 받도록 하자. 

*다운로드 사이트의 링크는 변경될 수 있으므로, 책의 사이트인(http://brain.hanb.co.kr/sql2012/에서 내려받아도 된다. 또한 필요하다면 전체 파일이 들어 있는 VS2012_WebExp_kor.iso(514.4 MB)를 내려받아서, 알집(Alzip)등을 이용해서 압축을 풀거나 데몬 툴(Damon Tools)등을 이용해서 설치해도 된다. 설치 과정 중에 필요 파일 다운로드가 생략되므로 설치 시간이 단축될 수 있다. 

0-3 내려 받은 vns_full.exe를 실행한 후 첫화면에서 동의함을 체크하고 <설치> 버튼을 클릭한다. 

* 필요에 따라서 컴퓨터를 재부팅하라는 메시지가 나올 수도 있는데, 메시지에 따라서 우선 재부팅한다 

0-4 한동안 설치가 진행된다. 설치 중에 재부팅 메시지가나오면 컴퓨터를 재부팅하도록 하자. 재부팅후에 설치가 계속 진행된다. 설치가 최종 완료된 후 재부팅 메시지가 나오면 다시 재부팅한다. 

0-5 윈도[시작] > [모든 프로그램] > [Microsoft Visual Studio 2012 Express] > [VS Express for Web]을 선택한다. 30일 후에 만료된다는 메시지가 나오면 <취소>버튼을 클릭한다. 

* Microsoft Visual Studio Express 2012는 기본적으로 30일 동안 사용할 수 있다. 만약 그 이상을 사용하고자 한다면 온라인 등록 후에 제품 키를 입력하면 되는데 이역시 무료로 등록할 수 있다. 단 Microsoft MSN ID가 필요한데 이 또한 무료로 가입할 수 있다. 



1. ASP.NET 웹 응용프로그램을 작성해 보자. 

1-1 시작 페이지가 나온다. 

1-2 메뉴의 [파일] > [새 웹사이트]를 클릭한 후템플릿은 Visual Basic이 선택된 상태에서 ASP.NET Web Forms 사이트를 선택하고 <확인> 버튼을 클릭한다. 

* Visual Web Developer 2010 Express 를 사용중이라면 ASP.NET 웹사이트를 선택하고 <확인> 버튼을 클릭한다. 


잠시 후에 자동으로 기본 웹사이트가 구성될 것이다. 


1-3 기본적인 틀에 대한 코드가 자동으로 완성된다. 우리는 필요 없으므로 코드를 모두 지운다. 

1-4 하단부의 디자인을 클릭해서 디자인 모드로 변경하고 도구상자를 클릭해서 확장한다. 

1-5 도구 상자에서 데이터 부분을 확장한 후 SqlDataSource를 오른쪽 빈 곳으로 끌어다 놓는다. 

1-6 디자인 창의 SqlDataSource 우측의 [데이터 소스 구성]을 클릭한다. (만약 안보이면 >를 클릭해서 확장한다)

1-7 [데이터 연결 선택]에서 <새연결> 버튼을 클릭하고 microsoft SQL Server를 선택 한 후 <계속> 버튼을 클릭한다. 

1-8 [연결 추가] 창에서 다음 그림과 서버 이름 부분에는 직접 localhost라고 입력한 후, 데이터베이스 이름 선택 또는 입력 부분에서는 클릭해서 ShopDB를 선택한다. <확인> 버튼을 클릭한다. 

1-9 다시 [데이터 연결 선택]이 나오면 컴퓨터 이름.ShopDB.dbo로 되어 있을 것이다 <다음> 버튼을 클릭한다. 

1-10 [응용 프로그램 구성 파일에 연결 문자열 저장]에서도 디폴트로 두고 <다음> 버튼을 클릭한다(연결 문자열 이름은 ShopDBConnectionString 으로 자동 저장된다)

1-11 [Select 문 구성]에서는 테이블 또는 뷰의 열 지정이 선택된 상태에서, 이름 부분은 memberTBL을 선택한다. 그리고 열 부분에서는 *가 체크된 상태에서 <다음> 버튼을 클릭한다(아래쪽의 SELECT 문 부분에 자동 완성된 SQL 문이 보일 것이다. 즉, 지금은 제일 위의 사용자 지정 SQL 문 또는 저장 프로시저 지정을 체크하고 직접 SELECT * FROM [memberTBL]이라고 입력해주는 것과 같다)

1-12 [쿼리 테스트]창에서 <쿼리 테스트>을 클릭해서 쿼리가 정상적으로 실행되는지 확인 한 후에 <마침>버튼을 클릭해 창을 닫는다. 

이렇게 완료되면 ShopDBConnectionString 이라는 연결 문자열을 통해서 ASP.NET과 SQl Server2012가 서로 연결되도록 설정되었다 계속 진행해 보자. 


2. 웹 서비스를 하기 위한 프로그램을 완성해 보자. 

2-1 다시 도구 상자의 데이터 부분의 ListView를 오른쪽 빈 곳에 끌어다 놓자. 

2-2 다음 그림과 같이 데이터 소스 선택에서 SqlDataSource1을 선택한 후, ListView 구성을 클릭한다(ListView 작업부분이 안보이면 >를 클릭해서 확장한다.)

2-3 [ListView 구성]창에서 다음 그림과 같이 적절한 레이아웃을 설정하고, <확인> 버튼을 클릭한다(어떻게 보일지 선택하는 것이므로 어떻게 설정하든 별 관계 없다.


2-4 최종 디자인 창은 다음 그림과 비슷하게 나왔을 것이다. 

2-5 메뉴의 [파일] > [모두 저장]을 선택해 지금까지 한 것을 모두 저장한다. 



3. 실제 웹 서비스되는 것을 확인해 보자. 메뉴의 [파일] > [브라우저에서 보기]를 선택하면 다음과 같이 웹 브라우저가 실행되고 SQL Server의 데이터들이 웹 브라우저에서 보이게 될 것이다. 

* IIS(웹 서버 소프트웨어)가 설치되어 있지 않아도 Visual Studio 2010/ 2012에서는 ASP.Net Development Server 또는 IIS Express를 제공해주므로 웹 서버 없이 웹 서비스를 테스트 할 수 있다. 

지금은 데이터가 몇 건 없기 때문에 <다음>. <이전> 등의 버튼이 비활성화 되어 있지만, 실제로 많은 양의 데이터를 사용하게 된다면 이 버튼들이 모두활성화될 것이다. 또한 Microsoft Visual Studio Express 2012의 사용법에 익숙해진다면 현재의 단순한 화면을 좀 더 화려하게 구성할 수도 있을 것이다. 


4. Internet Explorer 및 Visual Studio Express 2012를 종료한다. 



지금은 웹 서버(IIS)나 DNS 서버를 설정하지 않아서 주소(http://localhost:49162/Default.aspx)가 좀 생소(?)하게 보이겠지만, 실제로 웹 서버를 정상적으로 구축한 후에는 http://도메인이름(예:http://www.mydomain.co.kr)과 같은 주소를 사용해서 SQL Server의 데이터를 웹 상으로 접근하게 되는 것이다. 

응용프로그램과 SQL Server의 좀 더 자세한 연동에 관해서는 SQl Server 2012에 대해서 자세히 공부한 후에 16장에서 다시 살펴보겠다. 

이상으로 SQL Server 2012를 기본적으로 사용하는 방법과, SQL Server2012와 응용프로그램을 연동하는 방식을 개략적이지만 전반적으로 살펴보았다. 당연히 아직 생소한 용어와 개념이 많이 나와서 100% 이해하지 못했을 수도 있다. 그래도 앞으로 이 책을 보는데 아무런 상관이 없다. 오히려 지금 이번 장만 읽고도 다 이해가 된 독자라면 1권(기본편)을 보기에는 실력이 너무 뛰어난(?)독자일 것이다. 

다음 장부터는 이번 장에서 무작정(?)실행해 보았던 내용들을 상세하게 파악하는 시간을 갖게된다. 그러므로 이 책의 전부를 다 본 후에, 다시 이번장을 읽어보도록 하자. 그때는 정말 쉽다는 느낌이 들 것이다. 그런 느낌을 받은 독자는 충분히 SQL Server 2012를 사용할 실력이 갖춰진 것이다. 