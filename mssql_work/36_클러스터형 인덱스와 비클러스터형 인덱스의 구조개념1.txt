※ 클러스터형 인덱스와 비클러스터형 인덱스의 구조
이번에는 클러스터형 인덱스와 비클러스터형 인덱스의 구조는 어떻게 다른지 파악해 보자. 
우선 인덱스 없이 테이블을 생성하고, 다음과 같이 데이터를 입력한 경우를 생각해 보자. 

USE tempdb;
CREATE TABLE clusterTbl
(
	userID		char(8) NOT NULL,
	name		nvarchar(10) NOT NULL);
GO
INSERT INTO clusterTbl VALUES('LSG', '이승기');
INSERT INTO clusterTbl VALUES('KBS', '김범수');
INSERT INTO clusterTbl VALUES('KKH', '김경호');
INSERT INTO clusterTbl VALUES('JYP', '조용필');
INSERT INTO clusterTbl VALUES('SSK', '성시경');
INSERT INTO clusterTbl VALUES('LJB', '임재범');
INSERT INTO clusterTbl VALUES('YJS', '윤종신');
INSERT INTO clusterTbl VALUES('EJW', '은지원');
INSERT INTO clusterTbl VALUES('JKW', '조관우');
INSERT INTO clusterTbl VALUES('BBK', '바비킴');

만약 페이지당 4개의 행이 입력된다고 가정하면 이 데이터는 다음과 같이 구성되어 있을 것이다. 

* 다음 그림은 가정한 것이며, 실제 페이지는 8Kbyte이므로, 훨씬 많은 행 데이터가 들어간다. 

				1000			1001			1002
데이터 페이지		LSG 이승기		SSK 성시경		JKW 조관우
(Heap 영역)			KBS 김범수		LJB 임재범		BBK 바비킴
				KKH 김경호		YJS 윤종신		
				JYP 조용필		EJW 은지원
[그림 9-13]인덱스 없는 테이블의 내부 구성

정렬된 순서만 확인해 보자. 입력된 것과 같은 순서로 보일 것이다. 

*실제로는 데이터량이 적어서 한 개 페이지에 모두 들어 있을 것이다. 

SELECT * FROM clusterTbl;

이 테이블의 userID에 클러스터형 인덱스를 구성해 보자. 인덱스를 생성하는 구문에 대해 서는 잠시 후에 살펴보고 userID를 Primary Key로 지정하면 클러스터형 인덱스로 구성된다고 앞에서 설명했다. 

ALTER TABLE clusterTbl
ADD CONSTRAINT PK_clusterTbl_userID
PRIMARY KEY(userID);

데이터를 다시 확인해 보자. 
SELECT * FROM clusterTbl;


userID로 오름차순 정렬되었다. Primary key로 지정했으므로 클러스터형 인덱스가 생성이 되어서 그렇다. 실제 데이터는 다음과 같이 데이터 페이지가 정렬되고 B-Tree 형태의 인덱스가 형성된다. 

클러스터형 인덱스를 구성하려면 행 데이터를 해당열로 정렬한 후에 루트 페이지를 만들게 된다. 그런데 필자가 클러스터형은 영어 사전과 같다고 이야기했다. 영어 사전은 책 자체가 알파벳 순서의 찾아 보기(인덱스)로 구성되어 있으므로 찾아 보기의 끝(리프 레벨)이 바로 영어 단어(데이터 페이지)다. 

[그림 9-16]에서 볼 수 있듯 클러스터형 인덱스는 루트 페이지와 리프 페이지(중간 페이지가 있다면 중간 페이지도 포함)로 인덱스가 구성되어 있으며 동시에 인덱스 페이지의 리프 페이지는 데이터 그 자체라는 것을 확인할 수 있다. 