13.5 익명 메소드
메소드는 보통 다음과 같이 선언됩니다. 한정자가 없어도, 반환할 값이 없어도(void)매개변수가 없어도 괜찮지만 이름만은 있어야 합니다. 

void DoSomething() // 어느 메소드나 이름만은 갖고 있습니다.
{
}

익명메소드(Anonymous Method)는 제외하고 말입니다. 익명 메소드란 이름이없는 메소드를 말합니다. 황당하지요? 이름이 없는 메소드라니요, 이름이 없는 메소드를 어떻게 사용한다는 걸까요? 그걸 설명하기 위해 이번 절이 존재하는 겁니다. 예를 하나 들어볼게요. 우선 다음과 같이 대리자를 선언했다고 해보겠습니다. 

delegate int Calculate(int a, int b);

이렇게 선언한 대리자의 인스턴스를 만들고 이 인스턴스가 메소드의 구현이 담겨 있는 코드 블록(이것이 익명 메소드입니다.)을 다음과 같이 참조시킵니다. 이때 대리자의 인스턴스를 호출하면 자신이 참조하고 있는 코드를 실행하게 됩니다. 

public static void Main()
{
	Calculate Calc;
	
	Calc = delegate(int a, int b)
		{
			return a + b; //이름을 제외한 메소드의 구현, 이것이 익명 메소드입니다.
		};

	Console.WriteLine("3 + 4 : {0}", Calc(3,4));
}

방금 전의 예제 코드에서도 봤듯이, 익명 메소드는 delegate 키워드를 이용하여 선언합니다. 익명 메소드의 선언 형식을 정리하면 다음과 같습니다. 

대리자_인스턴스 = delegate(매개변수_목록)
		{
			//실행하고자 하는 코드...
		};


당연한 이야기지만, 익명 메소드는 자신을 참조할 대리자의 형식과 동일한 형식으로 선언되어야 합니다. 가령 대리자에서 반환 형식을 int로 선언했다면 익명 메소드도 int형식의 결과를 반환해야 하며, 대리자에서 int 형식의 매개변수 세 개를 받도록 선언했다면 익명 메소드도 역시 동일하게 매개변수를 받도록 구현해야 합니다. 

이제 익명 메소드를 이해할수 있겠지요? 이름이 없어 마냥 불편할 것만 같은 익명 메소드는 때때로 굉장히 유용하게 사용됩니다. 예를 들어 대리자가 참조할 메소드를 넘겨야 할 일이 생겼는데, 이 메소드가 두 번 다시 사용할 일이 없다고 판단되면 그때가 익명 메소드를 사용할 타이밍입니다. 




13.6 이벤트 : 객체에 일어난 사건 알리기
여러분들은 잠자고 있을 때 시간에 맞춰 깨워줄 사람이 있습니까? 잠을 깨워줄 누군가가 없다면 알람 시계의 도움을 받을 수도 있습니다. 깨어날 시간을 설정해놓으면 알람 시계가 시끄럽게 울리며 시간이 됐음을 알려주잖아요. 

프로그래밍 세계에서도 알람 시계처럼 어떤 일이 생겼을 때 이를 알려주는 객체가 필요한 경우가 있습니다.조금 전에 이야기한 알람 시계처럼 특정 시간이 되었을 때 이를 알려주거나 사용자가 버튼을 클릭했을 때 이를 알려주는 객체 말입니다. 이런 객체를 만들 때 사용하는 것이 바로 이벤트(Event)입니다. 이벤트의 동작 원리는 대리자와 거의 비슷합니다. 그도 그럴 것이, 이벤트는 대리자를 event한정자로 수식해서 만들거든요. 
그럼 이제 이벤트를 선언하고 사용하는 절차를 알아보겠습니다. 

1. 대리자를 선언합니다. 이 대리자는 클래스 밖에 선언해도되고 안에 선언해도 됩니다. 
2. 클래스 내에 1에서 선언한 대리자의 인스턴스를 event 한정자로 수식해서 선언합니다. 
3. 이벤트 핸들러를 작성합니다. 이벤트 핸들러는 1에서 선언한 대리자와 일치하는 메소드면 됩니다. 
4. 클래스의 인스턴스를 생성하고 이 객체의 이벤트에 3에서 작성한 이벤트 핸들러를 등록합니다. 
5. 이벤트가 발생하면 이벤트 핸들러가 호출됩니다. 

이벤트를 선언하고 사용하는 방법을 예제를 통해 다시 한번 확인해보겠습니다. 


STEP1
대리자를 선언합니다. 이 대리자는 클래스 밖에 선언해도 되고 안에 선언해도 됩니다. 
delegate void EventHandler(string message);

STEP2
클래스 내에 step1 에서 선언한 대리자의 인스턴스를 event 한정자로 수식해서 선언합니다. 

class MyNotifier
{
	public event EventHandler SomethingHappened; //EventHandler는 step1절차에서 선언한 대리자입니다. 
	public void DoSomething(int number)
	{
		int temp = number % 10;
		if(temp != 0 && temp % 3 == 0) //number가 3, 6, 9로 끝나는 값이될 때마다 이벤트가 발생합니다.
		{
			SomethingHappened(String.Format("{0} : 짝", number));
		}
	}
}

STEP3
이벤트 핸들러를 작성합니다. 이벤트 핸들러는 step1에서 선언한 대리자와 일치하는 메소드면 됩니다. 
class MainApp
{
	static public void MyHandler(string message) // SomethingHappened 이벤트에서 사용할 이벤트 핸들러(MyHandler)는 EventHandler 대리자의 형식과 						동일한 메소드여야 합니다.
	{
		Console.WriteLine(message);
	}
}

STEP4 
클래스의 인스턴스를 생성하고 이 객체의 이벤트에 step3에서 작성한 이벤트 핸들러를 등록합니다. 
class MainApp
{
	static public void MyHandler(string message)
	{
		Console.WriteLine(message);
	}
	static void Main(string[] args)
	{
		MyNotifier notifier = new MyNotifier();
		notifier.SomethingHappened += new EventHandler(MyHandler); //SomethingHappened 이벤트에 MyHandler()메소드를 이벤트 핸들러로 등록
		for(int i=1; i< 30; i++)
		{
			notifier.DoSomething(i);
		}
	}
}


STEP5
이벤트가 발생하면 이벤트 핸들러라 호출됩니다. 
class MainApp
{
	static public void MyHandler(string message)
	{
		Console.WriteLine(message);
	}
	static void Main(string[] args)
	{
		MyNotifier notifier = new MyNotifier();
		notifier.SomethingHappenen += MyHandler;
		
		for(int i=1; i<30; i++)
		{
			notifier.DoSomething(i);
		}
	}
}

어떻습니까, 이벤트는 처음보는 친구 같은데 어쩐지 익숙하게 이해되지 않습니까? 그것은 제가 조금 전에 이야기했듯이 이벤트가 event 키워드로 수식한 대리자이기 때문입니다. 그럼 이벤트와 대리자는 어떤 차이가 있는 걸까요? 그냥 대리자를 사용하면 되지 C#팀은 무엇 때문에 이벤트를 따로 도입했을까요? 이 질문들에 대해서는 다음 절에서 답을 드리겠습니다. 



여기서잠깐? 컴파일러는 알려주지 않는 이벤트 처리기 없는 이벤트
이벤트는 이벤트 처리기를등록하지 않아도 컴파일 에러가 발생하지 않습니다. 덕분에 프로그래머들은초기화 하지 않은 이벤트를 쉽게 놓치곤 합니다. 제 친구 하나는 이런 문제 때문에 이벤트를 선언하면 항상 비어 있는 익명 메소드로 미리 초기화를 해둔다고 합니다. 최악의 경우에도 프로그램이 다운되는 것은 막을수 있으니까요.




13.7 대리자와 이벤트
앞에서 살펴봤듯이, 이벤트는 대리자에 event 키워드로 수식해서 선언한 것에 불과합니다. 언뜻 봤을 때는 둘의 차이가 별로 없는것 같은데, 마이크로소프트의 C#팀은 왜 이벤트를 언어에 추가했을까요?
 
이벤트가 대리자와 가장 크게 다른 점은 바로 이벤트를 외부에서 직접 사용할수 없다는 데 있습니다. 이벤트는 public 한정자로 선언돼 있어도 자신이 선언된 클래스 외부에서는 호출이 불가능합니다. 반면에 대리자는 public이나 internal로 수식되어 있으면 클래스 외부에서라도 얼마든지 호출이 가능하지요. 

delegate void EventHandler(string message);

class MyNotifier
{
	public event EventHandler SomethingHappened;
	//...
}
class MainApp
{
	static void Main(string[] args)
	{
		MyNotifier notifier = new MyNotifier();
		notifier.SomethingHappened("테스트"); //에러 이벤트는 객체 외부에서 직접 호출할수 없습니다. 
	}
}

대리자와 달리 이벤트가 호출될수 없다는 사실은 견고한 이벤트 기반 프로그래밍에 대한 기대를 가능하게 합니다. 예를 들어 생각해보세요. 여러분이 네트워크 상태 변화에 대한 사건을 알리는 클래스를 작성해서 동료에게 줬다고 해봅시다. 이벤트를 객체 외부에서 임의로 호출할수 없게 된다면 동료 프로그래머는 여러분이 작성한 클래스의 객체가 감시하는 실제 네트워크 상태와 상관없이 객체 외부에서 허위로 네트워크 상태 변화 이벤트를 일으킬수 있게됩니다. 이것은 실제로 객체의 상태를 바꾸는 것보다 더 나쁩니다. 객체의 상태를 허위로 나타낼수 있으니 말입니다. 

이런 위협은 대리자로 막을수 없습니다. 이벤트라야 가능합니다. 따라서 대리자는 대리자대로 콜백 용도로 사용하고, 이벤트는 이벤트대로 객체의 상태 변화나 사건의 발생을 알리는 용도로 구분해서 사용해야 합니다. 