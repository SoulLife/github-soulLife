21.1.3 TCP/IP의 주소 체계: IP 주소
우편배달부가 우편물을 배달하기 위해서는 주소가 필요합니다. 인터넷에서도 패킷을 배달하려면 이것을 어디에서 보냈는지, 또 어디로 보낼지에 대한 정보 즉 주소가 필요합니다. 그리고 인터넷에서 사용하는 이 주소를 일컬어 IP 주소 (IP Address)라고 부릅니다. 

여러분에게는 안 좋은 소식일 수도 있는데, 이글을 쓰고 있는 현재 IP 주소 체계의 전환이 진행되고 있습니다. 기존의 IP 주소는 부호가 없는 8비트 정수 4개로 구성됩니다.(즉 IP 주소는 32비트의 크기를 갖습니다)각 8비트 정수는 0에서 255까지의 값을 가질수 있으며 이 정수 네 개를 점(.)으로 연결하여 211.56.101.37과 같은 주소를 구성합니다. 이 주소 체계를 IPv4라고 하는데, 이 체계에서 만들어 낼수 있는 총 주소의 수는 256x256x256x256=4,294,967,296개 뿐입니다. 40억 개가 조금 넘는 수준이죠. 

얼핏 보면 상당히 큰 수 같지만 2010년 한 해에만 PC가 3억 5천만대, 스마트 폰은 3억대 정소가 전세계적으로 출하된 것을 생각해보면 40억은 정말 턱없이 부족한 수임을 알 수 있습니다. 이 수준, 그러니까 1년에 약 6억 5천대 정도의 기기들이 IP 주소를 하나씩 받아간다면 만 7년이 안돼서 주소가 고갈되니 말입니다 아닌게 아니라 1983년부터 할당이 시작된 IPv4주소는 2011년 고갈 상태에 이르렀습니다. 
이 문제를 해결하기 위해 새로 등장한 주소 체계가 있는데, 바로 IPv6입니다. IPv6는 주소 길이가 128비트에 이르며, 이를 이용하여 만들어 낼수 있는 주소의 수는 2128개 즉 340,282,366,920,938,463,374,607,431,768,211,456개에 이릅니다. 사실상 무한에 가까운 수라고 할 수 있습니다. IPv4는 8비트의 수 4개를 .으로 연결했지만 IPv6는 16비트의 수 8개를 콜론(:)으로 연결합니다. 다음은 IPv6 주소의 예입니다. 

3FFE:FFFF:7654:FEDA:1245:BA98:3210:4562
현재는 주소 고갈이 임박한 IPv4 체계에서 IPv6 체계로의 전환이 전 세계적으로 진행되고 있습니다. 빠르면 이 책이 출간되고 몇 년 후에는 IPv4대신 IPv6가 주류 인터넷 주소 체계로 자리잡을 것으로 전망됩니다. 







21.1.4 포트
큰 빌딩은 대개 출입구가 여러 개 있습니다. O마트의 예를 보면 주차장 출입구만 해도 일반 고객 승용차와 수화물 차량 출입구가 나뉘어 있고, 사람들이 드나드는 출입구도 여러 곳이 있지요. 이 출입구를 통해 차도, 사람도, 물건도 드나듭니다. 
컴퓨터도 네트워크 패킷이 드나들려면 주소 뿐만 아니라 출입문이 필요한데요. 이 출입문을 일컬어 포트(Port)라고 부릅니다. Port는 항구 또는 출입구라는 뜻의 낱말인데, 컴퓨터 네트워크에서는 패킷이 드나드는 출입구를 의미합니다. 포트는 부호가 없는 16비트 정수로 0~65535사이의 값을 이용합니다. 예를 들어 웹 브라우저에서 사용하는 HTTP는 80번 포트를 사용하고, FTP는 21번, Telnet은 23번을 사용합니다. 
한편 HTTP나 FTP, Telnet과 같은 표준 프로토콜이 사용하고 있는 포트 번호는 전 세계적으로 합의된 값입니다. 이러한 포트 번호를 일컬어 잘 알려진 포트 번호(Well Known Port Number)라고 부르며, 다음은 그 예입니다. 

* HTTP : 80
* HTTPS : 443
* FTP : 21
* Telnet : 23
* SMTP : 25
* IRC : 194
* IIOP : 535

잘 알려진 포트 번호는 1~1023 사이의 수를 사용하므로 우리가 새로운 애플리케이션 프로토콜을 정의할 때는 이 범위를 피해서 정하는 것이 좋습니다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 포트와 보안
포트를 설명하면서 건물의 출입구와 같다는 설명을 드렸죠? 건물의 보안이 이러한 출입구를 얼마나 잘 단속하느냐에 달려 있듯이 네트워크의 보안도 이런 포트 단속이 큰 비중을 차지합니다. 아예 서비스를 안 하도록 모든 포트를 닫아놓으면 완벽하겠지만, 현실적으로 이것이 불가능하므로 꼭 필요한 포트만 열어놓는 것이 최선이라 할 수 있습니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



21.1.5 TCP/IP의 동작 과정
TCP/IP는 서버/클라이언트 방식으로 동작합니다. 통신을 수행하는 양쪽 끝 중 한쪽에서는 다른 한쪽에 서비스를 제공해야 한다는 것이죠. 서버/클라이언트 방식으로 만들어진 TCP/IP 서비스의 예를 들어볼까요? 웹 서버와 웹 브라우저, FTP 서버와 FTP 클라이언트, SMTP 메일 서버와 메일 클라이언트 등 이들 모두가 TCP/IP 기반으로 만들어졌습니다. 
TCP/IP 통신을 위해서는 먼저 서버가 서비스를 시작해야 합니다. 클라이언트가 접속해올 수 있도록 준비를 하는 것이죠. 서버가 준비되고 나면 클라이언트는 서버에 접속을 시도합니다. 서버가 이 접속 시도를 수락하면 서버와 클라이언트는 동등한 입장에서 데이터를 주고받을수 있게 됩니다. 서버에서 데이터를 보내 클라이언트가 받을 수도 있고, 클라이언트에서 데이터를 보내 서버가 받을 수도 있습니다. 둘 사이의 용무가 끝나면 접속을 종료합니다. 종료 요청은 클라이언트에서 할 수도 있고 서버에서 할 수도 있습니다. 다음 그림은 방금 이야기한 TCP/IP 서버/클라이언트의 동작 과정을 나타냅니다. 


서버				클라이언트
서버시작
연락수락<-----------------------------연결 요청
데이터 수신<--------------------------데이터 전송
데이터 수신<--------------------------데이터 전송
데이터 전송--------------------------> 데이터 수신
              <---------------------------연결 종료(서버 측에서 연결을 종료할 수도있음)
서버 종료

이제 슬슬 TCP/IP 통신을 수행하는 코드에 다가설 때가 된것 같습니다. 다음 절에서는 이번 절에서 설명한 TCP/IP 서버/클라이언트 동작 과정을 추상화한 .NET 클래스인 TcpListener와 TcpClient에 대해 알아보겠습니다. 



21.2 TcpListener와 TcpClient
TcpListener와 TcpClient는 .NET이 TCP/IP 통신을 위해 제공하는 클래스입니다. 이들 클래스가 속해있는 System.Net.Sockets 네임스페이스에는 보다 다양한 옵션과 메소드를 제공하는 Socket 클래스도 있지만, 사용이 복잡하다는 단점이 있기 때문에 이 책에서는 Socket 클래스 대신 TcpListener와 TcpClient 클래스를 이용한 TCP/IP 프로그래밍을 설명하려 합니다. 
TcpListener 클래스는 서버 애플리케이션에서 사용되며, 클라이언트의연결 요청을 기다리는 역할을 합니다.TcpClient는 서버 애플리케이션과 클라이언트 애플리케이션 양쪽에서 사용됩니다. 클라이언트에서는 TcpClient가 서버에 연결 요청을 하는 역할을 수행하며, 서버에서는 클라이언트의 요청을 수락하면 클라이언트와의 통신에 사용할 수 있는 TcpClient의 인스턴스가 반환됩니다. 
서버와 클라이언트가 갖고 있는 TcpClient는 GetStream()이라는 메소드를 갖고 있어서, 양쪽 응용 프로그램은 이 메소드가 반환하는 NetworkStream 객체를 통해 데이터를 주고 받습니다. 
데이터를 보낼 때는 NetworkStream.Write()를, 데이터를 읽을 때는 NewworkStream.Read()를 호출합니다. 데이터를 주고받는 일을 마치고 나서 서버와 클라이언트의 연결을 종료할 때는 NetworkStream 객체와 TcpClient 객체 모두의 Close() 메소드를 호출합니다. 
다음 그림은 서버와 클라이언트에서 TCP/IP 통신을 수행하기 위해 호출하는 TcpListener와 TcpClient, 그리고 NetworkStream 클래스의 메소드들의 흐름을 나타냅니다. 



서버											클라이언트
TcpListener.Start()
TcpListener.AcceptTcpClient()(AcceptTcpClient()가 TcpClient 객체반환)<-------------------------------TcpClient.Connect()
NetworkStream.Read()(TcpClient.GetStream()을 통해 NetworkStream 인스턴스 획득)<-----------------NetworkStream.Write()(TcpClient.GetStream()을 통해
											NetworkStream 인스턴스 획득
NetworkStream.Read()<----------------------------------------------------------------------------------NetworkStream.Write()
NetworkStream.Write()----------------------------------------------------------------------------------->NetworkStream.Read()
NetworkStream.Close()<----------------------------------------------------------------------------------NetworkStream.Close()(서버측의 NetworkStream/TcpClient
											에서 먼저 수행해도 무관
TcpClient.Close()<----------------------------------------------------------------------------------------TcpClient.Close()
Tcp.Listener.Stop()


다음 표에 TcpListener와 TcpClient 클래스의 주요 메소드를 정리했습니다. 

클래스		메소드				설명
TcpListener	Start()				연결 요청 수신 대기를 시작합니다.
		AcceptTcpClient()			클라이언트의 연결 요청을 수락합니다. 이 메소드는 TcpClient 객체를 반환합니다.
		Stop()				연결 요청 수신 대기를 종료합니다.
TcpClient		Connect()				서버에 연결을 요청합니다.
		GetStream()			데이터를 주고받는 데 사용하는 매개체인 NetworkStream을 가져옵니다.
		Close()				연결을 닫습니다. 

간단한 예제 코드를 통해 TcpListener와 TcpClient 클래스의 사용법을 좀 더 알아보겠습니다. 먼저 서버의 TcpListener를 시작하는 코드를 보시죠. 


IPEndPoint localAddress = new IPEndPoint(IPAddress.Parse("192.168.100.17"), 5425); //IPEndPoint는 IP 통신에 필요한 IP주소와 출입구(포트)를 나타냅니다. 
TcpListener server = new TcpListener(localAddress);
server.Start(); //server 객체는 클라이언트가 TcpClient.Connect()를 호출하여 연결 요청해오기를 기다리기 시작합니다. 

TcpListener의 인스턴스인 server가 연결 요청 수신을 받을 준비가 되었습니다. 이번엔 클라이언트에서 TcpClient객체를 생성하고 서버에 연결을 요청하는 코드입니다.

IPEndPoint clientAddress = new IPEndPoint(IPAddress.Parse("192.168.100.18"), 0); //포트를 0으로 지정하면 OS에서 임의의 번호로 포트를 할당해줍니다. 
TcpClient client = new TcpClient(clientAddress);

IPEndPoint serverAddress = new IPEndPoint(IPAddress.Parse("192.168.100.17"), 5425);
client.Connect(serverAddress); //서버가 수신 대기하고 있는 IP주소와 포트 번호를 향해 연결 요청을 수행합니다. 

이번엔 다시 서버입니다. 서버에서 다음과 같이 AcceptTcpClient() 를 호출하면 코드는 블록되어 그자리에서 이 메소드가 반환할 때까지 진행하지 않습니다. AcceptTcpClient()메소드는 클라이언트의 연결 요청이 있기 전까지는 반환되지 않습니다. 기다리고기다리던 연결 요청이 오면 이 메소드는 클라이언트와 통신을 수행할수 있도록 TcpClient 형식의 객체를 반환합니다. 

TcpClient client = server.AcceptTcpClient();

이제 우리는 서버와 클라이언트에 있는 TcpClient 형식의 객체로부터 NetworkStream 형식의 객체를 가져와서 데이터를 읽고 쓸 수 있습니다. 다음의 코드는 TcpClient 객체가 NetworkStream 객체를 반환하고, NetworkStream 객체를 이용하여 데이터를 읽고 쓰는 예제입니다. 


NetworkStream stream = client.GetStream(); //TcpClient를 통해 NetworkStream 객체를 얻습니다. 

int length;
string data = null;
byte[] bytes = new byte[256];

while((length = stream.Read(bytes, 0, bytes.Length)) != 0) //NetworkStream.Read()메소드는 상대방이 보내온 데이터를 읽어 들입니다. 한편 상대와의 연결이 끊어
{						  지면 이 메소드는 0을 반환합니다. 즉 이 루프는 연결이 끊어지기 전까지는 계속됩니다. 
	data = Encoding.Default.GetString(bytes, 0, length);
	Console.WriteLine(String.Format("수신: {0}", data));
	
	byte[] msg = Encoding.Default.GetBytes(data);

	stream.Write(msg, 0, msg.Length); //NetworkStream.Write()메소드를 통해 상대방에게 메시지를 전송합니다. 
	Console.WriteLine(String.Format("송신: {0}", data));
}

어떤 순서로 서버/클라이언트가 TcpListener와 TcpClient를 사용하는지 감이 잡히지요? 이어지는 지면에는 TcpListener와 TcpClient를 활용한 메아리 서버/클라이언트 예제 프로그램이 준비되어 있습니다. 클라이언트가 보내오는 메시지를 서버가 그대로 메아리쳐 돌려보내는 간단한 프로그램입니다. 이 예제 프로그램은 서버나 클라이언트 어느 한쪽만 실행해서는 테스트해볼 수가 없으니 양쪽 프로그램의 코드를 완성한후 같이 실행해야 합니다. 먼저 메아리 서버부터 만들어봅시다. 


using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace EchoServer
{
	class MainApp
	{
		static void Main(string[] args)
		{
			if(args.Length < 1)
			{
				Console.WriteLine("사용법 : {0} <Bind IP>", Process.GetCurrentProcess().ProcessName);
				return;
			}
			string bindIp = args[0];
			const int bindPort = 5425;
			TcpListener server = null;
			try
			{
				IPEndPoint localAddress = new IPEndPoint(IPAddress.Parse(bindIp), bindPort);
				server = new TcpListener(localAddress);
				server.Start();

				Console.WriteLine("메아리 서버 시작... ");
				while(true)
				{
					TcpClient client = server.AcceptTcpClient();
					Console.WriteLine("클라이언트 접속 : {0} ", ((IPEndPoint)client.Client.RemoteEndPoint).ToString());
		
					NetworkStream stream = client.GetStream();

					int length;
					string data = null;
					byte[] bytes = new byte[256];

					while((length = stream.Read(bytes, 0, bytes.Length)) != 0)
					{
						data = Encoding.Default.GetString(bytes, 0, length);
						Console.WriteLine(String.Format("수신: {0}", data));

						byte[] msg = Encoding.Default.GetBytes(data);
						stream.Write(msg, 0, msg.Length);
						Console.WriteLine(String.Format("송신: {0}", data));
					}
					stream.Close();
					client.Close();
				   }
			    }
			    catch(SocketException e)
			    {
				Console.WriteLine(e);
			    }finally
			    {
				server.Stop();
			    }
			    Console.WriteLine("서버를 종료합니다.");
		}
	}
}


다음은 메아리 클라이언트의 코드입니다.

using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;


namespace EchoClient
{
	class MainApp
	{
		static void Main(string[] args)
		{
			if(args.Length < 4)
			{
				Console.WriteLine("사용법 : {0} <Bind IP> <Bind Port> <Server IP> <Message>", Process.GetCurrentProcess				().ProcessName);
				return;
			}
			string bindIp = args[0];
			string bindPort = Convert.ToInt32(args[1]);
			string serverIp = args[2];
			const int serverPort = 5425;
			string message = args[3];
			try
			{
				IPEndPoint clientAddress = new IPEndPoint(IPAddress.Parse(bindIp), bindPort);
				IPEndPoint serverAddress = new IPEndPoint(IPAddress.Parse(serverIp), serverPort);
				Console.WriteLine("클라이언트: {0}, 서버:{1}", clientAddress.ToString(), serverAddress.ToString());

				TcpClient client = new TcpClient(clientAddress);
				client.Connect(serverAddress);

				byte[] data = System.Text.Encoding.Default.GetBytes(message);
				NetworkStream stream = client.GetStream();
				stream.Write(data, 0, data.Length);
				Console.WriteLine("송신: {0}, message);
				data = new byte[256];

				string.responseData = "";
				int bytes = stream.Read(data, 0, data.Length);
				responseData = Encoding.Default.GetString(data, 0, bytes);
				Console.WriteLine("수신: {0}, responseData);
				stream.Close();
				client.Close();
			}catch(SocketException e)
			{
				Console.WriteLine(e);
			}
			Console.WriteLine("클라이언트를 종료합니다.");
		}
	}
}

EchoServer 와 EchoClient를 모두 완성했으면 빌드해서 실행 파일을 만드세요. 그런 후 다음과 같이 커맨드 창 두개를 띄워 한쪽 창에서 먼저 EchpServer를 띄우고 한쪽 창에서는 EchoClient를 실행해서 테스트 해봅시다. 

명령 프롬포트 창에서 ipconfig 명령을 입력하면 자신의 IP를 알 수 있습니다. 여러분의 컴퓨터가 네트워크에 연결되어 있지 않다면 예제를 실행할 때 서버/클라이언트 양쪽에 127.0.0.1 을 입력하세요. 

서버 실행결과
EchoServer
사용법 : EchoServer <Bind IP>

EchoServer 127.0.0.1




클라이언트 실행결과
EchoClient 사용법 : EchoClient <Bind IP> <Bind Port> <Server IP> <Message>

EchoClient 127.0.0.1 10000 127.0.0.1 안녕하세요



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 127.0.0.1
127.0.0.1은 컴퓨터의 네트워크 입출력 기능을 시험하기 위해 가상으로 할당한 주소입니다. 네트워크 출력에 데이터를 기록하면 실제로 패킷이 링크계층을 거쳐 네트워크 바깥으로 나가야겠지요? 하지만 127.0.0.1 을 향해 데이터를 기록하면 링크 계층을 거치지 않고 다시 자기 자신에게로 패킷을 보내게 됩니다. 자신에게 다시 네트워크 입력이 들어온다는 것이죠. 이렇게 되돌아오는 입출력 기능 때문에 루프백(Loopback)주소라고 부르기도 합니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------







21.3 흐르는 패킷
지금은 일반 병사도 스마트폰을 사용하지만, 예전엔 군대에서 인터넷이나 전화를 자유롭게 쓰기가 어려웠습니다. 그래서 편지를 많이 이용했죠. 군복무를 하는 젊은이들은 부모님께 인사를 드리고 싶으면 집주소가 적힌 편지봉투에 자신의 소식을 담은 편지를 접어 넣어 부칩니다. 편지는 아들의 손을 떠나 우체부를 통해 부모님의 손에 전해집니다. 부모님은 편지 봉투를 뜯어 아들이 보내온 소식을 읽겠지요. 아마 우리 대부분은 TCP 기반의 애플리케이션들의 통신 과정이 이렇게 편지를 주고 받는 과정과 같다고 생각할 겁니다. 분위기를 깨서 죄송합니다만 

땡 아닙니다. 

TCP 프로그래밍을 처음 접하면서 가장 흔히 하게 되는 오해 중 하나는 송신 측에서 Write()를 할 때마다 하나의 메시지가 만들어지며 이 메시지를 수신측에서 Read()를 통해 하나씩 읽어온다는 것입니다. TCP는 연결 지향, 흐름 지향 프로토콜입니다. TCP 프로토콜의 데이터 전달 과정은 편지보다는 오히려 전기가 전달되는 모습과 더 닮았다고 할 수 있습니다. 전기는 전선으로 연결 된 상태에서 전기를 갖고 있는 쪽이 전기를 받아야 하는 쪽으로 전기를 흘려 보냅니다. TCP 프로토콜도 전기처럼 양쪽이 연결되어 있어야 하고 보내는 쪽에서 받는 쪽으로 패킷을 흘려보냅니다. 둘이 다른 점도 있습니다. TCP 프로토콜은 전기와 달리 흐름 속에서 각 개별 패킷의 경계를 구분해야 하거든요. 시작이 어디오 끝이 어디인지를 파악해야 한다는 것이죠. 이 이야기는 조금 있다가 다시 하기로 하고 TCP 프로토콜의 흐름에 관해 계속 이야기하겠습니다. 
여름철의 갑작스런 호우로 인해 홍수가 발생하던 지역에 댐을 만들어놓으면 어느 정도 홍수를 예방할 수 있습니다. 댐이 커다란 물탱크 역할을 해줘서 불어난 물을 받아내 하류로 갑작스럽게 흘러가는 것을 막을수 있기 때문입니다. 댐은 홍수뿐만 아니라 예측하지 못한 가뭄에도 잘 기능합니다. 물을 보관하고 있다가 수문을 열어 물을 필요로 하는 하류에 공급하는 것도 댐의 중요한 기능중 하나 입니다. 
TCP 통신 애플리케이션도 이 댐과 같은 역할을 하는 버퍼(Buffer)를 갖고 있습니다. 애플리케이션에서 네트워크를 향해 내보내는 데이터도, 들어오는 데이터도 이 버퍼를 거칩니다. 


송신측						수신측
데이터 > 송신버퍼					수신버퍼 > 데이터


예를 들어 두 애플리케이션이 TCP 연결을 맺고 있고, 송신 애플리케이션이 메모리에 들어 있는 데이터 'a', 'b', 'c'를 수신 애플리케이션에 보내려 한다고 해봅시다.(그리고 'a', 'b', 'c'는 wBuffer라는 이름의 바이트 배열에 담겨 있다고 가정하겠습니다. 

송신측								수신측
c b a(프로그램 메모리) > 송신 버퍼					수신버퍼 > 프로그램메모리(비어있음)

송신 측 애플리케이션에서 writer.Write(wBufferm, 0, 3)을 호출하면 데이터는 다음과 같이 애플리케이션의 메모리에서부터 송신 버퍼로 이동합니다. 
송신측						수신측
프로그램 메모리(비어있음) > 송신버퍼('c' 'b' 'a') 		수신버퍼(비어있음) > 프로그램 메모리(비어있음)

운영 체제는 송신 버퍼에 있는 내용을 연결을 맺고 있는 수신측으로 보내기 시작합니다. 이때 네트워크 대역폭이 넓고 품질도 좋다면 많은 데이터가 빠른 속도로 수신측으로 이동할 것이고, 그렇지 않다면 다음과 같이 아주 조금씩 데이터가 이동할 수도 있습니다. 
송신측						수신측
프로그램메모리(비어있음) > 송신버퍼('c' 'b')		수신버퍼('a') > 프로그램 메모리(비어있음)

한편 수신 측의 애플리케이션에서는 데이터를 담기 위한 rBuffer를 선언하고 reader.Read(rBuffer, 0, 16)을 호출합니다. 이 코드는 16바이트를 읽어오려고 시도하지만 실제 수신 버퍼에는 'a' 하나밖에 없으므로 rBuffer에는 'a'가 담기고 Read() 메소드는 실제로 읽은 바이트 수 1을 반환합니다. 한편 그러는 동안 수신 버퍼에는 송신 측에서 보낸 'b' , 'c'가 도착했습니다. 

송신측						수신측
프로그램 메모리 > 송신버퍼				수신 버퍼('c' 'b') > 프로그램메모리('a')

이번에도 수신측은 reader.Read(rBuffer, 0, 16)을 호출했는데 이번엔 'b' 'c'가 rBuffer에 담기고 Read()메소는 읽은 바이트 수 2를 반환합니다. 이렇게 해서 송신측의 프로그램 메모리에 있던 'a' 'b' 'c'가 모두 수신측의 프로그램 메모리로 전달되었습니다. 

송신측						수신측
프로그램메모리 > 송신버퍼				수신 버퍼 > 프로그램 메모리('c' 'b' 'a')

이어서 방금 설명한 내용을 바탕으로 조금 복잡한 네트워크 예제 프로그램을 만들어보려 합니다. 시간이 없거나 관심이 없는 독자들은 그냥 지나가도 상관없지만 이제 이 책의 페이지도 얼마안남았으니 마저 다 읽어보는 것을 권하고 싶군요. 




21.4 프로토콜 설계와 네트워크 애플리케이션 프로그래밍 예제
터놓고 이야기해서, TCP 네트워크 프로그래밍은 복잡하고 성가시기 짝이 없습니다. 내 컴퓨터에서 사용하던 객체를 바이트 스트림으로 바꿔 보내야하고, 한편으로는 바이트 스트림으로 들어온 데이터를 내 컴퓨터에서 다루기 위해 객체로 바꿔야 합니다. 수신한 데이터가 정상적인지도 검사해야 하고, 안정성을 위해 연결 상태도 수시로 점검해야 합니다. 그리고 이모든 고려 사항을 코드에 반영해야 합니다. 그뿐 아니라 기능 테스트를 할 때도 두 개의 프로그램을 띄워야하고, 제대로 된 환경에서 시험하려면 컴퓨터도 두 대 이상 필요합니다. 테스트와는 바늘과 실 관계에 있는 디버깅도 테스트가 번거로운 만큼 역시 번거롭습니다. 
제가 이런 이야기를 꺼내는 이유가 있습니다. 지금부터 만들어볼 예제 프로그램이 딱 복잡하고 성가시게 생겼거든요. 기능은 상당히 간단한데도 말입니다. 우리가 만들 예제 프로그램은 간단한 파일 전송 기능을 할 겁니다. 당연히 서버/클라이언트로 구성되고, 앞서 만들었던 메아리 서버/클라이언트 프로그램보다 훨씬 복잡한 프로토콜과 구현을 가질 겁니다. 

이번 절에서 바로 예제 프로그램 코드로 다이빙했다가는 다시 살아 나오기가 쉽지 않을 겁니다. 약가느이 준비운동이 필요합니다. 다름 아닌 프로토콜 설계 말입니다. 사실 파일 전송을 위한 프로토콜로 FTP(File Transfer Protocol)가 있긴 하지만 책의 예제로 사용하기에는 프로토콜이 너무 큰 데다 직접 프로토콜 설계를 해보면 다른 프로토콜을 이해하는 데에도 도움이 되므로 간단한 프로토콜을 여러분과 같이 직접 만들어보겠습니다. 