CHAPTER13 : 대리자와 이벤트
지금까지 우리는 뭔가를 지시하면 컴퓨터가 그 명령을 수행하는 프로그램만 작성해왔습니다. 이번 장에서는 컴퓨터에 어떤 사건이 일어나면 그 사건에 반응하는 프로그램을 만드는 방법을 이야기해보려고 합니다. 컴퓨터에 일어날 수 있는 사건에는 어떤 것이 있을까요? 사용자가 마우스 버튼을 클릭한다든지 이메일이 도착했다든지, 파일 복사가 완료됐다든지, 또는 새로운 외부 장치가 연결됐다든지 하는 일이 있겠지요. 

사건을 영어로 이벤트(Event)라고 하는데, 컴퓨터에 발생하는 이벤트에 반응하도록 프로그램을 만드는 것을 일컬어 이벤트 기반 프로그래밍(Event Driven Programming)이라고 부릅니다. 멀티패러다임 언어인 C#이 지원하는 또 하나의 프로그래밍 패러다임인 셈이죠. 이벤트 기반 프로그래밍은 GUI(Graphic User Interface)를 만들때 특히 유용합니다. C#에서 지원하는 이벤트 기반 프로그래밍을 이해하려면 먼저 대리자를 알아야하고, 그 다음에 이벤트를 알아야 합니다. 곧이어 시작하는 절에서는 대리자부터 이야기를 풀어보겠습니다. 





13.1 대리자란?
출장을 나온 상현이는 사장님께 급히 보고를 드릴 일이 있어 회사에 전화를 걸었습니다. 그런데 전화를 받은 사람은 사장님이 아닌 사장님의 비서였습니다. 상현이는 비서에게 사장님이 돌아오시면 제게 전화 부탁드린다고 전해주세요. 라는 메모를 남기고 전화를 끊었습니다. 잠시 후 사무실에 돌아온 사장님은 비서의 메모를 받고 상현이에게 전화를 걸어 통화를 했습니다. 

이 이야기에서 상현이가 비서에게 했던 부탁(사장님이 돌아오면 전화해달라는 메모)을 영어로 콜백(Callback)이라고 부르는데, 이 콜백은 프로그래밍에서도 사용됩니다. 전화주세요 메모처럼 어떤 일을 수행하는 코드 , 즉 콜백을 작성하고 다른 코드에 이 콜백을 맡겨 대신 실행하게 합니다. 여기에서 콜백을 맡아줄 코드는 컴파일 시점이 아닌 프로그램 실행중에 결정됩니다. 

C#에서는 콜백을 맡아 실행하는 일을 대리자가 담당합니다. 대리자(delegate)는 다른 말로 대리인 또는 사절 이라고 할 수 있습니다. 즉 누군가를 대신해서 일해주는 것을 전문으로 하는 사람을 의미하지요. 여러분은 객체의 주소를 가리키는 참조를 알고 있지요? 대리자는 메소드에 대한 참조입니다. 대리자에 메소드의 주소를 할당한 후 대리자를 호출하면 이 대리자가 메소드를 호출해줍니다. 

코드를 통해 자세히 알아보겠습니다. 대리자는 다음과 같이 delegate 키워드를 이용해서 선언합니다. 

한정자 delegate 반환_형식 대리자_이름(매개변수_목록);

이 문법을 잘 보세요. delegate만 빼면 우리가 많이 사용하던 그 무엇과 똑같지 않습니다.? 네 메소드 말입니다. 대리자는메소드에 대한 참조이기 때문에 자신이 참조할 메소드의 반환 형식과 매개변수를 명시해줘야 합니다. 

대리자의 선언 예를 한번 볼까요?

delegate int MyDelegate(int a, int b);

실제로 선언해놓고 보니 더더욱 메소드와 비슷해 보이네요. 여기서 한 가지 알아둘 것이 있습니다. 대리자는 인스턴스가 아닌 형식(Type)입니다. 다시 말해 myDelegate는 int, string과 같은 형식이며 메소드를 참조하는 그 무엇을 만들려면 MyDelegate의 인스턴스를 따로 만들어야 한다는 말입니다. 이에 대해서는 잠시 후에 계속 이야기하겠습니다. 
자 대리자를 선언했으니 이번에는 대리자가 참조할 메소드를 선언해보겠습니다. 이 메소드들의 반환형식과 매개변수는 대리자의 반환 형식과 매개변수를 따라야 합니다. 

int Plus(int a, int b)
{
	return a + b;
}
int Minus(int a,int b)
{
	return a - b;
}

Plus()와 Minus() 메소드 모두 MyDelegate대리자의 반환 형식과 매개변수를 따르고 있습니다. 
그럼 이 메소드를 MyDelegate가 참조하도록 해보겠습니다. 

MyDelegate Callback;

Callback = new MyDelegate(Plus); //대리자의 인스턴스를 만들 때도 new 연산자가 필요합니다. 
Console.WriteLine(Callback(3,4)); //7출력

Callback = new MyDelegate(Minus);
Console.WriteLine(Callback(7,5)); //2출력


그냥 메소드를 호출하면 되지, 무엇 때문에 이런 난리궁을 피는 걸까?
이런 의문이 생기죠? 대리자가 왜 유용한지는 다음 절에서 자세히 설명할 테니 지금은 코드에 집중해주세요. Callback은 반환 형식이 int, 매개변수가(int, int)인 MyDelegate 대리자의 인스턴스입니다. myDelegate() 생성자를 호출해서 Callback 객체를 생성했습니다. 그리고 생성자 인수는 각각 Plus()메소드와 Minus()메소드를 사용했습니다. MyDelegate()메소드에 Plus()메소드를 인수로 넘기면 Callback은 Plus()메소드를 참조하고, Minus()메소드를 넘기면 Minus()메소드를 참조합니다. 이때 메소드를 호출하듯 Callback을 사용하면 Callback은 현재 자신이 참조하는 주소에 있는 메소드의 코드를 실행하고 그 결과를 호출자에 반환합니다. 다음 그림은 대리자에 의해 메소드가 호출되는 과정을 설명합니다. 

자 이제 지금까지 설명했던 대리자를 이용하여 콜백을 구현하는 과정을 요약해봅시다. 

1. 대리자를 선언한다.
2. 대리자의 인스턴스를 생성한다. 인스턴스를 생성할 때는 대리자가 참조할 메소드를 인수로 넘긴다. 
3. 대리자를 호출한다. 

대리자가 무엇인지, 어떻게 사용하는지 정리됐습니까? 그럼 대리자의 예제 프로그램을 만들어볼 차례입니다. 





13.2 대리자는 왜, 그리고 언제 사용하나요?
프로그래밍을 하다보면 값 이 아닌 코드 자체를 매개변수에 넘기고 싶을 때가 많습니다.예를 들어서 배열을 정렬하는 메소드를 만든다고 생각해보세요. 여러분은 이 메소드가 오름차순으로 정렬하도록 하겠습니까, 내림차순으로 정렬하도록 하겠습니까? 아니면 특별한 계산식을 거쳐서 나오는 결과순으로 정렬하도록 만들겠습니까? 아 고민되네요. 이 메소드가 정렬을 수행할 때 사용하는 비교 루틴을 매개변수에 넣을수 있으면 이런고민은 메소드를 사용하는 프로그래머가 알아서 하라고 하면 될텐데 말입니다. 

바로 이런때 대리자가 사용됩니다. 대리자는 메소드에 대한 참조이므로, 비교 메소드를 참조할 대리자를 매개변수에 받을수 있도록 정렬 메소드를 작성해놓으면 우리의 고민은 해결됩니다. 어디 한번 이른 코드를 만들어봅시다. 

STEP1
먼저 Compare 대리자를 선언합니다. 
delegate int Compare(int a, int b);

STEP2
Compare 대리자가 참조할 비교 메소드를 작성합니다. 
static int AscendCompare(int a,int b)
{
	if(a > b)
		return 1;
	else if(a == b)
		return 0;
	else
		return -1;
}

STEP3
정렬 메소드를 작성합니다. 이때 매개변수로는 정렬할 배열과 비교할 메소드를 참조하는 대리자를 입력받습니다. 

static void BubbleSort(int[] DataSet, Compare Comparer)
{
	int i = 0;
	int j = 0;
	int temp = 0;
	for(i=0; i<DataSet.Length-1; i++)
	{
		for(j=0; j<DataSet.Length-(i-1); j++)
		{
			if(Comparer(DataSet[j], DataSet[j+1] ) > 0) //Comparer가 어떤 메소드를 참조하고 있는가에 따라 정렬 결과가 달라집니다.
			{
				temp = DataSet[j+1];
				DataSet[j+1] = DataSet[j];
				DataSet[j] = temp;
			}
		}
	}
}

STEP4 
정렬 메소드를 호출하면 우리가 원하던 대로 정렬 방식이 분리된 정렬 코드를 얻을수 있습니다. 지금까지 입력한 코드는 오름차순 정렬 코드입니다. Comparer가 참조할 메소드를 새로 구현해서 내림차순으로 정렬해봅시다. 다음처럼 BubbleSort를 호출할 때인수로 메소드를 넘기면 됩니다 

int[] array = {3,7,4,2,10};
BubbleSort(array, new Compare(AscendComparer)); // array는 { 2, 3, 4, 7 , 10}

이제 여러분이 직접 코드를 작성해보면서 대리자의 힘을 느껴보시기 바랍니다. 