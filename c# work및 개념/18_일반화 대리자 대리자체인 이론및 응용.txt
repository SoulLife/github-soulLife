13.3 일반화 대리자
대리자는 보통의 메소드뿐 아니라 일반화 메소드도 참조할 수 있습니다. 물론 이 경우에는 대리자도 일반화 메소드를 참조할수 있도록 형식 매개변수를 이용하여 선언되어야 합니다. 형식 매개변수를 이용해서 대리자를 선언하는 요령은 메소드와 같습니다. 홑화살괄호<와 > 사이에 형식 매개변수를 넣어주면 됩니다. 가령 우리가 조금 전에 만들었던 정렬 예제 프로그램에서 선언한 Compare 대리자를 일반화하여 선언하면 다음과 같습니다. 

delegate int Compare<T>(T a, T b);

delegate 키워드만 빼면 일반화 메소드를 선언하는 방법과 같지요? Compare 대리자를 매개변수로 사용하는 BubbleSort()메소드도 형식 매개변수를 받아들이도록 변경해야 합니다 

static void BubbleSort<T>(T[] DataSet, Compare<T> Comparer)
{
	나머진 같음
}

구슬이 서말이라도 꿰어야 보배이듯, 대리자도 참조할 메소드 구현이 없으면 아무 소용이 없습니다. 일반화 버전의 대리자를 지원하는 비교 메소드를 구현해보겠습니다. 다음은 AscendCompare()메소드의 일반화 버전입니다. 

static int AscendCompare<T>(T a, T b) where T : IComparable<T>
{
	return a.CompareTo(b);
}

단 네줄짜리 코드지만, 조금 더 자세히 살펴볼 필요가 있을것 같군요. 먼저 형식 매개변수<T>가 추가된 것은 여러분도 잘 이해하고 있으리라 생각하며, 형식 매개변수의 제약 조건 where T에 대해서도 역시 이해하고 있다고 생각합니다. 11장에서 이미 공부했던 내용들이니까요. 문제는 문법 자체가 아닌 IComparable<T>가 갑자기 왜 나왔냐 하는 겁니다. 그리고 AscendCompare()메소드가 IComparable<T>를 상속하는 a 객체의 CompareTo()메소드를 호출해서 그 결과를 호출하는 것도 이해가 안될 겁니다. 

사실은 이렇습니다. System.Int32(int), System.Double(double)을 비롯한 모든 수치 형식과 System.String(string)은 모두 IComparable을 상속해서 CompareTo()메소드를 구현하고 있거든요. 이들 모두의 CompareTo()메소드는 매개변수가 자신보다 크면 -1, 같으면 0, 작으면 1을 반환합니다. 그래서 AscendCompare()메소드가  a.CompareTo(b)를 호출하면 우리가 원하는 대로 오름차순 정렬에 필요한 비교 결과를 얻을수 있게 됩니다. 






13.4 대리자 체인
13장에서 대리자는 메소드의 참조라고 여러번 이야기했는데, 대리자에는 재미있는 속성이 있습니다. 그건 바로 대리자 하나가 여러 개의 메소드를 동시에 참조할수 있다는 것입니다. 예를 들어 다음과 같이 대리자와 그 대리자의 형식에 맞춘 메소드를 몇 개 선언해봅시다. 

delegate void ThereIsAFire(string location);

void Call119(string location)
{
	Console.WriteLine("소방서죠? 불났어요! 주소는 {0}", location);
}

void ShotOut(string location)
{
	Console.WriteLine("피하세요 {0}에 불이났어요!", location);
}
void Escape(string location)
{
	Console.WriteLine("{0}에서 나갑시다!", location);
}

이렇게 선언한 메소드들은 ThereIsAFire 대리자의 인스턴스가 자신들을 동시에 참조할수 있도록 다음과 같이 +=연산자를 이용하여 결합할수 있습니다. 

ThereIsAFire Fire = new ThereIsAFire(Call119);
Fire += new ThereIsAFire(ShotOut);
Fire += new ThereIsAFire(Escape);

이렇게 결합해놓은 대리자는 다음과 같이 한 번만 호출하면 자신이 참조하고 있는 Call119(), ShoutOut(), Escape() 메소드를 모두 호출합니다. 

Fire("우리집"); //Fire를 호출하면 다음을 출력합니다. 소방서죠? 불났어요! 주소는 우리집 피하세요! 우리집에 불이났어요! 우리집에서 나갑시다.!

재미있지요? 대리자 체인은 여러 개의 콜백을 동시에(엄밀하게 말하면 동시는 아닙니다. 대리자 체인을 따라 차례대로 호출하니까요) 호출해야 할 때 유용합니다. 대리자 체인을 만드는 것은 += 연산자가 아니어도 가능합니다. 다음은 대리자 체인을 만드는 몇 가지 방법입니다. 

// + 연산자와 = 연산자 사용하기
ThereIsAFire Fire = new ThereIsAFire(Call119) + new ThereIsAFire(Shoutout) + new ThereIsAFire(Escape);

//Delegate.Combine() 메소드 사용하기
ThereIsAFire Fire = (ThereIsAFire) Delegate.Combine(new ThereIsAFire(Call119), new ThereIsAFire(Shoutout), new ThereIsAFire(Escape));

이렇게 만든 대리자 체인은 += 연산자를 이용해 만든 대리자 체인과 똑같습니다. 여러분 취향에 맞는 방법을 골라 사용하면 됩니다. 하지만 저라면 += 연산자를 사용하겠습니다. 제일 편하니까요. 한편 어떤 경우에는 대리자 체인에서 특정 대리자를 끊어내야 할때도 있습니다. 그런 경우에는 -= 연산자를 이용하면 됩니다. 아 물론 - 연산자와 = 연산자를이용하는 방법도 있고, Delegate.Remove() 메소드를 이용하는 방법도 있습니다. 