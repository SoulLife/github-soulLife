14.5 식 트리
여기서 잠깐? 어려울수 있습니다.
저는 나중에 등장할 LINQ를 이해하는데 도움이 되리라 생각해서 이번 절 내용을 준비했습니다만, 사실 이 부분을 몰라도 이어지는 내용을 공부하는 데는 별지장이 없습니다. 내용이 많이 부담스럽다면 일단 이 부분은 잠시 접어두고 다음 내용을 공부하는 것도 방법입니다. 

아마 자료구조 또는 알고리즘을 공부해본 경험이 없는 독자들은 식 트리(Expression Tree)의 개념이 생소할 겁니다. 식 트리를 설명하기 전에 트리 자료구조에 대해 먼저 알아보는 것이 좋을것 같군요. 
트리는 다음과 같이 노드(Node)마디로 구성되며, 각 노드는 서로 부모-자식 관계로 연결됩니다. 

그림에서 A, B, C, D, E, F, G는 트리를 이루는 노드이며, 최상위 노드(그림을 뒤집으면 최하위 노드가 되겠지요?)인 A를 트리의 뿌리가 되는 루트(Root)노드라고 합니다. 그리고 루트로부터 뻗어 나온 노드중 가장 끝에 있는 D, E, F, G와 같은 노드를 잎(Leat)노드, 또는 단말(Teminal)노드라고 합니다. 제가 조금전에 각 노드는 부모-자식 관계로 맺어져 있다고 했지요? A의 자식 노드는 B, C 노드이며, B 노드의 자식 노드는 D, E, 그리고 C노드의 자식 노드는 F, G입니다. 
평범한 트리 자료구조에서는 부모 노드가 여러 개의 자식 노드를 가질 수도 있지만, 식 트리는 한 부모 노드가 단 두 개만의 자식 노드를 가질수 있는 이진 트리(Binary Tree)입니다. 
자 이제 식 트리 이야기를 할수 있겠군요. 식 트리란, 식을 트리로 표현한 자료구조를 말합니다. 예를 들어 1*2+(7-8)이라는 식을 식 트리로 표현하면 다음과 같습니다

식 트리에서 연산자는 부모 노드가 되며, 피 연산자는 자식 노드가 됩니다. 위의 그림을 보세요. 1*2에서 *는 부모 노드, 1과 2는 *의 자식 노드가 됐습니다. 7-8도 마찬가지입니다. -가 부모노드, 8과 8은 각각 자식 노드가 됐지요. 같은 원리로 1*2+(7-8)은 +연산자가 부모 노드, 피 연산자인 1*2와 7-8은 +의 자식 노드입니다. 이렇게 식 트리로 표현된 식은 트리의 잎 노드부터 계산해서 루트까지 올라가면 전체 식의 결과를 얻을수 있습니다. 

식 트리 자료구조는 컴파일러나 인터프린터를 제작하는 데도 응용됩니다. 컴파일러는 프로그래밍 언어의 문법을 따라 작성된 소스 코드를 분석해서 식 트리로 만든 후 이를 바탕으로 실행 파일을 만들지요. 완전한 C#컴파일러는 아니지만, C#은 프로그래머가 C# 코드안에서 직접 식 트리를 조립하고 컴파일해서 사용할수 있는 기능을 제공합니다. 다시 말해 프로그램 실행 중에 동적으로 무명함수를 만들어 사용할수 있게 해준다는 이야기입니다. 멋지지요?

식 트리를 다루는데 필요한 클래스들은 System.Linq.Expressions 네임스페이스 안에 준비되어 있습니다. 바로 Expression 클래스와 아이들(파생 클래스들)입니다.


Expression의 파생 클래스			설명
BinaryExpression				이항 연산자(+,-,*,/,%,&,|,^,<<,>>,&&,||,==,!=,>,>=,<,<=)를 갖는 식을 표현합니다.
BlockExpression				변수를 정의할수 있는 식을 갖는 블록을 표현합니다.
ConditionalExpression			조건 연산자가 있는 식을 나타냅니다. 
ConstantExpression				상수가 있는 식을 나타냅니다.
DefaultExpression				형식(type)이나 비어있는 식의 기본값을 표현합니다.
DynamicExpression				동적 작업을 나타냅니다. 
GotoExpression				return, break, continue, goto와 같은 점프문을 나타냅니다. 
IndexExpression				배열의 인덱스 참조를 나타냅니다 
InvocationExpression			대리자나 람다식 호출을 나타냅니다. 
LabelExpression				레이블을 나타냅니다.
LambdaExpression				람다식을 나타냅니다. 
ListInitExpression				컬렉션 이니셜라이저가 있는 생성자 호출을 나타냅니다. 
LoopExpression				무한 반복을 나타냅니다. 무한 반복은 break 문을 이용해서 종료할수 있습니다. 
MemberExpression				객체의 필드나 속성을 나타냅니다. 
MemberInitExpression			생성자를 호출하고 새 객체의 멤버를 초기화하는 동작을 나타냅니다. 
MethodCallExpression			메소드 호출을 나타냅니다.
NewArrayExpression			새 배열의 생성과 초기화를 나타냅니다. 
NewExpression				생성자 호출을 나타냅니다. 
ParameterExpression			명명된 인수를 나타냅니다. 
RuntimeVariablesExpression			변수에 대한 런타임 읽기/쓰기 권한을 제공합니다. 
SwitchExpression				다중 선택 제어 식을 나타냅니다. 
TryExpression				try~catch~finally 문을 나타냅니다. 
TypeBinaryExpression			형식 테스트를 비롯한 형식(Type)과 식(Expression)의 연산을 나타냅니다. 
UnaryExpression				단항 연산자를 갖는 식을 나타냅니다. 

이 표의 클래스들은 Expression 클래스의 파생 클래스입니다. 그렇다면 Expression 클래스는 어떤 기능을 갖고 있을까요? Expression 클래스는 식 트리를 구성하는 노드를 표현합니다. 그래서 Expression을 상속받는 이 표의 클래스들이 식 트리와 각 노드를 표현할수 있게 되지요. 하지만Expression 클래스는 식 트리를 구성하는 노드를 표현하는 것 외에도, 앞의 표에 열거된 클래스들의 객체를 생성하는 역할도 담당합니다. Expression 클래스 자신은 abstract로 선언되어 자신의 인스턴스는 만들수 없지만, 파생 클래스의 인스턴스를 생성하는 정적 팩토리 메소드를 제공합니다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 팩토리 메소드
팩토리 메소드(Factory Method)는 클래스의 인스턴스를 생성하는 일을 담당하는 메소드를 가리키는 용어입니다. C#에는 객체를 생성하는 생성자 메소드가 있지만, 가끔은 이것만으로 충분하지 않을 때가 있습니다. 객체의 생성에 복잡한 논리가 필요한 경우, 객체 생성 과정을 별도의 메소드에 구현해놓으면 코드의 복잡도를 상당히 줄일수 있습니다. 
Expression 클래스의 정적 팩토리 메소드들은 Expression 클래스의 파생 클래스인 ConstantExpression, BinaryExpression 클래스 등의 인스턴스를 생성하는 기능을 제공함으로써 우리의 수고를 줄여줍니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

예를 하나 들어보겠습니다. 다음은 상수를 표현하는 ConstantExpression 객체 하나와 매개변수를 표현하는 ParameterExpression 객체 하나를 선언하고, 이 둘에 대해 덧셈(+)연산을 수행하는 BinaryExpression 객체를 선언할 겁니다. 물론 이들 객체들은 Expression 클래스의 팩토리 메소드를 통해 생성할 것입니다. 

Expression cont1 = Expression.Constant(1); //상수1
Expression param1 = Expression.Parameter(typeof(int), "x"); //매개변수 x
Expression exp = Expression.Add(const1, param1); // 1 + x

이 코드를 같이 살펴보겠습니다. 첫 번째 줄에서 Expression.Constant() 팩토리 메소드로 ConstantExpression 형식의 const1객체를 선언하고 있습니다. 

"ConstantExpression 형식이라고요? const1은 Expression 형식으로 선언했는데요?

ConstantExpression 은 Expression을 상속하기 때문에 ConstantExpression 객체는 Expression 형식의 참조를 통해 가리킬 수 있습니다. const1뿐만 아니라 앞의 코드의 param1은 원래 ParameterExpression의 인스턴스이고, exp는 BinaryExpression의 인스턴스입니다. 하지만 ParameterExpression이나 BinaryExpression도 Expression의 파생 클래스이기 때문에 Expression 형식의 참조를 통해 가리킬 수 있습니다. 덕분에 프로그래머는 각 노드가 어떤 타입인지 신경쓰지 않고 거침없이 Expression 형식의 참조를 선언해서 사용할수 있습니다. 필요한 경우에는 각 세부 형식으로 형식 변환을 하면 되니까요. 이것이 팩토리 메소드 패턴의 매력입니다. 

아무튼 식 트리는 결국 식을 트리로 표현한 것에 불과합니다. 다시 말해 앞의 exp는 실행가능한 상태가 아니고 그저 "데이터" 상태에 머물러 있다는 말입니다. exp가 자신의 트리 자료구조 안에 정의된 식을 실행할수 있으려면 람다식으로 컴파일되어야 합니다. 람다식으로의 컴파일은 다음과 같이 Expression<TDelegate> 클래스를 이용합니다. (Expression<TDelegate>는 앞의 표에도 나타나 있는 LambdaExpression 클래스의 파생 클래스입니다.)

Expression cont1 = Expression.Constant(1); //상수1
Expression param1 = Expression.Parameter(typeof(int), "x"); //매개변수 x
Expression exp = Expression.Add(const1, param1); // 1 + x

Expression<Func<int, int>> lambda1 = Expression<Func<int, int>>.Lambda<Func<int, int>>(exp, new ParameterExpression[]{
	(ParameterExpression)param1});

Func<int, int> compiledExp = lambda1.Compile();//실행 가능한 코드로 컴파일

Console.WriteLine(compiledExp(3)); //x = 3이면 1+x=4이므로 4를 출력


설명은 이정도로하고 이해를 돕기위해 예제 프로그램을 하나 만들어보겠습니다. 다음의 예제 프로그램은 1 * 2+(x-y)식을 코드 안에서 식 트리로 만든후 이를 컴파일하여 실행합니다. 


using System;
using System.Linq.Expressions;

namespace UsingExpressionTree
{
	class MainApp
	{
		static void Main(string[] args)
		{
			//1 *2+(x-y)
			Expression const1 = Expression.Constant(1);
			Expression const2 = Expression.Constant(2);

			Expression leftExp = Expression.Multiply(const1, const2); // 1 * 2

			Expression param1 = Expression.Parameter(typeof(int)); //x를 위한 변수
			Expression param2 = Expression.Paramter(typeof(int)); //y를 위한 변수

			Expression rightExp = Expression.Subtract(param1, param2); // x - y

			Expression exp = Expression.Add(leftExp, rightExp);

			Expression<Func<int, int, int>> expression = Expression<Func<int, int, int>>.Lambda<Func<int, int, int>>(exp,
				new ParameterExpression[]{
				(ParameterExpression)param1,
				(ParameterExpression)param2});

			Func<int, int, int> func = expression.Compile();

			//x = 7, y = 8
			Console.WriteLine($"1*2+({7}-{8}) = {func(7,8})");
		}
	}
}

방금 전에 만든 예제 프로그램의 코드를 다시 한번 살펴보세요. 25행에서 람다식(Lambda Expression)클래스를, 저오학히는 람다식 클래스의 파생 클래스인 Expression<TDelegate>를 사용하고 있습니다. 람다식을 이용하면 더 간편하게 식 트리를 만들수 있습니다. 다만 이 경우에는 동적으로 식 트리를 만들기는 어려워집니다. Expression 형식은 불변(Immutable)이기 때문에 인스턴스가 한번 만들어진 후에는 변경할수가 없기 때문입니다. 다음 예제 프로그램은 람다식을 이용해서 식 트리를 만드는 예를 보여줍니다. 조금 전에 만들었던 식 트리 예제 프로그램과 동일한 식 트리를 만들어내며, 실행 결과도 똑같습니다. 

using System;
using System.Linq.Expressions;

namespace ExpressionTreeViaLambda
{
	class MainApp
	{
		static void Main(string[] args)
		{
			Expression<Func<int, int, int>> expression = (a, b) => 1 * 2 + (a - b);
			Func<int, int, int> func = expression.Compile();

			Console.WriteLine($"1*2+({7}-{8}) = {func(7,8)}");
		}
	}
}

지금까지 살펴본 것처럼, 식 트리는 코드를 데이터로써 보관할수 있습니다. 이것은 파일에 저장할수도 있고 네트워크를 통해 다른 프로세스에 전달할 수도 있습니다. 심지어 코드를 담고 있는 식트리 데이터를 데이터베이스 서버에 보내서 실행시킬수도 있습니다. 데이터베이스 처리를 위한 식트리는 LINQ(Language INtegraited Query)에서 사용됩니다. 





14.6 식으로 이루어지는 멤버
메소드를 비롯하여 속성(인덱서), 생성자, 종료자는 공통된 특징이 있습니다. 이들은 모두 클래스의 멤버로서 본문이 중괄호{}로 만들어져 있습니다. 이러한 멤버의 본문을 식(Expression)만으로 구현할수 있는데, 이렇게 식으로 구현된 멤버를 영어로는 Expression-Bodied Member라고 하고, 우리말로는 식 본문 멤버라고 합니다. 식 본문 멤버의 문법은 다음과 같습니다. 

멤버 => 식

예제 코드를 통해 식 본문 멤버에 대해 조금 더 자세히 알아보겠습니다. 일단 다음과 같이 필드 하나를 가지는 FriendList라는 클래스를 선언하겠습니다. 

class FriendList
{
	private List<string> list = new List<string>();
	//여기에 나머지 멤버 구현
}

FriendList 클래스에 식으로 이루어진 멤버를 하나씩 추가해보겠습니다. 먼저 메소드부터 시작해볼게요. 다음 예제에서 Add()와 Remove() 메소드는 각각 list.Add() 메소드를 호출하는 식과 list.Remove() 메소드를 호출하는 식으로 이루어졌습니다. 


class FriendList
{
	//...
	public void Add(string name) => list.Add(name);
	public void Remove(string name) => list.Remove(name);
}

생성자와 종료자도 식으로 구현해볼게요. 

class FriendList
{
	//...
	public FriendList() => Console.WriteLine("FriendList()"); //생성자
	~FriendList() => Console.WriteLine("~FriendList()"); //종료자
}

이번엔 읽기 전용 속성과 인덱서를 식으로 구현하는 예제 코드입니다. get 키워드조차 생략할수 있습니다. 

class FriendList
{
	//...
	public int Capacity => list.Capacity; //읽기 전용 속성
	public string this[int index] => list[index]; //읽기 전용 인덱서
}

읽기/쓰기 모두 가능한 속성 또는인덱서를 구현하려면 코드가 조금 늘어납니다. 읽기 전용일 때는 생략이 가능했던 get(set)키워드도 명시적으로 기술해줘야 합니다.

class FriendList
{
	//...
	public int Capacity //속성
	{
		get => list.Capacity;
		set => list.Capacity = value;
	}
	public string this[int index] //인덱서
	{
		get => list[index];
		set => list[index = value;
	}
}

지금까지 메소드 , 생성자, 종료자, 속성, 인덱서를 단일 식을 이용하여 구현하는 방법에 대해 알아봤습니다. 앞에서 살펴봤던 예제 코드를 실행가능한 프로그램에 넣어 테스트해보겠습니다. 

using System;
using System.Collections.Generic;

namespace ExpressionBodiedMember
{
	class FriendList
	{
		private List<string> list = new List<string>();
	
		public void Add(string name) => list.Add(name);
		public void Remove(string name) => list.Remove(name);
		public void PrintAll()
		{
			foreach(var s in list)
				Console.WriteLine(s);
		}

		public FriendList() => Console.WriteLine("FriendList()");
		~FriendList() => Console.WriteLine("~FriendList()");

		//public int Capacity => list.Capacity; //읽기 전용

		public int Capacity // 속성
		{
			get => list.Capacity;
			set => list.Capacity = value;
		}

		//public string list[int index] => list[index]; //읽기 전용
		public string list[int index]
		{
			get => list[index];
			set => list[index] = value;
		}
	}
	class MainApp
	{
		static void Main(string[] args)
		{
			FriendList obj = new FriendList();
			obj.Add("Eeny");
			obj.Add("Meeny");
			obj.Add("Miny");
			obj.Remove("Eeny");
			obj.PrintAll();

			Console.WriteLine($"{obj.Capacity}");
			obj.Capacity = 10;
			Console.WriteLine($"{obj.Capacity}");

			Console.WriteLine($"{obj[0]}");
			obj[0] = "Moe";
			obj.PrintAll();
		}
	}
}