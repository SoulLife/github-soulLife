CHAPTER 21 : 네트워크 프로그래밍

.NET은 WCF(Windows Communication Foundation), .NET Remoting.XML Web Services처럼 사용하기 쉬우면서도 강력한 네트워킹 API를 제공해왔습니다. 이 기술들은 다른 컴퓨터에서 실행되고 있는 상대 프로세스가 마치 한컴퓨터, 아니 한 프로세스 안에 있는 객체인 것처럼 다루게 해줍니다. 따라서 .NET 플랫폼을 이용하는 프로그래머들은 애플리케이션에 네트워크 기능을 넣기 위해 골치를 썩힐 일이 거의 없다고 할 수 있습니다. 

목수들은 강력한 전동 공구와 수동 공구를 함께 공구 상자에 넣고 다닙니다. 전동 공구로 거의 대부분의 일을 처리하긴 하지만, 세밀한 작업을 할 때는 목수가 정교하게 힘 조절을 하며 사용할수 있는 수동 공구가 필요하기 때문입니다. 같은 이유로 프로그래머들도 API 내부에서 일어나는 일들을 알아둘 필요가 있습니다. 애플리케이션의 정교한 성능 조정이나 디버깅을 하려면 API 없이도 일을 해낼 수 있는 기초가 반드시 필요하거든요. 

.NET Remoting, XML Web Services, WCF등도 깊이 다루려면 각각 책 한두 권 이상의 분량에 달하는 설명이 필요하지만, 네트워크 프로그래밍도 이에 못지않게 많은 지면을 요구합니다. 배보다 배꼽이 더 커지는 셈이지요. 그렇다고 설명하지 않고 넘어갈 수도 없는 일인데 말입니다. 그래서 저는 간단한 파일 전송 프로그램을 만들 수 있을 정도의 내용을 설명하는 것으로 이번 장의 수준을 정했습니다. 

그럼 네트워크 프로그래밍 이야기를 시작하겠습니다. 






21.1 네트워크 프로그래밍에 앞서 알아둬야할 기초
아마 여러분들은 통신 기능을 수행하는 C# 코드가 너무너무 보고싶을 겁니다. 어쩌면 몇 페이지를 넘겨보고 다시 돌아와서 이 줄을 읽고 있는지도 모르지요. 우리 속담에 천리길도 한 걸음부터라는 말이 있습니다. 이 속담처럼 네트워크 프로그래밍에도 반드시 알아둬야 할 기초가 있습니다. 이걸 모르고서는 코드가 나타나도 어떤 내용인지 감조차 잡기 어렵거든요. 물론 우리 중에 코드에 관해초감각을 갖고 있어서 척 보면 탁 이해하는 사람이 있을 수도 있지만 저처럼 이해가 느린 사람을 위해 글을 써야 하니 초감각 독자는 양해해주세요. 


21.1.1 인터넷의 유래
네트워크(Network)는 그물(Net)에서 파생된 단어로, 어떤 물건이나 사람 등이 상호 연결된 체계를 말합니다. 보통 우리가 이야기하는 네트워크는 컴퓨터들이 상호 연결된 컴퓨터 통신 네트워크 입니다. 그리고 우리는 지금 네트워크에 연결된 컴퓨터상의 애플리케이션들 간에 데이터를 주고받도록 하는 방법에 대해 이야기하려는 참이지요. 

우리가 잘 아는 것처럼, 최초 세대의 컴퓨터로 할 수 있는 것이라고는 프로그램을 입력받아서 실행한 뒤 그 결과를 출력하는 정도가 전부였습니다. 그나마 입력과 출력도 키보드와 모니터(또는 프린터)가 아닌 천공카드(직사각형의 구멍을 뚫어서 비트를 나타내는 카드)를 이용해야 해서 보통 사람은 도저히 컴퓨터에 접근할 엄두도 낼 수 없었습니다. 다행히 전자 분야의 빠른 발전 덕에 컴퓨터의 성능이 향상되고 입력/ 출력 장치의 편의도 크게 향상되었습니다. 사람들은 천공카드 대신 키보드와 모니터를 사용하게 됐고, 프로그램 하나만 실행할수 있었던 컴퓨터는 동시에 여러 가지 프로그램을 실행할 수 있게 되었습니다. 이 시기의 컴퓨터 사용 방식은 다음 그림처럼 중앙 컴퓨터에 더미 터미널 여러 개를 연결하는 것이었습니다. 더미 터미널은 연산 능력은 전혀 없는 대신에, 입력(키보드)과 출력(모니터)을 할 수 있는 기능만 있었습니다.(그래서 더미(Dummy)라고 불렀죠) 이 더미 터미널은 비록 아무 지능이 없었지만 큰 의미가 있는 기능을 갖추고 있었는데 그것은 바로 중앙 컴퓨터와 데이터를 주고받는 기능이었습니다. 

냉전이 한창이던 1957년 소련은 스푸트니크 위성을 우주에 쏘아 올렸습니다. 이 소식에 미국은 충격에 휩싸였습니다. 첫째로는 소련이 우주에서 직접 자신들을 공격할 수 있는 수단을 갖게 되었다는 것에 충격을 받았고, 둘째로는 자신들보다 앞선 우주 기술을 갖고 있다는 데 충격을 받았습니다. 
이 충격으로 미국의 각 분야에서 수많은 변화가 일어났는데, 그중 하나가 1958년 DARPA(Defense Advanced Research Project Agency)의 설립이었습니다. DARPA는 이름이나타내는 것처럼 군대를 위한 신기술을 개발하는 곳이었습니다.(DARPA라는 이름은 나중에 D만 빼고 ARPA가 됐다가, 다시 DARPA가 되는 등 오락가락 하다가 나중에는 결국 DARPA로 돌아왔습니다.) 냉전 시대에 설립된 DARPA는 막대한 예산을 지원받으며 미군을 위한 연구를 수행했습니다. DARPA의 본부는 알링톤에 있었지만 DARPA의 프로젝트 상당 수가 대학과 외부의 연구소에서 수행되었습니다. 각 연구 기관에서는 컴퓨터를 이용하여 연구를 수행했고, 연구 자료들이 이 컴퓨터에 축적되기 시작했습니다. 그런데 당시에 DARPA가 이 연구 자료에 접근할수 있는 유일한 방법은 택배 뿐이었습니다. 믿을 만한 사람에게 연구 자료를 맡겨 DARPA로 보내는 수밖에 없었던 것입니다. 
DARPA는 이 문제를 위해 새로운 구상을 했는데, 그것은 네트워크와 네트워크를 연결하는 방법을 마련하는 것이었습니다. 네트워크와 네트워크가 연결되면 한쪽 네트워크에 접속한 사용자는 다른 네트워크에 있는 컴퓨터에 접근할 수 있게 됩니다. 그리고 그 네트워크를 통해 또 다른 네트워크에 도 접근할수 있게 됩니다. 이 방식을 이용하면 DARPA는 연구기간을 잇는 회선을 일일이 구축하지 않고도 최소한의 비용으로 연구소들의 컴퓨터를 연결할 수 있었습니다. 그 뿐 아니라 각 연구 기관들은 서로의 시스템 자원과 자료를 사용할 수 있게 될 터였습니다. 연구에 대한 중복 투자를 줄일수 있고, 필요한 자료를 빛의 속도로 획득할 수 있게 됩니다. 연구 자료를 며칠 걸려 주고받던 것 에 비하면 엄청난 혁신이었습니다. 

이른바 DARPANET이라고 불리던 이 네트워크는 더많은 대학과 연구 기관으로, 또한 세계의 연구 기관가 민간으로 연결되기 시작하더니 1980년대 말에 이르러서는 인터넷이라는 국제 통신망을 형성하게 되었습니다. 오늘날 우리가 이용하는 인터넷은 바로 이렇게 시작되었습니다. 




21.1.2 TCP/IP 스택
컴퓨터끼리 네트워크에서 데이터를 주고받기 위해서는 그 네트워크에서 통용되는 프로토콜(Protocol)을 따라야 합니다. 프로토콜은 규약, 규칙이라는 뜻의 낱말로, 여기에서는 컴퓨터들이 네트워크를 통해 데이터를 주고받기 위한 통신 규약을 말합니다. 
인터넷은 분명히 전 세계에서 가장 거대한 네트워크이긴 하지만, 유일한 네트워크는 아닙니다. 이 말은, 즉 인터넷 외에도 다양한 통신 네트워크가 존재한다는 뜻입니다. 네트워크도 네트워크지만 프로토콜에도 굉장히 다양한 종류가 있습니다. 만약 아직도 이들이 자신의 규격이 뛰어나다며 경쟁을 벌이는 춘추전국시대였다면 우리 프로그래머들과 네트워크 엔지니어들은 각 네트워크와 프로토콜을 공부하느라 정신을 차릴 수 없었을 겁니다. 
다행히도 인터넷이 사실상 전 세계 컴퓨터 네트워크의 표준이라 할 수 있을 정도로 자리를 잡았고, 인터넷의 통신 프로토콜로 사용되는 TCP/IP도 실질적인 인터넷 표준 프로토콜로 자리잡았습니다.(우리는 살았습니다. 만세~)
사실 통신을 위해서는 굉장히 많은 합의/규칙이 통신 주체들 간에 지켜져야 하기 때문에 프로토콜이 다루는 규칙의 범위도 굉장히 넓습니다. 가장 간단한 몇 가지 예만 살펴볼까요? 물리적인 통신 선로는 어떤 재질로 만들어야 하는가에 대한 규칙 1:1, 1:N 또는 N:N 네트워크에서는 대화를 하고자 하는 상대를 어떻게 판단하는가에 대한 규칙, 데이터를 송수신할 때의 바이트 오더에 대한 규칙 등등이 그 예입니다. 
지금 우리가 이야기하려는 TCP/IP는 사실상의 표준 프로토콜로 인터넷에서 데이터를 주고받는데 필요한 일련의 프로토콜 모음(Suite)입니다. TCP/IP는 다음 그림과 같이 크게 네 개의 계층으로 구성되어 있으며, 한 계층 위에 다른 계층이 포개어져 있는 형태 때문에 이것을 TCP/IP 스택(Stack)이라고 부르기도 합니다. 

애플리케이션 계층
전송 계층
인터넷 계층
링크 계층

단순해 보이는 이 네 단계의 프로토콜 모음이 오늘날 인터넷을 떠받치고 있다니, 신기하지 않습니까? 우리가 일상에서 항상 사용하는 웹 브라우저, 인스턴트 메신저, 팟캐스트 서비스의 데이터들이 모두 이 4계층을 오르내리고 있습니다. 지금부터는 TCP/IP 프로토콜을 구성하는 각 계층에 대해 알아보겠습니다. 가장 밑바닥에 있는 링크 계층(Link Layer)부터 시작하도록 하죠. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 링크 계층을 가리키는 다른 용어들?
링크 계층은 물리 계층(Physical Layer), 네트워크 접속 계층(Network Interface Layer), 미디어 접근 계층(Media Access Layer)등으로 불리기도 합니다. 혹시 다른 자료로 TCP/IP를 더 깊이 공부할 때 혼동하지 말라고 알려드립니다. RFC-1122를 기준으로 이것을 링크 계층 이라고 부르겠습니다. 

RFC
RFC란 Request For Comment(의견 요청서)의 약자로 IETF(인터넷 국제표준화 기구)에 의해 발행되는 메모를 말합니다 인터넷 협회를 통해 기술자나 컴퓨터 과학자들이 자신의 아이디어를 RFC형태로 발행하여 다른 전문가들의 검토를 받을수 있도록 하는 것입니다. 이렇게 발행되는 RFC중 일부는 IETF에 의해 인터넷 표준으로 인정되기 도 합니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


링크 계층
TCP/IP는 네트워크의 물리적인 구성으로부터 독립적인 프로토콜입니다. 컴퓨터가 네트워크에 전화선의 모뎀으로 연결되어 있든 LAN(Local Area Network)에 이더넷 케이블로 연결되어 있든, 혹은 WiFi에 연결되어 있든 간에 전혀 신경쓰지 않습니다. 이것은 링크 계층에서 네트워크의 물리적인 연결 매체를 통해 패킷을 주고받는 작업을 담당해주기 때문에 가능한 일입니다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 패킷
패킷(Packet)은 영어로 소포를 뜻하는 낱말인데, 네트워크 분야에서는 네트워크를 통해 오고 가는 데이터를 일컬어 패킷 이라고 부릅니다. 왜 그냥 데이터라고 부르지 않냐고요? 여기에는 다 그만한 이유가 있습니다. 

소포의 포장지는 실제로 보낼 내용물을 안전하게 보호하고 주소를 기입하기 위해 사용합니다. 영어로 패킷이라는 것은 내용물 + 포장지를 일컫는 것이지요. 네트워크를 통해 전송되는 데이터도 소포처럼 포장지를 필요로 합니다. 이 포장지로 데이터를 싸서 보호하고 데이터가 어디에서 어디로 가는지를 기입해야 합니다. 이렇게 포장지로 포장된 데이터를 일컬어 패킷 이라고 부르는 겁니다. 이제 그냥 데이터와 패킷을 구분할수 있겠지요?

한편 네트워크 패킷은 우체국 소포와는 달리 여러 겹의 포장지로 포장됩니다. 애플리케이션 계층, 전송 계층, 인터넷 계층, 링크 계층이 모두 패킷의 포장지거든요. 데이터를 보낼 때는 애플리케이션 계층부터 시작해서 링크 계층까지 포장을 하고, 데이터를 받을 때는 링크 계층부터 시작해서 애플리케이션 계층까지 포장을 뜯어 내용물을 꺼냅니다. 그 이유에 대해서는 본문을 읽으면 알게 될 것입니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

가령 어떤 패킷이 네트워크를 통해 컴퓨터에 들어오면 제일 먼저 이 링크 계층이 맞이합니다. 링크 계층은 이 패킷에서 물리적 데이터 전송에 사용되던 부분을 제거하고 인터넷 계층에 넘깁니다. 이렇게 함으로써 인터넷 계층에서는 패킷이 전파를 타고 넘어왔든 광케이블을 타고 넘어왔든 간에 전혀 신경 쓰지 않고 자신의 일을 처리할 수 있게 됩니다. 




인터넷 계층
인터넷 계층은 패킷을 수신해야 할 상대의 주소를 지정하고, 나가는 패킷에 대해서는 적절한 크기로 분할하며 들어오는 패킷에 대해서는 재조립을 수행합니다. 이 계층에서 사용되는 규약이 바로 인터넷 프로토콜(Internet Protocol)즉 IP입니다. TCP/IP에서의 IP가 바로 이것이죠. 
IP는 악덕 택배업자와 비슷한 특징을 갖고 있습니다. 내보낸 패킷을 상대방이 잘 수령했는지에 대해 전혀 보장하지 않기 때문입니다. 배달 중에 문제가 생겨서 패킷이 손상되거나 분실된다 해도 전혀 책임을 지지 않지요. 아니 그보다도 IP는 상대방이 패킷을 잘 수령했는지의 여부를 파악하는 기능 자체가 없습니다. 그저 전송 계층에서 내려온 패킷에 주소를 붙여 네트워크 계층으로 보내기만 할뿐입니다. 이쯤 되면 여러 개의 패킷을 전송했을 때 순서대로 도착하지 않아도 이상할 것이 전혀 없습니다. 
한편, 인터넷 계층이 주소 지정을 담당한다고 했지요? 여기에 사용하는 주소 체계가 바로 IP 주소입니다. 






전송 계층
전송 계층(Transport Layer)에는 이름 그대로 패킷의 운송 을 담당하는 프로토콜들이 정의되어 있습니다. 
그중에서도 전송 제어 프로토콜(Transmission Control Protocol:TCP)은 송신 측과 수신측 간의 연결성을 제공하며, 신뢰할 수 있는 패킷 전송 서비스를 제공합니다. 여러 개의 패킷을 송신하는 경우 패킷 사이의 순서를 보장하며, 패킷이 유실되기라도 하면 재전송을 해주기까지 합니다. TCP/IP프로토콜에서 TCP가 바로 이 프로토콜을 가리키는 것이며 TCP는 IP가 제공하지 않는 연결성, 신뢰성을 제공합니다. 웹문서를 전달하는 기능을 하는 HTTP를 비롯한 수많은 응용 프로토콜들이 바로 이 TCP와 IP 프로토콜 위에서 동작합니다. 
한편 TCP는 IP가 제공하지 않는 연결성과 신뢰성을 제공하느라 성능에서 손실을 봅니다. 데이터가 큰 경우에는 여러 개의 패킷에 나눠 담아 순서대로보내야 하지만, 데이터가 충분히 작은 경우에는 하나의 패킷에 담아보내도 됩니다. 이런 상황에서는 TCP가 제공하는 패킷의 순서 보장성이 필요 없지요. 또한 받아도 그만, 안 받아도 그만인 패킷의 경우에는 굳이 재전송할 필요가 없습니다. 
다시 말해, 충분히 작고 전송 신뢰성을 요구하지 않는 데이터의 경우 TCP의 장점은 곧 단점밖에 되지 않는다는 뜻입니다. 
이를 위한 대안으로 전송 계층에는 UDP(User Datagram protocol)라는 프로토콜이 정의되어 있습니다. 이 프로토콜은 연결성도, 신뢰성도 제공하지 않지만 성능이 TCP에 비해 상당히 우수하기 때문에 전송 제어를 직접 처리하는 애플리케이션 수준에서 채용되는 경우가 많습니다. 





애플리케이션 계층
이 계층은 각 응용 프로그램 나름의 프로토콜들이 정의되는 곳입니다. 웹문서를 주고받기 위한 HTTP(Hyper Text Transfer Protocol), 파일 교환을 위한 FTP(File Transfer Protocol), 네트워크 관리를 위한 SNMP(Simple Network Management Protocol)등이 애플리케이션 계층에서 정의된 프로토콜의 대표적인 예입니다. 애플리케이션 계층의 프로토콜들은 전송 계층의 프로토콜 중 TCP에 기반할수도 있고, UDP에 기반 할 수도 있습니다. 조금 전에 이야기했던 HTTP와 FTP는 상대적으로 큰 데이터를 처리해야 하기 때문에 연결성과 신뢰성을 제공하는 TCP에 기반하고 있고, SNMP는 단순한 정보만 다루는 데다 패킷을 일부 유실한다. 해도 임무에 지장을 주지않기 때문에 비용이 저렴한 UDP에 기반합니다. 
한편, HTTP나 FTP처럼 표준화된 프로토콜이 아니라도, 이 계층에서는 우리도 나름대로의 프로토콜을 정의해서 사용할수 있습니다. 이를 위한 애플리케이션 계층이니까요. 예를 들어 여러분만의 인스턴스 메신저를 개발하는 데 필요한 프로토콜을 정의하면 그 프로토콜은 이곳 애플리케이션 계층에 속합니다. 

다음 그림은 지금까지 설명한 애플리케이션 계층, 전송 계층, 인터넷 계층, 링크 계층의 스택과 각 계층에서 사용되는 프로토콜을 함께 보여줍니다. 이 그림을 보면서 TCP/IP 스택에 대해 공부했던 내용들을 정리해보세요. 저는 다음 절로 넘어가서 TCP/IP의 주소 체계에 대한 설명을 준비하고 오겠습니다. 

애플리케이션 계층 :	HTTP	FTP	POP3	SSL	...		SNMP	NTP	...
전송 계층	:				TCP					UDP
인터넷 계층 :						IP
링크 계층	:		Enthernet		Wi-fi	Wibro	ADSL	CableModel	...