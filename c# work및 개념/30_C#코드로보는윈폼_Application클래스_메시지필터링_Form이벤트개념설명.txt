CHAPTER20 : WinForm으로 만드는 사용자 인터페이스
그 동안 우리는 검은 바탕에 하얀 글씨를 출력하는 콘솔 환경에서 동작하는 예제 프로그램만을 만들어 왔습니다. 조금 심심했지요? 그래서 이번장에서는 윈도우 사용자 인터페이스를 가진 프로그램을 작성하는 방법에 대해 설명하겠습니다. .NET을 이용해서 사용자 인터페이스(User Interface(이후로는 줄여서 UI라고 하겠습니다.))를 만드는 방법에는 크게 두 가지가 있습니다. 하나는 .NET 프레임워크 1.0시절부터 함께 해온 WinForm이고 또 다른 하나는 .NET프레임워크3.0부터 도입된 WPF(Windows Presentation Foundation) 입니다. 후자가 나중에 등장한 만큼 더 유려한 UI와 다양한 효과를 제공하지만 익히기가 쉽지않고 내용이 상당히 방대하다는 단점이 있습니다. 그래서 이 책에서 WPF 대신 WinForm을 이용해서 UI를 만드는 방법을 설명하겠습니다. 




20.1 도대체 무슨 일이 일어나고 있는 걸까?
WinForm에서 제공하는 폼 디자이너 툴은 프로그래머가 그림 그리듯 UI를 만들수 있게 합니다. 다음 그림처럼 도구 상자에서 버튼이나 콤보박스 등의 컨트롤을 끌어다 윈도우 위에 올려놓으면 컴파일 후의 프로그램과 똑같은UI가 만들어지지요 이른바 WYSIWYG(What You See Is What You Get:위지위그)방식의 개발을 지원하는 겁니다. 

컨트롤을 윈도우 위에 배치할 때마다 폼 디자이너는 우리에게 프로그램의 UI를 표시하는 한편, 뒤로는 관련 C#코드를 자동으로 만들어줍니다. 프로퍼티를 변경할 때, 이벤트 처리기를 추가할 때도 자동으로 코드를 수정해줍니다. 
우리는 C# 프로그래머입니다. C# 코드만으로도 비주얼 스튜디오의 도움이 없이 GUI를 구성할수 있어야 하지 않을까요? 직접 코드를 작성하는 것보다는 폼 디자이너를 이용해서 UI 를 만드는 편이 시간을 수십 배 절약할 수 있지만, 미세한 조정이 필요하거나 폼 디자이너에 문제가 생기는 경우(마이크로소프트의 프로그래머들도 우리와 똑같은 사람입니다. 그들도 버그를 만들기 마련이죠)에는 직접 팔을 걷어붙이고 해결할수 있어야 합니다. 
이런 이유로 저는 여러분들에게 C# 코드를 이용하여 WinForm UI를 만드는 방법을 먼저 설명하겠습니다. 다음 절에서는 UI의 바탕이 되는 윈도우를 만드는 방법을 설명하고, 그 이후의 절에서는 버튼이나 텍스트 박스 같은 컨트롤을 윈도우 위에 올리는 방법을 다루겠습니다. 




20.2 C# 코드로 WinForm 윈도우 만들기
때로는 보이는 것이 전부가 아닙니다. 관객 입장에서 인형극을 보면 조그만 인형들이 춤과 노래를 하는 장면만 보이지만, 무대 뒤에서는 많은 사람이 각본, 작곡, 인형 제작, 성우와 조종사의 연기 연습 등 수고를 들이고 있습니다. 관객이 어느날 인형극 공연가가 되려고 한다면 감명 깊게 관람했던 작품의 내용을 줄줄 꿰는 것만으로는 충분치 않을 겁니다. 조금전에 이야기한 무대 뒤의 메커니즘을 배우고 연습해야겠지요. 

이번 장에서는 UI 프로그래밍을 배우게 될텐데, 여러분이 그동안 익숙하게 사용해온 윈도우(운영체제인 마이크로소프트 윈도우와 앱의 창을 구분하기 위해 앞으로 운영체제는 윈도우OS, 앱의 창은 윈도우라고 하겠습니다.)의 무대 뒤 이야기를 들려드리려 합니다. 다음은 윈도우 OS에서 앱이 윈도우를 생성하는 절차입니다. 

1. 윈도우 클래스(OOP의 클래스와는 다릅니다.,윈도우에 대한 정보를 갖고 있는 구조체 정도로 알아두세요)를 정의합니다.
2. 정의된 윈도우 클래스를 등록합니다.
3. 윈도우를 생성합니다. 
4. 윈도우를 사용자에게 보여줍니다.
5. 메시지 루프를 돌면서 프로그램을 시작합니다. 

하지만 이것은 Win32 API를 이용하여 윈도우를 만들때의 이야기입니다.(더 자세히 알고싶은 독자는 나중에 Win32 API를 공부해보세요.).NET은 이러한 과정들을 잘 포장해서 개발자들이 간편하게 윈도우를 만들수 있도록 WinForm 클래스 라이브러리를 제공합니다. WinForm클래스를 이용한 윈도우 생성 절차는 다음과 같습니다.


1. System.Windows.Forms.Form 클래스에서 파생된 윈도우 폼 클래스를 선언합니다.
2. 1번에서 만든 클래스의 인스턴스를 System.Windows.Forms.Application.Run() 메소드에 인수로 넘겨 호출합니다. 

이게 전부입니다. 절차도 훨씬 간편하지만 실제 코드의 양도 약 1/10정도로 WinForm 클래스를 사용하는 코드가 더 적습니다. 이렇게 이야기만 할 게 아니라 프로그램을 한번 만들어보죠. 
비주얼 스튜디오를 실행하고 프로젝트 템플릿을 콘솔 앱으로 선택한 뒤 프로젝트의 이름을 SimpleWindow라고 입력해서 새 프로젝트를 생성하세요(주의: Windows Forms 앱 템플릿이 아닙니다. 이번 장에서는 별도의 설명이 있기 전까지 모든 예제 프로그램 프로젝트를 같은 방법으로 생성해서 따라 만드시기 바랍니다. )

프로젝트를 생성했습니까? 그렇다면 프로젝트에서 WinForm을 사용할수 있도록 프로젝트 파일(.csproj)을 손보겠습니다. 솔루션 탐색기에서 [SimpleWindow]프로젝트 항목을 더블 클릭해 SimpleWindow.csproj를 편집기로 불러들인후, 다음과 같이 TargetFramework를 net5.0-windows로 수정하고, UseWindowsForms 옵션과 DisableWinExpOutputInterence를 true로 추가하세요.

여기까지 하면 코딩을 시작할 준비가 됐습니다. 프로젝트의 Program.cs파일을 MainApp.cs로 이름을 변경하고 다음 코드를 따라 입력한 뒤 컴파일해서 실행해보세요.

using System;

namespace SimpleWindow
{
	class MainApp : System.Windows.Forms.Form //MainApp이 System.Windows.Forms.Form 클래스로부터 상속받도록 선언합니다.
	{
		static void Main(string[] args)
		{
			System.Windows.Forms.Application.Run(new MainApp()); //Application.Run()메소드에 MainApp의 인스턴스를 인수로 넘겨 호출합니									다
		}
	}
}

제 이야기가 맞지요? WinForm을 이용하면 아주 간단하게 윈도우를 생성할 수 있다는 것 말입니다. 그나저나 예제 프로그램의 코드를 보니 우리가 처음 만나는 클래스가 딱 두 가지가 있네요. System.Windows.Forms.Form 클래스와 System.Windows.Forms.Application 클래스 말입니다. 당연히 이 두 클래스에 대해 자세히 알아봐야겠지요? 덮어놓고 이들을 이용해서 프로그램을 만들 수는 없는 노릇이니 말입니다. Form 클래스는 일단 놔뒀다가 나중에 다루기로하고 먼저 Application 클래스부터 살펴보겠습니다. 





20.3 Application 클래스
이번 절의 내용을 미리 요약하자면 Application 클래스는 크게 두 가지 역할을 수행하는데 하나는 윈도우 응용 프로그램을 시작하고 종료시키는 메소드를 제공하는 것이고, 또 다른 하나는 윈도우 메시지를 처리하는 것 이라고 할 수 있습니다. 

응용 프로그램을 시작하도록 하는 메소드는 우리가 조금 전에 만들었던 예제 프로그램에서 본 것처럼 Application.Run()입니다. 그리고 응용 프로그램을 종료시키는 메소드는 Application.Exit() 입니다. 어느 곳에서든 Application.Exit()메소드를 호출하면 해당 응용 프로그램은종료 합니다. 
다음은 이 두 가지 메소드를 사용하는 예제 코드입니다. 
class MyForm : System.Windows.Forms.Form
{
}
class MainApp
{
	static void Main(string[] args)
	{
		MyForm form = new MyForm();
		form.Click += new EventHandler((sender, eventArgs) => //Form 클래스는 여러가지 이벤트를 정의하고 있는데, 그중 Click이벤트는 윈도우를 
			{					클릭했을때 발생하는 이벤트입니다. 따라서 이코드는 윈도우를 클릭하면 	
				Application.Exit();			Application.Exit()를 호출하도록 합니다. 
			});
		Application.Run(form);
	}
}

한편 Exit()메소드에 대해 꼭 알아둬야 하는 사실이 한 가지 있습니다. Exit()메소드가 호출된다고 해서 응용 프로그램이 바로 종료되는 것은 아니라는 점입니다. 이 메소드가 하는 일은 응용 프로그램이 갖고 있는 모든 윈도우를 닫은 뒤 Run() 메소드가 반환되도록 하는 것입니다. 따라서 Run()메소드 뒤에 자원을 정리하는 코드를 넣어두면 우아하게 응용프로그램을 종료시킬수 있습니다(19장에서도 이야기했지만 우리가 사는 세계든 프로그래밍 세계든 갑자기 끝나거나 죽는 것은 썩 반길 만한 일이 아닙니다.)




20.3.1 메시지 필터링
이번에는 Application 클래스의 진짜 재미있는 기능인 메시지 필터링(Message Filtering)을 알아보겠습니다. 먼저 메시지가 뭔지부터 이야기를 시작해야겠지요?
이 책의 1장부터 19장까지 만들었던 응용 프로그램들은 일정한 방향으로 코드가 실행되지만, 윈도우 기반의 응용 프로그램들은 갑자기 일어나는 사건(이벤트:Event)에 반응해서 코드가 실행되는 이른바 이벤트 기반(Event Driven)방식으로 만들어집니다. 윈도우 응용 프로그램이 받아들이는 이벤트 중에는 바로 앞에서 만들었던 예제 프로그램에서처럼 마우스 클릭, 키보드 입력 등이 있습니다. 이 이벤트들은 일견 사용자가 직접 응용 프로그램에 대해 일으킨 것처럼 보이지만, 사실은 윈도우 OS가 일으킨 겁니다. 사용자가 마우스나 키보드 같은 하드웨어를 제어하면 인터럽트가 발생하고, 이 인터럽트를 윈도우 OS가 받아들입니다. 운영체제는 다시 이 인터럽트를 바탕으로 윈도우 메시지(Windows Message)를 만든 뒤 이벤트를 받아야 하는 응용 프로그램에게 보내주지요. 

한편 윈도우 메시지는 그 종류가 매우 다양합니다. 윈도우 응용 프로그램은 마우스 이동이나 클릭, 키보드 입력처럼 미리 시스템에 정의된 메시지를 받지만, 다른 응용 프로그램이 자체적으로 정의한 메시지도 받을수 있습니다. 메시지 개수 자체가 많은 것은 말할 것도 없습니다.(지금은 별로 공감이 안 되지요? 잠시 후에 만들 예제 프로그램의 실행 결과를 확인해보면 실감할수 있을 겁니다. )
Application클래스는 응용 프로그램이 받는 수많은 메시지 중에 관심 있는 메시지만 걸러낼수 있는 메시지 필터링(Message Filtering)기능을 갖고 있습니다. 가령 여러분이 만든 응용 프로그램을 사용자가 Alt + F4 키를 눌러서 종료시키는 것을 막고싶다면 바로 이 기능을 이용해서 해당 키 입력 메시지를 걸러내면 응용 프로그램의 윈도우가 닫히는 것을 막을수 있습니다. 물론 Alt + F4키 입력만 걸러내므로 윈도우 종료 버튼이나 응용 프로그램 자체의 종료 기능은 정상적으로 동작합니다. 

윈도우 OS에서 정의하고 있는 메시지는 식별 번호(ID)가 붙여져 있습니다. 예를 들어 WM_LBUTTONDOWN 메시지는 ID가 0x201로 정의되어 있지요. Application 클래스는 특정 ID를 가진 메시지를 걸러내는 필터를 함께 등록해뒀다가 응용 프로그램에 메시지가 전달되면 해당 필터를 동작시킵니다. 만약 메시지의 ID가 필터에서 관심을 갖고 있는 값이라면 필터는 메시지를 요리하고, 그렇지 않다면 메시지를 거르지 않고 메시지를 받아야하는 폼이나 컨트롤로 보내서 이벤트를 발생시킵니다. 

메시지 발생 > 메시지 필터(이곳에서 메시지를 걸러냅니다.) > 이벤트발생(메시지 필터에서 걸러지지않은 메시지는 이벤트를 발생시킵니다.) > 이벤트 처리기

Application.AddMessageFilter() 메소드는 응용 프로그램에 메시지 필터를 설치합니다. 이 메소드는 IMessageFilter 인터페이스를 구현하는 파생 클래스이 인스턴스를 인수로 받으며, IMessageFilter는 다음과 같이 PreFilterMessage() 메소드를 구현할 것을 요구합니다. 

public interface IMessageFilter
{
	bool PreFilterMessage(ref Message m);
}

제가 맛보기로 IMessageFilter 인터페이스를 상속하는 클래스를 하나 보여드리겠습니다. 다음과 같이 우리는 PreFilterMessage()메소드를 파생 클래스에서 구현해야 합니다. IMessageFilter 인터페이스의 구현 예는 다음과 같습니다. 
public class MessageFilter : IMessageFilter
{
	public bool PreFilterMessage(ref Message m)
	{
		if(m.Msg >= 0x200 && m.Msg <= 0x20E) //마우스 이동부터 마우스의 왼쪽 , 오른쪽, 가운데 버튼 동작 마우스 휠 굴림 메시지를 모두 걸러냅니		{					다
			Console.WriteLine("발생한 메시지: " + m.Msg);
			return true;
		}
		return false;
	}
}

앞의 예제 코드에서 보는 것처럼 PreFilterMessage()를구현할 때는 입력받은 메시지를 처리했으니 응용 프로그램은 관심을 가질 필요가 없다는 의미로 true를 반환하거나, 메시지를 건드리지 않았으니 응용 프로그램더러 처리해야 한다고 false를 반환하면 됩니다. 그리고 매개변수로 받아들이는 Message 구조체는 다음과 같은 프로퍼티를 갖고 있는데, 이 중 Msg 프로퍼티는 메시지의 ID를 담고 있습니다. 

프로퍼티			설명
HWnd			메시지를 받는 윈도우 핸들(Handle)입니다. 핸들은 처음 보는 용어죠? 윈도우의 인스턴스를 식별하고 관리하기 위해 운영체제가 
			붙여놓은 번호가 바로 핸들입니다. 
Msg			메시지 ID입니다.
LParam			메시지를 처리하는 데 필요한 정보가 담겨 있습니다.
WParam			메시지를 처리하는 데 필요한 부가 정보가 담겨 있습니다.
Result			메시지 처리에 대한 응답으로윈도우 OS에 반환되는 값을 지정합니다. 

이렇게 메시지 필터를 구현했으면 다음과 같이 AddMessageFilter()메소드를 호출하여 등록하면 됩니다. 

Application.AddMessageFilter(new MessageFilter());

다음은 메시지 필터 예제 프로그램입니다. 이 예제 프로그램은 응용 프로그램이 윈도우로부터 전달받는 모든 메시지를 출력합니다. 단 WM_PAINT(0x0F), WM_MOUSEMOVE(0x200), WM_TIMER(0x113)메시지만 제외하고 말입니다. 이들 메시지는 너무 자주 많이 발생하기 때문에 이들 메시지들까지 출력한다면 다른 메시지를 확인하기가 너무 어려워지기 때문입니다.(궁금한 분들은 예제 프로그램 코드에서 해당 코드를 주석 처리하고 다시 컴파일해서 실행해보세요.) 이 프로그램은 WM_LBUTTONDOWN(0x201)메시지가 도착하면 Application.Exit()를 호출하여 종료합니다. 


using System;
using System.Windows.Forms;

namespace MessageFilter
{
	class MessageFilter : IMessageFilter
	{
		public bool PreFilterMessage(ref Message m)
		{
			if(m.Msg == 0x0F || m.Msg == 0xA0 || m.Msg == 0x200 || m.Msg == 0x113)
				return false;
			Console.WriteLine($"{m.ToString()} : {m.Msg}");

			if(m.Msg == 0x201)
				Application.Exit();
			return true;
		}
	}
	class MainApp : Form
	{
		static void Main(string[] args)
		{
			Application.AddMessageFilter(new MessageFilter());
			Application.Run(new MainApp());
		}
	}
}

어때요 재미있었습니까? 이 메시지들은 WinForm 의 각 윈도우와 컨트롤에 전달되며 윈도우와 컨트롤은 이 메시지를 받으면 미리 정의된 이벤트를 발생시키고, 각 이벤트는 프로그래머가 등록한 이 벤트 처리기를 호출합니다. 다음 절에서는 윈도우를 표현하는 Form 클래스를 다룰텐데, 조금 전에 언급한 이벤트와 이벤트 처리기에 대한 내용도 함께 설명합니다. 




20.4 윈도우를 표현하는 Form 클래스
20장을 시작한 이후 몇 차례 윈도우를 만들어 띄우기는 했는데 이걸 가지고 뭘 제대로 해본 것이 없군요. 이번 장에서는 윈도우의 모양과 크기도 바꿔보고 버튼도 올려보겠습니다. 구체적으로는 다음의 내용을 다루려고 합니다. 

* Form(과 컨트롤)에 정의된 이벤트와 이벤트 처리기 연결하기
* Form의 프로퍼티를 조절하여 윈도우 모양 바꾸기
* Form 위에 컨트롤올리기
그럼이벤트 이야기부터 시작해볼까요?



20.4.1 Form에 정의된 이벤트와 이벤트 처리기 연결하기
이벤트는 13장에서 공부한 바있기 때문에 우리에게 그리 낯설지 않은 친구죠? Form 클래스는 운영체제가 보내는 메시지 중 일부에 대해 이벤트를 구현하고 있습니다. 가령 사용자가 Form 의 인스턴스, 즉 윈도우 위에서 마우스의 왼쪽 버튼을 누르면 WM_LBUTTONDOWN 메시지가 Form객체로 전달되고, Form 객체는 이에 대해 MouseDown 이벤트를 발생시킵니다. 이전 절에서 Application 클래스를 이용하여 윈도우 메시지를 직접 다루는 방법을 설명했지만 사실 WinForm 으로 응용 프로그램을 만드는 동안 우리가 직접 윈도우 메시지를 요리하게 될 경우는 거의 없다고 봐도 됩니다. Form을 비롯한 WinForm 의 윈도우와 컨트롤 클래스들이 윈도우 메시지를 포장하여 이벤트로 구현해놨기 때문입니다. 우리는 그저 미리 정의된 이벤트에 이벤트 처리기 메소드를 선언하여 등록해주기만 하면 됩니다. 

예제 코드를볼까요? 이벤트 처리기 메소드를 선언하고 Form 클래스의 MouseDown 이벤트에 등록해보겠습니다. 

class MyForm : Form
{
	//이벤트 처리기 선언
	private void Form_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
	{
		MessageBox.Show("안녕하세요!");
	}
	public MyForm()
	{
		//이벤트 처리기를 이벤트에 연결
		this.MouseDown += new System.Windows.Forms.MouseEventHandler(this.Form_MouseDown);
	}
}

Form 클래스에는 MouseDown 외에도 무수히 많은 이벤트가 선언되어 있습니다. 이들의 목록을 여기에 늘어놓으려고만 해도 몇 페이지가 필요할 정도라면 그 수를 대강 가늠할수 있겠습니까? 하지만 전혀 걱정하지 마세요. 이벤트 처리기를 등록하고 이를 호출하는 메커니즘은 모든 폼과 컨트롤이 똑같기 때문입니다. Form 클래스에 정의되어 있는 이벤트들을 일일이 설명하는 것보다는 MouseDown 이벤트를 조금더 자세히 설명하겠습니다. MouseDown 이벤트를 잘 이해하면 나머지 이벤트들도 똑같이 활용할수 있을 테니까요. 그런 의미에서 다음에 있는 MouseDown 이벤트의 선언을 보시죠. 

public event MouseEventHandler MouseDown;

이 코드에서 MouseEventHandler는 대리자 입니다(이벤트는 대리자를 기반으로 선언된다는 것, 기억하고 있지요?)그리고 이 대리자는 다음과 같이 선언되어 있습니다

public delegate void MouseEventHandler(object sender, MouseEventArgs e);

이 선언 코드를 보면 이벤트 처리기가 어떤 매개변수를 가져야 하는지 그리고 어떤 형식을 반환해야 하는지 알 수 있습니다. 일단 반환 형식이 void 이므로 이벤트 처리기는 아무 값도 반환할 필요가 없습니다. 그리고 두 개의 매개변수를 받아들이며, 첫 번째 매개변수는 object 형식입니다. 첫 번째 매개변수 이름이 sender이지요? sender는 이벤트가 발생한 객체를 가리키는데, 우리는 지금 Form 클래스의 이벤트 처리기에 대해 알아보고 있으니 sender는 Form 객체 자신입니다. 만약 Button 클래스의 이벤트 처리기였다면 Button 객체였겠지요, 두 번째 매개변수는 MouseEventArgs 형식인데, 다음과 같은 프로퍼티들을 제공함으로써 마우스 이벤트의 상세 정보를 제공합니다. 

프로퍼티			설명
Button			마우스의 어떤 버튼(왼쪽, 오른쪽 또는 가운데)에서 이벤트가 발생했는지를 나타냅니다. 
Clicks			마우스의 버튼을 클릭한 횟수를 나타냅니다. 사용자가 더블 클릭했을 때만 어떤 기능을 수행하고 싶다면 이 값이 2일 경우를 확인하면
			됩니다. 
Delta			마우스 휠의 회전 방향과 회전한 거리를 나타냅니다. 
X			마우스 이벤트가 발생한 폼 또는 컨트롤상의 x(가로)좌표를 나타냅니다. 
Y			마우스 이벤트가 발생한 폼 또는 컨트롤상의 y(세로)좌표를 나타냅니다. 

이번에는 이벤트 처리기를 활용하는 예제 프로그램을 만들어보겠습니다. 이 프로그램은 Form 클래스의 MouseDown 이벤트에 대한 이벤트 처리를 하는 프로그램입니다. 폼 위에서 마우스를 누를 때마다 이벤트를 발생시킨 객체(여기서는 Form)마우스 버튼 마우스 커서의 좌표 등을 콘솔에 출력합니다. 

using System;
using System.Windows.Forms;

namespace FormEvent
{
	class MainApp : Form
	{
		public void MyMouseHandler(object sender, MouseEventArgs e)
		{
			Console.WriteLine($"Sender : {((Form)sender).Text}");
			Console.WriteLine($"X:{e.X}, Y:{e.Y}");
			Console.WriteLine($"Button:{e.Button}, Clicks:{e.Clicks}");
			Console.WriteLine();
		}
		public MainApp(string title)
		{
			this.Text = title;
			this.MouseDown += new MouseEventHandler(MyMouseHandler);
		}
		static void Main(string[] args)
		{
			Application.Run(new MainApp("Mouse Event Test"));
		}
	}
}