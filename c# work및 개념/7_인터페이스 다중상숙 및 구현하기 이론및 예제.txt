8.2 인터페이스는 약속이다. 
여러분이 사용하고 있는 PC에 혹시 USB(Universal Serial Bus)포트가 있습니까? 이 USB 포트는 참으로 신통한 녀석입니다. 이곳에 USB 플래시 메모리를 꽂아 넣으면 저장 장치로 쓸 수 있고, 키보드나 마우스를 꽃으면 입력 장치로 쓸 수도 있습니다. 심지어는 USB 선풍기를 꽃으면 선풍기로 쓸수 있기 까지 합니다.  USB 포트가 이렇게 다양하게 활용될 수 있는 이유는 PC와 주변기기가 USB라는 약속을 따르기 때문입니다. 

인터페이스도 소프트웨어 내에서 USB와 같은 역할을 합니다. 말하자면 클래스가 따라야 하는 약속이 되는 셈이죠. 이 약속은 인터페이스로부터 파생될 클래스가 어떤 메소드를 구현해야 할지를 정의합니다. 

가령 앞에서 예로 들었던 ILogger 인터페이스는 자신으로부터 파생될 클래스가 반드시 WriteLog()메소드를 구현하도록 강제합니다. 어떤 클래스든 ILogger를 상속받아 ILogger에 선언되어 있는 WriteLog() 메소드를 구현하면 ILogger의 역할을 할 수 있습니다. 앞에서 ILogger 인터페이스를 상속받는 ConsoleLogger 클래스를 선언하여 콘솔에 로그를 출력하도록 WriteLog() 메소드를 구현했는데, 이 외에도 얼마든지 ILogger를 상속받는 새로운 클래스를 선언해서 파일에 로그를 출력하도록 할 수 있고 네트워크 너머에 있는 서버에 저장하도록 패킷을 보낼 수도 있습니다. 

예를 들어 사용자로부터 온도를 반복적으로 입력받아 기록하는 ClimateMonitor 클래스를 만드는데, 로그를 저장하는 방식 등은 ClimateMonitor 클래스를 사용하는 다른 프로그래머들이 입맛에 따라 결정할수 있어야 한다고 해봅시다. 이런 때 인터페이스는 아주 훌륭한 해결책이 되어줍니다. 자 다음 코드를 보세요. ClimateMonitor 클래스는 ILogger형식의 참조 logger를 이용해서 사용자로부터 입력받은 온도를 기록합니다. logger가 어떻게 이 메시지를 기록할지는 ClimateMonitor() 생성자의 매개변수에 입력된 객체에 달려 있습니다. 

class ClimateMonitor
{
	private ILogger logger;
	public ClimateMonitor(ILogger logger)
	{
		this.logger = logger;
	}
	public void start()
	{
		while(true)
		{
			Console.Write("온도를 입력해주세요.: ");
			string temperature = Console.ReadLine();
			if (temperature == ")
				break;
			logger.WriteLog(" 현재 온도 : " + temperature );
		}
	}
}

다음과 같이 ConsoleLogger 객체를 생성자에 인수로 넘기면 ClimateMonitor는 콘솔에 메시지를 출력하게 될 것입니다. 

ClimateMonitor monitor = new ClimateMonitor(new ConsoleLogger()));
monitor.start();

자 이번엔 콘솔이 아닌 텍스트 파일에 로그를 출력하는 ILogger의 파생 클래스를 만들어볼까요? 다음의 FileLogger는 StreamWrite 클래스를 이용해서 파일에 로그를 기록합니다. 파일 처리에 대한 자세한 내용은 나중에 한 장을 따로 할애해서 다룰 테니 지금은 여기에 신경쓰지 마세요. 지금우리는 ILogger가 정해놓은 규칙을 FileLogger 클래스가 따르고 있는가만 생각해야 합니다. 

class FileLogger : ILogger
{
	private StreamWriter writer;
	public FileLogger(string path)
	{
		writer = File.CreateText(path);
		writer.AutoFlush = true;
	}
	public void WriteLog(string message)
	{
		writer.WriteLine("{0} {1}", DateTime.Now.toShortTimeString(), message);
	}
}

FileLogger의 객체를 다음과 같이 ClimateMonitor 생성자에 넘기면 이제 monitor 객체는 파일에 로그를 저장하는 기능을 갖게 됩니다. 멋지지 않나요.?

ClimateMonitor monitor = new ClimateMonitor(new FileLogger("MyLog.txt"));
monitor.start();




8.3 인터페이스를 상속하는 인터페이스
인터페이스를 상속할수 있는 것은 클래스뿐이 아닙니다. 클래스의 사촌인 구조체는 물론이고, 인터페이스도 인터페이스를 상속할수 있습니다. 기존의 인터페이스에 새로운 기능을 추가한 인터페이스를 만들고 싶을 때 인터페이스를 상속하는 인터페이스를 만들면 됩니다. 그냥 인터페이스를 수정하면 되지 않냐고요? 가능하다면 그렇게 해도 문제는 없습니다. 하지만 다음의 경우처럼 인터페이스를 수정할수 없을 때는 인터페이스를 상속하는 인터페이스를 이용해야 합니다. 

*상속하려는 인터페이스가 소스 코드가 아닌 어셈블리로만 제공되는 경우 : .NET SDK에서 제공하는 인터페이스들이 그 예입니다. 어셈블리 안에 있기 때문에 인터페이스를 수정할 수 없습니다. 이인터페이스에 새로운 기능을 추가한 인터페이스를 만들고 싶드면 상속하는 수밖에 없습니다. 

* 상속하려는 인터페이스의 소스 코드를 갖고 있어도 이미 인터페이스를 상속하는 클래스들이 존재하는 경우 : 클래스는 반드시 인터페이스의 모든 메소드와 프로퍼티를 구현해야 합니다. 인터페이스에 사소한 수정이라도 이루어지면 이 인터페이스를 상속하는 기존 클래스들은 소스 코드를 빌드할 때 컴파일 에러가 발생할 겁니다. 이런 상황에서 기존의 소스 코드에 영향을 주지 않고 새로운 기능을 추가하기 위해서는 인터페이스를 상속하는 인터페이스를 이용하는 편이 좋습니다. 

인터페이스가 인터페이스를 상속하기 위해 사용하는 문법은 클래스의 문법과 똑같습니다. 파생 인터페이스의 이름 옆에 :을 찍고 그 오른편에 상속할 인터페이스의 이름을 붙여주면 됩니다. 

interface 파생 인터페이스 : 부모 인터페이스
{
	// 추가할 메소드 목록
}

당연한 이야기지만 파생 인터페이스는 기반 인터페이스에 선언된 모든 것을 그대로 물려받습니다. 
예를 들어 다음의 ILogger 인터페이스가 있다고 해보죠. 

interface ILogger
{
	void WriteLog(string message);
}

그리고 다음과 같이 ILogger 인터페이스를 상속하는 새로운 인터페이스를 만든다고 해봅시다. 다음의 IFormattableLogger 인터페이스는 ILogger에 선언된 void WriteLog(string message)와 void WriteLog(string format, params object[] args)메소드 두 개를 갖게 됩니다. 

interface IFormattableLogger : ILogger
{
	void WriteLog(string format, params Object[] args);
}






8.4 여러 개의 인터페이스, 한꺼번에 상속하기
클래스는 여러 클래스를 한꺼번에 상속할 수 없습니다. 이른바 죽음의 다이아몬드 라는 문제 때문입니다. 죽음의 다이아몬드란 최초의 클래스(Ridable)가 두 개의 파생 클래스(Car, Plane)로부터 상속받고, 이 두개의 파생 클르스를 다시 하나의 클래스(MyVehicle)가 상속하는 것을 말합니다. 여러분이 컴파일러라면 MyVehicle이 어느 Ride() 메소드를 물려받도록 하겠습니까? Car 버전의 Ride()? 아니면 Plane 버전의 Ride()? 기준은 무엇인가요? 죽음의 다이아몬드 문제의 핵심은 모호성입니다. 컴파일러가 기분이 좋다면 Car의 Ride()를 물려받도록 할 수도 있습니다. 하지만 어느날 컴파일러 버전이 업그레이드돼서 Plane의 Ride()를 물려받도록 할 수도 있거든요. 

여기에 또 하나 골칫거리가 있습니다. 바로 업 캐스팅(Up-Casting)문제입니다. 다중 상속이 허용된다면 다음과 같은 코드가 가능할 겁니다. 

Plane plane = new MyVehicle();
Car car = new MyVehicle();

자 plane은 과연 어떤 결과를 출력할까요? Run을 출력하겠습니까. 아니면 Fly를 출력하겠습니까? 모를 일입니다. 알수가 없지요.코드를 작성하는 프로그래머조차 확신할수 없습니다. 이렇듯 어떻게 동작할지 정확하게 예측할수 없는 모호한 프로그램은 재앙 덩어리입니다. 다중 상속은 이런 재앙을 불러올 위험성이 있습니다. 이런 재앙을 소스 코드 수준에서 방지할수 있다면 정말 좋겠죠? 그래서 C#은 클래스의 다중 상속을 허용하지 않습니다. 

그럼 왜 저는 C#이 지원하지도 않는 다중 상속을 이야기하는 걸까요? 이번 절의 제목 때문에 이미 알고 있겠지만. 인터페이스의 다중 상속을 설명하기 위해서입니다. 인터페이스는 내용이 아닌 외형을 물려줍니다. 속은 어떨지 몰라도 겉모습만큼은 정확하게 자신을 닮기를 강제합니다. 따라서 죽음의 다이아몬드 같은 문제도 발생하지 않습니다. 프로그래머는 여러 인터페이스를 다중 상속하는 클래스를 안심하고 이용할수 있습니다. 

그래도 구현을 물려받는 다중 상속이 있으면 좋겠다고요? 이런 제설명이 부족했던 모양이네요. 다른 클래스에서 구현된 기능을 얻는 기법에는 상속만 있는 것이 아닙니다. 이어지는 <여기서 잠깐> 에 서 이 부분에 대해 조금더 이야기하겠습니다.(그리고 상속은 그저 구현을 물려받기 위한 장치가 아닌 다형성을 위한 즉 다양한 버전의 모습을 가지도록 하는 장치임을 떠올려주세요. 단순히 구현을 물려받기 위한 것이라면 왜 오버라이딩이 필요하겠습니까?)


여기서잠깐? 그래도 저는 여러 클래스로부터 구현을 물려받고 싶은데요?
다른 클래스의 기능을 새로운 클래스에 넣는 방법에 꼭 상속만 있는 것은 아닙니다. 포함(Containment)이라는 기법도 있지요. 사실 기법이랄 것도없는 이 기법은 다음과 같이 클래스 안에 물려받고 싶은 기능을 가진 클래스들을 필드로 선언해 넣는 것입니다. 