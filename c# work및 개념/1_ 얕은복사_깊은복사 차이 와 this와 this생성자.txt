7.5 객체 복사하기 : 얕은 복사와 깊은 복사
다음과 같은 클래스를 선언합니다.

class MyClass
{
	public int MyField1;
	public int MyField2;
}
그리고 다음과 같이 두 개의 인스턴스 source와 target을 만들고 값을 할당했다고 해보겠습니다.

MyClass source = new MyClass();
source.MyField1 = 10;
source.MyField2 = 20;

MyClass target = source;
target.MyField2 = 30;

Console.WriteLine("{0} {1}", source.MyField1, source.MyField2);
Console.WriteLine({0} {1}, target.MyField1, target.MyField2);

여러분은 이 코드의 결과가 어떻게 나올거라 생각하나요? 다음에 보기가 있습니다. 골라보세요.

1번		2번
10 20		10 30
10 30		10 30

정답은 2번 입니다. 왜 이런 일이 일어났냐 하면 말이죠. 클래스는 태생이 참조 형식이기 때문입니다. 제가 처음 데이터 형식을 설명할 때 참조 형식과 값 형식이 메모리에 저장되는 방식의 차이에 대해서도 이야기했었죠? 참조 형식은 힙 영역에 객체를 할당하고 스택에 있는 참조가 힙 영역에 할당된 메모리를 가리킵니다. 앞의 예제 코드에서 source 객체는 다음과 같이 메모리에 할당됩니다. 

그리고 source를 복사해서 받은 target은 힙에 있는 실제 객체가 아닌 스택에 있는 참조를 복사해서 받습니다. 다음 그림에서처럼 source와 target이 사이좋게 같은 곳을 바라보게 됩니다. 이때문에 target의 MyField2를 30으로 바꿨는데 source의 MyField2도 30으로 바뀌는 문제가 생긴 것입니다. 이렇게 객체를 복사할 때 참조만 살짝 복사하는 것을 얕은 복사(Shallow Copy)라고 합니다. 

우리가 원하는 것은 얕은 복사가 아닙니다. 다음 그림에서처럼 target이 힙에 보관되어 있는 내용을 source로부터 복사해서 받아 별도의 힙 공간에 객체를 보관하기를 바라는 것이죠. 이른바 깊은 복사(Deep Copy)말입니다. 

안타깝게도 c#에서는 이와 같은 일을 자동으로 해주는 구문이 없습니다. 우리 스스로 깊은 복사를 수행하는 코드를 만들어야 합니다. 간단하게는 다음과 같이 구현할 수도 있습니다. 

class MyClass
{
	public int MyField1;
	public int MyField2;
	public MyClass DeepCopy()
	{
		MyClass newCopy = new MyClass();
		newCopy.MyField1 = this.MyField1;
		newCopy.MyField2 = this.MyField2;
		return newCopy;
	}
}


여기서 잠깐?
ICloneable.Clone()메소드
System 네임스페이스에는 ICloneable이라는 인터페이스가 있습니다. 인터페이스는 8장에서 자세히 다루지만 여기에서 간략하게 이야기하자면 클래스가 구현해야 하는 메소드 목록이라고 할 수 있습니다. 깊은 복사 기능을 가질 클래스가 .NET의 다른 유틸리니 클래스나 다른 프로그래머가 작성한 코드와 호환되도록 하고 싶다면 ICloneable을 상속하는 것이 좋습니다. ICloneable 인터페이스는 Clone() 메소드 하나만 갖고 있습니다. 

class MyClass : ICloneable
{
	public int MyField1;
	public int MyField2;
	public MyClass Clone()
	{
		MyClass newCopy = new MyClass();
		newCopy.MyField1 = this.MyField1;
		newCopy.MyField2 = this.MyField2;
		return newCopy;
	}
}



7.6 this 키워드

7.6.1 나
우리 자신을 지칭할 때 나라고 합니다. this는 객체가 자신을 지칭할 때 사용하는 키워드입니다. 이게 무슨말인고 하니, 객체 외부에서는 객체의 필드나 메소드에 접근할 때 객체의 이름(변수 또는 식별자)을 사용한다면 객체 내부에서는 자신의 필드나 메소드에 접근할 때 this 키워드를 사용한다는 것입니다. 

예를 들어 다음 코드를 살펴봅시다. Employee 클래스는 Name 필드를 갖고 있고, SetName()메소드는 매개변수에 입력받은 이름을 Name필드에 저장하는 기능을 합니다. 이때 문제가 생깁니다. SetName() 메소드의 매개변수도 Name이고, Employee 클래스의 필드도 Name 입니다. 이를 어찌해야 할까요? 보시다시피 this 키워드를 이용하면 이러한 모호성을 풀 수 있습니다. this.Name은 Employee 자신의 필드고, 그냥 Name은 SetName()메소드의 매개변수입니다. 

class Employee
{
	private string Name;
	public void SetName(string Name)
	{
		this.Name = Name;
	}
}




7.6.2 this() 생성자
다음은 3 개의 생성자를 오버로딩하는 클래스의 코드입니다. 이 클래스는 int 형식의 필드 a, b, c를 갖고 있으며 세 개의 생성자는 입력받는 매개변수에 따라 이들 필드를 초기화합니다. 

class MyClass
{
	int a, b, c;
	public MyClass()
	{
		this.a = 5425;
	}
	
	public MyClass(int b)
	{
		this.a = 5425;
		this.b = b;
	}
	public MyClass(int b,int c)
	{
		this.a = 5425;
		this.b = b;
		this.c = c;
	}
}

이코드에 문제가 있냐고요? 아뇨 그렇지는 않습니다. 문법적으로도 문제가 없고 우리가 원하는 대로 제대로 동작할 겁니다. 다만 세 개의 MyClass() 생성자 안에 똑같은 코드가 중복되어 들어가 있는 것이 마음에 걸릴 뿐입니다. MyClass()는 a를 초기화하니까 MyClass(int)는 b만 초기화하고 a를 초기화하는 일은 MyClass()를 호출해서 처리할 수는 없을까요? 하지만 new 연산자 없이는 생성자를 호출할 수 없습니다. 이렇게 생성자를 호출하면 지금 생성하려는 객체 외에 또 다른 객체를 만들 뿐입니다. 우리가 원하는 상황이 아니죠. 

이런 고민을 해결해주는 것이 this() 입니다. this가 객체 자신을 지칭하는 키워드인 것처럼 this() 는 자기 자신의 생성자를 가리킵니다. this() 는 생성자에서만 사용될수 있습니다. 그것도 생성자의 코드 블록 내부가 아닌 앞쪽에서만 사용이 가능합니다. 다음은 this() 생성자를 이용해서 앞의 코드를 개선한 코드입니다. 

class MyClass
{
	int a, b, c;
	
	public MyClass()
	{
		this.a = 5425;
	}

	public MyClass(int b): this()
	{
		this.b = b;
	}

	public MyClass(int b, int c) : this(b)
	{
		this.c = c;
	}
}




7.7 접근 한정자로 공개 수준 결정하기
제 방에 있는 선풍기는 버튼 4개, 다이얼 2개로 조작하도록 되어 있습니다. 버튼 4개 중 3개는 바람 세기를 조절하는 데 사용하고 나머지 하나는 선풍기를 끌때 사용합니다. 다이얼 하나는 선풍기 머리를 회전 시키는데 사용하고 다른 하나는 선풍기 종료 타이머입니다. 단순하지만 선풍기를 조작하는 데는 충분합니다. 
사실 바람을 만들어내거나 선풍기 머리를 회전시키는 일을 버튼이나 다이얼이 하는 것은 아닙니다. 선풍기 케이스 안에 감춰진 회로와 배선, 기계 장치가 그 일들을 하지요. 버튼과 다이얼은 선풍기 제조사에서 사용자들이 선풍기를 사용하는 데 꼭 필요한 것들만 노출한 기능입니다. 

객체지향 프로그래밍에서도 선풍기의 버튼처럼 클래스의 사용자(여러분일 수도 있고 여러분의 동료 프로그래머일수도 있습니다.)에게 필요한 최소의 기능만 노출하고 내부를 감출 것을 요구합니다. 이것을 은닉성(Encapsulation)이라고 합니다.


여기서잠깐! 객체지향 프로그래밍의 3대 특성
객체지향 프로그래밍에서는 여러 가지 특성이 있습니다. 그중에서도 3대 특성으로 꼽히는 것들이 있는데 이 셋중의 하나가 바로 은닉성이며 나머지 2개는 상속성(Inheritance)과 다형성(Polymorphism)입니다. 상속성과 다형성에 대해서는 뒤에서 차차 설명하겠습니다. 




클래스에 선언되어 있는 필드와 메소드 중 어떤 것들은 사용자에게 노출할 것이 있는가 하면, 절대로 노출시키지 말아야 하는 것들도 있습니다. 특히 필드는 상수를 제외하고는 무조건 감추는 것이 좋습니다. 예를 들어 변기에 사용할 비데 클래스를 만든다고 해봅시다. 비데 온수의 온도 필드를 사용자가 마음대로 지정할수 있도록 해두면 자칫 엄청난 사고가 날 수 있습니다. 프로그래머가 온도 필드에 직접 데이터를 넣다가 오타를 내어 35도를 355도라고 입력했다고 생각해보세요. 이 소프트웨어가 설치된 비데의 출시일에 전국 항문외과가 엄청 바빠질 겁니다. 

접근 한정자(Access Modifier)는 감추고 싶은 것은 감추고, 보여주고 싶은 것은 보여줄수 있도록 코드를 수식하며 필드, 메소드를 비롯해 프로퍼티 등 모든 요소에 대해 사용할수 있습니다. C#에서 제공하는 접근 한정자는 모두 여섯 가지이며, 다음과 같습니다. 


접근한정자		설명
public			클래스의 내부/외부 모든 곳에서 접근할수 있습니다. 
protected		클래스의 외부에서는 접근할수 없지만, 파생 클래스에서는 접근이 가능합니다. 
private			클래스의 내부에서만 접근할수 있습니다. 파생 클래스에서도 접근이 불가능합니다. 
internal			같은 어셈블리에 있는 코드에서만 public으로 접근할수 있습니다. 다른 어셈블리에 있는 코드에서는 private과 같은 수준의 접근성을 가집니다.
protected internal		같은 어셈블리에 있는 코드에서만 protected로 접근할수 있습니다. 다른 어셈블리에 있는 코드에서는 private과 같은 수준의 접근성을 가집니다.
private protected		같은 어셈블리에 있는 클래스에서 상속받은 클래스 내부에서만 접근이 가능합니다. 

이 여섯가지 접근 한정자에 대해 여러분이 잘 알아둬야 할 것이 있습니다. 그것은 바로 접근 한정자로 수식하지 않은 클래스의 멤버는 무조건 private 으로 접근 수준이 자동 지정된다는 사실입니다. 이 말인즉슨, 클래스 내의 멤버는 일단 감추고 나중에 공개할지를 결정하는 것이 순서라는 뜻입니다. 
