9.6 레코드 형식으로 만드는 불변 객체
불변(Immutable)객체는 내부 상태(데이터)를 변경할수 없는 객체를 말하는데요. 상태를 변경할수 없다는 특성 때문에 불변 객체에서는 데이터 복사와 비교가 많이 이뤄집니다. 새로운 상태를 표현하려고 기존 상태를 복사한뒤 이중 일부를 수정해서 새로운 객체를 만들고, 상태를 확인하기 위해 객체 내용을 자주 비교합니다. 레코드(Record)는 불변 객체에서 번번하게 이뤄지는 이 두가지 연산을 편리하게 수행할수 있도록 C# 9.0에서 도입된 형식입니다. 
레코드 형식이 주는 효용을 이해하기 위해 7장에서 배운 내용을 바탕으로 불변 객체를 만드는 방법을 살펴보겠습니다. 참조 형식은 클래스의 모든 필드를 readonly로 선언하면 불변 객체를 만들수 있습니다. 값 형식은 readonly struct로 구조체를 선언하면 됩니다. 컴파일러가 모든 필드를 readonly로 선언하도록 강제하니까요. 
값 형식 객체는 다른 객체에 할당할 때 깊은 복사를 수행합니다. 깊은 복사란 모든 필드를 새 객체가 가진 필드에 1:1로 복사하는 것을 말합니다. 배열의 요소에 입력하거나 함수 인수로 사용할 때도 늘깊은 복사를 합니다. 필드가 많으면 많을수록 복사 비용은 커집니다. 객체를 여러 곳에서 사용해야 하는 경우엔 더 커지죠. 참조 형식은 이런 오버헤드가 없습니다. 객체가 참조하는 메모리 주소만 복사하면 되니까요. 물론 단점이 없는 것은 아닙니다. 참조 형식은 프로그래머가 직접 깊은 복사를 구현해야 합니다. 

값형식은 객체를 비교할 때 기본적으로 내용을 비교하는데 모든 필드를 1:1로 비교합니다. 불변 객체에 필요한 비교 방법이죠. 참조 형식은 어떨까요? 참조 형식끼리 내용 비교를 할수 있으려면 프로그래머가 직접 비교 코드를 작성해야 합니다. 보통은 object로부터 상속하는 Equals()메소드를 오버라이딩합니다. 
불변 객체를 참조 형식으로 선언하면 함수 호출 인수나 컬렉션 요소로 사용할 때 복사 비용을 줄일수 있습니다. 한편 불변 객체는 새 상태 표현과 상태 확인을 위해 깊은 복사와 내용 비교가 필수적이므로 값 형식으로 선언하는 편이 프로그래머에게 편리한 부분이 많을 터이고요. 불변 참조 형식의 비용 효율과 불변 값 형식의 편리함을 모두 얻을수 있는 방법이 있다면 얼마나 좋을까요?
레코드 형식은 값 형식처럼 다룰 수 있는 불변 참조 형식으로, 참조 형식의 비용 효율과 값 형식이 주는 편리함을 모두 제공합니다. 그럼 이어서 레코드를 선언하는 방법을 알아보겠습니다. 






9.6.1 레코드 선언하기
레코드는 다음과 같이 record 키워드와 초기화 전용 자동 구현 프로퍼티를 함께 이용해서 선언합니다. 이때 한 가지 주의할 점이 있습니다. 레코드에는 초기화 전용 자동구현 프로퍼티뿐만 아니라 쓰기 가능한 프로퍼티와 필드도 자유롭게 선언해 넣을 수 있다는 사실입니다. 하지만 저는 초기화 전용 자동 구현 프로퍼티만을 이용해서 상태를 표현하겠습니다. 

record RTransaction
{
	public string From { get; init; }
	public string To { get; init; }
	public int Amount { get; init; }
}
이렇게 선언한 레코드로 인스턴스를 만들면 불변 객체가 만들어집니다. 

RTransaction tr1 = new RTransaction{ From="Alice", To="Bob", Amount=100 };
RTransaction tr2 = new RTransaction{ From="Bob", To="Charlie", Amount=300 };






9.6.2 with를 이용한 레코드 복사
C# 컴파일러는 레코드 형식을 위한 복사 생성자를 자동으로 작성합니다. 단, 이 복사 생성자는 protected로 선언되기 때문에 명시적으로 호출할수는 없고, 다음과 같이 with 식을 이용해야 합니다. 

RTransaction tr1 = new RTransaction{ From="Alice", To="Bob", Amount=100 };
RTransaction tr2 = with tr1(tr1의 모든 상태를 복사한 다음) {To="Charlie"};(To 프로퍼티 값만 "Charlie"로 수정)

이 코드에서 with 식은 tr1을 복사한 뒤 To 프로퍼티 값만 "Charlie"로 수정해서 tr2라는 새로운 레코드 객체를 생성합니다. with 식이 없었다면 RTransaction 인스턴스를 새로 할당하면서 To를 제외한 tr1의 모든 프로퍼티를 입력해줘야 했을 겁니다. with 식은 객체 상태(프로퍼티가)가 다양할수록 유용합니다. 





9.6.3 레코드 객체 비교하기
컴파일러는 레코드의 상태를 비교하는 Equals() 메소드를 자동으로 구현합니다. 다음 표에서 왼쪽에는 클래스 객체 상태 비교를 위한 Equals() 메소드 오버라이딩 예제가 나타나 있고 , 오른쪽에는 평범한 레코드 선언 예제가 있습니다. 레코드는 참조 형식이지만 값 형식처럼 Equals() 메소드를 구현하지 않아도 비교가 가능합니다. 

클래스
class CTransaction
{
	public string From { get; init; }
	public string To { get; init; }
	public int Amount { get; init; }
	public override bool Equals(Object obj)
	{
		CTransaction target = (CTransaction) obj;
		if (this.From == target.From && this.To == obj.To && this.Amount == target.Amount)
			return true;
		else
			return false;
	}
}


레코드
record RTransaction 
{
	public string From { get; init; }
	public string To { get; init; }
	public int Amount { get; init; }
}

다음 코드는 앞에서 선언한 CTransaction과 RTransaction의 Equals()메소드 사용예를 보여줍니다. Equals()를 명시적으로 구현하는 CTransaction의 인스턴스 두 개가 같은 상태를 갖고 있을 때, 이 둘을 비교하면 참(True)이 반환됩니다. 비슷한 경우, RTransaction은 Equals()를 구현하지 않았지만 같은 상태를 지닌 인스턴스 둘을 비교하면 마찬가지로 참(True)이 반환됩니다. 
//클래스
CTransaction trA = new CTransaction { From = "Alice", To="Bob", Amount=100 };
CTransaction trB = new CTransaction { From="Alice", To="Bob", Amount=100 };
Console.WriteLine(trA.Equals(trB)); //True 출력

//레코드
RTransaction tr1 = new RTransaction { From="Alice", To="Bob", Amount=100 };
RTransaction tr2 = new RTransaction { From="Alice", To="Bob", Amount=100 };
Console.WriteLine(tr1.Equals(tr2)); //True 출력




9.7 무명 형식
C#에는 여러 가지 형식이 있습니다. 물론 여러분도 잘 아는 것처럼 각 형식에는 이름이 있지요. int, double, string, FileStream, MyClass등 말입니다. 이번 절에서는 이름이 없는 형식, 즉 무명 형식(Anonymous Type)을 설명하려 합니다. 
형식의 이름은 왜 필요할까요? 다음과 같이 그 형식의 이름을 이용해서 인스턴스를 만들기 때문입니다. 

int a;
double b;
무명 형식은 형식의 선언과 동시에 인스턴스를 할당합니다. 이 때문에 인스턴스를 만들고 다시는 사용하지 않을 때 무명형식이 요긴합니다.(두 개 이상의 인스턴스를 만들려면 class나 struct를 이용해 이름을 가진 형식을 별도로 만들어야 겠지요)무명 형식의 선언 예는 다음과 같습니다. 

var myInstance = new { Name="박상현", Age="17" }; ( 괄호 {와 }사이에 임의의 프로퍼티 이름을 적고 값을 할당하면 그대로 새 형식의 프로퍼티가 됩니다. )

이와 같이 선언한 무명 형식의 인스턴스는 여느 객체처럼 프로퍼티에 접근하여 사용할수 있습니다. 
Console.WriteLine(myIntance.Name, myInstance.Age);
무명 형식에서 주의할 점이 있는데, 그것은 무명 형식의 프로퍼티에 할당된 값은 변경불가능하다는 사실입니다. 한마디로 무명 형식의 인스턴스가 만들어지고 난 다음에는 읽기만 할 수 있다는 이야기 입니다. 지금 이러한 특징들을 보면 무명 형식이 무용지물인것 같지만 15장에서 설명할 LINQ와 함께 사용하면 아주 요긴하다는 사실을 꺠닫게 될 겁니다. 



9.8 인터페이스의 프로퍼티
인터페이스는 메소드뿐만 아니라 프로퍼티와 인덱서도 가질 수 있습니다. 프로퍼티나 인덱서를 가진 인터페이스를 상속하는 클래스가 반드시 해당프로퍼티와 인덱서를 구현해야 하는 것은 물론 입니다. 역시 당연한 이야기겠지만 인터페이스에 들어가는 프로퍼티는 구현을 갖지 않습니다. 여기에 한 가지 문제가 있는데 인터페이스의 프로퍼티 선언은 클래스의 자동 구현 프로퍼티 선언과 그모습이 동일하다는 사실입니다. 다음은 인터페이스의 프로퍼티 선언 형식입니다. 

interface 인터페이스이름
{
	public 형식 프로퍼티이름1
	{
		get; set;
	}
	public 형식 프로퍼티이름2
	{
		get; set;
	}
}

다음은 프로퍼티를 가진 인터페이스와 이를 상속하는 파생 클래스의 예입니다.
interface IProduct
{
	string Productname
	{
		get; set;
	}
}
class Product : IProduct
{
	private string productName;
	public string ProductName (파생 클래스는 기반 인터페이스에 선언된 모든 프로퍼티를 구현해야 합니다.)
	{
		get { return productName; }
		set { this.productName = value; }
	}
}



9.9 추상 클래스의 프로퍼티
인터페이스 이야기를 했으니 추상 클래스 이야기를 안 할 수가 없습니다. 추상 클래스는 클래스처럼 구현된 프로퍼티를 가질수 있는 한편, 인터페이스처럼 구현되지 않은 프로퍼티도 가질수 있습니다. 추상 클래스에서는 이것을 추상 프로퍼티(Abstract Property)라고 합니다. 추상 메소드가 그랬던 것처럼 추상 프로퍼티 역시 인터페이스의 프로퍼티와 다를 것이 없습니다. 파생 클래스가 해당 프로퍼티를 구현하도록 강제하는 것일 뿐이지요. 
자, 그럼 추상 클래스의 추상 프로퍼티는 어떻게 선언해야 할까요? 인터페이스처럼 구현을 비워놓은 것만으로는 추상 프로퍼티를 만들수 없습니다. C# 컴파일러가 자동 구현 프로퍼티로 간주하고 구현을 자동으로 채워 넣을 테니까요. 그래서 추상 프로퍼티는 다음과 같이 abstract 한정자를 이용해서 선언합니다. 

abstract class 추상 클래스이름
{
	abstract 데이터형식 프로퍼티 이름
	{
		get; set;
	}
}
다음은 추상 프로퍼티를 갖는 추상 클래스와 이를 상속하는 파생 클래스의 예제 코드입니다. 

abstract class Product
{
	private static int serial = 0
	public string SerialID (추상 클래스는 구현을 가진 프로퍼티와)
	{
		get { return String.Format("{0:d5}", serial++); }
	}
	abstract public DateTime ProductDate (구현이 없는 추상 프로퍼티모두를 가질수 있습니다.)
	{	
		get; set;
	}
}

class MyProduct : Product
{
	public override DateTime ProductDate (파생 클래스는 기반 추상 클래스의 모든 추상 메소드뿐 아니라 추상 프로퍼티를 재정의해야 합니다. )
	{
		get; set;
	}
}
