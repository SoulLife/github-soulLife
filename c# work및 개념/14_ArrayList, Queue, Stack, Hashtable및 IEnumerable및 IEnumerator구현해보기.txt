10.8.1 ArrayList
ArrayList는 가장 배열과 닮은 컬렉션이라 할 수 있습니다. 컬렉션의 요소에 접근할 때는 [] 연산자를 이용하고 특정 위치에 있는 요소에 데이터를 임의로 할당할 수도 있습니다. 한편 배열과는 달리 컬렉션을 생성할 때 용량을 미리 지정할 필요 없이 필요에 따라 자동으로 그 용량이 늘어나거나 줄어듭니다. ArrayList의 가장 큰 장점이죠. 
ArrayList에서 가장 중요한 메소드는 Add(), RemoveAt(), Insert() 이렇게 세개 입니다. Add()메소드는 컬렉션의 가장 마지막에 있는 요소뒤에 새 요소를 추가하고, RemoveAt()메소드는 특정 인덱스에 있는 요소를 제거합니다. Insert()메소드는 원하는 위치에 새 요소를 삽입합니다. 이들 메소드의 사용 방법은 다음과 같습니다. 

ArrayList list = new ArrayList();
list.Add(10);
list.Add(20);
list.Add(30);

list.RemoveAt(1); //20을 삭제
list.Insert(1, 25); //25를 1번 인덱스에 삽입, 즉 10과 30사이에 25를 삽입


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? ArrayList가 다양한 형식의 객체를 담을수 있는 이유?
ArrayList 가 다양한 형식의 객체를 담을 수 있는 이유는 다음의 Add(), Insert() 메소드의 선언을 보면 알 수 있습니다. 
public virtual int Add(Object value)
public virtual void Insert(int index, Object value)
object형식의 매개변수를 받고 있죠? 모든 형식은 object를 상속하므로 object 형식으로 간주될 수 있습니다. 그래서 Add() 메소드에 int 형식의 데이터를 넣더라도 정수 형식 그대로 입력되는 것이 아니라 object형식으로 박싱(Boxing)되어 입력되는 것입니다. 반대로 ArrayList의 요소에 접근해서 사용할 때는 원래의 데이터형식으로 언방식(UnBoxing)이 이루어집니다. 박싱과 언박싱은 작지 않은 오버헤드를 요구하는 작업입니다. 
ArrayList가 다루는 데이터가 많으면 많아질수록 이러한 성능 저하는 더욱 늘어납니다. 이것은 ArrayList만의 문제가 아닙니다. 앞으로 살펴볼 Stack, Queue, Hashtable등의 컬렉션도 갖고 있지요. 해결 방법이 없느냐고요? 있습니다. 나중에 살펴볼 일반화 컬렉션(Generic Collection)에서 그답을 알게 될 겁니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------





10.8.2 Queue
Queue는 대기열, 즉 기다리는(대기) 줄(열) 이라는 뜻입니다. Queue 자료구조는 데이터나 작업을 차례대로 입력해뒀다가 입력된 순서대로 하나씩 꺼내 처리하기 위해 사용됩니다. 배열이나 리스트가 원하는 위치에 자유롭게 접근하는 반면에 Queue는 입력은 오직 뒤에서 출력은 앞에서만 이루어집니다. 이런 자료구조가 어디에 쓰이나 싶지요? 하지만 우리의 생각과는 다르게 Queue는 엄청나게 다양한 분야에 사용되고 있습니다. OS에서 CPU가 처리해야할 작업을 정리할때, 프린터가 여러 문서를 출력할 때, 인터넷 동영상 스트리밍 서비스에서 콘텐츠를 버퍼링할 때 등 등 예를 들면 끝도 없습니다. 
Queue에 데이터를 입력하는 것은 오로지 뒤에서만 한다고 했지요? 이작업은 EnQueue() 메소드를 이용해서 합니다. 

Queue que = new Queue();
que.Enqueue(1);
que.Enqueue(2);
que.Enqueue(3);
que.Enqueue(4);
que.Enqueue(5);

반대로 Queue에서 데이터를 꺼낼 때는 Dequeue()메소드를 이용합니다. 여기에서 주의할 점은 Dequeue()를 실행하면 데이터를 자료구조에서 실제로 꺼내게 된다는 것입니다. 제일 앞에 있던 항목이 출력되고 나면 그뒤에 있던 항목이 제일 앞으로 옮겨집니다. 그래서 그 다음에 Dequeue()를 실행하면 제일 앞으로 옮겨진 데이터가 나오고, 그뒤에 있던 데이터가 다시 맨앞으로 이동합니다. 





10.8.3 Stack
Stack은 Queue와 반대로 먼저 들어온 데이터가 나중에 나가고(First In - last Out), 나중에 들어온 데이터는 먼저나가는(Last In - Firsut Out)구조의 컬렉션입니다. 
Stack에 데이터를 넣을 때는 Push()메소드를 이용하고, 데이터를 꺼낼 때는 Pop()메소드를 이용합니다. Push()메소드는 데이터를 위에 쌓고, Pop()메소드는 제일 위에 쌓여 있는 데이터를 꺼냅니다. Pop()을 호출하여 데이터를 Stack에서 꺼내고 나면 그 데이터는 컬렉션에서 제거되고 그 아래에 있던 데이터가 제일 위로 올라옵니다. 그다음에 Pop()을 호출하면 방금 올라온 데이터를 꺼냅니다. 

Stack stack = new Stack();
stack.Push(1); //최상위 데이터는 1
stack.Push(2); //최상위 데이터는 2
stack.Push(3); //최상위 데이터는 3

int a = (int)stack.Pop(); //최상위 데이터는 다시 2





10.8.4 Hashtable
Hashtable은 키(Key)와 값(Value)의 쌍으로 이루어진 데이터를 다룰 때 사용합니다. 사전이 가장 좋은 예가 되겠군요. 가령 Book을 키로, 책을 값으로 입력하는 식이죠. Hashtable은 여러 면에서 멋진 자료구조입니다. 탐색 속도가 빠르고 사용하기도 편합니다. 사용방법은 다음과 같습니다. 

Hashtable ht = new Hashtable();
ht["book"] = "책";
ht["cook"] = "요리사";
ht["tweet"] = "지저귀다";

Console.WriteLine(ht["book"]);
Console.WriteLine(ht["cook"]);
Console.WriteLine(ht["tweet"]);

어때요, 배열과 비슷하지요? 배열과 다른 점이라면 배열이 데이터를 저장할 요소의 위치로 인덱스를 사용하는 반면에 Hashtable 컬렉션은 키 데이터를 그대로 사용한다는 것입니다. 앞의 예제에서는 문자열을 사용했지만 어떤 형식이든 키로 사용할수 있습니다. int형식도 float형식도 또 여러분이 만든 클래스도 말입니다. Hashtable이 멋진 것은 비단 이런 편의성뿐만이 아닙니다. 
Hashtable은 배열에서 인덱스를 이용해서 배열 요소에 접근하는 것에 준하는 탐색 속도를 자랑합니다. 다시 말하면 탐색 속도가 거의 소요되지 않는다고 할 수 있습니다. ArrayList에서 원하는 데이터를 찾으려면 컬렉션을 정렬해 이진 탐색을 수행하거나 순차적으로 리스트를 탐색해나가지만, Hashtable은 키를 이용해서 단번에 데이터가 저장된 컬렉션 내의 주소를 계산해냅니다. 이 작업을 해싱(Hashing)이라고 하는데 Hashtable의 이름은 이 알고리즘에서 유래한 것입니다. Hashtable에 대해 하고 싶은 이야기가 많지만, 이 책의 범위를 벗어나는 주제이므로 이 정도로만 해두겠습니다. 






10.9 컬렉션을 초기화 하는 방법
ArrayList, Queue, Stack은 배열의 도움을 받아 간단하게 초기화를 수행할 수 있습니다. 이들 컬렉션의 생성자를 호출할 때 배열 객체를 매개변수로 넘기면 컬렉션 객체는 해당 배열을 바탕으로 내부 데이터를 채웁니다. 다음은 이 세가지 컬렉션의 초기화를 수행하는 예제 코드입니다. 

int[] arr = { 123, 456, 789};
ArrayList list = new ArrayList(arr); //123, 456, 789
Stack stack = new Stack(arr); // 789, 456, 123
Queue queue = new Queue(arr); // 123, 456, 789

ArrayList는 배열의 도움 없이 직접 컬렉션 초기자를 이용해서 초기화할수 있습니다. 

ArrayList list2 = new ArrayList() { 11, 22, 33 }; //컬렉션 초기자는 생성자를 호출할 때, 생성자 뒤에 { 와 }사이에 컬렉션 요소의 목록을 입력하여 사용합니다. 

안타깝게도 Stack과 Queue는 컬렉션 초기자를 이용할수 없습니다. 컬렉션 초기자는 IEnumerable인터페이스(이 장의 후반부에 설명합니다.)와 Add()메소드를 구현하는 컬렉션만 지원하는데, 이 두 컬렉션은 IEnumerable은 상속하지만 Add()메소드는 구현하지 않기 때문입니다. 


Hashtable 초기화에 대해 아무 말이 없어서 의아했었죠? 이제 막 설명을 시작하려는 참입니다. Hashtable을 초기화할 때는 딕셔너리 초기자(Dictionary Initializer)를 이용합니다. 딕셔너리 초기자는 컬렉션 초기자와 비슷하게 생겼습니다. 다음은 딕셔너리 초기자의 예입니다. 

Hashtable ht = new Hashtable()
{
	["하나"] = 1, //;가 아니라 ,를 이용하여 항목을 구분합니다. 
	["둘"] = 2,
	["셋"] = 3
};
물론 다음예와 같이 Hashtable을 초기화할 때도 컬렉션 초기자를 사용할수 있습니다. 하지만 저는 쓰기도 편하고 읽기도 수월한 딕셔너리 초기자를 권하고 싶습니다. 

Hashtable ht2 = new Hashtable()
{
	{"하나", 1},
	{"둘", 2},
	{"셋", 3}
};





10.10 인덱서
인덱서(Indexer)는 인덱스(Index)를 이용해서 객체 내의 데이터에 접근하게 해주는 프로퍼티라고 생각하면 이해하기 쉽습니다. 객체를 마치 배열처럼 사용할수 있게 해주지요. 인덱서를 선언하는 형식은 다음과 같습니다. 

class 클래스이름
{
	한정자 인덱서형식 this[형식 index] //인덱스의 식별자가 꼭 index일 필요는 없습니다. 취향에 따라 적당한 이름을 사용하세요. 
	{
		get
		{
			//index를 이용하여 내부 데이터 반환
		}
		set
		{
			//index를 이용하여 내부 데이터 저장
		}
	}
}
이인덱서 선언 문법을 보면 알 수 있듯이 인덱서는 프로퍼티처럼 식별자를 따로 가지지 않습니다. 프로퍼티가 이름을 통해 객체 내의 데이터에 접근하게 해준다면 인덱서는 인덱스를 통해 객체 내의 데이터에 접근하게 해줍니다. 
인덱서의 선언 예를 준비해봤습니다. 다음의 MyList는 내부에 정수 형식 배열을 갖고 있고, 인덱서를 통해 이 배열에 접근합니다. 인덱서를 통해 데이터를 저장하고자 하는 시도가 이루어질 때 지정한 인덱스보다 배열의 크기가 작다면 인덱스에 맞춰 배열의 크기를 재조정 합니다. 

class MyList
{
	private int[] array;
	public MyList()
	{
		array = new int[3];
	}
	public int this[int index]
	{
		get
		{
			return array[index];
		}
		set
		{
			if(index >= array.Length)
			{
				Array.Resize<int>(ref array, index + 1 );
				Console.WriteLine("Array Resized : {0}", array.Length);
			}
			array[index] = value;
		}
	}
}

프로퍼티는 객체 내의 데이터에 접근할수 있도록 하는 통로입니다. 인덱서도 프로퍼티처럼 객체 내의 데이터에 접근할수 있도록 하는 통로입니다. 프로퍼티와 다른 점이라면 인덱스(Index)를 이용한다는 사실이죠. 






10.11 foreach 가 가능한 객체 만들기
foreach문은 for문처럼 요소의 위치를 위한 인덱스 변수를 선언할 필요가 없습니다. 세미콜론을 2개나 넣지 않아도 되고 조건문이나 증감식을 쓰지 않아도 됩니다. for문을 이용한 코드에 비해 foreach 문을 이용한 코드는 쓰기도 좋고, 읽기도 좋습니다. 
우리가 잘 알고 있는 것처럼 foreach문은 아무 형식의 객체에서나 사용할수 있는 것이 아닙니다. 배열이나 리스트 같은 컬렉션에서만 사용할수 있지요. 그럼 우리가 앞에서 만들어봤던 MyList는 foreach문이 가능할까요? 될것도 같지만 절대 되지 않습니다. foreach문이 객체 내의 요소를 순회하기 위해서는 foreach 문과의 약속을 지켜야하는데, MyList는 그 약속이 뭔지도 모르거든요. 약속이라, 뭐 떠오르는 것 없습니다.? 네 인터페이스요 foreach구문은 IEnumerable을 상속하는 형식만 지원합니다. 이말은 즉 MyList 클래스도 IEnumerable을 상속하기만 하면 foreach문을 이용해서 요소를 순회할수 있게 할 수 있다는 이야기입니다. 

먼저 IEnumerable 인터페이스가 갖고 있는 메소드는 다음과 같이 단 하나 뿐입니다. MyList는 이메소드를 구현해야 합니다. 

메소드				설명
IEnumerator GetEnumerator()	IEnumerator 형식의 객체를 반환

GetEnumerator()는 IEnumerator 인터페이스를 상속하는 클래스의 객체를 반환해야 하는데요. yield문을 이용하면 IEnumerator를 상속하는 클래스를 따로 구현하지 않아도 컴파일러가 자동으로 해당 인터페이스를 구현한 클래스를 생성해줍니다. yield return 문은 현재 메소드(GetEnumerator())의 실행을 일시 정지시켜놓고 호출자에게 결과를 반환합니다. 메소드가 다시 호출되면, 일시 정지된 실행을 복구하여 yield return 또는 yield break문을 만날 때까지 나머지 작업을 실행하게 됩니다. yield키워드를 이용하는 간단한 예제 프로그램을 만들어보고 계속 진행하겠습니다. 

using System;
using System.Collections;

namespace Yield
{
	class MyEnumerator
	{
		int[] numbers = {1,2,3,4};
		public IEnumerator GetEnumerator()
		{
			yield return numbers[0];
			yield return numbers[1];
			yield return numbers[2];
			yield break; //yield break는 GetEnumerator()메소드를 종료시킵니다. 
			yield return numbers[3]; //따라서 이 코드는 실행되지 않습니다. 
		}
	}
	class MainApp
	{
		public static void Main(string[] args)
		{
			var obj = new MyEnumerator();
			foreach( int i in obj)
				Console.WriteLine(i);	
		}
	}
}

GetEnumerator()메소드는 IEnumerator형식의 객체, 다시 말해 IEnumerator인터페이스를 상속하는 클래스의 객체를 반환하면 됩니다. 그럼 IEnumerator 인터페이스는 무엇일까요? 다음은 IEnumerator 인터페이스의 메소드및 프로퍼티 목록입니다. 

메소드 또는 프로퍼티			설명
boolean MoveNext()			다음 요소로 이동합니다. 컬렉션의 끝을 지난 경우에는 false, 이동이 성공한 경우에는 true를 반환합니다. 
void Reset()				컬렉션의 첫 번째 위치의 앞으로 이동합니다. 첫 번째 위치가 0번인 경우 Reset()을 호출하면 -1번으로 이동하는 것
					이죠. 첫 번째 위치로의 이동은 MoveNext()를 호출한 다음에 이루어집니다. 
Object Current {get;}			컬렉션의 현재 요소를 반환합니다. 

앞에서는 yield 문의 도움을 받아서 IEnumerator를 상속하는 클래스 구현을 피했는데, 이번에는 직접 IEnumerator를 상속하는 클래스를 구현해보겠습니다. 다음 예제 코드에서 MyList는 IEnumerable과 IEnumerator 모두를 상속합니다. MoveNext(), Reset() 메소드와 Current 프로퍼티를 구현하면 IEnumerator의 요구사항을 충족하므로 MyList는 IEnumerator가 됩니다. 따라서 IEnumerable이 요구하는 GetEnumerator()메소드를 구현할 때는 그저 자기 자신(this)을 반환하기만 하면됩니다. 

using System;
using System.Collections;

namespace Enumerable
{
	class MyList : IEnumerable, IEnumerator
	{
		private int[] array;
		int position = -1; //컬렉션의 현재 위치를 다루는 변수입니다. 초깃값은 0이 아닌 -1입니다. 0은 배열의 첫번째 요소를 가리키는 수입니다. 
				position이 이 값(0)을 갖고 있을 때 foreach 문이 첫번째 반복을 수행하면 MoveNext()메소드를 실행하고 이때 position이 1
				이되어 두 번째 요소를 가져오는 문제가 생깁니다. 

	public MyList()
	{
		array = new int[3];
	}
	public int this[int index]
	{
		get
		{
			return array[index];
		}
		set
		{
			if(index >= array.Length)
			{
				Array.Resize<int>(ref array, index + 1);
				Console.WriteLine($"Array Resized : {array.Length}");
			}
			array[index] = value;
		}
	}

	//IEnumerator 멤버
	public object Current //IEnumerator로부터 상속받은 Current프로퍼티는 현재 위치의 요소를 반환합니다. 
	{
		get
		{
			return array[position];
		}
	}
	//IEnumerator 멤버
	public bool MoveNext()	//IEnumerator로부터 상속받은 MoveNext()메소드, 다음 위치의 요소로 이동합니다 
	{
		if( position == array.Length -1)
		{
			Reset();
			return false;
		}
		position++;
		return (position < array.Length);
	}
	//IEnumerator 멤버 //IEnumerator 로부터 상속받은 Reset()메소드, 요소의 위치를 첫 요소의 앞으로 옮깁니다. 
	public void Reset()
	{
		position = -1;
	}
	//IEnumerable 멤버
	public IEnumerator GetEnumerator()
	{
		return this;
	}
}
	class MainApp
	{
		static void Main(string[] args)
		{
			MyList list = new MyList();		
			for(int i=0; i< 5; i++)
				list[i] = i;
			foreach( int e in list)
				Console.WriteLine(e);
		}
	}
}
	