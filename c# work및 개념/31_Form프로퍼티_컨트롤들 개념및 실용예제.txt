20.4.2 Form의 프로퍼티를 조절하여 윈도우 모양 바꾸기
Form 클래스는 윈도우 모양을 결정짓는 크기, 배경색, 전경색, 투명도, 제목, 폰트 등 여러 가지 프로퍼티를 갖고 있습니다. 다음표에는 Form 클래스의 프로퍼티 중 윈도우의 모습을 결정짓는 항목들이 나타나 있습니다.(MSDN에는 더 많은 프로퍼티가 설명되어 있지만, 여기에서는 지면 문제 때문에 그중에서 자주 사용하는 것들만 다룹니다. )

종류		프로퍼티				설명
크기		Width				창의 너비를 나타냅니다.
		Height				창의 높이를 나타냅니다.

색깔		BackColor			창의 배경 색깔을 나타냅니다.
		BackgroundImage			창의 배경 이미지를 나타냅니다.
		Opacity				창의 투명도를 나타냅니다.

스타일		MaximizeBox			최대화 버튼을 설치할 것인지의 여부를 나타냅니다.
		MinimizeBox			최소화 버튼을 설치할 것인지의 여부를 나타냅니다.
		Text				창의제목을 나타냅니다. 

이프로퍼티들 중에서 창의 크기를 결정하는 Width와 Height를 예제 프로그램을 통해 조정해보겠습니다. 다음 예제 프로그램은창을 마우스왼쪽 버튼으로 누르면 가로가 길게, 오른쪽 버튼으로 누르면 세로가 길게 크기를 바꿉니다. 

using System;
using System.Windows.Forms;

namespace FormSize
{
	class MainApp : Form
	{
		static void Main(string[] args)
		{
			MainApp form = new MainApp();
			form.Width = 300;
			form.Height = 200;
			form.MouseDown += new MouseEventHandler(form_MouseDown);

			Application.Run(form);
		}
		static void form_MouseDown(object sender, MouseEventArgs e)
		{
			Form form = (Form)sender;
			int oldWidth = form.Width;
			int oldHeight = form.Height;

			if(e.Button == MouseButtons.Left)
			{
				if(oldWidth < oldHeight)
				{
					form.Width = oldHeight;
					form.Height = oldWidth;
				}
			}else if(e.Button == MouseButton.Right)
			{	
				if(oldHeight < oldWidth)
				{
					form.Width = oldHeight;
					form.Height = oldWidth;
				}
			}
			Console.WriteLine("윈도우의 크기가 변경되었습니다.");
			Console.WriteLine($"Width : {form.Width}, Height: {form.Height}");
		}
	}
}

별것 아니긴 하지만 사용자 인터페이스가 변하는걸 보면 소소한 재미가 느껴지지 않습니까? 이번에는 창의 배경색과 투명도를 조절해보고 더불어서 창의 배경 이미지도 바꿔보겠습니다. 
창의 배경색은 BackColor 프로퍼티를 통해 바꿀수 있는데, System.Drawing.Color 형식이기 때문에 다음과 같이 Color 클래스의 정적 메소드나 미리 정의된 상수값을 이용해서 값을 지정해야 합니다. 		

Form form = new Form();
form.BackColor = Color.Red; //Color 구조체에는 Red, Green, Blue 같은 대표적인 색부터 MistyRose, WhiteSmoke 처럼 잘 알려지지 않은 색에 이르기까지 다양한 			색상이 미리 정의되어 있습니다.

form.BackColor = Color.FromArgb(255, 255, 0, 0); //불투명한 빨간색 (프로그래머의 입맛에 맞춰 정확한 값을 지정하고 싶으면 FromArgb()메소드를 이용합니다.
						첫번째 인수는 투명도를 나타내는 Alpha, 두 번째는 Red, 세번째는 Green, 네번째는 Blue 값을 나타내며
						각 인수는 0부터 255사이의 값을 가질수 있습니다. 

창의 투명도는 Opacity 프로퍼티를 통해 조절합니다. 이 프로퍼티는 double 형식으로 0.00부터 1.00사이의 값을 가집니다. 0에 가까울수록 투명해지고, 1에 가까울수록 불투명해집니다. 사용 예는 다음과 같습니다. 

Form form = new Form();
form.Opacity = 0.87; //살짝 투명
form.Opacity = 1.00; //완전 불투명

창에 배경 이미지를 지정할수도 있습니다. BackgroundImage 프로퍼티에 Image 형식의 인스턴스를 할당하면 됩니다. Image 의 인스턴스는 여러 가지 방법으로 만들수 있는데, 다음 예제에서는 파일의 경로를 인수로 넘겨 FromFile() 메소드를 호출하는 방법을 보여줍니다. 

Form form = new Form();

form.BackgroundImage = Image.FromFile("MyImage.JPG");

창의 색상, 투명도, 배경 이미지 등을 바꾸기 위한 기본 초식은 모두 익혔습니다. 지금까지 설명한 내용을 모아 프로그램으로 만들어보겠습니다. 마우스 왼쪽버튼을 누르면 랜덤하게 창의 배경색을 변경하고 오른쪽 버튼을 누르면 배경 이미지를 표시하며, 창 위에서 마우스 휠을 굴리면 투명도가 변경되는 기능을 구현할 겁니다. 이번 장에서 쭉 해왔던 것처럼 콘솔 앱(.NET Framework)템플릿을 이용하여 프로젝트를 생성하고, System.Windows.Forms와 System.Drawing 어셈블리를 프로젝트에 참조에 추가시키세요. 그리고 다음의 코드를 따라 입력한 뒤 컴파일해서 실행해보시길 바랍니다.

아차 잠깐만요. 이 예제 프로그램은 이미지 파일 하나를 필요로 합니다. 프로그램을 테스트해보기 전에 여러분이 좋아하는 이미지를 sample.jpg라는 이름으로 저장해서 프로그램의 실행 파일과 같은 디렉터리에 복사해주세요. 

using System;
using System.Drawing;
using System.Windows.Forms;

namespace FormBackground
{
	class MainApp : Form
	{
		Random rand;
		public MainApp()
		{
			rand = new Random();

			this.MouseWheel += new MouseEventHandler(MainApp_MouseWheel);
			this.MouseDown += new MouseEventHandler(MainApp_MouseDown);
		}
		void MainApp_MouseDown(object sender, MouseEventArgs e)
		{
			if(e.Button == MouseButtons.Left)
			{
				Color oldColor = this.BackColor;
				this.BackColor = Color.FromArgb(rand.Next(0, 255), rand.Next(0, 255), rand.Next(0, 255));
			}else if(e.Button == MouseButton.Right)
			{
					if(this.BackgroundImage != null)
					{
						this.BackgroundImage = null;
						return;
					}
					string file = "sample.jpg";
					if(System.IO.File.Exists(file) == false)
						MessageBox.Show("이미지 파일이 없습니다.");
					else
						this.BackgroundImage = Image.FromFile(file);
			}
		}
		void MainApp_MouseWheel(object sender, MouseEventArgs e)
		{
			this.Opacity = this.Opacity + (e.Delta>0?0.1:-0.1);
			Console.WriteLine($"Opacity: {this.Opacity}");
		}
		static void Main(string[] args)
		{
			Application.Run(new MainApp);
		}
	}
}


지금쯤이면 여러분도 Form 클래스의 프로퍼티를 통해 창의 모양을 바꾸는 요령을 터득했을 겁니다. Form 클래스에는 창의 모습을 결정짓는 다양한 프로퍼티들이 많지만, 아쉬운 대로 최소화/최대화 버튼을 사라지게 하거나 나타나게 하는 MinimizeBox/MaximizeBox 프로퍼티와 창의 제목을 나타내는 Text 프로퍼티까지만 더 살펴보고 컨트롤 이야기로 넘어가겠습니다. 

MinimizeBox와 MaximizeBox 프로퍼티는 boolean 형식으로, 버튼을 창에 표시하고자 할 때는 true를 입력하고 감추고자 할 때는 false를 입력합니다. 다음 코드의 경우 창에서 최대화 버튼은 표시하고 최소화 버튼은 감추도록 합니다. 

Form form = new Form();
form.MaximizeBox = true;
form.MinimizeBox = false;

창의 제목을 나타내는 Text 프로퍼티는 string 형식입니다. 그냥 다음과 같이 표시하고자 하는 제목을 문자열로 입력해주면 창의 제목이 변경됩니다. 
Form form = new Form();
form.Text = "Form 프로퍼티 테스트";

다음 예제 프로그램이 하나 더 준비되어 있습니다. 어떤 내용이 구현되어 있을지는 여러분도 예상할수 있겠지요? 네 애플리케이션 창의 최소화 최대화 버튼을 표시하고 감추는 기능과 창의 제목을 변경하는 기능이 구현되어 있습니다. 





20.4.3 Form 위에 컨트롤올리기
사용자 인터페이스는 응용 프로그램과 사용자가 대화를 하는 창구입니다. 그런데 이번 장에서 지금까지 만들어온 예제 프로그램처럼 창 하나만 달랑 갖고 있어서는 사용자에게 어떤 정보도 제공할 수 없고 어떤 입력도 받을수 없습니다. 

윈도우 OS는 사용자 인터페이스를 위해 메뉴, 콤보박스, 리스트 뷰, 버튼, 텍스트박스 등과 같은 표준 컨트롤을 제공합니다. .NET의 WinForm 은 이들 표준 컨트롤을 아주 간편하게 창 위에 올릴수 있도록 잘 포장해놨습니다. 이 컨트롤들을 제어하는 데 필요한 각종 메소드와 프로퍼티, 이벤트들이 잘 정리되어 있는 것은 더 말할 것도 없지요. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 컨트롤이 뭔가요?
새로운 용어가 등장했지요? 컨트롤(Control)이란 윈도우 OS가 제공하는 사용자 인터페이스 요소를 말합니다. 응용 프로그램을 제어하는 데 사용하는 도구라는 의미에서 붙여진 이름이지요. 조금 전에 언급했던 버튼, 텍스트박스 등이 컨트롤의 예입니다. 유닉스의 모티프나 자바의 스윙 같은 GUI 플랫폼에서는 이것을 위젯(Window.Gadget을 줄여(Widget이라고 부르게됐습니다.)이라고 부르고 델파이에서는 VCL(Visual Component Library)이라고 부릅니다.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

어디 한번 컨트롤을 창 위에 올려볼까요? 우리의 밋밋한 애플리케이션 창을 바꿔보면 좋겠네요. 컨트롤을 폼 위에 올리려면 다음과 같은 과정을 따라 코드로 작성해주면 됩니다. 

1. 컨트롤의 인스턴스 생성
2. 컨트롤의 프로퍼티에 값 지정
3. 컨트롤의 이벤트에 이벤트 처리기 등록
4. 폼에 컨트롤 추가

이렇게 글로 설명하는 것보단 아무래도 코드를 통해 설명하는 편이 이해에 도움이 되겠죠? 우리는 프로그래머니까요. 이 절차를 거치면서 버튼을 창 위에 올리는 코드를 같이 보시죠 


STEP1
WinForm의 모든 컨트롤은 System.Windows.Forms.Control을 상속합니다. 이 형식이 모든 윈도우 컨트롤이 지원해야 하는 그래픽이나 동작, 이벤트 등을 제공하기 때문에 이 컨트롤로부터 상속받는 어떤 클래스라도 Form위에 올려서 윈도우 사용자 인터페이스 요소로 사용할 수가 있습니다. 우리는 버튼을 창 위에 올리기로 했지요? System.Windows.Forms.Button 클래스의 인스턴스를 만들겠습니다. 

Button button = new Button();


STEP2
컨트롤의 프로퍼티에 값 지정
인스턴스를 만들었으면 각 프로퍼티에 값을 지정해서 컨트롤의 모양을 결정합니다. 
button.Text = "Click Me!";
button.Left = 100;
button.Top = 50;


STEP3
컨트롤의 이벤트에 이벤트 처리기 등록
컨트롤은 애플리케이션의 정보를 표시하는 기능을 하기도 하지만 사용자로부터 입력을 받는 창구이기도 합니다. 사용자가 버튼을 클릭하면 메시지 박스를 띄우도록 이벤트 처리기를 선언하고, 이벤트에 등록합니다. 다음 코드는 지금까지 작성해왔던 이벤트 처리기와는 모습이 조금 다르지요? 설명의 흐름을 끊지 않기 위해 따로 이벤트 처리기를 메소드로 선언하지 않고 람다식으로 구현해봤습니다.

button.Click += (object sender, EventArgs e) =>
		{
			MessageBox.Show("딸깍");
		};


STEP4
폼에 컨트롤 추가
이제 창에 버튼을 올릴 준비가 다 됐습니다. Form의 인스턴스를 생성하고, 이 인스턴스에서 Controls 프로퍼티의 Add()메소드를 호출하여 우리가 선언한 button객체를 Form에 올립니다. 

MainApp form = new MainApp();
form.Controls.Add(button);






20.5 폼 디자이너를 이용한 WinForm UI 구성
비주얼 스튜디오는 UI계의 포토샵이라고 할 만한, 사용하기는 쉬우면서도 기능이 강력한 폼 디자이너(Form Designer)를 제공합니다. 폼 디자이너는 비주얼 스튜디오 IDE의 일부로, 우리가 코드를 통해 컨트롤을 폼위에 배치하고 프로퍼티를 변경했던 작업을 마우스 클릭만으로 가능하게 해줍니다. 이러한 작업 편의성뿐 아니라, 폼 디자이너는 우리가 수작업을 통해 만든 것보다 품질이 우수한 UI를 제공합니다.

폼 디자이너는 새 프로젝트를 Windows Form 응용 프로그램 템플릿을 선택하여 만들면 나타납니다. 다음 그림에서 비주얼 스튜디오 IDE의 중앙에 있는 것이바로 폼 디자이너입니다. 마치 실제 프로그램의 UI가 떠 있는 것처럼 보이지 않습니까? 하지만 저것은 실행중인 프로그램이 아닙니다. 폼 디자이너로 디자인 중인 UI입니다. 이처럼 폼 디자이너는 WYSIWYG 방식의 UI 디자인을 지원합니다. 

폼 디자이너는 도구 상자(이 그림에서 IDE의 왼편에 있는 것이 도구 상자입니다.)와 함께 사용해야 합니다. 이 도구 상자에는 WinForm에서 제공하는 수많은 컨트롤들을 담고 있어서 컨트롤 팔레트(Control Palette)라는 이름으로 불리기도 합니다. 도구 상자와 폼 디자이너를 이용해서 UI를 구성하는 방법은 다음과 같습니다. 

1. 도구 상자에서 사용할 컨트롤을 골라 마우스 커서를 위치시키고 왼쪽 버튼을 클릭합니다. 
2. 마우스 커서를 그대로 폼 디자이너 위로 옮긴 뒤 다시 왼쪽 마우스 버튼을 클릭합니다. 
3. 폼 위에 올려진 컨트롤의 위치 및 크기, 프로퍼티를 수정합니다. 

이 순서가 글로 쓰여 있어서 폼 디자이너의 사용 방법이 어려워 보일 수도 있지만, 실제로 사용해보면 사용법이 굉장히 간단하다는 것을 느낄수 있습니다. 실습은 잠시 후에 해보겠습니다. 
앞의 그림에서 도구 상자 쪽을 유심히 본 독자들은 눈치챘을 텐데, WinForm은 앞에서 다뤘던 버튼 컨트롤 외에도 수많은 컨트롤들을 제공하고 있습니다. 이 컨트롤들을 이책에서 모두설명할수 있으면 좋겠지만 안타깝게도 지면이 한정되어 있기 때문에(지면을 늘릴수도 있지만 그럼 다른 두 가지도 늘어납니다. 책의 가격과 여러분의 학습량이요)저는 다소 아쉬운 선택을 하기로 했습니다. 몇 가지 컨트롤만 소개하기로 말입니다. 그나마 다행스러운 사실은 WinForm 컨트롤은 프로퍼티와 이벤트를 다루는 요령만 이해하면 낯선 컨트롤도 손쉽게 사용 방법을 익할수 있다는 것입니다. 따라서 이 책을 공부한 후 여러분이 필요에 의해 새로운 컨트롤들을 접하게 되더라도 별 어려움 없이 사용 방법을 익힐수 있을 겁니다. 
이어지는 절에서는 폼 디자이너의 사용법과 새로운 컨트롤의 사용법을 실습 위주로 설명합니다. 다양하면서도 소소한 내용들에 대해 백과사전처럼 이론을 늫어놓아봐야 집중력만 떨어지고 재미도 없을것 같아서요. 그래서 일단 예제 WinForm 프로젝트를 하나 만들어두고, 이 프로젝트에 컨트롤을 조금씩 올려가면서 설명하겠습니다.







20.5.1 새 프로젝트 만들기
조금 전에 이야기한 것처럼 WinForm 프로젝트를 하나 만들겠습니다. 비주얼 스튜디오를 실행하고 [파일] > [새 프로젝트]메뉴 항목을 클릭하여 새 프로젝트 대화상자를 띄우세요. 이 대화상자에서 템플릿으로는 Windows Forms App (.NET)을 선택하고 <다음> 버튼을 클릭한 뒤 [프로젝트 이름]에 UsingControls 를 입력하고 <만들기> 버튼을 클릭하세요. 창이 닫히면서 새 프로젝트가 만들어질 겁니다. 

프로젝트가 생성됐으면 다음 그림과 같이 솔루션 탐색기에서 Form1.cs 파일의 이름을 MainForm.cs로 변경하세요. 

준비가 다 됐군요. 다음 절부터는 폼 디자이너를 이용해서 UI를 꾸며보겠습니다. 





20.5.2 Form
우리가 만들 예제 프로그램의 주 윈도우가 될 MainForm의 속성을 폼 디자이너를 이용해서 변경해 보겠습니다. 윈도우의 타이틀 바의 텍스트만 바꿔보죠. 먼저 폼 디자이너에서 폼을 왼쪽 마우스로 한번 선택하세요. 

그럼 다음과 같이 속성창(속성창은 IDE의 우측 하단에 있습니다. 만약 창 속성 창이 IDE어디에도 안 보인다면[보기] > [속성 창]을 선택하면 나타날 겁니다.)에서 MainForm의 프로퍼티와 값 목록을 출력할 겁니다. 이 속성 창에서 Text 프로퍼티를 찾아 ControlTest로 값을 변경하세요. 

앞으로 이 폼 위에 올릴 컨트롤의 프로퍼티들도 폼에 대해 작업한 것과 같은 요령으로 변경하면 됩니다. 다음 절을 같이 볼까요?





20.5.3 GroupBox, Label, ComboBox, CheckBox, TextBox

STEP1
지금부터는 한 번에 여러 개의 컨트롤을 폼 위에 배치하겠습니다. 다음 그림과 같이 컨트롤을 배치하고 프로퍼티를 변경하되, GroupBox 컨트롤부터 배치한 뒤 이위에 나머지 컨트롤을 배치하기 바랍니다. 

컨트롤 : GroupBox
Name : grpFont
Text : ComboBox, CheckBox, TextBox

컨트롤 : Label
Name : lblFont
Text : Font :

컨트롤 : ComboBox
Name : cboFont

컨트롤 : CheckBox
Name : chkBold
Text : 굵게

컨트롤 : CheckBox
Name : chkItalic
Text : 이탤릭

컨트롤 : TextBox
Name : txtSampleText
Text : Hello, C#

화면 디자인은 GroupBox를 만들고 그안에 라벨을 형성 그옆에 콤보박스 넣고 그 옆에 체크박스 2개를 세팅 그아래에는 텍스트박스 넣고 마무리




컨트롤 배치를 마쳤으면 이젠 각 컨트롤에 이벤트 처리기를 등록할 차례입니다. 다른 컨트롤보다도 MainForm의 Load 이벤트에 대한 처리기를 먼저 등록하겠습니다. 이 이벤트가 다른 어떤 컨트롤의 이벤트보다도 가장 먼저 발생할 이벤트이기 때문입니다. 폼 디자이너에서 MainForm을 선택하고 다음 그림에서처럼 속성 창에서 <이벤트> 버튼 (번개 아이콘)을 클릭해 Form 컨트롤의 이벤트 목록을 여세요. 그리고 이벤트 목록에서 Load 항목을 찾아 더블클릭 하세요. 

여기까지 작업했다면 IDE가 MainForm_Load() 이벤트 처리기의 껍데기를 만들면서 코드 편집창을 자동으로 열었을 겁니다. 이 껍데기에 다음과 같이 코드를 추가해서 이벤트 처리기를 완성해주세요. 

private void MainForm_Load(object sender, EventArgs e)
{
	var Fonts = FontFamily.Families; //운영체제에 설치되어 있는 폰트 목록 검색
	foreach(FontFamily font in Fonts) // cboFont 컨트롤에 각 폰트 이름 추가
		cboFont.Items.Add(font.Name);
}


STEP2
코드 편집창을 연 김에 다음 메소드도 MainForm 클래스 안에 추가해주세요. 이 메소드는 cboFont와 chkBold, chkItalic 컨트롤의 이벤트 처리기에서 호출하기 위한 것으로 txtSampleText의 문자열 폰트를 변경하는 기능을 합니다. 

void ChangeFont()
{
	if(cboFont.SelectedIndex < 0) // cboFont에서 선택한 항목이 없으면 메소드 종료
		return;
	FontStyle style = FontStyle.Regular; //FontStyle 객체를 초기화합니다. 

	if(chkBold.Checked) // 굵게 체크 박스가 선택되어 있으면 Bold 논리합 수행
		style |= FontStyle.Bold;
	if(chkItalic.Checked) //이탤릭 체크 박스가 선택되어 있으면 Italic 논리합 수행
		style |= FontStyle.Italic;
	txtSampleText.Font = new Font((string)cboFont.SelectedItem, 10, style); //txtSampleText의 Font 프로퍼티를 앞에서 만든 style로 수정 
}


STEP3
다음 표에 있는 각 컨트롤에 대해 이벤트 처리기 껍데기를 만들어주세요. 요령은 MainForm_Load() 이벤트 처리기를 만들 때와 같습니다. 

컨트롤		이벤트				이벤트 처리기
cboFont		SelectedIndexChanged		cboFont_SelectedIndexChanged
chkBold		CheckedChanged			chkBold_CheckedChanged
chkItalic		CheckedChanged			chkItalic_CheckedChanged

이벤트 처리기 껍데기들을 만들었으면 다음과 같이 코드를 추가해서 완성하세요. 세 개의 이벤트 처리기 모두 동일하게 조금 전에 선언한 ChangeFont()메소드를 호출합니다. 

private void cboFont_SelectedIndexChanged(object sender, EventArgs e)
{
	ChangeFont();
}
private void chkBold_CheckedChanged(object sender, EventArgs e)
{
	ChangeFont();
}
private void chkItalic_CheckedChanged(object sender, EventArgs e)
{
	ChangeFont();
}




STEP4
지금까지 작업한 내용을 테스트해보겠습니다. F5 키를 눌러 프로그램을 디버깅 모드로 실행해서 테스트해보세요. cboFont 콤보박스에 폰트 목록이 잘 나오는지 폰트를 선택하면 txtSampleText의 텍스트 폰트가 변경되는지를 보면 됩니다. 굵게 체크박스와 이탤릭 체크박스의 테스트도 잊으면 안 됩니다. 








20.5.4 TrackBar, ProgressBar
이번에는 TrackBar와 ProgressBar 컨트롤을 테스트해보겠습니다. 

STEP1
다음 그림과 같이 컨트롤을 배치하고 프로퍼티를 변경하되 아까처럼 GroupBox 컨트롤부터 배치한 뒤 이 위에 나머지 컨트롤을 배치하기 바랍니다. 

컨트롤 : GroupBox
Name : grpBar
Text : TrackBar && ProgressBar

컨트롤 : TrackBar
Name : tbDummy
Maximum : 20

컨트롤 : ProgressBar
Name : pgDummy
Maximum : 20

배치 : 그룹박스 놓고 그하단에 트랙바 놓고 그하단에 프로그레스 바 배치


STEP2
다음 표에 있는 각 컨트롤에 대해 이벤트 처리기 껍데기를 만들어주세요. 요령은 MainForm_Load()이벤트 처리기를 만들 때와 같습니다. 

컨트롤			이벤트			이벤트 처리기
tbDummy		Scroll			tbDummy_Scroll

다음과 같이코드를 입력하여 tbDummy_Scroll()이벤트 처리기를 완성하세요. 

private void tbDummy_Scroll(object sender, EventArgs e)
{
	pgDummy.Value = tbDummy.Value; //슬라이더의 위치에 따라 프로그레스바의 내용도 변경
}

STEP3 
작업한 내용을 확인해보겠습니다. F5 키를 눌러 프로그램을 디버깅 모드로 실행하고 ,TrackBar의 슬라이더를 이리저리 옮기면서 ProgressBar의 내용도 따라서 변경되는지확인해보세요. 





20.5.5 Button, Form, Dialog
Button 컨트롤은 이미 구면이죠? 그래도 폼 디자이너로는 Button 컨트롤을 배치해본적 없으니 처음 본느 것처럼 읽어주세요. 그래야 덜 지루하죠. 이번에는 Button 컨트롤을 클릭했을 때 Modal창, Modaless 창, MessageBox을 띄우는 기능을 구현해보겠습니다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? Modal? Modaless?
윈도우 프로그램은 두 가지 모두의 자식 창을 띄울 수 있는데 그중 한 가지가 Modal, 또 다른 한가지가 Modaless입니다. Modal창은 일단 띄우고 나면 창을 닫을 때까지 프로그램의 다른 UI를 절대 사용할수 없다는 것이 특징입니다. 프로그램이 심각한 정보를 표시해야 하거나 사용자로부터 중요한 결정 사항을 입력받아 다음 단계를 진행해야 할 때 주로 사용하곤 합니다. 

이와 달리 Modaless 창은 띄우고 난 뒤에도 프로그램의 다른 UI에 사용자가 접근할수 있습니다. 웹 브라우저의 파일 다운로드 창이 Modaless창의 좋은 예죠. 파일을 다운로드하면 자식 창이 떠서 파일 다운도르를 수행하지만 사용자는 여전히 웹 브라우저로 다른 페이지를 탐색할수 있거든요. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

STEP1
다음 그림과 같이 컨트롤을 배치하고 프로퍼티를변경하세요. 요령은 이전과 동일합니다. 

컨트롤 : GroupBox
Name : grpForm
Text : Modal&&Modaless

컨트롤 : Button
Name : btnModal
Text : Modal

컨트롤 : Button
Name : btnModaless
Text : Modaless

컨트롤 : Button
Name : btnMsgBox
Text : MessageBox

배치 : 그룹박스 안에 버튼 3개를 가지런히 놓아준다



STEP2
다음 표와 같이 각 버튼에 대해 이벤트 처리기 껍데기를 만들어주세요. 

컨트롤		이벤트			이벤트 처리기
btnModal	Click			btnModal_Click
btnModaless	Click			btnModaless_Click
btnMsgBox	Click			btnMsgBox_Click

이벤트 처리기 껍데기를 만들었으면 다음과 같이 코드를 입력하여 완성하세요. 

private void btnModal_Click(object sender, EventArgs e)
{
	Form frm = new Form();
	frm.Text = "Modal Form";
	frm.Width = 300;
	frm.Height = 100;
	frm.BackColor = Color.Red;
	frm.ShowDialog(); //Modal 창을 띄웁니다. 
}
private void btnModaless_Click(object sender, EventArgs e)
{
	Form frm = new Form();
	frm.Text = "Modaless Form";
	frm.Width = 300;
	frm.Height = 300;
	frm.BackColor = Color.Green;
	frm.Show(); //Modaless 창을 띄웁니다. 
}
private void btnMsgBox_Click(object sender, EventArgs e)
{
	MessageBox.Show(txtSampleText.Text, "MessageBox Test", MessageBoxButton.OK, MessageBoxIcon.Exclamation);
}


STEP3
작업한 내용을 확인해보겠습니다. F5키를 눌러 프로그램을 디버깅 모드로 실행하세요. Modal 창을 띄웠을 때 제가 설명한 대로 프로그램의 다른 UI를 사용할수 없는지, 또는 Modaless 창을 띄웠을 때 프로그램의 다른 UI를 사용할수 있는지 확인해보길 바랍니다. 







20.5.6 TreeView, ListView
마지막으로 윈도우 탐색기에서 항상 볼 수 있는 TreeView와 ListView 컨트롤을 사용해보겠습니다. 


STEP1
먼저 다음 그림과 같이 컨트롤을 배치하고 프로퍼티를 변경하세요

컨트롤 : GroupBox
Name : grpTreeList
Text : TreeView && ListView

컨트롤 : TreeView
Name : tvDummy

컨트롤 : ListView
Name : lvDummy
View : Details

컨트롤 : Button
Name : btnAddRoot
Text : 루트 추가

컨트롤 : Button
Name : btnAddChild
Text : 자식 추가

배치 : 그룹박스 놓고 그안에 트리뷰와 그옆에 리스트뷰를 배치, 그하단에 버튼2개 배치


STEP2
MainForm.cs를 코드 편집기로 열어서 다음과 같이 필드 하나를 추가해주세요 TreeView의 노드 이름으로 사용할 난수 생성기입니다. 

public partial class MainForm : Form
{
	Random random = new Random(37);
	//...
}


STEP3
MainForm() 생성자에도 추가할 코드가 있습니다. 다음과 같이 lvDummy에 컬럼을 생성하는 코드를 입력해주세요. 

public MainForm()
{
	InitializeComponent();
	lvDummy.Columns.Add("Name");
	lvDummy.Columns.Add("Depth");
}



STEP4
코드 편집기를 연 김에 다음의 TreeToList()메소드도 추가합니다. 이 메소드는 TreeView의 각 노드를 ListView로 옮겨 표시하는 기능을 합니다. 
void TreeToList()
{
	lvDummy.Items.Clear();
	foreach(TreeNode node in tvDummy.Nodes)
		TreeToList(node);
}

void TreeToList(TreeNode Node)
{
	lvDummy.Items.Add(new ListViewItem(new string[]{ Node.Text, Node.FullPath.Count(f => f == '\\').ToString() }))); //TreeNode형식의 FullPath 프로퍼티
													는 루트 노드부터 현재 노드 까지의
													경로를 나타내며, 각 경로는 \로
													구분합니다. 
	foreach(TreeNode node in Node.Nodes)
	{
		TreeToList(node);
	}
}




STEP5
다시 폼 디자이너로 돌아와서, 다음 표와 같이<루트 추가> 버튼과 < 자식 추가> 버튼에 대해 이벤트 처리기 껍데기를 만들어주세요. 

컨트롤		이벤트		이벤트 처리기
btnAddRoot	Click		btnAddRoot_Click
btnAddChild	Click		btnAddChild_Click

이벤트 처리기 껍데기를 만들었으면 다음과 같이 코드를 입력하여 완성하세요. 

private void btnAddRoot_Click(object sender, EventArgs e)
{
	tvDummy.Nodes.Add(random.Next().ToString());
	TreeToList();
}
private void btnAddChild_Click(object sender, EventArgs e)
{
	if(tvDummy.SelectedNode == null)
	{
		MessageBox.Show("선택된 노드가 없습니다.", "TreeView Test", MessageBoxButtons.OK, MessageBoxIcon.Error);
		return;
	}
	tvDummy.SelectedNode.Nodes.Add(random.Next().ToString());
	tvDummy.SelectedNode.Expand();
	TreeToList();
}



STEP6
작업한 내용을 확인해야겠지요? F5키를 눌러 프로그램을 디버깅 모드로 실행하세요. <루트 추가> 버튼과 <자식 추가> 버튼을 눌러 TreeView에 노드를 생성하고, TreeView에 생성된 노드들이 ListView에도 표시되는지 확인해보세요. 