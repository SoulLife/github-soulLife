11.6 foreach를 사용할수 있는 일반화 클래스
10장에서 foreach를 사용할수 있는 클래스를 만드는데필요한 것을 설명한 적이 있는데, 혹시 기억하고 있습니다.? 네 IEnumerable 인터페이스를 상속해서 클래스를 만들었습니다. 
일반화 클래스도 IEnumerable 인터페이스를 상속하면 일단은 foreach를 통해 순회할수 있지만, 요소를 순회할 때마다 형식 변환을 수행하는 오버로드가 발생한다는 문제가 있습니다. 기껏 일반화를 통해 형식 변환을 제거했더니 foreach 구문에서 형식 변환을 일으켜 성능을 저하시킨다니요. 너무억울하지 않습니까?
System.Collections.Generic 네임스페이스에 이 문제를 풀 수 있는 열쇠가 있습니다. IEnumerable의 일반화 버전인 IEnumerable<T>인터페이스가 바로 그것입니다. 이 인터페이스를 상속하면 형식 변환으로 인한 성능 저하가 없으면서도 foreach 순회가 가능한 클래스를 작성할수 있습니다. 
우리가 구현해야 할 IEnumerable<T> 인터페이스의 메소드를 살펴보겠습니다. 

메소드				설명
IEnumerator GetEnumerator()	IEnumerator 형식의 객체를 반환(IEnumerable로부터 상속받은 메소드)
IEnumerator<T> GetEnumerator()	IEnumerator<T>형식의 객체를 반환

IEnumerable<T> 인터페이스는 GetEnumerator() 메소드를 두 개나 갖고 있습니다. 위의 표를 자세히 보면 메소드들은 이름이 같긴 하지만 반환 형식이 다릅니다. 일 둥 중에 IEnumerator를 반환하는 버전의 GetEnumerator() 메소드는 IEnumerable<T> 인터페이스가 IEnumerable 인터페이스로부터 상속을 받아 얻어온 것입니다. 그리고 IEnumerator<T>를 반환하는 버전은 IEnumerable<T>에서 새로 선언된 메소드입니다. 여하튼 우리는 꼼짝없이 두 가지 버전을 모두 구현해야 합니다. 
다음은 IEnumerator<T>의 메소드와 프로퍼티입니다. 


메소드 또는 프로퍼티		설명
boolean MoveNext()		다음 요소로이동합니다. 컬렉션의 끝을 지난 경우에는 false, 이동이 성공한 경우에는 true를 반환합니다. 
void Reset()			컬렉션의 첫 번째 위치의 앞으로 이동합니다. 첫번째 위치가 0번일때, Reset()을 호출하면 -1번으로 이동하는 것이죠. 
				첫 번째 위치로의 이동은 MoveNext()를 호출한 다음에 이루어집니다. 
Object Current { get; }		컬렉션의 현재 요소를 반환합니다.(IEnumerator로부터 상속받은 프로퍼티)
T Current {get; }			컬렉션의 현재 요소를 반환합니다. 

IEnumerator<T>도 Current 프로퍼티가 두 가지 버전을 갖고 있습니다. 하나는 IEnumerator로 부터 상속받은 버전, 또 다른 하나는 IEnumerator<T>에서 선언된 일반화를 지원하는 버전입니다. 
역시 우리는 둘 다 구현해야 합니다. 
IEnumerable<T>나 IEnumerator<T>는 형식 매개변수를 제외하면 IEnumerable 및 IEnumerator와 다른점이 거의 없습니다. 따라서 자세한 설명은 10장에서 이야기한 IEnumerable 과 IEnumerator를 참고하시기 바랍니다. 
다음은 foreach 문을 지원하는 클래스의 예제 프로그램이 준비되어 있습니다. 앞의 일반화 클래스 절에서 만들었던 Generic 예제 프로그램을 수정해서 만들었습니다. 그러니 여러분도 그 예제 프로그램 소스 코드를 복사해서 이번 예제 프로그램을 만들면 더욱 IEnumerable<T>와 IEnumerator<T>에 집중하는 데 동무이 될 겁니다. 처음부터 새로 만들어도 좋습니다. 


using System;
using System.Collections;
using System.Collections.Generic;

namespace EnumerableGeneric
{
	class MyList<T> : IEnumerable<T>, IEnumerator<T>
	{
		private T[] array;
		int position = -1;
		
		public MyList()
		{
			array = new T[3];
		}

		public T this[int index]
		{
			get
			{
				return array[index];
			}
			set
			{
				if(index >= array.Length)
				{
					Array.Resize<T>(ref array, index + 1);
					Console.WriteLine($"Array Resized : {array.Length}");
				}
				array[index] = value;
			}
		}
		public int Length
		{
			get { return array.Length; }
		}
		public IEnumerator<T> GetEnumerator()
		{
			return this;
		}
		IEnumerator IEnumerable.GetEnumerator()
		{
			return this;
		}
		public T Current
		{
			get { return array[position]; }
		}
		object IEnumerator.Current
		{
			get { return array[position]; }
		}
		public bool MoveNext()
		{
			if(position == array.Length -1)
			{
				Reset();
				return false;
			}
			position++;
			return (position < array.Length);
		}
		public void Reset()
		{
			position = -1;
		}
		public void Dispose()
		{
		
		}

	}
	class MainApp
	{
		static void Main(string[] args)
		{
			MyList<string> str_list = new MyList<string>();
			str_list[0] = "abc";
			str_list[1] = "def";
			str_list[2] = "ghi";
			str_list[3] = "jkl";
			str_list[4] = "mno";

			foreach(string str in str_list)
				Console.WriteLine(str);
		
			Console.WriteLine();

			MyList<int> int_list = new MyList<int>();
			int_list[0] = 0;
			int_list[1] = 1;
			int_list[2] = 2;
			int_list[3] = 3;
			int_list[4] = 4;

			foreach(int no in int_list)
				Console.WriteLine(no);
		}
	}
}








CHAPTER 12 : 예외 처리하기
프로그래머에게 있어서 가장 끔찍한 경험이라면 고객이나 중요한 인사를 대상으로 자신이 만든 프로그램을 시연하다가 버그가 발견되는 경우일 것입니다. 잠깐 오류를 일으키는 정도가 아니라 프로그램이 다운되기라도 하면 그 창피함은 이루 말로 다 할수가 없지요. 이런 일이 일어나지않게 하려면 프로그램의 테스트를 세밀하게 해야합니다. 그리고 프로그램이 어떤 상황에서도 잘 견뎌낼수 있도록 만들어야 합니다. 

C#은 프로그램이 비정상적인 상황을 만났을 때 이를 처리하는 예외 처리를 지원합니다. 이번 장에서는 견고한 프로그램을 만드는데 필요한예외 처리를 설명합니다. 




12.1 예외에 대하여
사람이 살다 보면 별일을 다 만나기 마련입니다. 버스를 타고 등교하는데 갑자기 버스 기사 아저씨가 배탈이 나서 차를 길에 세워두고 화장실에 가는 바람에 지각할 위기를 맞을 수도 있고, 임신한 아내의 뱃속에 딸이 있는 줄 알고 있던 아빠가 분홍색 옷을 열심히 준비해뒀는데 아들이 태어날 수도 있습니다. 

컴퓨터 프로그램도 마찬가지입니다. 프로그램 사용자는 프로그래머가 생각만대로만 프로그램을 다루지 않습니다. 숫자만 입력해야 하는데 문자열을 입력하기도 하고 순서를 무시하고 명령어를 내리기도 합니다. 어디 사용자뿐이겠습니까? 파일을 잘 전송하고 있었는데 누군가가 와이파이 허브의 전원을 내리는 바람에 네트워크가 다운되고, 데이터를 저장하려 했더니 2TB 이상 남아 있던 하드디스크 용량이 어느새 단 1바이트도 안남아 있을 수도 있습니다. 이처럼 프로그래머가 생각하는 시나리오에서 벗어나는 사건, 이것을예외 (Exception)라고 부릅니다. 그리고 예외가 프로그램의 오류나 다운으로 이어지지 않도록 적절하게 처리하는 것을 예외 처리(Exception Handling)라고 합니다. 
이해를 돕기 위해 예제 프로그램을 하나 만들어보겠습니다. 다음 예제 프로그램은 길이가 3개인 배열을 만들고 4번째 요소에 접근을 시도하는 코드를 통해 예외를 발생시킵니다. 이 예외를 처리하는 코드는 없으며, 바로 프로그램이 다운되고 맙니다. 

using System;

namespace KillingProgram
{
	class MainApp
	{
		static void Main(string[] args)
		{
			int[] arr = { 1,2,3};
			for(int i=0; i<5; i++)
			{
				Console.WriteLine(arr[i]); //i가 배열의 크기-1을 넘어서면 예외를 일으키고 종료됩니다. 이후의 코드들은 더이상 실행안됨
			}
			Console.WriteLine("종료");
		}
	}
}

어라 ? 프로그램을 실행해보니 이상한 메시지가 출력됩니다. 우리의 프로그램 소스 코드를 아무리 뜯어봐도 저런 메시지를 출력하는 문장은 없는데 말입니다. 이 메시지는 CLR이 출력한 것입니다. 잘못된 인덱스를 통해 배열의 요소에 접근하려 들면 배열 객체가 이 문제에 대한 상세 정보를 IndexOutOfRangeException의 객체에 담은 후 Main() 메소드에 던지는데 이 예제의 Main() 메소드는 이 예외를 처리할 방도가 없기 때문에 다시 CLR에 던집니다.(던진다는 표현이 생소하지요? 예외 처리를다루다보면 익숙해질 겁니다.) CLR까지 전달된 예외는 처리되지 않은 예외가 되고 CLR은 이것을 받으면 예외 객체에 담긴 내용을 사용자에게 출력한 후 프로그램을 강제로 종료합니다. 그래서 문제를 일으키는 13행 뒤에 있는 코드들도 실행되지 않은 것입니다. 
이 예제 프로그램처럼 예외를 처리하지 못해 죽는 프로그램은 아무리 기능이 많아도 신뢰할수 없습니다. (온라인 게임에서 승리를 눈앞에 두고 있는 상황인데 갑자기 게임 프로그램이 다운된다고 생각해보세요)프로그래머는 자신이 작성한 코드 내에서 예외가 처리되도록 조치를 취해야 합니다. 이부분에 대해서는 다음 절에서 계속 설명 하겠습니다. 






12.2 try~catch로 예외 받기
앞의 예제 프로그램에서 배열이 IndexOutOfRangeException 예외를 던졌는데 Main() 메소드가 처리하지못했지요? 이 문제를 해결하는 방법은 간단합니다. 예외를 Main() 메소드가 받으면 됩니다. C#에서는 예외를 받을때 다음과 같이 try~catch 문을 이용합니다. 

try
{
	//실행하고자 하는 코드
}catch(예외_객체1)
{
	//예외가 발생했을 떄의 처리
}catch(예외_객체2)
{
	//예외가발생했을 때의 처리
}

try절의 코드 블록에는 예외가 일어나지 않을 경우에 실행되어야 할 코드들이 들어가고, catch 절에는 예외가 발생했을 때의 처리 코드가 들어갑니다. try는 시도하다라는 뜻이고 catch는 잡다 또는 받다 라는 뜻이죠? try 절에서 원래 실행하고자 했던 코드를 쭉 처리해나가다가 예외가 던져지면 catch 블록이 받아냅니다. 이때 catch 절은 try 블록에서 던질 예외 객체와 형식이 일치해야 합니다. 그렇지 않으면 던져진 예외는 아무도 받지 못해 처리되지 않은 예외로 남게됩니다. 만약 try 블록에서 실행하는 코드에서 여러 종류의 예외를 던질 가능성이 있다면 이를 받아낼 catch 블록도 여러 개를 둘 수 있습니다. 

try~catch 문을 한번 사용해볼까요? 앞에서 만들었던 예제 프로그램을 수정해서예외를 안전하게 받아 처리하고 프로그램을 종료시키도록 수정해보겠습니다. try~catch 문을 이용해서 잘못된 인덱스를 통해 배열의 요소에 접근할 때 일어나는 IndexOutOfRangeException 예외를 안전하게 받아 처리합니다. 

using System;

namespace KillingProgram
{
	class MainApp
	{
		static void Main(string[] args)
		{
			int[] arr = { 1,2,3};
			try
			{

				for(int i=0; i<5; i++)
				{
					Console.WriteLine(arr[i]); //i가 배열의 크기-1을 넘어서면 예외를 일으키고 종료됩니다. 이후의 코드들은 더이상 실					행안됨
				}
			}catch(IndexOutOfRangeException e)
			{
				Console.WriteLine($"예외가 발생했습니다. : {e.Message}");
			}

			Console.WriteLine("종료");
			
		}
	}
}







12.3 System.Exception 클래스
System.Exception 클래스는 모든 예외의 조상입니다. C#에서 모든 예외 클래스는 반드시 이 클래스로부터 상속받아야 합니다. 우리가 앞에서 사용했던 IndexOutOfRangeException 예외도 System.Exception 으로부터 파생되었습니다. 
이 사실에서 한가지 힌트를 얻을수 있습니다. 상속 관계로 인해 모든 예외 클래스들은 System.Exception 형식으로 간주할 수 있고 System.Exception 형식의 예외를 받는 catch 절 하나면 모든 예외를 다 받아낼수 있다는 말이 되거든요. 예를 하나 들어볼게요. 가령 다음 코드처럼 여러개의 catch 절로 처리하던 예외가 있다고 해봅시다. 

try
{
}catch(IndexOutOfRangeException e)
{
	//...
}catch(DivideByZeroException e)
{
	//...
}

System.Exception 클래스를 이용하면 다음과 같이 하나의 catch 절로 처리할수 있습니다. 
try
{
}catch(Exception e)
{
	//..
}

오그럼 여러 가지 예외 형식을 사용할 것 없이 System.Exception 클래스 하나면 되겠군요!

그럴리가요.. 예외 상황에 따라 섬세한 예외 처리가 필요한 코드에서는 Exception 클래스만으로 대응이 어려우므로 귀찮다고 무조건 Exception 클래스를 사용하는 것은 금물입니다. 
System.Exception 형식은 프로그래머가 발생할 것으로 계산한 예외 말고도 다른 예외까지 받아 낼수 있습니다. 만약 그 예외가 현재 코드가 아닌 상위 코드에서 처리해야할 예외라면, 이 코드는예외를 처리하는 대신 버그를 만들고 있는 셈이 됩니다. System.Exception 예외를 사용할 때는 코드를 면밀히 검토해서 처리하지 않아야 할예외까지 처리하는 일이 없도록 해야 합니다. 





12.4 예외 던지기
try~catch 문으로 예외를 받는다는 것은 어디선가 예외를 던진다는 이야기입니다. 이번 절에서는 예외를 던지는 방법을 이야기하려 합니다. 예외는 throw 문을 이용해서 던집니다. 다음은 throw 문으로 예외를 던지는 예제 코드입니다. 

try
{
	//...
	throw new Exception("예외를 던집니다."); //throw 문을 통해 던져진 예외 객체는 catch 문을 통해 받습니다.
}catch(Exception e)
{
	Console.WriteLine(e.Message);
}

다음은 또 다른 예제 코드입니다. 메소드 안에서 특정 조건을 만족하면(또는 만족하지 못하면) 예외를 던지고, 이렇게 던져진 예외는 메소드를 호출하는 try~catch 문에서 받아냅니다. 


static void DoSomething(int arg)
{
	if (arg < 10)
		Console.WriteLine("arg : {0}", arg);
	else
		throw new Exception("arg가 10보다 큽니다."); //예외를 던졌지만 DoSomething()메소드 안에서는 이 예외를 처리할수 있는 코드가 없습니다. 
							이 예외는 DoSomething()메소드의 호출자에게 던져집니다. 
}

static void Main()
{
	try
	{
		DoSomething(13); //DoSomething()메소드에서 던진 호출자의 try~catch 블록에서 받습니다. 
	} catch(Exception e)
	{
		Console.WriteLine(e.Message);
	}
}

throw는 보통 문(statement)으로 사용하지만 C#7.0 부터는 식(expression)으로도 사용할수 있도록 개선되었습니다. 다음 예제 코드를 살펴봅니다. 
int? a = null;
int b = a ?? throw new ArgumentNullException();

throw 식의 예제를 하나 더 볼까요? 다음 예제 코드와 같이 조건 연산자 안에서도 사용할수 있습니다. (?? 연산자, 조건 연산자가 잘 기억나지 않는 독자는 4장을 참고하세요.")

int[] array = new[]{1,2,3};
int index = 4;
int value = array[index >= 0 && index < 3 ? index : throw new IndexOutOfRangeException()];





12.5 try~catch와 finally
try 블록에서 코드를 실행하다가 예외가 던져지면 프로그램의 실행이 catch 절로 바로 뛰어넘어옵니다. 만약 예외 때문에 try 블록의 자원 해제 같은 중요한 코드를 미처 실행하지 못한다면 이는 곧버그를 만드는 원인이 됩니다. 예를 들어 다음 코드와 같이 try 블록 끝에 데이터베이스의 커넥션을닫는 코드가 있었는데 갑자기 발생한 예외 때문에 이것을 실행하지 못한다면 사용할수 있는 커넥션이 점점 줄어 나중에는 데이터베이스에 전혀 연결할 수 없는 상태에 이를수 있습니다. 

try
{
	dbconn.Open(); //dbconn은 데이터베이스 커넥션
	//...
	dbconn.Close(); //이런 코드는 버그를 일으킬 가능성이 높습니다.
}catch(XXXException e)
{
	//...
}catch(YYYException e)
{
	//...
}

그렇다고 다음과 같이 자원을 해제하는 코드(dbconn.Close())를 모든 catch 절에 배치하는 것도 우스운 일입니다. 똑같은 코드가 반복해서 들어가니 말입니다.
try
{
	dbconn.Open(); //dbconn은 데이터베이스 커넥션
	//...
	dbconn.Close(); //자원 해제 코드를 각 catch 절마다 반복?
}catch(XXXException e)
{
	 dbconn.Close(); //자원 해제 코드를 각 catch 절마다 반복?
}catch(YYYException e)
{
	dbconn.Close(); //자원 해제 코드를 각 catch 절마다 반복?
}

C#에서는 예외 처리를 할 때 자원해제 같은 뒷 마무리를 우아하게 실행할수 있도록 finally 절을 try~catch 문과 함께 제공합니다. finally절은 try~catch 문의 제일 마지막에 연결해서 사용하는데, 이곳에 다음과 같이 뒷정리 코드를 넣어두면 됩니다. 

try
{
	dbconn.Open(); //dbconn은 데이터베이스 커넥션
}catch(XXXException e)
{
	//...
}catch(YYYException e)
{
	//...
}finally
{
	dbconn.Close();
}

자신이 소속된 try 절이 실행된다면 finally절은 어떤 경우라도 실행됩니다. 심지어 try 절 안에서 return 문이나 throw 문이 사용되더라도(이 두 문장은 프로그램의 흐름 제어를 외부 코드로 옮깁니다.)finally 절은 꼭 실행됩니다.






12.6 사용자 정의 예외 클래스 만들기
앞에서도 잠깐 이야기했지만 C#에서 사용하는 모든 예외 객체는 System.Exception 클래스로부터 파생되어야 합니다. 이 규칙에 의거해서 우리도 Exception 클래스를 상속하기만 하면 새로운 예외 클래스를 만들수 있습니다. 다음은 Exception 클래스를 상속하는 예외 클래스의 선언 예입니다. 

class MyException : Exception
{
	//...
}

사실 사용자 정의 예외는 그렇게 자주 필요하지 않습니다. .NET이 100여가지가 넘는 예외 형식을제공하고 있기 때문입니다. 하지만 특별한 데이터를 담아서 예외 처리 루틴에 추가 정보를 제공하고 싶거나 예외 상황을 더 잘 설명하고 싶을 때는 사용자 정의 예외 클래스가 필요합니다. 예를 들어 웹사이트의 회원 가입 페이지를 C#으로 작성했는데 회원의 이메일 주소가 잘못 기재되었을 때의 예외를 받고 싶다고 생각해봅시다. .NET은 InvalidEmailAddress 같은 예외 클래스를 제공하지 않기 때문에 이 경우 사용자 정의 예외 클래스를 만들어 처리할 필요가 있습니다. 
그럼 사용자 정의 예외 예제 프로그램을 만들어보겠습니다. 이 프로그램은 4개의 8비트 정수(색을 구성하는 Alpha, Red, Green, Blue 값)를 받아 하나의 32비트 정수 안에 병합하는 MergeARGB() 메소드를 갖고 있습니다. 매개변수에 입력하는 각 정숫값은 0~255 사이여야 하며, 매개변수의 값이 이 범위를 벗어나면 MergeARGB() 메소드는 InvalidArgumentException예외를 일으킵니다. 

using System;

namespace MyException
{
	class InvalidArgumentException : Exception
	{
		public InvalidArgumentException()
		{
		}

		public InvalidArgumentException(string message) : base(message)
		{
		}
		public object Argument
		{
			get; set;
		}
		public string Range
		{
			get;set;
		}
	}
	class MainApp
	{
		static uintMergeARGB(uint alpha, uint red, uint green, uint blue)
		{
			uint[] args = new uint[]{ alpha, red, green, blue};
			foreach(uint arg in args)
			{
				if(arg > 255)
					throw new InvalidArgumentException()
					{
						Argument = arg,
						Range = "0~255"
					};
			}
			return (alpha << 24 & 0xFF000000) | 
				(red << 16 & 0x00FF0000 |
				(green << 8 & 0x0000FF00 |
				(blue	& 0x000000FF);
		}
		static void Main(string[] args)
		{
			try
			{
				Console.WriteLine("0x{0:X}", MergeARGB(255,111,111,111));
				Console.WriteLine("0x{0:X}", MergeARGB(1,65,192,128));
				Console.WriteLine("0x{0:X}", MergeARGB(0,255,255,300));
			}catch(InvalidArgumentException e)
			{
				Console.WriteLine(e.Message);
				Console.WriteLine($"Argument:{e.Argument}, Range:{e.Range}");
			}
		}
	}
}





12.7 예외 필터하기
C# 6.0부터는 catch 절이 받아들일 예외 객체에 제약 사항을 명시해서 해당 조건을 만족하는 예외 객체에 대해서만 예외 처리 코드를 실행할수 있도록 하는 예외 필터(Exception Filter)가 도입되었습니다. 예외 필터를 만드는 데는 많은 코드가 필요하지 않습니다. catch() 절뒤에 when 키워드를 이용해서 제약 조건을 기술하면 됩니다. 다음은 예외 필터를 구현한 예제입니다.(when을 if라고 생각하면서 읽으면 예외 필터 코드를 이해하기가 쉽습니다.)

class FilterableException : Exception
{
	public int ErrorNo { get; set;}
}
try
{
	int num = GetNumber();
	if (num < 0 || num > 10)
		throw new FilterableException() { ErrorNo = num};
	else
		Console.WriteLine($"Output : {num}");
}catch(FilterableException e) when (e.ErrorNo < 0)
{
	Console.WriteLine("Negative input is not allowed.");
}

이 코드는 try 블록 안에서 num이 0보다 작거나 10보다 크면 FilterableException 예외 객체를 던집니다. 이어지는 catch 블록은 FilterableException 객체를 받도록 되어 있지만 when을  이용해서 예외 객체의 ErrorNo가 0보다 작은 경우만 걸러내고 있습니다. 그럼 그외의 경우(예 : ErrorNo가 10보다 큰 경우)에는 어떤 일이 생길까요? 여러분이 아는 바와 같습니다. 예외는 처리되지 않은 상태 그대로 현재 코드의 호출자에게 던져집니다. 








12.8 예외 처리 다시 생각해보기
C#이 예외 처리를 지원하지 않았다면 우리는 어떻게 예외를 다뤄야 했을까요? 멀리 생각할 것 없이 앞에서 다뤘던 다음의 Divide()메소드에서 try~catch 그리고 throw 문을 빼도록 수정한다고 생각해보세요. 

static int Divide(int dividend, int divisor)
{
	try
	{
		return dividend / divisor;
	}catch(DivideByZeroException e)
	{
		throw e;
	}
}

메소드 내부에서 문제가 생기면 어떻게 호출자에게 그 문제를 알릴까요? 에러코드를 반환하면 될까요? 다음과 같이 말입니다. 

//피제수가 0이면 음수를 반환한다. 그렇지 않으면 몫을 반환한다. 
static int Divide(int dividend, int divisor)
{
	if(dividend == 0)
		return -5;
	else
		return dividend / divisor;
}

여러분도 이런 코드는 문제가 있다고 생각하지요? 그래서 다음과 같이 Divide()메소드의 반환값은 에러 코드로만 사용하고 나눗셈의 결과는 출력 전용 매개변수에 담는 것으로 문제를 해결해봤습니다. 

//피제수가 0이면 음수를 반환한다. 그렇지 않으면 몫을 반환한다. 
static int Divide(int dividend, int divisor, out int result)
{
	if(divisor == 0)
	{
		result = 0;
		return -5;
	}else
	{
		result = dividend / divisor;
		return 0;
	}
}

이 예제 코드들을 통해 볼 수 있듯이 try~catch 문을 이용한 예외 처리는 실제 일을 하는 코드와 문제를 처리하는 코드를 깔끔하게 분리시킴으로써 코드를 간결하게 만들어줍니다. 예외 처리의 장점은 이것뿐이 아닙니다. 예외 객체의 StackTrace 프로퍼티를 통해 문제가 발생한 부분의 소스 코드 위치를 알려주기 때문에 디버깅이 아주 용이합니다. 


using System;

namespace StackTrace
{
	class MainApp
	{
		static void Main(string[] args)
		{
			try
			{
				int a = 1;
				Console.WriteLine(3 / --a);
			}catch(DivideByZeroException e)
			{
				Console.WriteLine(e.StackTrace);
			}
		}
	}
}

마지막으로 예외 처리는 여러 문제점을 하나로 묶거나 코드에서 발생할수 있는 오류를 종류별로 정리해주는 효과가 있습니다. 예를 들어 try 블록의 코드 중에서 DivideByZeroException 예외를 일으킬수 있는 부분은 둘 이상일 수도 있지만, 이 형식의 예외를 받는 catch 블록 하나면 모두 처리할수 있습니다. 이렇게 예외 처리를 이용해서 오류를 처리하는 코드는 작성하기에도 쉽고 나중에 다시 읽기에도 좋습니다. 