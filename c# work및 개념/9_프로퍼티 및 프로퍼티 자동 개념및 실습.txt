CHAPTER09 : 프로퍼티
객체지향 언어라면 모름지기 은닉성을 표현할수 있어야 합니다. 객체의 데이터가 의도하지 않게 오염되는 것을 막아야 하니까요. C++나 Java에서는 private이나 protected접근 한정자를 이용해서 클래스 내의 필드를 외부에서 보이지 않게 감추고, 이 필드에 접근하는 메소드들을 public으로 따로 제공합니다. C#프로그래머도 이 방법을 그대로 사용할수 있지만 C#언어는 이보다 더 우아한 장치를 제공합니다. 이 장에서는 그 장치인 프로퍼티를 설명합니다. 



9.1 public 필드의 유혹
정말이지, 클래스를 작성하다 보면 필드를 public으로 선언해버리고 싶은 충동이 들 때가 한두 번이 아닙니다. 여차하면 의도하지 않게 데이터가 오염될수 있다는 것을 잘 알면서도 괜찮을 거야 하는 악마의 속삭임이 귓전에 맴돕니다. 무엇보다도 Get/Set 메소드 대신 할당 연산자 =를 이용해서 필드를 읽거나 할당하고 싶은 생각이 들기 시작하면 이 충동은 더욱 거세집니다. 은닉성을 지키자니 귀찮고, 편하게 작업하자니 은닉성이 신경 쓰입니다. 은닉성과 편의성은 함께 할 수 없는 물과 기름같은 존재일까요? 꼭 그렇지는 않습니다. 프로퍼티를 이용하면 은닉성과 편의성, 두 마리의 토끼를 다 잡을수 있습니다. 

예를 들어 다음과 같은 클래스가 있다고 해보죠. 이 클래스는 int 형식 myField를 private 으로 갖고 있습니다. 

class MyClass
{
	private int myField;
}
우리가 알고 있는 지식 선에서는 아마 다음과 같이 Get.XXX() 와 SetXXX()메소드를 클래스에 추가해서MyField에 접근할수 있도록 할 것입니다. 

class MyClass
{
	private int myField;
	public int GetMyField() { return myField; }
	public void SetMyField(int newValue) { myField = newValue; }
}

그리고 이 클래스의 객체는 다음과 같이 사용할 것입니다. 
MyClass obj = new MyClass();
obj.SetMyField(3);
Console.WriteLine(obj.GetMyField());

이 코드에 틀린점이 있다는 이야기는 아닙니다. 컴파일도 문제없이 되고, 우리가 원하는 대로 은닉성을 지키면서 필드를 읽고 쓰고 있습니다. 우리가 J로 시작하는 어떤 프로그래밍 언어를 사용하고 있었다면 이것은 완벽히 정석이라고 할 수 있습니다. 다만 C#이 더 우아한 장치를 제공하기 때문에 아무래도 이런 방식은 지양해야겠지요. 



9.2 메소드보다 프로퍼티
서두가 길었는데, 이제 프로퍼티를 선언하는 문법을 알아보겠습니다. 프로퍼티는 다음과 같이 선언합니다. 

class 클래스이름
{
	데이터형식 필드이름;
	접근한정자 데이터형식 프로퍼티이름
	{
		get
		{
			return 필드이름;
		}
		set
		{
			필드이름 = value;
		}
	}
}

프로퍼티 선언 문법에서 get {...}과 set{...}을 일컬어 접근자(accessor)라고 합니다. get 접근자는 필드로부터 값을 읽어오고 set 접근자는 필드에 값을 할당합니다. set 접근자 안에 있는 value 키워드를 주목하기 바랍니다. 이 친구는 누구도 선언한 적이 없지만 C# 컴파일러는 set 접근자의 암묵적 매개변수로 간주하므로 전혀 문제 삼지 않습니다. 

제가 아까 프로퍼티는 Get/Set 메소드를 대체한다고 했던가요?생뚱맞게 새로운 클래스에 프로퍼티를 선언하는 것보다는 기존의 코드를 바꿔보는 것이 이해에 더 도움이 될것 같군요. 다음 MyClass에 선언된 GetMyField() 메소드와 SetMyField()메소드를 프로퍼티로 바꿔보겠습니다. 

class MyClass
{
	private int myField;
	public int GetMyField() { return myField; }
	public void SetMyField(int newValue) { myField = newValue; }
}

이제 프로퍼티를 보시죠. 짜잔! 못생긴 메소드 대신 우아한 프로퍼티를 보신 소감이 어떤가요?
class MyClass
{
	private int myField;
	public int MyField
	{
		get
		{
			return myField;
		}
		set
		{
			myField = value;
		}
	}
}
별 느낌이 오지 않는다면 다음 코드를 보세요. 이제 MyClass의 객체는 =할당 연산자를 통해 myField 필드에 데이터를 저장하고 또 반대로 데이터를 읽어올수도 있습니다. 

MyClass obj = new MyClass();
obj.MyField = 3;
Console.WriteLine(obj.MyField());

잠깐만요. 메소드를 통해 필드가 변경되지 않기를 원할 때는 Set 메소드를 구현하지 않으면 됐습니다. 프로퍼티를 통해 필드가 변경되지 않았으면 좋겠는데, 이런 경우엔 어떻게 하나요?

좋은 질문입니다. 그런 경우 set 접근자를 구현하지 않으면 해당 프로퍼티는 쓰기 불가, 다른 말로는 읽기 전용이 됩니다. 다음이 그 예입니다. 
class MyClass
{
	private int myField;
	public int MyField //이렇게 get 접근자만 있으면 읽기 전용 프로퍼티가 됩니다. 
	{
		get
		{
			return myField;
		}
	}
}

오 그럼 쓰기 전용 프로퍼티도 만들수 있겠군요?
문법적으로 아무 문제가 없긴 하지만 사용하기 전에 신중하게 생각해야 합니다. 여러분이 만든 클래스를 사용할 프로그래머들에게 쓰기 전용 프로퍼티의 용도와 동작 결과를 확인할수 있는 방법을 알릴수 있어야 합니다. 그렇지 않다면 그 프로퍼티는 코드를 관리하기 어렵게 만드는 하나의 원인이 될 가능성이 높아집니다. 







9.3 자동 구현 프로퍼티
프로퍼티는 데이터의 오염에 대해선 메소드처럼 안전하고 데이터를 다룰 때는 필드처럼 간결합니다. 하지만 많은 경우에 중복된 코드를 작성하고 있다는 기분이 들게 합니다. 다음 코드의 NameCard클래스를 보세요. Name과 PhoneNumber 프로퍼티는 단순히 name과 phoneNumber 필드를 읽고 쓰기만 합니다. 여기에는 아무 논리도 섞여있지 않습니다. 마이크로소프트의 C#팀은 이런 경우에 사용해서 코드를 더 단순하게 만드는 자동구현 프로퍼티(Auto-Implemented Property)를 C#3.0부터 도입했습니다. 

public class NameCard
{
	private string name;
	private string phoneNumber;
	
	public string Name
	{
		get { return name;	}
		set { name = value; }
	}
	public string PhoneNumber
	{
		get { return phoneNumber; }
		set { phoneNumber = value; }
	}
}

이 코드에서 Name과 PhoneNumber 프로퍼티는 다음과 같이 자동 구현 프로퍼티로 대체할수 있습니다. 앞의 코드와 비교해서 엄청나게 간결해졌지요? 필드를 선언할 필요도 없고 그저 get 접근자와 set 접근자 뒤에 세미클론(;)만 붙여주면 됩니다. 

public class NameCard
{
	public string Name
	{
		get; set;
	}
	
	public string PhoneName
	{
		get; set;
	}
}
한가지 더 C# 7.0부터는 다음과 같이 자동구현 프로퍼티를 선언함과 동시에 초기화를 수행할수 있습니다. 덕분에 자동 구현 프로퍼티에 초깃값이 필요할 때 생성자에 초기화 코드를 작성하는 수고를 덜게 되었습니다. 

public class NameCard
{
	public string Name { get; set; } = "Unknown";
	public string PhoneNumber { get; set; } = "000-0000";
}
