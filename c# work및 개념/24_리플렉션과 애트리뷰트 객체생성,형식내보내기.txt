CHAPTER16 : 리플렉션과 애트리뷰트
컴퓨터 프로그램은 데이터를 다룹니다. 지금까지 이책에서 설명한 내용들도 모두 데이터를 다루는 코딩 기법에 관한 것들이었죠. 이번 장에서는 조금 색다른 내용을 설명하려 합니다. 코드 그 자체를 데이터(이것을 어려운 말로 메타데이터(Metadata라고합니다)로써 다루는 기법인 리플렉션(Replection)과 애트리뷰트(Attribute)를 만나보시죠. 




16.1 리플렉션
리플렉션은 객체를 X-Ray 사진처럼 객체의 형식(Type)정보를 들여다보는 기능입니다. 이 기능을 이용하면 우리는 프로그램 실행 중에 객체의 형식 이름부터 프로퍼티 목록, 메소드 목록, 필드, 이벤트 목록까지 모두 열어볼수 있습니다. 형식의 이름만 있다면 동적으로 인스턴스를 만들 수도 있고, 그 인스턴스의 메소드를 호출할 수도 있습니다. 심지어는 새로운 데이터 형식을 동적으로 만들수도 있습니다. 이렇듯 런타임에 형식 정보를 다룰수 있게 하는 리플렉션은 프로그래머에게 한층 더 강력한 표현력을 선사합니다. 

마이크로소프트의 .NET 팀은 모든 형식을 들여다 볼수 있도록 장치를 설계했습니다. 바로 모든 데이터 형식의 조상인 Object 형식에 GetType() 메소드를 만들어 놓은 것이죠. 지금부터 Object.GetType() 메소드와 이 메소드가 반환하는 Type 형식에 대해 알아보려 합니다. 



16.1.1 Object.GetType() 메소드와 Type 클래스
Object는 모든 데이터 형식의 조상입니다. 이 말은, 즉 모든 데이터 형식은 Object형식이 갖고 있는 다음의 메소드를 물려받아 갖고 있다는 뜻입니다. 

* Equals()
* GetHashCode()
* GetType()
* ReferenceEquals()
* ToString()

다섯 개 메소드 중에 GetType() 이 보입니까? 이 메소드는 객체의 형식 정보를 반환하는 기능을 합니다. 모든 데이터 형식이 GetType() 메소드를 갖고 있기 때문에 우리는 어떤 객체에 대해서도 이 메소드를 호출해서 그 객체의 형식 정보를 얻어낼 수 있습니다. 

GetType() 메소드는 Type 형식의 결과를 반환합니다. Type 형식은 .NET 에서 사용되는 데이터 형식의 모든 정보를 담고 있습니다. 형식 이름, 소속된 어셈블리 이름, 프로퍼티 목록, 메소드 목록, 필드 목록, 이벤트 목록, 심지어는 이 형식이 상속하는 인터페이스의 목록까지 갖고 있습니다. 

Object.GetType() 메소드와 Type 형식을 사용하는 방법은 다음과 같습니다. 

int a = 0;

Type type = a.GetType();
FieldInfo[] fields = type.GetFields(); //필드 목록 조회

foreach(FieldInfo field in fields)
	Console.WriteLine("Type:{0}, name:{1}", field.FieldType.Name, field.Name);

이 예제 코드는 int 형식의 필드를 조회해서 출력하는 예제입니다. 다음 표에 정리된 Type 형식의 메소드를 이용하면 다른 정보들도 뽑아낼수 있습니다. 예컨대 앞에서 이야기한 것처럼 필드, 메소드, 상속하는 인터페이스 같은 정보들 말입니다. 


메소드			반환형식			설명
GetConstructors()		ConstructorInfo[]		해당 형식의 모든 생성자 목록을 반환합니다. 
GetEvents()		EventInfo[]		해당 형식의 이벤트 목록을 반환합니다. 
GetFields()		FieldInfo[]		해당 형식의 필드 목록을 반환합니다. 
GetGenericArguments()	Type[]			해당 형식의 형식 매개변수 목록을 반환합니다. 
GetInterfaces()		Type[]			해당 형식이 상속하는 인터페이스 목록을 반환합니다. 
GetMembers()		MemberInfo[]		해당 형식의 멤버 목록을 반환합니다. 
GetMethods[]		MethodInfo[]		해당 형식의 메소드 목록을 반환합니다. 
GetNestedTypes[]		Type[]			해당 형식의 내장 형식 목록을 반환합니다. 
GetProperties()		PropertyInfo[]		해당 형식의 프로퍼티 목록을 반환합니다. 

이 표는 비교적 사용도가 높다고 생각하는 메소드들만 따로 추려놓은 것입니다. MSDN에서 System.Type의 메뉴얼을 찾아보면 이 표보다 몇 배는 더 많은 메소드를 설명하고 있습니다. MSDN 을 통해 System.Type이 제공하는 모든 기능을 확인해보는 것도 재미있을 겁니다. 어 이런 기능도 있었네? 하며 구현에 필요한 기능을 우연히 알 수도 있으니까요 


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 왜 자꾸  MSDN을 보라는 거죠?
MSDN 라이브러리는 C# 언어의 상세한 사양과 다양한 예제들을 수록하고 있습니다. 터놓고 이야기하자면, 이 책 없이 MSDN 라이브러리만으로도 C# 언어를 익힐수 있습니다. 그런데도 저자는 무엇 때문에 새벽잠을 설쳐가며 힘들게 집필을 하고 여러분은 공짜로 얻을수 있는 MSDN 온라인 문서를 마다하고 이 책을 구입했을까요?

MSDN 라이브러리는 그 방대함 때문에 초보자가 무엇을 시작할 때 사용하는 교재로는 부적합합니다. 초보자가 MSDN 라이브러리만 쳐다보다 가는 1년이 지나도 C#에 대해 얻는 것이 별로 없을 겁니다. 책을 집필하는 이유는 초보자가 빠르게 C#언어와 .NET을 익힐수 있도록 하기 위해서입니다 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

앞의 표에 있는 GetFields()나 GetMethods() 같은 메소드는 검색 옵션을 지정할수 있습니다. public 항목만 조회할수도 있고, 비public 항목만 조회할 수도 있습니다. 그리고 public과 비public 항목을 같이 조회할수도 있습니다. 또한 static 항목만 조회할수도 있고 인스턴스 항목만 조회할수도 있습니다. 아니면 모든 조건을 포함하는 조건을 만들 수도 있습니다. 이러한 검색 옵션은 System.Reflection.BindingFlags 열거형을 이용해서 구성됩니다. 
다음은 BindingFlags 열거형을 이용해서 GetFields() 메소드에 검색 옵션을 입력하는 예제 코드입니다. 

Type type = a.GetType();

//public 인스턴스 필드 조회
var fields1 = type.GetFields( BindingFlags.Public | BindingFlags.Instance);

//비 public 인스턴스 필드 조회
var fields2 = type.GetFields( BindingFlags.NonPublic | BindingFlags.Instance);
//public 정적 필드 조회
var fields3 = type.GetFields( BindingFlags.Public | BindingFlags.Static);

//비 public 정적 필드 조회
var fields4 = type.GetFields( BindingFlags.NonPublic | BindingFlags.Static);

한편 GetFields()나 GetMethods() 등의 메소드는 BindingFlags 매개변수를 받지 않는 버전으로도 오버로딩되어 있습니다. 이 경우 이들 메소드는 public 멤버만 반환합니다. 이렇게 글로만 설명할 것이 아니라 예제 프로그램을 하나 만들어보겠습니다. 
다음은 int 형식의 주요 정보 (상속하는 인터페이스, 필드, 메소드, 프로퍼티 등)를 출력하는예제 프로그램입니다. 

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;

namespace GetType
{
	class MainApp
	{
		static void PrintInterfaces(Type type)
		{
			Console.WriteLine("------ Interfaces ------ ");
			Type[] interfaces = type.GetInterfaces();
			foreach(Type i in interfaces)
				Console.WriteLine("Name:{0}", i.Name);
			Console.WriteLine();
		}
		static void PrintFields(Type type)
		{
			Console.WriteLine("------ Fields ------ ");
			FieldInfo[] fields = type.GetFields( BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance );
			foreach(FieldInfo field in fields)
			{
				String accessLevel = "protected";
				if (field.IsPublic) accessLevel = "public";
				else if(field.IsPrivate) accessLevel = "private";
				
				Console.WriteLine("Access:{0}, Type:{1}, Name:{2}", accessLevel, field.FieldType.Name, field.Name);
			}
			Console.WriteLine();
		}
		static void PrintMethods(Type type)
		{
			Console.WriteLine("------ Methods ------ ");
			MethodInfo[] methods = type.GetMethods();
			foreach( MethodInfo method in methods)
			{
				Console.WriteLine(Type:{0}, Name:{1}, Parameter:", method.ReturnType.Name, method.Name);

				ParameterInfo[] args = method.GetParameters();
				for(int i=0; i<args.Length; i++)
				{
					Console.WriteLine("{0}", args[i].ParameterType.Name);
					if(i < args.Length - 1)
						Console.Write(", ");
				}
				Console.WriteLine();
			}
		}
		static void PrintProperties(Type type)
		{
			Console.WriteLine("------ Properties ------ ");
			PropertyInfo[] properties = type.GetProperties();
			foreach(PropertyInfo property in properties)
				Console.WriteLine("Type:{0}, Name:{1}", property.PropertyType.Name, property.Name);
			Console.WriteLine();
		}
		static void Main(string[] args)
		{
			int a = 0;
			Type type = a.GetType();
			
			PrintInterfaces(type);
			PrintFields(type);
			PrintProperties(type);
			PrintMethods(type);
		}
	}
}

어떻습니까? 필드, 메솓, 프로퍼티, 그리고 상속하는 인터페이스 목록을 뽑아내는 방법이 비슷하지 않습니까? 나머지 정보들도 마찬가지여서 생성자(GetConstructors()), 내부 형식(GetNestedTypes()) 등에 대한 정보도 같은 요령으로 뽑아낼수 있습니다.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? Object.GetType()메소드를 사용하지 않고 형식 정보를 얻는 방법?
Object.GetType() 메소드는 반드시 인스턴스가 있어야 호출이 가능합니다. 예를 들어 순수하게 int 형식의 정보를 열어보는 코드를 작성하려고 해도 int의 인스턴스를 만들고 초기화를 해야 하지요. 사실 C#에서는 Object.GetType() 외에도 형식 정보를 얻을수 있는 typeof연산자와 Type.GetType()메소드를 제공합니다. 
typeof 연산자와 Type.GetType() 메소드는 똑같이 Type형식을 반환하지만 typeof 연산자는 형식의 식별자 자체를 인수로 받고 Type.GetType()메소드는 형식의 전체 이름, 즉 네임스페이스를 포함한 형식 이름을 인수로 받는다는 점이 다릅니다 
Type a = typeof(int); //typeof 연산자의 인수는 int
Console.WriteLine(a.FullName);

Type b = Type.GetType("System.Int32"); //Type.GetType()메소드의 인수는 형식의 네임스페이스를 포함하는 전체 이름
Console.WriteLine(b.FullName);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------




16.1.2 리플렉션을 이용해서 객체 생성하고 이용하기
이전 소절에서 리플렉션을 이용하여 형식의 정보를 열어보는 방법에 대해 알아봤습니다. 하지만 이런 형식 정보를 백날 열어봐야 우리의 코드에서 활용할 만한 일이 없다면 아무리 신기한 기능이라도 그저 장식에 불과할 겁니다. 

그래서 저는 지금부터 리플렉션을 이용해 특정 형식의 인스턴스를 만들고 데이터를 할당하며 메소드를 호출하는 방법을설명하려 합니다. 이렇게 코드 안에서 런타임에 특정 형식의 인스턴스를 만들수 있게 되면 프로그램이 조금 더 동적으로 동작할수 있도록 구성할수 있습니다. 
리플렉션을 이용해서 동적으로 인스턴스를 만들기 위해서는 System.Activator 클래스의 도움이 필요합니다. 인스턴스를 만들고자 하는 형식의 Type 객체를 매개변수에 넘기면 Activator.CreateInstance()메소드는 입력받은 형식의 인스턴스를 생성하여 반환합니다. 

object a = Activator.CreateInstance(typeof(int));

한편 일반화를 지원하는 버전의 CreateInstance()메소드도 있습니다. 가령 List<int>의 인스턴스를 만들고 싶다면 다음 예제와 같이 합니다 

List<int> list = Activator.CreateInstance<List<int>>();

인스턴스 생성만 동적으로 할 수 있는 것이 아닙니다. 객체의 프로퍼티에 값을 할당하는 것도 동적으로 할수있습니다. 혹시 PropertyInfo 클래스 기억하고 있습니까? Type.GetProperties()의 반환 형식 말입니다. 이 PropertyInfo 객체는 SetValue()와 GetValue()라는 메소드를 갖고 있는데. GetValue()를 호출하면 프로퍼티로부터 값을 읽을수 있고 SetValue()를 호출하면 프로퍼티에 값을 할당할수 있습니다. 

다음은 PropertyInfo.SetValue() 메소드를 이용하여 동적으로 프로퍼티에 값을 기록하고 읽는 예제 코드입니다. 

class Profile
{
	public string Name { get; set; }
	public string Phone { get; set; }
}
static void Main()
{
	Type type = typeof(Profile);
	Object profile = Activator.CreateInstance(type);

	PropertyInfo name = type.GetProperty("Name"); // Type.GetProperties() 메소드는 그형식의 모든 프로퍼티를 PropertyInfo 형식의 배열로 반환하지만
						// Type.GetProperty()메소드는 특정 이름의 프로퍼티를 찾아 그 프로퍼티의 정보를 담은 하나의
						// PropertyInfo 객체만 반환합니다. 
	PropertyInfo phone = type.GetProperty("Phone");

	name.SetValue(profile, "박찬호", null);
	phone.SetValue(profile, "997-5511", null);

	Console.WriteLine("{0}, {1}", name.GetValue("profile, null), phone.GetValue(profile, null));
}

이 예제코드에서 SetValue()메소드와 GetValue() 메소드의 가장 마지막 인수가 궁금하지 않습니까? PropertyInfo 클래스는 프로퍼티뿐 아니라 인덱서의 정보도 담을수 있는데, SetValue()와 GetValue()의 마지막 인수는 인덱서의 인덱스를 위해 사용됩니다. 프로퍼티는 인덱서가 필요없으므로 이 예제에서 null로 할당한 것이죠. 
자 이번에는 리플렉션을 이용해서 메소드를 호출하는 방법에 대해 알아보겠습니다. 프로퍼티에 동적으로 값을 기록하고 읽는 요령을 터득한 독자들이라면 아마 메소드를 호출하는 방법도 대강 비슷할 것이라는 점을 눈치챘을 겁니다. 메소드의 정보를 담는 MethodInfo 클래스에는 Invoke()라는 깜찍한 메소드가 있습니다 이 메소드를 이용하면 동적으로 메소드를 호출할수 있게 됩니다. 다음은 MethodInfo 클래스를 이용해서 메소드를 동적으로 호출하는 예제입니다. 

class Profile
{
	public string Name { get; set; }
	public string Phone { get; set; }
	public void Print()
	{
		Console.WriteLine("{0}, {1}", Name, Phone);
	}
}

static void Main()
{
	Type type = typeof(Profile);
	Profile profile = (Profile)Activator.CreateInstance(type);
	profile.Name = "류현진";
	profile.Phone = "010-1412-2222";
	
	MethodInfo method = type.GetMethod("Print");
	
	method.Invoke(profile, null); //null 인수가 오는 자리에는 invoke()메소드가 호출할 메소드의 인수가 와야 합니다. 여기에서는 Profile.Print()메소드의 인수가
				// 없으므로 null을 넘기는 것입니다. 




16.1.3 형식 내보내기
리플렉션을 이용하면 프로그램 실행 중에 원하는 형식의 정보를 읽어낼수 있을 뿐 아니라, 그 형식의 인스턴스도만들수 있으며 심지어는 프로퍼티나 필드에 값을 할당하고 메소드를 호출할 수도 있습니다. 이 정도만 해도 충분히 강력한 기능이라고 할 수 있는데, C#은 한술 더 떠서 프로그램 실행중에 새로운 형식을 만들어낼수 있는 기능도 제공합니다. 

동적으로 새로운 형식을 만드는 작업은 System.Reflection.Emit 네임스페이스에 있는 클래스들을 통해 이루어집니다. Emit(이밋이라고 읽으면 됩니다.)은 영어로 레이저 빔 등을 내뿜다 또는 지폐등을 발행하다 라는 뜻을 갖고 있는데요. 리플렉션에서의 Emit은 프로그램이 실행 중에 만들어낸 새 형식을 CLR의 메모리에 내보낸다. 는 의미로 생각하면 이해하는 데 도움이될 겁니다. 
다음표는 Emit 네임스페이스에서 제공하는 클래스의 목록입니다. 이 클래스들은 코드 요소를 만든다는 의미에서 ~Builder 꼴의 이름을 갖고 있습니다. 예를 들어 새 형식(Type)을 만드는 클래스는 TypeBuilder, 새 메소드를 만드는 클래스는 MethodBuilder라는 이름을 갖고 있습니다. 

클래스				설명
AssemblyBuilder			동적 어셈블리를 정의하고 나타냅니다. 
ConstructorBuilder			동적으로 만든 클래스의 생성자를 정의하고 나타냅니다. 
CustomAttributeBuilder		사용자 정의 애트리뷰트를 만듭니다. (애트리뷰트에 대해서는 다음 절에서 설명할 예정입니다.)
EnumBuilder			열거 형식을 정의하고 나타냅니다. 
EventBuilder			클래스의 이벤트를 정의하고 나타냅니다. 
FieldBuilder			필드를 정의하고 나타냅니다. 
GenericTypeParameterBuilder	동적으로 정의된 형식(클래스)과 메소드를 위한 일반화 형식 매개변수를 정의하고 생성합니다. 
ILGenerator			MSIL(Microsoft Intermediate Language)명령어를 생성합니다. 
LocalBuilder			메소드나 생성자 내의 지역 변수를 나타냅니다. 
MethodBuilder			동적으로 만든 클래스의 메소드(또는 생성자)를 정의하고 나타냅니다.
ModuleBuilder			동적 어셈블리 내의 모듈을 정의하고 나타냅니다. 모듈에 대해서는 나중에 다시 다룰 기회가 있을 겁니다. 지금 당장은 잊고 
				있어도 괜찮습니다. 
OpCodes				ILGenerator 클래스의 멤버를 이용한 내보내기 작업에 사용할 MSIL 명령어의 필드 표현을 제공합니다. 
ParameterBuilder			매개변수 정보를 생성하거나 결합시킵니다. 
PropertyBuilder			형식(클래스)의 프로퍼티를 정의합니다. 
TypeBuilder			실행 중에 클래스를 정의하고 생성합니다. 


이 클래스를 사용하는 요령은 다음 순서와 같습니다.

1. AssemblyBuilder를 이용해서 어셈블리를 만듭니다. 
2. ModuleBuilder를 이용해서 1에서 생성한 어셈블리 안에 모듈을 만들어 넣습니다. 
3. 2에서 생성한 모듈 안에 TypeBuilder로 클래스(형식)를 만들어 넣습니다. 
4. 3에서 생성한 클래스 안에 메소드(MethodBuilder 이용)나 프로퍼티(PropertyBuilder 이용)를 만들어 넣습니다. 
5. 4에서 생성한 것이 메소드라면, ILGenerator를 이용해서 메소드 안에 CPU가 실행할 IL 명령들을 넣습니다. 

절차가 복잡해 보여도 사실은 그렇지 않습니다. 다음 그림을 보고 [어셈블리] > [모듈] > [클래스] > [메소드] 또는 [프로퍼티]로 이어지는 .NET프로그램의 계층 구조를 머릿속에 그려보면 이해가 될겁니다. 

어디 한번 ~Builder와 ILGenerator를 이용해서 새 형식을 만들어봅시다. 먼저 어셈블리를 만듭시다. 당연히 AssemblyBuilder 클래스를 이용해야겠지만 AssemblyBuilder는 스스로를 생성하는 생성자가 없습니다. 그래서 다른 팩토리 클래스(Factory Class:객체의 생성을 담당하는 클래스를 일컫는말)의 도움을 받아야 합니다. 다음 예제와 같이 이 클래스의 DefineDynamicAssembly()메소드를 호출하면 AssemblyBuilder의 인스턴스를 만들수 있습니다. 어셈블리의 이름은 CalculatorAssembly로 하겠습니다. 

AssemblyBuilder newAssembly = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName("CalculatorAssembly"), AssemblyBuilderAccess.Run);

다음에는 모듈을 만들 차례입니다. 모듈은 어셈블리의 내부에 생성되지요? AssemblyBuilder는 동적 모듈을 생성하는 DefineDynamicModule()메소드를 갖고 있으므로 이 메소드를 호출해서 모듈을 만들면 됩니다. 모듈의 이름은 Calculator로 정하죠. 

ModuleBuilder newModule = newAssembly.DefineDynamicModule("Calculator");

모듈을 만들었으면 클래스를 만들어야지요? ModuleBuilder의 DefineType()메소드를 이용해서 클래스를 생성합니다. 새로 만들 클래스의 이름은 Sum1To100입니다. 

TypeBuilder newType = newModule.DefineType("Sum1To100");

이젠 메소드를 만들 차례입니다. TypeBuilder 클래스의 DefineMethod()메소드를 호출해서 Calculate()라는 이름의 메소드를 만들겠습니다. 이 메소드의 접근성은 public이며, 반환 형식은 int, 매개변수는 없습니다. 

MethodBuilder newMethod = newType.DefineMethod("Calculate", MethodAttributes.Public, typeof(int), new Type[0]); //typeof(int)반환형식, new Type[0]매개변수

앞에서 메소드의 껍데기를 만들었으니, 이제 이 안에 메소드가 실행할 코드(IL 명령어)를 채워 넣어야 합니다. 이 작업은 ILGenerator 객체를 통해서 이루어집니다. 물론 ILGenerator 객체는 MethodBuilder 클래스의 GetILGenerator()메소드를 통해 얻을수 있습니다. 다음 코드는 1부터 100까지의 합을 구합니다. 

ILGenerator generator = newMethod.GetILGenerator();

generator.Emit(OpCodes.Ldc_14, 1); //32비트 정수(1)를 계산 스택에 넣습니다. 

for(int =2; i<=100; i++)
{
	generator.Emit(OpCodes.Ldc_14, i); //32비트 정수(i)를 계산 스택에 넣습니다. 
	generator.Emit(OpCodes.Add); // 계산 후 계산 스택에 담겨 있는 두 개의 값을 꺼내서 더한후 그 결과를 다시 계산 스택에 넣습니다. 
}
generator.Emit(OpCodes.Ret); //계산 스택에 담겨 있는 값을 반환합니다.



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 저게 어떻게 1부터 100까지 더하는 코드라는 거죠?
앞의 코드에 대해 조금더 설명하겠습니다. 여러분은 스택이 어떤 자료구조인지 알고 있지요? 네 스택은 LIFO(Last-In First-Out: 후입선출)방식으로 동작하며 입 출력이 최상위 노드에서만 이루어지는 자료구조입니다. 이 자료구조는 계산 알고리즘에도 응용되는데, 예를 들어 이야기해보겠습니다. 가령 1+2+3을 계산한다고 해보죠. 일단 피연산자 1과 2를 스택에 넣습니다. 그리고 이 피연산자 둘을 다시 스택에서 꺼내서 더한후 그 결과를 다시 스택에 넣습니다. 마지막 피연산자 3을 더하지 않았으니 이 녀석도 마저 스택에 넣습니다. 이제 스택에는 1+2의 결과인 3과 마지막 피연산자3이 남아 있습니다. 이둘을 다시 꺼내서 더한 후 결과를 다시 스택에 넣습니다. 더이상 연산을 수행할 피연산자가 더 남아 있지 않다면 이 스택에 있는 값이 1+2+3의 계산 결과입니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

자 Calculate()메소드안에 IL 명령어도 모두 채워 넣었으니 Sum1To100 클래스를 CLR에 제출하겠습니다. newType 객체에 CreateType()메소드를 호출합니다. 

newType.CreateType();

여기까지가 새로운 형식을 만드는 과정이었습니다. 지금부터는 이 형식의 인스턴스를 동적으로 생성해서 이용할수 있습니다. 다음 코드는 여러분도 잘 아는 내용이니 설명을 생략하겠습니다. 

object sum1To100 = Activator.CreateInstance(newType);
MethodInfo Calculate = sum1To100.GetType().GetMethod("Calculate");
Console.WriteLine(Calculate.Invoke(sum1To100, null));

동적으로 새로운 형식을 만드는 과정도 재미있지요? 혹시 여러분만의 컴파일러나 인터프리터를 만들어보고 싶다는 충돌이 일지는 않았나요?





16.2 애트리뷰트
애트리뷰트(Attribute)는 코드에 대한 부가 정보를 기록하고 읽을수 있는 기능입니다. 

오 주가정보 그거 주석으로도 충분히 할수 있지 않나요?

맞습니다. 주석을 이용해도 코드에 대한 부가 정보(설명)를 기록하고읽을수 있습니다. 애트리뷰트가 주석과 다른 점은 주석이 사람이 읽고 쓰는 정보라면, 애트리뷰트는 사람이 작성하고 컴퓨터가 읽는다는 것입니다. 

애트리뷰트를 이용해서 클래스나 구조체, 메소드, 프로퍼티 등에 데이터를 기록해두면 C# 컴파일러나 C#으로 작성된 프로그램이 이 정보를 읽고 사용할수 있습니다. 설명 따위를 런타임에 읽어서 뭘 하느냐고요? 할수 있는것 많습니다. 많고 말고요. 한가지 예를 들어보겠습니다. 

윤성이는 취미 삼아 C#으로 오픈소스 라이브러리를 만들어 배포했습니다. 윤성이는 어느날 이메일을 한 통 받았는데, 그 내용은 자신이 만든 라이브러리의 A()라는 메소드에 보안 문제가 있다는 것이었습니다. 검토해보니 라이브러리에 문제가 있는 것이 확인되었고, 윤성이는 새 버전을 급히 배포하기로 했습니다. 그런데 라이브러리 구조상 OldMethod()메소드만 수정해서는 문제를 해결할수 없고, NewMethod()라는 새 메소드를 추가해야 했습니다. 문제는 라이브러리를 사용하던 프로그래머들이었습니다. OldMethod()메소드에 보안 위협이 있으니 더이상 사용하지 말고 NewMethod()메소드로 대체하라고 공지를 해야 하는데, 이 프로그래머들은 윤성이가 작성한 Readme.txt나 공지 따위는 읽어보지 않을 터였습니다. 귀찮으니까요 그래서 윤성이는 새 라이브러리를 배포하면서 프로그래머들이 OldMethod()메소드를 사용하려 들면 컴파일러가 이 메소드를 사용하지 말라는 경고 메시지를 내보내도록 하기로 결정했습니다. 

여러분은 조금 전 이야기의 마지막 문장을 어떻게 생각합니까? 윤성이는 어떻게 컴파일러가 경고를 내게 만들수 있다는 걸까요? 이것은 애트리뷰트를 활용하는 일부 사례에 지나지 않습니다. 여러분이 응용하려 들면 무궁무진하게 활용처가 많은 것이 이 애트리뷰트거든요. 일단 알아두면 나중에 유용하게 써먹을수 있으니 잘 공부해두시기 바랍니다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 메타데이터?
메타데이터(Metadata)란 데이터의 데이터를 말합니다. 가령 C# 코드도 데이터지만 이 코드에 대한 정보, 즉 데이터 데이터가 있을 수 있습니다. 이를 메타데이터라고 하는 것이죠. 애트리뷰트나 리플렉션을 통해 얻는 정보들도 C# 코드의 메타데이터라고 할 수 있습니다. 참고하세요.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


16.2.1 애트리뷰트 사용하기
애트리뷰트를 사용할 때는 설명하고자 하는 코드 요소 앞에 [ 와 ]의 대괄호 쌍을 붙이고 그 안에 애트리뷰트의 이름을 넣으면 됩니다. 다음과 같이 말입니다. 

[ 애트리뷰트_이름(애트리뷰트_매개변수) ]
public void MyMethod()
{
	//...
}

실제 사용 예를 보겠습니다. 조금 전에 했던 윤성이의 새 라이브러리 이야기 말입니다. 윤성이의 고민은 다음과 같이 .NET 에서 기본적으로 제공하는 Obsolete 애트리뷰트를 이용하면 간단히 해결됩니다. 

class MyClass
{
	[Obsolete("OldMethod는 폐기되었습니다. NewMethod()를 이용하세요.")]
	public void OldMethod()
	{
		Console.WriteLine("I'm old");
	}	
	public void NewMethod()
	{
		Console.WriteLine("I'm new");
	}
}

이제 프로그래머들은 OldMethod()를 사용하는 코드를 그대로 둔 채 컴파일을 하면 "OldMethod 는 폐기되었습니다. NewMethod()를 이용하세요. 라는 경고 메시지를 보게 될 겁니다. 직접 확인해볼까요.?

이 실행 결과와 같이 이 예제 프로그램은 OldMethod()와 NewMethod()를 정상적으로 실행하지만, 컴파일을 할 때 비주얼 스튜디오의 오류 목록창을 확인하면 다음과 같은 경고 메시지가 나타나는 것을 볼 수 있습니다. 열심히 일하는 프로그래머라면 윤성이가 애트리뷰트를 통해 보낸 메시지를 그냥 지나치지 않고 권고대로 코드를 수정하겠죠?





16.2.2 호출자 정보 애트리뷰트
C#이 여러모로 멋진 언어이긴 하지만 아쉬운 부분도 있습니다. 그중 하나가 C/C++에서 제공하는 __FILENAME__, __LINE__, __FUNCTION__매크로(이 매크로들은 각각 현재 코드의 소스 파일 이름, 행(Line)번호, 함수 이름으로 컴파일러에 의해 치한되어 실행 코드에 들어갑니다.)에 해당하는 기능을 C#이 제공하지 않는다는 점입니다. 그런데 이것도 이젠 옛날 이야기가 됐습니다. 
C#5.0 버전부터 호출자 정보(Caller Information)애트리뷰트가 도입됐기 때문입니다. 이것이 대단치 않아 보여도. 저를 포함한 많은 C# 프로그래머들이 오랫동안 갈망해온 기능입니다. 호출자 정보는 메소드의 매개변수에 사용되며 메소드의 호출자 이름, 호출자 메소드가 정의된 소스 파일 경로, 심지어 소스파일 내의 행(Line)번호까지 알수 있습니다. (C/C++의 __FILENAME__, __LINE__, __FUNCTION__이 이제 부럽지 않습니다!)이것을 이용해서 응용 프로그램의 이벤트를 로그파일이나 화면에 출력하면 그 이벤트가 어떤 코드에서 일어났는지 알 수 있죠. 다음 표는 3가지 호출자 정보 애트리뷰트를 설명합니다. 

애트리뷰트			설명
CallerMemberNameAttribute		현재 메소드를 호출한 메소드 또는 프로퍼티의 이름을 나타냅니다. 
CallerFilePathAttribute		현재 메소드가 호출된 소스 파일 경로를 나타냅니다. 이때 경로는 소스 코드를 컴파일 할때의 전체 경로를 나타냅니다.
CallerLineNumberAttribute		현재 메소드가호출된 소스 파일 내의 행(Line)번호를 나타냅니다. 

호출자 정보 애트리뷰트도 사용방법이 간단합니다. 다음은 예제 코드입니다. 

public static class Trace
{
	public static void WriteLine(string message, [CallerFilePath] string file = "", [CallerLineNumber] int line = 0, [CallerMemberName] string member = "")
	{
		Console.WriteLine("{0}(Line:{1}) {2}: {3}", file, line, member, message);
	}
}
void SomeMethod()
{
	Trace.WriteLine("즐거운 프로그래밍!");
}

Trace.WriteLine()의 선언부를 보면 [CallerFilePath], [CallerLineNumber], [CallerMemberName]이 선택적 인수로 사용되고 있습니다. 이렇게 하면 Trace.WriteLine()메소드를 호출할 때 호출자 정보 애트리뷰트로 수식한 매개변수는 프로그래머가 별도로 입력하지 않아도 됩니다. 
SomeMethod()에서 Trace.WriteLine()메소드를 호출하는 부분이 그 예입니다. 



16.2.3 내가 만드는 애트리뷰트
.NET이 제공하는 애트리뷰트는 Obsolete 말고도 그 종류가 상당히 많습니다. C나 C++로 작성된 네이티브(DLL: Dynamic Link Library)에 있는 함수를 호출할 때 사용하는 [DLLImport], 조건부 메소드 실행을 지정할 때 사용하는 [Conditional]등이 그 예입니다. 

이 애트리뷰트들은 애트리뷰트 자체보다 용도를 중심으로 공부하는 편이 좋습니다. 애트리뷰트는 부가 정보이지 핵심 내용이 아닌 데다가 사용 방법도 그 수만큼 다양하기 때문입니다. 그래서 저는 수많은 애트리뷰트를 일일이 알아보는 대신, 애트리뷰트를 직접 만들어보고 활용해봄으로서 다른 애트리뷰트를 활용하는 데 필요한 내용을 여러분과 함께 나누려 합니다. 
별나게 생기긴 했지만, 애트리뷰트도 역시 하나의 클래스일 뿐입니다. 모든 애트리뷰트는 예를 들어 다음과 같이 System.Attribute 클래스로부터 상속을 받아 만들어집니다. 

class History : System.Attribute
{
	//
}

System.Attribute 를 상속하는 것만으로도 애트리뷰트 하나를 만든 셈이 됩니다. 이렇게 선언한 애트리뷰트는 앞에서 본적 있는 Obsolete 애트리뷰트처럼 [와]안에 애트리뷰트 이름을 넣어 사용하면 됩니다. 

[History]
class MyClass
{
	//...
}
앞의 History 는 애트리뷰트이긴 하지만 아무것도 설명하는 것이 없습니다. 지금부터는 History 애트리뷰트가 구체적으로 설명할 내용과 이것을 어떻게 설명하게 할 것인가를 나타내도록 코드를 추가해보겠습니다. 
저는 History가 클래스의 변경 이력을 나타내도록 하고 싶습니다. History 클래스에 자신이 설명할 클래스의 작성자(즉, 프로그래머), 버전, 변경 내용등을 나타낼수 있도록 필드 및 프로퍼티를 추가하겠습니다. 

class History : System.Attribute
{
	private string programmer;
	public double Version
	{
		get;
		set;
	}
	public string Changes
	{
		get;
		set;
	}
	public History(string programmer)
	{
		this.programmer = programmer;
		Version = 1.0;
		Changes = "First release";
	}
	public string Programmer
	{
		get { return programmer; }
	}
}

History 클래스는 System.Attribute 로부터 상속받았을 뿐이지 어느 클래스와 다를 바가 없습니다. 변경된 History 클래스를 한번 사용해보겠습니다. 

[History("Sean", Version=0.1, Changes = "2017-11-01 Created class stub")]
class MyClass
{
	public void Func()
	{
		Console.WriteLine("Func()");
	}
}

이와 같이 MyClass를 History 애트리뷰트로 설명해놓으면 리플렉션을 이용해서 손쉽게 Release 노트를 만들수 있습니다. 귀찮게 수작업을 할 필요가 없는 거지요. 그런데 한 가지 문제가 있습니다. 훗날 다른 프로그래머가 MyClass 를 수정한뒤 History 애트리뷰트를 추가하고 싶어도 더 추가할수 없습니다. 지금의 History 애트리뷰트는 단 한번 밖에 사용할수 없기 때문입니다. 가령 다음과 같이 애트리뷰트를 사용하려 들면 컴파일러가 에러 메시지를 내놓을 겁니다. 

[History("Sean", Version=0.1, Changes= "2017-11-01 Created class stub")]
[History("Bob", Version=0.2, Changes = "2017-12-03 Added Func() Method")] //현재로서는 애트리뷰트를 이렇게 겹쳐 사용할수 없습니다. 
class MyClass
{
	public void Func()
	{
		Console.WriteLine("Func()");
	}
}

이 문제를 해결하려면 System.AttributeUsage라는 애트리뷰트의 도움을 받아야 합니다. System.AttributeUsage는 쉽게 이야기해서 애트리뷰트의 애트리뷰트입니다. 애트리뷰트가 어떤 대상을 설명할지, 이 애트리뷰트를 중복해서 사용할수 있는지의 여부 등을 설명하거든요. System.AttributeUsage는 다음 예제와 같이 애트리뷰트 선언부에 사용하면 됩니다. 
[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true)]
class History : System.Attribute
{
	//..
}

System.AttributeUsage의 첫 번째 매개변수는 지금 선언하고 있는 애트리뷰트의 설명 대상이 무엇인지 나타냅니다. 이것을 Attribute Target이라고 하는데, 애트리뷰트의 설명 대상이 될수 있는 코드 요소는 모두 다음과 같습니다. 

Attribute Target			설명
All				이 표의 나머지 모든요소
Assembly				어셈블리
Module				모듈
Interface				인터페이스
Class				클래스
Struct				구조체
ClassMembers			클래스 안에 선언된 클래스나 구조체를 포함한 클래스의 모든 멤버
Constructor			생성자
Delegate				대리자
Enum				열거형
Event				이벤트
Field				필드
Property				프로퍼티
Method				메소드
Parameter			메소드의 매개변수
ReturnValue			메소드의 반환값

이 Attribute Target은 논리합 연산자를 이용해서 결합할 수도 있습니다. 가령 클래스와 메소드를 대상으로 하고싶다면 다음 예제 코드와 같이 AttributeTargets.Class | AttributeTargets.Method(|은 논리합 연산자입니다.)를 System.AttributeUsage의 애트리뷰트 매개변수에 넘기면 됩니다. 

[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true)]
class History : System.Attribute
{
	//..
}

이번에는 Attribute Target에서 눈을 돌려 System.AttributeUsage의 두번째 매개변수를 살펴보겠습니다. AllowMultiple, 이것이 바로 우리가 History 애트리뷰트를 여러번 사용할수 있도록 하기 위해 찾던 것입니다. 이 매개변수에 true를 대입하면 우리가 원하던 것을 얻게 됩니다. 