19.2.2 코드의 비동기 실행 결과를 주는 Task<TResult> 클래스
Task 클래스가 시큰둥했던 독자라도 Task<TResult> 클래스에 감동받지 않고는 못 배길 겁니다. 무려 코드의 비동기 실행 결과를 손쉽게 얻게 해주거든요. 예를 들어 여러분이 15개의 비동기 작업을 한후 그 결과를 취합해야 한다고 생각해보세요. 결과를 취합하지 않아도 된다면야 Task가 아닌 Thread 클래스만으로도 얼마든지 그일을 해내도록 코드를 작성할 수 있지만 결과를 취합해야 한다면 일이 굉장히 복잡해집니다. Task<TResult> 는 코드의 비동기 실행 결과를 손쉽게 취합할수 있도록 도와줍니다. 

다음은 Task<TResult> 클래스를 사용하는 예제입니다. 인스턴스를 생성하고 실행하는 과정 자체는 Task 클래스의 사용법과 별로 다르지 않습니다. 다만 Task 가 비동기로 수행할 코드를 Action 대리자로 받는 대신 Func 대리자로 받는다는 점과 결과를 반환받을수 있다는 사실에 주목해야 합니다. 

var myTask = Task<List<int>>.Run(
	() =>
	{
		Thread Sleep(1000);
		List<int> list = new List<int>();
		list.Add(3);
		list.Add(4);
		list.Add(5);
		return list; //Task<TResult>는 TResult 형식의 결과를 반환합니다. 
	}
);
var myList = new List<int>();
myList.Add(0);
myList.Add(1);
myList.Add(2);

myTask.Wait();
myList.AddRange(myTask.Result.ToArray()); //myList의 요소는 0,1,2,3,4,5가 됩니다. 


사실 이 코드에서 myTask.Result 프로퍼티가 비동기 작업이 끝나야 반환하므로 myTask.Wait()는 호출하지 않아도 되지만 행여 Task 클래스를 사용할 때 Wait()를 호출하지 않는 나쁜 습관을 만들 수도 있으므로 항상 Wait()를 호출하는 것이 좋습니다. Task.Runsynchronously()를 호출한 뒤에 Wait()를 호출하는 것처럼 말입니다. 

다음은 Task<TResult>를 활용한 예제 프로그램입니다. 이 프로그램은 프로그램 인수로 입력받은 두 수 사이에 존재하는 모든 소수의 목록을 반환합니다. 소수 찾기는 문제 특성상 각 수를 일일이 검사해야 합니다. 만약 하나의 Task 만으로 n개의 수에 대해 소수 찾기를 한다면 소수 판정 시간xn만큼의 시간이 소요될 것입니다. 하지만 m개의 CPU가 있는 시스템에서 m개 만큼의 Task가 n개의 수를 m으로 나눈 범위만큼 각각 소수 찾기를 한다면 작업 시간이 훨씬 줄어들겠지요. 다음 프로그램을 따라 만들어보고 그 결과를 눈으로 직접 확인해보세요. 

using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace FirstCon
{
    class Program
    {
        static bool IsPrime(long number)
        {
            if (number < 2)
                return false;
            if (number % 2 == 0 && number != 2)
                return false;
            for(long i=2; i< number; i++)
            {
                if (number % i == 0)
                    return false;
            }
            return true;
        }
        
        static void Main(string[] args)
        {
            long from = Convert.ToInt64(args[0]);
            long to = Convert.ToInt64(args[1]);
            int taskCount = Convert.ToInt32(args[2]);

            Func<object, List<long>> FindPrimeFunc = (objRange) =>
            {
                long[] range = (long[])objRange;
                List<long> found = new List<long>();
                for (long i = range[0]; i < range[1]; i++)
                {
                    if (IsPrime(i))
                        found.Add(i);
                }
                return found;
            };
            Task<List<long>>[] tasks = new Task<List<long>>[taskCount];
            long currentFrom = from;
            long currentTo = to / tasks.Length;
            for(int i=0; i<tasks.Length; i++)
            {
                Console.WriteLine("Task[{0}] : {1} ~ {2}", i, currentFrom, currentTo);
                tasks[i] = new Task<List<long>>(FindPrimeFunc,new long[] {currentFrom, currentTo});
                currentFrom = currentTo + 1;
                if (i == tasks.Length - 2)
                    currentTo = to;
                else
                    currentTo = currentTo + (to / tasks.Length);
            }
            Console.WriteLine("Please press enter to start...");
            Console.ReadLine();
            Console.WriteLine("Started...");

            DateTime startTime = DateTime.Now;
            foreach(Task<List<long>> task in tasks)
            {
                task.Start();
            }
            List<long> total = new List<long>();
            foreach(Task<List<long>> task in tasks)
            {
                task.Wait();
                total.AddRange(task.Result.ToArray());
            }
            DateTime endTime = DateTime.Now;
            TimeSpan elapsed = endTime - startTime;
            Console.WriteLine("Prime number count between {0} end {1} : {2}", from, to, total.Count);
            Console.WriteLine("Elapsed : {0}", elapsed);
        }        
        
        
    }    
}



19.2.3 손쉬운 병렬 처리를 가능케 하는 Parallel 클래스
이전 절의 예제 프로그램은 특정 범위 안에 있는 모든 소수를 찾기 위해 여러 개의 Task 인스턴스를 생성하여 각 인스턴스에게 작업할 범위를 할당한 후, foreach반복문을 이용하여 시동했습니다. 이렇게 시동이 걸린 각 Task 객체는 동시에 작업을 수행한 뒤 작업 결과를 반환했지요. 아무튼 Task<TResult> 덕분에 소수 찾기를 병렬로 수행하도록 프로그램을 구현하는 것은 크게 어렵지 않았습니다. 여러분도 그렇게 생각하세요?
마이크로소프트는 개발자를 위해 선물 하나를 더 준비했습니다. 그 선물은 바로 System.Threading.Tasks.Parallel 클래스입니다. 이 클래스는 For(), Foreach() 등의 메소드를 제공함으로써 우리가 이전 절에서 Task<TResult>를 이용해 직접 구현했던 병렬 처리를 더쉽게 구현할수 있게 해줍니다. 
진짜 Parallel 클래스가 사용하기 쉬운지 보시겠습니까? 다음은 Parallel 클래스를 이용해서 병렬로 어떤 메소드를 호출하는 예제입니다. 
void SomeMethod(int i)
{
	Console.WriteLine(i);
}
Parallel.For(0, 100, SomeMethod);
이 코드에서 Parallel.For() 메소드는 SomeMethod()를 병렬로 호출하면서 0부터 100사이의 정수를 메소드의 인수로 넘깁니다. SomeMethod()메소드를 병렬로 호출할 때 몇 개의 스레드를 사용할지는 Parallel 클래스가 내부적으로 판단하여 최적화합니다. 우리는 그저 이 클래스가 제공하는 서비스를 마음편히 사용하기만 하면 됩니다. 

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace ParallelLoop
{
	class MainApp
	{
		static bool IsPrime(long number)
		{
		            if (number < 2)
		                return false;
		            if (number % 2 == 0 && number != 2)
		                return false;
		            for(long i=2; i< number; i++)
		            {
		                if (number % i == 0)
		                    return false;
		            }
		            return true;
		 }
		static void Main(string[] args)
		{
			long from = Convert.ToInt64(args[0]);
			long to = Convert.ToInt64(args[1]);

			Console.WriteLine("Please press enter to start...");
			Console.ReadLine();
			Console.WriteLine("Started...");

			DateTime startTime = DateTime.Now;
			Lisg<long> total = new List<long>();

			Parallel.For(from , to, (long i) =>
			{
				if(IsPrime(i))
				   lock(total)
				     total.Add(i);
			});
			DateTime endTime = DateTime.Now;
	
			TimeSpan elapsed = endTime - startTime;

			Console.WriteLine("Prime number count between {0} and {1} : {2}", from, to, total.Count);
			Console.WriteLine("Elapsed time : {0}", elapsed);
		   }
	}
}
	


19.3 async 한정자와 await 연산자로 만드는 비동기 코드
async 한정자와 awit 연산자는 C#5.0에서 새롭게 도입된 장치지만 일부 얼리아답터 프로그래머들은 C# 5.0이 공개되기 전부터 이들의 존재와 사용법을 알고 있었습니다. C#의 사촌격인 씨오메가는 마이크로소프트의 연구용 언어입니다. 마이크로소프트가 홀로 C#의 진화를 책임지고 있을 당시 향후 C# 언어에 탑재할 중요한 특징들을 미리 탑재하여 실험하는 임무를 맡고 있었습니다.(상업용으로 사용되지는 않았지만 http://research.microsoft.com/Comega/를 통해 외부에 공개되었습니다.) C#팀은 오랫동안 씨오메가를 시험하면서 프로그래머들이 쉽게 이용할수 있는 async 한정자와 awit 연산자 기반의 비동기 코딩 패턴을 얻어냈으며, 이것을 C#5.0에 이식했습니다. C# 5.0이전에는 C#으로 비동기 코드를 작성할수 없었냐고요? 아닙니다. 2002년에 공식 발표된 C# 언어는 1.0버전부터 BeginInvoke()/EndInvoke()메소드를 이용하는 비동기 코드 패턴을 지원했습니다. 하지만 이 패턴은 여간 까다로운 것이 아니어서 숙련된 프로그래머가 아니면 사용하는 경우가 드물었습니다. 
async 한정자는 메소드, 이벤트 처리기, 테스트, 람다식 등을 수식함으로써 C# 컴파일러가 이들을 호출하는 코드를 만날 때 호출 결과를 기다리지 않고 바로 다음 코드로 이동하도록 실행 코드를 생성하게 합니다. async 는 한정자 이므로 메소드 또는 이벤트 처리기를 선언할 때 다음과 같이 다른 한정자들과 함께 사용하면 됩니다. 

public static async Task MyMethodAsync()
{
	//..
}


이렇게 async 한정자로 메소드나 테스크를 수식하기만 하면 비동기 코드가 만들어집니다. 다만 async 로 한정하는 메소드는 반환 형식이 Task나 Task<TResult>또는 void 여야 한다는 제약이 있습니다. 실행하고 잊어버릴(Shoot and Forget)작업을 담고 있는 메소드라면 반환 형식을 void로 선언하고, 작업이 완료될 때까지 기다리는 메소드라면 Task, Task<TResult>로 선언하면 됩니다. 
C# 컴파일러는 Task 또는 Task<TResult>형식의 메소드를 async 한정자가 수식하는 경우, awit 연산자가 해당 메소드 내부의 어디에 위치하는지 찾습니다. 그리고 await 연산자를 찾으면 그곳에서 호출자에게 제어를 돌려주도록 실행 파일을 만듭니다.(await 연산자를 못찾으면 어떻게 되냐고요? 메소드 내부에서 끝내 await 연산자를 만나지 못하면호출자에게 제어를 돌려주지 않으므로 그 메소드/태스크 는 동기적으로 실행하게 됩니다.)
방금 전에 했던 설명을 정리해볼까요?

async로 한정한 Task 또는 Task<TResult>를 반환하는 메소드/태스크/람다식은 await 연산자를 만나는 곳에서 호출자에게 제어를 돌려주며, await 연산자가 없는 경우 동기로 실행됩니다. 

async 한정자와 await 연산자가 어떻게 비동기 코드를 형성하는지에 대한 이해를 돕기위해 다음을 살펴봅시다. 

호출자						비동기 메소드
void Caller()					async void MyMethodAsync()
{						{
	문장1;						문장2;

	MyMethodAsync();					await Task.Run(async() =>
								{
	문장3;								문장A;
	//,,,								문장B;
								}
							});
							문장C;

이 그림에서 Caller()의 실행이 시작되면 1의 흐름을 따라 문장 1이 실행되고 이어서 2를 따라 MyMethodAsync()메소드의 실행으로 제어가 이동합니다. MyMethodAsync()에서는 3을 따라 문장2가 실행되면 async 람다문을 피연산자로 하는 await 연산자를 만납니다. 바로 여기서 CLR은 4를 따라 제어를 호출자인 Caller()에게로 이동시키고, 앞의 그림에서 점선으로 표시된 a와 b의 흐름을 동시에 실행합니다. 


using System;
using System.Threading.Tasks;

namespace Async
{
	class MainApp
	{
		async static private void MyMethodAsync(int count)
		{
			Console.WriteLine("C");
			Console.WriteLine("D");
			await Task.Run(async () =>
			{
				for(int i=0;i <= count; i++)
				{
					Console.WriteLine($"{i}/{count} ...");
					await Task.Delay(100); //Task.Delay()는 Thread.Sleep()의 비동기 버전이라 할 수 있습니다. 
				}
			});
			Console.WriteLine("G");
			Console.WriteLine("h");
		}
		static void Caller()
		{
			Console.WriteLine("A");
			Console.WriteLine("b");

			MyMethodAsync(3);
			Console.WriteLine("E");
			Console.WriteLine("f");
		}
		static void Main(string[] args)
		{
			Caller();
			Console.ReadLine(); //프로그램 종료 방지
		}
	}
}




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? Task.Delay()에 대하여??
Task.Delay()함수가 하는 일은 인수로 입력받은 시간이 지나면 Task. 객체를 반환하는 것입니다. 실질적인 역할은 ThreadSleep()과 동일하다고 할 수 있지요. 하지만 Task.Delay()는 ThreadSleep()과 중요한 차이를 가집니다. 후자가 스레드 전체를 블록시키는 데 빈해 전자는 스레드를 블록시키지 않습니다. 만약 UI 스레드 안에서 Thread.Sleep()을 호출하면 UI가 Sleep()이 반환되기까지 사용자에게 응답하지 못하겠지만 TaskDelay()를 사용하면 해당 메소드의 반환 여부와 관계없이 UI가 사용자에게 잘 응답합니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


19.3.1 .NET이 제공하는 비동기 API 맛보기
MS는 C# 언어가 비동기 프로그래밍 패러다임을 지원하도록 만드는 한편, .NET 도 기존 API에 더불어 비동기 버전 API를 새롭게 제공하도록 업그레이드했습니다. .NET 클래스 라이브러리 곳곳에 추가된 ~Async()라는 이름의 메소드들이 바로 그들입니다. 이번 절에서는 그중에서 System.IO.Stream 클래스가 제공하는 비동기 메소드 중 두 가지를 살펴보고 예제 프로그램을 만들어보겠습니다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
여기서 잠깐? 다른 비동기 API들은 어쩌고요?
.NET은 파일/네트워크/데이터베이스 등 다양한 분야의 클래스 라이브러리에 비동기 API를 제공합니다. 이 업그레이드 내용은 일개 장에서 다루기에는 너무 방대합니다. 하지만 .NET이 비동기 API의 이름 끝에 ~async 를 붙여서 프로그래머들이 쉽게 찾을 수 있게 해놓은 데다, 비동기 API의 대부분이 I/O 바운드 인경우가 많아 사용하는 상황이 이 책에서 소개한 것과 비슷하므로 독자 여러분 스스로 다른 비동기 API를 이용하는 데 어려움은 없을것입니다. 게다가 System.IO.Stream은 많은 스트림 클래스들의 부모 클래스이기도 합니다. 이런 이유로 저는 이 책에서 다른 비동기 API는 따로 다루지 않으려 합니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

다음 표는 System.IO.Stream 클래스가 제공하는 읽기/쓰기 메소드의 동기 버전과 비동기 버전을 보여줍니다. 동기 버전 메소드인 Read() 메소드와 Write()메소드는 이미이전 장에서 다룬 적이 있기 때문에 낯이 익을 겁니다. 

동기 버전 메소드		비동기 버전 메소드		설명
Read			ReadAsync		스트림에서 데이터를 읽습니다. 
Write			WriteAsync		스트림에 데이터를 기록합니다. 

이표에는 그다지 영양가 있는 내용이 없습니다. 비동기 버전 메소드의 이름 뒤에 Async 메소드가 붙은 것 말고는 특이점이 없네요. 다음 표는 Read()/Write()메소드를 사용하는 코드와 ReadAsync()/WriteAsync()메소드가 어떻게 다른지 보여줍니다. 표의 첫 번째 행에는 동기 버전 메소드로 구성한 파일 복사 함수가 있고 두 번째 행에는 동일한 내용을 비동기 버전으로 구현한 코드가 있습니다. 

동기버전
static long CopySync(string FromPath, string ToPath)
{
	using( var fromStream = new FileStream(FromPath, FileMode.Open))
	{
		long totalCopied = 0;
		using( var toStream = new FileStream(ToPath.FileMode.Create))
		{
			byte[] buffer = new byte[1024];
			int nRead = 0;
			while((nRead = fromStream.Read(buffer, 0, buffer.Length)) != 0)
			{
				toStream.Write(buffer, 0, nRead);
				totalCopied += nRead;
			}
		}
		return totalCopied;
	}
}

비동기 버전
async Task<long> CopyAsync(string FromPath, string ToPath) //async로 한정한 코드를 호출하는 코드도 역시 async로 한정되어 있어야 합니다.
{							반환 형식은 Task또는 void형이어야 하고요
	using( var fromStream = new FileStream(FromPath, FileMode.Open))
	{
		long totalCopied = 0;
		using(var toStream = new FileStream(ToPath, FileMode.Create))
		{
			byte[] buffer = new byte[1024];
			int nRead = 0;
			while((nRead = await fromStream.ReadAsync(buffer, 0, buffer.Length)) != 0)
			{//ReadAsync()와 WriteAsync()메소드는 async로 한정되어 있습니다. 이들을 호출하려면 await 연산자가 필요합니다.
				await toStream.WriteAsync(buffer, 0, nRead);
				totalCopied += nRead;
			}
		}
		return totalCopied;
	}
}

사실 표의 윗 부분에 있는 CopySync()메소드나 아래에 있는 CopyAsync()메소드는 기능적 차이가 없습니다. 둘다 똑같이 파일을 복사하고, 복사를 마친 뒤에는 파일의 크기를 반환합니다. 하지만 이 둘을 사용자 인터페이스에서 호출해보면 프로그램의 응답성에 큰 차이가 있음을 바로 확인할수 있습니다. CopySyn()메소드는 일단 호출하고 나면 실행이 종료될 때까지 사용자 인터페이스가 사용자에게 거의 응답을 하지 못하는 반면, CopyAsync()는 메소드가 실행되는 중간에도 여전히 사용자가 사용자 인터페이스에 접근하는 데 아무런 문제가 없게 합니다. 
이둘 사이의 차이를 제대로 확인하려면 윈도우 사용자 인터페이스 프로그램에서 호출해봐야 하는데 아직 우리가 윈도우 프로그래밍을 다루지 않았으니 당장은 어렵고, 마침 다음 장에서 윈도우 폼 프로그래밍을 다루므로 그때 다시, 이 두 메소드를 만나보겠습니다. 지금은 비동기 API를 사용하는 요령을 익히는 것에 목적을 두고 예제 프로그램을 하나 만들어보겠습니다. 


using System;
using System.IO;
using System.Threading.Tasks;

namespace AsyncFileIO
{
	class MainApp
	{
		//파일 복사후 복사한 파일 용량 반환
		static async Task<long> CopyAsync(string FromPath, string ToPath)
		{
			using(var fromStream = new FileStream(FromPath, FileMode.Open))
			{
				long totalCopied = 0;
				using(var toStream = new FileStream(ToPath, FileMode.Create))
				{
					byte[] buffer = new byte[1024];
					int nRead = 0;
					while((nRead = await fromStream.ReadAsync(buffer, 0, buffer.Length)) != 0)
					{
						await toStream.WriteAsync(buffer, 0, nRead);
						totalCopied += nRead;
					}
			}
			return totalCopied;
		}
		static async void DoCopy(string FromPath, string ToPath)
		{
			long totalCopied = await CopyAsync(FromPath, ToPath);
			Console.WriteLine($"Copied Total {totalCopied} Bytes.");
		}
		static void Main(string[] args)
		{
			if(args.Length < 2)
			{
				Console.WriteLine("Usage : AsyncFileIO <Source> <Destination>");
				return;
			}
			DoCopy(args[0], args[1]);
			Console.ReadLine();
		}
	}
}