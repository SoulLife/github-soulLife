7.13 읽기 전용 필드
그동안 상수라는 이름을 오래도록 잊고 지냈죠? 변수는 변하는 데이터를 담지만, 상수는 변치 않는 데이터를 담습니다. 상수는 다음과 같이 const 키워드를 이용해서 선언합니다.(기억이 돌아오지요? 자세한 내용은 3장에서 복습할 수 있습니다.)
const double pi = 3.14159265359;
컴파일러는 상수에 지정된 값을 실행파일 안에 기록해둡니다. 다시 말해 상수는 프로그램이 실행되기 전부터 이미 정해져있습니다. 그리고 프로그램 실행 중에는 절대 그값을 바꿀 수 없지요. 이에 반해 변수는 자유롭게 값을 변경할 수 있습니다. 읽기 전용 필드는 상수와 변수 그 중간 어딘가에 있습니다. 
읽기 전용 필드는 이름에서 알 수 있듯이 읽기만 가능한 필드를 말합니다. 즉 클래스나 구조체의 멤버로만 존재할수 있으며 생성자 안에서 한 번 값을 지정하면 그 후로는 값을 변경할수 없는것이 특징입니다. 읽기 전용 필드는 다음과 같이 readonly 키워드를 이용해 선언할수 있습니다. 

class Configuration
{
	private readonly int min;
	private readonly int max;
	public Configuration(int v1, int v2)
	{
		this.min = v1;
		this.max = v2;
	}
}
이 코드에서처럼 읽기 전용 필드는 생성자 안에서만 초기화가 가능합니다. 만약 생성자가 아닌 다른 메소드에서 min, max 와같은 읽기 전용 필드를 수정하려는 시도가 발생하면 컴파일 에러가 일어납니다.



7.14 중첩 클래스
중첩 클래스(Nested Class)는 클래스 안에 선언되어 있는 클래스를 말합니다. 중첩 클래스는 다음과 같은 꼴로 선언이 가능합니다. 

class OuterClass
{
	class NestedClass
	{
	}
}
보다시피 중첩 클래스를 선언하는 문법은 매우 간단합니다. 클래스 안에 클래스를 선언하는 것이 전부입니다. 객체를 생성하거나 객체의 메소드를 호출하는 방법도 보통의 클래스와 다르지 않습니다. 중첩 클래스가 다른 클래스와 한가지 다른점이 있다면 자신이 소속된 클래스의 멤버에 자유롭게 접근할수 있다는 사실입니다. private 멤버에도 접근할수 있으니 말 다한거죠. 다음은 중첩 클래스에서 자신의 소속 클래스의 멤버에 접근하는 예제입니다. 

class OuterClass
{
	private int OuterMember;
	class NestedClass
	{
		public void DoSomething()
		{
			OuterClass outer = new OuterClass();
			outer.OuterMember = 10;
		}
	}
}
자아 그럼 여기에서 질문이 하나 나올 법합니다. 
중첩 클래스는 왜 쓰는건가요?
프로그래머마다 중첩 클래스를 이용하는 이유가 다양하지만 기본적으로는 다음 두가지 때문입니다. 

* 클래스 외부에 공개하고 싶지않은 형식을 만들고자 할떄
* 현재 클래스의 일부분처럼 표현할수 있는 클래스를 만들고자 할때

다른 클래스의 private 멤버에도 마구 접근할수 있는 중첩 클래스는 은닉성을 무너뜨리기는 하지만 보다 유연한 표현력을 프로그러머에게 가져다준다는 장점이 있습니다. 




7.15 분할 클래스
분할 클래스(Partial Class)란 여러 번에 나눠서 구현하는 클래스를 말합니다. 분할 클래스는 그 자체로 특별한 기능을 하는 것은 아니며 클래스의 구현이 길어질 경우 여러 파일에 나눠서 구현할수 있게 함으로써소스 코드 관리의 편의를 제공하는 데 그 의미가 있습니다. 

분할 클래스는 다음과같이 partial 키워드를 이용해서 작성합니다. 

이 코드에서 MyClass 는 두 번에 걸쳐 정의되고 있습니다. 첫 번째 정의에서는 Method1()과 Method2()메소드만 정의하고, 두 번째 정의에서는 Method3()과 Method4()를 정의합니다. C# 컴파일러는 이렇게 분할 구현된 코드를 하나의 MyClass로 묶어 컴파일합니다. 이렇게 선언된 MyClass를 사용할 때는 몇 개로 나눠 분할 구현했는지 또는 통짜로 구현했는지에 대해 전혀 신경쓰지 않아도 됩니다. 그냥 하나의 클래스인 것처럼 사용하면 됩니다. 

