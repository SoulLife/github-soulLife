CHAPTER 07 클래스 상속



01 상속



1.1상속

객체 지향의 주요 특성중 하나인 상속(Inheritance)은 이미 만들어진 클래스의 멤버들을 물려받아 새로운 클래스를 정의하는 기법이다. 이때 기존의 존재하는 클래스를 기반 클래스(Base Class)라고 하며 상속에 의해 새로 만들어진 클래스를 파생 클래스(Derived Class)라고 한다. 다른 객체 지향 언어에서는 기반, 파생이라는 용어 대신 슈퍼 클래스(Super Class), 서브 클래스(Sub Class)라는 용어를 쓰기도 하는데 같은 뜻이다. 더 간단하게는 인간관계에 비유하여 부모 클래스, 자식 클래스라고 칭하기도 한다.



생성자와 파괴자 등 특수한 몇 가지를 제외한 기반 클래스의 모든 멤버가 상속되며 상속된 멤버들의 액세스 지정은 그대로 유지된다. 심지어 기반 클래스의 private 멤버도 상속되는데 다만 숨겨져 있기 떄문에 파생 클래스에서 직접 액세스할 수는 없다. 모든 멤버들이 그대로 상속되므로 파생 클래스는 상속에 의해 기반 클래스와 일단은 완전히 같아진다. 특성과 동작을 모두 물려받으므로 기반 클래스가 할수 있는 동작은 파생 클래스도 모두 할수 있다. 물론 상속받은 후에 파생 클래스에서 더 필요로 하는 멤버를 추가로 선언할 수 있다. 그래서 파생 클래스는 기반 클래스보다는 더 기능이 많으며 더 특수한 대상을 표현한다.



프로그래밍이란 작업은 원래가 반복성을 띠기 때문에 비슷비슷한 클래스를 만들어야 하는 경우가 굉장히 많다. 상속은 클래스를 매번 새로 만들 필요 없이 이미 만들어진 클래스의 코드를 재활용할수 있는 훌륭하고도 편리한 방법이다. 또한 상속에 의해 클래스의 계층을 구성하며 계층이 구축되면 다형성을 발휘할 수 있다. 객체 지향의 가장 큰 매력이자 힘의 근원이라고 할수 있는 다형성의 전제 조건이 바로 상속이다. 파생 클래스를 정의하는 형식은 다음과 같다.



지정자 class 이름 : 기반클래스, 인터페이스

{

             // 멤버 목록

}



클래스 이름 다음에 :과 기반 클래스의 이름이 온다. 단일 상속만 지원되므로 기반 클래스는 하나만 올 수 있되 메서드의 목록만 정의하는 인터페이스는 개수에 상관없이 복수개를 상속받을 수 있다. 그럼 실제 상속을 해보자. 다음 예제는 사람을 표현하는 Human클래스를 상속하여 학생을 표현하는 Student클래스를 정의한다.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {       
        static void Main(string[] args)
        {
            Student kim = new Student("송재호", 25, 200561093);
            kim.Intro();
            kim.Study();
        }
       
    }
    class Human
    {
        protected string name;
        protected int age;
        public Human(string aName, int aAge)
        {
            name = aName;
            age = aAge;
        }
        public virtual void Intro()
        {
            Console.WriteLine("이름:" + name);
            Console.WriteLine("나이:" + age);
        }
   
    }
    class Student : Human
    {
        protected int stNum;
        public Student(string aName, int aAge, int aStNum)
            : base(aName, aAge)
        {
            stNum = aStNum;
        }
        public override void Intro()
        {
            base.Intro();
            Console.WriteLine("학번:" + stNum);
        }
        public void Study()
        {
            Console.WriteLine("하늘천  따지 검을 현 누를 황");
        }
    }
  
}



Human 클래스는 그냥 class Human으로 선언되어 있지만 Student 클래스 선언문 뒤에는 :Human이라는 기반 클래스가 명시되어 있다. 이 선언에 의해 Student는 Human의 모든 멤버를 상속 받는다.



Main에서는 Student 객체 하나를 생성하여 Intro와 Study 메서드를 호출한다. 학번을 포함하여 자신의 소개를 멋지게 하며 공부하는 흉내도 잘 낸다.



실행 결과 : 이름 : 송재호

나이 : 25

학번:200561093

하늘 천 따지 검을 현 누를 황



사람은 이름과 나이라는 특성을 가지며 자신을 소개하는 동작을 할 수 있다. 학생도 일종의 사람이므로  사람이 가지는 특성과 동작을 모두 물려받아야 한다. 즉, 학생도 이름과 나이가 있고 자신을 소개할 수 있다. 파생 클래스는 기반 클래스를 상속받은 후에 더 필요한 멤버를 추가한다. 학생은 학번이라는 고유의 식별자를 가지며 공부를 하는 특이한 동작을 한다. 그래서 stNum 필드와 Study 메서드를 추가 선언했다.



파생 클래스는 멤버를 추가하기만 하는 것이 아니라 기반 클래스로부터 상속받은 동작을 수정할수도 있다. 학생은 사람에 비해 더 많은 속성을 가지므로 자신을 소개하는 방식도 일반적인 사람과는 조금 다르다. 그래서 Human으로부터 물려받은 Intro를 재정의하여 이름과 나이뿐만 아니라 자신의 학번까지도 소개한다. 재정의를 위해 Human의 Intro앞에는 virtual이라는 키워드가 추가되었고 Student의 Intro 앞에는 override 라는 키워드가 추가되었는데 재정의에 대해서는 다음 절에서 따로 연구해 보자.



기반 클래스는 파생 클래스에서 액세스할 필요가 있는 멤버들의 액세스 지정자를 protected로 변경해야 한다 그렇지 않고 private로 그대로 두면 파생 클래스가 물려받은 멤버를 액세스할 수 없다. 상속에 의해 Student는 Human의 멤버를 모두 물려받았으며 일부는 재정의하고 더 필요한 멤버를 추가하기도 한다. 만약 상속이라는 기법이 없다면 Student를 정의하기 위해 이름, 나이 등의 필드를 모두 새로 선언해야 할 것 이다.



기반 클래스의 생성자는 상속되지 않지만 파생 클래스에서 기반 클래스의 생성자를 호출할 수는 있다. 그래야 물려받은 멤버를 초기화할 수 있기 떄문이다. 파생 클래스의 생성자가 기반 클래스의 생성자를 호출할 때는 생성자의 헤더 뒤에:base 구문을 사용하는데 이때 base는 기반 클래스를 의미한다. base 다음에 기반 클래스의 생성자로 전달할 인수를 표기하면 인수의 개수와 타입에 맞는 적절한 생성자가 호출되어 상속받은 멤버를 초기화한다. Student의 생성자는 이름, 나이, 학번을 인수로 받아 이름과 나이는 Human 생성자에게 넘기고 본체에서는 학번만 초기화한다.



파생 클래스가 초기화되기 위해서는 먼저 상속받은 멤버를 초기화해야 하므로 생성자의 base 호출문은 생략할수없다. 위 코드에서 Student 생성자의 :base를 주석처리하면 기반 클래스의 디폴트 생성자가 호출되는데 Human에는 디폴트 생성자가 없어 에러 처리된다. Human에 디폴트 생성자를 정의하면 일단 컴파일은 되겠지만 디폴트 생성자는 어디까지나 무난한 값으로 초기화를 할 뿐이므로 상속받은 멤버들이 원하는 대로 초기화되지 않을 것이다.



재정의된 Intro 메서드에서도 코드를 최대한 재사용하기 위해 base 구문을 사용하여 기반 클래스의 Intro 메서드를 호출했다. 이름과 나이를 출력하는 코드가 기반 클래스에 이미 작성되어 있으므로 이 코드를 다시 작성할 필요 없이 기반 클래스의 Intro를 호출하기만 하면 된다. 그리고 자신이 추가 한 학번 필드만 더 출력하면 학생의 모든 정보가 출력된다. 물론 이름과 나이를 기반 클래스와 다른 방식으로 출력하고 싶다면 이때는 base를 호출할 필요가 없다.





1.2 포함

상속의 가장 기본적인 이점은 기반 클래스의 코드를 재활용 할수 있다는 점이다. 그러나 상속이 코드를 재사용하는 유일한 방법은 아니면 포함 관계라는 것도 있다. 포함은 클래스가 다른 클래스의 객체를 내부에 선언함으로써 포함된 클래스의 기능을 공짜로 사용하는 것이다. 클래스에 포함될 수 있는 멤버의 타입에는 제한이 없으므로 클래스 타입의 객체를 멤버로 선언할 수 있으며 따라서 포함 이라는 기법이 자연히 성립된다.



포함의 예는 앞장에서도 여러번 나왔었다. Jopok 예제에 그 예가 있는데 조폭 클래스의 두목 정보를 표현하기 위해 Human 객체 Dumok를 선언했었다. Jopok이 Human 객체를 포함함으로써 Human에 이미 작성되어 있는 이름, 나이 등의 속성과 소개하는 동작을 재활용한 것이다. 만약 Human 클래스가 없었다면 Jopok 클래스는 두목의 이름, 나이 필드와 소개 메서드를 일일이 작성해야 할 것이다.



class Human(){...}

class Jopok

{

    readonly private Human Dumok;



Birth 예제도 생년월일을 표현하기 위해 Date객체를 Human 클래스에 선언했는데 이것도 포함의 좋은 예이다. 날짜를 관리하는 기능을 위해 다른 클래스의 코드를 재활용하는 것이다. 포함된 객체가 클래스 내부에서만 사용된다면 아예 내부 타입으로 정의할 수도 있는데 Birth 예제가 그렇게 하고있다. Jopok 예제는 외부 클래스의 객체만을 포함했고 Birth 예제는 클래스와 객체를 모두 내부에 포함한다. 포함된 객체는 참조 타입이므로 선언만 한다고 생성되지 않으며 생상자에서 반드시 new 연산자로 할당해야 한다. 생성자에서 포함객체를 초기화하지 않으면 null 참조 예외가 발생한다.



포함과 상속은 코드를 재사용한다는 면에서 비슷하지만 사용 용도와 효과는 완전히 다르다. 상속은 is a 관계를 표현하며 포함은 has a 관계를 표현한다. is a 관계는 기반 클래스와 파생클래스의 관계가 "~의 일종"으로 표현되기 때문에 붙여진 것인데 학생은 사람의 일종(Student is a Human)이라고 할 수 있다. has a 관계는 소유 관계이며 포함한 객체가 포함된 객체를 가지고 있는 것이다.

조폭은 두목을 가진다(Jopok ha s Dumok)라고 표현할 수 있으며 사람은 생년월일을 가진다(Human has a Birthday)라고 표현할 수 있다.



이미 작성된 클래스를 다른 클래스에서 재사용하고자 할때 관계를 잘 분석한 후 어떤 기법을 쓸 것인가를 결정해야 한다. 두 클래스의 관계가 is a 라면 상속을 쓰는 것이 옳고 has a 관계라면 포함을 쓰는 것이 옳다. 사람과 학생의 관계는 is a 관계이므로 당연히 상속을 받아야 자연스럽다. 만약 코드 재사용만을 목적으로 한다면 사람과 학생의 관계도 좀 억지스럽기는 하지만 포함으로 구현할 수도 있다. 과연 그런지 예제를 만들어 보고 분석해 보자.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {       
        static void Main(string[] args)
        {
            Student kim = new Student("송재호", 25, 200561093);
            kim.Intro();
            kim.Study();
        }
       
    }
    class Human
    {
        protected string name;
        protected int age;
        public Human(string aName, int aAge)
        {
            name = aName;
            age = aAge;
        }
        public void Intro()
        {
            Console.WriteLine("이름:" + name);
            Console.WriteLine("나이:" + age);
        }
   
    }
    class Student
    {
        public Human h;
        protected int stNum;
        public Student(string aName, int aAge, int astNum)
        {
            stNum = astNum;
            h = new Human(aName, aAge);
        }
        public void Intro()
        {
            h.Intro();
            Console.WriteLine("학번:" + stNum);
        }
        public void Study()
        {
            Console.WriteLine("하늘 천 따지 검을 현 누를 황");
        }
    }
  
}



Student 는 Human을 상속받은 것이 아니라 내부에 Human 타입의 객체 H를 포함하고 있다. 포함을 하더라도 H 객체를 통해 Human의 코드를 재사용할수 있으므로 실행 결과는 동일하다. 그러나 결과로 만들어진 Student 객체의 실제 모양은 상속을 한 경우와 상당히 다르다.



상속받은 경우에는 물려받은 멤버를 이름으로 바로 액세스할 수 있지만 포함한 경우는 포함된 객체의 이름을 통해야만 한다. 또 상속은 protected 액세스 속성을 가지는 멤버를 자신의 멤버처럼 자유롭게 액세스할 수 있지만 포함은 그렇지 못하다. protected는 상속 관계에 있는 클래스끼리만 액세스를 허용하기 때문이다. 포함은 객체의 메서드를 호출하는 방법으로 오로지 재활용만 가능하지만 상속은 필요할 경우 재정의하여 원하는대로 뜯어 고칠수도 있다.



가장 큰 차이점은 다형성의 발휘 여부이다. 상속은 클래스의 계층을 형성함으로써 다형성의 이점이 있지만 포함은 코드를 한번 재사용하는 정도의 기능밖에 없다 . 일반적으로 포함은 단순히 클래스 타입의 객체가 필요할때 사용하며 상속은 그보다 훨씬 더 많은 고차원의 기법을 구사하고자 할떄 사용한다. 사람과 학생은 has a 관계가 아니므로 포함으로 구현하는 것은 옳지 않다. 위 예제는 대충 돌아가기는 하지만 더 이상의 확장이 힘들고 다형성을 활용할수 없다.







1.3 상속의 원칙

C#에서 상속을 하는 목적이나 효과는 C++, 자바 등의 다른 객체 지향 언어와 동일하다. 그러나 문법적으로는 많은 차이점이 존재하는데 특히 C++과 비교해보면 다른 점이 많다. public 상속만 지원하며 다중 상속을 지원하지 않고 상속없이 단독 클래스를 정의하는 것도 허용되지 않는다. 다른 언어들에 비해 C#의 상속은 어떤 특징을 가지는지 정리해 보자.



1. 구조체는 상속의 대상이 아니다. 다른 클래스나 구조체로부터 새로운 구조체를 파생할 수 없으며 구조체를 기반 클래스로 지정할 수도 없다. C++은 구조체를 일종의 클래스로 취급하지만 C#에서 구조체는 단순한 멤버들의 집합일 뿐이며 클래스와는 완전히 다른 타입이다. 가장 큰 차이점은 구조체는 값 타입이지만 클래스는 참조 타입이라는 점이며 따라서 관리하는 방법도 완전히 다르다. 상속이 필요한 타입은 구조체가 아닌 클래스로 선언해야 한다.



구조체가 상속의 대상이 아니므로 구조체의 멤버들에는 protected 액세스 지정자를 사용할 수 없다. protected 액세스 지정은 상속을 전제로 한 것이므로 구조체에는 사실 아무 의미가 없으며 private 와 똑같다고 할 수 있다. 또한 virtual이니 override니 하는 지정자도 구조체의 멤버에는 사용할 수 없다. 모두 상속 관계에서만 의미 있는 지정자이며 컴파일러는 쓸데 없는 지정자에 대해 매정하게 에러 처리해 버린다.



2. 모든 클래스는 단 하나의 기반 클래스만 가질 수 있다. C#은 다중 상속을 지원하지 않으므로 동시에 여러 개의 클래스로부터 상속을 받을 수는 없다. 다중 상속은 워낙 말썽 많은 기능이라. C#의 언어 스펙에서 아예 제외되었으며 이로 인해 C#의 문법 구조가 C++에 비해 상대적으로 단순하다. 단 인터페이스는 구현 상속이 아닌 메서드의 목록만 제공하므로 여러 개를 상속받을 수 있다.



또 모든 클래스는 반드시 하나의 기반 클래스를 가져야 한다. 클래스 선언문에 기반 클래스 지정이 생략되면 이때는 루트 클래스인 object로부터 상속받는다. 이 상속 과정은 눈에 보이지 않지만 컴파일러에 의해 자동으로 이루어진다. 지금까지 우리가 만들었던 모든 클래스는 암시적으로 object로부터 파생되었다. 아무 지정 없이 정의된 것 처럼 보이는 Human 클래스도 실제로는 다음과 같이 선언된다.



class Human : object{...}



물론 별도의 기반 클래스가 지정되어 있다면 이때는 지정한 클래스로부터 상속받는다. Student클래스는 Human으로부터 상속을 받았었다. 그러나 이 경우도 Student는 object로부터 파생되었다고 할수 있는데 기반 클래스인 Human이 object로부터 파생되었기 때문이다. 즉 C#의 모든 클래스는 직간접적으로 object로부터 파생된다. 이 규칙의 유일한 예외는 object 그 자신뿐이다.

다음에 상세하게 배우겠지만 object 클래스에는 타입 정보를 조사하거나 객체간의 상등성을 비교하는 기본적인 메서드들이 포함되어 있다. 루트 클래스에 이런 기능이 미리 프로그래밍되어 있기 때문에 C#의 모든 클래스는 별다른 지정이 없어도 자동으로 object의 기능을 상속받으며 그래서 우리는 모든 클래스에 대해 기본적인 동작을 할 수 있다. 또 object는 모든 클래스의 부모이므로 모든 클래스를 대표하는 타입으로 활용된다.



3. 한 클래스로부터 파생되는 클래스의 개수에는 제한이 없다. 얼마든지 많은 클래스를 상속받을 수 있다. 다음 예제는 Human으로부터 Teacher, Thief 클래스를 상속받는데 모두 Human에 대해 is a 관계가 성립한다. 선생님이나 도둑님이나 어쨋거나 둘 다 인간이기는 매 한가지다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {       
        static void Main(string[] args)
        {
            Teacher eng = new Teacher("박미영", 35, "영어");
            Thief kangDo = new Thief("야월담", 25, 3);
            eng.Intro();
            kangDo.Steal();
        }
       
    }
    class Human
    {
        protected string name;
        protected int age;
        public Human(string aName, int aAge)
        {
            name = aName;
            age = aAge;
        }
        public virtual void Intro()
        {
            Console.WriteLine("이름:" + name);
            Console.WriteLine("나이:" + age);
        }
   
    }

    class Teacher : Human
    {
        protected string subject;
        public Teacher(string aName, int aAge, string aSubject)
            : base(aName, aAge)
        {
            subject = aSubject;
        }
        public override void Intro()
        {
            Console.WriteLine("애들아 공부 열심히 해라");
        }
       
    }
    class Thief : Human
    {
        protected int career;
        public Thief(string aName, int aAge, int aCareer)
            : base(aName, aAge)
        {
            aCareer = career;
        }
        public void Steal()
        {
            Console.WriteLine("오늘은 어디를 털어 볼까?");
        }
    }
  
}



Human으로부터 파생된 Teacher는 담당 과목이 있고 가르친다는 동작을 할 수 있다. 선생님도 사람이므로 이름과 나이를 가지고 자기소개를 할 수 있음은 물론이다. Thief도 비록 나쁜 놈이기는 하지만 사람의 일종이며 절도 경력이라는 속성과 훔친다는 동작을 가진다. 실행 결과는 다음과 같다.



실행 결과 : 애들아 공부 열심히 해라

오늘은 어디를 털어 볼까?



이런 식이라면 사람의 일종인 모든 대상을 Human으로부터 파생시킬 수 있다. 남자, 여자, 꼬맹이, 어르신, 사기꾼, 군인, 장사꾼, 고객, 직원, 아줌마, 프로그래머, 신사, 숙녀, 깡패, 대통령 등등 하여튼 사람같이 생긴 모든 것들이 Human의 일종으로 정의된다. 논리적으로 is a 관계가 명확하게 성립하기 때문이다.



4. 파생의 깊이에는 제한이 없다. 파생 클래스가 또 다른 클래스의 기반 클래스로 사용될 수 있다. 파생된 클래스를 또 파생할 수 있고 그렇게 만든 클래스를 상속받아 또 다른 클래스를 정의할 수 도 있다. 다음 예제는 3단계로 상속한다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {       
        static void Main(string[] args)
        {
            Graduate park = new Graduate("박미영", 32, 9101223, "영문학");
            park.WriteThesis();
        }
       
    }
    class Human
    {
        protected string name;
        protected int age;
        public Human(string aName, int aAge)
        {
            name = aName;
            age = aAge;
        }
        public virtual void Intro()
        {
            Console.WriteLine("이름:" + name);
            Console.WriteLine("나이:" + age);
        }
   
    }

    class Student : Human
    {

        protected int stNum;
        public Student(string aName, int aAge, int aStNum)
            : base(aName, aAge)
        {
            stNum = aStNum;
        }
        public void Study()
        {
            Console.WriteLine("23은 6, 24 8,25 10, 26은12...");
        }
    }
    class Graduate : Student
    {
        protected string major;
        public Graduate(string aName, int aAge,int aStNum, string aMajor)
            : base(aName, aAge,aStNum)
        {
            major = aMajor;
        }
        public void WriteThesis()
        {
            Console.WriteLine("서론, 본론, 결론 어쩌고저쩌고");
        }
    }
  
}
 

Human은 이름과 나이만 가지는 아주 일반적인 사람을 표현한다. Human으로부터 파생된 Student는 학번을 가지며 공부를 할 수 있다. 파생 클래스인 Student로부터 대학원생을 표현하는 Graduate라는 새로운 클래스를 파생시킬수 있다. 대학원생은 학번이 있고 공부를 함은 물론 이고 전공이 있으며 논문을 쓰는 동작을 한다. 이 예제의 계층 관계를 그림으로 그려보면 다음과같다. 루트 클래스인 object까지 치면 4단계의 상속 계층이 만들어진다.



object > Human(이름,나이) > Student(이름,나이 + 학번, 공부한다) > Graduate(이름,나이,학번,공부한다 + 전공,논문을 쓴다)



각 단계의 아래, 위 클래스들은 정확하게 is a관계가 성립된다. 사람은 일종의 객체이고 학생은 사람이며 대학원생은 학생의 한종류이다. 이 그림에서 아래쪽으로 내려올수록 속성과 동작이 점점 더 늘어나며 그만큼 더 특수한 대상을 표현한다. 특수하다는 것은 속성이 많아 대상을 자세하게 기술할 수 있으며 행동도 더 구체적이라는 의미이다. 반대로 위쪽으로 올라갈수록 더 일반적이고 포괄적인 대상을 표현한다. 파생의 단계가 깊어질수록 클래스는 더욱 더 특수화됨을 알 수 있다.



임의의 클래스로부터 새로운 클래스를 만들 수 있으므로 기반, 파생 또는 부모, 자식 이라는 개념은 어디까지나 상대적이다. 위 계층도에서 Student는 Human의 자식이기도 하고 동시에 Graduate 의 부모이기도하다. 사람끼리의 관계와 똑같은데 그렇게 보면 Human은 Graduate의 할아버지가 되는 셈이다. 계층에서 더 위쪽에 있는 모든 클래스를 통칭하여 선조라고 하며 더 아래쪽에 있는 클래스를 후손이라고 한다. 예제의 실행 결과는 다음과 같다.



실행 결과 : 서론, 본론, 결론 어쩌고 저쩌고



Main에서 Graduate의 객체 Park을 하나 생성하고 WriteThesis 메서드를 호출했으므로 논문을 쓰는 동작이 화면으로 출력될 것이다. Graduate 클래스는 여러 선조 클래스로부터 멤버들을 물려받았으므로 Park 객체가 생성될 때는 모든 선조 클래스의 생성자가 순서대로 호출된다. 이 객체의 생성자가 호출되는 과정은 다음과 같다. 굉장히 복잡한 과정을 거쳐 객체가 생성되는데 다행스럽게도 이 과정은 컴파일러가 알아서 처리한다. 게다가 생성자의 코드는 대부분 인라인화 되므로 여러 단계의 생성자를 호출하더라도 속도를 염려하지 않아도 된다.



new Graduate("박미영",32, 9101223, "영문학");

▽   생성자 호출                  △전공 초기화 후 리턴

public Graduate(string aName, int aAge, int astNum, string aMajor)

▽부모의 생성자 호출    △ 학번 초기화 후 리턴

public Student(string aName, int aAge, int aStNum)

▽ 부모의 생성자 호출  △ 이름, 나이 초기화 후 리턴

public Human(string aName, int aAge)

▽부모의 생성자 호출  △리턴

public object()



상속의 횟수와 깊이에 제한이 없기 때문에 실제 프로젝트에서는 아주 복잡한 트리 모양의 클래스 계층이 만들어진다. 클래스가 많아지면 계층은 굉장히 거대해질 수 있다. 닷넷 라이브러리의 클래스 계층은 무시무시할 정도로 방대해서 전지에 그려도 다 못 그릴 정도다. 클래스는 다수의 함수들을 하나의 범주에 캡슐화하는 도구인데 이 클래스들도 무수히 많아질 수 있는 것이다.



그래서 C#은 네임스페이스라는 것을 만들고 클래스들을 기능이나 용도에 따라 분류해서 정의해 놓은 것이다. 다행히 사람은 계층 구조에 아주 익숙하기 때문에 계층을 잘 나눠 놓으면 아무리 양이 많아도 원하는 대상을 쉽게 찾을 수 있다. 대한민국에 무수히 많은 주소가 있지만 시구동 등의 주소 체계를 잘 만들어 놓으면 주소만으로 원하는 목적지를 정확하게 찾을 수 있는 것과 같다.



5. 클래스끼리 상호 파생은 안된다. 즉 나의 자식이 부모가 될수는 없다는 얘기이다. 다음 선언문은 에러 처리된다.

class A : B{}

class B : A{}



A가 B를 상속받았는데 B는 A를 상속받으므로 A가 간접적으로 자신을 다시 상속받은 것이다. 이렇게 되면 두 클래스의 크기는 무한대가 되어 버린다. 따로 설명하지 않아도 직관적으로 이해할수 있는 당연한 규칙이라 어쩌면 시시하다고 생각할 지도 모르겠다. 그렇다면 다음 선언문은 어떨까?

class A

{

   class B:A{}

}                   



직접 코드를 작성해 보고 컴파일해 본 후 이유에 대해 생각해보아라 사실 이런 경우는 거의 없다. 고할 수 있으므로 중요한 규칙은 아니다.
