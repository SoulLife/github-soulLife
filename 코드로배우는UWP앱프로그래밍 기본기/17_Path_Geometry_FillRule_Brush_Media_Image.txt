※ Path

앞에서 언급한 Ellipse, Line, Rectangle, Polygon 및 Polyline 등의 그래픽 요소들은 본질적으로 Shape에 대한 기하(Geometry) 정보를 가지고 있는 객체들입니다. 그러나 Path 요소 객체는 Geometry 객체 요소 타입의 데이터 속성을 사용해 모양을 명시적으로 표현합니다. 



※ Geometry

Path 요소에 RectangleGeometry 요소를 함께 사용해 사각형을 그릴수 있습니다. 동일한 방법으로 EllipseGeometry나 LineGeometry등의 요소를 사용해 타원이나 선을 그릴 수 있고 CombinedGeometry, GeometryGroup 및 PathGeometry등의 요소를 함께 사용하면 다각형 및 다중선과 같은 더 복잡하고 정교한 그래픽을 그릴수 있습니다. Path.Data는 Path 요소에 Data를 제공하는 속성 요소입니다. 



XAML 코드 조각

    <Path Fill="Green" Stroke="Black" StrokeThickness="10" StrokeLineJoin="Round">
        <Path.Data>
            <RectangleGeometry Rect="0, 0, 100, 50" />
        </Path.Data>
    </Path>



※ GeometryGroup

Path 요소에 GeometryGroup 요소를 함께 사용해 여러 개의 도형을 하나로 묶어서 그릴 수 있습니다. 특이한 것은 도형을 GeometryGroup으로 묶지 않은 첫 번째 코드에서는 각각의 도형이 독립적으로 동작하여 Fill 속성이 적용되는데, GeometryGroup 으로 묶은 두 번째 코드에서는 두 개의 도형이 하나의 도형으로 인식되어 안쪽의 사각형에는 Fill 속성이 적용되지 않습니다. 이는 FillRule의 속성이 기본값인 EvenOdd이기 때문입니다. FillRule을 이해하기 위해서는 그다음 예제를 보기 바랍니다. 




XAML 코드 조각

    <StackPanel>
    <Path Fill="Green" Stroke="Black" StrokeThickness="10" StrokeLineJoin="Round">
        <Path.Data>
            <RectangleGeometry Rect="0, 0, 100, 50" />
        </Path.Data>
    </Path>
    <Path Fill="Green" Stroke="Black" StrokeLineJoin="Round">
        <Path.Data>
            <RectangleGeometry Rect="10, 10, 60, 30" />
        </Path.Data>
    </Path>
    <Path Fill="Green" Stroke="Black" StrokeLineJoin="Round">
        <Path.Data>
            <GeometryGroup>
                <RectangleGeometry Rect="0,0,100,50" />
                <RectangleGeometry Rect="10,10,60,30" />
            </GeometryGroup>
        </Path.Data>
    </Path>
    </StackPanel>




※ FillRule

FillRule 속성으로 다각형의 채우기 효과를 다르게 지정할 수 있습니다. FillRule 속성을 EvenOdd로 지정하는 경우 닫힌 영역이 바탕과 홀수 번 겹치면 지정된 색으로 채워주고, 짝수 번 겹치면 채우기를 하지 않습니다. FillRule 속성을 Nonzero로 지정하는 경우 모든 닫힌 영역을 지정된 색으로 채워주고, 열린 영역에는 채우기를 하지 않습니다. FillRule 속성을 지정하지 않으면 다음 두 예제의 두 번째 코드와 같이 EvenOdd가 기본값으로 사용됩니다. 




XAML 코드 조각
   <StackPanel>    
        <Path Fill="Green" Stroke="Black" StrokeLineJoin="Round">
            <Path.Data>
                <GeometryGroup>
                    <RectangleGeometry Rect="0,0,100,50" />
                    <RectangleGeometry Rect="10,10,60,30" />
                </GeometryGroup>
            </Path.Data>
        </Path>

        <Path Fill="Green" Stroke="Black" StrokeLineJoin="Round">
            <Path.Data>
                <GeometryGroup FillRule="EvenOdd">
                    <RectangleGeometry Rect="0,0,100,50" />
                    <RectangleGeometry Rect="10,10,60,30" />
                </GeometryGroup>
            </Path.Data>
        </Path>

        <Polygon Stroke="Red" Points="20,20 20,110 80, 110 80, 5 60, 5 60, 90 35, 40 110, 40 110, 20" Fill="Green" FillRule="Nonzero" />

        <Polygon Stroke="Red" Points="20, 20 20, 110 80, 110 80, 5 60, 5 60, 90 35, 40 110,40 110, 20" Fill="Green" FillRule="EvenOdd" />

    </StackPanel>




※ PathGeometry로 다각선과 다각형 그리기

Path 요소에 PathGeometry 요소와 PolyLineSegment 요소를 사용해 다중선과 다각형을 그릴수 있습니다. PathFigure 요소로 시작점을 지정한 후 PathFigure 요소의 IsClosed 속성을 True로 지정하면 다각형을 그리고 False로 지정하면 다각선을 그립니다. PolyLineSegment 요소는 Points 속성에 시작점을 제외한 값을 지정합니다. 이와 유사한 방법으로 ArcSegment, BezierSegment, QuadraticBezierSegment, PolyBezierSegment, PolyQuadraticBezierSegment등의 Segment 객체 요소 유형을 Geometry 객체 요소 유형과 함꼐 사용하면 더 복잡하고 정교한 그래픽을 그릴수 있습니다. 




XAML 코드 조각
   <StackPanel>
        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="0,0" IsClosed="False">
                        <PolyLineSegment Points="0,50 50, 50"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="0,0" IsClosed="True">
                        <PolyLineSegment Points="0, 50 50, 50" />
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>
    </StackPanel>





※ PathGeometry로 호 그리기

다음 예제처럼 Path 요소에 PathGeometry 요소와 ArcSegment 요소를 사용하면 호를 그릴 수 있습니다. PathFigure 요소의 StartPoint 속성으로 시작점을 지정하고, ArcSegment 요소의 Point 속성으로 종료점을 지정했습니다. 그리고 Size 속성으로 지정된 크기의 타원을 잘라 시계 방향 혹은 반시계 방향의 타원을 호로 그리는 것입니다. 여기서 호의 크기는 Width 속성이나 Height 속성과는 달리 지름이 아닌 반지름의 크기입니다. 이해하기 쉽도록 반원 형태의 호를 만들어 설명했습니다. 



XAML 코드 조각

   <StackPanel>
        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="50,0" IsClosed="True">
                        <ArcSegment Point="50,100" Size="50,50" SweepDirection="Clockwise"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="50,0" IsClosed="True">
                        <ArcSegment Point="50,100" Size="50,50" SweepDirection="Counterclockwise"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>
        
    </StackPanel>

다음 예제를 보면 시작점과 종료점의 순서를 바꾸면 시계 방향과 반시계 방향이 정반대로 변한다는 것을 보여줍니다. 



XAML 코드 조각

    <StackPanel>
        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="50,100" IsClosed="True">
                        <ArcSegment Point="50,0" Size="50,50" SweepDirection="Clockwise"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="50,100" IsClosed="True">
                        <ArcSegment Point="50,0" Size="50,50" SweepDirection="Counterclockwise"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

    </StackPanel>

다음 예제는 타원의 시작점과 종료점의 위치를 원표면의 위치로 변형해 호를 그릴수 있다는 것을 보여줍니다. 시작점과 종료점의 위치를 정하기가 매우 어렵습니다만 Size를 지정할 때 원이 아닌 타원을 그리도록 하면 더 다양한 형태의 호를 그릴수 있습니다. 



XAML 코드 조각

   <StackPanel>
        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="80,10" IsClosed="True">
                        <ArcSegment Point="80,90" Size="50,50" SweepDirection="Clockwise" IsLargeArc="False"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

        <Path Stroke="Red">
            <Path.Data>
                <PathGeometry>
                    <PathFigure StartPoint="80,10" IsClosed="True">
                        <ArcSegment Point="80,90" Size="50,50" SweepDirection="Counterclockwise" IsLargeArc="True"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

    </StackPanel>




※ 알아두기
비주얼 스튜디오의 Grid 기능이나 모눈종이를 사용한다고 해도 호를 그리는 예제에서 시작점, 종료점, 반지름의 크기, 호의 방향등을 지정하는 것은 어려운 작업입니다. 그래서 마이크로소프트 에서는 Blend for Visual Studio라는 디자인 도구를 만들어 제공하고 있습니다. 호를 그리는 것만이 아니라 BezierSegment, QuadraticBezierSegment, PolyBezierSegment, PolyQuadraticBezierSegment등의 Segment 유형으로 Path를 그려야 하는 상황이 오면 XAML 코드로 그리지 말고 Blend for Visual Studio로 그린 다음 제공되는 XAML 코드를 사용하기 바랍니다. 






※ Brush

XAML 은 화면에 모양(Shape)을 그릴수 있는 다양한 Brush와 Pen을 제공합니다. Pen에 대해서는 앞에서 설명했으니 이번에는 Brush를 알아보겠습니다



※ SolidColorBrush

색상의 이름과 색상을 표현하는 16진수로 표현되는 SolidColorBrush 혹은 Resource로 색상을 직접 정의하는 SolidColorBrush를 사용해 모양을 그릴수 있습니다. 



XAML 코드 조각


    <StackPanel>
        <!-- 첫 번째 코드-->
        <Ellipse Width="100" Height="50" Fill="Blue" Stroke="Red" StrokeThickness="5" />

        <!-- 두 번째 코드-->
        <Ellipse Width="100" Height="50" Fill="#0000FF" Stroke="#FF0000" StrokeThickness="5" />

        <!-- 세 번째 코드-->
        <Ellipse Width="100" Height="50" Fill="#FF0000FF" Stroke="#FFFF0000" StrokeThickness="5" />

        <!-- 네 번째 코드-->
        <Ellipse Width="100" Height="50" Fill="#880000FF" Stroke="#88FF0000" StrokeThickness="5" />

        <!-- 다섯 번째 코드-->
        <TextBlock Width="100" Height="50" Text="타원의 뒤에 있는 문자열" TextWrapping="Wrap" />
        <Ellipse Width="100" Height="50" Fill="#880000FF" Stroke="#88FF0000" StrokeThickness="5" />

        <!-- 여섯 번째 코드-->        
        <Ellipse Width="100" Height="50" Fill="#000000FF" Stroke="#00FF0000" StrokeThickness="5" />

        <!-- 일곱 번째 코드-->
        <StackPanel>
            <StackPanel.Resources>
                <SolidColorBrush x:Key="strokeBrush" Color="Red" />
            </StackPanel.Resources>

            <Ellipse Width="100" Height="50" Stroke="{StaticResource strokeBrush}" StrokeThickness="5" >
                <Ellipse.Fill>
                    <SolidColorBrush Color="Blue" />
                </Ellipse.Fill>
            </Ellipse>
        </StackPanel>
        <!--혹은 -->
        <StackPanel>
            <StackPanel.Resources>
                <SolidColorBrush x:Key="fillBrush" Color="Blue" />
                <SolidColorBrush x:Key="strokeBrush" Color="Red" />
            </StackPanel.Resources>

            <Ellipse Width="100" Height="50" Stroke="{StaticResource strokeBrush}" StrokeThickness="5" Fill="{StaticResource fillBrush}" />
        </StackPanel>
        
    </StackPanel>


첫 번째 코드는 Blue나 Red와 같이 색상의 이름을 직접 사용하는 방식입니다. 색상의 영어 이름으로 직접 코딩하거나 비주얼 스튜디오의 편집 도움 기능에서 알려주는 사용가능한 색상 중에서 선택하면 됩니다. 

두번 째 코드는 "#0000FF"나 "#FF0000"와 같이 색상의 3원소의 적용 정도를 00~FF까지 16진수 값으로 표현하는 방식입니다. 색상은 RGB 즉 Red Green Blue 의 순서를 따르기 때문에 #뒤의 첫 번째 바이트는 Red, 두번째 바이트는 Green, 세 번째 바이트는 Blue를 의미합니다. 

따라서 "#FF0000"는 Red가 되고, "#00FF00"는 Green이 되고 "#0000FF"는 Blue가 됩니다. 그리고 모든 색상의 정도를 최솟값인 00으로 표현한 "#000000"는 Black이 되고 모든 색상의 정도를 최댓값인 FF으로 표현한 "#FFFFFF"는 White가 됩니다. 


세번 째 코드부터 여섯 번째 코드까지는 "#FF0000FF"나 "#FFFF0000"와 같이 세번째 예제의 표현 방식에 Alpha값이라고 불리는 Opacity(불투명도)를 00~FF까지 16진수 값으로 추가해 표현하는 방식입니다. 이때 색상은 ARGB 즉 Alpha Red Green Blue 의 순서를 따르기 때문에 #뒤의 첫 번째 바이트가 Alpha값을 의미하고 뒤의 값들은 각각 순서대로 Red, Green 및 Blue를 각각 의미합니다. 그래서 "#FF"로 시작하는 4바이트의 ARGB 색상 값은 불투명도가 가장 높아 색상을 정확히 표현해주고, 그 중간 값들은 반투명한 상태로 나타납니다. 그리고 반투명한 모양 뒤에 다른 모양이 있으면 투명도만큼 비쳐서 나타납니다. "#00"로 시작하는 4바이트의 ARGB 색상 값은 불투명도가 가장 낮아 아무것도 나타나지 않습니다. 

일곱 번째 코드는 SolidColorBrush를 Resource로 지정한 방식입니다. Fill 속성에 단일 값을 지정하는 것이 아니고 SolidColorBrush 요소를 지정해야 하기 때문에 Ellipse.Fill 속성 요소를 사용했습니다. 그런데 Ellipse.Stroke 속성 요소는 제공되지 않으므로 어쩔 수 없이 SolidColorBrush를 Resource로 정의해 사용했습니다. Color 속성에 값을 지정할 때 편의상 색상의 이름을 직접 지정했는데 RGB 혹은 ARGB 형태로 색상을 지정할 수도 있습니다. 4장 기본 컨트롤 요소들에서 설명한 ColorPicker 컨트롤을 사용하면 더욱 쉽게 필요한 색상의 이름과 RGB 혹은 ARGB 값을 알아낼수 있습니다. 




※ LinearGradientBrush

LinearGradientBrush로 넘어가기 전에 채우기 좌표(Fill Coordinate)를 이해해야 합니다. 다음 사각형은 채울 영역의 좌측 상단 좌표가 0,0이고 우측 상단 좌표가 1,0 좌측 하단 좌표가 0,1 우측 하단 좌표가 1,1입니다. 통상적으로 화면의 가로를 나타내는 X 좌표를 먼저 기술하고 세로를 나타내는 Y 좌표를 나중에 기술하니 혼동될것이 없습니다. 그리고그 사이의 좌표들은 0에서 1사이의 소주검 값을 사용해 0.5 나 0.7 등으로 표현할 수 있습니다. 

다음에 나올 예제들은 색상이 선형으로 서서히 변하는 선형 그라데이션 효과가 있는 LinearGradientBrush의 예입니다. 



XAML 코드 조각

    <StackPanel>
       <!-- 첫번째 코드 조각 -->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush>
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        <!-- 두번째 코드 조각 -->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        <!-- 세번째 코드 조각 -->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="1,1" EndPoint="0,0">
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        <!-- 네번째 코드 조각 -->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>
        <!-- 혹은-->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>
        <!-- 다섯 번째 코드-->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        <!--혹은-->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                    <GradientStop Color="White" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        <!-- 여섯 번째 코드-->
        <Rectangle Height="100" Width="100">
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                    <GradientStop Color="Red" Offset="0" />
                    <GradientStop Color="Orange" Offset="0.17" />
                    <GradientStop Color="Yellow" Offset="0.34" />
                    <GradientStop Color="Green" Offset="0.5" />
                    <GradientStop Color="Blue" Offset="0.67" />
                    <GradientStop Color="Indigo" Offset="0.84" />
                    <GradientStop Color="Purple" Offset="1" />                    
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        
    </StackPanel>


첫 번째 코드와 같이 StartPoint속성과 EndPoint 속성의 지정을 생략하여 채우기 좌표를 지정하지 않으면 그라데이션의 시작 위치와 종료 위치가 기본값으로 설정되어 좌측 상단(0,0)부터 우측 하단(1,1)까지 대각선 그라데이션이 만들어집니다. 그라데이션에 사용할 색상은 GradientStop 요소의 Color속성으로 지정하는데, 앞의 GradientStop요소가 시작 색상이고 뒤의 GradientStop 요소가 종료 색상입니다. 

이 예제에서는 하얀색이 서서히 파란색으로 변화하는 것을 컨트롤 외관 조각에서 확인할 수 있습니다. 서서히 변하는 그라데이션 효과의 시작 위치와 종료 위치는 GradientStop 요소의 Offset 속성으로 지정하는데 0은 시작 위치, 1은 종료 위치를 나타냅니다. 물론 0과 1사이의 값을 사용하여 채우기를 수행할 요소의 전체가 아니라 일부분에서만 그라데이션 효과가 적용되게 할 수도 있습니다. Rectangle.Fill 속성 요소는 Rectangle의 Fill 속성을 지정한다는 의미입니다. 

두 번째 코드는 StartPoint 속성과 EndPoint 속성으로 그라데이션 효과를 적용할 시작 위치(0,0)와 종료위치(1,1)를 명시적으로 지정한 것으로 이를 제외하면 첫 번째 예제와동일합니다. 시작 위치와 종료 위치를 명시적으로 지정한 두 번째 코드가 더 좋은 코드입니다. 

세 번째 코드는 두 번째 예제의 시작 위치와 종료 위치를 바꾼 것입니다. 우측 하단 (1,1) 부터 좌측 상단(0, 0)까지 두 번째 예제와 반대 방향의 대각선 그라데이션이 만들어집니다. 

네 번째 코드는 시작 위치와 종료 위치의 Y좌표를 고정하고 X좌표를 각각 0과 1로 지정했습니다. 이렇게 지정하면 수평 방향의 그라데이션이 만들어집니다. 그라데이션의 방향을 반대로 하려면 X좌표의 0과 1값의 순서만 바꾸면 됩니다. 이때 Y좌표를 0이나 1로 고정시키는 것이 특이한데 한 변만 그라데이션 처리를 하는 것은 그라데이션이 너무 얇게 반영되니 수평 방향의 그라데이션에서 Y좌표는 의미를 가지지않고 수직 방향의 그라데이션에서는 X좌표가 의미를 가지지 않게 됩니다. 


다섯 번째 코드는 네 번째 코드와 반대로 시작 위치와 종료 위치의 X좌표를 고정하고 Y좌표를 각각 0과 1로 지정했습니다. 이렇게 지정하면 수직 방향의 그라데이션이 만들어집니다. 그라데이션의 방향을 반대로 하려면 Y좌표의 0과 1값의 순서만 바꾸면 됩니다. 수직 방향의 그라데이션을 만들기 위하여 이번에는 X좌표를 0이나 1로 고정했습니다. 


여섯 번째 코드는 무지개 색상을 채우기 할 영역의 하단에서 상단으로 이동하는 수직 방향의 그라데이션을 만들어 보았습니다. 수직 방향의 그라데이션이니 X좌표를 고정시키면 됩니다. 이 예제에서는 0으로 고정했습니다. 무지개의 방향을 하단에서 상단으로 하기 위하여 StartPoint의 Y좌표를 1로 하고 EndPoint의 Y좌표를 0으로 했습니다. 그리고 GradientStop 요소를 무지개 색상의 수인7개를 배치하고 각각의 Color 속성을 빨주노초파남보(Red Orange Yellow Green Blue Indigo Purple)로 지정하고 Offset값은 0부터 1을 6등분한 값인 0.17을 더해가면서 지정했습니다. 

앞에서 설명한 Brush외에 ImageBrush도 있는데 이어질 5.2 Media절에서 Image요소와 함께 설명하겠습니다. 





2. Media

이번에는 이미지(Image), 오디오(Audio), 동영상(Video)등의 멀티미디어(MultiMedia)와 관련하여 XAML이 제공하는 기능들을 살펴보겠습니다. XAML Controls Gallery에서도 Media를 별도의 분류 항목으로 구분해 설명하고 있기 때문에 이 책과 앱을 상호 참조하며 학습할 수 있도록 5장 기본 컨트롤 요소들을 설명할 때와 동일한 구조로 설명하겠습니다. 



※[Media] > [Image]

UWP에서는 BMP, JPEG, PNG, TIFF, GIF 및 ICO 등의 이미지 형식을 지원하는데 이 이미지는 Image 요소나 Shape에 색을 채워넣기 위한 Brush로 활용됩니다. 

다음 첫 번째 예제는 Image 요소를 사용해 이미지를 보여주는 것이고 두 번째 예제는 Rectangle 요소에 ImageBrush를 Fill 속성으로 지정하여 이미지를 보여주는 것입니다. 이미지의 위치는 각각 Source속성과 ImageSource 속성에 지정했습니다. 그런데 코드를 실행해서 화면을 보니 사진이 화면 전체를 채웠습니다. 장치 독립적인 픽셀 단위 절에서 Layout 요소 안에 있는 컨트롤에 크기를 지정하지 않으면 상위 Layout 전체를 채운다고 설명했었습니다. 심지어 다음 두 번째 예제의 경우는 이미지의 비율이 깨져서 펑퍼짐해 보이기까지 합니다. 


<Image Source="/Assets/lock.png"/>


<Rectangle>
	<Rectangle.Fill>
		<ImageBrush ImageSource="/Assets/lock.png"/>
	</Rectangle.Fill>
</Rectangle>


다음 첫 번째 예제와 두 번째 예제는 Image 요소를 사용하여 이미지를 보여주거나 Rectangle 요소에 ImageBrush를 Fill 속성으로 지정하여 이미지를 보여주는 것이 기존 예제와 동일합니다. 그런데 Source와 ImageSource 속성에 지정된 값을 보니 프로젝트의 폴더 내 위치가 아니라 인터넷(Internet)상의 주소를 지정하는 것이 다릅니다. 


다음 두 번째 예제는 위의 두 번째 예제와 마찬가지로 이미지의 비율이 깨져서 펑퍼짐해 보입니다. 아무튼 XAML 에서는 프로젝트 폴더 내에 저장된 이미지와 인터넷 공간상에 저장된 이미지를 기술적으로는 모두 보여줄수 있습니다. 다만 인터넷에 저장된 이미지를 사용할 때 저작권법상에 보호를 받는 이미지라면 소유권자에게 사전 승인을 받고 사용해야 합니다. 


<Image Source="https://m.media-amazon.com/images/M/MV5BZDRmNjYwZDkt0TYxZi00MTdlLWI5ZjYtYWU4MDE5MDc5NGM3L2ltYWdlXkEyXkFqcGdeQXVyNjQzNDI3NzY@._V1_SX300.jpg"/>




<Rectangle>
	<Rectangle.Fill>
		<ImageBrush ImageSource="https://m.media-amazon.com/images/M/MV5BZDRmNjYwZDkt0TYxZi00MTdlLWI5ZjYtYWU4MDE5MDc5NGM3L2ltYWdlXkEyXkFqcGdeQXVyNjQzNDI3NzY@._V1_SX300.jpg" />
	</Rectangle.Fill>
</Rectangle>


이미지를 사용하는 XAML 코드 예제의 Image 요소와 ImageBrush 요소에 Stretch 속성을 None으로 지정하면 다음과 같이 이미지를 실제 크기로 보여줄수 있습니다. 이와 같이 이미지가 화면에 보이는 형태는 Stretch 속성으로 제어할 수 있습니다. 

Stretch 속성은 None(없음), Fill(채우기), Uniform(균등), UniformToFill(채울때까지 균등)등 4개의 값 중에서 선택할 수 있습니다. ImageBrush의 기본 값은 Fill로 이미지를 상위 요소의 크기에 맞게 꽉 채우는데 이미지가 펑퍼짐해지거나 반대로 홀쭉해질수 있습니다. 

Image 요소의 기본값은 Uniform 으로 가로와 세로 중 먼저 상위 요소의 크기와 같아질때까지 동일한 비율로 이미지의 크기를 조정합니다. 대신 가로의 좌우에 혹은 세로의 항하에 여백이 생겨날수 있습니다. 이 책의 예제에서는 프로젝트 폴더에 저장된 이미지와 인터넷상에 저장된 이미지 모두 좌우 여백이 생겨났습니다. 


<Image Source="/Assets/lock.png" Stretch="None"/>

혹은

<Rectangle>
	<Rectangle.Fill>
		<ImageBrush ImageSource="/Assets/lock.png" Stretch="None" />
	</Rectangle.Fill>
</Rectangle>


다음 예제와 같이 Stretch 속성이 UniformToFill이면 통상적으로 이미지의 크기가 상위 Layout 요소의 크기를 초과하게 됩니다. Stretch 속성이 Uniform 일 때는 이미지가 상위 Layout의 크기에 맞추어 동일한 비율(Uniform)로 커지다가 가로와 세로 중한쪽이 먼저 상위 Layout 의 크기에 도달하면 커지는 것을 중단하지만 Stretch 속성이 UniformToFill 일 때에는 가로와 세로 모두 상위 Layout 의 크기에 도달할 때까지 동일한 비율로 커지기 때문입니다. 결국 가로와 세로 중 더 많이 확장된 이미지는 잘려나가(Crop)화면에 보이지 않게 됩니다. 

그리고 이 예제에서 또 한가지 특이한 것은 Image 요소에는 HorizontalAlignment="Center" VerticalAlignment="Top" 속성을 추가하고 ImageBrush요소에는 AlignmentX="Center" AlignmentY="Top" 속성을 추가한 것입니다. 


이는 두 코드의 결과를 동일하게 만들기 위하여 이미지의 가로와 세로 배치를 명시적으로 지정한 것입니다. 요소별로 배치 속성이 다른것 뿐만 아니라 같은 기능을 하는 속성의 이름이 이처럼 서로 다른 것도 개발자들을 어렵게 만듭니다. 역시 일관성은 지키기가 참 어렵습니다. 자연어에서 생기는 문제점이 프로그래밍 언어에서도 동일하게 생긴다는 것이 매우 재미있게 느껴지기도 합니다. 


<Image Source="/Assets/lock.png" Stretch="UniformToFill" HorizontalAlignment="Center" VerticalAlignment="Top" />

혹은

<Rectangle>
	<Rectangle.Fill>
		<ImageBrush ImageSource="/Assets/lock.png" Stretch="UniformToFill" AlignmentX="Center" AlignmentY="Top"  />
	</Rectangle.Fill>
</Rectangle>