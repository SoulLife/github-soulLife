※ Storyboard

이번에는 이미지가 서서히 나타나는 것을 Storyboard라는 요소와 DoubleAnimation이라는 Animation요소의 결합을 통해 구현해보겠습니다. Storyboard는 개념적으로 설명하기 쉽지 않지만 Animation의 개념을 아는 상태에서 앞선 예제들과 비교해보면 어렵지 않게 이해할수 있습니다. 


Storyboard는 Animation을 Story즉 이야기처럼 정의하는 요소입니다. 먼저 XAML 코드 조각을 보면 Storyboard를 Resource로 미리 정의해 놓는 것을 볼 수 있습니다. 그리고 Storyboard는 DoubleAnimation이라는 Animation으로 구성되어 있습니다. 


DoubleAnimation요소는 Animation하는 속성이 숫자일 경우 사용하는데 이미지가 서서히 나타나는 효과를 Opacity값을 0에서 1까지 변화시키는 방법으로 구현하기 때문에 적절한 선택입니다. 

Storyboard.TargetName 속성은 Animation을 적용할 요소의 이름으로 하단에 정의한 Image 요소의 이름인 lockImage로 지정했고 Storyboard.TargetProperty는 Animation을 수행할 속성의 이름인 Opacity로 지정했습니다. 

문법상 편리한 것은 From과 To 를 명시적으로 지정할 수 있다는 것입니다. 앞의 예제들에서는 암시적으로 지정하는 경우가 많아 응용 프로그램 개발자가 직관적으로 파악하는 것에 애를 먹어야 했습니다. 

Duration은 앞에서 설명한 것과 동일하고 RepeatBehavior는 여기서 처음 나왔는데 이름이 의미하는 것과 같이 Animation을 반복할 것인지를 지정합니다. 여기서는 Animation을 반복하기 위해 Forever로 값을 지정했습니다. 값을 별도로 지정하지 않으면 한 번만 Animation을 수행합니다. 

이 예제에서 어려운 것은 Animation의 동작을 Storyboard라는 Resource에 정의한 후 Animation이 적용될 요소와 Storyboard.TargetName 속성을 사용해 연결하는 부분입니다. 어려운 또 한가지 이유는 이렇게 지정해도 Animation이 바로 시작되지 않는다는 것입니다. 코드 비하인드에 기술된 이미지의 Loaded 이벤트 핸들러의 lockImage.AnimationStoryboard.Begin(); 문장과 같이 Animation을 시작하라는 명령을 실행해야 비로소 Animation이 시작됩니다. 코드 비하인드에서 lockImageAnimationStoryboard라는 이름의 Resource로 정의된 Storyboard 객체의 Begin() 메소드로 Animcation을 실행하라는명령을 내리는 것을 볼수 있습니다. Image 요소의 정의는 Storyboard를 Resource로 정의하고 ANimation의 시작을 코드 비하인드 로직으로 구현함에 따라 매우 단순해졌습니다. 


반복해 실행 중인 Animation을 중단하기 위해서는 Animation을 중단시킬 적절한 이벤트를 찾아 Begin() 메소드 대신 Stop() 메소드를 실행하면 됩니다. 같은 방법으로 Pause() 메소드를 실행하면 Animation을 잠시 중단하고 Resume() 메소드를 실행하면 다시 시작합니다. 



XAML 코드 조각

        <Border Background="Gray" Width="100" Height="100">
            <Border.Resources>
                <Storyboard x:Name="lockImageAnimationStoryboard">
                    <DoubleAnimation Storyboard.TargetName="lockImage" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:5" RepeatBehavior="Forever" />
                </Storyboard>
            </Border.Resources>

            <Image x:Name="lockImage" Source="/Assets/LockScreenLogo.scale-200.png" Height="100" Width="100" Loaded="lockImage_Loaded" />
        </Border>


코드 비하인드 조각

        private void lockImage_Loaded(object sender, RoutedEventArgs e)
        {
            lockImageAnimationStoryboard.Begin();
        }






※ ColorAnimation

Animation의 종류로 DoubleAnimation외에 ColorAnimation이 있습니다. 다음 예제에서는 Storyboard의 ColorAnimation을 이용하여 요소의 배경색을 서서히 변화시키는 앞의 예제를 다시 구현해보았습니다. 

Animation을 적용할 속성으로 (Button.Background).(SolidColorBrush.Color)와 같이 표현된 것 외에는 이미 설형한 것을 가지고 금방 이해할수 있을 것입니다. (Button.Background)가 버튼의 배경색 속성이고(SolidColorBrush.Color)가 배경색의 색상을 의미하는 것을 직관적으로 알 수 있는데 점(.)으로 구분해 기술하는 이문법은 UWP의 XAML이 원하는 형태라고 이해하면 됩니다. 

컨트롤 외관 조각을 보니 앞에서 언급한 BackgroundTransition 예제와 달리 버튼 주변에 회색 테두리가 나타나지 않는 것을 발견할 수 있습니다. 버튼처럼 보이지는 않지만 버튼으로서의 기능은 잘 동작합니다. 



XAML 코드 조각

    <StackPanel>
        <StackPanel.Resources>
            <Storyboard x:Name="colorAnimationButtonStoryboard">
                <ColorAnimation Storyboard.TargetName="colorAnimationButton" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="Gray" To="Blue"
                                Duration="0:0:5"/>
            </Storyboard>
        </StackPanel.Resources>

        <Button x:Name="colorAnimationButton" Width="100" Height="100" Content="Blue Button" Loaded="colorAnimationButton_Loaded" />

    </StackPanel>



코드 비하인드 조각

        private void colorAnimationButton_Loaded(object sender, RoutedEventArgs e)
        {
            colorAnimationButtonStoryboard.Begin();
        }



※ 알아두기
위의 코드에서 왜(Button.Background).(SolidColorBrush.Color)와 같은 표현을 사용했는지는 XAML 코드의 문법을 생각해보면 알 수 있습니다. 먼저 버튼을 갈색으로 나타나게 하는 XAML 코드를 생각해봅시다. 먼저 다음과 같이 아주 간단하게 코딩할 수 있습니다. 

<Button Width="100" Height="100" Margin="10" Background="Gray" />

그런데 이 문법을 축약 없이 풀어서 다시 코딩하면 다음과 같이 됩니다. 

<Button Width="100" Height="100" Margin="10" >
	<Button.Background>
		<SolidColorBrush Color="Gray" />
	</Button.Background>
</Button>


그러면 풀어서 코딩한 XAML 코드를 (BUtton.Background).(SolidColorBrush.Color)와 비교해 봅니다. Button.Background는 <Button.Background)에서 따온 것이고 SolidColorBrush.Color는 <SolidColorBrush Color="Gray" />에서 따온 것임을 쉽게 짐작할 수 있습니다. 이 두 값을 분리하기 위해 괄호를 사용하고 두개의 속성을 다시 구분하기 위해 점을 사용한 것입니다. 






※ RepeatBehavior

그런데 위의 Animation은 화면이 나타날 때 한 번만 동작하고 멈추니조금 섭섭하지 않나요? 그래서 다음 코드와 같이 RepeatBehavior 속성을 Forever로 지정해 Animation이 반복 되도록 하고 Autoreverse 속성을 True로 지정해 색상이 자연스럽게 갈색에서 청색으로, 청색에서 다시 갈색으로 변하는 것을 반복하게 했습니다. Autoreverse 속성을 지정하지 않으면 갈색에서 청색으로, 그리고 갑자기 색상이 변해 다시 갈색에서 청색으로 색이 바뀌게 되어 자연스러운 Animation이 되지 않을 것입니다. 



XAML 코드 조각

    <StackPanel>
        <StackPanel.Resources>
            <Storyboard x:Name="colorAnimationButtonStoryboard">
                <ColorAnimation Storyboard.TargetName="colorAnimationButton" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="Gray" To="Blue"
                                Duration="0:0:5" RepeatBehavior="Forever" AutoReverse="True"/>
            </Storyboard>
        </StackPanel.Resources>

        <Button x:Name="colorAnimationButton" Width="100" Height="100" Content="Blue Button" Loaded="colorAnimationButton_Loaded" />

    </StackPanel>


코드 비하인드 조각

        private void colorAnimationButton_Loaded(object sender, RoutedEventArgs e)
        {
            colorAnimationButtonStoryboard.Begin();
        }



※ 알아두기
RepeatBehavior 속성에 "3x"와 같은 형식으로 값을 지정하면 x앞의 숫자만큼 반복해 동작하고, "0:0:30"과 같은 형식으로 값을 지정하면 지정한 시간만큼 동작을 반복합니다. RepeatBehavior 속성에 Animation 횟수나 시간을 지정하는 경우 Animation이 끝난 후 요소의 색상은 FillBehavior 속성으로 제어되는데 기본 값으로 HoldEnd 값이 사용되기 때문에 Animation이 종료되는 시점의 색상으로 남게 됩니다. 혹시 Animation이 시작할 때의 초기 색상으로 남기를 원한다면 Stop 값을 지정하면 됩니다. 그리고 Animation속도를 빠르게 하거나 느리게 하고 싶으면 SpeedRatio 속성을 사용하는데 2나 3과 같이 1보다 큰 양수 값을 지정하면 숫자의 배수만큼 빨라지고 0.1이나 0.5와 같이 1보다 작은 양수 값을 지정하면 그 비율만큼 느려집니다. 즉 2는 2배로 빨라지고 3은 3배로 빨라지며, 0.1은 10분의1로 느려지고 0.5는 반으로 느려지게 됩니다. 





※ Storyboard를 활용한 Animation의 결합

Storyboard를 사용해 Animation을 구현하면서 Storyboard가 없이 DoubleAnimation이나 ColorAnimation과 같은 Animation요소만 사용하면 문법이 더 간결해질 것 같다는 생각이 듭니다. 그래서 이번 예제에서는 두 개의 Animation을 Storyboard로 통합해 Storyboard를 사용하는 장점을 느껴보겠습니다. 

다음 예제는 두 개의 Animation을 같은 Storyboard안에 배치한 것이 위의 예제들과 가장 큰 차이점입니다. 그래서 Storyboard의 이름도 combineAnimationStoryboard로 수정했습니다. 이벤트 핸들러의 경우 전에는 Animation을 적용할 각각의 요소의 Loaded 이벤트 핸들러를 사용했는데 이번 예제의 경우 두 개의 요소를 모두 포함하는 StackPanel 요소의 Loaded 이벤트 핸들러를 사용했습니다. 

Animation Storyboard를 한 번만 실행해야 하고 Animation할 모든 요소가 Load된 후에 Animation해야 하니 당연한 선택입니다. 컨트롤 외관 조각을 보니 Storyboard에 기술한 두 가지 Animation이 동시에 이루어지는 것을 확인할 수 있습니다. 



XAML 코드 조각

    <StackPanel x:Name="combinedAnimationStackPanel" Loaded="combinedAnimationStackPanel_Loaded">
        <StackPanel.Resources>
            <Storyboard x:Name="combinedAnimationStoryboard">
                <DoubleAnimation Storyboard.TargetName="lockImage" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:5" RepeatBehavior="Forever" />
                <ColorAnimation Storyboard.TargetName="colorAnimationButton" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="Gray" To="Blue"
                                Duration="0:0:5" />
            </Storyboard>
        </StackPanel.Resources>
        <Image x:Name="lockImage" Source="/Assets/LockScreenLogo.scale-200.png" Height="100" Width="100" HorizontalAlignment="Center"></Image>
        <Button x:Name="colorAnimationButton" Width="100" Height="100" HorizontalAlignment="Center" Content="Blue Button" />

    </StackPanel>


코드 비하인드 조각

        private void combinedAnimationStackPanel_Loaded(object sender, RoutedEventArgs e)
        {
            combinedAnimationStoryboard.Begin();
        }



※ Easing

XAML의 Animation에서 말하는 Easing은 움직이는 객체의 속도를 조정하는 것을 말합니다. 객체의 속도를 조정하는 방법에는 EaseIn, EaseOut 및 EaseInOut이 있으며 Microsoft Docs에는 각각 감속(들어옴), 가속(종료) 및 표준 감속(이동)이라고 번역하고 있습니다. 


※ EaseIn

EaseIn 방식의 Animation 코드를 작성해보겠습니다. Animation되는 움직임을 컨트롤 외관 조각에 보여주기가 어려우니 대신 Animation될 때의 속도 함수 그래프로 컨트롤 외관 조각을 대신 보여주겠습니다. 그래프에서 보이는 것처럼 초반에는 빨리 움직이다가 나중에는 천천히 움직이는 것이 EaseIn입니다. 이전의 이미지가 점점 사라지거나 나타나는 예제와 다른 것은 Border의 크기를 이미지가 이동할 충분한 공간을 확보하기 위해 300으로 지정한 것, 이동의 위치를 Offset 요소와 Offset 요소의 속성인 OffsetX 및 OffsetY로 지정한 것, 그리고 EaseMode를 EaseIn으로 지정한 것입니다. 


이 예제에서는 이미지가 Border 요소의 중앙에서 X축과 Y축으로 각각 100만큼 이동한 위치, 즉 우측 하단으로 빠르게 이동하다가 서서히 느려지는 형태로 이동합니다. Animation 시간은 1초로 지정했습니다. 



XAML 코드 조각 

    <StackPanel >        
            <Border xmlns:interactivity="using:Microsoft.Xaml.Interactivity" xmlns:behaviors="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
                    Background="Gray" Width="300" Height="300" >
                <Image x:Name="lockImage" Source="/Assets/LockScreenLogo.scale-200.png" Height="100" Width="100">
                    <interactivity:Interaction.Behaviors>
                        <behaviors:Offset OffsetX="100" OffsetY="100" Duration="1000" EasingMode="EaseIn"/>
                    </interactivity:Interaction.Behaviors>
                </Image>
            </Border>

    </StackPanel>




※ EaseOut

이번에는 위의 예제를 EaseOut 방식의 Animation 코드로 변경해보겠습니다. 위의 예제에서 OffsetX와 OffsetY의 값을 -100으로 수정하고 EaseMode를 EaseOut으로 수정했습니다. 이 예제에서는 이미지가 Border 요소의중앙에서 X축과 Y축으로 각각 -100만큼 이동한 위치, 즉 좌측 상단으로 천천히 이동하다가 갑자기 빨라지는 형태로 이동하게 됩니다. 




XAML 코드조각

    <StackPanel >        
            <Border xmlns:interactivity="using:Microsoft.Xaml.Interactivity" xmlns:behaviors="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
                    Background="Gray" Width="300" Height="300" >
                <Image x:Name="lockImage" Source="/Assets/LockScreenLogo.scale-200.png" Height="100" Width="100">
                    <interactivity:Interaction.Behaviors>
                        <behaviors:Offset OffsetX="-100" OffsetY="-100" Duration="1000" EasingMode="EaseOut"/>
                    </interactivity:Interaction.Behaviors>
                </Image>
            </Border>

    </StackPanel>





※ EaseInOut

이번에는 위의 예제를 EaseInOut 방식의 Animation 코드로 변경해보겠습니다. 위의 예제에서 OffsetY의 값을 0으로 수정하고 EaseMode를 EaseInOut으로 수정했습니다. 이 예제에서는 이미지가 초반에는 Border 요소의 중앙에서 X축으로 -100만큼 이동한 위치, 즉 좌측으로 서서히 움직이다가 갑자기 빨라지고 후반에는 빠르게 이동하다가 서서히 느려지는 형태로 이동합니다. EaseOut이 먼저 적용되고 EaseIn이 나중에 적용되는 형태인데 속성의 이름이 EaseOutIn이 아니고 EaseInOut이어서 응용 프로그램 개발자를 헛갈리게 합니다. 



XAML 코드 조각

    <StackPanel >        
            <Border xmlns:interactivity="using:Microsoft.Xaml.Interactivity" xmlns:behaviors="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
                    Background="Gray" Width="300" Height="300" >
                <Image x:Name="lockImage" Source="/Assets/LockScreenLogo.scale-200.png" Height="100" Width="100">
                    <interactivity:Interaction.Behaviors>
                        <behaviors:Offset OffsetX="-100" OffsetY="0" Duration="1000" EasingMode="EaseInOut"/>
                    </interactivity:Interaction.Behaviors>
                </Image>
            </Border>

    </StackPanel>



위의 예제를 혹시 화면이 나타날 때 Animation을 시작하는 것이 아니라 정해진 이벤트가 발생할 때 Animation을 시작하고 싶으면 코드 비하인드의 원하는 이벤트 핸들러에 코딩하면 됩니다. 이 예제에서는 XAML 코드에는 Animation 관련된 코드를 모두 제거하고 lockImage의 Loaded 이벤트 핸들러에서 Animation을 시작하도록 StartAsync() 비동기 메소드를 호출하고 있습니다. using 선언문은 따로 설명하지 않겠습니다. 주석을 참조하기 바랍니다. 



XAML 코드 조각

<Border xmlns:interactivity="using:Microsoft.Xaml.Interactivity" xmlns:behaviors="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
                    Background="Gray" Width="300" Height="300" >
                <Image x:Name="lockImage" Source="/Assets/LockScreenLogo.scale-200.png" Height="100" Width="100"
		Loaded="lockImage_Loaded" />
</Border>



코드비하인드 조각

using Microsoft.Toolkit.Uwp.UI.Animations;	//Offset().StartAsync()
using Windows.UI.Xaml.Media.Animation;	//EasingMode.EaseInOut

private async void lockImage_Loaded(object sender, RoutedEventArgs e)
{
	await lockImage.Offset(offsetX: -100.0f, offsetY: 0.0f, duration: 1000, easingMode: EasingMode.EaseInOut).StartAsync();
}




4 : 기타

지금까지 디바이스의 종류와 독립적인 UWP 프로그램에 기본적으로 사용할 수 있는 컨트롤 요소들을 예제를 통해 살펴보았습니다. 




※ 알아두기
미니멀리즘(Minimalism)을 유지하며 설명하려고 노력했으나 너무 장황하게 설명했다는 반성을 해봅니다. Menu, Command, TreeView등 Windows PC에서 기본 컨트롤로 활용되는 것들에 대한 설명은 하지 않았습니다. UWP를 설계하고 개발한 사람들이 마이크로소프트 출신들이어서 그런지 UWP의 관점이 아니라 많은 부분 Windows PC의 관점에서 디자인되었다고 느껴집니다. 

백화점이나 할인점과 같은 거대 마트가 아니라 근처의 조그마한 상점에만 가도 상인들은 판매를 위한 구색을 맞추기 위해 잘 팔리지 않는 상품들도 진열해 놓는다고 합니다. 소프트웨어 개발 도구의 개발자나 판매자도 동일한 판매 전략을 가지고 있는 것으로 보입니다. 판매시점에는 잘 사용되지 않는 기능이라고 해도 갖춰놓는 것이 유리하니까요. 그러나 제품을 사용하는 단계로 가면 상황이 많아 달라집니다. 

불필요한 기능에 의해 꼭 필요한 기능이 부족하기도 하고 불필요한 기능에 의해 꼭 필요한 기능에 부작용(Side Effect)이 생기기도 합니다. 또한 불필요한 기능에 꼭 필요한 기능이 가려 사용에 어려움을 겪기도 하고 불필요한 기능에 의해 꼭 필요한 기능의 유지보수가 어려워지기도 합니다. 따라서 상점에 가서 판매자들의 전략에 휘말려 지름신의 강림을 받지 않고 현명한 구매를 하는 것이 소비자의 역할인 것과 같이 개발 도구로부터 꼭 필요한 기능을 찾아 부작용이 적고 유지보수가 용이하고 사용자가 쉽게 사용할 수 있는 응용 프로그램을 만드는 것은 우리들 응용 프로그램 개발자들의 역할이라고 생각합니다. 





여기서 설명되지 않은 컨트롤들에 대한 정보는 인터넷 검색이나 XAML Controls Gallery 앱이나 Windows Community Toolkit Sample App이나 개발 지원앱들에 연결된 참조 문서및 Github 사이트 등의 참조를 통해 확보하시기 바랍니다. 그리고 https://docs.microsoft.com/ko-kr-windows/uwp 사이트에 접속하면 UWP에 대한 매우 포괄적이고 방대한 정보를 접할수 있습니다. 


하지만 그 많은 정보들을 모두 읽기는 어렵고 제공되는 정보의 링크를 따라 방황하다 보면 시간은 많이 드는데 얻는 것은 적다는 느낌을 받게 될 것입니다. 그럴 때는 이 책을 처음부터 끝까지 따라하면서 기본적인 기능과 개념들을 익히고 난후, 해당 문서들을 주제별로 찾아가면서 학습하기 바랍니다. 관련 정보들이 아주 쉽게 이해되는 마법을 경험하게 될 것입니다. 