2 : Text

Text 으로 분류되는 컨트롤들은 문자열 정보를 출력하고 입력하게 해줍니다. 



※[Text] > [PasswordBox]

PasswordBox 컨트롤은 암호를 입력하게 합니다. 



XAML 코드조각

<StackPanel>
	<PasswordBox Width=300" Header="암호" PlaceholderText="Enter your password"/>
	<PasswordBox Width="300" Header="암호확인" PasswordChar="#" />
</StackPanel>





※[Text] > [TextBlock]

TextBlock 컨트롤은 소량의 문자열을 출력합니다. 다음 예제는 소량의 문자열을 기본 폰트를 사용하여 출력하는 예와 폰트를 지정하여 출력하는 예입니다. 



XAML 코드조각

<StackPanel>
	<TextBlock Text="TextBlock" />
	<TextBlock Text="Font 지정 TextBlock" FontFamily="Arial" FontSize="14" FontStretch="Expanded"
		FontStyle="Italic" FontWeight="Blod" Foreground="CornflowerBlue" TextWrapping="WrapWholeWords"
		CharacterSpacing="200" />
</StackPanel>


TextBlock 컨트롤은 소량의 문자열을 출력해주기 때문에 Run, Span, Bold, Italic 등의 Inline 요소들만 사용할 수 있습니다. Inline 요소란 줄 바꾸기가 없는 문자열입니다. 그래서 요소와 요소간에 줄을 바꾸기 위하여 LineBreak 요소를 사용했습니다. Span 요소를 사용하면 TextBlock 요소의 Text 속성이나 단일 문자열만 출력할 수 있는 Run 요소와 다르게 Bold, Italic 및 Underline 요소등을 사용하여 더 다양한 문자열을 출력할 수 있습니다. 



XAML 코드 조각

<TextBlock>
	<Run Foreground="Green" Text="Run 요소 안의 TextBlock" />
	<LineBreak/>
	<Span FontFamily="Times New Roman">
		<Bold>강조</Bold>, <Italic>이탤릭</Italic>, <Underline>밑줄</Underline>,
	</Span>
	<LineBreak/>
	<Span TextDecorations="None">TextDecoration None</Span><LineBreak/>
	<Span TextDecorations="Strikethrough">TextDecoration Strikethrough</Span>
	<LineBreak/>
	<Span TextDecorations="Underline">TextDecoration Underline</Span>
	<LineBreak/>
	<Span TextDecorations="Strikethrough, Underline">
		TextDecoration Strikethrough, Underline
	</Span>
</TextBlock>




※[Text] > [RichTextBlock]

RichTextBlock 컨트롤은 TextBlock 컨트롤과 유사하나 다양한 형태의 대량의 문자열을 출력해줍니다. 그리고 하나의 RichTextBlock이 다 포함하지 못하는 값(Overflow)들을 자동 배치해주는 등의 부가 기능을 제공합니다. RichTextBlock 은 TextBlock에서 제공하지 않는 TextAlignment 속성을 제공하는데 이 속성은 문자열이 한 줄이 아니라 문단에 걸쳐 나타날 때 Text를 배치하는 방법을 지정합니다. 주로 좌측배치(Left), 우측 배치(Right), 중간 배치(Center), 좌우 균등 배치(Justify)값을 사용합니다. TextAlignment 속성값을 변경해 가면서 문자열의 배치가 달라지는 모습을 관찰해보기 바랍니다. 

또한 다음 코드 조각에서 조금 주의 깊게 봐야 할 부분은 현재 RichTextBlock 컨트롤의 공간에서 내용을 다 보여주지 못할 때, 나머지 부분을 RichTextBlockOverflow 요소로 넘기기 위한 OverflowContentTarget 속성과 자신을 지정한 요소로부터 Overflow 되어 넘어오는 값을 보여주기 위한 <RichTextBlockOverflow> 요소입니다. 속성 이름과 요소 이름을 설명하다 보니 모두 저절로 설명되었습니다. 설명이 부족하다면 RichTextBlock 컨트롤 외관 조각을 확인해보기 바랍니다. 

다음 예제에서는 Span 요소 대신 Paragraph 요소를 사용했습니다. RichTextBlock 컨트롤은 대량의 문자열을 출력해주기 때문에 Paragraph라는 요소를 사용할 수 있습니다. Paragraph 요소는 문단을 관리해주는 요소이기 때문에 LineBreak 요소의 도움 없이도 문단을 구성하기 위하여 자동으로 줄바꿈 처리를 해줍니다. 그리고 Block 요소인 Paragraph 요소 안에서는 Inline 요소인 Run, Span, Bold, Italic 등의 요소를 사용할수 있습니다. 당연히 소량의 문자열을 처리하는 TextBlock 요소 안에서는 Paragraph 요소를 사용할수 없습니다. 




XAML 코드 조각

<StackPanel>
        <RichTextBlock>
            <Paragraph FontFamily="Times New Roman" Foreground="DarkGray">
                회색 Paragraph
            </Paragraph>
            <Paragraph>
                <Bold>강조</Bold>,
                <Italic>이탤릭</Italic>,
                <Underline>밑줄</Underline> ,
            </Paragraph>
        </RichTextBlock>

        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <RichTextBlock Grid.Column="0" OverflowContentTarget="{x:Bind firstOverflowContainer}" TextAlignment="Justify" Margin="12, 0" Height="300">
                <Paragraph>
                    서문을 옮겨 적었습니다. 여기서는 지면의 제약상 생략합니다.
                </Paragraph>
            </RichTextBlock>
            <RichTextBlockOverflow x:Name="firstOverflowContainer" OverflowContentTarget="{x:Bind secondOverflowContainer}" Grid.Column="1" Margin="12, 0" Height="300" />
            <RichTextBlockOverflow x:Name="secondOverflowContainer" Grid.Column="2" Margin="12, 0" Height="300" />
        </Grid>
    </StackPanel>




※[Text] > [TextBox]

TextBox 컨트롤은 사용자의 입력을 받는 기능을 제공한다는 것을 제외하면 TextBlock 컨트롤과 유사합니다. TextBlock 컨트롤은 주로 화면의 헤더나 타이틀, 레이블로 사용하고 TextBox 컨트롤은 입력 항목 자체로 사용합니다. 물론 앞에서 설명했던 것과 같이 입력 항목 바로 상단에 헤더를 추가하고 싶다면 입력 항목의 Header 속성을 사용하면 됩니다. 

TextBox의 초깃값을 코드로 지정하는 방법과 사용자의 입력을 받아서 코드로 처리하는 방법은 여러 가지가 있습니다. 그중 코드 비하인드의 이벤트 핸들러를 사용하는 방법을 뒤에 추가해두었으니 확인하기 바랍니다. 여기서 초깃값은 Page가 처음 로드될 때 지정한다고 가정했고 TextBox의 값은 입력을 마치고 <Enter> 키를 치는 시점에 가져다 사용하는 것으로 가정했습니다. 여러분도 자신의 응용 프로그램에 적절한 시점과 위치에 코딩하면 됩니다. 



XAML 코드 조각

<StackPanel>
        <TextBox x:Name="TextBoxName" Header="이름" KeyDown="TextBoxName_KeyDown" />
</StackPanel>



코드 비하인드 조각
        //초깃값을 설정하는 코드
        private void Page_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            TextBoxName.Text = "홍길동";
        }

        //변경된 값을 사용하는 코드
        private async void TextBoxName_KeyDown(object sender, Windows.UI.Xaml.Input.KeyRoutedEventArgs e)
        {
            if (e.Key == Windows.System.VirtualKey.Enter)
            {
                string name = ((TextBox)sender).Text;
                MessageDialog messageDialog = new MessageDialog("입력된 이름은 " + name + "입니다.");
                await messageDialog.ShowAsync();
            }
        } 




3 : Date and Time

Date and Time 으로 분류되는 컨트롤들은 다양한 형태의 연/월/일/시/분 정보를 출력하고 선택하게 해줍니다. 


※[Date and Time] > [CalendarDatePicker]

CalendarDatePicker 컨트롤은 연/월 일 정보를 선택하게 해줍니다. TextBox 컨트롤과 는 달리 값을 초기화할 때 DateTime.Now와 같은 DateTime 클래스의 현재 날짜를 알려주는 정적 객체 멤버를 사용하거나 new DateTime(2004, 1, 1)과 같은 새로운 날짜 객체를 만들어 값을 할당해야 합니다. 다음 코드를 참조하기 바랍니다. 이번 예에서 TextBox 컨트롤의 예와 또 다른 것은 Date 속성의 하부 속성인 Value를 사용해야 비로소 연/월/일/시/분/초 정보를 볼 수 있는 특이함입니다. 




XAML 코드 조각

<CalendarDatePicker x:Name="CalendarDatePickerEnteredDate" PlaceholderText="날짜선택" Header="입사일자" DateChanged="CalendarDatePickerEnteredDate_DateChanged" />



코드 비하인드 조각

        //초깃값을 설정하는 코드
        private void Page_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            CalendarDatePickerEnteredDate.Date = new DateTime(2004, 1, 1);
        }
        //변경된 값을 사용하는 코드
        private async void CalendarDatePickerEnteredDate_DateChanged(CalendarDatePicker sender, CalendarDatePickerDateChangedEventArgs args)
        {
            string dateString = sender.Date.Value.Year.ToString() + "/" + sender.Date.Value.Month.ToString() + "/" + sender.Date.Value.Day.ToString();
            MessageDialog messageDialog = new MessageDialog("입력된 입사일자는 " + dateString + "입니다.");
            await messageDialog.ShowAsync();
        }



※ 알아두기

Date 속성의 하부 속성인 Value를 사용해야 비로소 연/월/일/시/분/초 정보를 볼수 있는 특이함은 필자가 인터넷에 "UWP CalendarDatePicker"를 검색하여 알게 되었습니다. 왜 이렇게 일관성이 부족하게 만들었을까요? 아무튼 원리와 기본 개념을 습득한 후 인터넷 검색을 해라는 문구는 이 시대의 응용 프로그램 개발자가 반드시 명심해야 할 격언입니다. 어떤 사람들은 지식을 개념적(Conceptual)지식과 실용적(Practical)지식으로 나누기도 합니다. 원리와 개념은 개념적 지식에 속하는데 어떤 업무를 수행하기 위하여 반드시 알아야 하는 지식이니 평소에 학습하여 두어야 합니다. 반면에 인터넷 검색으로 찾을 수 있는 문법이나 코딩 사례와 같은 것들은 실용적 지식으로 ,사용하는 도구에 따라 혹은 시대의 흐름에 따라 달라지니 필요할 때 인터넷 검색을 통하여 확인하면 될 것입니다. 가끔 인터넷상에 한글로 된 정보가 없는 경우가 있는데 그럴 때는 할 수 없이 영어로 된 정보를 가지고 해결해야 합니다. 응용 프로그램 개발자에게 개발 기술만큼이나 중요한 것이 영어로 빠르게 바르게 읽고 이해하는 능력입니다. 과거와 달리 최근에 개발된 개발 도구들은 한글 문제는 기본으로 해결되어 있는 것이 응용프로그램 개발자들에게 매우 다행입니다. 

과거에는 한글로 된 자료가 없으면 한글화되지 않았다는 것을 의미하며, 이는 사용하면 안된다는 것을 의미했거든요. 하지만 최근에는 한글이나 한자와 같은 소위 더블바이트 폰트(Double Byte Font)가 기본으로 지원되면서 오픈소스 개발 도구들도 큰 부담없이 사용할수 있는 시대가 되었습니다. 