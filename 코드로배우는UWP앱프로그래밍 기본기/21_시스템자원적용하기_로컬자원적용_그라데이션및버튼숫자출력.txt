※ 시스템 자원 적용하기

앱을 작성하다 보면 시스템이 제공하는 색상이나 배경이나 글꼴 등을 사용해야 할 때가 있습니다. 이럴 때는 사전에 정의되어 제공되는 시스템 자원을 선택하여 사용하면 됩니다. 이 예제에서는 버튼에 나타나는 문자의 색을 강조해보겠습니다. 

우선 MainPage 뷰의 XAML 편집기에서 다시 그리기 Button 요소에 마우스 커서를 놓은 후 다음 그림과 같이 속성 창에서 [브러시] > [Foreground]를 선택합니다. 그리고 하단에 나타나는 아이콘 중에서 브러시 리소스 아이콘을 선택합니다. 그후 하단에 나타나는 시스템 Brush 리소스 목록에서 SystemColorHotlightColor 시스템 리소스를 선택합니다. 


속성 창에서 작업한 내역들은 다음 코드와 같이 MainPage 뷰에 XAML 코드로 반영됩니다. ThemeResource 마크업 확장으로 로컬 자원을 가져가 사용하는 것을 확인할수 있습니다. 



MainPage.xaml

생략
<Button x:Name="drawButton" Margin="10 0 0 0" Content="다시 그리기" Click="drawButton_Click" Foreground="{ThemeResource 	SystemColorHotlightColor}"/>





※ 로컬 자원 적용하기

버튼의 글자 색상을 시스템 자원에서 가져다 사용해보았습니다. 이번에는 앱의 로컬자원을 정의하여 사용해보겠습니다. 

앞에서 XAML의 자원을 설명할 때, 자원은 계층적으로 정의하여 사용할수 있으며 가능한 한 적용할 요소가 가까운 곳에 정의하여 사용한다고 설명했습니다. 그런데 여기서 말하는 로컬 자원은 앱 차원에서 정의하는 자원으로 솔루션 탐색기에서 Styles 폴더 하위에 정의된 XAML 파일에 추가하면 됩니다


Styles\_Colors.xaml

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">    
    <SolidColorBrush x:Key="ThemeControlForegroundBaseHighBrush" Color="{ThemeResource SystemBaseHighColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="ThemeControlButtonBackgroundBrush" Color="LightGreen"></SolidColorBrush>
</ResourceDictionary>

색상을 관리하는 자원이니 _Colors.xaml 파일에 자원을 정의합니다. 다음 코드와 같이 자원을 불러다 사용하기 위한 이름인 x:Key 속성으로 ThemeControlButtonBackgroundBrush를 지정하고 본문 영역의 버튼을 녹색으로 그렸으니 룩 앤드 필을 녹색 계통으로 유지하기 위해 Color 속성을 LightGreen으로 지정했습니다. 

속성 창을 이용하여 로컬 자원을 가져다 사용하는 방법은 시스템 자원을 가져가 사용하는 방법과 거의 유사합니다. 다음 그림과 같이 [시스템 Brush 리소스]에서 선택하지 않고 [로컬 Brush 리소스]에서 선택하는 것이 다릅니다. 로컬 자원은 버튼 글자의 색이 아니라 배경색을 지정할 때 사용할 것이기 때문에 속성 창에서 [브러시] > [Background]를 선택한 후에 하단에 나타나는 아이콘 중에서 브러시 리소스 아이콘을 선택하고 하단의 [로컬 Brush 리소스] 목록에서 _Colors.xaml에 정의한 [ThemeControlButtonBackgroundBrush]로컬 자원을 선택합니다.

속성 창에서 작업한 내역들은 다음 코드와 같이 MainPage뷰에 XAML 코드로 반영됩니다. StaticResource 마크업 확장으로 로컬 자원을 가져가 사용하는 것을 확인할수 있습니다. 



MainPage.xaml
생략
<Button x:Name="drawButton" Margin="10 0 0 0" Content="다시 그리기" Click="drawButton_Click" Foreground="{ThemeResource 	SystemColorHotlightColor}" Background="{StaticResource ThemeControlButtonBackgroundBrush}"/>
생략


이제 앱을 실행해봅니다. 버튼 글자색과 배경색이 원하는 지정한 대로 바뀌어 나타나는 것을 확인할수 있습니다. 



※ 속성 창을 사용하여 그라데이션 효과 지정하기

버튼의 배경색을 로컬 자원에서 가져와 사용해보았습니다. 이번에는 버튼의 배경색에 그라데이션 효과를 지정합니다. 

다시 그리기 버튼에 마우스 커서를 위치시키고 속성 창에서 [브러시] > [Background] 를 선택합니다. 그리고 하단에 나타나는 아이콘 중에서 [그라데이션브러시]아이콘을 선택합니다. 그러면 하단에 그라데이션을 설정할수 있는 편집기 화면이 나타납니다. 
그라데이션 편집기 화면의 상단은 일반적인 색상표이고 편집기의 하단이 그라데이션 정보를 시각적으로 표시합니다. 

그라데이션 편집기의 하단을 보면 다음과 같이 생겼는데 비주얼 스튜디오가 그라데이션의 시작 색상을 하얀색으로 그라데이션의 종료 색상을 검은색으로 지정해 놓은 것을 알 수 있습니다. 

우리는 초록색 룩 앤드 필을 사용할 것이기 때문에 시작 색상은 하얀색을 그대로 유지하고 종료 색상을 초록색으로 지정합니다. 그렇게 하기 위하여 우측 하단의 검은색 오각형 아이콘을 마우스로 클릭한 후 상단의 색상표에서 초록색을 선택해 보기 바랍니다. 그러면 다음 화면과 같이 그라데이션 편집기의 하단이 변경됩니다. 


그리고 다시 그리기 버튼의 XAML코드가 다음과 같이 변경되는 것을 확인할 수 있습니다. Button 요소안에 있던 Background 속성은 사라지고 Button.Background 속성 요소가 생겨나고 그 하부에 그라데이션을 하기 위한 XAML 코드가 생성되어 있습니다. StartPoint가 0.5,0이고 EndPoint가 0.5,1로 지정되어 있어 버튼의 상단에서 하단으로 시작 색상이 하얀색이고 종료 색상이 초록색인 그라데이션이 이루어지게 됩니다. 



MainPage.xaml
            <Button x:Name="drawButton" Margin="10 0 0 0" Content="다시 그리기" Click="drawButton_Click" Foreground="{ThemeResource SystemColorHotlightColor}">
                <Button.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="White" />
                        <GradientStop Color="Green" Offset="1"/>
                    </LinearGradientBrush>
                </Button.Background>
            </Button>


이제 그라데이션 효과를 확인하기 위하여 앱을 실행해 보면 예상하는 것과 같이 그라데이션 효과가 <다시 그리기> 버튼에 적용되는 것을 확인할 수 있습니다. 

속성 창을 사용하여 그라데이션을 쉽게 생성한 후에는 XAML 코드를 사용하여 세부적으로 그라데이션을 지정하면 그라데이션을 조금 더 섬세하게 지정할수 있습니다. 그라데이션 색상을 변경하거나 그라데이션 되는 위치를 변경하는 것 등은 여러분 스스로 XAML 코드를 변경해 가며 코딩하기 바랍니다. 



※ 본문의 반복되어 나타나는 버튼에 숫자 출력하기

이번에는 앱의 본문 영역에 반복하여 나타나는 버튼에 정보를 추가하여 보여주도록 코드를 수정할 것입니다. 실제 업무 환경에서는 더 복잡한 정보를 보여줄수 있겠지만 여기서는 데이터를 표시하는 기법을 배우는 것이 목적이므로 간단히 버튼이 생성되는 순서대로 숫자가 나타나게 해보겠습니다. 

MainViewModel.cs에서 반복하여 출력될 버튼에 대응되는 속성으로 cells를 사용한 것을 기억하지요? cells는 int 타입의 Collection 객체였는데 이것을 버튼에 보여줄 숫자를 저장하는 객체들의 Collection 객체로 다시 정의해야 합니다. 

우선 솔루션 탐색기에서 Core 프로젝트의 Models 폴더 안에 Cell이라는 클래스를 다음 그림과 같이 추가합니다. 

비주얼 스튜디오가 기본으로 생성해준 Cell 클래스에 다음과 같은 코드를 추가합니다. cellNumber를 보관하기 위한 읽기 전용 속성을 하나 만들고 생성자에서 cellNumber 속성에 값을 넣어 초기화해주는 아주 단순한 클래스입니다. Cell 클래스를 다른 네임스페이스에서 사용해야 하기 때문에 사용할 때 CS0051 문법 오류를 피하기 위하여 class를 public으로 지정해야 합니다. 



Models\Cell.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SimplePrismBlank.Core.Models
{
    public class Cell
    {
        private int _cellNumber;

        public int cellNumber
        {
            get => _cellNumber;
        }

        public Cell(int cellNumber)
        {
            _cellNumber = cellNumber;
        }
    }
}


Cell 객체를 생성했으니 MainViewModel.cs 에서 cells 속성을 Cell 클래스를 사용하도록 수정합니다. 

코드를 이해하는 것은 아주 쉽고 직관적입니다. 정의된 Cell 클래스를 사용하도록 using 선언문을 추가하고 cells 속성의 클래스를 int에서 Cell로 변경하면 됩니다. 


MainViewModel.cs

생략
using SimplePrismBlank.Core.Models; //선언해주고
/*
private ObservableCollection<int> _cells = new System.Collections.ObjectModel.ObservableCollection<int>();
        public ObservableCollection<int> cells
        {
            get => _cells;
        }
	기존 코드는 전체주석
        */
        private ObservableCollection<Cell> _cells = new System.Collections.ObjectModel.ObservableCollection<Cell>();
        public ObservableCollection<Cell> cells
생략


그리고 newGame() 메소드에서 cells 속성을 초기화시켜주는 로직을 Cell 클래스를 사용하도록 수정합니다. cellNumber를 1씩 증가시키기 위하여 변수를 정의했고 cells Collection 속성에 값을 추가할 때 new 키워드를 활용하여 Cell 클래스의 생성자를 호출했습니다. 이렇게 cells Collection 속성을 생성하면 각각의 구성 항목인 cell들은 1부터 항목의 개수만큼 증가한 cellNumber를 가진 객체들로 구성되게 됩니다. 


MainViewModel.cs
생략
        public void NewGame()
        {

            int cellNumber = 0;
            cells.Clear();

            for (int i = 0; i < rowCount; i++)
            {
                for (int j = 0; j < columnCount; j++)
                {                    
                    cells.Add(new Cell(cellNumber++));
                }
            }
        }
생략


cells 속성이 Cell 사용자 정의 객체를 사용하도록 수정했으니 테스트 주도 개발 원칙에 따라 프로그램의 수정이 앱에 부작용을 유발하지는 않는지 실행해봅니다. 이전과 동일하게 앱이 실행되는 것을 확인할 수 있을 것입니다. 이제 cell Collection 속성을 구성하는 항목들에 저장된 cellNumber 가 본문의 버튼에 나타나도록 수정합니다. 

우선 MainPage 뷰에서 앞에서 정의한 Cell 객체를 사용할수 있도록 Page 요소에 localObject 네임스페이스를 선언합니다. 


MainPage.xaml

<Page
    x:Class="SimplePrismBlank.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm" xmlns:localobject="using:SimplePrismBlank.Core.Models" <!-- 추가-->
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" 
    mc:Ignorable="d">
생략


그 후 본문의 버튼들이 보여줄 글자를 의미하는 Content 속성을 보여줄 때 사용할 DataTemplate 자원을 계층상 가장 가까운 Grid Layout 요소에 정의한 후 DataTemplate을 버튼의 ContentTemplate 속성에 지정하면 됩니다. 

ItemsControlItemTemplate 속성 요소에서 사용하는 DataTemplate은 ItemsControl을 구성하는 cells Collection 속성을 데이터로 보여주기 위한 Template이고 Grid의 자원으로 정의한 DataTemplate은 cells Collection 속성을 구성하는 하나의 Cell 객체 항목을 보여주기 위한 Template이라는 것은 코드에서 명확하게 알 수 있습니다. DataTemplate 이라는 용어가 동일하다고 두 개를 혼돈하면 안 됩니다. 

cellNumber 자원을 정의할 때 x:DataType="localObject:Cell"와 같이 지정한 것은 항목의 형태가 localObject 네임스페이스에 정의된 Cell 클래스라는 것을 명시적으로 알려주는 코드입니다. Data Type을 번역하면 데이터 타입이 되고 Class는 객체 타입으로 번역하면 적절하다고 앞에서 언급한 이유를 알겠지요? 객체 타입 즉 클래스도 일종의 데이터 타입입니다. DataTemplate은 TextBlock 요소 하나로 구성되는데 Text 속성에 Cell 클래스의 속성 요소인 cellNumber를 데이터 바인딩하여 Cell의 번호를 출력하도록 DataTemplate을 구성했습니다. 

버튼에서 정의된 자원을 가져다 사용할 때에는 다음 코드와 같이 ContentTemplate 속성에 StaticResource로 지정하면 됩니다. 


MainPage.xaml

        <Grid x:Name="bodyGrid" Grid.Row="1">
            <Grid.Resources>
                <DataTemplate x:Key="cellNumber" x:DataType="localobject:Cell">
                    <TextBlock Text="{x:Bind cellNumber}" FontSize="24pt" HorizontalAlignment="Center" VerticalAlignment="Center" />
                </DataTemplate>
            </Grid.Resources>
            <ItemsControl Margin="10 10 0 0" ItemsSource="{Binding cells}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <ItemsWrapGrid Orientation="Horizontal" MaximumRowsOrColumns="{Binding columnCount}" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button Margin="2" Width="50" Height="50" Background="Green" ContentTemplate="{StaticResource cellNumber}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Grid>


이제 앱의 실행 화면을 확인하면 Cell의 번호가 버튼에 나타나는 것을 확인할 수 있습니다. 





※ 본문에 반복되는 버튼의 출력 순서 바꾸기

버튼에 숫자가 나타나는 것을 보기 전에는 동적으로 화면을 구성할 때 데이터가 화면에 하나의 컨트롤로 대응되어 나타나는 것은 알 수 있었지만 데이터가 화면에 나타나는 순서를 알 수가 없었습니다. 데이터의 내용을 컨트롤에 나타나게 하니 어떤 컨트롤이 어느 데이터에 대응되는지 알 수 있게 되었습니다. 이렇게 데이터와 컨트롤을 대응시켜 화면을 구성하는 것이 ItemsControl.ItemsPenl 속성 요소가 하는 일로 데이터 하나를 나타내는 형태를 제어하는 ItemsControl.ItemTemplate 속성 요소와 의 차이점입니다. 

그럼 데이터를 수평 방향으로 보여주던 것을 수직 방향으로 보여주도록 코드를 수정하면서 ItemsControl.ItemsPanel 속성 요소와 ItemsPanel의 구성 방식의 하나인 ItemsWrapGrid 요소에 대하여 더 알아보겠습니다. 

데이터의 항목을 좌에서 우로 나타나게 하면서 한 줄을 모두 채우면 다음 줄로 넘어가게 해주는 것이 ItemsWrapGrid 요소의 역할이라는 것을 코드와 실행 결과를 보며 이해했을 것입니다. Orientation 속성이 Horizontal 로 되어 있으니 수평 으로 컨트롤을 나열하고 MaximumRowsOrColumns 속성을 columnCount로 데이터 바인딩했기 때문에 열의 수만큼 수평으로 데이터의 항목들을 순서대로 나열한 후 다음 줄로 넘어간 것입니다. 

다음 코드와 같이 Orientation 속성을 Vertical로 수정하고 MaximumRowsOrColumns 속성에 rowCount를 데이터 바인딩해 봅니다. 


MainPage.xaml
생략
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <ItemsWrapGrid Orientation="Vertical" MaximumRowsOrColumns="{Binding rowCount}" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
생략


그리고 앱을 다시 실행합니다. cellNumber가 좌에서 우로 나타나며 아래로 줄을 넘기던 것이 상에서 하로 나타나며 우측으로 줄을 넘기는 것을 확인할수 있습니다. 

그런데 행과 열의 값이 같아서 행과 열의 개수가 제대로 반영되는지 확인하기 어렵습니다. 행의 값을 4로 수정하여 <다시 그리기> 버튼을 클릭해봅니다. 이제 제대로 동작하는 것이 확인됩니다. 


ItemsControl.ItemsPanel 속성 요소는 화면의 구성을 제어하기 위한 ItemsPanelTemplate 요소로 ItemsWrapGrid 요소외에 데이터의 항목을 순서대로 보여주는 ItemsStackPanel 요소를 추가로 가지고 있습니다. 



※ 행과 열 필드의 값을 주어진 형식에 맞게 출력하기

이번에는 행과 열 필드의 값이 특정 형식에 맞게 출력되도록 만들어보겠습니다. 아주 간단한 형식을 사용할 것인데 숫자는 항상 두 자리로 출력되도록 할 것입니다. 즉 3은 03, 9는 09로 나타나게 하는 것입니다. 

이와 같은 기능을 구현하기 위해서는 IValueConverter라는 인터페이스를 상속받는 Value Converter 객체를 만든후 데이터 바인딩을 할 요소에 연결해야 합니다. 

우선 솔루션 탐색기에서 Value Converter 라는 폴더를 만들고 그 안에 TwoDigitsFormat이라는 클래스를 추가합니다. 

비주얼 스튜디오가 기본 값으로 생성한 클래스에 IValueConverter를 상속받는 코드를 추가합니다. IValueConverter 인터페이스를 사용하려면 using 선언문으로 Windows.UI.Xaml.Data 네임스페이스를 사용하겠다고 선언해야 합니다. 오류가 나는 곳에 마우스 커서를 올리고 <Ctrl> + <.>키를 누르면 비주얼 스튜디오의 도움을 받아 쉽게 using 선언문을 추가할수 있습니다. 



ValueConverters\TwoDigitsFormat.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml.Data;
namespace SimplePrismBlank.Value_Converters
{
    public class TwoDigitsFormat : IValueConverter
    {

    }
}



IValueConverter를 상속받은 후 구현하기 위해서 필요한 메소드들이 있는데 어떤 메소드들을 반드시 구현해야 하는지는 비주얼 스튜디오가 다음 그림과 같이 보여줍니다. 다음 화면을 보면 Convert 메소드와 ConvertBack 메소드를 정의해야 한다고 되어 있고 필요한 메소드의 인자들까지 알 수 있습니다. 

그럼 비주얼 스튜디오가 알려주는 대로 2개의 메소드를 구현하겠습니다. 이름에서 직관적으로 알 수 있는 것과 같이 Convert는 뷰모델의 속성 값을 뷰의 요소에 출력하도록 변환하는 역할을 하고 ConvertBack 메소드는 그 반대의 역할을 합니다. 

그런데 비주얼 스튜디오가 알려주는 것만 가지고는 코드를 완성할 수가 없습니다. 이럴 때는 인터넷 검색을 하면 메소드의 원형만이 아니라 코드의 예제까지 구할수 있습니다. 인터넷 검색한 내역을 참조하여 다음 코드와 같이 구현해봅니다. 두 메소드의 첫 번째 인자인 value가 변환을 통하여 입력으로 들어오는 인자이고 변환된 값은 return 키워드를 통하여 돌려줍니다. Convert의 입장에서 입력될 값과 반환해 줄 값의 타입을 모르기 때문에 object 타입의 메소드 원형을 가집니다. 그래도 ConvertBack 메소드의 경우 특별한 변환을 필요로 하지 않기 때문에 입력으로 넘어온 value 값을 반환했습니다. 



Value Converters\TwoDigitsFormat.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml.Data;
namespace SimplePrismBlank.Value_Converters
{
    public class TwoDigitsFormat : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, string culture)
        {
            return String.Format("{0:00}", (int)value);
        }
        public object ConvertBack(object value, Type targetType, object parameter, string culture)
        {
            return value;
        }
    }
}



ValueConverter 객체가 완성되었으니 데이터 바인딩을 할 요소에 연결해보겠습니다. 

우선 MainPage 뷰에서 앞에서 개발된 Value Converter 객체를 사용할수 있도록 Page 요소에 localConverter 네임스페이스를 선언합니다. 


MainPage.xaml
<Page
    x:Class="SimplePrismBlank.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm" xmlns:localobject="using:SimplePrismBlank.Core.Models" xmlns:localConverter="using:SimplePrismBlank.Value_Converters" <!-- 추가-->
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" 
    mc:Ignorable="d">
생략


그리고 앞에서 개발된 Value Converter 객체를 Resource로 등록을 합니다. 등록되는 자원의 위치는 사용할 행과 열 요소에서 가장 가까운 헤더를 보여주기 위한 StackPanel 요소로 하겠습니다. 그리고 행과 열 필드에서 사용하기 위하여 key 속성으로 twoDigitsFormat이라는 고유한 식별자를 지정합니다. Value Converter 객체를 Resource로 등록한 후 행과 열 필드가 바인딩 정보로 Converter 속성에 아래 코드와 같이 지정합니다. 


MainPage.xaml
생략
        <StackPanel x:Name="headerStackPanel" Grid.Row="0" Orientation="Horizontal">
            <StackPanel.Resources>
                <localConverter:TwoDigitsFormat x:Key="twoDigitsFormat" />
            </StackPanel.Resources>
            <TextBlock Text="행 : "  VerticalAlignment="Center"/>
            <TextBox Margin="5 0 0 0" Text="{Binding rowCount, Mode=TwoWay,Converter={StaticResource twoDigitsFormat}}" />

            <TextBlock Margin="10 0 0 0" Text="열 : " VerticalAlignment="Center" />
            <TextBox Margin="5 0 0 0" Text="{Binding columnCount, Mode=TwoWay, Converter={StaticResource twoDigitsFormat}}" />

            <Button x:Name="drawButton" Margin="10 0 0 0" Content="다시 그리기" Click="drawButton_Click" Foreground="{ThemeResource SystemColorHotlightColor}">


앱을 실행해 보면 행과 열의 값이 다음 그림고 같이 '03'과 같은 형식으로 나타납니다. 