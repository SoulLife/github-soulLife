※[Date and Time] > [DatePicker]

DatePicker 컨트롤은 연/월/일 정보를 선택하게 해줍니다. CalendarDatePicker와 프로그램하는 방법이 거의 동일한데 컨트롤의 외관과 연/월/일의 형식을 지정할 수 있는 것이 차이점 입니다. 

연/월/일의 형식을 지정할 때에는 XAML 코드를 사용하는 것보다 비주얼 스튜디오의 속성 창에서 해당 속성을 찾아 선택할 것을 권장합니다. 문법을 외우지 않아도 되기 때문에 매우 간편합니다. 다음 화면을 참조하기 바랍니다. 속성의 수가 많으니 검색란에 Format이라고 입력해서 찾으면 편리합니다. 

DatePicker 컨트롤에서는 날짜 값을 가져다 사용할 때 Date 속성 뒤에 Value하부 속성을 지정하지 않아도 되게 CalendarDatePicker 에서 있었던 문제가 해결되었습니다. sender는 Date 형태의 객체가 아니어서 sender.Date와 같이 사용하지 못하고 매번 ((DatePicker)sender).Date와 같이 형변환 한후 사용해야 합니다. 





XAML 코드 조각

    <DatePicker x:Name="DatePickerEnteredDate" Header="입사일자" YearFormat="{}{year.full(4)}" MonthFormat="{}{month.integer(2)}"
                DayFormat="{}{day.integer(2)} ({dayofweek.abbreviated})" DateChanged="DatePickerEnteredDate_DateChanged" />




코드 비하인드 조각

        //초깃값을 설정하는 코드
        private void Page_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            DatePickerEnteredDate.Date = new DateTime(2004, 1, 1);
        }

        //변경된 값을 사용하는 코드
        private async void DatePickerEnteredDate_DateChanged(object sender, DatePickerValueChangedEventArgs e)
        {
            DateTimeOffset date = ((DatePicker)sender).Date;
            string dateString = $"{date.Year.ToString()}/{date.Month.ToString()}/{date.Day.ToString()}";
            MessageDialog messageDialog = new MessageDialog("입력된 입사일자는 " + dateString + "입니다.");

            await messageDialog.ShowAsync();
        }





※[Date and Time] > [TimePicker]

TimePicker 컨트롤은 시/분 정보를 선택하게 해줍니다. TimeSpan 클래스를 사용하여 값을 초기화할 때는 초를 지정할 수 있도록 되어 있습니다. 



XAML 코드 조각

    <StackPanel Loaded="StackPanel_Loaded">
        <TimePicker x:Name="TimePickerDepartureTime" Header="출발시간" MinuteIncrement="15" TimeChanged="TimePickerDepartureTime_TimeChanged" />
        <TimePicker x:Name="TimePickerArrivalTime" Header="도착시간" ClockIdentifier="24HourClock" />
    </StackPanel>


코드 비하인드 조각

       //초깃값을 설정하는 코드
        private void Page_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            TimePickerDepartureTime.Time = new TimeSpan(08, 30, 00);
            TimePickerArrivalTime.Time = new TimeSpan(21, 30, 00);
        }

        private async void StackPanel_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            TimeSpan time = ((TimePicker)sender).Time;
            string timeString = $"{time.Hours.ToString()}:{time.Minutes.ToString()}";
            MessageDialog messageDialog = new MessageDialog($"입력될 출발시간은 {timeString} 입니다.");
            await messageDialog.ShowAsync();
        }


4 : Dialogs and Flyouts

Dialogs and Flyouts 으로 분류되는 컨트롤들은 별도의 대화형 화면을 통하여 사용자와 상호 작용하게 해줍니다. 

[Dialogs and Flyouts] > [ContentDialog]

ContentDialog 컨트롤은 XAML 기반의 대화형 화면을 구성하여 사용자와 상호 작용하게 해줍니다. 

앞선 예제들을 통하여 특별한 설명 없이 직관적으로 MessageDialog(메시지 대화 상자)를 사용해 왔습니다. C#코드로 MessageDialog messageDialog = new MessageDialog("문자열 메시지"); 같이 객체를 만들어 await messageDialog.ShowAsync();과 같이 대화형 창을 보여주는 ShowAsync()메소드를 비동기적으로 호출하면 다음 화면과 같은 대화형 창을 보여주고 사용자가 <Close>버튼을 누르면 닫히게 되어 있습니다. 

그런데 이 대화형 창은 크기 조절도 되지 않고 제목도 달 수 없고 버튼도 추가할수 없습니다. 아니 엄밀하게 따지면 C# 코드를 활용하여 기능을 구현할수도 있으나 이런 코드는 PC용 프로그램에서는 정상적으로 동작하지만 Windows 폰과 같은 프로그램에서는 정상 동작하지 않습니다. 그래서 비주얼 스튜디오에서 MessageDialog 클래스에 마우스 버튼을 올리면 이 클래스는 다음과 같이 사용자에게 사용을 권고 합니다. 

MessageDialog.MessageDialg(string content)(+1 오버로드)
사용자에게 간단한 질문을 하는데 사용할 수 있는 제목 없는 메시지 대화 상자를 표시하도록 MessageDialog 클래스의 새 인스턴스를 초기화 합니다. 


기존 PC용 프로그램 개발자들은 Windows Forms 등의 개발 도구에서 사용했던 기억 때문에 납득하기가 쉽지 않겠지만 이 클래스는 JavaScript 의 alert과 같은 용도로 사용해야 합니다. 대신 XAML 에서는 ContentDialog 라는 화면 요소를 표준 대화형창으로 제공하고 있습니다. 

ContentDialog (콘텐츠 대화 상자)를 사용하는 방법으로는 MessageDialog의 경우와 같이 코드 비하인드와 같은 C#코드를 활용하는 방법이 있고 XAML 편집기에서 일반 XAML 화면과 같이 콘텐츠 대화 상자 화면을 만들어서 활용하는 방법이 있습니다. 

첫 번째 방법은 코드 비하인드 코드 조각으로 설명하겠습니다. Button 컨트롤을 하나 만들어 Tapped 이벤트 핸들러를 코드 비하인드 코드 조각과 같이 구현하면 쉽게 테스트해볼 수 있습니다. 

비동기 호출을 하는 것이니 이벤트 핸들러의 반환값 데이터 타입 정의 앞에 async 키워드를 추가하는 것을 잊으면 안 됩니다. 다음 코드 비하인드 코드 조각에서 특이한 점은 ContentDialog 객체를 new 키워드를 사용하여 생성자를 호출하여 객체 내부 멤버의 값을 초기화할 때 괄호 즉 ()를 사용하지 않고 중괄호({})를 사용했다는 것입니다. 

중괄호({})를 object Initializer(객체 초기화)라고 부르는데 객체의 초깃값을 지정해주는 용도로 사용합니다. 대화창을 닫을 때 누른 버튼의 종류는 result라는 변수명의 ContentDialogResult 객체에 저장되는데 뒤에 switch 문장을 사용하여 선택된 버튼에 맞는 로직을 구현하면 됩니다. 이와 같이 대화상자는 별도의 화면 디자인 없이 C# 코드를 사용하여 쉽게 만들어서 사용하곤 합니다. 



XAML 코드 조각

<Button Tapped="TappedEventHandler" />



코드 비하인드 조각

        private async void TappedEventHandler(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            ContentDialog contentDialog = new ContentDialog
            {
                Title = "저장",
                PrimaryButtonText = "Yes",
                SecondaryButtonText = "No",
                CloseButtonText = "Cancel",
                DefaultButton = ContentDialogButton.Primary,
                Content = "작업한 내역을 저장하시겠습니까?"
            };

            ContentDialogResult result = await contentDialog.ShowAsync();

            switch (result)
            {
                case ContentDialogResult.Primary: //Yes 버튼 누른 로직 구현
                    break;
                case ContentDialogResult.Secondary: //No 버튼 누른 로직 구현
                    break;
                case ContentDialogResult.None: // Cancel 버튼 누른 로직 구현
                    break;
            }
        }




※ 알아 두기
위의 코드 비하인드에서 ContentDialogButton과 ContentDialogResult위의 마우스 커서를 놓으면 다음과 같은 설명 창이 나타나 ContentDialogButton이나 ContentDialogResult 객체가 아니라 enum 데이터 타입이라는 것을 알 수 있습니다. 

enum은 enumeration(열거)의 약자로 enum 즉, 열거형 데이터 타입은 다음 코드와 같이 사용 가능한 값들을 미리 정의하여 0은 None으로 1은 Primary로 2는 Secondary와 같은 방식으로 코드화하여 사용하게 해줍니다. 


public enum ContentDialogResult
{
	Nont = 0,
	Primary = 1,
	Secondary = 2
}


C# 코드에서 미리 정의한 값들을 사용할 때는 ContentDialogResult.Primary와 같이 enum 데이터 타입의 뒤에 점(.)을 찍고 사용 가능한 값을 기술합니다. 비주얼 스튜디오에서 는 enum 데이터 타입의 이름 뒤에 점(.)을 찍으면 사용 가능한 값들을 다음 그림과 같이 보여주어 마치 객체처럼 사용할수 있게 해줍니다. 


사용할 값을 미리 지정하여 그 외의 값들은 사용할수 없도록 실수 방지(Fool Proof)를 해주고 0, 1, 2와 같이 의미를 알수 없는 상수값이 아닌 None, Primary, Secondary와 같이 우리가 알 수 있는 추상화된 명칭으로 보여주기 때문에 C#만이 아니라 대부분의 프로그램언어에서 채용하고 있는 방법입니다. 


반드시 알아두어야할 단순하지만 중요한 개념입니다. 이후에는 enum 데이터 타입에 대해 설명을 하지 않고 C#코드에서 사용하도록 하겠습니다. 



두 번째 방법은 대화상자를 별도로 디자인하여 만드는 방법입니다. C#코드로 만드는 대화 창과 달리 XAML 문법이 허용하는 한에서 화면 디자인이 가능합니다. 그래서 이번 예제에서는 AppBarButton을 하나 추가하고 빨간색으로 경고 문구도 추가해보았습니다. 다만 주의해야 할 것은 비주얼 스튜디오의 솔루션 탐색기의 Views 폴더에서 마우스 우측 버튼을 클릭하여 [추가] >[새 항목] 메뉴 항목을 연속으로 선택한 후 다음 그림과 같이 나타나는 새 항목 추가 화면에서 [콘텐츠 대화 상자]를 추가해야한다는 것입니다. 단순히 XAML Controlls Gallery 앱에서 코드를 복사하여 사용하는 것만으로는 기능이 동작하지 않습니다. 이때 화면의 이름은 ContentDialogExample로 통일하여 테스트 합니다. 

콘텐츠 대화상자가 생성된 후 XAML ContentDialog 템플릿이 제공하는 기본적인 코드 중 강조 표시된 부분을 다음의 XAML 코드 조각과 같이 수정하기 바랍니다. 코드 비하인드 조각에서 특이한 부분은 XAML 로 정의한 콘텐츠 대화상자를 마치 클래스처럼 사용하여 객체를 생성한다는 것입니다. 

XAML 화면은 바로 C#의 클래스라고 앞에서 여러번 설명했습니다. 이것이 XAML 을 다른 마크업 언어와 차별화하는 강력한 힘입니다. 

그러면 컨트롤 외관 조각에서 볼 수 있는 것과 같이 첫 번째 방법보다 조금 더 대화창다운 대화 창이 만들어지는 것을 확인할 수 있습니다. 



XAML 코드 조각(ContentDialogExample.xaml)

<ContentDialog
    x:Class="Hello_UWP_World.Views.ContentDialogExample"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Hello_UWP_World.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    
    Title="저장"
    PrimaryButtonText="Yes"
    SecondaryButtonText="No"
    CloseButtonText="Cancel">

    <Grid>
        <StackPanel>
            <StackPanel Orientation="Horizontal">
                <AppBarButton Icon="Save" Label="Save" />
                <StackPanel>
                    <TextBlock Text="작업한 내역을 저장하시겠습니까?" />
                    <TextBlock Text="작업한 내역들은 회사의 기밀사항들을 포함하고 있으니 파일의 보안에 유의하시기 바랍니다." Foreground="Red" FontSize="10" />
                </StackPanel>
            </StackPanel>
        </StackPanel>
    </Grid>
</ContentDialog>





코드 비하인드 조각(MainPage.xaml.cs)
        private async void TappedEventHandler(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            ContentDialogExample contentDialogExample = new ContentDialogExample();
            ContentDialogResult result = await contentDialogExample.ShowAsync();

            switch (result)
            {
                case ContentDialogResult.Primary: //Yes버튼 누른 로직 구현
                    break;
                case ContentDialogResult.Secondary: //No 버튼 누른 로직 구현
                    break;
                case ContentDialogResult.None: //Cancel 버튼 누른 로직 구현
                    break;
            }
        }



5 : Menus and Toolbars

Menus and Toolbars 으로 분류되는 컨트롤들은 메뉴나 툴바를 구성하기 위한 요소들입니다. 

그러나 PC와 달리 스마트폰이나 태블릿 등에서는 메뉴 기능을 거의 사용하지 않습니다. 그래서 Command를 설명할 때도 가장 필수적인 기능만 설명했었죠. 여기서도 UWP에서 사용하기를 권장할 만한 컨트롤들만 소개하겠습니다. 


※ 알아두기
UWP 프로그램에서는 미니멀리즘이 가장 중요한 디자인 원칙(Design Principle)입니다. 
UWP 프로그램을 개발하면서 PC에만 사용되는 디자인을 한다거나 스마트폰에서만 사용되는 디자인을 한다거나 게임기에서만 사용되는 디자인을 한다면 범용 프로그램의 개발에 실패하는 것을 의미하기 때문입니다. 그래서 성공적인 UWP 프로그램 개발을 위해서는 교집합의 원칙이 필요합니다. PC와 스마트폰, 태블릿, 게임기 등 모든 디바이스에서 교집합적 으로 공통으로 사용할 수 있는 컨트롤을 선택하여 사용하기 바랍니다. 

사용할 수 있는 컨트롤의 수가 부족해도 충분히 훌륭한 UWP 앱을 만들수 있을 것입니다. 반대로 컨트롤이 너무 많이 제공되어 디바이스별로 동작이 다르게 되거나 특정 디바이스에서는 오류가 발생하는 것을 경계해야 합니다. 이와 같은 디자인 원칙은 Xamarin의 경우에도 동일하게 적용됩니다. 안드로이드와 iOS, Windows 7 등에서 공통으로 사용할 수 있는 교집합 컨트롤들을 선택하여 사용해야 합니다. 한때 옴니아(Omnia)나 블랙잭(Blackjack)과 같은 마이크로소프트 계열의 스마트폰이 대세이던 시절이 있었습니다. 스마트폰을 켜면 Windows 로고가 나타나 Windows 운영체제를 가져다 사용했다는 것을 금방 알수 있었지요 블랙베리(BlackBerry)도 한 시대를 풍미하고 사라져갔습니다. 

필자는 그 이유가 스마트폰에 PC의 Windows 같은 다양한 기능의 운영체제를 적용했기 때문이라고 감히 판단합니다. 그러고는 iPhone의 등장으로 현재의 스마트폰 시장이 생겨났는데, 기능이 넘쳐나는 PC용 운영체제를 벗어던지고 버튼과 이미지 위주로 구성된 단순한 화면과 손가락을 밀고 당기는 동작 방식 등 단순하면서도 핵심적인 기능을 갖춘 운영체제를 제공했기 때문입니다. UWP 앱을 개발할 때 미니멀리즘은 아무리 강조해도 지나치지 않습니다. 




여기서는 Menus and Toolbars 으로 분류되는 컨트롤들중 모든 디바이스에서 공통으로 사용할수 있는 AppBarButton과 AppBarToggleButton을 설명하겠습니다. 




※[Menus and Toolbars] > [AppBarButton]. [AppBarToggleButton]

AppBarButton 컨트롤은 투명 바탕에 흑백 이미지와 이에 부합하는 문구를 함께 나타나게 해주는 버튼입니다. AppBarButton 컨트롤은 Content 속성을 사용하지 않고 시스템이 제공하는 이미지를 선택하기 위해 Icon 속성을 사용합니다. 그리고 보여줄 문구를 지정하기 위하여 Label 속성을 사용합니다. 비주얼 스튜디오에서 Icon 속성의 값을 입력할 때 XAML 프레임워크가 기본으로 제공하는 이미지의 종류를 Accept부터 ZoomOut 까지 모두 보여주고 개발자가 선택하게 하니 사용가능한 이미지를 모두 기억할 필요가 없습니다. 그리고 필요에 따라서 파일에 저장된 이미지를 사용할 수 있습니다. 

AppBarToggleButton 컨트롤은 Button과 같이 동작하지 않고 CheckBox와 같이 동작하는데 선택되면 흑백 버튼이 파란색 버튼으로 변경됩니다. AppBarButton과 AppBarToggleButton 을 수평으로 나열한 후 버튼 사이에 AppBarSeparator를 배치하면 AppBar가 만들어집니다. 




XAML 코드 조각

    <StackPanel Orientation="Horizontal">
        <AppBarButton Icon="OpenFile" Label="열기" />
        <AppBarSeparator />
        <AppBarButton Icon="Save" Label="저장" />
        <AppBarSeparator />
        <AppBarButton Label="종료">
            <AppBarButton.Icon>
                <BitmapIcon UriSource="/Assets/StoreLogo.png" />
            </AppBarButton.Icon>
        </AppBarButton>
        <AppBarSeparator />
        <AppBarToggleButton Icon="DisableUpdates" Label="수정금지" />
    </StackPanel>




6 : Navigation

Navigation 으로 분류되는 컨트롤들은 XAML 화면을 전환하는 기능을 제공합니다. Prism MVVM 프레임워크에서 Navigation을 제공하기 때문에 여기서는 Pivot이라고 부르는 일종의 Tab View 컨트롤을 설명하겠습니다. 


※[Navigation] > [Pivot]

Pivot 컨트롤은 XAML 기반의 대화형 화면을 구성하여 사용자와 상호 작용하게 해줍니다. 



XAML 코드 조각

    <Pivot Title="Pivot Tab View">
        <PivotItem Header="Tab View 1">
            <StackPanel>
                <TextBlock Text="내용 1" />
            </StackPanel>
        </PivotItem>
        <PivotItem Header="Tab View 2">
            <StackPanel>
                <TextBlock Text="내용 2" />
            </StackPanel>
        </PivotItem>
    </Pivot> 




7 : Scrolling

Scrolling로 분류되는 컨트롤들은 보여줄 내용이 컨트롤의 크기보다 클 때 ScrollBar를 이용하여 이동하면서 보게 하는 등 적절한 조취를 취하게 해줍니다. 


※[Scrolling] > [ScrollViewer]

XAML 객체의 크기가 상위 요소보다 클 때는 ScrollViewer 요소를 사용하여 수평 ScrollBar나 수직 Scroll Bar를 사용합니다. 수직 Scroll Bar는 하위 요소의 높이가 상위 요소의 높이보다 클 때 자동으로 나타나는데 수평 Scroll Bar는 HorizontalScrollBarVisibility 속성을 Visible로 지정해야 나타납니다. Scroll Bar는 모두 익숙할 것으로 판단하여 컨트롤 외관 조각을 보여주는 것은 생략합니다. 




XAML 코드 조각

<ScrollViewer HorizontalScrollBarVisibility="Visible">
	<Ellipse Width="1200" Height="700" Fill="Magenta" />
</ScrollViewer>





8 : Status and Info

Status and Info 로 분류되는 컨트롤들은 작업의 상태나 특정 화면 요소에 대한 부가 정보를 보여줍니다. 


※[Status and Info] > [ProgressBar], [ProgressRing]

ProgressBar와 ProgressRing 컨트롤은 앱이 어떤 작업을 하고 있다는 상태를 보여줍니다. ProgressBar는 IsIndeterminate 속성을 True로 설정하면 ProgressRing과 같이 무한 반복의 형태로 무엇인가가 진행되고 있다는 것을 알려줍니다. IsIndeterminate 속성을 지정하지 않고 Value 속성에 0을 지정하면 작업이 전혀 지정되지 않은 상태의 빈 막대를 보여줍니다. Value 속성에 1에서 100사이의 값을 지정하면 각각 지정된 숫자만큼의 완료된 상태를 보여주는 막대를 보여줍니다. Value 속성 값을 코드 비하인드를 통하여 프로그램 로직으로 지정하면 특정 작업을 진행한 만큼의 상태를 보여주는 막대를 만들어 보여줄 수 있습니다. 



XAML 코드 조각

    <StackPanel>
        <TextBlock Text="파일 다운 로드 중 (ProgressBar)" />
        <ProgressBar Width="130" IsIndeterminate="True" />
        <TextBlock Text="파일 다운 로드 중 (ProgressRing)" />
        <ProgressRing IsActive="True" />
        <TextBlock Text="파일 다운 로드 중 (ProgressBar) " />
        <ProgressBar x:Name="fileDownloadProgressBar" Width="130" />
    </StackPanel> 


코드 비하인드 조각

        //초깃값을 설정하는 코드
        private void Page_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            //편의상 Loaded 이벤트 핸들러에서 Value 속성의 초기값을 지정하였습니다.
            //실제 업무 환경에서 ProgressBar를 활용할 때에는
            //특정 작업의 상태를 알 수 있는 위치에서
            // 1~100사이의 값을 작업의 진도에 맞게 설정하여야 합니다.
            fileDownloadProgressBar.Value = 50;
        }




※[Status and Info] > [ToolTip]

ToolTip 컨트롤은 특정 화면 요소에 대한 Tip 정보를 보여줍니다. ToolTip 은 일종의 Content Control로 Tip의 내용으로 문자열뿐만 아니라 XAML 화면도 사용할 수 있습니다. 



XAML 코드 조각

    <StackPanel>
        <Button Content="Show Tooltip" ToolTipService.ToolTip="Tool Tip" />
        <Image Source="/Assets/Lock.png" HorizontalAlignment="Left" Width="150" Height="100" ToolTipService.ToolTip="Tool Tip" />
        <Button Content="Click" Click="Button_Click">
            <ToolTipService.ToolTip>
                <Ellipse Width="10" Height="20" Fill="Green" />
            </ToolTipService.ToolTip>
        </Button>
    </StackPanel>