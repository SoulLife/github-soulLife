6 : Style
Style은 속성의 집합으로 별도 정의한 후 동일한 스타일을 적용할 화면 요소에 반복하여 적용하는 특별한 요소입니다. 

다음은 작은 파란색 버튼 3개를 그려주는 XAML 코드인데 Button 요소에 동일한 Background, Height, Width 및 Margin 속성이 반복하여 사용되었습니다. 즉 Style을 사용하지 않는 코드입니다. 


MainPage.xaml

    <StackPanel>
        <Button Background="Blue" Height="20" Width="50" Margin="1" />
        <Button Background="Blue" Height="20" Width="50" Margin="1" />
        <Button Background="Blue" Height="20" Width="50" Margin="1" />
    </StackPanel>



※ Named Style

위에서 언급된 코드 중복의 문제는 Style을 Resource로 정의하여 사용함으로써 해결할 수 있습니다. 그리고 일반적으로 Style은 Resource로 정의하고 싶은 속성 값은 Setter 요소의 집합으로 지정하여 활용합니다. 


이제 Style을 사용하지 않는 코드를 다음 코드와 같이 Style요소를 사용하도록 수정합니다. 기본적인 문법은 Resource와 동일하니 Style 요소와 Setter 요소를 설명하겠습니다. 



MainPage.xaml

    <StackPanel>
        <StackPanel.Resources>
            <Style x:Key="smallBlueButton" TargetType="Button">
                <Setter Property="Background" Value="Blue"></Setter>
                <Setter Property="Height" Value="20"></Setter>
                <Setter Property="Width" Value="50"></Setter>
                <Setter Property="Margin" Value="1"></Setter>
            </Style>
        </StackPanel.Resources>
        <Button Style="{StaticResource smallBlueButton}"/>
        <Button />
        <Button Style="{StaticResource smallBlueButton}"/>
    </StackPanel>


Style은 다른 요소에서 가져다 사용하는 요소이므로 x네임스페이스의 Key 속성을 사용하여 이름을 smallBlueButton 으로 지정했습니다. Style을 이름으로 구분하기 때문에 Named Style즉 이름으로 구분하는 스타일이라고 부릅니다. TargetType은 Style을 적용할 요소의 종류를 지정하는데 여기서는 Button이라고 지정했습니다. Setter 라는 요소는 Style의 속성값을 지정하기 위하여 사용했습니다. 그러고는 Resource를 가져다 사용하는 방법과 동일하게 가져다 사용했습니다. smallBlueButton이라는 이름으로 추상화되어 이 Style이 작은 파란색 버튼(Small Blue Button)이라는 것도 쉽게 파악할 수 있습니다. 




※ Element Typed Style

이번에는 적용될 요소의 유형으로 구분되는 스타일인 Element Typed Style에 관하여 알아봅시다. 위의 Named Style 을 사용한 프로그램 코드와 같은 방법으로 Style을 정의하여 적용했을 때 가운데 버튼에 Style이 적용되지 않은 것을 눈치채셨나요? Named Style을 사용하면 당연히 이름이 지정된 요소에만 Style이 적용됩니다. 그런데 실제로  프로그램을 개발하다 보면 특정 Panel이나 Grid, Page, 심지어는 해당 앱 안에 있는 모든 요소의 Style을 통일하고 싶을 때가 있습니다. 이럴 때 Element Typed Style을 사용하여 지정된 유형의 요소에 동일한 스타일을 지정합니다. XAML 코드로 작성한 모든 요소에 일일이 Style 요소를 지정하는 것은 좋은 방법이 아닙니다. 


다음의 Element Typed Style을 사용한 프로그램 코드에는 앞에서 살펴본 Named Style을 사용한 프로그램 코드와 두 가지 차이가 있습니다. 




MainPage.xaml

    <StackPanel>
        <StackPanel.Resources>
            <Style TargetType="Button">
                <Setter Property="Background" Value="Blue"></Setter>
                <Setter Property="Height" Value="20"></Setter>
                <Setter Property="Width" Value="50"></Setter>
                <Setter Property="Margin" Value="1"></Setter>
            </Style>
        </StackPanel.Resources>
        <Button />
        <Button />
        <Button />
    </StackPanel>


첫째 Style 요소를 정의할 때 x:Key="smallBlueButton" 코드를 제외하여 이름을 주지 않았고 둘 째 Button 요소를 정의할 때에도 <Button />과 같이 Style Resource이름을 지정하지 않았다는 것입니다. 이와 같은 Style을 Element Typed Style이라고 부르는데 이 예제의 경우 모든 Button 요소가 작은 파란색 버튼으로 나타나게 됩니다. 





※ PageStyle

지금까지 Prism 프레임워크가 기본으로 제공하는 Page 요소의 XAML 코드 중에서 Style="{StaticResource PageStyle}" 속성의 설명을 미루고 있었는데, 이제는 설명할 수 있습니다. 이 속성은 Page 요소의 스타일로 PageStyle이라는 Resource를 정적(Static)으로 사용한다는 의미입니다. WPF에는 동적(Dynamic) Resource도 있었는데 UWP에서는 사라지고 없습니다. 

그런데 PageStyle이 무엇인지 알 수 없습니다. 알고 싶으면 다음 그림과 같이 PageStyle 이라는 이름위에 마우스 커서를 올린 후 오른쪽 버튼을 클릭하여 PageStyle에서 동작하는 팝업 메뉴를 열고[정의로 이동]을 선택하면 됩니다. 단축키 <F12> 를 누르면 더 쉽게 이동할수 있습니다. 


그러면 다음 그림과 같이 PageStyle을 정의한 XAML 프로그램 코드가 나타납니다. 당연히 PageStyle은 Style 요소로 정의되어 있습니다. 그런데 Style의 값이 여기서 보이지 않고 다시 Resource로 정의되어 있습니다. 그리고 Resource를 가져다 사용할 때 StaticResource 마크업 확장을 사용하지 않고 ThemeResource 마크업 확장을 사용하고 있습니다. ThemeResource는 앱의 프로그램 코드에서 정의하는 StaticResource와 달리 시스템에서 제공하는 Resource 입니다. Theme라는 용어는 PC에서 사용하는 용어인 화면 테마(Theme)에서 온것임을 쉽게 짐작할수 있습니다. 

ApplicationPageBackgroundThemeBrush Resource에 마우스 커서를 두고 <F12> 키를 누르거나 팝업 메뉴를 통해 [정의로 이동] 메뉴 아이템을 클릭해봅니다. 

그러면 다음 그림과 같이 ApplicationPageBackgroundThemeBrush를 정의한 XAML 코드가 나타납니다. 다음 그림 우측 상단의 파일 이름을 보면 ResourceDictionary파일이 Prism의 Styles 폴더에서 정의된 것이 아니라 generic.xaml 이라는 것을 알수 있는데 이 파일은 시스템 Resource를 정의해놓은 파일입니다. 아무튼 우리가 찾는 ApplicationPageBackgroundThemeBrush Resource는 <SolidColorBrush x:Key="ApplicationPageBackgroundThemeBrush" Color="#FFFFFFFF"/> 와 같이 정의되어 있습니다. SolidColorBrush 요소의 Color 속성이 "#FFFFFFFF"인 것으로 보아 Page의 배경색은 하얀색인 것을 알 수가 있습니다. 

generic.xaml 파일의 위치는 비주얼 스튜디오에서 편집 창 오른쪽 상단의 파일명 탭위에 마우스를 올려서 확인할 수 있습니다. 필자의 PC 환경에서는 C:\Program Files (x86)\Windows Kits\10\DesignTime\CommonConfiguration\Neutral\UAP\10.0.18362.0\Generic 폴더에 있는 것으로 확인됩니다. 




※ Style의 확장

기존 Style을 확장하여 새로운 Style을 만들고 싶으면 새로운 Style을 정의할 때 BasedOn="{StaticResource smallBlueButton}"> 문장과 같이 BasedOn 속성에 확장할 Style Resource를 지정하면 됩니다. 다음 코드를 참조하기 바랍니다. smallBlueButtonBordered라는 이름으로 작은 파란색 버튼에 검정 테두리를 추가하는 Style을 만든후 가운데 버튼에 적용해보았습니다. 




MainPage.xaml

    <StackPanel>
        <StackPanel.Resources>
            <Style TargetType="Button" x:Key="smallBlueButton">
                <Setter Property="Background" Value="Blue"></Setter>
                <Setter Property="Height" Value="20"></Setter>
                <Setter Property="Width" Value="50"></Setter>
                <Setter Property="Margin" Value="1"></Setter>
            </Style>
            <Style x:Key="smallBlueButtonBordered" TargetType="Button" BasedOn="{StaticResource smallBlueButton}">
                <Setter Property="BorderBrush" Value="Black"></Setter>
            </Style>
        </StackPanel.Resources>
        <Button Style="{StaticResource smallBlueButton}" />
        <Button Style="{StaticResource smallBlueButtonBordered}" />
        <Button Style="{StaticResource smallBlueButton}" />
    </StackPanel>




※ Style의 적용 순서와 적용 범위

Style도 Resource이기 때문에 "Resource의 적용 순서와 적용 범위"절에서 언급한 것과 같이 Resource가 정의된 요소의 하위 계층에 위치한 요소들이 적용 범위이며 Style을 사용할 요소의 상위 계층 중에서 최하위에 정의된 Style을 먼저 사용합니다. 



7 : 이벤트 핸들러와 코드 비하인드


※ 이벤트 핸들러

Hello UWP World 예제 프로그램을 함께 작성하면서 Loaded Event 가 발생할 때 TextBlock 요소를 숨기는 방법을 설명했습니다. 이번에는 사각형을 누르면 사각형의 가로 크기가 조금씩 커지는 예제를 작성하며 XAML의 이벤트 처리 방식을 좀 더 깊이 있게 이해해보겠습니다. 


우선 다음의 XAML 코드를 봅시다. 설명이 필요 없을만큼 쉬운 코드로 Tapped="Rectangle_Tapped"와 같이 Tapped 이벤트 핸들러를 지정한 것을 주의깊게 보기 바랍니다. 



MainPage.xaml

    <StackPanel>
        <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="사각형의 크기를 키우려면 사각형을 손가락으로 탭하거나 Mouse의 왼쪽 버튼으로 클릭하세요." />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Red" Tapped="Rectangle_Tapped" />
    </StackPanel>

UWP는 PC용 프로그램과 태블릿용 프로그램, 스마트폰용 프로그램을 동일하게 개발하기 때문에 Click 이벤트가 아니라 Tapped 이벤트를 사용했습니다. Tapped 이벤트는 화면을 탭(Tap)하는 경우와 마우스의 왼쪽 버튼을 누를 때 동일하게 동작합니다. 화면을 다루는 코드는 뷰모델(ViewModel)을 사용하는 것보다 코드 비하인드를 사용하는 것이 편하니 뷰모델(ViewModel)을 사용하지 않고 코드 비하인드를 사용하여 설명하겠습니다. 만약에 이벤트 핸들러를 추가하는 방법과 이벤트 핸들러가 추가된 코드 비하인드를 확인하는 방법이 생각나지 않는다면 Hello UWP World 프로그램 예제를 복습하기 바랍니다. 

코드 비하인드에 위치한 Rectangle 요소의 이벤트 핸들러 프로그램은 매우 직관적 입니다. 



MainPage.xaml.cs

using System;


using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Shapes;
using XAML_Test.ViewModels;

namespace XAML_Test.Views
{
    public sealed partial class MainPage : Page
    {
        private MainViewModel ViewModel => DataContext as MainViewModel;

        public MainPage()
        {
            InitializeComponent();
        }

        private void Rectangle_Tapped(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            Rectangle clickedRectangle = sender as Rectangle;
            clickedRectangle.Width += 10;
        }
    }
}


여기서 sender는 이벤트가 발생하는 요소 객체입니다. Rectangle clickedRectangle = sender as Rectangle; 문장으로 요소 유형을 Rectangle 로 변환한 다음 변수 객체에 저장합니다. 그리고 clickedRectangle.Width += 10; 문장을 기술하여 클릭할 때마다 넓이를 10씩 증가시킵니다. XAML 요소는 C#의 객체에 대응되고 속성은 C#의 객체 멤버에 대응된다는 것은 앞에서 설명했습니다. 

그런데 Rectangle 글자 아래에 빨간색 줄이 그어져 문법 오류가 발생했음을 알립니다. 


Rectangle 글자에 마우스를 위치시킨후 <Ctrl> + <.>키를 입력해봅니다. 그러면 비주얼 스튜디오가 문법오류를 해결하기 위한 방법을 다음 그림과 같이 제시합니다. 우측 상단을 보니 네임스페이스를 선언하지 않은 것이 오류의 원인이라는 것을 알 수 있습니다. 네임스페이스 두개를 대안으로 제시하는데 우리는 XAMl 프로그램과 연동된 프로그램을 작성하고 있으니 using System.Drawing이 아니라 using Windows.UI.Xaml.Shape;을 선택하여야 오류가 해결되리라는 것을 어렵지 않게 판단할 수 있습니다. 이제 프로그램을 실행하여 사각형을 클릭 혹은 탭할 때마다 크기가 증가하는지 확인해봅시다. 




※ Routed Event
다음 그림에서 Routed Event(이벤트 전파)의 개념도를 확인합시다. XAML은 3가지 종류의 이벤트를 제공합니다. 

* 첫째 버블링 이벤트(Bubbling Event)는 비누 거품이 일어나듯이 하위 요소에서 발생한 이벤트가 상위 요소로 퍼져 나갑니다. 

* 둘째, 다이렉트 이벤트(Direct Event)는 이벤트가 발생한 요소에서만 이벤트의 효력이 있습니다. 

* 셋째 터널링 이벤트(Tunneling Event)는 상위 요소에서 발생한 이벤트가 하위 요소로 퍼져나갑니다. 


버블링 이벤트(Bubbling Event)의 대표적인 예가 Tapped와 Click 이벤트입니다. 하위 요소를 클릭하면 하위 요소를 포함한 상위 요소도 클릭된 격이니 직관적으로 버블링 이벤트(Bubbling Event)라는 것을 판단할 수 있으며 대부분의 이벤트가 여기에 해당합니다. 

다이렉트 이벤트(Direct Event)의 대표적인 예는 PointerEntered와 PointerExited 이벤트입니다. 이 두 이벤트는 PC용 프로그램을 개발할 때의 MouseEnter와 MouseLeave 이벤트에 해당하는데 UWP는 PC용 프로그램만을 위한 프로그램 개발 방법이 아니라 태블릿과 스마트폰을 위한 프로그램 개발에도 사용되니 Mouse대신 Pointer라는 용어를 사용한 것입니다. 이 이벤트들 또한 하위 객체를 빠져나갔다고 상위 객체를 빠져나간 것이 아니고 상위 객체에 진입했다고 하위 객체에 진입한 것은 아니니 직관적으로 다이렉트 이벤트(Direct Event)임을 판단할 수 있습니다. 

터널링 이벤트(Tunneling Event)즉, 상위 요소에서 발생한 이벤트가 하위 요소로 전달되는 사례로는 PreviewKeyDown 이나 PreviewKeyUp 처럼 사전 처리를 담당하는 이벤트가 사우이 요소에서 하위 요소로 전파되는 것들을 들 수 있습니다. 


Routed Event를 예제를 통하여 이해하기 위해서 이번에는 다음 코드와 같이 사각형을 두 개더 추가해보겠습니다. 빨간색 사각형에 이어 초록색과 파란색 사각형을 추가했습니다. 이 초록색 사각형과 파란색 사각형도 앞선 예제의 빨간색 사각형처럼 손가락으로 탭하거나 마우스 왼쪽 버튼을 눌렀을 때 커지게 할 것입니다. 



MainPage.xaml

    <StackPanel>
        <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="사각형의 크기를 키우려면 사각형을 손가락으로 탭하거나 Mouse의 왼쪽 버튼으로 클릭하세요." />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Red" Tapped="Rectangle_Tapped" />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Green" />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Blue"  />
    </StackPanel>

이를 위해 각각의 사각형에 대하여 Tapped 이벤트 핸들러를 만들어 빨간색 사각형의 Tapped 이벤트 핸들러의 C# 코드를 복사하여 붙여넣는 방법을 사용할수 있습니다. 조금 더 좋은 방법은 이벤트 핸들러의 코드를메소드로 분리한 후 초록색과 파란색 사각형의 이벤트 핸들러에서 호출하여 사용하게 하는 것입니다. 하지만 XAML의 이벤트의 Routed Event의 특성을 활용하면 더욱 효과적인 방법으로 세개의 사각형에 적용되는 이벤트 핸들러를 구현할 수 있습니다. Bubbling Event인 Tapped 이벤트가 상위 요소로 전파되어 갈 때 StackPanel요소의 Tapped 이벤트 핸들러에서 이를 구현하는 것입니다. 

다음 XAML과 C# 코드를 봅시다. 



MainPage.xaml

    <StackPanel Tapped="StackPanel_Tapped">
        <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="사각형의 크기를 키우려면 사각형을 손가락으로 탭하거나 Mouse의 왼쪽 버튼으로 클릭하세요." />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Red" Tapped="Rectangle_Tapped" />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Green" />
        <Rectangle Width="100" Height="50" HorizontalAlignment="Left" Fill="Blue"  />
    </StackPanel>



MainPage.xaml.cs

        private void Rectangle_Tapped(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            Rectangle clickedRectangle = sender as Rectangle;
            clickedRectangle.Width += 10;
        }

        private void StackPanel_Tapped(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            Rectangle clickedRectangle = e.OriginalSource as Rectangle;
            clickedRectangle.Width += 10;
        }


이벤트 핸들러의 이름이 StackPanel_Tapped인 것으로 보아 StackPanel요소의 이벤트 핸들러임을 알 수 있습니다. 앞의 C#코드로 구현된 이벤트 핸들러와 비교해보니 딱 한 군데가 수정되었는데 sender as Rectangle이  e.OriginalSource as Rectangle 로 수정된 것입니다. StackPanel의 sender인자는 StackPanel 요소 자신을 의미하고, 클릭된 요소에 대한 정보가 Windows.UI.Xaml.Input.TappedRoutedEventArgs의 OriginalSource 속성에 저장되어 이벤트 핸들러로 넘어오기 때문에 코드를 살짝 수정한 것입니다. 그러면 앱을 테스트 해봅시다. 


그런데 앱의 동작이 이상합니다. 빨간색 사각형을 누르면 크기가 다른사각형의 두 배만큼 커집니다. 이는 빨간색 사각형을 탭하는 경우 Rectangle의 Tapped 이벤트 핸들러와 StackPanel의 Tapped 이벤트 핸들러가 모두 실행되기 때문입니다. 

이것을 해결하는 방법은 Rectangle의 이벤트 핸들러를 주석처리하거나 Rectangle의 이벤트 핸들러를 처리한 후 상위 요소로 확장되어 가지 않도록 다음 코드와 같이 e.Handled = true; 문장을 Rectangle 이벤트 핸들러 뒤에 추가하는 방법이 있습니다. 

        private void Rectangle_Tapped(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            Rectangle clickedRectangle = sender as Rectangle;
            clickedRectangle.Width += 10;
            e.Handled = true;
        }




※ 알아두기:
앞에서 언급한 Rectangle의 이벤트 핸들러에서 ((Rectangle)sender).Width += 10;라는 문장을 눈여겨보기 바랍니다. Hello UWP World에서 사용했던 방법인데 clickedRectangle 변수를 정의하지 않고 sender를 Rectangle로 형변환한 후 Width의 값을 바로 증가시키고 있습니다. 

동작은 앞에 주석 처리된 두 줄의 C# 코드의 수행 결과와 동일한데 어떤 코딩 방법이 더 좋은 방법일까요? 앞의 코드에서는 sender의 의미가 클릭된 요소인 것을 알수 있도록 이미 개발 도구 개발자에 의하여 추상화된 개념이기 때문에 재사용할 필요가 없는 변수를 정의하지 않은 ((Rectangle)sender).Width += 10; 가 더좋은 코딩이라고 할 수 있습니다. 

하지만 StackPanel이벤트 핸들러에서 ((Rectangle)e.OriginalSource).Width += 10; 와 같이 코딩했다면 이 경우에도 더좋은 코딩이라고 할 수 있을까요? ((Rectangle)e.OriginalSource)는 무슨 의미인지 한참 생각해야 하는 반면 Rectangle clickedRectangle = e.OriginalSource as Rectangle; 문장에서는 변수 객체가 clickedRectangle 이라고 의미를 추상해주고 있어서 가독성을 높여주니 더 좋은 코딩이라고 할 수 있겠습니다. 

물론 변수를 추가로 만들지 않아야 할 만큼 수행 속도에 민감한 경우라면 더 좋은 코딩이라고 할수 있겠지만 이와 같은 경우에는 앞의 코드와 같이 의미를 명확히 알수 있도록 변수를 정의하여 사용하는 코드를 주석으로 남겨놓고 효율적인 코드를 추가하는 것이 좋은 Performance Tunning습관이 됩니다. 주석으로 가독성을 확보하고 추가된 코드로 수행 속도를 확보하기 때문입니다. 