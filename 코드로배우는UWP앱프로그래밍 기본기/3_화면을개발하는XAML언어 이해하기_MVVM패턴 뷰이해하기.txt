2 : 화면을 개발하는 XAML 언어 이해하기

Hello UWP World를 화면에 보여주는 가장 간단한 방법은 MVVM 프로그램 패턴 중 뷰(View)를 사용하는 것입니다. UWP 프로젝트의 Views 폴더에는 MainPage.xaml 파일이 있는데 이것은 프레임워크에 의하여 자동으로 생성된 뷰(View)프로그램 파일로 XAML이라는 XML 기반의 마크업 언어를 사용합니다. 마크업 언어는 프로그램 로직을 구현하는 일반 프로그램과 달리 화면을 그리는 것과 같이 무엇인가를 표시해 두는 언어라고 이해하면 무리가 없습니다. 프로그램을 편집하기 위하여 MainPage.xaml 파일을 더블클릭합니다. 


XAML 프로그램은 디자인 보기와 XAML 코드 보기, 두 가지 화면으로 구성되는데 사실 이 두개는 형태만 다를 뿐, 같은 프로그래밍 언어의 서로 다른 표현입니다. 즉 XAML 코드 보기에는 XAML 언어를, 디자인 보기에서는 XAML 언어에 의하여 생성되는 화면을 보여줍니다. 


우선 UWP Prism 프레임워크가 뼈대로 제공하는 XAML 코드를 살펴보겠습니다. 


MainPage.xaml

<Page
    x:Class="Hello_UWP_World.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm"
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" 
    mc:Ignorable="d">
    <Grid x:Name="ContentArea" Margin="{StaticResource MediumLeftRightMargin}">
        <Grid.RowDefinitions>
            <RowDefinition Height="48" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Row="0"
            x:Uid="Main_Title"
            Style="{StaticResource PageTitleStyle}" />
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
        </Grid>
    </Grid>
</Page>



XAML 은 웹 프로그램을 만들 때 사용하는 HTML 이나 모바일 앱을 만들 때 사용하는 XML과 거의 동일한 방식으로 표현됩니다. 화면의 구성 요소(Element)가 <와>으로 둘러싸인 태그로 시작하여 </와>으로 둘러싸인 태그로 종료되며, 각 구성 요소는 다른 구성 요소를 포함할 수 있어 계층적으로 나타납니다. 


UWP Prism 프레임워크가 뼈대로 제공하는 XAML 프로그램을 보니 위의 코드와 같이 <Page> 태그로 시작하여 </Page> 태그로 끝납니다. 백문이 불여일견이니 <Page>태그를 마우스로 클릭해 볼까요? 디자인 보기가 다음 그림과 같이 변경되어 Page 요소의 경계선이 파랗게 표시됩니다. 이와 같이 Page 요소는 화면의 시작과 끝을 나타냅니다. 


다음에는 첫 번째 <Grid> 태그를 클릭해봅니다. 다음 화면의 디자인 보기에 파랗게 표시되는 화면을 보니 Grid 구성 요소는 상단에 좁은 격자행 하나와 하단에 넓은 격자행 하나를 포함하는 최상위 격자인 것을 알 수 있습니다. Grid는 Page 요소보다 미세하게 작은 크기로 Page 요소의 안쪽에 배치되어 있는 것을 확인할 수 있습니다. 


다음에는 <TextBlock> 태그를 클릭해봅니다. 다음 화면의 디자인 보기에 파랗게 표시되는 화면을 보니 TextBlock 구성 요소는 상단의 좁은 격자행 안에 들어 있는 문자열 출력 공간입니다. 


다음에는 두 번째 <Grid> 태그를 클릭해봅니다. 다음 화면과 같이 하단의 넓은 격자행 안에 들어 있는 또 하나의 격자를 파랗게 표시합니다. 


다음 코드는 뼈대로 제공된 XAML 코드 중 일부입니다. 
<Page
    x:Class="Hello_UWP_World.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm"
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" 
    mc:Ignorable="d">
    <Grid x:Name="ContentArea" Margin="{StaticResource MediumLeftRightMargin}">
        <Grid.RowDefinitions>
            <RowDefinition Height="48" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Row="0"
생략


눈여겨볼 부분은 <Grid.RowDefinitions> 태그입니다. 첫 번째 Grid 요소 즉 맨 바깥쪽 Grid 요소를 <RowDefinition> 태그를 활용하여 두 개의 행(Row)으로 구분했습니다. 이 중에서 상단의 행은 높이(Height)를 48Pixel로 지정하고 두 번째 행은 높이를 *로 지정하여 남은 공간을 모두 할당합니다. Height = "48"이나 Height = "*" 와 같이 표현되는 것을 XAML에서는 특성(Attribute)혹은 속성(Property)이라고 부릅니다. 

그런데 <Grid.RowDefinitions> 태그를 보니 태그의 끝은 </태그명> 형태로 끝나지 않아도 되고 />로 끝내도 상관없습니다. 다른 화면 구성 요소를 포함하지 않는 말단의 요소는 이렇게 끝날수 있습니다. 


다음 코드를 봅시다. 

MainPage.xaml

생략
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Row="0"
            x:Uid="Main_Title"
            Style="{StaticResource PageTitleStyle}" />
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <!--
생략


<TextBlock Grid.Row="0"과 같이 지정하여 TextBlock 요소를 첫 번째 Grid 요소의 첫 번째 행에 연결하고 <Grid Grid.Row="1"와 같이 지정하여 두 번째 행에 두 번째 Grid 요소를 연결합니다(많은 프로그램 언어에서 0은 첫 번째를 1은 두 번째를 의미합니다) 첫 번째 행의 TextBlock은 프레임워크에 의하여 화면의 제목을 출력하는 데 사용되고, 두 번째 행의 Grid는 사용자 프로그램을 추가할 수 있도록 프레임워크가 제공하는 것입니다. 그러니 프레임워크가 제공한 프로그래밍 코드를 변경할 때는 신중해야 합니다. 


XAML 언어가 화면을 구성하는 원리가 별것 아니라는 것을 화면의 구성 요소에 속성을 지정하는 방법을 통해서 이해해보겠습니다. XAML 코드 보기에서 <TextBlock> 태그를 클릭한 후 다음 그림과 같은 비주얼 스튜디오 속성 창을 확인합니다. 

이 화면 구성 요소의 형식은 TextBlock 요소이고, 브러시, 레이아웃, 텍스트 등으로 분류되는 속성 그룹들을 가지고 있습니다. 여기서 속성은 XAML 구성 요소가 가지는 특성과 같은 의미로 이해하면 됩니다. 다른 마크업 언어에서는 특성(Attribute)이라는 용어를 더 많이 사용하지만 Windows 프로그래밍을 할 때는 속성이라는 표현을 더 많이 사용하니 이제부터 속성이라는 표현으로 동일하여 사용하겠습니다. 


이번에는 속성 창의 상단에 위치한 검색란에 Grid.Row라고 입력합니다. 다음 그림과 같이 속성창에 나타나는 값을 확인해보니 레이아웃의 Row 속성에 0이라는 값이 들어가 있습니다. 이는 XAML로 Grid.Row="0" 과 같이 표현할 수 있습니다. 

XAML 코드 보기에서 두 번째 <Grid> 태그를 선택해 봅니다. 이제 속성 창이 TextBlock 요소의 속성이 아닌 Grid 요소의 속성을 보여주는 것을 확인할 수 있습니다. 다음 그림을 확인해보니 레이아웃의 Row 속성에 1이라는 값이 들어가 있습니다. 이는 XAML 언어로 Grid.Row="1" 와 같이 표현할 수 있습니다. 


독자 여러분 이제 XAML 언어가 화면을 구성하는 원리를 이해하셨나요?




3: MVVM 프로그램 패턴 중 뷰 이해하기

그러면 Hello UWP World 사용자 프로그램을 두 번째 Grid에 추가해봅니다. 가장 쉬운 방법은 XAML 코드 보기에 하드코딩(Hard Coding)하는 것입니다. 즉 데이터를 변수나 데이터베이스 서버등에서 가져와 보여주는 방식이 아닌 화면에 직접 나타내는 가장 간단한 방법으로 구현하겠습니다. 


프로그램 코드는 XAML 코드 보기의 초록색 주석 하단에 추가로 작성합니다. 주석은 프로그램 명령어가 아닌 일종의 설명문으로 프로그램의 수행에 영향을 미치지 않는 텍스트입니다. XAML과 HTML과  XML은 모두 <!-- 기호로 주석을 시작하고 --> 기호로 주석을 닫습니다. C나 C++ 혹은 C# 언어의 /* 과 */ 기호와 같은 역할을 하는 것으로 이해하면 됩니다. 아쉽지만 //기호와 같이 기호 뒤의 문자열을 모두 주석처리하는 기능은 마크업 언어에는 존재하지 않습니다. 


우리가 작성할 프로그램은 Hello UWP World 라는 문자열을 화면에 보여주는 것이니 TextBlock 요소를 사용하겠습니다. 


화면의 구성 요소를 추가하는 방법은 두 가지 입니다. 첫 번째는 XAML 언어를 사용해서 추가할 화면의 구성 요소가 위치할 프로그램 부분에 코딩하는 방법이고, 두 번째는 도구 상자에서 추가할 화면 구성 요소를 선택하여 디자인 보기에 끌어다 놓는 드래그 앤드 드롭(Drag and Drop)방식입니다. 


우선 첫 번째 방법을 사용하여 초록색 주석 하단에 <TextBlock> 이라는 태그를 입력합니다. 편집기가 자동으로 <TextBlock></TextBlock> 와 같이 TextBlock 요소를 추가하기 위한 문장을 자동으로 완성해줍니다. 간단히 표현하기 위해서는 <TextBlock /> 와 같이 수정해도 무방합니다. 동일한 의미이니까요. 

MainPage.xaml

생략
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
            <TextBlock></TextBlock>
        </Grid>
생략

두 번째 방법으로 TextBlock 요소를 추가하기 위하여 다음 그림과 같이 좌측 도구상자에서 TextBlock 요소를 마우스로 선택한 후 디자인 뷰의 두 번째 Grid행으로 드래그앤드 드롭합니다. 

그러면 다음 코드와 같이 TextBlock 요소만 XAML 프로그램 코드에 추가되는 것이 아니라 몇 가지 기본 속성 값을 가지고 추가되는 것을 확인할 수 있습니다. 그리고 다음 그림과 같이 디자인 보기에 TextBlock라는 문자열이 나타나는 것을 확인할 수 있습니다. 너무 작아서 잘 보이지 않지만 나중에 잘 보이도록 크기를 조정할 것입니다. 

MainPage.xaml
생략
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <TextBlock HorizontalAlignment="Left" Margin="370,621,0,0" TextWrapping="Wrap" Text="TextBlock" VerticalAlignment="Top"/>
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
            
        </Grid>
생략

그런데 프로그램을 실행해보면 다음 그림처럼 추가된 TextBlock 요소가 보이지 않습니다. 이런 현상은 비주얼 스튜디오에 의하여 자동으로 추가된 Margin="370,621,0,0" 코드 때문으로 실행 시의 단위 처리와 디자인 보기의 단위 처리의 차이가 원인인 것으로 보입니다. 이 코드를 지우고 실행하면 추가된 TextBLock 요소의 기본 위치인 화면의 좌측 상단에 나타납니다. 그런데 이처럼 도구 상자를 사용하여 추가된 TextBlock 요소의 코드를 보면 XAML 프로그램 코드가 추가된 위치가 내가 원하는 위치, 즉 주석 아래가 아닙니다. 

이와 같은 부작용 때문에 도구 상자를 사용하는 두 번째 방법보다. XAML 프로그램 코드를 사용하여 추가하는 첫 번째 방법을 더 많이 사용합니다. 언제나 그렇듯이 소프트웨어는 점차 개선되므로 UWP 프로그램의 디자인 보기에서 부족한 기능도 언젠가는 해결될 것으로 믿습니다. 


도구 상자를 통하여 추가한 TextBlock 요소의 XAML 프로그램 코드를 지우고 다시 한번 <TextBlock> 태그를 우리가 원하는 프로그램 위치인 초록색 주석 아래에 추가한 후 다음 프로그램을 따라서 진행하기 바랍니다. 

먼저 추가한 TextBlock 요소의 Text 속성에 "Hello UWP World" 문자열 값을 지정하는 방식으로 UWP 첫 번째 프로그램을 구현할 것입니다. 그런데 화면의 구성 요소에 속성 값을 지정하는 방법도 두 가지 입니다. 첫 번째는 속성창을 이용하는 방법이고 두 번째는 XAML 직접 코딩을 하는 방법입니다. 


우선 TextBlock 요소의 공용 속성 그룹의 Text 속성에 우리가 개발하려고 했던 "Hello UWP World (View)"라는 문자열을 다음 그림과 같이 입력합니다. 나중에 뷰 모델(ViewModel)을 사용하는 방법과 모델(Model)을 사용하는 방법을 설명하기 위하여 문자열의 끝에"(View)" 라는 문자열을 추가했습니다. 

XAML 코드보기의 TextBlock 요소의 프로그램 코드에 위의 화면에서 지정한 속성이 XAML 언어로 변환되어 추가된 것을 다음 코드와 같이 확인할 수 있습니다. XAML 언어는 따로 배우지 않아도 되겠다는 생각이 들지 않나요? 언어를 보고 이해할수 있는 수준만 알고 있으면 될 것입니다. 

MainPage.xaml
생략
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <TextBlock Text="Hello UWP World (View)" ></TextBlock>
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
            
        </Grid>
생략


이번에는 디자인보기를 확인해봅니다. 다음 그림과 같이 좌측 상단에 Hello UWP World (View) 문자열이 나타나는 것이 보입니다. 


글자가 작으니 글자 크기를 조금 키우고 문자열을 화면의 중앙에 위치시켜 보겠습니다. 폰트 크기를 변경하면 될 것이니 속성의 이름인 Font를 추측할 수있습니다. 검색창에 Font 라고 입력한 후 11px로 되어 있는 크기를 36px로 수정합니다. 

XAML 코드 보기의 TextBlock 요소의 코드에 위의 화면에서 지정한 속성이 XAML 로 변환되어 추가되어 있는 것을 다음 코드와 같이 확인할 수 있습니다. 


MainPage.xaml
생략
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <TextBlock Text="Hello UWP World (View)" FontSize="36" ></TextBlock>
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
            
        </Grid>
생략


추가한 문자열이 화면의 좌측 상단에 있습니다. 이것을 화면의 중앙으로 이동해볼까요? 수평 정렬을 할 생각이니 속성의 이름이 Horizon으로 시작할 것을 쉽게 추측할 수 있습니다. 이번에는 속성에 값을 지정하는 두 번째 방법, 즉 XAML을 사용하여 코딩하는 방법으로 해보겠습니다. 

<TextBlock Text="Hello UWP World (View" FontSize="36"/>과 같이 되어 있는 코드 중 FontSize="36"의 우측에 공란을 하나 입력한 후 Ho라고 입력하면 비주얼 스튜디오가 다음 그림과 같이 값의 입력이 가능한 속성으로 [HorizontalAlignment]를 찾아줍니다. 이것을 더블클릭하면 수평 정렬을 위한 XAML 코드를 자동으로 완성해주고 동시에 입력 가능한 값들의 목록도 보여줍니다. 여기서는 [Center]를 선택하겠습니다. 


우리가 추가한 TextBlock의 XAML 코드가 최종적으로 <TextBlock Text="Hello UWP World (View)" FontSize="36" HorizontalAlignment="Center" /> 와 같이 완성된 것을 확인한 후 프로그램 코드가 속성창에 어떤 영향을 미쳤는지 다음 화면에서 확인해 봅니다. 


MainPage.xaml
생략
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <TextBlock Text="Hello UWP World (View)" FontSize="36" HorizontalAlignment="Center"></TextBlock>
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
            
        </Grid>
생략

수평정렬이니 검색 창에 Horizon이라고 입력한 후 Horizontal Alignment 속성을 확인하면 됩니다. Center라는 XAML 코드가 =와 같은 아이콘으로 표현됩니다. 

이제 우리가 만든 최초의 UWP 프로그램을 실행하겠습니다. 다음 화면을 보면 첫 번째 Grid 첫 번째 행의 TextBlock 요소에 Main이라는 페이지의 이름이 프레임워크에 의하여 자동으로 나타나고 두 번째 행의 Grid 요소에 우리가 TextBlock 요소로 추가한 Hello UWP World (View)문자열이 보입니다. 


XAML 언어와 XAML 화면 구성 요소의 속성을 변경하여 화면을 구성하는 방법을 설명하다보니 MVVM 프로그램 패턴 중에서 뷰(View)만을 사용한 Hello UWP World 프로그램이 완성되었습니다. 여기까지가 기본적인 UWP 앱 개발 방법과 MVVM 프로그램 패턴 중에서 뷰(View)를 개발하는 방법의 원리에 관한 설명이었습니다. 이를 조금 더 잘 이해하기 위해 책을 덮고 처음부터 다시 한번 해보기 바랍니다. 




4: MVVM 프로그램 패턴 중 뷰모델 이해하기

지금까지 뷰(View)를 XAML 하드코딩하는 방법으로 Hello UWP World 사용자 프로그램을 작성해 보았습니다. 이번에는 보여줄 문자열, 즉 데이터를 뷰모델(ViewModel)의 변수에서 가져와 뷰(View)에 보여주는 방법으로 Hello UWP World 사용자 프로그램을 구현해보겠습니다. 

프로그램을 작성하기에 앞선 뷰(View)와 뷰모델(ViewModel)을 연동하는 방법에 대하여 다음 그림에서 다시 한번 확인해보겠습니다. 

					뷰
					* XAML
					* 화면
					↑
					 |
					 |
					 | 데이터 바인딩(Data Binding)
					 |
					↓
					뷰모델
					* C# Script
					* 프로그램 로직

UWP MVVM 패턴에서 보는 것과 같이 뷰(View)와 뷰모델(ViewModel)은 데이터 바인딩(Data Binding)을 통해 정보를 주고받습니다. 그래서 우리는 뷰(View)에서 데이터 바인딩을 표현하는 방법과 뷰모델(ViewModel)에서 데이터 바인딩을 표현하는 방법을 이해해야 합니다. 

우선 뷰(View)에서 데이터 바인딩을 표현하는 방법을 이해하기 위하여 추가했던 TextBlock 요소를 주석으로 처리합니다. XAML 코드를 주석으로 처리하는 문법은 HTML이나 XML과 동일하게 주석으로 처리할 태그들을 <!-- 태그와 --> 태그로 감싸는 것입니다. 

그리고 XAML 코드를 사용하는 방법으로 TextBlock 요소를 추가하고 Text 속성에 Text="{Binding helloGreetings}" 라는 문자열을 입력합니다. 뷰(View)에서 데이터 바인딩을 표현하는 방법은 Text 속성에 {Binding VariableName}의 형식으로 값을 입력하는 것입니다. VariableName은 뷰모델(ViewModel)에서도 동일하게 사용하여 뷰(View)와 뷰모델(ViewModel)간에 데이터를 주고받게 됩니다. 


MainPage.xaml
생략
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <!--<TextBlock Text="Hello UWP World (View)" FontSize="36" HorizontalAlignment="Center"></TextBlock> -->
            <TextBlock Text="{Binding helloGreetings}" FontSize="36" HorizontalAlignment="Center"></TextBlock>
            <!--
                The SystemControlPageBackgroundChromeLowBrush background represents where you should place your content. 
                Place your content here.
            -->
            
        </Grid>
생략

이번에는 뷰 모델(ViewModel)에 데이터 바인딩을 추가해봅니다. UWP 프로젝트의 ViewModels 폴더 안에는 MainViewModel.cs 파일이 있습니다. 이는 프레임워크에 의하여 자동으로 생성된 뷰모델(ViewModel) 프로그램으로 C#으로 작성되어 있습니다. 프로그램을 편집하기 위하여 파일을 더블클릭합니다. 


우선 프레임워크에서 기본적으로 제공되는 뷰모델(ViewModel)의 C# 코드를 보겠습니다. 


MainViewModel.cs
using System;

using Prism.Windows.Mvvm;

namespace Hello_UWP_World.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        public MainViewModel()
        {
        }
    }
}


using 지시자를 사용하여 System과 Prism.Windows.Mvvm 네임스페이스를 사용하게 선언했고 프로그램의 네임스페이스는 Hello_UWP_World.ViewModels로 지정했고 하단에 MainViewModel 클래스를 정의한 후 MainViewModel() 생성자를 비어있는 상태로 제공하고 있습니다. 

이름에서 알 수 있듯이 Prism.Windows.Mvvm 네임스페이스는 Prism MVVM 프레임워크를 사용하게 해주는 네임스페이스입니다. using은 우리가 만들지 않은 객체들을 가져가 사용할 수 있게 해주는 기능을 합니다. 다른 프로그램 언어의 include나 import 혹은 require 등에 대응되는 개념이라고 이해하면 됩니다. 연관된 객체들이 각기 다른 네임스페이스에 존재하므로 using 지시자를 통해 그러한 객체들의 네임스페이스를 가져와 사용하겠다고 선언한 후 해당 객체를 사용합니다. 


뷰모델(ViewModel)의 C# 프로그램에서 데이터 바인딩의 표현은 속성(Property)을 사용합니다. 여기서 말하는 속성은 앞에서 설명한 요소의 속성과 동일한 것으로 객체에 특정한 값을 저장하고 가져오는 역할을 하는데 문법적으로는 get과 set 접근자(Accessor)를 함께 사용합니다. 클래스 외부에서 데이터를 가져오기 위해서 get 접근자를 사용하고, 가져온 데이터를 넣기 위해 set 접근자를 사용합니다. 결국 객체에서 값을 저장하고 가져오는 기능이 결합되어 속성을 이루게 됩니다. 전형적인 속성 정의 코드는 다음 코드와 같습니다. 


전형적인 속성 정의 코드

private string _helloGreetings;

public string helloGreetings
{
	get => _helloGreetings;
	set => SetProperty(ref _helloGreetings, value);
}


private string _helloGreetings는 데이터를 저장하기 위한 변수를 정의하는 문장으로 클래스 외부에서 접근하는 것으로부터 보호하기 위하여 변수의 접근 범위를 private로 정의했습니다. 속성 정의는 클래스 외부와 데이터를 주고받기 위한 장치로 public string helloGreetings 문장을 사용하여 속성의 접근 범위를 public으로 정의했습니다. 이때 속성의 이름은 XAML 코드 {Binding helloGreetings}에서 정의한 TextBlock 요소의 Binding 변수명과 반드시 일치해야 합니다. 


get 접근자를 통하여 값을 가져갈 때는 get => _helloGreetings; 문장을 사용하여 변수 접근이 private범위로 보호된 _helloGreetings 변수에서 가져갑니다. set 접근자를 통하여 값을 저장할 때는 set => SetProperty(ref _helloGreetings, value); 문장을 사용하여 변수 접근이 private 범위로 보호된 _helloGreetings 변수에 값을 저장합니다. 위와 같이 정의하는 프로그램 코드상에서의 속성을 Getter/Setter라고 부르는 사람들이 있는데 이는 속성의 특성을 아주 잘 나타낸 용어입니다. 




알아두기:
속성의 가져오기를 표현하는 키워드가 get이고 저장하기를 표현하는 키워드가 set인데 {와 }사이에 C# 코드 블록을 지정하여 여러 개의 문장을 get과 set을 하기 위한 용도로 실행시킬 수 있습니다. 그러나 여기서는 get과 set의 기능으로 사용할 코드가 한 문장이기 때문에 C# 코드 블록을 단순화하여 표현하기 위하여 람다식(Lamda Expression)을 사용했습니다. 

그래서 =>라는 생소한 부호가 사용되었습니다. 

=>는 C#에서 람다식을 정의하는 연산자입니다. get의 경우 helloGreeting 변수의 값을 가져다가 사용할 때 => 부호 뒤의 식을 대신 가져간다는 의미로 이해하고 set의 경우 helloGreeting 변수의 값을 저장할 때 => 부호 뒤의 식을 실행하여 저장한다는 의미로 이해하면 되겠습니다. 

값을 저장할 때 _helloGreetings private 변수에 저장하려는 값을 의미하는 value를 저장하기 위하여 SetProperty() 메소드를 사용했습니다. SetProperty 메소드는 속성의 값을 변경하며 변경되었다는 사실을 View 에게 통지(Notify)하여 화면을 변경하도록 해주는 기능을 하는 ViewModelBase Class 에 의해 제공되는 메소드입니다. ref 라는 키워드를 사용한 것은 _helloGreetings 변수의 주소(Reference)에 저장하라는 의미입니다. 


속성이 정의되어 있더라도 속성 변수에 값이 들어 있어야 뷰(View)가 값을 가져갈수 있겠지요? 그래서 MainViewModel() 생성자에서 속성에 값을 초깃값으로 저장하기 위하여 helloGreetings="Hello UWP World (ViewModel)"; 문장을 추가합니다. 데이터 바인딩 기능이 구현된 뷰모델(ViewModel)의 전체 프로그램 코드는 다음과 같습니다. 


MainViewModel.cs
using System;

using Prism.Windows.Mvvm;

namespace Hello_UWP_World.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        private string _helloGreetings;

        public string helloGreetings
        {
            get => _helloGreetings;
            set => SetProperty(ref _helloGreetings, value);
        }
        public MainViewModel()
        {
            helloGreetings = "Hello UWP World (ViewModel)";
        }
    }
}


이제 프로그램을 실행합니다. 여기까지 따라오셨으면 MVVM 프로그램 패턴 중에서 뷰(View)를 개발하는 방법과 뷰모델(ViewModel)을 개발하는 방법 그리고 뷰(View)와 뷰모델(ViewModel)을 연결하는 개발 원리를 이해한 것입니다. 