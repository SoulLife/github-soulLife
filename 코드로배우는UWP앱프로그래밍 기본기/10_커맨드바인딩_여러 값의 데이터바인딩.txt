8 : 커맨드 바인딩

Command는 편집기에서 <Ctrl> + <C>나 <Ctrl> + <V> 키 등을 눌렀을때 또는 이에 대응되는 [Copy]메뉴 항목이나 [Paste]메뉴 항목등을 눌렀을 때 발생합니다. Command라는 용어는 <Ctrl> + <C> 키를 누르면 복사하라 , Paste 메뉴 항목을 누르면 "붙여넣어라"와 같이 대상 요소 혹은 객체에 명령을 내리는 것에서 유래한 용어로 이해하면 무리가 없습니다. Command는 PC용 프로그램을 개발할 때 매우 유용한데 더 자세한 것은 WPF(Windows Presentation Foundation)관련 서적을 참조하기 바랍니다. 


버튼과 같은 경우에도 버튼을 탭하거나 클릭했을 때 이에 해당하는 처리를 하라는 Command 를 발생시키고 Command를 받은 핸들러를 통하여 처리할 수 있습니다. 이와 유사한 역할을 할 수있는 것이  코드 비하인드 형태의 이벤트 핸들러입니다. 코드 비하인드의 이벤트 핸들러는 XAML 코드에 종속되어 있습니다. XAML요소의 속성 창에서 이벤트 이름을 더블클릭하여 이벤트 핸들러를 자동으로 생성했던 기억이 나지요? 그 말은 이벤트 핸들러를 사용하면 코드 비하인드의 C# 프로그램과 XAML 화면 프로그램이 상호 종속되어 화면 디자인과 프로그램 로직 개발의 담당자를 분리하는 효과를 누릴수 없게 된다는 것을 의미합니다. 


그뿐만이 아니라 뷰모델(ViewModel)에서는 코드 비하인드의 이벤트 핸들러를 사용할수 없습니다. 그러면 XAML의 화면 구성 요소에서 발생하는 Command를 어떻게 뷰모델(ViewModel)의 독립된 C# 프로그램과 연동하여 처리할수 있을까요? 결론적으로말하면 뷰모델(ViewModel)에서 이벤트를 처리하려면 커맨드 바이딩(Command Binding)의 도움을 받아야 합니다. 

우선 다음 코드와 같이 Command를 발행하는 Button 요소를 하나 만들어보겠습니다. 코드에서 Command={Binding clickMeCommand}" 부분이 배우지 않은 것입니다. 이는 데이터 바인딩과 유사한 방식으로 Command 속성에 데이터 바인딩 기술을 사용하기 때문에 커맨드 바인딩(Command Binding)이라고 부릅니다. 


MainPage.xaml

<Button Content="Click Me" VerticalAlignment="Top" Command="{Binding clickMeButtonCommand}"/>


위의 코드를 MainPage.xaml 파일에 코딩했다면 Hello UWP World 에서 데이터 바인딩을 했던 것과 같이 MainViewModel.cs 파일에 이에 대응하는 속성을 정의해야 합니다. 다음은 버튼을 클릭하면 Command 를 받아 메시지 창을 보여주는 MainViewModel.cs 코드입니다. 



MainViewModel.cs

using System;
using System.Windows.Input;
using Prism.Commands;
using Prism.Windows.Mvvm;
using Windows.UI.Popups;
namespace XAML_Test.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        public ICommand clickMeButtonCommand { get; set; }

        public MainViewModel()
        {
            clickMeButtonCommand = new DelegateCommand(onClickMeButtonCommand);
        }

        private async void onClickMeButtonCommand()
        {
            MessageDialog messageDialog = new MessageDialog("버튼을 클릭하였습니다.");
            await messageDialog.ShowAsync();
        }
    }
}



앞 코드에서 볼 수 있듯이 다행히 커맨드 바인딩의 속성 정의는 데이터 바인딩보다 단순해서 public ICommand clickMeCommand {get;set;} 문장과 같이 지정하면 됩니다. 값을 가져올(get)때도 clickMeCommand 값을 변환없이 가져가고 값을 저장할(set)때도 변환없이 저장한다는 의미의 코드입니다. 다만 데이터 바인딩은 string과 같은 클래스를 사용한 반면 커맨드 바인딩에는 ICommand 인터페이스를 사용한다는 것이 데이터바인딩과 가장 큰 차이점입니다. 






※ 알아두기:
응용 프로그램 개발자 입장에서는 데이터 타입(Data Type), 클래스(Class), 인터페이스(Interface)가 유사한 의미를 가집니다. 변수나 상수로 혹은 변수 객체나 상수 객체로 혹은 변수 인터페이스나 상수 인터페이스로 정의되어 사용된다는 측면에서 동일한 개념으로 볼 수 있습니다. 다만 데이터 타입, 클래스 그리고 인터페이스 순으로 일반성을 가집니다. 데이터 타입은 단일 타입의 값을 표현할 수 있고 클래스는 목적에 맞게 여러 개의 값과 여러 개의 메소드로 특징지어지는 복합구조를 표현할 수 있고 인터페이스는 제한된 기능을 가지는 클래스에 해당하기 때문에 앞 문장과 같이 표현할 수 있는 것입니다. 


클래스는 객체 타입이라고 번역할 수도 있습니다. 데이터 타입을 인스턴스(Instance)화하면 변수나 상수, 클래스를 인스턴스화하면 변수 객체나 상수 객체가 되니 클래스를 객체 타입으로 번역하는 것이 매우 일리가 있게 느껴지지 않나요? 인터페이스는 우리말로 번역하기가 어렵지만 구현되어 있지 않은 클래스, 틀만 가진 클래스라고 이해하면 됩니다. 화면을 사용자 인터페이스라고 부르는 것처럼 인터페이스 라는 용어는 어떤 접촉 창구와 같은 것을 의미합니다. 객체를 특정한 형태로 사용할 수 있다는 틀만 만들어 놓았다는 개념에서 따온 용어입니다. 용어가 어렵지만 인터페이스는 구현되지 않은 틀만 갖춘 제한된 클래스로 이해하면 됩니다. 





Command 를 받아서 처리하려면 커맨드 바인딩된 변수 객체에 Command를 받아서 처리할 메소드 혹은 함수를 지정해야 합니다. 위의 MainViewModel.cs 코드에서 커맨드 바인딩된 변수 객체는 clickMeButtonCommand이고, 버튼 클릭 시 실행할 메소드는 onClickMeButtonCommand()입니다. 그러면 데이터 바인딩을 할 때와 같이 clickMeButtonCommand = onClickMeButtonCommand; 같은 문장을 쓰고 싶을 테지만 C언어와 같은 저수준 언어에서는 가능해도 C#과 같은 대부분 언어에서는 그렇게 할 수 없습니다. 


UWP의 Prism 프레임워크에서는 위임한다는 의미를 가진 Delegate 객체의 도움을 받아야 합니다. 그런데 우리가 하려고 하는 위임은 Command를 처리하기 위한 위임이니 DelegateCommand 객체의 도움을 받아야 합니다. 즉 clickMeButtonCommand = new DelegateCommand(onClickMeButtonCommand); 문장과 같이 DelegateCommand 객체를 만들어 속성에 저장하면 됩니다. 이때 위임을 할 이벤트 핸들러, 즉 이벤트의 처리를 담당할 메소드가 onClickMeButtonCommand()메소드이니 객체 생성 시 초깃값으로 넘겨주기 위하여 DelegateCommand 객체의 생성자에 인자로 넘겨주었습니다. 

이 문장을 해석하면 onClickMeButtonCommand() 메소드의 Command Delegate 객체를 만들어 속성 변수 객체인 clickMeButtonCommand에 저장하라가 됩니다. 그러면 XAML 화면에서 버튼을 눌렀을 때 onClickMeButtonCommand() 메소드가 실행됩니다. 


onClickMeButtonCommand() 메소드의 코드는 메시지 대화 창(Dialog Window) 을 비동기 호출로 구현하고 있는데 async와 await 프로그램 패턴(Program Pattern)은 Hello UWP World 프로그램 예제에서 설명했으니 기억나지 않으면 다시 읽고 돌아오기 바랍니다. 메소드 안의 MessageDialog messageDialog = new MessageDialog("버튼을 클릭하였습니다."); 문장은 MessageDialog 객체를 생성하고, messageDialog.ShowAsync(); 문장은 생성된 객체를 사용하여 대화창을 보여줍니다. 이런 형태는 객체지향 프로그램의 전형적인 프로그램 패턴입니다. 




※ 알아두기:
객체지향 프로그램은 응용 프로그램 개발자의 입장에서는 매우 단순합니다. 라이브러리 혹은 Helper의 형태로 제공되는 객체를 이해하고 객체를 구성하는 메소드를 호출하거나 멤버 변수의 값을 가져오거나 저장하는 방법으로 프로그램을 작성하면 되기 때문입니다. 응용프로그램 개발자가 할 일은 객체를 이해하고 객체의 사용법에 맞추어 코딩하는 것입니다. 

특히 .NET과 같이 객체들의 네임스페이스 구조가 계층적 나무 구조(Hierachical Tree Strudcure)로 되어 있기 때문에 객체들의 구조를 쉽게 예측할 수 있어서 사용할 객체를 찾기가 쉽고, 해당 기술의 개념을 알고 있다면 멤버와 메소드의 이름을 추측하는 것이 어렵지 않아 객체를 쉽게 사용할 수 있습니다. 객체를 만들어 판매하는 개발자를 자동차 생산자에 비유할 수 있다면 객체를 사용하여 응용 프로그램을 제작하는 개발자는 운전자에 비유할수 있습니다. 운전자에게는 자동차를 만드는 기술보다 차선을 지키고 신호를 준수하는것이 더 중요한 기술이듯이 응용프로그램 개발자에게는 적용할 업무를 이해하고 업무 수행을 위하여 문제나 장애가 되는 일의 해결에 집중하는 것이 더 중요한 기술입니다. 




비주얼 스튜디오에서 C# 코딩을 할 때 코딩 생산성을 높여주는 방법으로 using 선언을 하지 않고 C# 프로그램을 먼저 코딩한 후 프로그램 오류가 나면 비주얼 스튜디오의 오류 해결 도우미의 도움을 받는 방법이 있습니다. 이 예제에서도 using System.Windows.Input;과 using Prism.Commands; 및 using Windows.UI.Popups; 문장을 그런 방식으로 추가했습니다. 각각 ICommand 인터페이스와 DelegateCommand객체, MessageDialog객체가 정의된 네임스페이스들입니다. 





※알아두기:
필자는 속성을 포함하여 필자가 정의한 변수 객체명과 메소드명들은 clickMeButtonCommand나 onClickMeButtonCommand과 같이 소문자로 시작하고있습니다. 이것은 시스템이 제공하는 이름들과 필자가 직접 정의한 이름들을 구분하여코딩하는 필자의 코딩 표준(Coding Standard)입니다.

그리고 Hello UWP World 예제에서는 데이터 바인딩을 위한 속성 변수를 구현하기 위한 private 변수 객체의 이름은 _helloGreetings 와같이 변수 이름 앞에 _(UnderScore)를 추가했습니다. 이것도 일반 변수와 구분해 주기 위한 필자의 코딩 표준입니다. 변수나 메소드의 이름을 잘 짓는 것만으로도 추상화를 상당 부분 달성할수 있다고 앞에서 설명했지요. 

이름을 잘 짓는 것은 실생활에서 이름을 짓는 것만큼이나 어려운 일입니다. 그런데 저와 같은 코딩 표준을 가지고 있으면 MessageDialog messageDialog = new MessageDialog("버튼을 클릭하였습니다."); 문장에서와 같이 시스템이 제공한 이름의 첫 글자만 소문자로 바꾸어 변수 객체의 이름을 지정할 수 있습니다. 실제로 이런 방식으로 이름을 지정하는 것이 억지로 영어를 만들어 내는 것보다 의미 있습니다. 이 프로그램 코드의 예에서는 실제로 messageDialog보다 좋은 이름을 작명하는 것이 거의 가능하지 않습니다. 
messageWindows나 popUpWindow와 같은 이름을 붙일 수 있겠지만 이름을 위한 이름처럼 억지스러워 보이죠. UWP의 용어를 그대로 준용하여 messageDialog라고 부르는 것이 더욱 타당하다고 생각합니다. 물론 앞에서 설명한 프로그램 예제의 경우와 같이 프로그램의 목적에 맞게 clickedRectangle과 같이 이름을 지을 수 있다면 프로그램 코드의 추상화 수준이 더욱 높아져 프로그램의 가독성과 유지 보수성이 상승합니다. 

_helloGreetings의 경우도 helloGreetings 속성의 private 변수 객체의 이름으로 더 좋은 것을 생각하기 어렵습니다. 그리고 최근에는 컴파일러의 최적화 기술이 발달하며 개발자가 직접 최적화할 일이 줄어들고 있기 때문에 수행 속도를 중시하는 프로그램 코드보다 가독성과 유지보수성이 좋은 프로그램 코드의 중요성이 더 커지고 있습니다. 




예제를 통하여 이전에 배웠던 데이터 바인딩과 함께 커맨드 바인딩의 개념과 코딩 방법을 살펴보았습니다. 사실 커맨드 바인딩은 데이터 타입이 ICommand인 데이터 바인딩입니다. 아무튼 응용 프로그램 개발자들은 이론보다 코드를 통하여 배우는 것이 훨씬 효율적이겠지만 경험과 이론의 겸비가 중요하니 코드에서 배운 개념을 그림으로 정리합니다. 



9 : 여러 값의 데이터 바인딩
앞에서는 하나의 값에 대한 데이터 바인딩을 살펴보았는데 이번에는 여러 값을 데이터 바인딩하는 방법을 살펴보겠습니다. 

다음 코드와 같이 ListBox 컨트롤을 사용하여 데이터는 MainViewModel.cs 에서 제공하고 화면은 MainPage.xaml로 보여주는 예제를 살펴봅니다. User 모델을 사용하기 위하여 앞에서 설명했던 Hello UWP World 예제에 프로그램 코드를 추가했습니다. 



MainPage.xaml

생략
<Page
    x:Class="Hello_UWP_World.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm"
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" 
    mc:Ignorable="d">
    <Grid x:Name="ContentArea" Margin="{StaticResource MediumLeftRightMargin}">
        <Grid.RowDefinitions>
            <RowDefinition Height="48" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Row="0"
            x:Uid="Main_Title"
            Style="{StaticResource PageTitleStyle}" />
        <Grid
            Grid.Row="1" 
            Background="{ThemeResource SystemControlPageBackgroundChromeLowBrush}">
            <StackPanel>
                <TextBlock Name="viewGreetngs"  Text="Hello UWP World (View)" FontSize="36" HorizontalAlignment="Center" Loaded="viewGreetngs_Loaded" />
                <TextBlock Name="viewModelGreetngs" Text="{Binding helloGreetings}" FontSize="36" HorizontalAlignment="Center" Loaded="viewModelGreetngs_Loaded" />
                <TextBlock Name="codeBehindGreetngs" Text="Hello UWP World (Code Behind 기본값)" FontSize="36" HorizontalAlignment="Center" Loaded="codeBehindGreetngs_Loaded" />
                <ListBox ItemsSource="{Binding users}" />
            </StackPanel>
        </Grid>
    </Grid>
</Page>

생략


MainPage.xaml.cs
생략
        private void viewModelGreetngs_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            viewModelGreetngs.Opacity = 0; //문장의 주석을 해제하세요. 
        }
생략


MainViewModel.cs : 변경되는 부분만 기술합니다. 

using System;
using System.Collections.Generic;
using System.Linq;
using Prism.Windows.Mvvm;

namespace Hello_UWP_World.ViewModels
{

    public class MainViewModel : ViewModelBase
    {
        private IList<string> _users;
        public IList<string> users
        {
            get => _users;
            set => SetProperty(ref _users, value);
        }        
        public MainViewModel()
        {
            //helloGreetings = "Hello UWP World (ViewModel)";
            //getUserAsync();
            string[] tempUsers = { "홍길동", "유관순", "안정복" };
            users = tempUsers.ToList();
        }
    }
}


앞선 예제에서는 하나의 값을 데이터 바인딩하기 위하여 string 데이터 타입을 사용했고 하나의 Command를 커맨드 바인딩하기 위하여 ICommand 인터페이스를 사용했습니다. 이번에는 IList Generic(포괄적인/일반적인) 인터페이스를 사용하여 여러 개의 값을 데이터 바인딩합니다. 

인터페이스만 해도 이해가 어려운데 Generic 인터페이스라니 더 어렵지요? 하지만 어려울 것이 하나도 없습니다. List를 구현할 때는 특정 데이터 타입이나 클래스, 인터페이스에 국한되지 않도록 데이터 타입마다 여러 가지로 구현하지 않고 하나로 만드는 것이 유리합니다. 이를 위해 데이터 타입이나 객체 타입(Class/클래스)을 참조 정보로 주어 구현하는 것을 Generic이라고 부를 뿐입니다. 즉 IList<string>은 string 데이터 타입의 List 인터페이스를 의미하는 것입니다. List가 여러 개의 값을 동시에 저장하는 Collection 자료구조이니 string 데이터 타입을 여러 개 관리하는 인터페이스라는 의미가 됩니다. 

마지막으로 users = tempUsers.ToList(); 문장을 설명하면 됩니다. string 배열을 List로 만들어 속성에 저장하기 위하여 System.Linq 네임스페이스에 속한 ToList() 메소드를 사용했습니다. tempUser 문자열 배열을 List Collection 객체로 변환해 주는 것으로 코드의 의미가 직관적입니다. 앞으로는 어떤 네임스페이스에 속하는 기능인지 설명하지 않을테니 코딩해놓고 문법 오류가 발생하면 <Ctrl> + <.>키를 눌러 비주얼 스튜디오 오류 해결 도우미의 도움을 받아 네임스페이스를 추가하기 바랍니다. System.Collections.Generic 네임스페이스에 속한 IList를 추가할 때에도 동일한 문법 오류가 발생하는데 <Ctrl> + <.> 키로 문법 오류를 해결하기 바랍니다. 