9 : Collections

Collections(모음)로 분류되는 컨트롤들은 TextBox나 PasswordBox등과 같이 단일 값이 아니라 여러 개의 값을 동시에 처리할 수 있도록 해줍니다. 3.9 여러 값의 데이터 바인딩에서 언급한 ListBox가 Collections 컨트롤 중의 하나입니다. 


※[Collections] > [FlipView]

FlipView 컨트롤은 하나의 View 컨트롤에 여러 개의 항목을 연결해놓고 한 번에 하나의 항목을 보여줍니다. 




XAML 코드 조각

    <FlipView MaxWidth="400" Height="270" >
        <Image Source="/Assets/LockScreenLogo.scale-200.png" />
        <Image Source="/Assets/SplashScreen.scale-200.png" />
        <Image Source="/Assets/StoreLogo.png" />
        <Image Source="/Assets/Square150x150Logo.scale-200.png" />
        <Image Source="/Assets/Square44x44Logo.scale-200.png" />
    </FlipView>







※[Collections] > [ListBox]

ListBox 컨트롤은 항목들을 수직으로 나열한 후 필요 시 특정 항목들을 선택해 필요한 처리를 하도록 합니다. 

3.9 여러 값의 데이터 바인딩에서 ListBox를 대상으로 여러 값을 데이터 바인딩하는 방법을 살펴보았습니다. 여기서는 ListBox 컨트롤의 특성을 나타내는 몇 가지 예제를 살펴보면서 ListBox에 대한 이해도를 높이겠습니다. 다음 예제는 상단에 타원을 배치하고 하단에 ListBox를 배치한 후 ListBox에서 선택된색상으로 타원의 색을 바꾸어 주는 예제입니다. 

XAML 코드 조각에서 SelectionMode 속성을 Single로 지정하여 하나의 값만 선택하도록 했습니다. SelectionMode 속성을 None으로 지정하면 선택 기능을 사용하지 않고 항목들을 보여주는 기능만 사용하게 됩니다. SelectionChanged 이벤트 속성을 colorListBox_SelectionChanged로 지정하여 ListBox에서 선택한 값이 달라지는 경우 코드 비하인드 이벤트 핸들러인 colorListBox_SelectionChanged() 메소드를 실행하게 했습니다. 

코드 비하인드 코드 조각은 세 줄의 코드로 이루어져 있습니다. ((ListBox)sender).SelectedItem.ToString()으로 ListBox에서 선택된 색을 가져온 후 Windows.UI.Xaml.Markup 네임스페이스에 속한 Color 객체로 변환합니다. 그런 다음 Windows.UI.Xaml.Media 네임스페이스에 속한 SolidColorBrush 객체로 다시 변환하여 colorRectangle 요소의 Fill 속성에 할당하는 방법으로 사각형의 색상을 선택된 값으로 바꿉니다. using 선언문을 코드 비하인드 조각에 표현하지 않았으니 문법 오류가 발생하는 위치에서 <Ctrl> + <.>키를 누르는 방법으로 using 선언문을 추가하여 문법 오류를 해결한 후 실행해보기 바랍니다. 

컨트롤 외관 조각에서는 실행되는 형태를 확인해볼 수 있는데 ListBox의 크기를 포함할 항목들의 크기보다 작게 지정하면 우측에 수직 스크롤바가 자동으로 생겨납니다. 



XAML 코드 조각

    <StackPanel>
        <Ellipse x:Name="colorEllipse" Width="200" Height="30" Stroke="Black" />
        <ListBox x:Name="colorListBox" Width="200" Height="100" BorderBrush="Black" BorderThickness="1" SelectionMode="Single"
                 SelectionChanged="colorListBox_SelectionChanged">
            <x:String>Blue</x:String>
            <x:String>Green</x:String>
            <x:String>Red</x:String>
            <x:String>Yellow</x:String>
        </ListBox>
    </StackPanel>




코드 비하인드 조각

        private void colorListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Color color = (Color)XamlBindingHelper.ConvertValue(typeof(Color), ((ListBox)sender).SelectedItem.ToString());
            SolidColorBrush colorBrush = new SolidColorBrush(color);
            colorEllipse.Fill = colorBrush;
        }

이번에는 XAML 코드 조각에서 SelectionMode 속성을 Multiple로 지정하여 여러개의 값을 선택하는 예제를 만들어보겠습니다. ListBox의 하단에 Ellipse를 추가로 배치하여 첫 번째 선택된 색상은 상단 타원의 색상으로, 두 번째 선택된 색상은 하단 타원의 색상으로 채워지도록 수정하겠습니다. 그리고 스크롤바가 자동으로 만들어지는 것을 확인하기 위하여 크기를 줄여 두었던 ListBox의 크기를 늘리도록 하겠습니다. 

XAML 코드 조각의 변경은 직관적이어서 코드 비하인드 코드 조각에서 하나의 항목을 선택하도록했던 앞의 예제와 차이가 나는 부분만 자세히 살펴보면 됩니다. 첫 번째 선택 항목을 참조하기 위하여 SelectedItem 대신 SelectedItems[0]를 사용했습니다. 여러 개의 항목을 선택할 수 있는 상태이니 하나의 항목을 선택할 때 사용하던 SelectedItem 단일 멤버 변수 객체가 아닌 SelectedItems Collection 멤버 변수 객체를 사용했습니다. 

배열의 인덱스 값으로 0을 사용한 것은 첫 번째 항목이라는 의미가 됩니다. 선택된 두 번째 항목을 사용하기 위해서는 선택된 항목의 개수가 2개 이상인지 확인하고 사용해야 하기 때문에 if(((ListBox)sender).SelectedItems.Count > 1)와 같은 if조건문을 사용했습니다. 그리고 첫 번째 색상을 지정하는 로직을 이해했으니 색상을 지정하는 로직은 직관적으로 이해할수 있을 것이고 SelectedItems[0]과 같이 배열의 인덱스 값을 1로 지정하여 두 번째 선택된 항목을 참조하는 것을 확인할 수 있습니다. 

3개 이상의 항목을 선택하려면 어떻게 하면 되느냐고요? ListBox의 항목 선택에 대하여 기본적인 것을 다 배웠으니 여러분의 상상력으로 풀어가면 되겠습니다. 

SelectionMode 속성을 Extended로 지정하면 Windows PC에서처럼 <Ctrl> + 클릭이나 <Shift> + 클릭으로 여러 개의 항목을 선택하게 할 수 있습니다. <Ctrl> + 클릭을 사용하면 클릭한 항목만 하나씩 추가되어 선택되고 <Shift> + 클릭을 사용하면 먼저 선택한 항목부터 나중에 선택한 항목 사이의 모든 항목을 선택하게 됩니다. 



XAML 코드 조각

    <StackPanel>
        <Ellipse x:Name="colorEllipse" Width="200" Height="30" Stroke="Black" />
        <ListBox x:Name="colorListBox" Width="200" Height="180" BorderBrush="Black" BorderThickness="1" SelectionMode="Multiple"
                 SelectionChanged="colorListBox_SelectionChanged">
            <x:String>Blue</x:String>
            <x:String>Green</x:String>
            <x:String>Red</x:String>
            <x:String>Yellow</x:String>
        </ListBox>
        <Ellipse x:Name="colorEllipseLower" Width="200" Height="30" Stroke="Black" />
    </StackPanel>



코드 비하인드 조각

        private void colorListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Color color = (Color)XamlBindingHelper.ConvertValue(typeof(Color), ((ListBox)sender).SelectedItems[0].ToString());
            SolidColorBrush colorBrush = new SolidColorBrush(color);
            colorEllipse.Fill = colorBrush;

            if (((ListBox)sender).SelectedItems.Count > 1)
            {
                color = (Color)XamlBindingHelper.ConvertValue(typeof(Color), ((ListBox)sender).SelectedItems[1].ToString());
                colorBrush = new SolidColorBrush(color);
                colorEllipseLower.Fill = colorBrush;
            }
        }



이번에는 ListBox가 항목들을 순차적으로 나열하여 보여줄 수 있는 특성을 이용하여 간단하게 상품 소개를 하는 ListBox를 만들어보도록 하겠습니다. 코드는 설명이 필요하지 않을 만큼 간단하여 예제만 제시할 텐데 이런 특징은 ListBox만이 아니라 ComboBox, ListView, GridView, TreeView 등에 공통으로 적용됩니다. 



XAML 코드 조각

 <ListBox>
        <StackPanel Orientation="Horizontal">
            <Image Source="/Assets/LockScreenLogo.scale-200.png" Width="200" Height="150" Stretch="Fill" />
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                <TextBlock>품 명  : 바나나</TextBlock>
                <TextBlock>금 액  : 1,000원</TextBlock>
                <TextBlock>원산지 : 진주</TextBlock>
            </StackPanel>
        </StackPanel>
        <StackPanel Orientation="Horizontal">
            <Image Source="/Assets/SplashScreen.scale-200.png" Width="200" Height="150" Stretch="Fill" />
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                <TextBlock>품 명  : 자몽</TextBlock>
                <TextBlock>금 액  : 2,000원</TextBlock>
                <TextBlock>원산지 : 미국(플로리다)</TextBlock>
            </StackPanel>
        </StackPanel>
        <StackPanel Orientation="Horizontal">
            <Image Source="/Assets/Square150x150Logo.scale-200.png" Width="200" Height="150" Stretch="Fill" />
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                <TextBlock>품 명  : 참외</TextBlock>
                <TextBlock>금 액  : 1,000원</TextBlock>
                <TextBlock>원산지 : 성주</TextBlock>
            </StackPanel>
        </StackPanel>
    </ListBox>




※[Collections] > [GridView]

GridView 컨트롤은 항목들을 행과 열로 나열한 후 필요시 특정 항목들을 선택하여 필요한 처리를 하도록 합니다. 

상품 소개를 하는 ListBox 의 예제가 조금 어색하다고 느끼셨지요? ListBox는 항목의 상하 배치만 가능하기 때문입니다. ListBox와 유사하지만 행과 열로 나누는 기능을 제공하는 GridView를 사용하면 이를 개선할 수 있습니다. 

예제로 이해하기 위하여 ListBox예제를 복사하여 ListBox 컨트롤을 GridView 컨트롤로 변경해서 실행 화면을 관찰해봅시다. 상품에 대한 설명을 구현하기 위한 StackPanel 요소의 넓이는 일정하게 고정하기 위하여 Width 속성을 150으로 통일했습니다. 

그리고 ListBox 컨트롤과 다르게 GridView 는 마우스로 드래그 앤드 드롭하여 항목의 순서를 변경하여 사용할 수 있습니다. 이를 설명하고자 GridView 태그를 <GridView CanDragItems="True" CanReorderItems="True" AllowDrop="True">와 같이 수정해 보았습니다. 





XAML 코드 조각

<GridView CanDragItems="True" CanReorderItems="True" AllowDrop="True">
	<StackPanel Orientation="Horizontal">
		<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
		<StackPanel Orientation="Vertical" VerticalAlignment="Center" Width="150" >
			<TextBlock>품   명 : 바나나</TextBlock>
			<TextBlock>금   액 : 1,000원</TextBlock>
			<TextBlock>원산지 : 진주</TextBlock>
		</StackPanel>
	</StackPanel>
	<StackPanel Orientation="Horizontal">
		<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
		<StackPanel Orientation="Vertical" VerticalAlignment="Center" Width="150" >
			<TextBlock>품   명 : 자몽</TextBlock>
			<TextBlock>금   액 : 2,000원</TextBlock>
			<TextBlock>원산지 : 미국(플로리다)</TextBlock>
		</StackPanel>
	</StackPanel>
	<StackPanel Orientation="Horizontal">
		<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
		<StackPanel Orientation="Vertical" VerticalAlignment="Center" Width="150" >
			<TextBlock>품   명 : 참외</TextBlock>
			<TextBlock>금   액 : 1,000원</TextBlock>
			<TextBlock>원산지 : 성주</TextBlock>
		</StackPanel>
	</StackPanel>
</GridView>



GridView도 ListBox와 같이 데이터 바인딩, ItemTemplate 및 DataTemplate 기능을 제공합니다. 그 외에 컨트롤의 Layout 을 사용자 정의하기 위한 ItemsPanelTemplate 기능을 제공하는데 마찬가지로 예제를 사용해서 이해해보겠습니다. 

우선 사진만 나오도록 앞의 예제를 수정해보겠습니다. 사진을 반복 사용해 ItemsPanel과 ItemsPanelTemplate 을 설명할 때를 대비했습니다. 다음 코드 조각과 컨트롤 외관 조각을 확인해보기 바랍니다. 





XAML 코드 조각

<GridView>
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
</GridView>

이번에는 화면이 아무리 커져도 한 줄에 최대 2개의 항목이 나올수 있도록 ItemsPanelTemplate 요소를 사용해봅니다. 출력 방향도 기본 값인 수평 방향에서 수직 방향으로 수정합니다. 다음 에제의 GridView에는 ItemsPanel 이라는 속성요소가 있어서 View의 Layout을 관리합니다. 또한 View의 Layout을 관리하는 ItemsPanel을 ItemsPanelTemplate를 사용해 다시 정의했습니다. 

그리고 GridView의 ItemsPanel은 ItemsWrapGrid로 구성되어 GridView의 Layout을 화면의 크기에 맞게 자동으로 변형합니다. 이 예제에서는 ItemsPanelTemplate 을 사용하여 출력 방향을 사용자 정의하고 있으며 출력 방향이 수평일 경우 최대 열의 개수를 지정하고 출력 방향이 수직일 경우 최대 행의 개수를 사용자 정의하여 지정하는 것을 알 수 있습니다. 


<GridView>
	<GridView.ItemsPanel>
		<ItemsPanelTemplate>
			<ItemsWrapGrid MaximumRowsOrColumns="2" Orientation="Vertical" />
		</ItemsPanelTemplate>
	</GridView.ItemsPanel>

	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
</GridView>


ListBox 컨트롤이 제공되어서 GridView를 ListBox처럼 사용할 일은 없겠지만 ItemsPanelTemplate 에 대한 이해를 높이기 위하여 ItemsPanelTemplate을 사용하여 GridView가 ListBox처럼 항목을 수직으로 하나씩 배열하게 수정합니다. 방법은 간단합니다. ItemsPanelTemplate 하부에 위치한 ItemsWrapGrid요소를 ItemsStackPanel요소로 변경하면 됩니다. 다음 예제를 살펴보기 바랍니다. 




XAML 코드 조각

<GridView>
	<GridView.ItemsPanel>
		<ItemsPanelTemplate>
			<!--<ItemsWrapGrid MaximumRowsOrColumns="2" Orientation="Vertical" /> -->
			<ItemsStackPanel/>
		</ItemsPanelTemplate>
	</GridView.ItemsPanel>

	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/바나나.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/자몽.jpg" Width="200" Height="150" Stretch="Fill" />
	<Image Source="/Assets/참외.jpg" Width="200" Height="150" Stretch="Fill" />
</GridView>




※[Collections] > [DataGrid]

DataGrid 컨트롤은 테이블의 행과 열의 형태로 데이터를 보여주고 편집하게 해줍니다. ColorPicker를 설명할 때 XAML Controls Gallery를 활용하는 방법을 자세히 설명했습니다. 이번에는 DataGrid를 설명하며 Windows Community Toolkit Sample App을 활용하는 방법도 자세히 알아보겠습니다. 

DataGrid는 XAML Controls Gallery에 설명되어 있지 않고 Windows Community Toolkit Sample App에 설명되어 있습니다. 다음 첫 번째 그림과 같이 XAML Controls Gallery에서 [Collections] > [DataGrid]경로를 따라서 이동한 후 Launch The Windows Community Toolkit Sample App 링크를 눌러서 이동하는 방법, 그리고 다음 두 번째 그림과 같이 Windows Community Toolkit Sample App 을 기동시킨 후 [Control] > [Layout] > [DataGrid]경로를 따라서 이동하는 방법이 있습니다. XAML Controls Gallery에서는 DataGrid를 Collections에 분류하는데 Windows Community Toolkit Sample App에서는 Layout 으로 분류하고 있으니 위치를 찾을 때 주의해야 합니다. 

다음 그림과 같이 Windows Community Toolkit Sample App의 DataGrid설명 화면에서는 좌측에 Control의 외관이 나타나고 우측 상단에는 Tab View의 형태로 속성(Properties)과 XAML 코드와 문서화된 내역(Documentation)을 확인할수 있습니다. 

다음 화면에서 화면 상단의 Theme 선택 옵션을 Dark로 선택하면 컨트롤의 색이 다음 그림과 같이 Dark 테마로 변합니다. 특별히 화면의 테마를 선택하지 않으면 기본옵션인 Light 테마가 선택되어 적용됩니다. 




※ 알아두기
Prism MVVM 프레임워크에 기본으로 선택된 화면 테마가 Light인 것은 다음 그림과 같이 App.xaml에서 prismUnity 네임스페이스에 소속된 PrismUnityApplication의 RequestedTheme 속성이 "Light"로 지정된 것을 보고 알 수 있습니다. 이 속성을 Dark로 변경하면 앱 전체의 화면 테마가 Dark로 변경됩니다. 





속성 Tab View에서 속성의 값을 변경해보면 좌측의 컨트롤 외관에 변경된 내역이 바로 반영되어 속성의 의미를 눈으로 확인할 수 있습니다. 다음 화면에 컨트롤의 외관을 변경시키는 AlternatringRowBackground 속성의 값을 Snow에서 Tomato로, AlternatingRowForeground 속성의 값을 Gray에서 Green으로 변경해보았습니다. 


XAML Tab View를 보면 좌측과 같은 컨트롤 외관이 나타나도록 하기 위한 XAML 코드를 다음 그림과 같이 확인해볼수 있습니다. 그런데 여기에 제시된 XAML 코드를 복사해서 사용해도 문법 오류가 발생합니다. 그 이유는 다음 Documentation Tab View의 Requirements 부분에서 설명한 구성 요소가 현재 프로젝트에 설치되지 않았기 때문입니다. 

그리고 Documentation Tab View에서는 컨트롤을 사용하여 프로그램을 개발할 때 필요한 핵심적인 문서화 내역(예를 들어 컨트롤에 대한 대략적인 설명, How-Tos에서는 컨트롤을 활용하는 개념과 기술에 대한 도움말들, Sample Project 부분에서는 컨트롤을 활용하는 프로젝트의 사례, Requirements 부분에서는 설명하는 컨트롤을 사용하기 위하여 설치해야 할 네임스페이스와 NuGet 패키지, 그리고 API 부분에서는 컨트롤을 제공하는 API에 대한 설명 등)을 다음그림과 같이 Tab View 상단에서 확인할수 있습니다. 그런데 아쉽게도 많은 문서화 내역이 영어로 되어 있습니다. 

프로그램 개발자와 영어는 아무래도 불가분의 관계인 것 같습니다. NuGet은 마이크로소프트에서 제공하는 .NET 패키지 관리 기술로 응용 프로그램 개발자의 관점에서는 마이크로소프트나 제3자가 제공하는 패키지들의 저장소로 이해할수 있습니다. 


그러면 DataGrid 컨트롤을 사용하기 위하여 Documentation Tab View 에서 알려주는 Microsoft.Toolkit.Uwp.UI.Controls.DataGrid라고 부르는 NuGet 패키지를 설치하겠습니다. NuGet 패키지의 설치는 다음 그림과 같이 Universal Windows 프로젝트 위에서 마우스 우측을 클릭한 후 [NuGet 패키지 관리] 메뉴 항목을 선택하여 나타난 NuGet 패키지 관리자 화면의 [찾아보기] Tab View에서 Microsoft.Toolkit.Uwp.UI.Controls.DataGrid를 찾아 설치 버튼을 클릭하는 순서로 진행하면 됩니다. 같은 방법으로 Microsoft.Toolkit.Uwp.UI.Controls 네임스페이스도 설치해야 합니다. 

Microsoft.Toolkit.Uwp.UI.Controls 와 Microsoft.Toolkit.Uwp.UI.Controls.DataGrid NuGet 패키지를 설치한 후에 XAML 문법 오류는 사라졌지만 앱을 실행해보면 다음 그림과 같이 컨트롤의 틀만 나타나고 데이터 값은 나타나지 않습니다.  DataGrid 컨트롤에 데이터를 연결하여 값을 보여주는 코딩은 6장의 UWP 프로그램 예제에서 다루겠습니다. NuGet패키지의 설치도 위와 같이  개별적인 설치가 아닌 Prism MVVM 프레임워크의 생성 단계를 따라갈것입니다. 

XAML 코드를 복사하여 사용할 때 한 가지 주의할점이 있습니다. Windows Community Toolkit Sample App의 예제에는 Page요소의 코드도 함께 들어 있는데 이 예제를 모두 복사하여 사용하면 프레임워크가 생성해준 Page와 클래스 이름이 상이하여 오류가 발생합니다. 따라서 이 예제에서 XAML 코드를 복사하여 사용할 때는 기존의 XAML 코드에서 <Page x:Class="XAML_Test.View.MainPage"와 같은 클래스 이름 부분은 덮어쓰지 않도록 주의해야 합니다. 