CHAPTER 04 : 기본 컨트롤 요소들

지금까지 XAML의 기본기를 이루는 전반적인 기술들을 살펴보았습니다. 여기까지 코딩하고 실행해보면서 따라오셨다면 그래픽이나 애니메이션 같은 고급 기술들을 제외하고 인터넷 검색이나 개발 지원 도구에서 언급하는 내용은 스스로 이해할수 있을 것입니다. 

말로 설명하기는 까다로웠지만 직접 코딩하고 실행해보면서 이해하기에는 무난한 내용이었을 것입니다. 이제는 지금까지 배운 기술들을 기반으로 XAML Controls Gallery에서 제공하는 컨트롤들을 살펴보겠습니다. 지금부터 설명할 내용 중에서 코드 비하인드 코드 조각은 XAML Controls Gallery에서는 찾을수 없습니다. 하지만 프로그램 개발자에게는 반드시 필요한 정보여서 새롭게 만들어 넣었습니다. 



※알아두기
프로그램 개발은 레고 블록 쌓기와 유사합니다. 이미 정해진 레고 블록을 사용하여 자신의 상상을 따라 자유롭게 만들어 가는 과정이 개발자의 상상력에 따라 프로그램을 개발하는 과정과 유사합니다. 블록으로 무엇인가를 만들기 위하여 블록 조각이 필요한 것과 같이 프로그램을 만들기 위해서도 코드 조각과 컨트롤 조각이 필요합니다. 만약에 우리가 컴퓨터 기술이 태동하는 시대에 태어나서 어셈블리 언어나 C 언어를 가지고 프로그램 개발을 해야 했다면 프로그램 개발을 조각이나 그림 그리기에 비유했을 것입니다. 그 시대에는 코드 조각이나 컨트롤 조각들이 부족하여 프로그램 개발자가 필요한 코드 조각과 컨트롤 조각을 직접 만들어 사용했어야 하니까요. 

그러나 객체지향 프로그램이 활성화되면서 프로그램 개발자에게 필요한 대부분의 코드 조각과 컨트롤 조각이 클래스로 제공되기 시작했습니다. 인터넷 검색을 해보면 우리가 원하는 코드 조각이나 컨트롤 조각의 대부분을 찾을 수 있습니다. 그래서 프로그램 개발자는 개발하려는 프로그램에 적합한 디지털 조각을 찾아 붙여나가면 됩니다. 이런 상황을 보고 어떤 사람들은 예전에는 프로그램 개발자가 진정한 엔지니어의 역할을 했었는데 이제는 다른 사람들의 발명품을 조립하는 신세로 전략했다고 말합니다. 그러나 필자는 그렇게 생각하지 않습니다. 오히려 프로그램 개발을 위하여 필요한 사소한 조각들을 만드는 일에 시간을 낭비하지 않고 프로그램으로 개발할 대상의 본질에 집중할 수 있는 환경이 되었다고 생각합니다. 

세상에 새로운 것은 없다고 하는데 프로그램 개발의 세계는 더욱 그러한 것 같습니다. 자신이 개발한 응용 프로그램에 집중하고 이때 필요한 코드 조각과 컨트롤 조각들은 인터넷 검색으로 찾아서 사용하면 됩니다. 

여기서는 자주 사용되는 컨트롤 조각 코드들은 간단히 소개하고 컨트롤들을 스스로 학습할 수 있는 참고 자료를 찾거나 다른 앱을 활용하는 방법을 중점으로 설명하겠습니다. 그외 자주 사용되지 않거나 프로그램에 따라 사용 여부가 결정되는 컨트롤은 6장 "UWP 프로그램 예제"에서 사용되는 컨트롤들을 중심으로 설명하도록 하겠습니다. 




1 : Basic Input

Basic Input으로 분류되는 컨트롤들은 버튼이나 체크박스 등과 같이 기본적인 정보를 출력하고 입력하게 해줍니다. 


[Basic Input] > [Button]

Button 컨트롤은 사용자의 단일 선택 입력을 받습니다. 


XAML 코드 조각										컨트롤 외관 조각
<Button Content="Button" Click="ClickEventHandler" />
<Button Style="{StaticResource AccentButtonStyle}" Content="Button" Click="ClickEventHandler" />
<Button>
	<Image Source="/Assets/Slices.png" Stretch="None" />
</Button>


첫 번째 Basic Input 컨트롤인 Button의 예에서는 x:Name 속성을 지정하는 것을 생략했습니다. 그러나 입력 컨트롤은 코드 비하인드나 뷰모델(ViewModel)프로그램에서 빈번히 사용하기 때문에 프로그램을 하다보면 자연스럽게 이름을 부여하여 사용하게 될 것입니다. 


[Basic Input] > [CheckBox]

CheckBox 컨트롤은 사용자의 두 상태(Two State)혹은 세 상태(Three State)입력을 받습니다. 

XAML 코드 조각										컨트롤 외관 조각
<CheckBox Content="두 상태 CheckBox" Unchecked="UncheckedEventHandler"
	Checked="CheckedEventHandler" />

<CheckBox Content="세 상태 CheckBox" IsThreeState="True" Unchecked="UncheckedEventHandler"
	Checked="CheckedEventHandler" Indeterminate="IndeterminateEventHandler" />




[Basic Input] > [ColorPicker]

ColorPicker 컨트롤은 선택할 수 있는 색상 범위를 보여주고 원하는 색상을 선택하게 해줍니다. ColorPicker는 사용 난이도가 높은 컨트롤이므로 이제부터 ColorPicker를 설명하면서 XAML Controls Gallery를 사용하는 방법까지 함께 설명하겠습니다. 

XAML에서는 배경이나 글자, 채우기 등의 색을 지정할 때 Blue나 Gray와 같이 색의 영문 이름을 사용할 수 있습니다. 그러나 색을 세밀하게 표현하고 싶을 때는 색을 ARGB(Alpha Red Green Blue)형태로 표현하는 16진수 값을 직접 사용해야 합니다. RGB(Red Green Blue)는 색의 3원소라는 의미를 직관적으로 파악할수 있지만, Alpha는 투명도라고 외워두어야 합니다. 투명도를 뜻하는 Transparency를 사용할수는 없었던 것일까요?

ColorPicker 컨트롤은 XAML Controls Gallery의 Basic Input 하위에서 찾을수 있습니다. XAML Controls Gallery에서 [Basic Input] > [ColorPicker]경로를 찾아 들어가면 다음 그림과 같이 컨트롤의 외관과 코드 사례가 나와 있습니다. 초기 색상은 White로 선택되어 있고 색을 나타내는 16진수 값이 #FFFFFF인 것을 확인할수 있습니다. 여기서 #은 색상 값을 16진수로 나타낸다는 것을 알려주는 구분자입니다. 


ColorPicker 컨트롤을 화면에 배치하여 사용하려면 다음 코드와 같이 사례로 제공된 코드를 복사하여 XAML 편집기의 사용자 코드 부분에 붙여넣습니다. 그리고 Alpha 값을 함께 알아보기 위하여 IsAlphaEnable 속성 값을 True로 설정합니다. ColorPicker 컨트롤은 상하 공간을 많이 차지하기 때문에 화면이 작은 장치를 고려하여 ScrollViewer요소로 ColorPicker컨트롤을 감쌌습니다. 다음 코드에서 강조된 코드는 직접 코딩한 코드이고 강조되지 않은 코드는 복사하여 넣은 코드입니다. 


XAML 코드 조각

        <ScrollViewer>
            <muxc:ColorPicker IsMoreButtonVisible="False" IsColorSliderVisible="True" IsColorChannelTextInputVisible="True" 				IsHexInputVisible="True"
                        IsAlphaEnabled="True" IsAlphaSliderVisible="True" IsAlphaTextInputVisible="True" />
        </ScrollViewer>

코드를 붙여넣으니 문법 오류가 발생합니다. 그 이유는 코드에서 사용하는 muxc 네임스페이스가 선언되지 않았기 때문입니다. ColorPicker 컨트롤이 포함된 네임스페이스는 ColorPicker 컨트롤 설명 화면의 [Documentation] 항목 하단에 있는 ColorPicker- API 링크를 누르면 나타납니다. 다음 그림과 같은 ColorPicker 의 API 문서에서 확인해보니 ColorPicker 컨트롤이 포함된 네임스페이스는 Windows.UI.Xaml.Controls 입니다. 


XAML 프로그램에서 네임스페이스를 선언하는 위치는 Page 요소입니다. 문법은 걱정할 필요 없습니다. 네임스페이스가 HTTP URL이 아니라 .NET의 네임스페이스이니, prismMvvm 네임스페이스를 선언한 것을 복사하여 사용하면 됩니다. 코딩이 완료된 프로그램은 다음과 같습니다. 주의할 것은 네임스페이스의 이름을 muxc로 XAML 코드와 맞추어야 한다는 것입니다. 



XAML 코드 조각
<Page
    x:Class="Hello_UWP_World.Views.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:muxc="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm"
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" >


이제 프로그램을 실행하면 문법 오류가 사라지고 다음 그림과 같이 ColorPicker 컨트롤을 사용할 수 있습니다. 원하는 색상을 찾아내기 위하여 ARGB 값을 수정해도 되고 상단의 색상표에서 원하는 색의 위치를 마우스로 클릭해도 됩니다. 이때 색의 이름은 마우스로 클릭된 색상표에 나타나고 색상의 16진수 표현값이 컨트롤의 우측 하단에 나타납니다. Color='LightGreen'과 같이 색의 이름을 사용하여 코딩해도 되고 더 정교한 색을 표현하기 위해 Color='#FF98FFE4'와 같이 색의 16진수 값을 사용하여 코딩해도 됩니다. 


ColorPicker 컨트롤이 Basic Input으로 분류되어 있는 것은 컨트롤에서 색의 값을 받아 사용할수 있는 틀이 만들어져 있다는 것을 의미합니다. ColorPicker 컨트롤에서 색을 가져다 Ellipse 요소에 바탕색으로 채워주도록 코드를 보완해보겠습니다. 


XAML 코드 조각
                <ScrollViewer>
                    <StackPanel >
                        <Ellipse Width="150" Height="50" Margin="10">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{x:Bind Path=myColorPicker.Color, Mode=OneWay}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <muxc:ColorPicker IsMoreButtonVisible="False" IsColorSliderVisible="True" IsColorChannelTextInputVisible="True" IsHexInputVisible="True"
                           IsAlphaEnabled="True" IsAlphaSliderVisible="True" IsAlphaTextInputVisible="True" x:Name="myColorPicker" />
                    </StackPanel>                    
                </ScrollViewer>


ColorPicker 요소를 외부 요소에서 가져다 사용해야 하기 때문에 x:Name 속성을 사용하여 이름을 myColorPicker 로 지정했습니다. 그리고 색을 가져다 사용할 요소로 Ellipse요소를 추가하고 Ellipse.Fill 속성 요소를 사용하여 상위 요소인 Rectangle의 Fill 속성에 색을 지정하고 있습니다. ColorPicker 컨트롤의 색은 <SolidColorBrush Color="{x:Bind Path=myColorPicker.Color, Mode=OneWay}" 문장으로 가져다 사용합니다. 뷰모델(ViewModel)과 데이터 바인딩하는 기법이 유사한데 Bind 키워드 앞에 x네임스페이스를 붙이고 바인딩할 대상을 myColorPicker.Color로 지정했습니다. 

데이터 바인딩은 별도의 지정을 하지 않으면 양방향으로 이루어지는데 여기서는 색을 가져다가 사용하기만 하기 때문에 데이터바인딩의 Mode 속성을 OneWay로 제한했습니다. 그런데 직관적으로 <Ellipse Width="150" Height="50" Margin="10" Fill="{x:Bind Path=myColorPicker.Color, Mode=OneWay}"/> 문장과 같이 한 문장으로 해결할 수 있을 것 같은데 문법 오류를 발생시키니 SolidColorBrush 요소를 활용한 데이터 바인딩 기법을 사용해야 합니다. 


SolidColorBrush 요소는 색을 지정하기 위한 객체로 이해하면 됩니다. 두 개 이상의 요소를 배치해야 하기 때문에 StackPanel 요소로 Ellipse요소와 ColorPicker 컨트롤을 감싸 주었습니다. 그리고 배치한 전체 요소에 Scroll Bar를 적용하기 위하여 ScrollView 요소를 StackPanel 요소바깥으로 옮겼습니다. 



※ [Basic Input] > [ComboBox]

ComboBox 컨트롤은 사용자에게 드롭다운 리스트 항목들을 보여준 후, 나열된 값 중에서 선택하여 입력하게 합니다. Header 속성은 여기서 처음 사용했는데 입력 컨트롤에 Header 속성을 지정하면 입력 항목의 바로 위에 지정되는 헤더(Header)혹은 레이블(Label), 타이틀(Title)로 사용됩니다. 그런데 방금 보신 것처럼 하나의 항목을 설명하기 위한 용어가 3개나 됩니다. 그래서 필자는 용어로 설명하기보다 프로그램의 실행 결과로 설명하는 것이 더 타당하다고 생각합니다. 개발 도구나 시스템, 사람마다 사용하는 용어가 제각각입니다. 때로는 용어가 같아도 의미가 서로 다르기도 합니다. 

아무튼 Header 속성은 다음의 컨트롤외관 조각의 색상 ComboBox 의 타이틀로 보이는 것처럼 사용됩니다. Header 속성은 Button, CheckBox 및 RadioButton등의 입력 컨트롤을 제외하고 RatingControl, Slider 등을 포함한 거의 대부분의 입력 컨트롤에서 사용됩니다. PlaceholderText 속성도 처음 사용되었네요 값이 입력되기 전에 설명 문구로 사용되는 것이 매우 직관적입니다. 



XAML 코드 조각

            <ComboBox SelectionChanged="SelectionChangedEventHandler" Header="색상" PlaceholderText="색상을 고르세요." Width="200">
                <x:String>빨강</x:String>
                <x:String>파랑</x:String>
                <x:String>초록</x:String>
            </ComboBox>


ComboBox 컨트롤은 ListBox와 마찬가지로 여러 개의 값을 데이터 바인딩할수 있는데 자세한 것은 "여러 값의 데이터 바인딩"절을 참조하기 바랍니다. 코딩 방법은 기본적으로 동일합니다. 

<x:String> 태그는 XAML의 기본 데이터 타입을 표현하는 요소입니다. XAML의 기본 자료형은 자주 사용되지는 않으나 x:Object, x:Boolean, x:Char, x:String, x:Decimal, x:Single, x:Double, x:Int16, x:Int32, x:Int64, x:TimeSpan, x:Uri, x:Byte 및 x:Array 등이 있습니다. 




※ [Basic Input] > [HyperlinkButton]

HyperlinkButton 컨트롤은 문자열 형식으로 된 Hyperlink를 보여주고, 클릭하면 지정한 URL로 이동하게 해줍니다. 단 이방법으로 이동할 때에는 UWP앱에서 이동하는 것이 아니라 웹 브라우저를 통하여 이동하게 됩니다. 


XAML 코드 조각
<HyperlinkButton Content="홈페이지" NavigateUri="http://www.company.com" />




※[Basic Input] > [RadioButton]

RadioButton 컨트롤은 상위 요소에 포함된 상호 배타적인 선택 항목들 중에서 하나를 선택하게 합니다. GroupName 속성과 IsChecked 속성은 직관적이어서 설명이 추가로 필요하지 않습니다. 


XAML 코드조각
                <StackPanel>
                    <TextBlock Text="색상선택:" Style="{ThemeResource BaseTextBlockStyle}" />
                    <RadioButton GroupName="ColorOptions" x:Name="OptionRadioButtonRed" Content="빨강" IsChecked="True" Checked="ColorOptionCheckedEventHandler" />
                    <RadioButton GroupName="ColorOptions" x:Name="OptionRadioButtonGreen" Content="초록" Checked="ColorOptionCheckedEventHandler" />
                    <RadioButton GroupName="ColorOptions" x:Name="OptionRadioButtonBlue" Content="파랑" Checked="ColorOptionCheckedEventHandler" />
                </StackPanel>




※ [Basic Input] > [RatingControl]

RatingControl 컨트롤은 별 하나인 1단계부터 별 다섯 개인 5단계의 범위로 등급을 지정합니다. 



XAML 코드 조각
<StackPanel>
	<muxc:RatingControl PlaceholderValue="1" />
	<muxc:RatingControl PlaceholderValue="3" />
	<muxc:RatingControl PlaceholderValue="5" />
</StackPanel>



※[Basic Input] > [Slider]

Slider 컨트롤은 정해진 범위의 값을 슬라이더 버튼으로 선택합니다. 값의 범위를 별도로 지정하지 않으면 0에서 100사이의 값을 선택할 수 있습니다. StepFrequency 속성을 지정하지 않으면 연속적인 (Continuous)값을 선택할 수 있고 StepFrequency 속성을 지정하면 이산적인 (Discrete)값을 선택할수 있습니다. 


XAML 코드조각

                <StackPanel>
                    <Slider Width="200" Value="0" />
                    <Slider Width="200" Value="50" />
                    <Slider Width="200" Minimum="500" Maximum="1000" Value="1000" />
                    <Slider Header="150" Orientation="Vertical" HorizontalAlignment="Center" StepFrequency="10" TickFrequency="20" TickPlacement="Outside" Value="50" />
                </StackPanel>





※[Basic Input] > [ToggleSwitch]

ToggleSwitch 컨트롤은 On과 Off 상태를 선택하게 하며 On과 Off 상태 레이블과 헤더 레이블을 지정할수 있습니다. 


XAML 코드조각

<StackPanel>
	<ToggleSwitch/>
	<ToggleSwitch Header="점멸신호" OffContent="소등" OnContent="점등" IsOn="True" />
</StackPanel>