2 : SimpleDataGrid 앱 개발하기

SimpleDataGrid 앱은 MVVM 프로젝트 패턴의 전체적인 기술과 DataGrid 컨트롤의 활용법과 API를 호출하여 동작하는 클라이언트(Client)프로그램에 필요한 기본 기술들, 즉 기본기를 보여주도록 고안되었습니다. 

이 예제는 다음 그림과 같이 앱이 기동될 때 DataGrid 컨트롤을 사용하여 사용자 정보를 보여준후 특정 사용자를 탭하면 사용자의 상세 정보를 보여줍니다. 그리고 DataGrid의 상단에 위치한 항목명을 탭하면 상향 정렬(Ascending Sort)하고 한 번 더 탭하면 하향 정렬(Descending Sort)하며 한 번더 탭하면 원상태로 돌아가게 됩니다. 그리고 남반구 사용자와 북반구 사용자를 선택하여 해당 지역의 사용자만 골라보기(Filtering)를 할 수 있습니다. 


앱을 개발하는 순서는 다음과 같습니다. 

※ 첫째, API를 호출하기 위한 모델(Model)을 만듭니다. 

※ 둘째, 모델(Model)을 사용하여 사용자 목록을 가져오기 위한 API를 호출하는 뷰모델 (ViewModel)과 API 호출된 결과를 보여주는 사용자 목록 뷰(View)를 만듭니다. 

※ 셋째, 사용자 상세 정보를 보여주기 위한 화면을 만들고 사용자 목록에서 특정 사용자를 탭하면 사용자 상세 화면으로 전환9Navigation)하고 사용자 상세 화면에서 <뒤로가기> 버튼을 탭하면 다시 사용자 목록 화면으로 전환하는 기능을 만듭니다. 

※ 넷째, 사용자 목록을 정렬하고 골라서 보는 기능을 구현할 것입니다. 이때 데이터를 관리하기 위하여 널리 사용되는 LINQ 라고 하는 기술을 함께 알아볼 것입니다. 




※ Prism Framework 기반의 새 프로젝트 만들기

비주얼 스튜디오 화면에서 [파일] > [새로 만들기] > [프로젝트] 메뉴 항목을 선택한 후 아래와 같은 정보를 사용하여 SimplePrismBlank 앱 프로젝트를 만들 때와 같은 방법으로 프로젝트 만들기를 시작합니다. 


※ 템플릿 : Windows Template Studio(Universial Windows)

※ 프로젝트 이름 : SimpleDataGrid

※ 프로젝트 유형 : [Blank]

※ Design Pattern : [Prism]

페이지 추가 화면에서 추가할 페이지로 DataGrid를 선택하고 페이지의 이름을 UserList로 설정합니다. XAML 프로그램 기본기를 설명할 때에는 XAML Controls Gallery에서 DataGrid 코드를 복사하여 사용했는데 이번에는 Prism 패키지가 제공하는 페이지 기능을 사용하여 DataGrid 페이지를 만드는 것입니다. 예제를 완성해가면서 코드 샘플을 제공하는 것보다 프레임워크를 제공할 때 더 강력하다는 점을 이해할수 있게 될 것입니다. 

Blank Main 페이지 대신에 Main 페이지로 사용할 UserList 페이지를 만들었으니 필요없는 Blank Main 페이지는 삭제합니다. Main 페이지 우측의 <X> 버튼을 클릭해 Blank Main 페이지를 삭제한후 <다음> 버튼을 클릭합니다. 


기능 추가 화면에서 [Settings Storage]를 선택한 후 <만들기> 버튼을 클릭해 프로젝트 생성 작업을 완료합니다. 


프로젝트가 생성된 후 솔루션 탐색기를 보면 Views와 ViewModels 폴더에 UserListPage.xaml과 UserListViewModel.cs 파일이 생성되어 있는 것을 알 수 있는데 이것은 위에서 프로젝트를 생성할 때 DataGrid 페이지를 선택해서 생긴 것입니다. 그리고 UniversalWindows 프로젝트의 Helpers 폴더에는 SettingsStorageExtensions.cs 파일이 생성되어 있고 Core 프로젝트의 Helpers 폴더에는 Json.cs 파일이 생성되어 있는데 이것은 위에서 프로젝트를 생성할 때 Settings Storage 기능을 선택해서 생긴 것입니다. 

Helpers 폴더에 생성된 클래스들의 용도는 "2.6 MVVM 프로그램 패턴 중 모델이해하기"에서 언급했는데 이번 예제에서도 http://jsonplaceholder.typicode.com 사이트에서 제공하는 API를 사용할 것이기 때문에 프로젝트를 생성할 때 함께 생성했습니다. 

이제 앱을 실행해보면 다음 그림과 같이 Prism이 제공하는 기본 기능으로 DataGrid컨트롤상에 판매와 관련된 정보가 나오는 것을 확인할수 있습니다. 우리는 Prism 패키지가 제공하는 이 기본 기능을 "Item Template과 Data Template"절에서 언급한 http://jsonplaceholder.typicode.com/users API를 사용하여 사용자 목록 정보를 보여주도록 변경할 것입니다. 





※ 모델 만들기

DataGrid 로 구성된 사용자 목록을 구현하기 위한 뷰(View)와 뷰모델(ViewModel)은 Prism 프레임워크에 의하여 만들어졌습니다. 그리고 Prism 프레임워크에 의하여 제공되는 모델(Model)은 다음 그림과 같이 Models 폴더에서 확인할 수 있습니다. 하지만 http://jsonplaceholder.typicode.com/users API를 사용하여 판매 정보가 아니라 사용자 정보를 보여줄 것이기 때문에 모델(Model)을 다시 만들어야 합니다. 모델(Model)을 만드는 방법은 "2.6 MVVM 프로그램 패턴 중 모델 이해하기" 에서 언급했기 때문에 이론적인 설명은 하지 않고 복습을 위해 다시 만들어 보겠습니다. 


우선 브라우저의 주소 창에 http://jsonplaceholder.typicode.com/users 을 입력합니다. 그러면 다음 그림과 같이 모두 10명의 사용자 정보를 JSON 형식으로 반환해주는 것을 확인할수 있습니다. 첫 화면에는 2명의 사용자 정보만 보이지만 화면을 아래로 스크롤해 보면 모두 10명의 사용자 정보가 있습니다. 


다시 브라우저의 주소 창에 http://jsonplaceholder.typicode.com/users/1을 입력해봅시다. 그러면 다음 그림과 같이 ID가 1인 사용자 1명에 대한 정보를 반환해주는 것을 확인할수 있습니다. API라는 개념도 용어는 어렵지만 실행하고 그 결과를 확인해보니 별로 어렵지 않게 느껴지지요? 특정한 기능을 수행하도록 미리 개발되어 제공되는 라이브러리처럼 사용하면 됩니다. 


모델(Model)생성을 위하여 Models 폴더에 클래스를 하나 생성합니다. 클래스의 이름은 API 이름과 일관성을 유지하기 위하여 User로 하겠습니다. 

솔루션 탐색기에 User.cs 파일이 생성된 것을 확인한 후 User.cs 파일을 편집하기 위하여 파일을 더블클릭합니다. User.cs 파일의 편집기가 열리면 다음 그림과 같이 User 클래스를 정의한 코드 전체를 마우스로 묶습니다. 

그런 다음 https://jsonplaceholder.typicode.com/users/1 API 실행 결과 전체를 복사하여 [편집] > [선택하여 붙여넣기] > [JSON을 클래스로 붙여 넣기] 메뉴 항목을 차례로 클릭해 JSON을 클래스에 붙여넣습니다. 

그리고 비주얼 스튜디오에 의하여 자동으로 Rootobject라는 이름이 부여된 클래스의 이름을 User로 변경합니다. 


Core에 Models에 User.cs 클래스 생성

User.cs

    public class User
    {
        public int id { get; set; }
        public string name { get; set; }
        public string username { get; set; }
        public string email { get; set; }
        public Address address { get; set; }
        public string phone { get; set; }
        public string website { get; set; }
        public Company company { get; set; }
    }

    public class Address
    {
        public string street { get; set; }
        public string suite { get; set; }
        public string city { get; set; }
        public string zipcode { get; set; }
        public Geo geo { get; set; }
    }

    public class Geo
    {
        public string lat { get; set; }
        public string lng { get; set; }
    }

    public class Company
    {
        public string name { get; set; }
        public string catchPhrase { get; set; }
        public string bs { get; set; }
    }
이번에는 하나의 클래스는 하나의 파일에 저장한다는 원칙에 따라 User.cs 파일을 User.cs, Address.cs, Geo.cs, Company.cs 파일로 각각 분리합니다. 분리하는 방법은 다음 그림과 같이 User.cs 파일에서 User 클래스가 아닌 클래스 이름 위에 마우스 커서를 올려놓고 마우스 오른쪽 버튼을 누른후 나타나는 팝업 메뉴에서 [빠른 작업 및 리팩터링]메뉴 항목을 선택하면 됩니다. 



이때 실행할 빠른 작업 및 리팩토링을 묻는 팝업이 다시 나타나는데 다음 그림과 같이 첫 번째로 제시되는 [Address.cs(으)로 형식 이동] 이라는 메뉴 항목을 선택하기 바랍니다. 


예시로 Address.cs 파일 하나만 캡처하여 보여드립니다. 나머지 Model 클래스들에 대해서도 동일한 방법으로 작업합니다. 

클래스를 별도의 파일로 분리하는 작업이 완료되면 Core 프로젝트의 Models 폴더에서 분리된파일들이 다음 그림과 같이 존재하여야 합니다. 




※ UserListViewModel 뷰모델 수정하기

Prism 프레임워크가 제공하는 UserListViewModel.cs 코드는 다음 화면과 같은데 실선으로 표시된 부분이 우리가 수정해야 할 부분입니다. 점선으로 표시된 부분은 SimpleDataService를 사용하기 위한 코드로 프로그램의 난이도를 높이지 않기 위하여 여기서는 사용하지 않을 것이니 코드를 삭제하거나 주석처리하면 됩니다. 


먼저 실선으로 둘러싼 코드인 public ObserableCollection<SimpleOrder> Source {get; } = new ObservableCollection<SampleOrder>(); 부분을 봅니다. 



UserListViewModel.cs
생략
        private IList<User> _users;
        public IList<User> users
        {
            get => _users;
            set => SetProperty(ref _users, value);
        }
생략

변수의 이름은 Source이고 읽기 전용 속성으로 정의하고 있습니다. 값을 저장하기 위한 set 접근자를 사용하지 않았으니 읽기 전용 속성인 것이죠. 정의된 속성은 뷰에서 데이터 바인딩으로 가져다 사용합니다. 클래스는 Generic으로 SampleOrder 객체의 ObservableCollection 입니다. ObservableCollection Generic 클래스는 데이터의 Collection을 관리합니다. 이 코드에서는 SampleOrder 데이터의 Collection을 관리하는 것이니 우리는 SampleOrder Model 대신에 앞에서 정의한 User Model로 수정해야 할 것처럼 보입니다만 그러면 SampleDataService에 준하는 서비스를 생성해야 합니다. 그래서 ObservableCollection을 사용하지 않고 Collection 객체를 관리할 때 일반적으로 사용하는 IList 인터페이스를 사용하도록 앞의 코드와 같이 수정했습니다. 변수의 이름도 Source에서 users로 변경했습니다. 




※ 알아두기
Generic 클래스는 Template 클래스라고도 부르는데 특정 데이터 타입에 국한되지 않고 일반적으로 사용되도록 정의해 놓은 클래스입니다. 위의 예에서는 부등호 괄호( < >)사이에 SampleOrder를 기술하면 SampleOrder 의 객체 Collection을 관리하고 User를 기술하면 User의 객체 Collection을 관리하는 것입니다. 



이제 실선으로 둘러싼 두번째 코드인 OnNavigatedTo() 메소드를 봅니다. 비동기 호출로 sampleDataService의 GetGridDataAsync() 메소드를 호출하여 판매 데이터를 가져옵니다. 가져온 데이터는 Source라는 이름의 ObservableCollection 객체의 Add() 메소드를 사용하여 추가하게 되어 있습니다. 우리는 이 부분의 코드를 "Item Template과 Data Template"절에서 설명한 것과 같이 HTTP Client 를 호출하는 방법으로 수정할 것입니다. 그래서 다음 코드와 같이 수정해보았습니다. base.OnNavigatedTo(e, viewModelState); 문장은 상속받은 부모 클래스의 로직이 실행되도록 보장하기 위하여 삭제하거나 주석 처리하지 않고 남겨두었습니다. 
UserListViewModel.cs 파일에서 users 속성아래에 작성

        public override async void OnNavigatedTo(NavigatedToEventArgs e, Dictionary<string, object> viewModelState)
        {
            base.OnNavigatedTo(e, viewModelState);

            using (HttpClient httpClient = new HttpClient())
            {
                string httpResponse = await httpClient.GetStringAsync("https://jsonplaceholder.typicode.com/users");
                User[] tempUsers = await Json.ToObjectAsync<User[]>(httpResponse);
                users = tempUsers.ToList();
            }
            
        }

※ 알아두기

OnNavigatedTo() 메소드는 XAML 화면이 전환되어 들어올 때마다 실행되는데 다른 화면으로 갔다가 돌아올 때도 실행되기 때문에 DataGrid에 데이터를 채우는 코드를 기술하기에 생성자보다 적합합니다. 생성자는 화면이 처음 나타날때만 데이터를 채워주기 때문입니다. OnNavigatedTo()메소드의 상대적인 메소드로 OnNavigatedFrom() 메소드가 있습니다. 이 메소드는 XAML 화면이 전환되어 나갈 때마다 실행되는데 다른 화면으로 전환하기 전에 현재 화면의 상태를 보관하는 용도로 사용하기에 적합합니다. 



※ 알아두기
Prism 프레임워크가 제공하는 프로젝트에는 Helpers라는 폴더와 Services라는 폴더가 있습니다. 각각 Helper 객체와 Service 객체를 지원하는데, 이 둘은 모두 특정한 기능을 제공하는 객체입니다. 둘의 차이를 알기 위하여 Helpers 폴더에 저장되는 객체를 보면 ResourceExtensions, SettingsStorageExtensions, Json, Singleton 등의 객체가 제공되는 것을 알 수 있습니다. 이번에는 Services 폴더에 저장되는 객체를 봅니다. 
ISampleDataService 인터페이스와 ISampleDataService 객체가 제공되어 있습니다. 
예를 통해서 알 수 있듯이 Helper는 특정한 기능을 제공하는 객체인데 Json 처리와 같은 하위 레벨의 기술적 기능을 제공하고, Service는 견본 데이터를 제공하는 서비스를 수행하는 상위 레벨의 업무적 기능을 제공합니다. 이론적 설명보다 예를 들어 설명하니 Helper와 Service의 구분이 명확해집니다. 

그런데 문법 오류가 발생하여 HttpClient와 Json과 ToList 아래에 빨간색 밑줄이 생겨났습니다. 이럴 때는 어떻게 해결할까요? 그렇습니다. 빨간색 밑줄이 나타난 위치로 마우스 커서를 이동한 후 <Ctrl> + <.>키를 눌러서 적절한 using 선언문을 추가해야 합니다. 그러면 다음 코드와 같이 using 선언문이 코드의 상단에 추가되는 것을 확인할수 있습니다. HttpClient객체는 System.Net.Http 네임스페이스에 정의되어 있고. Json 객체는 Settings Storage 기능 설치시 추가된 SimpleDataGrid.Core.Helpers 네임스페이스에 정의되어 있으며 ToList()메소드는 System.Linq 네임스페이스에 정의되어 있습니다. 


UserListViewModel.cs

생략
using System.Net.Http;
using SimpleDataGrid.Core.Helpers;
using System.Linq;
생략




※ UserListPage 뷰 수정하기

Prism 프레임워크가 제공하는 UserListPage XAML 코드에서 눈여겨볼 부분은 <controls:DataGrid> 태그입니다. XAML 코드가 길지만 판매 데이터의 칼럼이 많아서 그렇지 코드는 매우 단순합니다. 프레임워크가 제공한 모든 코드를 다 이해하려고 하지 말고 우선 필요한 부분만 이해해봅시다. 



UserListPage.xaml

생략

<Grid Grid.Row="1">
            <controls:DataGrid
                AutoGenerateColumns="False"
                GridLinesVisibility="Horizontal"
                ItemsSource="{x:Bind ViewModel.Source, Mode=OneWay}">
                <controls:DataGrid.Columns>
                    <!--
                        TODO:
                        Remove this column definitions and define columns for your data.
                        Consider adding header properties to Resources.resw
                    -->
                    <controls:DataGridTextColumn Binding="{Binding OrderID}" Header="OrderID" />
                    <controls:DataGridTextColumn Binding="{Binding OrderDate}" Header="OrderDate" />
                    <controls:DataGridTextColumn Binding="{Binding Company}" Header="Company" />
                    <controls:DataGridTextColumn Binding="{Binding ShipTo}" Header="ShipTo" />
                    <controls:DataGridTextColumn Binding="{Binding OrderTotal}" Header="OrderTotal" />
                    <controls:DataGridTextColumn Binding="{Binding Status}" Header="Status" />
                    <controls:DataGridTemplateColumn Header="Symbol">
                        <controls:DataGridTemplateColumn.CellTemplate>
                            <DataTemplate x:DataType="model:SampleOrder">
                                <FontIcon
                                    Margin="{StaticResource SmallLeftRightMargin}"
                                    HorizontalAlignment="Left"
                                    FontFamily="{ThemeResource SymbolThemeFontFamily}"
                                    Glyph="{x:Bind Symbol}" />
                            </DataTemplate>
                        </controls:DataGridTemplateColumn.CellTemplate>
                    </controls:DataGridTemplateColumn>
                </controls:DataGrid.Columns>
            </controls:DataGrid>
        </Grid>
    </Grid>
</Page>

상단의 ItemsSource="{x:Bind ViewModel.Source, Mode=OneWay}" 코드를 봅니다. Items 속성에 데이터 바인딩을 통하여 뷰 모델의 Source읽기 전용 속성을 연결하면 userListViewModel의 데이터를 가져다 사용할 수 있습니다. 이 코드는 뷰 모델에서 Source를 users로 변경했으니 ItemsSource="{x:Bind ViewModel.users, Mode=OneWay}" 로 수정해야 합니다. 

다음에는 보여줄 칼럼 하나를 분석해보겠습니다. <controls:DataGridTextColumn Binding="{Binding OrderID}" Header="OrderID" />와 같은 코드를 보면 DataGrid에 보여줄 데이터는 Binding="{Binding OrderID}"와 같이 데이터 바인딩하고 있고 DataGrid의 헤더 타이틀은 Header="OrderID"와 같이 속성으로 지정하는 것을 알 수 있습니다. 

사용자 ID에 대하여 칼럼을 지정하는 것으로 수정하려면 Binding="{Binding id}"와 같이 수정하고 Header="사용자ID"와 같이 수정하는데 id와 같은 칼럼명은 Model에 지정한 이름과 동일해야 합니다. User Model객체는 하위에 Address와 Company Model 객체를 가지고 있는데 상위 객체와 하위 객체의 요소는 다음 코드의 company.name나 address.geo.lat와 같이 점(.)으로 분리하여 기술합니다. 그리고 각각의 칼럼은 수정하지 않을 것이기 때문에 IsReadOnly="True" 속성을 추가합니다. 같은 방법으로 UserModel의 항목들을 대상으로 동일한 코딩을 반복합니다. 



UserListPage.xaml
생략

<Grid Grid.Row="1">
            <controls:DataGrid
                AutoGenerateColumns="False"
                GridLinesVisibility="Horizontal"
                ItemsSource="{x:Bind ViewModel.users, Mode=OneWay}">
                <controls:DataGrid.Columns>
                    <!--
                        TODO:
                        Remove this column definitions and define columns for your data.
                        Consider adding header properties to Resources.resw
                    -->
                    <controls:DataGridTextColumn Binding="{Binding id}" Header="사용자 ID" IsReadOnly="True" />
                    <controls:DataGridTextColumn Binding="{Binding name}" Header="이름" IsReadOnly="True"/>
                    <controls:DataGridTextColumn Binding="{Binding company.name}" Header="회사" IsReadOnly="True" />
                    <controls:DataGridTextColumn Binding="{Binding address.city}" Header="도시"  IsReadOnly="True" />
                    <controls:DataGridTextColumn Binding="{Binding address.geo.lat}" Header="위도" IsReadOnly="True" />                    
                </controls:DataGrid.Columns>
            </controls:DataGrid>
        </Grid>
    </Grid>
</Page>

상단의 디자인 보기와 하단의 XAML 코드를 모두 참조해보기 바랍니다. 


모델과 뷰모델 그리고 뷰를 모두 수정했으니 이제 실행해봅시다. 


그런데 실행 화면에서 특정 필드가 선택되어 나타나는 것이 눈에 거슬립니다. 이 문제를 해결하려면 DataGrid의 속성으로 IsTabStop = "False"를 추가해야 합니다. <Tab>키가 이동하지 못하게 하겠다는 의미로 칼럼의 IsReadOnly="True"속성과 결합하여 DataGrid의 필드를 선택될수 없게 합니다. 


UserListPage.xaml
생략
            <controls:DataGrid
                AutoGenerateColumns="False"
                GridLinesVisibility="Horizontal"
                ItemsSource="{x:Bind ViewModel.users, Mode=OneWay}" IsTabStop="False">
생략


이제 다시 앱을 실행해봅니다. 

그리고 상세 정보를 확인할 사용자를 탭합니다. 아직은 선택된 사용자 정보가 하이라이트되기만 하고 정보를 볼수는 없는데 이는 프레임워크가 사용자의 상세 정보를 보는 기능을 제공하지 않기 때문입니다. 





※ UserDetail 페이지 추가하기

이제 프레임워크가 제공하지 않는 사용자 상세 화면을 구현하겠습니다. 사용자 상세 화면을 구현하기 위해서는 뷰모델(ViewModel)과 뷰(View)가 동시에 필요한데 이 두가지 파일은 페이지 추가 기능을 통하여 이루어집니다. 앞에서 프로젝트를 생성하면서 UserList 페이지를 만들도록 선택했을 때 UserListViewModel.cs 와 UserListPage.xaml파일이 동시에 생성된 것이 기억나지요? 이때 사용된 것이 페이지 추가 기능입니다. 

프로젝트를 생성한 후 페이지를 추가하려면 다음 그림과 같이 Universal Windows 프로젝트에 마우스 커서를 놓고 [마우스 우측 버튼] > [Windows Template Studio] > [새페이지]메뉴 항목을 선택합니다. 


프로젝트를 생성할 때처럼 새 페이지를 선택하는 화면에서 추가하려는 템플릿으로 [Blank]를 선택하고 페이지 이름으로 UserDetail이라고 입력한 후 <다음> 버튼을 클릭합니다. 

변경 항목 요약 화면에서 수정된 파일과 생성된 파일을 확인한 후 <만들기> 버튼을 클릭합니다. 뷰모델인 UserDetailViewModel.cs 파일과 뷰인 UserDetailPage.xaml 파일과 뷰의 코드 비하인드 파일인 UserDetailPage.xaml.cs 파일이 동시에 생성되는 것을 확인할 수 있습니다. 





※ 네비게이션 기능 구현하기

UWP 프로그램에서 화면과 화면 간을 이동하는 것을 내비게이션(Navigation/화면 전환)이라고 부릅니다. Prism 기반의 페이지는 생성되면 바로 실행할 수 있기 때문에 사용자 목록 화면에서 특정 사용자를 탭했을 때 사용자 상세 화면으로 이동하는 기능을 먼저 만들어보겠습니다. 

먼저 내비게이션 기능을 구현하려면 NavigationService 객체, 아니 정확하게 표현하면 INavigationService 인터페이스의 도움이 필요합니다. 그래서 NavigationService객체 변수를 UserListViewModel.cs 파일에 속성으로 만들어보겠습니다. 속성으로 만드는 이유는 NavigationService 객체는 뷰모델에서 만들어지지만 뷰나 뷰의 코드 비하인드에서도 사용되기 때문입니다. 

다음 코드에서 생성되는 변수의 타입으로 INavigationService가 사용되는 것을 제외하면 일반 속성의 정의와 동일하므로 쉽게 이해할수 있을 것입니다. 단 Navigation 객체는 외부에서 변경되면 안 되기 때문에 set 접근자를 주석 처리하여 읽기 전용 속성으로 만들었습니다. 



UserListViewModel.cs
생략

        private INavigationService _navigationService;
        public INavigationService NavigationService
        {
            get => _navigationService;
            //set => SetProperty(ref _navigationService, navigationService);
        }
생략


NavigationService가 만들어지는 때는 뷰모델(ViewModel)이 생성되는 시점입니다. 뷰모델(ViewModel)이 만들어지는 시점에 나중에 사용할 목적으로 속성에 값을 저장해 두어야 합니다. 어떤 객체가 생성되는 시점에 실행되는 것은 생성자인데, NavigationService의 값을 받아 실행되는 생성자는 다음 코드와 같습니다. 생성자 안에는 앞에서 정의한 NavigationService 객체 변수에 뷰모델(ViewModel)이 가지고 있는 값을 저장하는 역할을 하는 코드만 있으면 됩니다. 그런데 다음 코드에서는 NavigationService 속성에 값을 저장하지 않고 _navigationService private 객체 변수에 값을 할당하고 있습니다. 이것은 set 접근자가 정의되지 않아 NavigationService 속성에 값을 저장할수 없는 문법적 제약이 있기 때문입니다. 



UserListViewModel.cs
생략
        public UserListViewModel(INavigationService navigationService)
        {
            _navigationService = navigationService;
        }
생략




※ 알아두기
일반적으로 C#의 생성자는 객체를 생성하기 위한 목적으로 사용됩니다. 그런데 위의 예제를 보면 반대로 UserListViewModel 생성자에서 navigationService 인자를 받아 사용하는 것을 볼 수 있습니다. 이것은 Prism 프레임워크가 의존성 주입(Dependency Injection)기술을 사용하여 앱 전체에서 사용할 Navigation객체를 하나 (Singleton)만들어 공유하기 위하여 생성자를 호출해 주기 때문에 이렇게 사용할 수 있는 것입니다. 




DataGrid 컨트롤에 나타나는 항목을 마우스로 탭하면 SelectionChanged 이벤트가 발생합니다. 이 이벤트의 핸들러에서 사용자 상세 화면으로 이동하는 로직을 달아 보겠습니다. 이벤트를 처리하는 방법으로는 뷰에서 데이터 바인딩하는 방법과 뷰의 코드 비하인드에서 처리하는 방법이 있습니다. 


우리는 화면을 제어하기에 가장 간단한 코드 비하인드에서 처리하는 방법을 사용할것입니다. 우선 사용자 목록을 구성하는 DataGrid 에 이벤트를 달기 위하여 다음 코드와 같이 컨트롤에 이름을 부여하고이벤트 핸들러를 지정합니다. 물론 XAML 코드를 직접 코딩하지 않고 속성 지정 화면을 사용해도 됩니다. 필자는 개인적으로 속성 지정화면을 사용합니다. 코드 비하인드 파일에 이벤트 핸들러를 자동으로 생성해주기 때문입니다. 



UserListPage.xaml

생략

            <controls:DataGrid
                AutoGenerateColumns="False"
                GridLinesVisibility="Horizontal"
                ItemsSource="{x:Bind ViewModel.users, Mode=OneWay}" IsTabStop="False" x:Name="userList" 	    SelectionChanged="userList_SelectionChanged">
생략

이벤트 핸들러에서 Navigation을 구현하는 코드도 다음과 같이 비교적 단순합니다. 



UserListPage.xaml.cs

생략

        private void userList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            User user = e.AddedItems[0] as User;
            string userId = user.id.ToString();

            ViewModel.navigationService.Navigate(PageTokens.UserDetailPage, userId);
        }

생략


먼저 User user = e.AddedItems[0] as User; 문장을 봅니다. e 이벤트 인자의 AddedItem 속성에 탭된 사용자 정보가 넘어오는데, 동시에 여러 개를 선택할 수 있기 때문에 그 중 첫 번째로 선택된 사용자 정보를 User 타입으로 변환하여 user 변수에 저장해주는 코드입니다. 

이어서 사용자 ID를 문자열로 바꾸어 userId 변수에 저장합니다. 


ViewModel.NavigationService.Navigate(PageTokens.UserDetailPage.userId); 문장으로 사용자 상세 화면으로 이동하는데 ViewModel은 UserListViewModel.cs 파일에서 정의된 ViewModel 객체이고 그 안에 NavigationService 속성을 생성했었습니다. 그 객체안의 Navigate()메소드를 호출하면 페이지 이동이 이루어집니다. 첫 번째 인자로 페이지의 이름을 넘겨주고 두 번째 인자로는 이동할 페이지에 전달할 인자값을 넘겨주어야 하는데 이 예제에서는 선택된 사용자 ID를 넘겨줍니다. 




※ 알아두기
그런데 선택된 사용자 정보가 e.AddedItems에 들어 있다는 것은 어떻게 알 수 있을까요? 언뜻 생각나는 방법으로 인터넷 검색을 해보는 방법과 디버거를 사용하는 방법이 있는데 디버거를 사용하면 빈 이벤트 핸들러에 중단점을 설정한 후 나타나는 변수목록에서 확인할수 있습니다. 후자가 응용 프로그램 개발자에게 더 좋은 방법입니다. 필요한 모든 자식을 미리 공부해 두지 않고 그때그때 필요한 자식을 찾아서 알게 되기 때문입니다. 아래에 디버깅 화면을 복사해 놓았으니 참고하기 바랍니다. 디버깅 기능이 주는 개발자의 생산성 향상 때문에 필자는 통합개발 도구 중에서 비주얼 스튜디오 개발자 도구를 가장 선호합니다. 




※ 알아두기
NavigationService의 Navigate() 메소드에 첫 번째 인자로 넘겨준 PageTokens 객체의 UserDetailPage 는 다음 그림과 같이 페이지를 생성할 때 string 타입의 상수 문자열로 자동 생성됩니다. 

여기까지 이책의 안내를 따라서 코딩했으면 앱을 실행해봅니다. 사용자를 탭할 때 사용자 상세 화면으로 이동하는 것을 확인할 수 있습니다. 

UWP 프로그램에서 이벤트 처리와 이벤트 핸들러를 구현하기 위하여 뷰와 커맨드 바인딩과 뷰모델 프로그램을 함께 사용한다고 했습니다. 이렇게 처리하는 예제를 살짝 보고 넘어갑시다. 여기서 설명하는 것들은 따라서 코딩하지 마시고 읽으면서 이해하기 바랍니다. 우선 XAML 코드를 보면 다음과 같은 형태를 따릅니다. 





UserListPage.xaml

<Page
    x:Class="SimpleDataGrid.Views.UserListPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Style="{StaticResource PageStyle}"
    xmlns:prismMvvm="using:Prism.Windows.Mvvm" xmlns:core="using:Microsoft.Xaml.Interactions.Core" xmlns:i="using:Microsoft.Xaml.Interactivity"
    prismMvvm:ViewModelLocator.AutoWireViewModel="True" 
    xmlns:model="using:SimpleDataGrid.Core.Models"
    mc:Ignorable="d">
    <Grid x:Name="ContentArea" Margin="{StaticResource SmallLeftRightMargin}">
        <Grid.RowDefinitions>
            <RowDefinition Height="48" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Row="0"
            x:Uid="UserList_Title"
            Margin="{StaticResource SmallLeftMargin}"
            Style="{StaticResource PageTitleStyle}" />
        <Grid Grid.Row="1">
            <controls:DataGrid
                AutoGenerateColumns="False"
                GridLinesVisibility="Horizontal"
                ItemsSource="{x:Bind ViewModel.users, Mode=OneWay}" IsTabStop="False" x:Name="userList" SelectionChanged="userList_SelectionChanged"
                SelectionMode="Extended">
                <i:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="SelectionChanged">
                        <core:InvokeCommandAction Command="{Binding SelectionChangedCommand}" CommandParameter="{Binding ElementName=DataGrid, Path=SelectedItems}" />
                    </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
생략

그리고 이벤트 핸들러를 구현하기 위하여 추가되어야 하는 뷰모델(ViewModel)코드를 보면 다음과 같은 형태를 따릅니다. 




UserListViewModel.cs
생략
        private IList<User> _users;
        public IList<User> users
        {
            get => _users;
            set => SetProperty(ref _users, value);
        }

        public ICommand SelectionChangedCommand { get; set; }

        private void OnSelectionChangedCommand(object obj)
        {
            User user = obj as User;
            string userId = user.id.ToString();
            NavigationService.Navigate(PageTokens.UserDetailPage, userId);
        }

        private INavigationService _navigationService;
        public INavigationService NavigationService
        {
            get => _navigationService;
            //set => SetProperty(ref _navigationService, navigationService);
        }

        public UserListViewModel(INavigationService navigationService)
        {
            _navigationService = navigationService;
            SelectionChangedCommand = new DelegateCommand<object>(OnSelectionChangedCommand);
        }

Microsoft.Xaml.Interactions.Core와 Microsoft.Xaml.Interactivity같은 새로운 네임스페이스가 소개되었고 XAML 코드의 복잡도도 매우 증가했습니다. 그러나 이런 기법을 사용해야 MVVM 프로그램 패턴을 충실히 따르고 뷰와 뷰모델 간의 독립성을 유지할 수 있습니다. 프로젝트의 규모가 크고 앱의 복잡도가 높다면 코드 비하인드를 배제하고 위와 같은 기술을 사용하여야 합니다. 그래서인지 Xamarin 에서는 뷰와 뷰모델을 활용한 커맨드 바인딩이 무척 간편해졌습니다. 이 책에서는 코드 비하인드를 남발하고 있지만 UWP 기술을 설명하기 위한 목적 때문이니 양해바랍니다. 