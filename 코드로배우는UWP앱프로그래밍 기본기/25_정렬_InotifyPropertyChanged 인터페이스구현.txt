※ 정렬

정렬(Sorting)기능을 구현하기 위한 View의 수정은 다음 코드와 같이 매우 단순합니다. DataGrid 컨트롤의 CanUserSortColumns 속성 값을 True로 설정하고 Sorting이벤트 핸들러를 정의하기만 하면 됩니다. 


UserListPage.xaml
생략

                <controls:DataGrid
                AutoGenerateColumns="False"
                GridLinesVisibility="Horizontal"
                ItemsSource="{x:Bind ViewModel.users, Mode=OneWay}" IsTabStop="False" x:Name="userList" SelectionChanged="userList_SelectionChanged"
                SelectionMode="Extended" CanUserSortColumns="True" Sorting="userList_Sorting">
생략


정렬 기능을 구현하기 위하여 코드 비하인드에 구현한 Sorting 이벤트의 코드는 다음과 같습니다. DataGrid의 칼럼을 한 번 누르면 상향 정렬을 하고, 한 번 더 누르면 하향 정렬을 하며, 한 번 더 누르면 정렬을 중단하고 원래 상태로 돌아가게 구현했습니다. 다음 코드는 개발자만 알 수 있는 모호한 코딩(Cryptic Coding)이 아니라 코드를 따라서 읽으면 저절로 이해되는 구조적 코딩(Structure Coding)을 했으니 스스로 로직을 따라가 보기 바랍니다. 구조적 코딩의 가독성을 실감하게 될 것입니다. 

아무튼 curentSortColumn.SortDirection 속성에 DataGridSortDirection.Ascending 값이 저장되면 상향식 정렬 표시가 DataGrid를 탭한 칼럼에 나타나며 DataGridSortDirection.Descending 값이 저장되면 하향식 정렬 표시가 나타납니다. 정렬된 값들을 DataGrid 에 반영하는 것은 userList.ItemSource = ViewModel.users; 문장과 userList.ItemsSource = sortUserList(curentSortColumn); 문장인데 정렬해야 하는 경우 sortUserList() 메소드를 호출하여 정렬한 다음 그 결과를 userList.ItemsSource 속성에 할당하고 정렬이 필요 없는 경우 ViewModel.users, 즉 ViewModel에 정의한 users 속성 변수의 값을 다시 userList.ItemsSource속성에 할당하여 정렬을 취소하고 있습니다. 


UserListPage.xaml.cs

생략

        DataGridColumn previousSortColumn = null;
        private void userList_Sorting(object sender, Microsoft.Toolkit.Uwp.UI.Controls.DataGridColumnEventArgs e)
        {
            DataGridColumn curentSortColumn = e.Column;

            if (curentSortColumn == previousSortColumn)
            {
                if (curentSortColumn.SortDirection == DataGridSortDirection.Ascending)
                {
                    curentSortColumn.SortDirection = DataGridSortDirection.Descending;
                }
                else
                {
                    curentSortColumn.SortDirection = null;
                    previousSortColumn = null;
                }
            }
            else
            {
                curentSortColumn.SortDirection = DataGridSortDirection.Ascending;

                if (previousSortColumn != null)
                    previousSortColumn.SortDirection = null;

                previousSortColumn = curentSortColumn;
            }

            if (curentSortColumn.SortDirection == null)
                userList.ItemsSource = ViewModel.users;
            else
                userList.ItemsSource = sortUserList(curentSortColumn);
        }
생략



※ 알아두기
구조적 코딩은 Sequence, Selection 및 Iteration 문장 구조만을 사용하여 코딩하는 기법으로 코드를 위에서부터 아래로 읽으면 로직이 저절로 이해되는 훌륭한 코딩 기법입니다. One Entry와 One Exit 같은 몇 가지 구조적 코딩의 원칙들이 있지만 흐름에 따라서 코딩하는 것이 구조적 코딩의 가장 큰 특징입니다. 객체지향의 코드 구조에서 구조적 코딩을 하면 가독성과 유지 보수성을 크게 향상시킬 수 있으며 로직의 부작용과 오류 유발을 최소화 할수 있습니다. 




실제 사용자 목록을 정렬하는 것은 sortUserList() 메소드인데 정렬 작업을 수행한후 정렬한 ObservableCollection<User> 객체를 반환합니다. 앞부분의 로직과 마찬가지로 구조적 코딩을 했으니 직접 읽어보고 이해하기 바랍니다. 앞부분의 switch 문장들은 칼럼의 헤더 값을 기반으로 정렬한 칼럼을 알아내는 역할을 합니다. 

설명이 필요한 문장은 return new ObservableCollection<User>(ViewModel.users.AsQueryable().OrderBy($"{sortColumnName} {sortOrder}")); 부분입니다. 이 중에서 return new ObservableCollection<User>()문장은 객체를 만들어 반환하는 코드이므로 특별한 설명이 필요 없지만 생성자의 인자로 제공되어 정렬을 수행하는 동적인 LINQ 문장인 ViewModel.users.AsQueryable().OrderBy($"{sortColumnName} {sortOrder})")는 설명이 필요합니다. 

Filtering을 할 때는 일반적인 정적 LINQ 즉, Static LINQ를 사용했는데 여기서는 동적 LINQ 즉 Dynamic LINQ를 사용했습니다. 정적인 일반 LINQ와 다르게 동적 LINQ는 Query가 고정되어 있는 것이 아니라 그때그때 변합니다. 문법적으로는 Filtering에서 사용한 LINQ 문장과 동일한데 AsQueryable()메소드를 사용하는 것이 다릅니다. 말로 하면 이해하기가 어려우니 코드를 순서대로 따라 읽으며 이해해보겠습니다. 



UserListPage.xaml.cs

생략

using System.Linq.Dynamic.Core;
(중략)
        private ObservableCollection<User> sortUserList(DataGridColumn sortColumn)
        {
            string sortColumnName = "";

            switch (sortColumn.Header)
            {
                case "사용자ID":
                    sortColumnName = "id";
                    break;
                case "이름":
                    sortColumnName = "name";
                    break;
                case "회사":
                    sortColumnName = "company.name";
                    break;
                case "도시":
                    sortColumnName = "address.city";
                    break;
                case "위도":
                    sortColumnName = "address.geo.lat";
                    break;
                default:
                    break;
            }
            string sortOrder = "ascending";

            if (sortColumn.SortDirection == DataGridSortDirection.Descending)
                sortOrder = "descending";

            return new ObservableCollection<User>(ViewModel.users.AsQueryable().OrderBy($"{sortColumnName} {sortOrder}"));
        }
생략


ViewModel.users는 ViewModel에 정의된 users 속성을 의미하고 .AsQueryable().은 동적 질의 Query가 가능하게 만드는 것을 의미합니다. 그리고 OrderBy($"{sortColumnName} {sortOrder}")는 OrderBy()메소드로 정렬하되 정렬 순서는 $"{sortColumnName} {sortOrder}"로 하라는 의미입니다. 

$"{sortColumnName} {sortOrder}"는 $로 시작하는 특수한 문자열로 집합 괄호 ( { })로 둘러싼 변수의 값을 치환하여 문자열을 만드는데 앞의 로직에서 sortColumnName변수와 sortOrder 변수의 값을 가져와 공란을 포함하여 이어 붙여서 정렬 순서를 OrderBy에게 알려줍니다. 

이때 문자열로 치환된 값이 "name ascending"구조면 name 칼럼을 기준으로 상향 정렬하라는 의미이고 "name descending"구조면 name 칼럼을 기준으로 하향 정렬하라는 의미입니다. 그런데 이번 예제의 경우 정렬할 칼럼이 고정되어 있지 않고 사용자가 탭하는 칼럼에 따라서 변하기 때문에 동적인 LINQ를 사용하는 것입니다. OrderBy() 메소드에 제공되는 문자열을 앞의 로직에서 결정할 수 있기 때문에 동적이라고 부릅니다. 일반 LINQ에서는 질의 (Query)를 결정하기 위하여 문자열을 사용하지 않고 정해진 문법을 바로 사용했기 때문에 동적인 질의를 만들수 없었던것 입니다. 

동적 LINQ를 사용하려면 System.Linq.Dynamic.Core NuGet 패키지를 설치하고 LINQ를 사용할 프로그램 파일 앞에 using System.Linq.Dynamic.Core; 문장을 추가해야 합니다. NuGet 패키지를 설치하는 방법은 앞 에서 몇 번 반복하여 설명했으니 이번에는 생략합니다. 



※ 알아두기
동적 LINQ는 System.Linq.Dynamic NuGet 패키지를 사용해도 되는데 사용중 알수없는 오류를 경험하게 된다면 System.Linq.Dynamic NuGet 패키지를 제거한 후 System.Linq.Dynamic.Core NuGet 패키지를 설치하여 사용하기 바랍니다. 필자는 더 안정적인 System.Linq.Dynamic.Core NuGet 패키지를 사용했습니다. 




※ 알아두기
동적 LINQ에서는 정렬을 할 때 users.AsQueryable().OrderBy("sortColumnName ascending")혹은 users.AsQueryable().OrderBy("sortColumnName descending")와 같은 문법으로 정렬 순서를 지정하는데 일반 정적 LINQ에서는 users.OrderBy(user => user.sortColumnName")혹은 users.OrderByDescending(user => user.SortColumnName") 과 같이 메소드의 이름으로 상향식과 하향식을 구분합니다. 당연하게도 메소드 이름에 Descending이 붙지 않은 것이 상향식입니다. 



그럼 앱을 실행하여 정렬 기능을 사용해봅니다. 칼럼 헤더를 마우스로 차례대로 탭하면 다음과 같이 탭한 칼럼 헤더의 오른쪽에 상향 정렬을 의미하는 상향 화살표 (↑)가 나타나며상향 정렬이되고 , 한 번 더 탭하면 하향 정렬을 의미하는 하향 화살표(↓)가 나타나면서 하향 정렬이 되는 것을 확인할 수 있습니다. 한 번 더 탭하면 정렬이 되기 전 상태로 돌아갑니다. 어떤 칼럼을 기준으로 정렬을 하다가 중간에 다른 칼럼의 헤더를 누르면 새로 누르는 칼럼의 상향 정렬부터 다시 동작하는 것도 확인해보기 바랍니다. 


정렬을 위하여 칼럼을 선택하거나 필터링(Filtering)을 위하여 Check Box들이 동시에 선택되면 우리가 원하는 결과를 얻을수 없습니다. 최근에 선택된 작업만 동작하기 때문입니다. 두 가지 기능에 동시에 동작하도록 하는 로직은 여러분이 직접 추가해보기 바랍니다. 





※ INotifyPropertyChanged 인터페이스

데이터 바인딩을 할 때 뷰와 뷰모델 간에 속성 값을 동기화하기 위하여 INotifyPropertyChanged 인터페이스를 구현하여 사용해야 하는데 ViewModel 클래스와 ObservableCollection 클래스에는 이미 구현되어 있다고 반복하여 설명했습니다. 그러나 ViewModel이나 ObservableCollection과 같이 프레임워크가 미리 제공하지 않는 클래스를 사용할 때는 INotifyPropertyChanged 인터페이스를 직접 구현해야 합니다. 


INotifyPropertyChanged 인터페이스는 SimpleDataGrid 앱의 기능과 관련이 없으나 이론적으로 설명하는것보다 예제를 통하여 설명하는 것이 이해하기 쉽다고 판단하여 여기서 설명합니다. WPF나 Xamarin 서적들을 보면 INotifyPropertyChanged 인터페이스를 책의 초반에 이론적으로 설명하는데 필자의 경우 이론적인 설명을 통하여 이해하는 것이 매우 힘들었습니다. 그러나 이 책에서는 예제 코드 조각과 실행 화면 조각으로 설명하기 때문에 개념과 구현 방법을 쉽게 이해할수 있을 것입니다. 

사용자 상세화면에서 MailID를 인위적으로 변경하는 방법을 통하여 INotifyPropertyChanged 인터페이스를 구현하여 사용자 화면 뷰와 데이터 바인딩을 위한 뷰모델의 속성을 동기화해 보겠습니다. 우선 다음 코드와 같이 메일 ID를 변경하는 코드를 추가합니다. 
UserDetailPage.xaml 코드의 강조 표시된 코드만 추가하면 되고, UserDetailPage.xaml.cs 코드의 경우 Tapped 이벤트 핸들러를 비주얼 스튜디오를 통하여 지정하면 자동으로 추가되기 때문에 마찬가지로 강조 표시된 코드만 추가하면 됩니다.



UserDetailPage.xml

생략

        <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Center">
            <TextBlock Text="사용자 ID :" FontSize="20" Margin="24, 0, 0, 0" />
            <TextBlock Text="{Binding user.id}" FontSize="20" Margin="10, 0, 0, 0" />
            <Button x:Name="changeMailId" Content="메일 ID 변경" Margin="24, 0, 0, 0" Tapped="changeMailId_Tapped" />
        </StackPanel>
생략




UserDetailPage.xaml.cs

생략

        private void changeMailId_Tapped(object sender, Windows.UI.Xaml.Input.TappedRoutedEventArgs e)
        {
            ViewModel.User.email = "honggildong@company.com";
        }
생략


changeMailId_Tapped 이벤트 핸들러에서 사용자의 MailID를 인위적으로 홍길동의 메일 ID로 지정했습니다. 앱을 실행한 후 사용자 상세 화면으로 이동하여 화면 상단의 <메일 ID 변경> 버튼을 클릭해 앱이 정상적으로 동작하는지확인 합니다. 그러면 버튼이 눌려서 메일 ID가 변경되었을 것인데 화면에는 아무런 변화가 없군요 뷰모델 (ViewModel)에 위치한 user.email 속성이 변경되었지만 뷰(View)는 이 사실을 모르기 때문입니다. 


사용자 정보가 변경될 때 통지해야 하기 때문에 INotifyPropertyChanged 인터페이스를 Core 프로젝트의 Models 폴더에 위치시킨 User 클래스에 구현해야 합니다. INotifyPropertyChanged 인터페이스를 구현하기 전에 인터페이스가 어떻게 정의되어 있는지 확인해봅니다. 

UserListViewModel.cs 파일의 ObservableCollection 위에 마우스를 놓고 <F12> 키를 눌러서 ObservableCollection 클래스로 이동한 후 다시 INotifyPropertyChanged 위에 마우스를 놓고 <F12>키를 눌러서 INotifyPropertyChanged 인터페이스로 이동하면 다음 코드와 같이 인터페이스가 정의되어 있습니다. 코드를 읽어 보면 PropertyChangedEventHandler타입의 이벤트를 구현해야 한다는 것과 System.ComponentModel 네임스페이스에 이벤트 유형이 정의되어 있다는 것을 알 수 있습니다. 


using System.ComponentModel;


namespace System.ComponentModel
{
	//
	// 요약 :
	// Notifies clients that a property value has changed.
	public interface INotifyPropertyChanged
	{
		//
		// 요약 :
		// 0ccurs when a property value changes.
		event PropertyChangedEventHandler PropertyChanged;
	}
}


구현은 다음 코드와 같이 하는데 우선 User 클래스를 정의하는 문장 뒤에 ":INotifyPropertyChanged"를 추가하여 인터페이스를 상속받습니다. System.ComponentModel 네임스페이스는 using 선언문을 미리 선언해도 되고 INotifiyPropertyChanged 위에 마우스 커서를 놓고 <Ctrl> + <.> 키를 눌러 자동완성 기능으로 추가해도 됩니다. 


그리고 뷰에 속성의 변경을 알려주기 위한 이벤트 변수를 정의합니다. PropertyChangedEventHandler 이벤트 유형으로 PropertyChanged 이벤트 변수를 정의한후 email 속성의 Getter / Setter 변수에 mail ID를 저장함과 동시에 PropertyChangedEventHandler 이벤트를 발생(Invoke) 시키는 코드를 작성합니다. 데이터를 별도로 저장할 공간이 필요하므로 _email 변수를 private 지정자를 통하여 정의하고 이벤트를 발생시키기 위하여 앞에서 정의한 PropertyChanged 이벤트의 Invoke 메소드를 호출합니다. Invoke 메소드를 호출할 때 첫 번째 인자는 이벤트를 발생시키는 객체로 this를 지정하고, 두 번째 인자는 이벤트를 발생시키는 필드 이름을 지정하였습니다. PropertyChanged 이벤트를 발생시킬 때 PropertyChanged가 존재하는지 즉 null이 아닌지 반드시 확인해보고 발생시켜야 합니다. 이와 같이 코딩하는 방법은 인터넷 검색을 통하여 알아낼 수도 있고 인터페이스의 정의를 보고 유추할 수도 있습니다. 



User.cs

using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;
namespace SimpleDataGrid.Core.Models
{

    public class User : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public int id { get; set; }
        public string name { get; set; }
        public string username { get; set; }
        //public string email { get; set; }
        private string _email;
        public string email
        {
            get => _email;
            set
            {
                _email = value;

                if (PropertyChanged != null)
                    PropertyChanged.Invoke(this, new PropertyChangedEventArgs("email"));
            }
        }
        public Address address { get; set; }
        public string phone { get; set; }
        public string website { get; set; }
        public Company company { get; set; }
        
    }

}

앱을 실행해 확인해보면 메일 ID 변경 버튼을 눌렀을 때 변경된 메일 ID가 화면에 나타나는 것을 볼 수 있습니다. 





※ 알아두기

그런데 INotifyPropertyChanged 인터페이스 구현을 위하여 다음과 같이 코딩한 부분이 못내 아쉽습니다. 

            set
            {
                _email = value;

                if (PropertyChanged != null)
                    PropertyChanged.Invoke(this, new PropertyChangedEventArgs("email"));
            }

혹시 일반적인 뷰모델(ViewModel)에서 속성을 정의할 때처럼 다음과 같은 코드를 사용할수는 없는 것일까요? 일관성도 지켜지고 코드도 훨씬 단순한데 말입니다. 다음과 같은 코드를 사용하기 위해서는 ViewModelBase 클래스가 상속을 받는 BindableBase클래스를 상속받아 사용하면 됩니다. BindableBase 클래스는 속성에 값을 저장하고 PropertyChanged 이벤트를 발생시키는 기능을 SetProperty 메소드에 구현해놓아서 다음과 같은 코드로 속성값의 저장과 이벤트의 호출이 동시에 가능합니다. 


set => SetProperty(ref _users, value);


프레임워크를 사용했기 때문에 비교적 적은 양의 코딩으로도 제법 앱다운 앱이 하나 만들어졌습니다. 하지만 프레임워크를 사용하는 것에는 꼭 장점만 있는 것은 아닙니다. 프레임워크를 이해하고 숙달하는 데 생각보다 많은 시간이 필요하고 프레임워크의 틀을 넘어서는 앱은 만들수 없기 때문입니다. 그래도 난이도가 높은 상용 프로그램을 효율적으로 만들기 위해서는 프레임워크를 사용할 수 밖에 없습니다. 그러므로 자기가 개발할 응용 프로그램에 적합한 프레임워크를 고르는 기술은 장수가 자기에게 적합한 무기를 고르는 것만큼이나 중요합니다. 