6 : MVVM 프로그램 패턴 중 모델 이해하기 작성

지금까지 뷰(View)에 하드코딩하는 방법과 데이터를 변수에서 가져와 뷰(View)에 보여주는 방법으로 Hello UWP World 프로그램을 작성해보았습니다. 그런데 이와 같은 두 가지 방법은 MVVM 패턴을 이해하기 위한 것이고 실제 업무 환경에서는 일반적으로 데이터베이스 서버나 API 서버, 파일 서버 등으로부터 데이터를 가져옵니다. 그래서 이번에는 데이터 모델(Data Model)을 만들어 API서버로부터 데이터를 가져온 후에 뷰(View)에 보여주는 방법으로 Hello UWP World 프로그램을 수정해 보겠습니다. 


모델(Model)을 이해하는 일은 어렵습니다. 집중하여 따라오기 바랍니다. 모델(Model)을 풀어서 데이터 모델(Data Model)로 이해할 수 있다고 앞에서 설명했습니다. 모델(Model)을 만들어 사용하기 위해서는 데이터베이스나 파일 시스템이나 API 서버 등의 환경이 갖추어져 있어야 하는데 다행히 JSONPlaceholder 사이트에서 무상으로 제공하는 API 서버를 사용할 수 있습니다. 


API 기능 테스트를 위해 브라우저 주소 창에 http://jsonplaceholder.typicode.com/users/1 을 입력합니다. 이 API 호출은 1번 사용자의 정보를 API 서버에서 받아오는 것으로 다음 화면과 같은 JSON(JavaScript Object Notation)문자열을 가져옵니다. 


JSON은 웹 환경에서 자주 사용하는 데이터 형식으로 "필드명":"값" 의 형식을 가지고 여러 필드(Field)가 하나의 객체(Object 혹은 레코드(Record)를 이루는 경우 중괄호({})의 쌍으로 묶어 주게 됩니다. 그리고 객체 혹은 레코드가 여러 개인 경우 대괄호([])의 쌍으로 묶어줍니다. 하나의 필드 객체는 각각 콤마(,)에 의하여 구분됩니다. 


솔루션 탐색기의 Hello UWP World.Core 프로젝트 하단을 보면 다음 그림과 같이 Models 폴더가 위치해 있는것을 확인할 수 있습니다. 모델(Model)은 Models 폴더의 하단에 클래스 형태로 만듭니다. 먼저 클래스를 만들기 위하여 Models 폴더 위에 마우스를 올리고 마우스 우측 버튼을 누른후 [추가] > [새 항목]을 선택합니다. 


그러면 다음 그림과 같이 새 항목 추가 화면이 나타납니다. 추가할 항목의 종류로 [클래스]를 선택한 후 이름은 사용자 모델(Model)을 만들 것이니 User.cs라고 입력하고 <추가> 버튼을 누릅니다. 


새로 추가된 클래스는 다음과 같이 비주얼 스튜디오가 자동으로 제공한 프로그램 코드로 되어 있습니다. 



User.cs

using System;
using System.Collections.Generic;
using System.Text;

namespace Hello_UWP_World.Core.Models
{
    internal class User
    {
    }
}



JSONPlaceholder API 서버가 돌려준 1번 사용자의 JSON 데이터 형식으로 모델(Model)을 만들기 위하여 브라우저에 반환된 값 전체를 마우스로 드래그한 다음 <Ctrl> + <C>키를 눌러 클립보드로 복사합니다. 그런 다음 User 클래스를 마우스로 묶은후 다음 화면에 표시된 방법으로 [편집] > [선택하여 붙여넣기] > [JSON을 클래스로 붙여넣기]를 선택하여 JSON을 클래스에 붙여넣습니다. 


이어서 비주얼 스튜디오가 자동으로 이름을 부여한 Rootobject 클래스의 이름을 User로 변경합니다. 클래스명의 변경은 비주얼 스튜디오가 잠재적 수정사항 표시라는 방법을 통하여 경고할 것입니다. 그러나 변경할 것이 분명하니 이 경고는 무시합니다. 마지막으로 클래스 파일을 저장합니다. 

완성된 코드는 다음과 같습니다. 다음 코드와 같이 JSON 데이터 형식이 클래스로 만들어진 형태를 보면 모델(Model)은 데이터를 구성하는 멤버, 요소, 속성 혹은 Getter/Setter로만 이루어진 메소드가 없는 가장 단순한 형태의 클래스라는 것을 알수 있습니다. 다만 속성 정의 시 람다식을 지정하지 않아 값을 가져오고 저장할 때 값을 변환하지 않는 것을 알 수 있습니다. 이런 get과 set 접근자를 활용한 속성의 정의 방식은 때론 무의미해 보이기도 하지만 정보 은폐(Information Hiding)의 관점에서 안전한 코딩 습관입니다. 물론 다음의 모델이 한 파일에서 하나의 클래스를 정의한다는 C#의 규칙을 위배하지만 교육 목적상 여기서는 파일을 클래스별로 분리하지 않고 넘어가겠습니다. 


User.cs
using System;
using System.Collections.Generic;
using System.Text;

namespace Hello_UWP_World.Core.Models
{    
        public class User
        {
            public int id { get; set; }
            public string name { get; set; }
            public string username { get; set; }
            public string email { get; set; }
            public Address address { get; set; }
            public string phone { get; set; }
            public string website { get; set; }
            public Company company { get; set; }
        }

        public class Address
        {
            public string street { get; set; }
            public string suite { get; set; }
            public string city { get; set; }
            public string zipcode { get; set; }
            public Geo geo { get; set; }
        }

        public class Geo
        {
            public string lat { get; set; }
            public string lng { get; set; }
        }

        public class Company
        {
            public string name { get; set; }
            public string catchPhrase { get; set; }
            public string bs { get; set; }
        }

    
}


모델(Model)을 만들었으니 어디선가 모델(Model)을 사용하여 데이터를 API 서버로 부터 불러와서 사용해야 하겠지요? 그러한 프로그램 로직은 뷰모델(ViewModel)에 구현합니다. 뷰모델(ViewModel)에 모델(Model)을 가져다 사용하는 로직을 구현하기 전에 MainPage.xaml.cs 프로그램 코드에서 첫 번째와 세 번째 TextBlock 요소를 보이지 않게 처리하고 두 번째 TextBlock 요소는 보이도록 처리하겠습니다. 데이터 바인딩 로직이 구현된 두 번째 TextBlock 요소를 사용하기 위한 것입니다. 


MainPage.xaml.cs
using System;

using Hello_UWP_World.ViewModels;

using Windows.UI.Xaml.Controls;

namespace Hello_UWP_World.Views
{
    public sealed partial class MainPage : Page
    {
        private MainViewModel ViewModel => DataContext as MainViewModel;

        public MainPage()
        {
            InitializeComponent();
        }

        private void viewGreetngs_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            viewGreetngs.Opacity = 0;
            //((TextBlock)sender).Opacity = 0;
        }

        private void viewModelGreetngs_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            //viewModelGreetngs.Opacity = 0;
            //((TextBlock)sender).Opacity = 0;
        }

        private void codeBehindGreetings_Loaded(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            //codeBehindGreetings.Text = "Hello UWP World(Code Behind Program Code)";
        }
    }
}



API 서버를 호출한 결과가 JSON 파일 형식으로 오면 JSON 파일 형식을 읽어서 Model로 만든 User Model 형식으로 변환해야 하는데 그러기 위해서는 Settings Storage라는 기능(Feature)이 필요합니다. Setting Storage 기능에는 Json Extension과 Storage File Access Extension이 들어 있는데 우리는 이 중에서 Jason Extension을 사용할 것입니다.


다음 그림과 같이 솔루션 탐색기의 Hello UWP World(Universal Windows)프로젝트 위에서 마우스 우측 버튼을 클릭한 후 [Windows Template Studio] > [새 기능]을 선택합니다. 

다음 그림과 같이 새 기능의 [1. 템플릿 선택] 탭에서 [Settings Storage]를 선택한 후 <다음> 버튼을 클릭하고 [2. 변경 항목 요약]탭에서 변경되는 내용들을 확인한 다음 <만들기> 버튼을 클릭합니다. 



Settings Storage 기능의 설치로 Newtonsoft.Json 패키지와 Json.cs Helper 클래스, SettingsStorageExtension.cs Helper 클래스가 추가된 것을 솔루션 탐색기에서 확인할 수 있습니다. Helper 클래스는 사용자에게 도움을 주는 클래스로 라이브러리와 역할이 유사하니 설명을 생략하겠습니다. 



이제 프로그램을 개발할 환경의 구축이 끝났으니 MainViewModel.cs 프로그램 코드에서 API 서버를 호출하여 가져온 값으로 두 번째 TextBlock 요소에 나타나게 하겠습니다. Helper 클래스를 사용하기 때문에 프로그램이 아주 단순합니다. 다음은 앞으로 완성하게될 MainViewModel.cs 프로그램 코드입니다. 


MainViewModel.cs

using System;

using Prism.Windows.Mvvm;
using Hello_UWP_World1.Core.Models;
using Hello_UWP_World1.Core.Helpers;
using System.Net.Http;

namespace Hello_UWP_World1.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        private string _helloGreetings;

        public string helloGreetings
        {
            get => _helloGreetings;
            set => SetProperty(ref _helloGreetings, value);
        }
        public MainViewModel()
        {
            //helloGreetings = "Hello UWP World (ViewModel)";
        }

        private async void GetUserAsync()
        {
            using (HttpClient httpClient = new HttpClient()) //1
            {
                string httpResponse = await httpClient.GetStringAsync("http://jsonplaceholder.typicode.com/users/1"); //2
                User user = await Json.ToObjectAsync<User>(httpResponse); //3
                helloGreetings = "Hello UWP World (Model) - " + user.name; //4
            }
        }
    }
}



위의 코드와 같이 먼저 User Model 과 Json Helper를 사용하기 위하여 using Hello_UWP_World1.Core.Models;와 using Hello_UWP_World1.Core.Helpers;를 코드에 추가합니다. using System.Net.Http;는 HTTP 프로토콜을 사용하여 API 서버를 호출하기 위한 목적으로 추가되었습니다. 그리고 생성자에서 하드코딩되어 있던 helloGreetings = "Hello UWP World(ViewModel);를 주석 처리합니다. 


그리고 API 서버를 호출하여 값을 보여주는 기능을 GetUserAsync() 메소드로 분리했습니다. GetUserAsync() 메소드를 생성할 때 async 키워드를 사용한 이유는 API 서버가 하나의 서버에서 수행되는 것이 아닌 원격지 서버에서 수행되므로 비동기 호출 기술을 사용해야 하기 때문입니다. 동기 호출이 메소드를 호출한 후 종료될 때까지 기다리는 것과 달리 비동기 호출은 메소드를 호출한 후 응답할 때까지 기다리지 않고 코드를 수행하기 때문에 시간이 오래걸리는 메소드를 호출할 때 적절합니다. await 키워드는 await 키워드의 뒤에 위치한 코드들이 비동기 호출로 수행되게 합니다. 

이 예제에서는 API 서버를 호출하는 httpClient.GetStringAsync() 메소드와 Json 문자열을 객체로 변환해 주는 JsonToObjectAsync() 메소드가 비동기 호출을 하기 때문에 앞에 await 키워드가 추가되어 있는 것을 확인할 수 있습니다. 


using (HttpClient httpClient = new HttpClient()) // 1

1 코드는 API 서버와 통신할 HTTP  Client 객체를 만드는 역할을 합니다. 생성된 객체가 하단의 {와 } 사이의 프로그램을 수행한 후 객체가 소멸되게 하기 위하여 using 구문을 사용했습니다. 네임스페이스를 선언하는 using 지시자와 용어는 같지만 역할은 다르니 주의하여야 합니다. using 구문을 사용하지 않아도 프로그램은 수행되겠지만 생성된 HTTP Client 객체가 소멸되지 않아 메모리를 잠식하게 되니 이런 코딩이 누적되면 PC가 블루스크린과 함께 다운될 것입니다. 

string httpResponse = await httpClient.GetStringAsync("http://jsonplaceholder.typicode.com/users/1"); //2

2코드는 API 서버를 호출한 후 결과를 httpResponse 문자열 변수에 저장해줍니다. 

User user = await Json.ToObjectAsync<User>(httpResponse); //3

3 코드로 문자열로 저장된 Json 문자열은 우리가 앞에서 정의했던 User Model로 변환된 후 user 객체 변수에 저장됩니다.


helloGreetings = "Hello UWP World(Model) - " + user.name; //4


4코드로 데이터 바인딩되어 뷰로 넘어갑니다. 

이제완성된 프로그램을 실행해보면 다음 그림과 같이 Hello UWP World(Model) 문자열 옆에 API 서버에서 가져온 이름이 출력되어 나타나는 것을 확인할 수 있습니다. 앞에서 웹 브라우저로 API 서버를 호출하여 가져온 이름과 일치하는 것을 확인할 수 있습니다. 


다른 프로그래밍 책들과 다르게 이론적인 설명을 앞세우지 않고 책의 앞부분에서 UWP MVVM 프로그램의 원리를 예제를 통하여 익힐수 있도록 했습니다. 그리고 비주얼 스튜디오 통합 개발 도구에 익숙해지도록 많은 지면을 할애하여 상세히 설명했습니다. 여기까지 충실히 실습을 하며 따라오셨는데도 UWP 프로그램과 MVVM 프로그램의 원리가 이해되지 않는다면 다시 한 번 더 꼼꼼히 읽으며 실습하여 이해한후 다음 장으로 넘어가기 바랍니다. 