설치된 비주얼 스튜디오 2019를 처음 실행하면 다음 그림과 같이 Microsoft 계정 로그인 화면이 나타납니다. 라이선스 인증을 위하여 로그인하거나 <나중에 로그인> 링크를 누르고 사용합니다. 마이크로소프트 계정에 등록하는 방법은 부록 "마이크로소프트 스토어에 올려서 배포하기의 마이크로소프트 개발자 계정 등록하기"에 설명해 놓았으니 참고합니다. 


비주얼 스튜디오 초기화면에서 다음 그림과 같이 <코드를 사용하지 않고 계속하기>를 클릭하여 프로그램 편집 화면으로 이동합니다. 


비주얼 스튜디오를 설치하고 프로그램을 시작했지만 아직 UWP 개발을 위한 준비가 끝난 것이 아닙니다. Windows Template Studio 확장 프로그램을 설치해야 UWP 개발 준비가 완료됩니다. Windows Template Studio 확장 프로그램을 설치하기 위하여 다음 그림과 같이 비주얼 스튜디오의 [확장] > [확장 관리]를 선택합니다. 


[확장관리] 화면에서 다음 그림과 같이 Windows Template Studio를 검색하여 다운로드합니다. 다운로드 후 변경이 예약되어 비주얼 스튜디오를 종료하면 확장 프로그램의 설치가 시작됩니다. 


비주얼 스튜디오를 종료한 다음 다음 그림처럼 비주얼 스튜디오 확장 설치 화면에서 <Modify>버튼을 누릅니다. 



※ 개발자 모드 설정

개발자의 PC를 개발자 모드로 설정하지 않은 경우 비주얼 스튜디오로 UWP앱을 실행하면 다음과 같은 화면이 나타납니다 <settings for developers> 링크를 눌러 개발자 모드로 설정하기 바랍니다. 

혹시 이와 같은 화면이 나타나지 않는다면 Windows 10의 [시작 메뉴] > [설정] > [업데이트 및 보안 화면]으로 이동한 뒤 다음 그림과 같이 화면 좌측 하단의 [개발자용] 항목을 선택하여 [개발자 모드]로 설정하기 바랍니다. 


기본 모드에서는 마이크로소프트 스토어에 등록되어 있는 UWP앱만 설치할 수 있어 개발중인 앱을 설치하여 테스트하거나 디버깅할 수 없습니다. 그러나 위와 같이 개발자 모드로 설정하면 개발자가 개발 중인 앱을 테스트하고 디버깅하는 것이 가능합니다. 



알아두기:
개발자 모드가 아니라 [테스트용으로 앱 로드]옵션을 선택하면 UWP 앱의 개발은 가능하지 않지만 다른 개발자가 개발한 앱을 마이크로소프트 스토어를 통하지 않고 배포하여 테스트할수 있습니다. 즉 테스터의 PC환경으로 적합한 옵션입니다. 




6: MVVM 프로그램 패턴
UWP 앱은 MVVM(Model View ViewModel) 프로그램 패턴을 따릅니다. Windows Forms나 Win32 API 개발 도구에 익숙한 개발자들에게 프로그램 패턴은 생소한 개념이지만 웹 개발자들은 MVC(Model View Controller)패턴을 사용하여 개발하는 경우가 많고 Vue.js와 같은 최근의 웹 개발 프레임워크에서는 UWP앱과 동일하게 MVVM패턴을 사용하고 있습니다. 


프로그램을 공부하다 보면 프로그램 그 자체보다 용어가 어려운 경우가 있습니다. MVC나 MVVM과 같은 프로그램 패턴의 경우가 바로 그러한데 우리가 모델(Model)이나 뷰(View) 그리고 컨트롤러(Controller)와 같은 용어를 평소에 사용하지 않기 때문입니다. 그러면 용어를 바꾸어 봅시다. 뷰(View)를 화면(User Interface, Presentation)이라는 용어로 바꾸고 모델(Model)을 데이터 모델(Data Model)이라는 용어로 보완하고 컨트롤러(Controller)를 프로그램 로직 이라는 용어로 바꾸어 봅시다. 


이 세 가지는 응용 프로그램을 구성하는 3개 계층입니다. 과거에는 응용 프로그램의 3개 계층을 프레젠테이션 계층(Presentation Layer), 데이터 계층(Data Layer)및 애플리케이션 계층(Application Layer)이라고 불렀는데, 각 계층은 뷰(View)와 모델(Model)과 컨트롤러(Controller)에 대응합니다. 


															응용프로그램 3계층
뷰(View)			------------------>		화면(User Interface, Presentation)	-------------->	프레젠테이션 계층(Presentation Layer)

모델(Model)	-		----------------->		데이터 모델(Data Model)			-------------->	데이터 계층(Data Layer)

컨트롤러(Controller)	------------------>		프로그램 로직				-------------->	애플리케이션 계층(Application Layer)

[그림] 응용 프로그램을 구성하는 3개 계층



기존에 구성 요소를 구분하지 않고 프로그래밍하던 것을 계층별로 나누어 개발하는 것이 프로그램 패턴이 되는 것입니다. 그럼 뷰 모델(ViewModel)이라는 용어는 무엇일까요? 이것은 뷰(View)와 모델(Model)을 연결해주는 컨트롤러(Controller)와 유사한 역할 혹은 프로그램 로직의 역할을 하는 응용프로그램 계층을 말하는 것입니다. 이와 같은 이해를 바탕으로 MVVM 패턴을 다음 그림과 같이 표현할 수 있습니다. 



웹 개발의 경우 HTML을 사용하여 화면을 구성하고 프로그램 로직은 JavaScript나 Java와 같은 프로그램 언어로 개발했기 때문에 일찍부터 프로그램 패턴이라는 개념이 다음 그림과 같이 발달할수 있었습니다. 


C# 프로그램 개발자들에게 익숙한 Windows Forms는 프로그램 패턴이라는 용어를 사용하지는 않았지만 굳이 프로그램 패턴을 그려보라고 한다면 다음 그림과 같이 표현할 수 있을 것입니다. 하지만 큰 차이가 있는데 MVVM 패턴이나 MVC 패턴의 경우 모델(Model)과 뷰 (View)와 뷰모델(ViewModel)(또는 컨트롤러(Controller))가 독립적이지만 Windows Forms의 경우 종속적이라는 것입니다. 그래서 MVVM 과 MVC 프로그램 패턴은 패턴의 구성요소별로 디자이너와 개발자의 역할 분담과 테스트 자동화 등의 이점이 분명한 반면 Windows Forms의 경우는 그렇지 못합니다. 



프로그램 패턴의 기본 개념은 프레젠테이션 계층과 데이터 계층, 애플리케이션 계층의 3개 계층을 구분하여 배치하는 것에서 시작하기 때문에 위의 3개 패턴을 비교해 보며 프로그램 패턴에 대한 개념을 더 정확히 잡을 수 있을 것입니다. 과거의 프로그램들은 3개 계층을 하나의 프로그램으로 모아서 작성했기 때문에 프로그램 패턴에 대한 개념이 없어도 프로그램을 개발할 수 있었지만 최근에 개발된 대부분의 프로그램 프레임워크들은 프로그램 패턴 개념을 이해해야 프로그램을 개발할 수 있습니다. 


그러면 의문이 생기지 않나요? 기존의 프로그램이 3가지 구성요소로 나뉘어 있어도 프로그램 패턴을 강조하지 않았는데 최근의 웹 개발 도구들과 UWP는 왜 프로그램 패턴을 강조하는 것일까요?

첫째, 웹 개발 도구들은 HTML로 화면을 구성한 후 서버 측의 CGI(Common Gateway Interface)프로그램으로 프로그램 로직을 개발하고 클라이언트 측의 JavaScript 프로그램으로 로직을 보완하는 방법을 사용하여 부득이 프로그램 계층이 분리되었기 때문입니다 따라서 이를 통합하여 프로그램을 개발하기 위해 Spring이나 Struts 등의 많은 개발 프레임워크가 출현했습니다. 


물론 웹 개발 초창기에는 CGI나 JSP(Java Servlet Page), ASP(Active Server Page)처럼 프로그램의 구성 요소를 하나의 프로그램으로 개발하기도 했으나 프로그램의 복잡성을 감당하지 못하고 Struts나 Spring과 같은 웹 개발 프레임워크들에게 자리를 내주었고 최근에는 새로운 프로젝트에서는 거의 선택되지 않고 프로그램 역사의 뒤안길로 사라지고 있습니다. 


둘째 프로그램 패턴을 분리하면 프로그램의 복잡성이 줄어들어 프로그램이 재사용 가능해지고 자동화된 단위 테스트가 가능해지며 유지보수가 쉬워지기 때문입니다. 스파게티처럼 섞여 있는 복잡한 프로그램과 한약사의 약재함처럼 깔끔하게 정리된 프로그램의 차이라고나 할까요?

셋째, 프로그램 패턴을 분리하면 화면의 개발은 미적 감각이 뛰어난 디자이너들에게 맡기고 프로그램의 개발은 비즈니스 로직에 뛰어난 개발자들에게 맡겨서 분업을 할 수 있기 때문입니다. 이로 인해 프로그램 품질과 생산성 향상을 함께 기대할 수 있습니다. 


화면과 프로그램 로직만이 아니라 데이터 모델(Data Model)까지 분리되면 API 프로그램 전문가인 서버측의 백엔드 개발자와 사용자 경험의 전문가인 클라이언트 측의 프런트엔드 개발자를 분리하여 각각의 전문성에 맞는 프로그램을 개발할 수 있기 때문에, 많은 프로그램 전문 업체들은 이미 이 방향으로 가고 있는 추세입니다. 


설명이 너무 뜬구름 잡는 것 같고 추상적이지요? 앞으로 예제 프로그램을 개발하면서 이런 추상적인 프로그램 패턴에 대해 조금씩 이해해 나갈 것입니다. 







CHAPTER 02 : UWP MVVM 앱 개발하기

Hello UWP World라는 간단한 프로그램을 개발해보면서 MVVM 패턴의 UWP 앱 개념을 익혀보겠습니다. 




1.  프로젝트 만들기

다음 그림과 같이 우선 비주얼 스튜디오를 실행한 후 <새 프로젝트 만들기>를 클릭합니다. 


UWP 앱을 개발하기 위하여 [Windows Template Studio (Universal Windows)] 템플릿을 선택한 후 <다음> 버튼을 클릭합니다. 

프로젝트가 위치할 폴더와 프로젝트 이름 Hello UWP World를 입력한 후 <만들기> 버튼을 클릭합니다. 


프로젝트 유형으로 [Blank]를 선택하고 페이지 이름은 Main으로 유지하겠습니다. 미리 정해진 프로젝트 유형을 선택하여 개발할 프로그램에 맞는 프레임워크를 제공받을 수 있습니다. 디자인 패턴을 선택하기 위하여 화면 왼쪽의 [2. Design pattern] 항목을 선택합니다. 


디자인 패턴으로 [Prism]을 선택합니다. Prism(프리즘)은 UWP와 WPF 그리고 Xamarin에서 함께 사용할 수 있도록 유지 보수와 테스트를 함께 고려한 MVVM 프레임워크입니다. 향후 높은 수준의 터치나 그래픽 프로그램을 개발하기 위하여 WPF 개발 도구로 프로그램 영역을 확장하거나 안드로이드와 iOS를 동시에 고려한 ㅁ모바일 프로그램 개발을 위하여 Xamarin 개발 도구로 프로그램을 확장하기 위하여 적절한 디자인 패턴입니다. 


디자인 패턴 중 MVVM 프레임워크는 다음 그림에 보이는 것과 같이 [MVVM Light], [MVVM Basic], [Caliburn.Micro]등이 더 있습니다 [Code Behind Design Pattern]은 MVVM 패턴이 아니고 기존 프로그램과 같이 프로그램의 구성 요소를 구분하지 않고 프로그래밍하는 방식입니다. 개발 생산성은 뛰어나지만 뷰(View)와 독립적이지 않고 프로그램 패턴들이 가지는 장점이 없어서 화면을 제어할 때나 단순한 개발을 할 때 추천되는 방식입니다. 


끝으로 <만들기> 버튼을 클릭합니다. 이번 예제에서는 Main 페이지 외에 추가적인 페이지를 만들지 않고 기능과 서비스와 테스트를 고려하지 않기 때문에 [3. 페이지], [4. 기능], [5. 서비스], [6. 테스트하기] 항목은 선택하지 않습니다. 



제법 오랜 시간이 걸리는 프레임워크 생성 과정이 완료되면 다음 그림과 같은 비주얼 스튜디오 화면이 나타나면서 UWP 앱의 뼈대가 제공됩니다. 비주얼 스튜디오는 전문 개발자에게는 없어서는 안 될 디버거 기능과 각종 개발 프레임워크를 제공하는 강력한 통합 프로그램 개발 환경을 제공하지만 느리고 무겁다는 단점도 있습니다. 



비주얼 스튜디오의 우측 상단에 있는 솔루션 탐색기에서 자동으로 생성된 프로그램 프레임워크의 구조를 잠시 살펴보겠습니다. 다음 그림을 참조하기 바랍니다. 우선 기존의 Windows 개발 도구에서 제공되는 프레임워크와 달리 두 개의 프로젝트가 생성된 것을 볼 수 있습니다. 표시된 프로젝트의 이름에서 알 수 있는 것과 같이 하나는 UWP 프로젝트이고 나머지는 Core 프로젝트입니다. 


UWP 프로젝트는 MVVM 프로그램 패턴의 뷰(View)와 뷰 모델(ViewModel)에 해당하는 구성 요소를 가지고 있고, Core 프로젝트는 모델(Model)에 해당하는 구성요소를 가지고 있습니다. 


그외 폴더들은 프레임워크가 제공하는 다음과 같은 파일들을 제공하며 개발자가 필요한 파일을 분류 목적에 맞게 모아서 관리할 수 있습니다. 


* Assets : 사진 오디오 및 동영상 등 외부 자원(Resource)파일

* Constants : C# 프로그램이 사용하는 상수 (Constant)정의 파일

* Helpers : 라이브러리와 같은 역할을 하는 도우미 클래스 파일

* Strings : 문자열(String/Text)자원 파일

* Styles : Style 등 XAML 자원 파일




이제 비주얼 스튜디오 상단 메뉴 중 [디버그] > [디버깅 시작] 또는 [디버그 하지 않고 시작] 을 선택해 프로그램을 실행합니다. 우리가 특별한 코딩을 하지 않고 프레임워크를 생성만 했는데도 비록빈 화면이지만 다음 그림과 같이 프로그램이 실행되는 것을 확인할 수 있습니다. 프레임워크의 힘입니다. 


UWP 프로그램은 기존 프로그램들과 다른점이 하나 더 있습니다. 우리가 앱 설치 작업을 별도로 하지 않았는데 Windows 10 의 시작 메뉴를 보면 다음 그림처럼 앱이 설치된 상태로 나타난다는 것입니다. 