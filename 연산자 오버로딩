3.2 연산자 오버로딩의 예

다음은 비교 연산자를 오버로딩해 보자. 참조 타입에 대해 == 연산자를 사용하면 번지만 비교하고 내용은 비교하지 않는데 == 연산자를 오버로딩하면 실제 내용을 비교하도록 할수 있다. 다음 예제는 두 개의 Time 객체가 같은 시간을 가지는지를 비교한다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
       
        static void Main(string[] args)
        {
            Time A = new Time(5, 5, 5);
            Time B = new Time(5, 5, 5);
            Time C = new Time(6, 6, 6);
            Console.WriteLine("A와B는{0}", (A == B ? "같다" : "다르다"));
            Console.WriteLine("A와C는{0}", (A == C ? "같다" : "다르다"));
        }
       
    }

    class Time
    {
        private int hour, min, sec;
        public Time() { }
        public Time(int h, int m, int s) { hour = h; min = m; sec = s; }
        public void OutTime()
        {
            Console.WriteLine("현재 시간은 {0}시 {1}분 {2}초이다.", hour, min, sec);
        }
        public static bool operator ==(Time A, Time B)
        {
            return (A.hour == B.hour && A.min == B.min && A.sec == B.sec);
        }

        public static bool operator !=(Time A, Time B)
        {
            return !(A == B);
        }
           
    }

  
}



== 연산자의 본체는 아주 단순한데 두 시간이 같은지를 보려면 시,분,초의 모든 요소가 동시에 일치하는지를 점검하면 된다. Main에서 세 개의 시간 객체를 만든 후 비교 결과를 문자열로 출력해보았다.



실행 결과   : A와 B는 같다

A와 C는 다르다.



A와 B는 모두 5시 5분 5초이므로 같다고 평가되며 A와 C는 시간이 틀리므로 다른 것으로 평가된다. A와 B가 다른 객체임에도 같다고 평가되는 이유는 == 연산자가 객체의 번지가 아닌 실제 내용으로 비교하기 때문이다. 비교 연산자를 오버로딩하지 않으면 A와B도 다른것으로 평가되는데 디폴트 == 연산자는 참조 타입에 대해 번지가 같은지 만을 보기 때문이다. 문자열을 == 연산자로 비교할 수 있는 이유도 string 클래스가 == 연산자를 오버로딩해 놓았기 때문이다.



메서드의 리턴 타입에 특별한 제한이 없듯이 연산자의 리턴 타입에도 문법적 제약은 없다. 그러나 비교 연산자의 경우는 반드시 bool 타입을 리턴해야 한다는 제약이 있다. 왜냐하면 비교 연산자는 if문이나 for문의 조건식에 주로 사용되며 이 문장들이 bool 타입을 요구하기 때문이다. 억지로 만들면 비교 연산자가 int나 string을 리턴하는 것도 문법적으로 가능은 하지만 이렇게 만든 비교 연산자는 그야 말로 써먹을 데가 없다.



비교 연산자는 반드시 대응되는 반대 연산자와 짝으로 같이 오버로딩해야 한다. 상등성을 정의하는 == 을 정의했으면 반대의 조건을 점검하는 !=도 같이 정의하는 것이 논리적으로 타당하다. ==은 내용을 비교하는데 !=은 번지를 비교한다면 비교 방식의 일관성이 없어지기 때문이다. A == B가 참일떄 A!=B는 당연히 거짓이 되어야 함은 수학적 진리이다. 이 조건이 만족되지 않으면 언제 어디서 버그가 생길지 알 수 없는 논리적으로 불안한 상태가 될 것이다.



그래서 컴파일러는 == 과 !=을 같이 오버로딩하지 않으면 에러로 처리하여 이 둘을 반드시 같이 정의하도록 강제한다. ==이 정의되어 있으면 !=을 정의하는 것은 굉장히 쉬운데 단순히 ==의 반대값을 리턴하면 된다. 같은 이유로 <와>, 그리고 <=와 >=도 반드시 짝으로 오버로딩되어야 한다. 이외에도 객체가 컬렉션에 저장될 때를 위해 object로부터 상속받은 Equals, GetHashCode 메서드도 오버로딩해야 하나 이 예제와는 직접적인 상관이 없으므로 일단은 무시했다.



다음은 값을 1씩 증감시키는 증감연산자를 오버로딩해 보자. ++연산은 + 1과 같은 연산이지만 이는 수치형에만 해당되며 객체에서는 의미가 완전히 달라질 수도 있다. ++은 하나 더 늘린다는 뜻인데 "하나"가 무엇을 의미하는지는 클래스마다 다르다. 그래서 + 연산을 정의한다고해서 ++이 같이 정의되지는 않으며 필요할 경우 별도로 정의해야 한다. C++과는 달리 전위형, 후위형을 따로 정의할 필요 없이 하나만 정의하면 된다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
       
        static void Main(string[] args)
        {
            Time A = new Time(1, 1, 1);
            Time t1, t2;
            t1 = A++;
            t2 = ++A;

            t1.OutTime();
            t2.OutTime();
            A.OutTime();
        }
       
    }

    class Time
    {
        private int hour, min, sec;
        public Time() { }
        public Time(int h, int m, int s) { hour = h; min = m; sec = s; }
        public void OutTime()
        {
            Console.WriteLine("현재 시간은 {0}시 {1}분 {2}초이다.", hour, min, sec);
        }
        public static Time operator ++(Time A)
        {
            Time T = new Time();
            T.hour = A.hour;
            T.min = A.min;
            T.sec = A.sec;

            T.sec++;
            T.min += T.sec / 60;
            T.sec %= 60;
            T.hour += T.min / 60;
            T.min %= 60;
            return T;
        }
           
    }

  
}



++연산자는 사본을 만든 후 초를 1 증가시켜 그 사본을 리턴한다. 비록 1초증가 시키더라도 9:59:59초 같은 경우에는 시와 분이 영향을 받을수 있으므로 자리 넘침은 반드시 처리해야 한다. ++연산자에서 피연산자를 직접 증가시키지는 않고 반드시 사본을 증가시키는데 왜냐하면 후위형은 피연산자가 증가되기 전의 값을 일단은 그대로 가지고 있어야 하기 때문이다.



실행 결과 : 현재 시간은 1시 1분 1초이다.

현재 시간은 1시 1분 3초이다.

현재 시간은 1시 1분 3초이다.



전위형과 후위형으로 각각호출해 보았는데 ++ 연산자의 정의대로 잘 동작한다. 후위형 A++을 대입받은 t1은 증가하기 전의 값을 가지며 전위형 ++A를 대입받은 t2는 증가 후위 값을 가진다. 클래스는 전위형, 후위형을 구분할 필요 없이 객체를 하나 증가시키는 코드만 작성하면 된다. 이 연산자를 먼저 호출한 후 값을 평가할 것인가 아니면 평가한 후 값을 증가시킬 것인가는 호출하는 쪽의 형태를 보고 컴파일러가 알아서 결정한다.





3.3 캐스트 연산자

연산자 오버로딩이란 사용자가 정의한 클래스의 연산 방법을 사용자가 직접 지정함으로써 객체를 대상으로 연산할 수 있는 기능이다. 클래스를 만든 사람이 클래스의 구조를 잘 알기 때문에 연산 방법을 지정할 수 있는 것이다. 캐스트 연산자도 클래스 타입에 대해 적용할 수 있는데 클래스를 만든 사람이 변환 공식을 직접 제공함으로써 다른 타입과의 변환방법을 지정할 수 있다. 캐스트 연산자도 일종의 연산자이므로 오버로딩 가능한 것이 당연한데 선언하는 형식이 일반 연산자와는 달리 조금 특수하다.



형식 : public static implicit(explicit) operator 변환대상(인수)



다른 연산자와 마찬가지로 반드시 공개되어 있어야 하며 또한 정적이어야 한다. 캐스트 연산자는 피연산자가 하나 뿐인 단항 연산자이므로 인수도 반드시 하나여야 한다. 어떤 타입으로 바꿀 것인가는 함수의 이름으로 지정하는데 이 이름은 리턴 타입 지정을 겸한다. 인수로 전달된 타입을 리턴되는 타입으로 변환한다고 생각하면 된다.



변환 대상 앞에는 변환 방식을 지정하는 키워드가 오는데 implicit(암시적) 또는 explicit(명시적) 둘중 하나를 선택하여 지정한다. 암시적 변환이란 별도의 캐스팅을 하지 않더라도 컴파일러가 알아서 변환하는 것을 허가하는 연산이며 변환에 의한 값 손실이 전혀 없을 때 사용한다. 반대로 명시적 변환은 값 손실이 발생할 수 있으므로 캐스팅에 의해서만 변환이 가능하며 컴파일러가 임의로 변환을 하지 못하는 변환이다.



다음 예제는 시간과 정수를 상호 변환한다. 시간은 시, 분, 초의 3차원으로 표현하는 타입이지만 절대초 단위로 환산할 수 있으므로 정수형과 변환 가능하다. 예를 들어 2시 10분 23초는 2*3600 + 10 *60 + 23 = 7823초라고 표현할수도 있다. 반대로 정수를 절대초로 해석한다면 정수가 시간 객체가 될 수도 있다. 시간과 정수의 이런 변환은 두 시간 객체 간의 간격을 계산할때 실용성이 있다



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
       
        static void Main(string[] args)
        {
            Time Now = new Time(12, 30, 40);
            Now.OutTime();
            int absec = Now;
            Console.WriteLine("절대초 = {0}", absec);
            Time then = new Time();
            then = (Time)12345;
            then.OutTime();
        }
       
    }

    class Time
    {
        private int hour, min, sec;
        public Time() { }
        public Time(int h, int m, int s) { hour = h; min = m; sec = s; }
        public void OutTime()
        {
            Console.WriteLine("현재 시간은 {0}시 {1}분 {2}초이다.", hour, min, sec);
        }
        public static implicit operator int(Time T)
        {
            return T.hour * 3600 + T.min * 60 + T.sec;
        }
        public static explicit operator Time(int abs)
        {
            Time T = new Time();
            T.hour = abs / 3600;
            T.min = (abs / 60) % 60;
            T.sec = abs % 60;
            return T;
        }
           
    }

  
}



Time을 int로 변환하는 연산자와 int를 Time으로 변환하는 양 방향의 캐스트 연산자가 정의되어 있다. 변환 공식은 간단한 수식인데 시간을 정수로 바꿀때는 시에 3600을 곱하고 분에 60을 곱하고 초를 더하면 된다. 반대로 변환할 때는 절대초를 각 단위의 초 단위로 나눈 후 최대값으로 나눈 나머지를 구하면 된다. Main에서는 Time을 정수로 바꿔 보고 정수를 다시 Time으로 바꿔 출력해 보았다.



실행 결과 : 현재 시간은 12시 30분 40초이다.

절대초 = 45040

현재 시간은 3시 25분 45초이다.



Time 객체를 정수로 변환하는 연산자는 implicit를 붙여 암시적으로 선언했는데 이 변환은 별다른 위험없이 항상 안전하기 때문이다. 하루는 길어봐야 86400초에 불과하며 이 값은 int의 범위에 포함되고도 한참이나 남기 때문에 아무 문제가 없다. Time이 어떤 값을 가지더라도 int로 충분히 변환 가능하다. 그래서 absec = Now 대입문에는 캐스트 연산자를 쓰지 않았으며 컴파일러가 알아서 변환 연산자를 호출한다. 물론 명시적으로 캐스트 연산자를 써도 상관없다.



반면 정수를 Time 객체로 변환하는 연산자는 explicit를 앞 절 명시적으로 선언했다. 왜냐하면 이 변환은 인수가 어떤 값을 가지는가에 따라 안전하지 못할 수도 있기 때문이다. 정수가 12345나 65530정도라면 유효한 Time 객체로 변환될 수 있지만 123456789같은 큰 값이면 시간 값이 너무 커져 무효한 객체가 되기 때문이다. 특히 절대초가 음수면 황당한 결과가 나올 수도 있으므로 명시적으로만 변환을 허용한다.



Then = 12345 식으로 암시적으로 변환할 수 없으며 반드시 캐스트 연산자를 써서 Then = (Time)12345로 명시적 변환해야 한다. 사용자가 캐스트 연산자를 썻다는 것은 변환되는 정수가 유효한 범위내에 있음을 보장하며 모든 책임을 지겠다는 선언이므로 컴파일러는 더 이상 시비를 걸지 않고 변환 연산자를 호출한다. 물론 변환 후에 발생하는 모든 결과에 대해서는 개발자가 다 뒤접어 써야 한다.



암시적인가 명시적인가는 그 변환이 100% 확실히 진짜로 정말로 안전한가 아닌가를 의미한다. 컴파일러는 안전하다고 판단되는 변환에 대해서는 별다른 캐스팅을 하지 않아도 변환을 허용하지만 조금이라도 위험한 변환에 대해서는 개발자의 명시적인 지시에 의해서만 변환한다. 컴파일러는 알고 보면 참 소심한 녀석이다. 캐스트 연산자를 정의할 때도 항상 안전할  때만 implicit로 정의해야 하며 값 손실 위험이 있을 때는 explicit로 정의해야 한다.



때로는 타입 변환이 여러 단계를 거쳐 일어날 수도 있는데 이런 변환을 다중 캐스팅이라고 한다. 명시적 변환은 캐스트 연산자를 연거푸 사용함으로써 일어나며 암시적 변환은 컴파일러가 알아서 적용한다. 위 예제에 double d = Now;같은 코드를 작성해 보자. Time 객체를 실수로 변환하는 연산자는 정의하지 않았으므로 에러가 발생할것 같지만 실제로 해보면 다음 과정을 거쳐 아무 문제없이 잘 변환된다.



Time이 int 변환 연산자에 의해 int로 먼저 변환되고 정수가 다시 암시적으로 실수 변환되기 때문이다 이 연산이 가능한 이유는 TIme 객체가 int로 변환하는 암시적인 연산자를 제공하고 정수는 시스템에 의해 암시적으로 실수로 변환 가능하기 때문이다. 변환 가정을 캐스트 연산자로 명시적으로 표시해보면 double d = (double)(int)Now; 요렇게 된다. 만약 Time을 int로 변환하는 연산자가 없다면 이 변환도 실행될 수 없을 것이다.



클래스와 기본 타입 간의 변환이 가능한 것처럼 클래스끼리도 변환 가능하다. 일반 타입도 일종의 클래스이므로 원칙적으로 임의의 타입끼리 변환 가능한 셈이다. 단 예외적으로 상속 관계에 있는 클래스끼리는 변환 연산자를 정의할 수 없다. 아니 정확하게 얘기하자면 변환 자체가 불필요한데 부자 관계의 클래스끼리는 이미 변환 방법이 시스템에 의해 제공되기 때문이다. 자식 타입 부모타입으로 언제든지 변환할 수 있으며 부모 타입은 명시적 캐스팅에 의해 자식 타입으로 변환 가능하다.



이런 특수한 관계만 빼고는 임의의 클래스끼리 변환 연산자를 정의할 수 있다. 그러나 문법적으로는 가능하다 해도 실질적으로는 의미가 없는 경우도 있다. 클래스 간의 변환은 섭씨와 화씨처럼 같은 실체에 대한 다른 표현인 경우나 논리적인 연관성이 있는 경우에만 실용성이 있다. 사람을 시간으로 바꾼다거나 조폭이 강아지가 되는 턱도 없는 변환은 문법적으로만 가능할 뿐이다 시간을 화폐단위로 환산하는 변환 정도라면 논리적으로 문제가 없고 실용성도 있다. 다음 예제는 밀리미터와 인치 단위를 상호 변환한다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
       
        static void Main(string[] args)
        {
            Inch disk = new Inch(0);
            Mili shoes = new Mili(0);

            disk.len = 3.5;
            shoes = disk;
            shoes.OutValue();

            shoes.len = 275;
            disk = shoes;
            disk.OutValue();
        }
       
    }

    class Inch
    {
        public double len;
        public Inch(double alen) { len = alen; }
        public void OutValue() { Console.WriteLine("{0:F2} 인치", len); }
        public static implicit operator Mili(Inch i)
        {
            return new Mili((uint)(i.len * 25.4));
        }
        public static implicit operator Inch(Mili m)
        {
            return new Inch(m.len / 25.4);
        }
    }
    class Mili
    {
        public uint len;
        public Mili(uint alen) { len = alen; }
        public void OutValue() { Console.WriteLine("{0}밀리", len); }
    }
  
}



Inch 클래스는 실수로 된 인치 길이를 표현하며 Mili 클래스는 정수로 된 밀리미터 길이를 표현한다. 이 두 타입 간의 변환 연산자가 모두 정의되어 있으므로 양방향으로 변환 가능하다. 1인치는 25.4밀리미터이므로 이 상수를 곱하고 나누기만 하면 두 타입을 쉽게 변환할 수 있다. Main에서는 3.5인치가 몇 밀리미터인지, 275밀리미터가 몇 인치인지를 계산하여 출력한다.



실행 결과 : 88밀리

10.83 인치



예제에서 양쪽으로 변환하는 기능을 모두 사용했으므로 두 개의 변환 함수가 모두 필요하다. 변환 함수의 소속은 중요하지 않은데 양쪽 클래스 어디에나 존재하기만 하면 된다. 어차피 변환 함수는 정적이므로 연산자가 선언된 클래스는 논리적인 소속일 뿐이다. 예제에서는 Inch 클래스에 두 연산자를 정의했는데 Mili 클래스로 옮겨도 상관없으며 두 연산자를 양쪽에 하나씩 찢어 놓아도 아무 문제가 없다.





3.4 오버로딩의 애매함

유사한 동작을 하는 메서드 그룹을 같은 이름으로 정의하는 오버로딩은 무척 편리한 기능이다. 그러나 너무 과하게 오버로딩을 하다 보면 때로는 위험한 면도 있으므로 주의를 할 필요가 있다. 오버로딩된 메서드를 호출했을 때 호출할 메서드를 선택하는 것은 컴파일러의 책임이며 모든 선택은 컴파일 중에 결정된다. 그래서 오버로딩이 복잡해지면 컴파일 시간이 오래 걸리기도 한다. 단 아무리 컴파일이 느리더라도 메서드 호출문은 단순한 호출문일 뿐이므로 실행 속도와는 아무런 상관이 없다.



컴파일러는 호출문의 인수 개수와 타입(시그니처)을 보고 적절한 메서드를 선택하는데 이때 오버로드 결정하기(Overload Resolution)라는 아주 복잡한 내부 정책이 적용된다. 이 정책에는 단순한 타입 비교뿐만 아니라 ref, out 등의 지정자, 타입간의 암시적, 명시적 변환 규칙까지 고려되기 때문에 상상 이상으로 복잡하다. 메서드가 하나밖에 없거나 정확하게 일치하는 메서드가 발견된다면 아무 문제없이 그 메서드가 선택될 것이다.



그러나 그렇지 않을 경우에는 컴파일러가 재량껏 호출할 메서드를 선택한다. 우선 호출 가능한 후보 목록(Applicable)을 작성하고 이 중에 그나마 가장 나은(Better)메서드를 선택한다. 일종의 점수를 매기는 방식으로 가장 높은 점수를 받은 메서드를 선택하는데 여기서 그나마 낫다는 기준은 타입이 가장 근접하다는 뜻이다. 시그니처가 일치하는 메서드가 없더라도 암시적 변환이 가능하면 컴파일러가 알아서 변환한 후 호출하기도 한다. 다음 예제를 실행해 보자.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
        static void Method(short a) { Console.WriteLine("short"); }
        static void Method(int a) { Console.WriteLine("int"); }
        static void Method(uint a) { Console.WriteLine("uint"); }
        static void Method(long a) { Console.WriteLine("long"); }
        static void Method(double a) { Console.WriteLine("double"); }
        static void Main(string[] args)
        {
            short s = 1234;
            Method(s);
        }
       
    }

  
  
}



Method라는 메서드가 5개의 시그니처로 오버로딩되어 있으며 각 메서드는 자신이 호출되었다는 것을 화면으로 출력하기만 한다. Main에서 short 형 변수를 선언한 후 이 변수를 Method로 넘겼다. 이때 과연 어떤 메서드가 선택될 것인가가 문제다. 이 경우 short를 받는 메서드가 있으므로 별 문제없이 Method(short)가 호출될 것이다. 그러나 만약 Method(short)가 없다면 어떻게 될까? 이 메서드를 주석 처리한 후 다시 실행해 보면 Method(int)가 호출된다. 왜냐하면 short는 암시적으로 int로 변환 가능하므로 컴파일러는 Method(int)가 short형 인수를 받아도 문제가 없다고 판단하기 때문이다.



그렇다면 이번에는 Method(int)도 주석 처리해보자. 남은 세 개의 메서드중 누가 호출될까?

Method(uint)가 호출될 것으로 생각할지도 모르겠는데 실제로 실행해보면 Method(long)이 호출된다. 왜냐하면 uint는 부호를 표시할수 없는 타입이라 short와 암시적으로 호환되지 않으며 short와 더 가까운 타입은 long이기 때문이다 컴파일러의 판단은 나름대로 합리적이며 이런 컴파일러의 서비스는 편리함을 준다. TimeInt 예제에 다음 코드를 작성해 보자.



Time Now = new Time(12,34,56);

Console.WriteLine(Now);



정수가 잘 출력될 것이다. Time을 인수로 받아들이는 WriteLine 메서드는 정의되어 있지 않지만 암시적 변환에 의해 Now가 int가 될수 있기 때문에 WriteLine(int)가 호출된다. 만약 Time 클래스가 double로 변환하는 캐스트 연산자를 정의하면 double 형식으로도 출력할 수 있다. 컴파일러의 서비스는 굉장히 친절해서 가능한 연산자를 찾아 적용해 주기까지 하지만 때로는 과다한 친절에 의해 부정확한 함수가 호출될 수도 있다.



캐스트 연산자에 대해서도 역시 오버로딩 문제가 있다. 여러 개의 캐스트 연산자가 암시적으로 오버로딩되어 있을 때 어떤연산자에 의해 변환될 것인가는 컴파일러가 엄격한 내부 규칙에 의거하여 지 맘대로 결정한다. 다음은 Time 클래스에 정수 및 실수 변환 연산자를 동시에 정의한 것이다. 시간은 실수와 사실 잘 호환되지 않지만 시간을 정수부에 두고 분을 소수부에 두는 식으로 변환 가능하다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {       
        static void Main(string[] args)
        {
            Time Now = new Time(12, 34, 56);
            Console.WriteLine((int)Now);
            Console.WriteLine((double)Now);
            Console.WriteLine(Now);
        }
       
    }
    class Time
    {
        public int hour, min, sec;
        public Time() { }
        public Time(int h, int m, int s) { hour = h; min = m; sec = s; }
        public static implicit operator int(Time T)
        {
            Console.WriteLine("int");
            return T.hour * 3600 + T.min * 60 + T.sec;
        }
        public static implicit operator double(Time T)
        {
            Console.WriteLine("double");
            return T.hour + T.min / 100.0;
        }
    }
  
  
}



Main 에서 Time 객체를 생성하고 세번 호출해 보았는데 두 번은 캐스트 연산자를 사용했고 한 번은 그냥 암시적으로 호출했다.



실행결과 : 45296

12.34

45296



명시적으로 캐스팅할 때는 캐스팅된 타입에 맞게 호출된다. 그러나 암시적으로 호출할 때는 어떤 버전이 호출될지 직관적으로 알기가 쉽지 않다. 이 예제의 경우는 정수로 변환되어 출력되는데 이것이 의도한 바라면 다행이지만 그렇지 않을 수도 있다. 사용자는 실수가 더 큰 타입이므로 실수로 변환되는 것이 더 자연스럽다고 생각할 수도 있으며 이렇게 기대했다면 원하는 것과는 다른 결과가 나온 것이다.



이 문제가 별로 심각하지 않다고 생각할지도 모르겠지만 20개  정도의 오버로드가 존재하는 메서드라면 결코 간단한 문제가 아니다. 컴파일 에러는 발생하지 않으므로 개발자는 원하는 대로 호출되었다고 생각하고 넘어가 버릴 수도 있으며 잘못된 호출이 언제 말썽을 일으킬지 알 수 없다. 최악의 시나리오는 이 호출이 릴리즈될 때까지 발각되지 않는 경우인데 컴파일러가 뒷일을 책임지지 않는다. 사실 책임질 능력도 없다. 그래서 이런 애매한 경우는 가급적 만들지 말아야 한다. 다음 예제는 아예 에러로 처리되는 극단적인 경우이다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
        static void Method(int a, Time b) { Console.WriteLine("int, Time"); }
        static void Method(Time a, int b) { Console.WriteLine("Time, int"); }
        static void Main(string[] args)
        {
            Time Now = new Time(12, 34, 56);
            int i = 1234;
            Method(i, Now);
            Method(Now, i);
            Method(Now, Now);
            Method(i, i);
        }
       
    }
    class Time
    {
        public int hour, min, sec;
        public Time() { }
        public Time(int h, int m, int s) { hour = h; min = m; sec = s; }
        public static implicit operator int(Time T)
        {
            Console.WriteLine("int");
            return T.hour * 3600 + T.min * 60 + T.sec;
        }
        public static implicit operator Time(int abs)
        {
            Time T = new Time();
            T.hour = abs / 3600;
            T.min = (abs / 60) % 60;
            T.sec = abs % 60;
            return T;
        }
    }
  
  
}



TIme 클래스는 TimeInt 예제의 것과 똑같으며 정수와 Time 간의 상호 변환 연산자가 정의되어 있다. Method는 int와 Time을 받는 버전과 Time과 int를 받는 두 개의 버전이 정의되어 있으며 Main에서는 Time 객체와 int형 변수를 선언하여 이 두 변수를 조합하여 Method를 호출한다. 이때 앞의 두 호출은 정확하게 일치하는 메서드가 있으므로 문제가 없다.



그러나 뒤쪽 두 개의 호출은 애매함이 발생해서 컴파일이 거부된다. Method(Now,Now)호출의 경우 정확한 버전은 없고 그나마 나은 버전을 찾아야 한다. 컴파일러는 내부 규칙에 의해 호출문과 어울리는 메서드를 찾을 것이고, 그중 가장 적합한 메서드를 선택하려고 시도할 것이다. 그런데 두 개의 Method가 완전히 똑같은 점수를 받기 때문에 어떤 것이 더 낫다고 결정할 수가 없다.



존재하는 메서드에 끼워 맞추기 위해서는 어쩃든 하나의 Time을 int로 변환해야하는데 순서 외에는 차이가 전혀없다. 마지막 호출문인 Method(i,i)도 마찬가지 이유로 애매하다. 이런 애매한 경우를 만나면 컴파일러는 더이상 잘난체하지 않고 항복선언을 해버리며 그 결과는 섬뜩한 에러 메시지로 표출된다. 둘 중 하나를 대충 골라 줄수도 있겠지만 그 결과에 대해서 절대로 책임질수 없기 때문이다.
