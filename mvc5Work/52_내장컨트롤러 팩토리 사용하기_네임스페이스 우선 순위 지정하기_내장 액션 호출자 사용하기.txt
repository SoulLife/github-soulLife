※ 내장 컨트롤러 팩토리 사용하기

이전 절들에서는 사용자 지정 컨트롤러 팩토리를 작성하는 방법에 대해서 살펴봤는데 이는 컨트롤러 팩토리의 역할과 동작 방식을 알아보기 위해서는 직접 만들어보는 것이 가장 효과적인 방법이기 때문이었다. 하지만 사실 대부분의 응용프로그램에서는 DefaultControllerFactory라는 내장 컨트롤러 팩토리 하나만으로도 충분하다. 이 DefaultControllerFactory는 라우팅 시스템을 통해서 요청을 받으면 컨트롤러에 대한 값을 찾기 위해서 라우팅 데이터를 살펴보고 웹 응용프로그램 내부에서 다음과 같은 조건들에 부합하는 클래스를 찾는다. 

* 클래스는 public이어야 한다. 

* 클래스는 구체 클래스여야 한다(추상 클래스여서는 안된다)

* 클래스는 제네릭 매개변수를 가져서는 안 된다. 

* 클래스의 이름은 Controller로 끝나야만 한다. 

* 클래스는 IController 인터페이스를 구현해야만 한다. 


DefaultControllerFactory 클래스는 이러한 조건들을 만족하는 응용프로그램 내에 존재하는 클래스들의 목록을 관리하여 요청이 전달될 때마다 매번 검색을 반복하지 않아도 되도록 조율한다. 만일 적절한 클래스가 발견된다면 컨트롤러 활성기(Controller Activator)를 사용하여 인스턴스를 생성한 다음(이 내용은 잠시 후 DefaultControllerFactory 컨트롤러 생성을 사용자 지정하기 절에서 다룰예정이다)컨트롤러의 동작이 이어지게 된다. 하지만 일치하는 컨트롤러가 존재하지 않는다면 요청은 더 이상 진행되지 않는다. 

이 DefaultControllerFactory 클래스도 구성 설정보다 규약 우선 패턴을 따르고 있다는 점에 주목하자. 그렇기에 컨트롤러를 구성 파일에 등록할 필요가 없다. 팩토리가 규약에 따라서 컨트롤러들을 찾아내주기 때문이다. 우리가 해야 할 일은 단지 팩토리가 검사하는 조건에 부합하는 클래스를 만드는 것 뿐이다. 

만일 사용자 지정 컨트롤러 팩토리 동작을 만들고자 한다면 기본 팩토리의 설정들을 변경하거나 일부 메서드들을 재정의하면 된다. 이렇게 하면 팩토리를 다시 생성하지 않고서도 구성 설정보다 규약 우선 방식을 따르는 유용한 동작을 만들수 있다. 팩토리를 재생성하는 작업은 앞서 언급했듯이 복잡할 뿐만 아니라 다소 피곤하기까지 하다. 이어지는 절들에서는 컨트롤러의 생성을 제어하는 다양한 방법들을 보여줄 예정이다. 



※ 네임스페이스 우선 순위 지정하기

이미 16장에서 라우트를 생성하면서 하나이상의 네임스페이스에 우선순위를 지정하는 방법에 대해 살펴봤었는데, 이는 동일한 이름의 컨트롤러 클래스가 서로 다른 네임스페이스에 속하는 경우 발생할 수 있는 모호한 컨트롤러 문제를 해결하기 위한 것이다. DefaultControllerFactory는 네임스페이스의 목록을 처리하고 우선순위를 매기는 역할도 수행한다. 




TIP:
전역적으로 지정된 우선순위를 라우트에 특화된 우선순위로 재정의하는 것도 가능하다. 즉 일단 전역적으로 정책을 정의하고 난 다음에 필요하다면 라우트 개별적으로 우선순위를 변경할 수 있다는 뜻이다. 개별 라우트에 대해 네임스페이스를 지정하는 방법에 대한 자세한 정보는 16장을 참고하도록 하자. 



만일 수많은 라우트들이 존재하는 응용프로그램을 갖고 있다면 네임스페이스의 우선순위를 전역적으로 지정하는 것이 좀 더 나을수 있다. 그 설정은 라우트 전체에 적용될 테니 말이다. 목록 19-8은 Global.asax 파일의 Application_Start 메서드에서 네임스페이스의 우선순위를 전역적으로 지정하는 방법을 보여주고 있다. (이번 예제는 Global.asax 파일에 해당 구문을 작성하고 있지만 여러분은 원한다면 App_Start 폴더에 위치한 RouteConfig.cs 파일을 사용해도 된다)


목록 19-8 Global.asax 파일에서 전역 네임스페이스 우선순위 지정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using ControllerExtensibility.Infrastructure;
namespace ControllerExtensibility
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);

            ControllerBuilder.Current.DefaultNamespaces.Add("MyControllerNamespace"); //추가
            ControllerBuilder.Current.DefaultNamespaces.Add("MyProject.*"); //추가

        }
    }
}


우선 순위를 지정할 네임스페이스를 추가하기 위해서는 ControllerBuilder.Current.DefaultNamespace.Add라는 정적 메서드를 사용하면 된다. 네임스페이스를 추가하는 순서가 일종의 검색 순서나 상대적인 우선순위를 의미하는 것은 아니라는 점에 주의하자. 

즉 Add 메서드로 정의한 모든 네임스페이스들은 동등하게 취급되며 우선순위는 Add 메서드에 네임스페이스가 지정되었느냐 지정되지 않았느냐에 따라 결정된다. 이는 컨트롤러 팩토리가 먼저 Add 메서드에 지정된 네임스페이스들 중에서 적절한 컨트롤러 클래스를 찾고 만약 찾을수 없을 경우에는 전체 응용프로그램을 검색할 것이라는 의미다. 



TIP:
목록 19-8의 굵게 표시된 구문에서 아스터리스크 문자(*)를 사용하고 있는 부분에 주의하자. 이는 컨트롤러 팩토리가 MyProject 네임스페이스와 그 자식 네임스페이스를 살펴봐야 한다고 지정하는 것이다. 이 구문은 자칫 정규 표현식인 것처럼 보일 수도 있지만 사실은 그렇지 않다. 단지 네임스페이스를 *로 표기할수 있을 뿐 Add 메서드에서 정규 표현식을 사용할수 있는 것은 아니다. 




※ DefaultControllerFactor 컨트롤러 생성을 사용자 지정하기
다양한 방식으로 DefaultControllerFactory 클래스가 컨트롤러 개체의 인스턴스를 생성하는 방식을 사용자 지정할 수 있다. 컨트롤러 팩토리를 사용자 지정하는 가장 일반적인 이유는 무엇보다도 DI를 지원하기 위한 목적이 크다. DI를 지원하기 위한 다양한 방법들이 존재하지만 최적의 방법이 무엇인지는 응용프로그램 내부에서 DI를 사용하고 있는 방식에 따라 달라진다. 


※ 의존성 해결자 사용하기

DefaultControllerFactory 클래스는 컨트롤러를 생성하기 위해서 의존성 해결자(Dependency Resolver)를 이용한다. 의존성 해결자에 관해서는 이미 6장에서 살펴본 경험이 있는데 Ninject DI를 지원하기 위해서 IDenpendencyResolver 인터페이스를 구현하는 NinjectDependencyResolver 클래스를 설명하면서 자세히 살펴봤으며 이번 장의 앞부분에서 직접 사용자 지정 컨트롤러 팩토리를 만들어보면서도 DependencyResolver 클래스를 사용하는 방법에 대해서 설명했었다. DefaultControllerFactory는 컨트롤러 인스턴스를 요청하기 위해서 IDependencyResolver.GetService 메서드를 호출하게 되는데 이 메서드를 활용하면 의존성을 해석하거나 삽입할 수 있다. 



※ 컨트롤러 활성자 사용하기

또한 컨트롤러 활성자(Controller Activator)를 이용하여 컨트롤러에 DI를 접목시킬수 있다. 이러한 활성자는 목록 19-9에서 볼 수 있는 IControllerActivator 인터페이스를 구현하여 만들수 있다. 

목록 19-9 IControllerActivator 인터페이스

namespace System.Web.Mvc
{
	using System.Web.Routing;

	public interface IControllerActivator
	{
		IController Create(RequestContext requestContext, Type controllerType);
	}
}


이 인터페이스는 Create 라는 단일 메서드 하나만을 갖고 있는데, 이 메서드는 요청에 대한 상세 정보를 갖고 있는 RequestContext 개체와 어떤 컨트롤러 클래스를 인스턴스로 만들어야 할지를 알려주는 Type 개체를 매개변수로 전달해준다. 

이 인터페이스의 구현을 살펴보기 위해서 Infrastructure 폴더에 CustomControllerActivator.cs라는 새로운 클래스 파일을 추가하고 목록 19-10과 같이 클래스를 작성해 보자. 


목록 19-10 CustomControllerActivator.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using ControllerExtensibility.Controllers;
namespace ControllerExtensibility.Infrastructure
{
    public class CustomControllerActivator : IControllerActivator
    {
        public IController Create(RequestContext requestContext, Type controllerType)
        {
            if (controllerType == typeof(ProductController))
            {
                controllerType = typeof(CustomerController);
            }
            return (IController)DependencyResolver.Current.GetService(controllerType);
        }
    }
}

IControllerActivator의 구현은 단순하다 단지 ProductController 클래스가 요청되면 CustomerController 클래스의 인스턴스로 응답하는 것뿐이다. 물론 이 방식은 실제 프로젝트에서 활용할만한 방법은 전혀 아니지만 이를 통해서 IControllerActivator 인터페이스를 이용하여 컨트롤러 팩토리와 의존성 해결자 사이의 요청을 가로채는 방법을 살펴볼 수 있다. 

사용자 지정 활성자를 사용하려면 Global.asax 파일에 정의된 Application_Start 메서드에서 목록 19-11 과 같이 DefaultControllerFactory 생성자에 사용하려는 활성자의 인스턴스를 전달하고 그 결과를 등록할 필요가 있다. 


목록 19-11 Global.asax 파일에서 사용자 지정 활성자 등록하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using ControllerExtensibility.Infrastructure;
namespace ControllerExtensibility
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);

            ControllerBuilder.Current.SetControllerFactory(new DefaultControllerFactory(new CustomControllerActivator())); //추가

        }
    }
}


이제 응용프로그램을 시작하고 /Product URL로 이동해보면 사용자 지정 활성자가 동작한 결과를 확인할 수 있을 것이다. 즉 요청은 라우트에 의해서 Product 컨트롤러로 보내지고 DefaultControllerFactory는 활성자에 ProductFactory 클래스의 인스턴스를 생성하도록 요구하지만 목록 19-11에서 작성한 활성자가 이러한 요청을 가로채서 대신 CustomerController 클래스의 인스턴스를 생성하게 만드는 것이다. 그림 19-3은 그 결과를 보여준다. 





※ DefaultControllerFactory 클래스의 메서드들 재정의하기

컨트롤러의 생성을 사용자 지정하려면 DefaultControllerFactory 클래스에 정의되어 있는 메서드들을 재정의하면 된다. 표19-3은 재정의할수 있는 세 개의 메서드를 보여주고 있는 데 각각의 메서드들은 서로 조금씩 다른 역할을 수행한다. 



표 19-3 재정의할 수 있는 DefaultControllerFactory 클래스의 메서드



메서드			결과					설명
CreateController		IController				IControllerFactory 인터페이스에 정의되어 있는 CreateController 메서드의 구현이다. 이 메서드는 기본									적으로 어떤 형식의 인스턴스가 만들어져야 하는지를 알아내기 위해서 GetControllerType을 호출한 뒤
									GetControllerInstance 메서드에 그 결과를 전달하여 컨트롤러 개체를 가져온다. 

GetControllerType		Type					요청과 컨트롤러 형식을 매핑한다. 이번 장의 앞부분에서 나열했던 대부분의 규약들이 강제되는 곳이기									도 하다

GetControllerInstance	IController				지정된 형식의 인스턴스를 생성한다. 




※ 사용자 지정 액션 호출자 만들기

컨트롤러 팩토리가 클래스의 인스턴스를 생성하고 나면 이제 프레임워크는 그 인스턴스에 존재하는 액션을 호출하기 위한 방법이 필요하게 된다. 만일 해당 컨트롤러가 Controller 클래스에서 파생되었다면 바로 이번 절의 주체인 액션 호출자(Action Invoker)가 그부분을 책임 지고 담당하게 된다. 


TIP:
IController 인터페이스를 구현하여 직접 컨트롤러를 생성한다면 액션을 실행하는 부분도 여러 분이 자체적으로 해결해야 한다. 그렇기에 가급적 Controller 클래스를 상속받는 것이 효율적이다. 액션 호출자는 Controller 클래스 안에 포함되어 있는 기능 중의 일부이니 말이다. 




액션 호출자는 목록 19-12에서 볼 수 있는 IActionInvoker 인터페이스를 구현한다. 

목록 19-12 IActionInvoker 인터페이스

namespace System.Web.Mvc
{
	public interface IActionInvoker
	{
		bool InvokeAction(ControllerContext controllerContext, string actionName);
	}
}


이 인터페이스는 InvokeAction 이라는 멤버 하나만을 갖고 있다. 매개변수로는 ControllerContext 개체(17장에서 살펴본 바 있다) 와 호출될 액션의 이름을 나타내는 문자열이 전달된다. 반환 값은 bool형식인데 true는 액션을 찾아서 호출하였음을 의미하며 false는 컨트롤러가 지정된 액션을 찾지 못했음을 의미한다. 

이번 설명에서 메서드(method)란 단어를 사용하지 않고 있음에 주목하자. 액션과 메서드 간의 연계성은 전적으로 선택적이다. 기본적으로 내장되어 있는 액션 호출자는 액션과 메서드가 서로 연결되어 있는 방식(즉 액션과 메서드가 동일한 이름을 갖는 방식)을 사용하지만 여러분이 원한다면 맘에 드는 다른 방식으로 액션을 처리하는 것도 가능하다. 목록 19-13은 다른 방식을 취하는 IActionInvoker 인터페이스의 구현을 보여주고 있는데 이를 Infrastructure 폴더에 CustomActionInvoker.cs라는 이름의 클래스 파일을 통해서 작성해 보았다. 


목록 19-13 CustomActionInvoker.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace ControllerExtensibility.Infrastructure
{
    public class CustomActionInvoker : IActionInvoker
    {
        public bool InvokeAction(ControllerContext controllerContext, string actionName)
        {
            if (actionName == "Index")
            {
                controllerContext.HttpContext.Response.Write("This is output from the Index action");
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}


목록 19-13의 액션 호출자는 컨트롤러 클래스에 존재하는 메서드에 대해서는 아무런 관심을 갖지 않으며 액션 그 자체를 직접 처리하고 있다. 이 호출자는 만일 요청이 Index 액션이라면 Response에 직접적으로 메시지를 기록하고 있으며, 그 밖의 액션이라면 false를 반환하여 사용자에게 404-찾을수 없음 오류를 출력하게 하고 있다. 

컨트롤러와 연계되어 있는 액션 호출자는 Controller.ActionInvoker 속성을 통해서 얻어 올 수 있다. 이는 같은 응용프로그램에 내에 존재하는 서로 다른 컨트롤러들이 서로 다른 액션 호출자를 사용할수 있다는 사실을 의미한다. 이를 살펴보기 위해서 예제 프로젝트에 ActionInvoker라는 새로운 컨트롤러를 추가해봤으며 그 내용은 목록 19-14와 같다. 


목록 19-14 ActionInvokerController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ControllerExtensibility.Infrastructure;
namespace ControllerExtensibility.Controllers
{
    public class ActionInvokerController : Controller
    {
        public ActionInvokerController()
        {
            this.ActionInvoker = new CustomActionInvoker();
        }
    }
}

이 컨트롤러에는 어떠한 액션 메서드도 존재하지 않으며 요청의 처리 자체를 액션 호출자에 일임하고 있다. 응용프로그램을 시작하고 /ActionInvoker/Index로 이동해보면 그 결과가 어떻게 나타나는지 확인해볼수 있을 것이다. 이 사용자 지정 액션 호출자는 그림 19-4와 같은 응답을 생성할 것이며 동일한 컨트롤러의 다른 액션을 브라우저로 요청해보면 404 오류 페이지를 볼 수 있을 것이다. 

기본적으로 직접 액션 호출자를 구현하는 것은 권장하지 않는다. 그래도 굳이 하겠다면 적어도 지금까지 설명한 방식을 따르는 것은 권하고 싶지 않다. 첫 번째 이유는 곧 살펴보겠지만 내장되어 있는 액션 호출자들이 매우 유용한 기능들을 탑재하고 있기 때문이고, 두 번째로는 이번 절의 예제에 약간의 문제가 존재하고 있기 때문이다. 즉 상기 예제는 확장성이 결여되어 있으며, 책임의 분리가 제대로 되어 있지 않고, 다양한 뷰를 지원할수 없다는 문제가 있다. 그렇기는 하지만 이 예제는 MVC 프레임워크가 얼마나 잘 맞물려 돌아가는지를 보여주고 있을 뿐만 아니라 요청 처리 파이프라인의 거의 모든 부분들이 사용자 지정 가능하고 전반적으로 교체가 가능하다는 것을 설명하기에는 충분했기에 살펴볼만한 의미는 있었다고 본다. 



※ 내장 액션 호출자 사용하기

기본적으로 내장되어 있는 액션 호출자인 ControllerActionInvoker 클래스는 요청과 액션을 연결함에 있어서 아주 세련된 기능들을 일부 제공한다. 그리고 이전 절에서 구현한 호출자와는 달리 이 기본 액션 호출자는 메서드를 대상으로 동작한다. 메서드가 액션으로서 인식되려면 반드시 다음의 조건에 부합해야 한다. 

* 메서드는 public 이어야만 한다. 

* 메서드는 static이어서는 안 된다.

* 메서드가 System.Web.Mvc.COntroller나 그의 기반 클래스에 존재하고 있어서는 안 된다.

* 메서드가 특별한 이름을 가져서는 안 된다. 

처음 두 개의 조건은 매우 명쾌하기에 별도의 설명이 필요 없을 것이다. 세 번째 조건인 Controller 클래스나 그의 기반 클래스에 존재하는 메서드들을 배제해야 한다는 부분은 ToString과 GetHashCode와 같은 메서드를 사용해서는 안된다는 것을 의미한다. IController 인터페이스를 구현하는 메서드들도 마찬가지다. 이는 컨트롤러의 내부 동작을 외부로 노출하지 않는 것이 바람직하기 때문이다. 마지막 조건은 생성자, 속성, 이벤트 접근자 들도 제외되어야 한다는 것을 의미한다. 좀 더 구체적으로 말해서 클래스 의 멤버가 System.Reflection.MethodBase의 IsSpecialName 플래그를 갖고 있다면 그 멤버는 액션을 처리하기 위해서 사용될수 없다는 의미다. 



Note:
제네릭 매개변수를 갖는 메서드들(예를 들면 MyMethod<T>() )은 상기의 모든 조건에 부합하기는 하지만 요청을 처리하기 위해서 제네릭 메서드를 사용하게 되면 MVC 프레임워크가 예외를 던질 것이다. 




기본적으로 ControllerActionInvoker 는 요청된 액션과 동일한 이름을 갖는 메서드를 찾는다. 그렇기에 라우팅 시스템이 제공한 액션 변수의 값이 Index라면 ControllerActionInvoker는 액션 조건에 부합하는 Index라는 메서드를 찾으려고 시도하게 될 것이다. 그리고 메서드가 발견된다면 요청을 처리하기 위해서 그 메서드를 호출할 것이다. 이러한 동작은 분명히 우리가 대부분의 경우 원하는 동작이긴 하다. 하지만 MVC 프레임워크는 그처리 과정을 미세하게 조정할 수 있는 방법도 제공하고 있다. 