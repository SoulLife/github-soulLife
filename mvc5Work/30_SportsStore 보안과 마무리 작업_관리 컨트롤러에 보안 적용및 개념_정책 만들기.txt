CHAPTER 12장 : SportsStore : 보안과 마무리 작업

이전 장에서는 SportsStore 응용프로그램에 관리 기능을 추가해봤다. 그러나 여러분도 짐작하고 있는 것처럼 응용프로그램을 현재 상태로 배포한다면, 누구나 상품 카탈로그를 수정할 수 있기 때문에 어딘가 마음 한구석에 불안함이 가시지 않을 것이다. 그저 Admin/Index라는 URL만 알고 있으면 그 누구라도 관리 기능에 접근할 수 있기 때문이다. 따라서 이번 장에서는 Admin 컨트롤러 전체를 비밀번호로 보호함으로써 무작위 접근을 방지하는 방법을 살펴볼것이다. 그리고 이렇게 보안 기능을 구현한 뒤에는 상품 이미지 지원 기능을 추가하는 것으로 SportsStore 응용프로그램을 마무리해보려고 한다. 얼핏 생각하기에는 간단한 기능처럼 느껴질 수도 있지만 MVC의 흥미로운 기술들을 다소 필요로 한다. 


※ 관리 컨트롤러에 보안 적용하기
ASP .NET MVC는 ASP .NET 플랫폼을 기반으로 만들어졌기 때문에, ASP .NET 의 인증 및 권한 부여 기능을 그대로 활용할 수 있다. 이 기능들은 로그인한 사용자를 추적하기 위한 범용 시스템의 일부다 



※ ASP.NET 보안 기능 검토하기
이번 장에서는 사용이 가능한 수준의 보안 기능들만 다룬다. 이 기능들은 MVC 프레임워크의 일부라기 보다는 ASP.NET 플랫폼에서 제공되는 기능들이기도 하거니와, 다른 한편으로는 몇 가지 다른 접근 방식들을 선택할 수도 있기 때문이다. 참고로 2014년 Apress에서 출간될 필자의 Pro ASP.NET MVC 5 Platform 에서는 인증과 권한 부여에 대해서 자세하게 다룰 것이다. 그러나 필자는 독자들이 웹 응용프로그램의 보안과 같은 기본적인 내용들을 배우기 위해서 또 다른 책을 구입하는 것을 원치 않았고 Apress도 이 Platform 관련 책에서 핵심 보안과 관련된 부분을 따로 떼내어 무료로 배포하는 데 너그럽게 동의했다( 번역 작업이 진행 중이던 시점에 이미 Pro ASP .NET MVC 5 Platform 책이 출판되었으며, 보안 관련 부분은 http://www.apress.com/files/extra/ASP_NET_Identity_Chapters.pdf로 공개되어 있다. 물론 영문판만 제공된다)



※ 기본적인 보안 정책 만들기
먼저 ASP .NET 응용프로그램에서 사용자를 인증할 수 있는 방법 중 하나인 폼 인증(forms authentication)을 구성해보도록 하자. 목록 12-1은 SportsStore.WebUI 프로젝트의 Web.config 파일에 이를 위한 구성을 추가한 것이다.(프로젝트의 루트에 위치한 web.config 파일이다. views 폴더에 위치한 파일을 선택되지 않도록 주의하자. )

목록12-1 Web.config 파일에서 폼 인증 구성하기
<system.web>
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" />
	  <authentication mode="Forms">
		  <forms loginUrl="~/Account/Login" timeout="2880" />
	  </authentication>
  </system.web>

목록 12-1에서는 authentication 요소를 이용해서 인증을 구성하고 있으며, mode 어트리뷰트에 웹 응용프로그램들이 가장 많이 사용하는 인증 방식인 폼인증을 사용할 것이라고 명시하고 있다. Microsoft는 ASP .NET 4.5.1에 인터넷에 적합한 다양한 인증 옵션들에 대한 지원을 추가했는데, 이에 관해서는 이번 장의 앞부분에서 잠시 언급했던 Pro ASP.NET MVC 5 Platform을 참고하기 바란다. 이 책에서는 오직 폼 인증만 사용해볼 텐데, 이 방식은 로컬 자격 증명을 사용하면서도 설정과 관리가 용이하기 때문이다. 


NOTE:
폼 인증 대신 사용할 수 있는 대표적인 다른 인증 방식으로는 윈도우 인증(Windows authentication)과 조직 인증(organizational authentication)이 있다. 윈도우 인증은 운영체제의 자격 증명을 사용해서 사용자를 식별하는 방식이고, 조직 인증은 Windows Azure 같은 클라우드 서비스를 통해서사용자를 인증하는 방식이다. 그러나 인터넷에서 서비스되는 응용프로그램들에서는 이 두 가지 방식이 많이 사용되지 않기 때문에 여기에서는 자세하게 살펴보지 않을 것이다. 



그리고 loginURL 어트리뷰트는 사용자가 인증을 필요로 할때 사용자 요청을 돌려보내 처리할 주소를 ASP .NET에게 알려준다(이번 예제의 경우 ~/Account/Login이 그 URL이다) 
또한 timeout 어트리뷰트는 사용자가 성공적으로 로그인한 후 인증을 유지할수 있는 시간을 분 단위로 지정한다(2,880분은 48시간이다)

다음 단계는 ASP .NET에게 응용프로그램의 사용자 정보를 가져올 장소를 알려주는 것이다. 이번 단계를 별도로 나눠서 설명하고 있는 이유는 실제 프로젝트에서는 결코 사용하지 않을 방법을 사용할 작정이기 때문이다. 바로 사용자 이름과 비밀번호를 Web.config 파일에 정의하는 방식이다. 목록12-2에서 변경된 내용을 확인할 수 있다. 

목록12-2 Web.config 파일에 사용자 이름과 비밀번호 정의하기
<authentication mode="Forms">
		  <forms loginUrl="~/Account/Login" timeout="2880" >
			  <credentials passwordFormat="Clear">
				  <user name="admin" password="secret"/>
			  </credentials>
		  </forms>		  
</authentication>

필자는 가급적 예제를 간단하게 유지하면서 MVC 프레임워크를 사용한 인증과 권한 부여 방식에만 집중하기 위해 이런 방식을 사용하려고 한다. 그러나 자격 증명을 Web.config 파일에 저장하는 것은 재앙을 초래할수 있는 방식이라는 점을 명심해야만 한다. 특히 credential 요소의 passwordFormat 어트리뷰트를 Clear로 설정한다는 것은 비밀번호를 평문으로 저장 한다는 의미이므로 얼마나 위험한 방식인지 쉽게 이해할 수 있을 것이다. 


주의:
절대로 사용자 자격 증명을 Web.config 에 저장해서도 안되며, 비밀번호를 일반 텍스트로 저장해서도 안된다. 이번 절을 시작하면서 언급했던 것처럼 Pro ASP .NET MVC 5 Platform 책에서 예외적으로 공개된 장들을 참고하여 데이터베이스를 이용한 사용자 관리법을 고려해보기 바란다. 


이처럼 실제 프로젝트에는 적합하지 않은 방식임에도 불구하고 Web.config 파일에 자격 증명을 저장함으로써 이번 예제에서는 ASP .NET 플랫폼이라는 옆길로 빠지지 않고 MVC의 고유 기능에만 집중할 수 있게 되었다. 결과적으로 Web.config 파일에 admin 이라는 사용자 이름과 secret 이라는 비밀번호를 하드코딩했다. 


※ 필터로 인증 적용하기
MVC 프레임워크는 필터(filters)라는 강력한 기능을 갖고 있다. 이는 액션 메서드나 컨트롤러 클래스에 적용할 수 있는 .NET 어트리뷰트로 이 기능을 이용하면 요청이 처리되는 시점에 MVC 프레임워크의 동작에 변경을 가하기 위한 추가 로직을 끼워 넣을 수 있다. 

다양한 종류의 내장 필터들이 제공될 뿐만 아니라 18장에서 살펴보게 될 사용자 지정 필터(custom filters0를 직접 만들수도 있다. 그러나 이번 예제에서 필요한 필터는 기본 인증 필터(authorization filter)인 Authorize 필터다. 목록 12-3은 Admin 컨트롤러에 이 필터를 적용한 모습을 보여주고 있다. 

목록12-3 AdminController.cs 파일에 Authorize 어트리뷰트 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Controllers
{
    [Authorize]
    public class AdminController : Controller
    {
        private IProductRepository repository;

        public AdminController(IProductRepository repo)
        {
            repository = repo;
        }
     }
}

매개변수 없이 Authorize 어트리뷰트를 적용하면 인증된 모든 사용자들이 해당 컨트롤러의 모든 액션 메서드에 접근할 수 있게 된다. 다시 말해서 인증된 사용자는 자동적으로 관리 기능을 사용할 수 있는 권한까지 부여받게 된다는 의미다. 이 방법은 SportsStore 응용프로그램처럼 접근이 제한된 액션 메서드들의 집합이 하나만 존재하고, 오직 한 명의 사용자만 존재할때 유용한 방법이다(여러 명의 사용자가 있고 각각의 접근 권한에 차이가 있다면 Role 도입을 고려해야 할 것이다.)



Note:
필터는 액션 메서드에 개별적으로 또는 컨트롤러 전체에 일괄로 적용할 수 있다. 필터를 컨트롤러에 적용하면 마치 그 컨트롤러 클래스에 존재하는 모든 액션 메서드들에 필터를 적용한 것처럼 동작한다. 목록12-3에서는 클래스 자체에 Authorize 필터를 적용했기 때문에, 인증된 사용자 들만 Admin 컨트롤러의 모든 액션 메서드들을 사용할 수 있다. 


이제 응용프로그램을 실행하고 /Admin/Index URL로 접속해보면 Authorize 필터가 적용된 효과를 확인할 수 있다. 즉 그림12-1과 유사한 오류가 발생할 것이다. 

여러분이 Admin 컨트롤러의 Index 액션 메서드에 접근하려고 할 때 MVC 프레임워크가 Authorize 필터를 감지하게 된다. 그러나 인증을 받지 않았기 때문에 이전 절에서 Web.config 파일의 폼 인증 설정에 지정했던 URL(/Account/Login)로 요청이 돌려 보내진다. 아직까지 Account 컨트롤러를 만들지는 않았지만(그림과 같은 오류가 발생한 이유다) MVC 프레임워크가 요청을 재전송하려고 시도했다는 점으로부터 Authorize 필터가 동작하고 있다는 사실을 확인할 수 있다. 



※ 인증 공급자(Authentication Provider) 생성하기
폼 인증 기능을 사용하려면 System.Web.Security.FormsAuthentication 클래스의 두 가지 정적 메서드를 호출해야 한다. 

* Authenticate 메서드는 사용자가 입력한 자격 증명의 유효성을 검사한다
* SetAuthCookie 메서드는 브라우저로 반환하는 응답에 쿠키를 추가해서 사용자가 매번 요청할 때 마다 다시 인증을 받을 필요가 없게 해준다. 

그러나 이 정적 메서드들을 액션 메서드 내부에서 직접 호출하게 되면 컨트롤러에 대한 단위 테스트를 수행하기가 어려워진다. 일반적으로 프레임워크를 모의 구현(mocking)하는 경우에는 대부분 인스턴스 멤버들만 Mock으로 구현하기 때문이다. 이런 문제점이 발생하는 이유는 MVC 프레임워크를 구성하고 있는 클래스들은 단위 테스트를 염두에 두고 설계된 반면, FormsAuthentication 클래스는 MVC 의 단위 테스트 친화적 설계보다 먼저 도입되었기 때문이다. 

이 문제점을 해결하기 위한 최선의 방법은 인터페이스를 사용해서 컨트롤러로부터 정적 메서드들을 분리시키는 것이다. 이 방식은 일반적인 MVC 디자인 패턴에도 적합하고 나중에 다른 인증 시스템으로 전환하는 경우에도 작업을 쉽게 만들어주는 추가적인 장점이 있다. 

먼저 인증 고급자용 인터페이스부터 정의해보도록 하자. SportsStore.WebUI 프로젝트의 Infrastructure 폴더에 Abstract라는 이름의 새 폴더를 생성하고, IAuthProvider라는 새로운 인터페이스를 추가한다. 이 인터페이스의 내용은 목록12-4와 같다. 

목록12-4 IAuthProvider.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SportsStore.WebUI.Infrastructure.Abstract
{
    public interface IAuthProvider
    {
        bool Authenticate(string username, string password);
    }
}


이제 이 인터페이스를 구현하여 FormsAuthentication 클래스의 정적 메서드들에 대한 래퍼(wrapper)로 사용할 수 있다. 계속해서 이번에는 Infrastructure 폴더에 Concrete라는 새로운 폴더를 만들고 FormsAuthProvider라는 이름으로 새로운 클래스를 생성한다. 이 클래스의 내용은 목록 12-5와 같다. 

목록12-5 FormsAuthProvider.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using SportsStore.WebUI.Infrastructure.Abstract;
namespace SportsStore.WebUI.Infrastructure.Concrete
{
    public class FormsAuthProvider : IAuthProvider
    {
        public bool Authenticate(string username, string password)
        {
            bool result = FormsAuthentication.Authenticate(username, password);
            if(result)
            {
                FormsAuthentication.SetAuthCookie(username, false);
            }
            return result;
        }
    }
}



Note:
목록 12-5의 코드를 직접 작성해보면 FormsAuthentication.Authenticate 메서드가 더 이상 사용되지 않을 것이며, 곧 사라지게 될 것이라는 Visual Studio의 경고를 보게 될 것이다. 이는 Microsoft가 웹 응용프로그램 프레임워크의 골치 아픈 영역인 사용자 보안을 합리적으로 개선하려는 지속적인 노력의 일부다. 다만 이번 장에서는 이 메서드만으로도 충분하고 Web.config 파일에 추가했던 고정된 정보를 사용하여 인증을 수행할 수있게 해주기 때문에 경고를 무시하고 이 메서드를 사용할 것이다. 


목록12-5의 Authenticate 메서드 구현에서는 컨트롤러에서 분리하고자 하는 FormsAuthentication의 정적 메서드들을 호출하고 있다. 마지막 단계는 목록12-6에서 볼 수 있는 것처럼 NinjectDependencyResolver 클래스의 AddBindings 메서드에서 이 FormsAuthProvider 클래스를 등록하는 것이다. 

목록12-6 NinjectDependencyResolver.cs 파일에서 인증 공급자 등록하기
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web.Mvc;
using Moq;
using Ninject;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.Domain.Concrete;
using SportsStore.WebUI.Infrastructure.Abstract;
using SportsStore.WebUI.Infrastructure.Concrete;
namespace SportsStore.WebUI.Infrastructure
{
    public class NinjectDependencyResolver :IDependencyResolver
    {
        private IKernel kernel;

        public NinjectDependencyResolver(IKernel kernelParam)
        {
            kernel = kernelParam;
            AddBindings();
        }
        public object GetService(Type serviceType)
        {
            return kernel.TryGet(serviceType);
        }
        public IEnumerable<object> GetServices(Type serviceType)
        {
            return kernel.GetAll(serviceType);
        }
        private void AddBindings()
        {

            kernel.Bind<IProductRepository>().To<EFProductRepository>();

            EmaillSettings emailSettings = new EmaillSettings
            {
                WriteAsFile = bool.Parse(ConfigurationManager.AppSettings["Email.WriteAsFile"] ?? "false")
            };
            kernel.Bind<IOrderProcessor>().To<EmailOrderProcessor>().WithConstructorArgument("settings", emailSettings);
            kernel.Bind<IAuthProvider>().To<FormsAuthProvider>();
        }
    }
}



※ Account 컨트롤러 생성하기
다음 작업은 Account 컨트롤러를 생성하고, Web.config 파일에 명시했던 Login 액션 메서드를 정의하는 것이다. 사실상 두 가지 버전의 Login 메서드를 만들게 될 텐데 첫 번째 버전의 메서드는 로그인 정보를 입력하는 뷰를 렌더하게 되고, 다른 버전은 사용자가 자격 증명을 제출할 때 POST 요청을 처리하게 될 것이다. 

먼저 컨트롤러와 뷰 간에 데이터를 전달할 뷰 모델 클래스부터 만들어보자. SportsStore.WebUI 프로젝트의 Models 폴더에 LoginViewModel.cs 라는 이름으로 새로운 클래스 파일을 추가하고 그 내용을 목록 12-7과 같이 편집한다. 

목록12-7 LoginViewModel.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;
namespace SportsStore.WebUI.Models
{
    public class LoginViewModel
    {
        [Required]
        public string UserName { get; set; }

        [Required]
        public string Password { get; set; }
    }
}

이 클래스는 사용자 이름(username)과 비밀번호(password)를 위한 속성들을 포함하고있으며, 데이터 주석 어트리뷰트를 이용해서 두 속성 모두를 필수 입력 값으로 지정하고 있다. 단지 두 개의 속성만 존재하기 때문에 뷰 모델 없이 ViewBag 기능에 의존해서 데이터를 뷰에 전달하고 싶은 유혹이 들 수도 있을 것이다. 그렇지만 뷰 모델을 정의하여 컨트롤러로 부터 뷰에 전달하는 데이터와 모델 바인더에서 액션 메서드로 전달하는 데이터를 일관성 있게 형식화하는 것이 더 좋은 방법이다. 

다음으로 인증을 처리할 Account 컨트롤러를 만든다. Controllers 폴더에 AccountController.cs라는 새 클래스 파일을 생성하고 목록12-8의 내용과 같이 편집한다. 

목록12-8 AccountController.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.WebUI.Infrastructure.Abstract;
using SportsStore.WebUI.Models;
namespace SportsStore.WebUI.Controllers
{
    public class AccountController : Controller
    {
        IAuthProvider authProvider;

        public AccountController(IAuthProvider auth)
        {
            authProvider = auth;
        }
        
        public ViewResult Login()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Login(LoginViewModel model, string returnUrl)
        {
            if(ModelState.IsValid)
            {
                if(authProvider.Authenticate(model.UserName,model.Password))
                {
                    return Redirect(returnUrl ?? Url.Action("Index", "Admin"));
                }else
                {
                    ModelState.AddModelError("", "Incorrect username or password");
                    return View();
                }
            }else
            {
                return View();
            }
        }

    }
}


※ 뷰 생성하기

이번에는 사용자에게 자격 증명 정보를 입력 받을 뷰를 만들기 위해서 SportsStore.WebUI 프로젝트에 Views/Account 폴더를 생성한다. 이 폴더를 마우스 오른쪽 버튼으로 클릭한 다음 [추가(Add)] > [MVC 5 뷰 페이지(Razor)(MVC 5 View Page(Razor))] 메뉴를 선택하고 뷰의 이름을 Login이라고 입력한 다음 [확인(OK)]버튼을 클릭하여 Login.cshtml 이라는 파일을 생성한다. 그리고 이 뷰 파일의 내용을 목록 12-9와 같이 편집한다. 

목록12-9 Login.cshtml 파일의 내용
@model SportsStore.WebUI.Models.LoginViewModel

@{
    ViewBag.Title = "Admin: Log In";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="panel">
    <div class="panel-heading">
        <h3>Log In</h3>
    </div>
    <div class="panel-body">
    <p class="lead">Please log in to access the administraction area:</p>
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary()
        <div class="form-group">
            <label>User Name:</label>
            @Html.TextBoxFor(m => m.UserName, new {@class="form-control"})
        </div>
        <div class="form-group">
            <label>Password:</label>
            @Html.PasswordFor(m => m.Password, new {@class="form-control"})
        </div>
        <input type="submit" value="Log in" class="btn btn-primary" />
    }
    </div>
</div>


이 뷰는 콘텐트를 꾸미기 위해서 _AdminLayout.cshtml 레이아웃과 Bootstrap 클래스들을 사용하고 있다. 그리고 이 뷰를 작성하면서 type 어트리뷰트가 password 로 설정된 input 요소를 생성해주는 Html.PasswordFor 헬퍼 메서드를 사용하고 있다는 점을 제외한다면 새롭게 사용된 기법은 없다. 그 밖의 다양한 헬퍼 메서드들에 관해서는 21장에서 다시 자세하게 살펴볼 예정이다. 이제 응용프로그램을 실행하고 /Admin/Index URL로 이동해보면 그림 12-2과 같이 이 뷰가 출력되는 모습을 확인할 수 있을 것이다. 

뷰 모델의 속성들에 적용한 Required 어트리뷰트들로 인해서 클라이언트 측 유효성 검사가 수행되고 있다.(이전 장에서 생성한 _AdminLayout.cshtml 레이아웃에 클라이언트 측 유효성 검사에 필요한 JavaScript 라이브러리들을 포함시켰던 것을 기억하자) 사용자는 사용자 이름과 비밀번호를 모두 입력해야만 폼을 전송할 수 있으며, 인증은 FormsAuthentication.Authenticate 메서드가 호출될 때 서버에서 수행된다. 



주의:
일반적으로 클라이언트 측 데이터 유효성 검사는 좋은 생각이다. 이는 서버가 부담해야 할 작업량을 덜어주고 사용자에게 입력 데이터에 대한 즉각적인 피드백을 제공해준다. 그러나 인증까지 클라이언트에서 수행하려는 유혹에 빠져서는 안 된다. 클라이언트에서 인증을 수행한다는 말의 의미는 유효한 자격 증명을 클라이언트로 보내서 입력 받은 사용자 이름과 비밀번호를 대조한다는 의미로, 최소한 인증이 성공적으로 수행되었는지 여부에 대한 클라이언트의 보고를 신뢰한다는 뜻이다. 인증은 항상 서버에서 수행되어야 한다. 



서버에서는 올바르지 않은 자격 증명 정보를 전달받은 경우 ModelState 속성에 오류를 추가하고 뷰를 다시 렌더한다. 이는 뷰에서 Html.ValidationSummary 헬퍼 메서드를 호출해서 생성한 유효성 검사 요약 정보 영역에 메시지를 출력하게 된다. 지금까지 작업한 내용들을 통해서 이제 SportsStore의 관리자 기능을 보호할수 있게 되었다. 사용자는 유효한 자격 증명을 제출해야만 관리자 기능에 접근할 수 있고, 이어지는 요청들에 추가되어 사용자가 이미 인증되었다는 것을 말해줄 쿠키를 받을 수 있다. 



단위 테스트 : 인증
Account 컨트롤러에 대해서는 두 가지 동작을 확인해야 한다. 즉 유효한 자격 증명이 제출된 경우에는 사용자가 인증되어야 하고 유효하지 않은 자격 증명이 제출된 경우에는 인증 되지 않아야 한다. 이 테스트들을 수행하기 위해서는 IAuthProvider 인터페이스의 Mock 구현을 생성한 다음, 컨트롤러의 Login 메서드가 반환하는 결과의 형식과 특성을 확인한다. 다음은 AdminSecurityTests.cs라는 새로운 단위 테스트 파일에 작성한 테스트들을 보여주고 있다. 
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Web.Mvc;
using Moq;
using SportsStore.WebUI.Controllers;
using SportsStore.WebUI.Infrastructure.Abstract;
using SportsStore.WebUI.Models;

namespace SportsStore.UnitTests
{
    [TestClass]
    public class AdminSecurityTests
    {
        [TestMethod]
        public void Can_Login_With_Valid_Credentials()
        {
            //Arrange - Mock 인증 공급자를 생성한다
            Mock<IAuthProvider> mock = new Mock<IAuthProvider>();
            mock.Setup(m => m.Authenticate("admin", "secret")).Returns(true);

            //Arrange - 뷰 모델을 생성한다
            LoginViewModel model = new LoginViewModel
            {
                UserName = "admin",
                Password = "secret"
            };

            //Arrange - 컨트롤러를 생성한다
            AccountController target = new AccountController(mock.Object);

            //Act - 유효한 자격 증명을 사용하여 인증한다
            ActionResult result = target.Login(model, "/MyURL");

            //Assert
            Assert.IsInstanceOfType(result, typeof(RedirectResult));
            Assert.AreEqual("/MyURL", ((RedirectResult)result).Url);
        }

        [TestMethod]
        public void Cannot_Login_With_Invalid_Credentials()
        {
            //Arrange - Mock 인증 공급자를 생성한다
            Mock<IAuthProvider> mock = new Mock<IAuthProvider>();
            mock.Setup(m => m.Authenticate("badUser", "badPass")).Returns(false);

            //Arrange - 뷰 모델을 생성한다. 
            LoginViewModel model = new LoginViewModel
            {
                UserName = "badUser",
                Password = "badPass"
            };

            //Arrange - 컨트롤러를 생성한다
            AccountController target = new AccountController(mock.Object);

            //Act - 유효하지 않은 자격 증명을 사용하여 인증한다
            ActionResult result = target.Login(model, "/MyURL");

            //Assert
            Assert.IsInstanceOfType(result, typeof(ViewResult));
            Assert.IsFalse(((ViewResult)result).ViewData.ModelState.IsValid);
        }

    }
}



※ 이미지 업로드
이제 마지막으로 조금 더 세련된 기능을 추가함으로써 SportsStore 응용프로그램의 사용자 경험을 완성하려고 한다. 즉 관리자가 상품 이미지들을 업로드하면 그 이미지들을 데이터베이스에 저장해뒀다가 상품 카탈로그에 보여주는 기능을 추가해볼 것이다. 기능 자체만 놓고 보면 특별히 흥미 있다거나 유용한 기능은 아니지만 MVC 프레임워크의 중요한 기능들을 살펴볼 수 있는 기회가 될 것 이다. 