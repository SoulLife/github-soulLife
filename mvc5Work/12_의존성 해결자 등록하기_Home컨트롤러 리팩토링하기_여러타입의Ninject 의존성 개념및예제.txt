※의존성 해결자 등록하기
그저 단순히 IDependencyResolver 인터페이스의 구현을 작성한 것만으로는 부족하다. 즉 MVC 프레임워크에 이 의존성 해결자를 사용하도록 지시해야 한다. NuGet을 이용해서 Ninject 패키지를 추가하면 응용프로그램이 시작될 때 자동으로 호출되어야 하는 메서드들을 정의하기 위한 App_Start 폴더에 ASP.NET 요청 생명주기와의 통합을 지원하기 위한 NinjectWebCommon.cs라는 파일이 생성된다(이는 잠시 뒤에 설명할 범위(Scope)기능을 제공하기 위한 것이다). 목록6-12에서 볼 수 있는 것처럼 NinjectWebCommon 클래스의 RegisterServices 메서드에서 NinjectDependencyResolver 클래스의 인스턴스를 생성하고 System.Web.Mvc.DependencyResolver 클래스에 정의되어 있는 정적 SetResolver 메서드를 사용해서 MVC 프레임워크에 이 해결자를 등록하는 구문을 추가한다. 이 구문이 완벽하게 이해되지 않더라도 걱정할 필요는 없다. 이 구문의 목적은 단지 Ninject와 MVC 프레임워크사이에 DI를 지원하기 위한 연결을 만드는 것 뿐이다. 

목록6-12 NinjectWebCommon.cs 파일에서 해결자 등록하기
...
private static void RegisterServices(IKernel kernel)
{
	System.Web.Mvc.DependencyResolver.SetResolver(new EssentialTools.Infrastructure.NinjectDependencyResolver(kernel));
}
....


※ Home 컨트롤러 리팩터링하기

마지막 단계는 이 전 절에서 구성한 장치들의 이점을 얻을 수 있도록 Home 컨트롤러를 리팩터링하는 것이다. 목록 6-13 에 그 결과가 나타나 있다. 

목록6-13 HomeController.cs 파일의 컨트롤러 리팩터링하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using EssentialTools.Models;
using Ninject;
namespace EssentialTools.Controllers
{
    public class HomeController : Controller
    {
        private IValueCalculator calc;

        private Product[] products =
        {
            new Product{Name="Kayak", Category="Watersports", Price=275M},new Product{ Name="Lifejacket", Category="Watersports", Price=48.95M},
            new Product{Name="Soccer ball", Category="Soccer", Price=19.50M}, new Product{Name="Corner flag", Category="Soccer", Price=34.95M}
        };

        public HomeController(IValueCalculator calcParam)
        {
            calc = calcParam;
        }
        // GET: Home
        public ActionResult Index()
        {            
            ShoppingCart cart = new ShoppingCart(calc) { Products = products };

            decimal totalValue = cart.CalculateProductsTotal();

            return View(totalValue);
        }
    }
}

가장 큰 변화는 IValueCalculator 인터페이스의 구현을 전달 받는 클래스 생성자를 추가해서 HomeController 클래스가 자신의 의존성을 선언하도록 변경한 것이다. Ninject 는 컨트롤러의인스턴스를 생성할 때 목록6-11의 NinjectDependencyResolver 클래스에 설정된 구성을 이용해서 IValueCalculator 인터페이스를 구현한 개체를 제공해주게 된다. 

또 다른 변경사항은 컨트롤러에서 Ninject 나 LinqValueCalculator 클래스에 관한 모든 구문을 제거한 것이다. 마침내 HomeController 클래스와 LinqValueCalculator 클래스 사이의 강력한 결합을 모두 제거하게 된 것이다. 

이제 예제를 실행시켜보면 그림 6-2와 같은 결과를 확인할 수 있을 것이다. 물론 이 결과는 컨트롤러에서 직접 LinqValueCalculator 클래스의 인스턴스를 생성했을 떄와 완벽하게 같은 결과를 보여준다. 


이번 예제는 의존성 주입의 한 가지 형태인 생성자 주입(Constructor Injection)의 사례를 보여주고 있다. 다음은 예제 응용프로그램을 실행하고 Internet Explorer가 응용프로그램의 루트 URL을 요청했을 때 발생하는 일들을 순서대로 정리한 것이다. 

1. MVC 프레임워크는 요청을 수신한 다음, 이 요청이 Home 컨트롤러를 대상으로 하고 있다는 것을 알아낸다.(MVC 프레임워크가 대상 컨트롤러를 알아내는 방법에 관해서는 17장에서 살펴본다)


2. MVC 프레임워크는 GetService 메서드의 Type 매개변수에 HomeController 클래스를 지정해서 사용자 지정 의존성 해결자 클래스에게 새로운 HomeController 클래스의 인스턴스 생성을 요청한다. 

3. 사용자 지정 의존성 해결자는 Ninject 커널의 TryGet 메서드에 Type 매개변수 개체를 전달해서 Ninject 에 새로운 HomeController 클래스의 생성을 요청한다. 

4. Ninject는 HomeController 클래스의 생성자를 분석해서 이 클래스가 자신의 바인딩 정보를 알고 있는 IValueCalculator 인터페이스에 대한 의존성을 선언하고 있다는 것을 알아낸다. 

5. Ninject는 LinqValueCalculator 클래스의 인스턴스를 생성한 다음 이를 이용해서 HomeController클래스의 새로운 인스턴스를 생성한다. 

6. Ninject가 HomeController 의 인스턴스를 사용자 지정 의존성 해결자에게 전달해주고 의존성 해결자는 이를 다시 MVC 프레임워크에게 반환해준다. MVC 프레임워크는 이 컨트롤러의 인스턴스를 이용해서 요청에 대한 서비스를 제공해준다. 

DI를 처음 사용할 때는 이해하기가 약간 어려울 수도 있기 때문에 가급적 상세하게 처리 과정을 정리해봤다. 이번 예제에서 사용하고 있는 접근 방식의 장점 중 하나는 응용프로그램의 모든 컨트롤러들에서 의존성을 선언할 수 있으며, MVC 프레임워크는 Ninject를 이용해서 그 의존성을 해결할 수 있다는 점이다. 

무엇보다도 멋진 점은 LinqValueCalculator 클래스를 다른 구현 클래스로 교체하고 싶을때 오직 의존성 해결자 클래스만 수정하면 된다는 점이다. 바로 이 클래스가 IValueCalculaotor 인터페이스에 대한 의존성들을 만족시키기 위해서 필요한 구현 클래스를 지정하는 유일한 장소이기 때문이다. 


※ 의존성 체인 생성하기
Ninject에 특정 형식의 생성을 요청하면 Ninject는 그 형식이 선언하고 있는 의존성들을 조사한다. 그리고 다시 그 의존성들이 또 다른 형식들에 의존하고 있는지, 즉 자체적으로 선언하고 있는 의존성들이 있는지를 살펴본다. 이 과정을 계속 반복해서 추가적인 의존성들이 발견될때마다 Ninject가 자동으로 그 의존성들을 해결해주고 필요한 모든 클래스들의 인스턴스를 생성해서 의존성들의 체인을 따라 차례대로 작업을 수행함으로써 최종적으로 처음 요청했던 형식의 인스턴스를 생성하게 된다. 

이 기능을 직접 살펴보기 위해서 Models 폴더에 Discount.cs라는 파일을 추가하고 목록 6-14에서 볼 수 있는 것처럼 이 파일에 새로운 인터페이스와 그 인터페이스를 구현하는 클래스를 선언한다. 

목록6-14 DisCount.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EssentialTools.Models
{
    interface IDiscountHelper
    {
        decimal ApplyDiscount(decimal totalParam);
    }
    public class DefaultDiscountHelper : IDiscountHelper
    {
        public decimal ApplyDiscount(decimal totalParam)
        {
            return (totalParam - (10m / 100m * totalParam));
        }
    }
}


목록 6-14의 IDiscountHelper 인터페이스는 전달된 decimal 값에 할인율을 적용하는 ApplyDiscount 메서드를 정의하고 있다. 그리고 DefaultDiscounterHeper 클래스는 10퍼센트의 고정된 할인율을 적용해서 이 IDiscountHelper 인터페이스를 구현하고 있다. 이제 목록6-15와 같이 LinqValueCalculator 클래스를 수정해서 계산을 수행할 때 IDiscountHelper 인터페이스를 사용하도록 변경한다. 

목록6-15 LinqValueCalculator.cs 파일에 의존성 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace EssentialTools.Models
{
    public class LinqValueCalculator : IValueCalculator
    {
        private IDiscountHelper discounter;

        public LinqValueCalculator(IDiscountHelper discountParam)
        {
            discounter = discountParam;
        }
        public decimal ValueProducts(IEnumerable<Product> products)
        {
            return discounter.ApplyDiscount(products.Sum(p => p.Price));
        }
    }
}

LinqValueCalculator 클래스에 추가된 새로운 생성자는 IDiscountHelper 인터페이스에 대한 의존성을 선언하고 있다. 그리고 생성자에 전달된 구현 개체를 필드에 할당한 다음 ValueProducts 메서드에서 이 개체를 이용해서 Product 개체의 계산 값에 할인율을 적용한다. 

이번에는 NinjectDependencyResolver 클래스에서 IValueCalculator 인터페이스를 바인딩했던 것과 같은 방식으로 목록6-6과 같이 Ninject 커널을 이용해서 IDiscountHelper 인터페이스를 그 구현 클래스에 바인딩 시킨다. 

목록6-16 NinjectDependencyResolver.cs 파일에서 또 다른 인터페이스를 그 구현과 바인딩한다. 
private void AddBindings()
        {
            kernel.Bind<IValueCalculator>().To<LinqValueCalculator>();
            kernel.Bind<IDiscountHelper>().To<DefaultDiscountHelper>();
        }

이제 의존성 체인이 만들어졌다. 즉 Home 컨트롤러는 IValueCalculator 인터페이스에 의존성을 갖고 있으며, 이 의존성은 LinqValueCalculator 클래스를 생성해서 해결하도록 Ninject를 설정한 상태다. 다시 LinqValueCalculator 클래스는 IDiscountHelper 인터페이스에 의존성을 갖고 있고 이 의존성은 DefaultDiscountHelper 클래스를 생성해서 해결하도록 Ninject를 설정한 상태다. 

Ninject는 모든 의존성을 해결하기 위해서 필요한 개체들을 자동으로 생성해서 의존성 체인을 매끄럽게 해결해준다. 가령 이번 예제의 경우 HTTP 요청을 서비스하기 위해 필요한 HomeController 클래스의 인스턴스가 최종적으로 생성될 것이다. 




※ 속성 및 생성자 매개변수 값 지정하기
인터페이스를 구현 클래스에 바인딩할 때 속성에 적용하고자 하는 값들의 세부 정보를 함께 제공해서 Ninject가 생성하는 개체들을 구성할 수도 있다. 이 기능을 직접 살펴보기 위해서 목록 6-17과 같이 DefaultDiscountHelper 클래스를 다시 한번 변경해서 할인 금액 계산에 사용할 DiscountSize 속성을 정의한다. 

목록6-17 DiscountSize 속성이 추가된 Discount.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EssentialTools.Models
{
    public interface IDiscountHelper
    {
        decimal ApplyDiscount(decimal totalParam);
    }
    public class DefaultDiscountHelper : IDiscountHelper
    {
        public decimal DiscountSize { get; set; }
        public decimal ApplyDiscount(decimal totalParam)
        {
            return (totalParam - (10m / 100m * totalParam));
        }
    }
}


이제 IValueCalculator 인터페이스에 사용할 구현 클래스를 지정할 때 WithPropertyValue 메서드를 추가로 호출해서 DefaultDiscountHelper 클래스의 DiscountSize 속성에 지정할 값을 Ninject에 구성할 수 있다. 목록6-18 을 살펴보면 NinjectDependencyResolver 클래스의 AddBindings 메서드의 변경된 부분을 확인할 수있다. 이 때 속성 이름을 문자열 값으로 지정하고 있다는 점에 주의한다. 

목록6-18 WithPropertyValue 메서드를 사용하고 있는 NinjectDependencyResolver.cs 파일
private void AddBindings()
        {
            kernel.Bind<IValueCalculator>().To<LinqValueCalculator>();
            kernel.Bind<IDiscountHelper>().To<DefaultDiscountHelper>().WithPropertyValue("DiscountSize", 50M);
        }

이렇게 구성한다고 해서 다른 바인딩들을 변경해야 한다거나 그 밖의 다른 코드들을 변경해야 할 필요는 전혀 없다. 이 작업으로 인해서 DefaultDiscountHelper 클래스에 대한 바인딩 구성에 지정한 속성 값이 설정되어 항목들의 합계 값이 절반으로 줄어드는 결과를 얻게 된다. 그림6-3은 이 변경에 따른 결과를 보여주고 있다. 

만약 하나 이상의 속성 값들을 설정해야 한다면 WithPropertyValue 메서드를 그만큼 반복해서 호출해주기만 하면 된다. 또한 동일한 작업을 생성자 매개변수를 대상으로도 수행할 수 있다. 목록6-19는 할인율을 생성자 매개변수에 전달하도록 다시 변경한 DefaultDiscounterHelper 클래스를 보여준다. 

목록6-19 생성자 매개변수를 사용하도록 변경된다 Discount.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EssentialTools.Models
{
    public interface IDiscountHelper
    {
        decimal ApplyDiscount(decimal totalParam);
    }
    public class DefaultDiscountHelper : IDiscountHelper
    {
        public decimal discountSize;
        public decimal DiscountSize { get; set; }
        public DefaultDiscountHelper(decimal discountParam)
        {
            discountSize = discountParam;
        }
        public decimal ApplyDiscount(decimal totalParam)
        {
            return (totalParam - (discountSize / 100m * totalParam));
        }
    }
}


이 클래스를 Ninject 를 이용해서 바인딩하려면 목록6-20에서 볼 수 있는 것처럼 AddBindings 메서드에서 WithConstructorArgument 메서드를 호출해서 생성자 매개변수값을 지정해주면 된다. 

목록6-20 생성자 매개변수를 지정하고 있는 NinjectDependencyResolver.cs 파일
private void AddBindings()
        {
            kernel.Bind<IValueCalculator>().To<LinqValueCalculator>();
            kernel.Bind<IDiscountHelper>().To<DefaultDiscountHelper>().WithConstructorArgument("discountParam", 50M);
        }

다시 한번 얘기하지만 복수의 값들을 제공하기 위해서 이 메서드들을 반복해서 호출할 수도 있고 의존성에 따라 함께 섞어서 호출할 수도 있다. 그러면 Ninject 가 필요한 정보들을 알아서 분석해주고 적절히 생성해준다. 


TIP:
그저 단순히 WithPropertyValue 메서드 호출을 WithConstructorArgument 메서드 호출로 변경하기만 한 것이 아니라는 점에 주목한다. 그 대상이 되는 클래스 멤버의 이름도 매개변수 이름에 관한 C#의 규약에 따라 변경해주고 있다. 




※ 조건적 바인딩 사용하기
Ninject 는 몇 가지 조건적 바인딩 메서드들을 지원해준다. 이 메서드들을 이용하면 커널이 특정 인터페이스들에 대한 요청에 대응하기 위해서 어떤 클래스들을 사용해야 하는지 지정할 수 있다. 이 기능을 살펴보기 위해서 예제 프로젝트의 Models 폴더에 FlexibleDiscountHelper.cs 라는 새로운 파일을 추가한다. 목록6-21에 파일의 내용이 나타나 있다. 

목록6-21 FlexibleDiscountHelper.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace EssentialTools.Models
{
    public class FlexibleDiscountHelper : IDiscountHelper
    {
        public decimal ApplyDiscount(decimal totalParam)
        {
            decimal discount = totalParam > 100 ? 70 : 25;
            return (totalParam - (discount / 100m * totalParam));
        }
    }
}

이 FlexibleDiscountHelper 클래스는 합계 금액의 가격에 따라 다른 할인율을 적용해준다. 이제 IDiscountHelper 인터페이스를 구현한 클래스가 하나 더 추가되어 선택의 여지가 생겼으므로 목록6-22에서 볼 수 있는 것처럼 NinjectDependencyResolver 클래스의 AddBindings 메서드에 구문을 추가해서 Ninject에게 두 가지 구현 클래스 중 특정 클래스를 사용해야 하는 경우를 지정할 수 있다. 

목록6-22 조건적 바인딩을 사용하고 있는 NinjectDependencyResolver.cs 파일
private void AddBindings()
        {
            kernel.Bind<IValueCalculator>().To<LinqValueCalculator>();
            kernel.Bind<IDiscountHelper>().To<DefaultDiscountHelper>().WithConstructorArgument("discountParam", 50M);
            kernel.Bind<IDiscountHelper>().To<FlexibleDiscountHelper>().WhenInjectedInto<LinqValueCalculator>();
        }

이 새로운 바인딩은 Ninject 커널에 LinqValueCalculator 개체를 생성하는 경우, IDiscountHelper 인터페이스의 구현 클래스로 FlexibleDiscountHelper 클래스를 사용하도록 지시한다. 이때 IDiscountHelper 인터페이스에 대한 기존 바인딩은 여전히 그대로 남아있다는 점에 주목하기 바란다. 이렇게 바인딩을 구성하면 Ninject는 먼저 가장 적절한 바인딩을 찾기 위해서 시도한 다음 조건에 대한 기준을 만족시킬 수 없는 경우, 동일한 클래스 및 인터페이스에 대한 기본 바인딩을 기본값으로 사용한다. Ninject는 몇 가지 다른 조건적 바인딩 메서드들을 지원해주는데 표6-2에 가장 유용한 조건적 바인딩 메서드들을 정리해봤다. 

표6-2 Ninject의 조건적 바인딩 메서드
메서드				효과
When([조건])				조건(람다 식)평가가 true인경우, 이 바인딩이 사용된다. 
WhenClassHas<T>()		주입되는 클래스에 T 형식의 어트리뷰트가 지정되어 있는 경우, 바인딩이 사용된다. 
WhenInjectedInto<T>()		주입되는 클래스가 T 형식인 경우 이 바인딩이 사용된다. 



※ 개체 범위 설정하기
마지막으로 살펴볼 Ninject의 기능은 Ninject가 생성해주는 개체들의 생명주기를 응용프로그램의 상황에 맞게 조정할 수 있도록 지원해주는 기능이다. 기본적으로 Ninject는 매번 개체가 요청될 때마다 의존성 해결을 위해 필요한 모든 개체들의 인스턴스를 새로 생성한다. 

실제로 어떤 일이 발생하는지 살펴보기 위해서 목록 6-23과 같이 LinqValueCalculator 클래스의 생성자를 변경해서 새로운 인스턴스가 생성될 때마다 Visual Studio의 [출력(Output)] 창에 메시지를 기록하게 만든다. 


목록6-23 LinqValueCalculator.cs 파일의 생성자 수정하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace EssentialTools.Models
{
    public class LinqValueCalculator : IValueCalculator
    {
        private IDiscountHelper discounter;
        private static int counter = 0;

        public LinqValueCalculator(IDiscountHelper discountParam)
        {
            discounter = discountParam;
            System.Diagnostics.Debug.WriteLine($"Instance {++counter} created");
        }
        public decimal ValueProducts(IEnumerable<Product> products)
        {
            return discounter.ApplyDiscount(products.Sum(p => p.Price));
        }
    }
}


이 코드에 사용된 System.Diagnostics.Debug 클래스는 디버깅 메시지를 출력할 때 사용할수 있는 몇 가지 메서드들을 제공해준다. 이 메서드들은 코드를 따라가면서 동작 과정을 추적할 때 매우 유용하다. 애석하게도 필자가 처음 코드를 작성하기 시작했을 때는 디버거가 그리 세련되지 않았었는데, 지금도 필자는 디버깅이 필요할 때, 가끔 이런 기초적인 방법을 사용하고는 한다. 

목록6-24는 Ninject에게 두 개의 IValueCalculator 인터페이스 구현을 요구하도록수정한 Home 컨트롤러의 생성자를 보여준다. 
public HomeController(IValueCalculator calcParam,IValueCalculator calc2)
        {
            calc = calcParam;
        }

이 코드에서는 사실 Ninject가 추가로 제공해준 개체를 사용해서 아무런 작업도 수행하지 않고 있다. 여기에서 중요한 점은 두 개의 인터페이스 구현을 요청하고 있다는 사실 그 자체다. 이제 예제를 실행하고 Visual Studio의 [출력(Output)] 창을 살펴보면 Ninject가 LinqValueCalculator 클래스의 인스턴스를 각각 하나씩 두 개를 생성했음을 보여주는 메시지를 확인할 수 있을 것이다. 

Instance 1 created
Instance 2 created

지금 살펴본 LinqValueCalculator 클래스는 반복적으로 인스턴스를 생성하더라도 별다른 문제가 없지만, 모든 클래스들이 그런 것만은 아니다. 클래스에 따라 단일 인스턴스를 응용프로그램 전체에서 공유하고 싶을 수도 있고, 또한 ASP .NET 플랫폼이 수신한 각각의 HTTP요청마다 새로운 인스턴스를 생성하고 싶은 경우도 있을 수 있다. Ninject에서는 범위(Scope)라는 기능을 통해서 생성되는 개체의 생명주기를 제어할 수 있다. 이 기능은 인터페이스와 그 구현 형식의 바인딩을 설정할 때 특정 메서드를 호출해서 설정할 수 있다. 목록6-25는 NinjectDependencyResolver 클래스에서 LinqValueCalculator 클래스에 MVC 프레임워크 응용프로그램에서 가장 유용한 범위인 요청범위(Request Scope)를 적용하는 방법을 보여주고 있다. 

목록6-25 요청 범위를 적용하도록 변경된 NinjectDependencyResolver.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using EssentialTools.Models;
using System.Web.Mvc;
using Ninject;
using Ninject.Web.Common; //추가선언
namespace EssentialTools.Infrastructure
{
    public class NinjectDependencyResolver : IDependencyResolver
    {
        private IKernel kernel;

        public NinjectDependencyResolver(IKernel kernelParam)
        {
            kernel = kernelParam;
            AddBindings();
        }
        public object GetService(Type serviceType)
        {
            return kernel.TryGet(serviceType);
        }
        public IEnumerable<object> GetServices(Type serviceType)
        {
            return kernel.GetAll(serviceType);
        }
        private void AddBindings()
        {
            kernel.Bind<IValueCalculator>().To<LinqValueCalculator>().InRequestScope(); //InRequestScope() 추가
            kernel.Bind<IDiscountHelper>().To<DefaultDiscountHelper>().WithConstructorArgument("discountParam", 50M);
            kernel.Bind<IDiscountHelper>().To<FlexibleDiscountHelper>().WhenInjectedInto<LinqValueCalculator>();
        }
    }
}


Ninject.Web.Common 네임스페이스에 존재하는 InRequestScope 확장 메서드는 ASP .NET이 수신한 각각의 HTTP 요청마다 오직 하나의 LinqValueCalculator 클래스 인스턴스만 생성하도록 지시한다. 결과적으로 각 요청은 자신만의 개별적인 개체를 얻게 되고, 동일한 요청 내에서 해결되는 복수의 의존성들은 이 클래스의 단일 인스턴스를 통해서 해결된다. 다시 예제 응용프로그램을 실행한 다음 Visual Studio의 [출력(Output)]창을 살펴보면 이번변경으로 인한 결과를 확인할 수 있는데, Ninject가 단 하나의 LinqValueCalculator 클래스 인스턴스만 생성한다는 것을 알 수 있다. 그리고 응용프로그램을 다시 시작하지 않고 브라우저 창을 새로 고침해보면 Ninject가 두 번째 개체를 생성하는 것도 확인할 수 있을 것이다. 
Ninject는 다양한 개체 범위를 제공해주는데, 표6-3에 가장 유용한 범위들을 정리해봤다. 

표6-3 Ninject의 범위 지정 메서드

이름				효과
InTransientScope()		범위를 지정하지 않는 상태와 동일하며, 의존성을 해결할 때마다 매번 새로운 개체를 생성한다. 

InSingletonScope()		응용프로그램 전체에 공유되는 단일 인스턴스를 생성한다. InSingletonScope 메서드를 사용하면 Ninject가 단일 인스턴스를 생성해 준다
ToConstant(object)		또는 ToConstant 메서드를 사용해도 단일 인스턴스를 제공할 수 있다.

InThreadScope()		단일 인스턴스를 생성해서 단일 스레드에서 요청된 모든 개체들의 의존성을 해결한다. 

InRequestScope()		단일 인스턴스를 생성해서 단일 HTTP 요청에서 요청된 모든 개체들의 의존성을 해결한다. 