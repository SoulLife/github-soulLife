※ 특수한 컨트롤러를 사용하여 성능 향상시키기

MVC 프레임워크는 MVC 웹 응용프로그램의 성능을 향상시킬 수 있는 두 가지 특별한 유형의 컨트롤러들을 제공해주고 있다. 물론 다른 모든 성능 최적화와 마찬가지로 이러한 컨트롤러들도 성능을 향상시키기 위해서는 사용 편의성이나 기능성 중 하나를 희생할 수 밖에 없지만 말이다. 이어지는 절들에서는 두 가지 컨트롤러 모두를 살펴보고 그들의 장단점을 비교해볼 것이다. 


※ 세션을 사용하지 않는 컨트롤러 다루기

기본적으로 컨트롤러들은 MVC 프로그래머들이 좀 더 편하게 작업할 수 있도록 요청에 걸쳐 데이터 값들을 저장하기 위해서 사용되는 세션상태를 제공해준다. 이런 세션 상태를 생성하고 관리하는 일은 복잡한 작업이다. 데이터는 저장될 수 있고 읽어올수 있어야 하며, 세션 그 자체도 적절하게 만료될수 있도록 관리되어야만 한다. 세션 데이터는 서버의 메모리 혹은 어떤 다른 저장소에 있는 공간을 사용하며 다중 웹 서버에 걸쳐 세션 데이터를 동기화할 필요도 있기 때문에 서버 팜(Server Farm)에서 응용프로그램을 구동하기는 쉽지 않은 편이다. 

ASP .NET은 세션 상태를 단순화하기 위해서 주어진 세션에 대해 한 번에 오직 하나의 질의만 처리한다. 그렇기에 클라이언트가 여러 개의 중복되는 요청을 보내온다면 그 요청들은 일단 큐에 놓여지고 서버에 의해 순차적으로 처리될 것이다. 이 방식의 장점은 여러 개의 요청이 동일한 데이터를 변경하지는 않을지 걱정할 필요가 없다는 것이고. 단점은 여러분이 원하는 수준의 요청 처리량을 얻지 못한다는 것이다. 


그러나 모든 컨트롤러가 세션 상태 기능을 사용해야만 하는 것은 아니다. 원한다면 세션상태의 관리가 필요한 작업을 피함으로써 응용프로그램의 성능을 향상시킬 수 있다. 세션을 사용하지 않는 컨트롤러(Sessionless Controllers)를 사용하면 그렇게 할 수 있는데 단 두가지 예외사항만 제외하면 정규 컨트롤러와 상당히 유사한 편이다. 그 두 가지 예외란 요청을 처리하기 위해서 세션 상태가 사용되어야 하는 경우에도 MVC 프레임워크가 세션 상태를 로드하거나 유지하지 않는다는 점과 다른 하나는 중복되는 요청이 동시에 처리될수 있다는 점이다. 



※ 사용자 지정 IControllerFactory에서 세션 상태 관리하기

이번 장의 초반부에서 IControllerFactory 인터페이스를 살펴봤었는데, 이 인터페이스는 SessionStateBehavior 열거형 값을 반환하는 GetControllerSessionBehavior라는 메서드를 갖고 있었다. 그리고 그 열거형은 표 19-4에서 나열하고 있는 것과 같이 컨트롤러의 세션 상태 구성을 제어하는 네 개의 값을 가지고 있다. 


표 19-4 SessionStateBehavior 열거형 값

값				설명
Default			기본 ASP .NET 동작을 사용하여 HttpContext에서 세션 상태의 설정을 결정한다.

Required			읽기 -쓰기 세션 상태를 사용하도록 설정한다. 

ReadOnly			읽기 전용 세션 상태를 사용하도록 설정한다. 

Disabled			세션 상태를 사용하지 않도록 설정한다. 


IControllerFactory 인터페이스를 직접 구현하는 컨트롤러 팩토리는 GetControllerSessionBehavior 메서드로 하여금 SessionStateBehavior 값중 하나를 반환하게 하여 컨트롤러의 세션 상태 동작을 설정할 수 있다. 이 메서드의 매개변수는 RequestContext 개체와 컨트롤러의 이름을 갖는 문자열이다. 이 표에서 볼 수 있는 네 가지 값 중 어떤 값이든 반환할수 있으며, 서로 다른 컨트롤러에 대해 서로 다른 값을 반환할수도 있다. 실제 코드를 살펴보기 위해서 이번 장의 앞부분에서 작성했던 CustomControllerFactory 클래스의 GetControllerSessionBehavior 메서드의 구현을 목록 19-23에서 보이는 것처럼 변경하였다. 


목록 19-23 CustomControllerFactory.cs 파일에서 컨트롤러의 세션 상태 동작 정의하기

        public SessionStateBehavior GetControllerSessionBehavior(RequestContext requestContext, string controllerName)
        {
            switch (controllerName)
            {
                case "Home":
                    return SessionStateBehavior.ReadOnly;
                case "Product":
                    return SessionStateBehavior.Required;
                default:
                    return SessionStateBehavior.Default;
            }
        }



※ DefaultControllerFactory를 사용하여 세션 상태 관리하기

내장된 컨트롤러 팩토리를 사용하는 경우에는 각각의 컨트롤러 클래스에 SessionState어트리뷰트를 적용하여 세션 상태를 제어할 수 있다. 목록 19-24에서 볼 수 있는 것처럼 FastController라는 이름의 새로운 컨트롤러 만들어보자. 


목록 19-24 FastController.cs 파일에서 SessionState 어트리뷰트 사용하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.SessionState;
using ControllerExtensibility.Models;
namespace ControllerExtensibility.Controllers
{
    [SessionState(SessionStateBehavior.Disabled)]
    public class FastController : Controller
    {        
        public ActionResult Index()
        {
            return View("Result",new Result { ControllerName = "Fast", ActionName = "Index" });
        }
    }
}


이 SessionState 어트리뷰트는 컨트롤러 클래스에 적용되며 컨트롤러에 존재하는 모든 액션들에 영향을 미친다. 이 어트리뷰트의 유일한 매개변수는 SessionStateBehavior 열거형 값이다. 이 예제의 경우 세션 상태를 아예사용하지 않도록 끄고 있다. 이렇게 설정한 뒤에 다음과 같이 컨트롤러 안에서 세션 값을 설정하거나 

...
Session["Message"] = "Hello";
...

뷰에서 다음과 같이 세션 상태를 읽는다면

...
Message: @Session["Message"]
...


MVC 프레임워크는 액션이 호출되거나 뷰가 렌더될 경우예외를 던질 것이다. 




※ TIP:
세션 상태가 Disable인 경우에는 HttpContext.Session도 null을 반환하게 된다. 




만일 ReadOnly 동작을 지정했다면 다른 컨트롤러에 의해서 설정된 값들을 읽어올수만 있으며 값을 변경하려고 시도하면 런타임 예외가 발생할 것이다. 마찬가지로 세션에 대한 상세 정보는 HttpContext.Session 개체를 통해서 얻을 수 있지만 어떤 값을 바꾸려고 시도하면 오류가 발생할 것이다. 



TIP:
만일 이러한 상황에서 컨트롤러에서 뷰로 데이터를 전달해야만 한다면 ViewBag 기능을 사용하는 것도 하나의 방법이다. 이는 SessionState 어트리뷰트의 영향을 받지 않으니 말이다. 





※ 비동기 컨트롤러 사용하기

ASP .NET 플랫폼은 클라이언트의 요청을 처리하기 위해서 사용되는 .NET 스레드의 풀을 관리한다. 이 풀을 작업자 스레드 풀(worker thread pool)이라고 하며 각각의 스레드들은 작업자 스레드(worker threads)라고 부른다. 요청이 전달되면 풀에서 작업자 스레드가 가져와지며 요청을 처리하기 위한 작업을 할당 받게 된다. 그리고 정상적으로 요청이 처리되고 나면 작업자 스레드는 다시 풀로 반환되어 새로운 요청을 처리하기 위해서 대기하게 된다. 이렇게 ASP .NET 응용프로그램에서 스레드 풀을 사용하는 이유는 두 가지 큰 이점이 있기 때문이다. 


* 작업자 스레드를 재사용하여 요청을 처리할 때마다 새로운 스레드를 만드는 부담을 덜 수 있다. 

* 정해진 숫자의 작업자 스레드만 사용할 수 있게 해서, 서버가 동시에 처리할 수 있는 요청의 수보다 더 많은 수의 요청을 처리하려는 상황을 피할 수 있다. 


작업자 스레드 풀은 요청이 짧은 시간내에 처리될 수 있는 경우에 최적으로 동작하기에 대부분의 MVC 응용프로그램에 적합하다. 하지만 다른 서버에 의존적인 작업이나 오랜 시간이 걸리는 작업을 액션으로 갖고 있는 경우에는 모든 작업자 스레드 가 다른 시스템이 끝나기를 목메어 기다리게 되는 상황에 직면할 수도 있다. 



Note:
이번 절은 여러분이 TPL(Task Parallel Library)에 대해서 이미 알고 있다는 가정하에 설명하고 있다. 만일 TPL에 대해서 알고 싶다면 Apress 에서 출간된 Pro .NET Parallel Programming in C#을 참고하기 바란다. 




즉 서버는 사실 더 많은 작업을 수행할 능력을 갖고 있지만 모든 작업자 스레드가 묶여있기 때문에 들어오는 요청들을 모두 큐에 쌓게 되며, 아주적은 양의 자원만을 사용하면서 마냥 기다리게 되는 것이다. 다시 말해 서버는 전반적으로 한가한 반면, 응용프로그램은 죽기 일보직전인 황당한 상태에 놓일 수 있다는 것이다. 



경고:
이 시점에서 몇몇 독자들은 자신의 응용프로그램에 적합한 작업자 스레드 풀을 직접 작성하면서 되지 않나 하고 생각할 수도 있을 것이다. 미안하지만 절대 그렇게 하지말라고 강력하게 말리고싶다. 동시성 코드를 작성하는 것 자체는 어렵지 않으나, 올바로 동작하는 동시성 코드를 작성하기란 만만한 일이 아니기 때문이다. 만약 여러분이 동시성 프로그래밍에 초보자라면 필요한 기술을 갖추지 못했기에 작성하지 않는 것이 바람직하며, 반대로 동시성 프로그래밍에 이미 경험이 있다면 코드 작성과 새로운 스레드 풀을 테스트하는데 드는 노력에 비하여 얻을 수 있는 이점이 거의 없다는 사실을 이미 알고 있을 것이기에 강력하게 만류하고 싶다. 권장사항은 그냥 기본 풀을 사용하라는 것이다. 



이 문제에 대한 해결책은 비동기 컨트롤러(Asynchronous Controller)를 사용하는 것이다. 그러면 응용프로그램의 성능이 전반적으로 향상될 것이다. 하지만 사실 비동기 동작의 실행 그 자체에 어떤 이점이 있는 것은 아니다. 




Note:
비동기 컨트롤러는 CPU 집약적인 액션이 아닌 I/O나 네트워크와 관련된 액션에 한해서만 유용하다. 비동기 컨트롤러를 사용해서 해결해야 하는 문제들은 일반적으로 처리해야 할 요청이 풀(pool)모델과 맞지 않는 것들이다. 풀 모델은 각 요청이 서버의 자원을 적절하게 나누어 사용하도록 고안되어있지만 잘못 활용하면 작업자 스레드들을 놀리게되는 결과를 얻을 수 있다. 만일 CPU 집약적인 액션에 백그라운드 스레드를 추가로 사용한다면 요청이 동시에 몰려서 들어오는 경우 서버의 자원을 매우 부족하게 만들 것이다. 




※ 예제 만들기
비동기 컨트롤러에 대해 알아보기 위해서 예제를 통해서 문제가 되는 상황을 직접 보여줄것이다. 일단 목록 19-25는 예제 프로젝트에 추가한 RemoteData라는 일반적인 동기 컨트롤러를 보여주고 있다. 


목록 19-25 RemoteDataController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ControllerExtensibility.Models;
namespace ControllerExtensibility.Controllers
{
    public class RemoteDataController : Controller
    {
        
        public ActionResult Index()
        {
            RemoteService service = new RemoteService();
            string data = service.GetRemoteData();
            return View((object)data);
        }
    }
}


이 컨트롤러는 Data라는 액션 메서드를 가지고 있는데 이 메서드는 RemoteService라는 모델 클래스의 인스턴스를 생성한 뒤, 생성된 인스턴스의 GetRemoteData 메서드를 호출하고 있다. 이 GetRemoteData 메서드는 CPU는 적게 사용하지만 많은 시간이 걸리는 작업의 사례를 가정하고 있으며 RemoteService 클래스는 Models폴더안에 있는 RemoteService.cs 클래스 파일 안에 목록 19-26에서 보이는 것과 같이 정의되어 있다. 

목록 19-26 RemoteService.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Threading;
namespace ControllerExtensibility.Models
{
    public class RemoteService
    {
        public string GetRemoteData()
        {
            Thread.Sleep(2000);
            return "Hello from the other side of the world!";
        }
    }
}


사실 GetRemoteData 메서드가 현실적이지 않다는 부분은 인정한다. 이번 예제를 위해서 GetRemoteData 메서드를 가상으로 작성한 것이기 때문이다. 실제 상황에서라면 이 메서드는 아주 느린 네트워크 연결을통해서 복잡한 데이터를 가져와야 할 것이지만 예제를 보기 편하게 하기 위해서 Thread.Sleep 메서드를 사용해서 2초 정도의 지연시간을 갖도록 작성해 보았다. 마지막으로 추가해야 할 것은 새로운 뷰다(Views/RemoteData라는 폴더를 만들고( 컨트롤러를 추가할 때 이미 같이 생성됐을 수도 있다. ) 그 안에 Data.cshtml이라는 뷰 파일을 추가하였다. 뷰의 내용은 목록 19-27과 같다. 


목록 19-27 Data.cshtml 파일의 내용

@model string
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Data</title>
</head>
<body>
    <div>
        Data: @Model
    </div>
</body>
</html>


응용프로그램을 실행하고 /RemoteData/Data라는 URL로 접근해보면 액션 메서드가 호출되어 RemoteService 개체가 생성되고 GetRemoteData 메서드가 호출될 것이다. 그리고 2초 후에(마치 실제 상황인 것처럼)GetRemoteData 메서드에서 반환된 데이터가 그림 19-11처럼 뷰로 전달되고 렌더될 것이다. 


여기서 문제는 요청을 처리하는 작업자 스레드가 2초동안 무의미하게 놀게 된다는 것이다. 이 스레드는 아무런 의미 있는 작업도 수행하지 않을 뿐만 아니라 기다리는 동안 다른 요청을 처리하는 데 사용될 수도 없다. 




경고:
비동기 컨트롤러를 사용하면 작업자 스레드를 자유롭게 만들고 다른 질의들을 수행할 수 있게 해주지만, 그렇다고 해서 사용자가 2초 동안 기다려야 하는 상황 자체마저 피하게 해줄수는 없다. 그렇기에 그러한 요청을 브라우저에서 비동기적으로 처리할수 있게 해주는 클라이언트기술도 존재한다. 예를 들면 사용자에게 데이터수신 진행상황을 알려주면서 응용프로그램 내에서 다른 작업을 계속하게 할 수 있다는 것이다. 이에 대한 내용이 궁금하다면 Pro ASP .NET MVC 5 Client 를 참고하기 바란다. 




※  비동기 컨트롤러 만들기

우리가 풀어야 할 문제점을 살펴봤으니 이제 비동기 컨트롤러를 만들어보도록 하자. 비동기 컨트롤러를 만드는 방법에는 두 가지가 있는데 하나는 IController 의 비동기용 인터페이스인 System.Web.Mvc.Async.IAsyncController 인터페이스를 구현하는 것이다. 하지만 여기에서 이 방법은 다루지 않을 것이다. 이를 작성하려면 .NET 동시성 프로그래밍 기능에 대해서 너무나 많은 설명을 해야 하기 때문이다. 



TIP:
비동기 컨트롤러에 존재하는 모든 액션들이 비동기적이어야 하는 것은 아니다. 원한다면 동기적 인 메서드도 포함시킬수 있으며 이는 예상대로(동기적으로)동작할 것이다. 


여기에서는 MVC 프레임워크에 초점을 두고 설명하고자 하기에 두 번째 방법인 일반 컨트롤러에서 새로운 async 및 await 키워드를 사용하는 방법에 대해서 살펴보고자 한다. 

.NET 프레임워크의 이전 버전에서는 비동기 컨트롤러를 작성하는 방법이 꽤나 복잡했었다. 특별한 클래스로부터 컨트롤러를 파생해야 했고 액션을 두 개의 메서드로 나누어 작성해야 했다. 이미 4장에서 살펴봤던 새로운 async 및 await 키워드는 이러한 복잡함을 간단하게 만들어준다. 목록 19-28과 같이 새로운 Task 개체를 만들고 응답을 기다리기만 하면 된다. 



TIP:
비동기 액션 메서드를 만드는 예전 방법도 여전히 지원된다. 비록 현재 설명하고 있는 방법이 훨씬 멋지고 권장되는 방법이긴 하지만 말이다. 기존 방법의 단점 중 하나는 Async로끝나는 액션 메서드(예 : IndexAsync)혹은 COmpleted로 끝나는 액션 메서드(예: IndexCompleted)를 사용할 수 없다는 것이다. 




목록 19-28 RemoteDataController.cs 파일에서 비동기 컨트롤러 만들기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using ControllerExtensibility.Models;
namespace ControllerExtensibility.Controllers
{
    public class RemoteDataController : Controller
    {

        public async Task<ActionResult> Data()
        {
            string data = await Task<string>.Factory.StartNew(() =>
            {
                return new RemoteService().GetRemoteData();
            });
            return View((object)data);
        }
    }
}


목록 19-28의 코드는 액션 메서드가 Task<ActionResult>를 반환하도록 리팩터링 되었다. 더불어 async와 await 키워드를 적용하고 있으며 GetRemoteData 메서드를 호출하는 역할을 하는 Task<string>도 생성하였다. 




※ 컨트롤러에서 비동기 메서드 사용하기

응용프로그램 내에서는 어디에서나 비동기 컨트롤러를 사용하여 비동기 메서드를 호출할 수 있다. 예를 위해서 목록 19-29와 같이 RemoteService 클래스에 비동기 메서드를 추가해보자. 


목록 19-29 RemoteService.cs 파일에 비동기 메서드 추가하기. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Threading;
using System.Threading.Tasks; //추가
namespace ControllerExtensibility.Models
{
    public class RemoteService
    {
        public string GetRemoteData()
        {
            Thread.Sleep(2000);
            return "Hello from the other side of the world!";
        }
	//추가
        public async Task<string> GetRemoteDataAsync()
        {
            return await Task<string>.Factory.StartNew(() =>
            {
                Thread.Sleep(2000);
                return "Hello from the other side of the world";
            });
        }
    }
}


GetRemoteDataAsync 메서드의 결과는 Task<string> 이며 이는 메서드가 완료되었을 때 동기 메서드와 마찬가지로 동일한 메시지를 내보낸다. 목록 19-30은 RemoteData 컨트롤러에 추가한 새로운 액션 메서드가 이러한 비동기 메서드를 호출하여 사용하는 방법을 보여주고 있다. 




목록 19-30 RemoteData 컨트롤러에서 비동기 메서드 호출하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using ControllerExtensibility.Models;
namespace ControllerExtensibility.Controllers
{
    public class RemoteDataController : Controller
    {

        public async Task<ActionResult> Data()
        {
            string data = await Task<string>.Factory.StartNew(() =>
            {
                return new RemoteService().GetRemoteData();
            });
            return View((object)data);
        }

        public async Task<ActionResult> ConsumeAsyncMethod()
        {
            string data = await new RemoteService().GetRemoteDataAsync();
            return View("Data", (object)data);
        }
    }
}


두 액션 메서드 모두 동일한 기본 패턴을 따르고 있으며 차이점이라면 Task 개체가 생성되는 위치가 다르다는 점 정도다. 각 액션메서드를 호출하게 되면 GetRemoteData 호출이 끝날때까지 작업자 스레드가 묶여있지 않게되는 결과를 얻을 수 있다.( 그러나 브라우저를 이용해서 이번 예제를 직접 테스트해본다고 하더라도 뭔가 달라진 점을 느끼기는 쉽지 않을 것이다. 여전히 2초간 응답이 지연된다는 사실 자체는 변하지 않기 때문이다. 비동기 프로그램이 향상시켜주는 성능상의 부분은 해당 스레드가 작업을 처리하는 동안 대기해야만 했었을 다른 작업을 처리할 수 있는 가능성을 더 많이 부여해주는데 있기 때문이다)

즉 스레드가 다른 요청을 처리하기 위해서 사용될 수 있으며 그 결과 MVC 프레임워크 응용프로그램의 성능이 상당히 향상될 수 있다. 



※ 요약:
이번 장에서는 MVC 프레임워크가 어떻게 컨트롤러를 만들고 메서드를 호출하는지 살펴보았다. 또한 핵심 인터페이스들의 내장 구현을 살펴보고 직접 사용자 지정 버전을 만들어서 그들이 동작하는 방식을 살펴보기도 하였다. 또한 액션 메서드 선택자가 액션메서드를 식별하기 위해서 어떻게 사용될 수 있는지 알아보았고 응용프로그램의 요청 처리 능력을 향상시키기 위해서 사용될 수 있는 특별한 유형의 컨트롤러들도 살펴봤다. 

사실 이번 장에 숨겨져 있던 내부 주제는 확장성이었다. MVC 프레임워크의 거의 모든 부분들은 완전히 변경되거나 대체될 수 있다. 대부분의 프로젝트에서는 기본 동작이면 충분하지만 MVC 프레임워크가 어떻게 서로 맞물려 돌아가는지를 알고 있다면 더욱 세련된 설계와 코딩을 하는데 도움이 될 것이다. 

다음 장에서는 뷰를 살펴볼 예정이다. 뷰가 동작하는 방법에 대해서 알아볼 것이며, 여러분이 기대하고 있는 것처럼 뷰를 구성하는 방법과 기본 동작을 사용자 지정하는 방법에 대해서도 다룰 것이다. 