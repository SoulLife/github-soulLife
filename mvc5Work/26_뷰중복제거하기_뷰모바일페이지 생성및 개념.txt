목록10-6 수평으로 배열된 버튼들을 포함하도록 _Layout.cshtml 파일 수정하기

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <link href="~/Content/ErrorStyles.css" rel="stylesheet" />
    <title>@ViewBag.Title</title>
    <style>
        .navbar-right{
            float: right !important;
            margin-right: 15px; margin-left: 15px;
        }
    </style>
</head>
<body>
    <div class="navbar navbar-inverse" role="navigation">
        <a class="navbar-brand" href="#">
            <span class="hidden-xs">SPORTS STORE</span>
            <div class="visible-xs">SPORTS</div>
            <div class="visible-xs">STORE</div>
        </a>
        @Html.Action("Summary", "Cart")
    </div>
<!-- 추가-->
    <div class="visible-xs">
        @Html.Action("Menu", "Nav", new {horizontalLayout= true})
    </div>
<!--추가끝-->
    <div class="row panel">
        <div class="col-sm-3 hidden-xs">
            @Html.Action("Menu", "Nav");
        </div>
        <div class="col-xs-12 col-sm-8">
            @RenderBody()
        </div>
    </div>
</body>
</html>

Html.Action 메서드의 선택적인 세 번째 인자는 라우팅 시스템을 위한 값들을 지정할 수 있는 개체로 15장과 16장에서 다시 자세히 살펴볼 것이다. 이 기능을 사용해서 컨트롤러가 선택해야 할 뷰를 알려주고 있다. 그림10-6에서 지금까지 변경한 내용들의 전체적인 효과를 확인할 수 있다. 

버튼들을 상품 목록의 상단으로 이동해서 상품 정보가 정상적으로 보이도록 충분한 공간을 확보한 것을 확인할 수 있다. 다른 뷰들도 계속해서 이런 방식으로 조정 작업을 수행할 수도 있겠지만 여러분 자신만의 아이디어가 있을 테니 남은 부분은 여러분에게 맡기기로 한다. 이제 반응형 CSS 클래스들의 사용 방법에 대한 간단한 데모는 뒤로하고, 이번에는 MVC 프레임워크가 강요하는(RenderBody 메서드 제약 같은)제약사항들에 대해서 살펴보고자 한다. 그리고 콘텐트를 생성하는 방식에 있어 보조적인 역할을 수행하는 몇 가지 다른 기능들에 대해서 도 알아보도록 하자(라우팅 시스템과 Html.Action 헬퍼 메서드를 이용해서 뷰에서 컨트롤러에 데이터를 전달하는 방법 등)


TIP:
이번 절은 iPhone에서 세로 방향으로 사용하는 경우만 염두에 두었지만 대부분의 모바일 기기들이 가로-세로 방향을 모두 지원한다는 사실을 잊지 말아야 한다.실제 프로젝트에서는 두 방향 모두를 수용해야 할 것이다. 



※ 뷰 중복 제거하기
이전 예제에서는 Html.Action 헬퍼 메서드를 통해서 전달한 라우팅 정보에 기반해서 컨트롤러가 뷰를 선택하는 방법을 살펴봤다. 물론 이 기법도 중요하고 유용한 기능이긴 하지만 개인적으로 실제 프로젝트에서는사용하지 않았을 방법이기도 하다. 왜냐하면 결국에는 대부분 비슷한 마크업과 Razor 표현식을 담고 있는 두 개의 뷰(Menu.cshtml, MenuHorizontal.cshtml)가 만들어지기 때문이다. 이런 결과는 유지보수 관점에서 볼 때 문제가 있는데, 카테고리 필터 버튼들을 수정해야 할 경우 항상 두 곳을 동일하게 수정해야 한다는 부담을 남기기 때문이다. 이 문제점을 해결하려면 두 개의 뷰를통합해야 하는데, 이를 위해서 Views/Nav 폴더에 FlexMenu.cshtml 라는 새로운 뷰를 목록10-7과 같이 생성한다. 

목록10-7 FlexMenu.cshtml 파일의 내용
@model IEnumerable<string>
@{
    bool horizontal = ((bool)(ViewContext.RouteData.Values["horizontalLayout"] ?? false));
    string wrapperClasses = horizontal ? "btn-group btn-group-sm btn-group-justified" : null;

}

<div class="@wrapperClasses">
    @Html.ActionLink("Home", "List", "Product", new {@class= horizontal ? "btn btn-default btn-sm": "btn btn-block btn-default btn-lg"})
    @foreach(var link in Model)
    {
        @Html.RouteLink(link, new {controller="Product", action="List", category=link, page=1},new 
                    {
                    @class = (horizontal ? "btn btn-default btn-sm": "btn btn-block btn-default btn-lg") + (link == ViewBag.SelectedCategory ? "btn-primary": "")
                    })
    }
</div>


중복을 제거하는 대가로 버튼들을 양방향으로 생성하는 더욱 복잡한 뷰가 만들어졌다. 어떤 접근 방식을 채택할지는 순전히 개인적인 취향의 문제다. 여러분이 필자와 비슷한 성향을 갖고 있고 중복을 싫어한다면 목록10-7에서 뷰에 적용할만한 몇 가지 유용한 기능들을 발견할 수 있을 것이다. 

그 첫 번째 기능은 뷰에서 라우팅 정보에 직접 접근할 수 있는 기능이다. ViewContext 속성은 요청에 대한 현재 상태 정보를 제공해주는데, 그 정보에는 다음과 같이 라우팅의 상세 정보도 포함된다. 

...
bool horizontal = ((bool) (ViewContext.RouteData.Values["horizontalLayout"] ?? false));
...

두 번째 기능은 뷰에서 지역 변수를 생성할 수 있는 기능이다. 20장에서 다시 자세하게 살펴보겠지만 이 기능은 Razor 뷰가 클래스로 컴파일되기 때문에 가능한 기능이다. 이 예제에서는 horizontal이라는 변수를 생성해서 뷰가 어떤 방향으로 사용되는지를 확인하기 위한 용도로 사용되기 때문에. 매번 라우트 데이터를 다시 확인해야 할 필요성을 없앴다. 


주의:
뷰에서 지역 변수를 남발해서는 안 된다. 지역 변수를 과도하게 사용하는 경우 자칫하면 테스트와 유지보수가 어려운 뷰를 만들게 되기 쉽상이다. 그러나 지금처럼 뷰를 통합해야 하는 상황에서는 즉 뷰를 단순화하는 비용으로 받아들일 수 있는 경우에는 뷰에서 지역 변수를 사용하는 것이 더 유리하다. 




또한 지역 변수와 연관된 기능으로 Razor는 horizontal 변수의 값에 따라 조건적으로 어트리뷰트를 설정하고 있다. 즉 class 어트리뷰트에 사용할 문자열 변수를 다음과 같이 뷰에 정의하고 있다. 

...
string wrapperClasses = horizontal ? "btn-group btn-group-sm btn-group-justified": null;
...

결과적으로 wrapperClasses 변수의 값에는 수평 레이아웃에 사용할 스타일 클래스의 이름이 할당되거나 null 값이 할당된다. 그런 다음 이 변수를 다음과 같이 class 어트리뷰트에 적용한다. 

..
<div class=@wrapperClasses">
...

만약 이 변수의 값이 null이면 Razor는 똑똑하게도 div 요소의 class 어트리뷰트 자체를 다음과 같이 완전히 제거한다

<div>

반면 변수의 값이 null이 아니라면 Razor는 값을 삽입하고 class 어트리뷰트를 정상적으로 생성해서 다음과 같이 남겨둔다. 

<div class="btn-group btn-group-sm btn-group-justified">

이는 HTML 의 의미론적 접근에 C#의 특성이 활용된 좋은 방법이다(HTML 의미론(semantics of HTML)은 HTML 마크업을 웹 페이지에 대한 표현보다는 의미를 부여하는 방향으로 사용하자는 접근법이다. 그 예로 문장을 강조하거나 인용하고자 할때 이탤릭체 마크업<i>을 사용하기보다는 강조할 때는 <em>(emphasis)요소를 인용할 때는 <cite> 요소를 사용할 것을 권고하고 있다. 즉 필자는 변수 값이 null일때 class 어트리뷰트 자체를 만들지 않는 것이 C#의 좋은 특성이며, 의미 있는 HTML을 작성하는 접근 방식과 잘 어울린다고 보는것 같다. )

또한 어트리뷰트에 null 값을 삽입하거나 비어 있는 어트리뷰트를 만들지도 않기 때문에 jQuery처럼 어떤 요소를 선택하기 위해 어트리뷰트를 사용하는 CSS 셀렉터들이나 JavaScript 라이브러리들에서 발생할수 있는 문제점을 예방하면서도 복잡한 뷰를 작성할 수 있는 대단히 유용한 기능이다. 


TIP:
뷰에서 정의한 변수뿐만 아니라 모든 유형이 변수를 사용해서도 조건적 어트리뷰트를 설정할수 있다. 따라서 모델의 속성이나 Viewbag 기능을 사용하여 어트리뷰트를 설정할 수도 있다. 



이제 통합된 뷰를 사용하기 위해 목록 10-8과 같이 Nav 컨트롤러의 Menu 액션 메서드를 수정해야 한다. 

목록10-8 NavController.cs 파일에서 Menu 액션 수정하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;

namespace SportsStore.WebUI.Controllers
{
    public class NavController : Controller
    {
        private IProductRepository repository;

        public NavController(IProductRepository repo)
        {
            repository = repo;
        }
        public PartialViewResult Menu(string category = null)
        {
            ViewBag.SelectedCategory = category;
            IEnumerable<string> categories = repository.Products.Select(x => x.Category).Distinct().OrderBy(x => x);
            
            return PartialView("FlexMenu",categories);
        }
    }
}

목록 10-8에서는 방향을 전달받는 매개변수를 제거했으며 PartialView 메서드를 호출할 때 항상 FlexMenu 뷰를 사용하도록 수정했다. 이 변경으로 인해서 레이아웃이나 반응형 디자인에 뭔가 변화가 발생하는 것은 아니지만, 중복된 뷰들을 제거할수 있게 되었다. 따라서 Visual Studio 프로젝트에서 Menu.cshtml 과 MenuHorizontal.cshtml 파일을 제거할 수 있다. 통합된 FlexMenu.cshtml 뷰가 카테고리 필더 버튼들을 모든 방향(가로와 세로)으로 생성하고 있기 때문이다. 



반영형 디자인의 한계:
반응형 디자인을 이용해서 모바일 클라이언트를 지원하는 방식은 몇 가지 문제점을 내포하고 있다. 무엇보다도 결국 많은 양의 콘텐트가 중복되고 또 무엇인가 서버로 전달되어야만(버튼의 배열 방향을 결정하는 것은 레이아웃에서 Nav 컨트롤러의 Menu 액션 메서드를 호출하면서이다. 이때 horizontalLayout값을 true로 설정하여 라우팅 값으로 전달하면 Menu 액션 메서드가 호출하는 FlexMenu 뷰까지 전달되어 버튼을 가로 방향으로 배열한다. 라우팅 값을 사용했다는 것은 결국 서버 측에 무엇인가 전달했다는 의미로 볼 수 있다)

각기 다른 시나리오에 맞게 출력될 수 있다는 점이 문제점이다. 이전 절에서 살펴봤듯이 레이아웃이 생성한 HTML에는 페이지 헤더와 카테고리 필터 버튼을 위한 HTML 요소 집합들이 중복되어 포함되어 있다. 요청을 하나씩 나눠본다면 (중복으로 인해 발생한) 이런 추가적인 HTML 요소들이 크게 부담되지는 않겠지만 빈번히 사용되는 응용프로그램에서의 전체적인 효과는 대역폭으로 인한 운영비의 급증으로 나타날 것이다. 

그리고 두 번째로 반응형 디자인은 다루기 힘든 경우가 많고 올바로 수정하기 위해서는 끝없는 테스트가 필요하다는 점도 문제다. 모든 장치들이 반응형 디자인을 가능하게 하는 CSS 기능들을(미디어 쿼리라고도 알려진)적절하게 처리하는 것은 아니기 때문에 끝없는 테스트가 되는 것이다. 그리고 전체적으로 주의를 기울이지 않는다면 모든 장치에서 적당하게 타협된 사용자 경험을 제공하는 그저 그런 응용프로그램을 만들게 될 가능성도 높다. 어느 장치 하나에서도 그 장치만의 훌륭한 특징은 살리지 못하고 전체적으로 하향 평준화시킨 결과로부터 비롯된 평범한 결과를 얻게될 뿐인 것이다. 

반응형 디자인은 신중하게 적용되었을 경우에는 매우 유용한 반면 어떤 대상의 사용자에게도 훌륭한 사용자 경험을 제공하지 못하는 타협들로 범벅된 결과를 얻기도 쉽다. 




※ 모바일 전용 콘텐트 만들기
반응형 디자인은 모든 기기에 동일한 콘텐트를 전달하고 CSS를 사용해서 콘텐트가 표현되는 방식을 조절하며 응용프로그램의 서버 측 구현과는 상관 없는 프로세스를 사용하는데 이는 여러분이 모든 기기를 하나의 기본 테마를 기본으로 변형된 형태로 다루기를 원한다고 가정하는 것이다. 대안적인 접근 방식으로 서버를 이용해서 클라이언트 브라우저의 역량을 평가한 다음, 다양한 종류의 클라이언트에 적합한 개별적인 HTML을 전달하는 방법이 있다. 예를 들어 데스크톱 브라우저에서 동작하는 응용프로그램을 태블릿에서 완벽하게 다른 측면으로 표현하고자 할 때 괜찮은 방법이다. 

TIP:
반응형 디자인과 모바일 전용 콘텐트라는 두 가지 방식 중에서 꼭 한 가지 방식만을 선택할 필요는 없다. 대부분의 프로젝트에서는 대상 기기들에 좋은 품질의 결과를 전달하기 위해서 이 두 가지 방법을 함께 사용해야 할 경우가 많을 것이다. 예를 들어 먼저 태블릿을 위한 전용 콘텐트를 만들고, 이를 기반으로 가로 및 세로 양방향을 다룰수 있도록(거의 모든 태블릿들이 지원하기 때문에)반응형 디자인을 적용하기로 결정할 수도 있다. 


MVC 프레임워크는 디스플레이 모드(display mode)라는 기능을 지원해주는데, 이 기능을 이용하면 요청을 보낸 클라이언트에 따라 각각 다른 뷰를 생성할 수 있다. 이 기능은 MVC 프레임워크가 아닌 ASP.NET 프레임워크에 의해서 제공되는 기능이다. 필자는 Pro ASP .NET MVC 5 Platform에서 디스플레이 모드를 생성하고 관리하는 방법을 상세하게 설명하고 있다. 그러나 이번 SportsStroe 예제 응용프로그램에서는 아주 간단한 디스플레이 모드만 사용하여 모바일 기기들을 종류에 상관없이 모두 동일한 장치로 취급하기로 한다. 데스크톱 장치들을 위해서 기존 콘텐트는 그대로 유지하면서도 jQuery Mobile 라이브러리를 사용해서 모바일 기기들을 위한 모바일 경험을 제공하는 것이 이번 절의 목표다. 


TIP:
이 책에서는 모바일 전용 콘텐트를 생성하기 위해서 jQuery Mobile을 활용하는 방법만 간단하게 살펴볼 뿐, 이 라이브러리 자체에 대해서는 상세하게 다루지 않는다. jQuery Mobile에 대한 보다 자세한 내용은 필자의 다른 집필서인 Apress에서 출간한 Pro jQuery 2.0을 참조하기 바란다. 


※ 모바일 레이아웃 생성하기
모바일 전용 콘텐트를 만들기 위해서 해야할 일은 .Mobile.cshtml로 끝나는 뷰와 레이아웃을 만드는 것이 전부다. 목록10-9와 같은 내용으로 _Layout.Mobile.cshtml이라는 이름의 새 레이아웃 파일을 Views/Shared 폴더에 생성한다. 


TIP:
뷰 이름에 마침표가 포함되어 있기 때문에 Shared 폴더를 마우스 오른쪽 버튼으로 클릭해서 나타나는 팝업 메뉴에서 [추가(Add)] > [MVC 5 레이아웃 페이지(Razor)(MVC 5 Layout(Razor))]을 선택해서 파일을 생성해야 한다. (레이아웃 이름으로 _Layout.Mobile을 입력하면 마침표 뒤에 위치한 Mobile이 무시되어 이미 _Layout파일이 존재한다고 오류가 발생한다. _Layout.Mobile.cshtml과 같이 전체 파일명을 입력하여 문제를 피해갈 수도 있다. )



목록10-9 _Layout.Mobile.cshtml 파일의 내용
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.css" />
    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script src="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.js"></script>
    <title>@ViewBag.Title</title>
</head>
<body>
    <div data-role="page" id="page1">
        <div data-theme="a" data-role="header" data-position="fixed">
            <h3>SportsStore</h3>
            @Html.Action("Menu", "Nav")
        </div>
        <div data-role="content" >
            <ul data-role="listview" data-dividertheme="b" data-inset="false">
                @RenderBody()
            </ul>
        </div>
    </div>
</body>
</html>


이 레이아웃 에서는 jQuery Mobile 라이브러리를 사용하고 있지만 CDN(Content delivery network)을 통해서 라이브러리를 가져오기 때문에 필요한 JavaScript와 CSS 파일들 때문에 NuGet 패키지를 설치할 필요는 없다. 


TIP:
이번 예제에서는 데스크톱 클라이언트를 위해서 작성했던 컨트롤러와 액션 메서드를 재사용하고 있기 때문에 모바일 전용 뷰를 새로 만드는 표면적인 작업만 수행하고 있다. 그러나 별도의 뷰를 사용하고 있기 때문에 아예 전혀 다른 컨트롤러를 새로 도입할 수 있고, 이 새로운 컨트롤러를 활용해서 특정 클라이언트 집합에 대해 클라이언트 유형별로 완전히 다른 특징과 기능을 제공하도록 구현할 수도 있다. 


이렇게 작업을 마치고 나면 MVC 프레임워크가 요청을 분석해서 모바일 클라이언트라는 것을 자동으로 식별하면 _Layout.Mobile.cshtml 파일을 이용해 뷰를 렌더링함으로써, 다른 클라이언트들을 위해 작성했던 _Layout.cshtml 파일을 자연스럽게 대체할 것이다. 그림 10-7에서 그 효과를 확인할 수 있다. 

레이아웃이 변경됐다는 점은 알 수 있지만 전체적인 모습은 엉망인데 이는 요청을 처리하는 모바일 버전의 메인 뷰와 카테고리 필터링 버튼들에 사용되는 부분 뷰가 새로 필요하기 때문이다. 



※ 모바일 뷰 만들기
이번에는 먼저 Views/Nav 폴더에 목록 10-10과 같은 내용을 담고 있는 FlexMenu.Mobile.cshtml 이라는 뷰를 만들어서 카테고리 필터링 버튼들에 대한 모바일 뷰를 만들어보자([ 뷰추가(Add View)] 대화 상자의 [뷰 이름(View Name)]에 마침표가 포함된이름을 입력하면 잘못된 문자라는 오류가 발생하므로, 먼저 임의의 이름으로 뷰를 생성한 다음에 다시 이름을 FlexMenu.Mobile.cshtml로 변경한다)

목록10-10 FlexMenu.Mobile.cshtml 파일의 내용
@model IEnumerable<string>
<div data-role="navbar">
    <ul>
        @foreach(var link in Model)
        {
            <li>
                @Html.RouteLink(link, new { controller = "Product", action = "List", category = link, page = 1 }, new
                {
                data_transition = "fade",
                    @class = (link == ViewBag.SelectedCategory ? "ui-btn-active" : null)
                })
            </li>
        }
    </ul>
</div>


이 뷰는 Razor의 foreach 문을 사용해서 상품 카테고리들에 대한 li 요소를 생성하는데, 이 요소들은 jQuery Mobile 이 네비게이션 바를 다루는 방식에 따라 페이지 상단에 정렬된다. 그림 10-8에서 그 결과를 확인할 수 있다. 



TIP:
jQuery Mobile은 HTML 요소의 서식을 지정하기 위해서 Data 어트리뷰트를 이용한다. Data 어트리뷰트는 이름이 data-로 시작되는 공식적으로 HTML 5 표준의 일부가 되기 전까지 수년간 사용자 지정 어트리뷰트를 정의하기 위해 사용되던 비공식적인 방법이었다. 이번 코드에서는 jQuery Mobile의 방식에 따라 li 요소에 data-transition 어트리뷰트를 추가해야 하지만 data-transition을 그대로 사용하면 C#의 표현식으로 간주되므로 익명 개체의 속성명으로는 사용할 수가 없다. 문제는 하이픈 때문에 발생하는데 data_transition처럼 속성명에 밑줄(underscore)을 대신 사용하면 Razor가 해당 요소를 생성하면서 밑줄을 하이픈으로 변환해서 data-translation와 같이 어트리뷰트명을 생성해준다. 



여전히 상품 정보 영역은 지저분하지만 이제 카테고리 버튼들은 새로운 모바일 전용 뷰에 의해서 생성되고 있다. 다음 과정으로 넘어가기 전에 잠시 MVC 프레임워크가 그림10-8에서 콘텐트를 렌더하기 위해서 수행하는 작업들을 시간을 갖고 되짚어보도록 하자. 

브라우저에서 Product 컨트롤러의 List 액션 메서드를 대상으로 하는 HTTP 요청이 전달되면 MVC 프레임워크는 List.cshtml 뷰 파일을 렌더하게 된다. 이때 MVC 프레임워크는 해당 요청이 모바일 브라우저에서 전달된 요청이라는 것을 알고 먼저 모바일 전용 뷰가 존재하는지 부터 확인한다. 그러나 모바일 뷰인 List.Mobile.cshtml 파일이 존재하지 않기 때문에 List.cshtml 뷰 파일이 대신 사용된다. 이 List 뷰는 _Layout.cshtml 파일에 의존하고 있지만 다시 MVC 프레임워크가 모바일 전용 뷰가 존재한다는 사실을 파악해서 _Layout.Mobile.cshtml 뷰를 대신 사용한다. 또한 레이아웃 내부적으로 FlexMenu.cshtml 파일을 사용하지만 이 뷰 역시 모바일 버전이 존재한다는 사실을 알고 해당 파일을 대신 사용한다. 뷰가 요청될 때마다 이런 결정이 반복해서 일어난다. 

결과적으로 브라우저의 요청에 대해 일반 뷰와 모바일 전용 뷰가 혼합된 응답을 돌려준다. MVC 프레임워크는 요청을 파악해서 그에 따라 가장 적절한 뷰가 존재한다면 해당 뷰를 우선 적으로 사용하지만 만약 특화된 뷰가 존재하지 않는다고 하더라도 역으로 일반 뷰를 찾아갈수 있다. 



이번 예제의 두 가지 문제점:
필자는 이번 장의 예제를 통해서 MVC 프레임워크가 모바일 전용 콘텐트를 처리하는 방식을 보여주고자 했다. 그러나 그로 인해서 SportsStore 응용프로그램에 더해질 두 가지 심각한 잠재적인 문제점을 같이 언급하지 않는다면 너무 무책임한 행동일 것이다. 

첫 번째로 모바일 뷰에서는 데스크톱 뷰에 비해 상대적으로 적은 기능만을 제공하고 있다. 단적인 예로 모바일 뷰에는 페이지 헤더에 카트 요약 정보가 생략되어 있다. 이번 예제에서는 변경해야 할 부분들을 단순화시키기 위해서 몇 가지 기능을 제외하고 있지만 모바일 기기의 기술적인 제약으로 인해서 해당 기능을 제공할 수 없는 경우가 아니라면 이렇게 기능을 줄여가는 것을 권하지는 않는다. 모바일 기기들은 계속 발전하고 있고 점 차 더 많은 사용자들이 모바일 브라우저를 통해서만 여러분의 응용프로그램에 접속할 것이기 때문이다. 모바일 접속이 데스크톱에서의 사용을 보완하는 수준에 불과하다고 가정하던 시절은 이미 지나갔다 

두 번째 문제점은 사용자에게 데스크톱 레이아웃으로 전환할 수 있는 방법을 제공하지 않고 있다는 것이다. 물론 모바일의 작은 화면에서 페이지를 확대하고 스크롤하는 것이 다소 어색할 수는 있겠지만 모바일 기기에서도 데스크톱 레이아웃을 선호하는 사용자들도 분명히 존재하고, 그 수를 과소평가해서도 안된다. 더군다나 어떤 모바일 기기들은 큰 모니터와 연결할 수 있는 기능도 제공해주는데, 이런 특징은 ASP .NET이 모바일 기기를 알아내는 방식으로는 거의 감지되지 않는다. 따라서 모바일 사용자에게 어떤 레이아웃을 사용할지 선택권을 주어야 한다. 

비록 이 두 가지 문제 중 어떤 것도 응용프로그램 배포를 중단할만큼 치명적인 문제는 아니지만, 모바일 웹 사용자에게는 일종의 짜증을 유발하는 부족한 기능이다. 모바일 기기는 현대 웹 응용프로그램의 큰 부분을 차지하고 있으며, 이런 중요한 카테고리의 사용자들에게 괜찮은 사용자 경험을 제공하기 위해서 필요한 모든 시전 조치를 취해야 할 필요가 있다. 




마지막 변경 작업은 상품 요약 정보를 생성하는 뷰의 모바일 전용 버전을 만드는 것이다. Views/Shared 폴더에 목록 10-11과 같은 내용으로 ProductSummary.Mobile.cshtml이 라는 새로운 뷰 파일을 생성한다. 

목록10-11 ProductSummary.Mobile.cshtml 파일의 내용
@model SportsStore.Domain.Entities.Product

<div data-role="collapsible" data-collapsed="false" data-content-theme="c">
    <h2>
        @Model.Name
    </h2>
    <div class="ui-grid-b">
        <div class="ui-block-a">
            @Model.Description
        </div>
        <div class="ui-block-b">
            <strong>(@Model.Price.ToString("c"))</strong>
        </div>
        <div class="ui-block-c">
            @using (Html.BeginForm("AddToCart", "Cart"))
            {
                @Html.HiddenFor(x => x.ProductID)
                @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
                <input type="submit" data-inline="true" data-mini="true" value="Add to cart" />
            }
        </div>
    </div>
</div>


이 뷰에서는 콘텐트의 영역을 접거나 펼치는 jQuery Mobile 위젯을 사용하고 있다. 비록 상품 정보를 표현하기 위해 가장 이상 적인 방식은 아니지만 간단하다. 게다가 이번 예제를 통해서 강조하고 싶은 부분은 jQuery Mobile 라이브러리 자체가 아니라 모바일 전용 콘텐트이므로 문제삼지 않도록 하겠다. 그림 10-9에서 새로운 뷰의 효과를 확인할 수 있다. 

물론 실제 프로젝트에서라면 당연히 페이지 링크, 쇼핑 카트, 지불 페이지를위한 모바일 버전을 생성해야하겠지만 이번 예제는 이 정도 수준에서 마무리하도록 하겠다. MVC 프레임워크를 이용해서 모바일 기기를 대상으로 개발하는 방법에 대해서 충분히 살펴봤기 때문이다. 



※ 요약
이번 장에서는 모바일 기기를 다루는 두 가지 기술, 즉 반응형 디자인과 모바일 전용 콘텐트에 대해서 살펴봤다. 반응형 디자인은 MVC 프레임워크와 직접적으로는 관계가 없다. 이 기법은 모든 브라우저에 동일한 콘텐트를 전송하고 브라우저가 알아서 처리하는 방식이다. 그러나 우리가 직접 살펴본 것처럼 뷰가 동작하는 방식에는 약간의 제약사항들이(RenderBody() 메서드를 레이아웃에서 한 번만 호출할 수 있는 것이 그 좋은 예다)
존재하므로 전체 과정을 손쉽게 만들어주는 훌륭한 Razor의 기능들과 신중한 생각이 뒷받침되어야만 한다. 

반면 모바일 전용 콘텐트를 생성하는 방식에서는 사용 가능한 모바일 전용 뷰와 레이아웃을 자동으로 적용함으로써 MVC 프레임워크가 처리 과정에 능동적으로 참여하게 된다. 사용 가능한 뷰와 레이아웃이 존재하는 경우 적절하게 혼합되어 자연스럽게 클라이언트로 HTML을 렌더하게 된다. 다음 장에서는 SportsStore 응용프로그램의 상품 카탈로그를 관리하기 위한 기본적인 기능들을 추가해볼 것이다. 