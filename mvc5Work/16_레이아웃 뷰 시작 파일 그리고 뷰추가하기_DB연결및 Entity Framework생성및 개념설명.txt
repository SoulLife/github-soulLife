※ 레이아웃 뷰 시작 파일 그리고 뷰 추가하기

이번에는 List 액션 메서드의 기본 뷰를 추가해볼 차례다. 마우스 오른쪽 버튼으로 ProductController 클래스의 List 액션 메서드를 클릭한 다음, 팝업 메뉴에서 [뷰 추가(Add View)]를 선택한다. 그리고 그림7-5와 같이 [뷰 이름(View Name)]에는 List를 입력하고 [템플릿(Template)]으로는 Empty를 [모델 클래스(Model class)]로는 Product를 선택한다. 마지막으로 [레이아웃 페이지 사용(Use a layout page)] 옵션이 선택되어 있는지 확인하고 [추가(Add)] 버튼을 클릭해서 뷰를 추가한다. 

그러면 Visual Studio가 List.cshtml 파일과 함께 _ViewStart.cshtml 파일과 Shared/_Layout.cshtml 파일까지 한꺼번에 생성해준다. 이 자동 생성 기능은 유용한 기능이기는 하지만 기본 콘텐트에 대한 Microsoft의 접근 방식은 필요 없는 템플릿 내용을 _Layout.cshtml에 만들어 놓는다. 따라서 레이아웃 파일의 내용을 목록 7-8과 같이 수정한다. 

목록7-8 _Layout.cshtml 파일 편집하기
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
</head>
<body>
    <div>
        @RenderBody()
    </div>
</body>
</html>


※ 뷰 데이터 렌더링하기
뷰를 생성하면서 뷰의 모델 형식으로 Product 클래스를 지정하기는 했지만 실제로 뷰에서 사용하고자 하는 형식은 Product 컨트롤러가 리파지토리에서 가져와 뷰로 전달해주는 IEnumerable<Product> 형식이다. 따라서 목록7-9에서 볼 수 있는 것처럼 @model 구문을 수정하고 상품의 상세 정보를 출력하기 위한 약간의 HTML과 Razor 구문을 추가한다. 

목록7-9 List.cshtml 파일 수정하기
@using SportsStore.Domain.Entities;
@model IEnumerable<Product>

@{
    ViewBag.Title = "Products";
}
@foreach (var p in Model)
{
    <div>
        <h3>@p.Name</h3>
        @p.Description
        <h4>@p.Price.ToString("c")</h4>
    </div>
}


페이지의 제목도 변경한다. 그리고 뷰 데이터를 출력하기 위한 foreach 반복문에서 Razor의 @: 구문을 사용할 필요가 없다는 점도 주목하기 바란다. 코드의 모든 행이 Razor 지시자(@)로 시작하거나 HTML 요소로 시작하고 있기 때문이다. 


TIP:
List.cshtml 파일의 코드에서는 Price 속성을 ToString("c")메서드를 사용해서 문자열로 변환하고 있다. 이 메서드는 숫자 값을 서버의 문화권(culture)설정에 따라 통화(currency)형식의 문자열로 렌더해준다. 예를 들어 서버의 설정이 en-US(영어-미국)이라면 (1002.3).ToString("c")메서드는 $1,002.30을 반환할 것이고 설정이 en-GB(영어-영국)이라면 같은 메서드이지만 원화1,002.30을 반환할 것이다. Web.config파일의 <system.web>노드에 <globalization culture="en-GB" uiCulture="en-GB" /> 같은 설정을 추가해서 문화권을 변경할 수 있다. 



※ 기본 라우트 설정하기
이번 SportsStore 예제 응용프로그램에서는 MVC 프레임워크에게 응용프로그램의 루트 주소(http://mysite/)로 들어오는 요청을 ProductController 클래스의 List 액션 메서드로 전달하라고 알려줘야 한다. 목록7-10 에서 볼 수 있는 것처럼 App_Start/RouteConfig.cs 파일의 RegisterRoutes 메서드를 편집해서 기본 라우트를 설정한다. 

목록7-10 RouteConfig.cs 파일에 기본 라우트 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace SportsStore.WebUI
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Product", action = "List", id = UrlParameter.Optional } //수정된부분
            );
        }
    }
}


목록 7-10 에 변경해야 할 부분들을 굵은 글씨로 강조했다. 이 변경은 기본 주소에 대한 요청을 Product 컨트롤러의 List 액션 메서드로 전달하는 역할을 한다. 이번 장에서는 ASP .NET 라우팅 기능에 관해서는 이 정도로만 알아두고 15장과 16장에서 다시 자세히 다루기로 한다. 

TIP:
목록7-10 에서 컨트롤러의 값을 지정할 때, ProductController라는 클래스 이름 전체가 아닌 Product라고만 지정하고 있다는 점에 주의하자. 이는 ASP.NET MVC의 명명규칙의 일부로, 컨트롤러 클래스의 이름은 항상 Controller로 끝나기 때문에 컨트롤러 클래스에 접근할 때 클래스 이름에서 Controller 부분은 생략한다. 


※ 응용프로그램 실행해보기
이제 기본적인 부분들이 모두 갖춰졌다. 기본 주소가 요청됐을 때 MVC 프레임워크가 호출할 컨트롤러와 액션에 대한 구성도 지정했다. 이 액션 메서드는 간단한 테스트 데이터를 생성해주는 (리파지토리 인터페이스에 대한)Mock 구현에 의지한다. 컨트롤러는 테스트 데이터를 액션의 기본 뷰에 전달해주고 뷰는 각 상품의 상세 정보를 간단한 목록 형태로 출력한다. 응용프로그램을 실행해보면 그림7-6과 같은 결과를 확인할 수 있을 것이다. 만약 이 그림과 같은 결과가 나타나지 않는다면 루트 주소(URL)를 올바르게 요청하고 있는지 확인해보도록 하자(즉 다른 액션을 호출하고 있는 것은 아닌지 확인한다)


지금까지 살펴본 과정들이 바로 ASP .NET MVC 프레임워크를 이용한 개발의 전형적인 패턴이다. 기본적인 부분들을 설정하기 위해서 초기에 시간 투자가 필요한 것은 사실이다. 하지만 지금부터 응용프로그램에 필요한 기능을 추가할 때 보다 쉽고 빠르게 기능을 구현할 수 있을 것이다. 


※보다 간편한 디버깅:
[디버그(Debug)] 메뉴를 이용해서 프로젝트를 실행하면 Visual Studio 가 새 브라우저 창을 띄우고 응용프로그램을 보여준다. 대부분 이 과정은 몇 초 정도 걸리는 데 보다 빠르게 작업을 수행할 수 있는 몇 가지 방법이 있다. 

먼저 클래스를 수정하지 않고 뷰 파일만 수정한다면 디버깅 중에도 얼마든지 Visual Studio를 이용해서 수정이 가능하다. 그런 다음, 수정한 내용을 확인하려면 단지 브라우저 창을 새로 고침하기만 하면 된다. 그러면 ASP .NET이 뷰를 다시 컴파일해서 클래스로 만들고 변경된 내용을 바로 보여줄 것이다. 그러나 Visual Studio는 디버깅 중에 클래스 파일을 수정할 수 있게 허용해주지 않는다. 또한 솔루션 탐색기에서 프로젝트에 대한 변경도 할 수 없기 때문에. 이 방법은 HTML을 조금씩 변경하면서 마무리 작업을 하는 등의 경우에만 유용하게 사용할 수 있다. 

그리고 14장에서 살펴보겠지만 Visual Studio 2013은 브라우저 연결(Browser Link)이라는 새로운 기능을 통해서 개발자가 도구 모음에서 여러 개의 브라우저를 한 번에 열거나 새로 고침할 수 있는 기능들을 제공해준다. 

마지막으로 독립적인 브라우저 창에서 응용프로그램을 유지하는 방법이 있다. 디버깅을 한 번이라도 했었다는 전제하에 작업표시줄에 위치한 IIS Express 아이콘을 마우스 오른쪽 버튼으로 클릭해서 응용프로그램에 해당하는 URL을 선택하면 된다. 수정을 완료한 후에 Visual Studio에서 F6키를 누르거나 [빌드(Build)] > [솔루션 빌드(Build Solution)]를 선택해서 솔루션을 컴파일하고 브라우저 창으로 가서 웹페이지를 새로 고침하면 된다. 




※ 데이터베이스 준비하기
이미 상품의 상세 정보가 담긴 간단한 뷰를 출력하고는 있지만, 이 데이터는 IProductRepository 인터페이스의 Mock 구현이 반환해주는 테스트 데이터일 뿐이다. 본격적으로 실제 리파지토리를 구현하려면 먼저 데이터베이스를 설정하고 약간의 데이터를 채워줘야 한다. 

이번 예제에서는 데이터베이스로는 SQL Server를 사용하고, Microsoft의 .NET ORM 프레임워크인 Entity Framework(EF)를 사용해서 이 데이터베이스에 접근해볼 것이다. ORM  프레임워크는 관계형 데이터베이스의 테이블 및 행과 열을 일반적인 C# 개체들을 통해서 표현한다. 이미 6장에서 언급했던 바와 같이 LINQ 를 사용해서 다양한 형식의 데이터 소스를 처리할수 있는데, Entity Framework도 그런 데이터 소스 중 한 가지다. 잠시 후에 얼마나 간단하게 작업을 처리할 수 있는지 직접 보게 될 것이다. 


NOTE:
이 단계에서는 여러 가지 다양한 도구 및 기술들 중에서 여러분에게 적합한 도구와 기술을 선택할 수 있다. 다양한 관계형 데이터베이스들이 존재할 뿐만 아니라, 개체 저장소(object repositories)나 문서 저장소(document stores)또는 일부 개발자들만 선호하는 대체 도구와 기술을 선택할 수도 있다. .NET ORM 프레임워크에도 역시 다양한 대안들이 존재한다 물론 각각의 기술들은 약간씩 다른 접근법을 취하는데 그런 차이점들을 살펴보면 아마도 여러분의 프로젝트에 적합한 도구를 어렵지 않게 찾을 수 있을 것이다. 



이 책에서는 몇 가지 이유로 Entity Framework 를 사용하려고 한다. 우선 간단하고 구동이 쉽다. 게다가 필자는 LINQ를 선호하는 편인데, Entity Framework와도 정말 통합이 잘된다. Entity Framework 의 초기 릴리즈는 다소 신뢰하기가 어려웠지만 최신 버전은 기능면에서도 우아하고 풍부하다. 



※ 데이터베이스 생성하기
Visual Studio와 SQL Server의 멋진 기능 중 하나는 바로 LocalDB 기능이다. 이 기능은 특별히 개발자를 위해서 설계되었는데, 관리 기능을 제거하고 SQL Server의 핵심 기능만 구현하고 있다. LocalDB를 사용하면 프로젝트를 구성하는 과정에서 데이터베이스 설정을 건너뛸 수 있고 배포 시점이 되면 SQL Server의 완전한 인스턴스로 배포할 수도 있다. 대부분의 MVC 응용프로그램은 전문 관리자가 운영하는 호스팅 환경에 배포된다. 따라서 LocalDB 기능을 사용함으로써 데이터베이스 설정은 DBA의 손에 맡겨두고 개발자는 코딩에만 전념할 수 있다. 이 LocalDB기능은 Visual Studio Express 2013 for Web과 함께 자동으로 설치되는데, 직접 다운 로드하는걸 선호한다면 www.microsoft.com/sqlserver에서 다운로드할 수도 있다. 

가장 먼저 해야 할 일은 Visual Studio 에서 데이터베이스를 생성하는 것이다. [보기(View)] 메뉴에서 [서버 탐색기(Server Explorer)]창을 열고 [데이터베이스에 연결(Connect to Database)]버튼을 클릭한다. 이 버튼은 녹색의 더하기 기호가 있는 전원 케이블 모양이다. 

그러면 [데이터 소스 선택(Choose Data Source)] 대화 상자가 열리는데 그림 7-7과 같이 Microsoft SQL Server 옵션을 선택하고 [계속(Continue)]버튼을 클릭한다. (Visual Studio는 사용자가 선택한 데이터 소스를 기억해둔다. 만약 이전에 다른 프로젝트에서 데이터베이스를 생성했다면 이 대화 상자는 나타나지 않을 것이다. )

그런 다음 [연결 추가(Add Connection)] 대화 상자에서 [서버 이름(server name)]을 (localdb)\MSSQLLocalDB으로 지정한다(Visual studio2015이후바뀜). 이 특별한 서버 이름을 지정함으로써 LocalDB 기능을 사용하고자 한다는 개발자의 의도를 알려줄수 있다. 그림 7-8과 같이 [Windows 인증 사용(Windows Authentication)]옵션을 선택하고 데이터베이스 이름을 SportsStore라고 입력한다. 


TIP:
[데이터 소스 선택(Choose Data Source)] 대화 상자가 나타나지 않는다면 [연결 추가(Add Connection)] 창의 우측 상단에 있는 [변경(Change)]버튼을 클릭해서 직접 대화 상자를 열 수도 있다. 


이제 [확인(OK)] 버튼을 누르면 Visual Studio가 새 데이터베이스를 만들 것인지를 물어본다. 그러면 [예(Yes)]버튼을 클릭해서 작업을 계속 진행한다. 잠시 후 서버 탐색기 창의 [데이터연결(Data Connections)] 영역에 새로운 항목이 나타날 것이다. 이 항목을 클릭해서 확장해보면 그림7-9과 같은 데이터베이스의 여러 가지 요소들을 볼 수 있는데, 아마 데이터베이스 연결 이름은 이 그림과 약간 차이가 날 것이다. 그 이유는 로컬 컴퓨터의 이름이 데이터베이스 연결 이름에 포함되기 때문이다(가령 필자의 컴퓨터 이름은 tiny다)


※ 데이터베이스 스키마 정의하기
이번 장의 도입부에서 설명했듯이 SportsStore 응용프로그램의 초점은 MVC 프레임워크의 개발 공정을 집중적으로 살펴보는 데 맞춰져있다. 따라서 응용프로그램이 의존하는 다른 컴포넌트들은 최대한 단순하게 유지하려고 한다. 데이터베이스 설계라던가 Entity Framework에 관한 주제들에 대해서는 상세하게 살펴보지 않는다. 이런 내용들은 응용프로그램에 필요한 데이터 입출력을 살펴보는 수준을 훨씬 넘어서기 때문이다. 이 주제들은 그 자체가 하나의 책으로 다 루어질 만큼 분량이 상당하기도 하거니와 ASP .NET이나 MVC 프레임워크의 일부가 아니기 때문에 여기서는 다루지 않는다. 

따라서 이번 예제에서는 이 점을 염두에 두고 하나의 테이블만 포함하고 있는 데이터베이스를 사용할 것이다. 이번 예제의 목적은 실제 전자상거래 사이트가 데이터를 구조화하는 방법을 알아보는 것이 아니다. 중요한 것은 리파지토리 패턴과 그 패턴을 이용해서 데이터를 저장하고 조회하는 방법을 살펴보는 것이다. 


Visual Studio는 새 테이블을 손쉽게 추가할수 있도록 디자인 창을 제공해준다. 물론 보기 편한 디자인 영역을 사용해서 새 테이블을 생성할수도 있지만 보다 정확하고, 간결한 방법으로 테이블의 상세 내용을 기술할 수 있는 T-SQL 영역을 사용해보도록 하자. 목록7-11과 같이 SQL을 입력한 다음 테이블 디자인 창의 좌측 상단에 위치한 [새테이블(Add New Table)] 버튼을 클릭한다. 

서버탐색기 > 데이터연결 > 트리창 열면 테이블이 있고 거기에서 마우스우측 > 새테이블클릭

목록7-11 SportsStore 데이터베이스에 테이블을 생성하는 SQL 구문
CREATE TABLE Products
(
	[ProductID] INT NOT NULL PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(100) NOT NULL,
	[Description] NVARCHAR(500) NOT NULL,
	[Category] NVARCHAR(50) NOT NULL,
	[Price] DECIMAL(16, 2) NOT NULL
)

이 구문은 Products라는 테이블을 생성해주는데, 이 테이블은 이번 장의 앞 부분에서 Product 모델 클래스에 정의했던 각종 속성들에 대한 칼럼들을 포함하고 있다. 

TIP:
ProductID 칼럼에 IDENTITY 속성을 지정한 것은 SQL Server에게 테이블에 데이터를 추가할때 유일한 기본 키 값을 자동으로 생성하도록 지시하기 위한 것이다. 웹 응용프로그램에서는 다수의 사용자들이 동시에 접근하기 때문에 데이터베이스를 사용할 때 유일한 기본 키를 생성하는 작업이 어려울 수도 있다. 이 기능을 사용함으로써 SQL Server에게 유일한 키 값을 스스로 관리하게 하여 쉽고 편하게 새 행을 추가할 수 있다. 


상단현재선택된창아래에[업데이트(Update)] 버튼을 클릭하면 Visual Studio가 그림7-11과 같이 SQL 구문이 어떤 영향을 미칠지에 대한 내용을 요약해서 보여준다. 


다시 대화 상자의 [데이터베이스 업데이트(Update Database)] 버튼을 클릭하면 입력한 SQL 구문이 실행되고 데이터베이스에 Products 테이블이 생성된다. 서버 탐색기 창에서 [새로 고침(Refresh)] 버튼을 클릭해보면 업데이트된 결과를 확인할 수 있다. [테이블(Tables)] 영역에서 Products 테이블을 볼 수도 있고 각 칼럼에 대한 상세 정보를 확인할 수도 있다. 


TIP:
데이터베이스를 업데이트한 뒤에는 dbo.Products 디자인 창은 닫아도 된다. Visual Studio는 데이터베이스 생성에 쓰였던 SQL 스크립트를 저장할 수 있는 기회를 제공해준다. 물론이번 장에서 사용하고 있는 스크립트를 따로 저장할 필요는 없지만 만약 실제 프로젝트에서 여러 개의 데이터베이스를 구성할 필요가 있다면 이 기능이 매우 유용할 것이다. 



※ 데이터베이스에 데이터 추가하기
이제 테이블을 생성했으므로 11장에서 카탈로그 관리 기능을 추가하여 입력이 가능해지기 전까지 작업에 사용할 약간의 데이터를 수동으로 추가해 보자. 

[서버 탐색기(Server Explorer)]창에서 SportsStore 데이터베이스의 [테이블(Tables)] 항목을 확장한 다음 Products 테이블을 마우스 오른쪽 버튼으로 클릭하고 [테이블 데이터 표시(Show Table Data)]를 선택한다. 그리고 그림7-12와 같이 데이터를 입력한다. 탭 키를 이용해서 행간을 이동할 수도 있고, 행의 마지막 칼럼에서 탭을 누르면 그 행은 업데이트되고 새 행을 입력할 수 있도록 다음 행으로 이동하게 된다. 


NOTE:
데이터를 입력할 때 ProductID 칼럼은 빈 칸으로 남겨둬야 한다. 이 칼럼은 IDENTITY 칼럼이므로 탭을 눌러서 다음 행으로 이동하는 순간 SQL Server가 유일한 키 값을 생성해서 입력해준다. 


그림만으로는 임시 데이터의 상세 내용을 정확하게 확인하지 못할 것을 대비해서 표7-3에 상품의 상세 정보를 정리했다. 전혀 다른 내용을 입력해도 상관은 없다. 그럴 경우 SportsStore 응용프로그램의 나머지 부분들을 구현해 나가면서 책의 예시와 다른 결과를 보게 될 뿐이다. 

표7-3 Products 테이블의 데이터

Name				Description							Category		Price
Kayak				A boat for one person					Watersports		275.00
Lifejacket			Protective and fashionable				Watersports		48.95
Soccer Ball			FIFA-approved size and weight				Soccer		19.50
Stadium			Flat-packed, 35,000-seat stadium			Soccer		79,500.00
Thinking Cap		Improve your brain efficiency by 75%			Chess			16.00
Unsteady Chair		Secretly give your opponent a disadvantage		Chess			29.95
Human Chess Board	A fun game for the family				Chess			75.00
Bling-Bling King		Gold-plated, diamond-studded King			Chess			1,200.00


※ Entity Framework 컨텍스트 생성하기
Entity Framework의 최신 버전들은 Code-First라는 훌륭한 기능을 제공해준다. 모델에서 클래스를 정의하면 그 클래스들로부터 데이터베이스를 생성한다는 것이 그 기본적인 개념이다. 

이 기능은 신규 프로젝트에는 매우 유용하지만 사실 이런 프로젝트는 흔하지 않다. 그 대신 이번 예제에서는 모델 클래스와 기존 데이터베이스를 연결하는 Code-First의 변형된 기법을 보여주고자 한다. Visual Studio의 [도구(Tools)] > [라이브러리 패키지 관리자(Library Package Manager)] > [패키지 관리자 콘솔(Package Manager Console)] 을 선택해서 NuGet 명령어 창을 열고 다음의 명령어들을 입력한다. 

Install-Package EntityFramework -projectname SportsStore.Domain
Install-Package EntityFramework -projectname SportsStore.WebUI


TIP:
이 명령어를 실행하면[ 패키지 관리자 콘솔(Package Manager Console)]에서 바인딩 리디렉션(binding redirects)을 생성할 수없다는 오류가 발생할 수도 있다. 이 경고는 무시해도 좋다.(실제 오류 메시지는 다음과 같다 : 'SportsStore.[프로젝트명]에 대한 바인딩 리디렉션을 생성하지 못했습니다. 동일한 키를 사용하는 항목이 이미 추가되었습니다. )


이 NuGet 명령어들은 솔루션에 Entity Framework 패키지를 추가해준다. Domain 프로젝트와 WebUI 프로젝트에서 데이터베이스에 접근할 수 있는 클래스를 생성하기 위해서 동일한 패키지를 Domain 프로젝트와 WebUI 프로젝트에 설치해야 한다. 

다음 단계는 모델과데이터베이스를 연결할 컨텍스트 클래스를 생성하는 것이다. SportsStore.Domain 프로젝트에 Concrete라는 새 폴더를 추가하고, 이 폴더에 EFDbContext.cs라는 클래스 파일을 추가한다. 그리고 이 클래스 파일의 내용을 목록 7-12와 같이 수정한다. 

목록7-12 EFDbContext.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SportsStore.Domain.Entities;
using System.Data.Entity;
namespace SportsStore.Domain.Concrete
{
    class EFDbContext :DbContext
    {
        public DbSet<Product> Products { get; set; }
    }
}


Entity Framework의 Code-First 기능의 이점을 활용하려면 System.Data.Entity.DbContext를 상속받는 클래스를 생성해야 한다. 그런 다음 작업에 사용하고자 하는 데이터베이스의 테이블들을 클래스의 속성으로 정의한다. 

이때 속성의 이름은 작업할 테이블을 의미하고 DbSet의 형식 매개변수는 Entity Framework가 행을 표현하기 위해서 사용해야 할 모델을 지정한다. 이 코드의 경우 속성의 이름은 Products이고 형식 매개변수는 Product다. 결과적으로 이는 Products 테이블에서 행을 표현하는데 Entity Framework가 Product라는 모델 형식을 사용해야 함을 의미한다. 

다음으로 SportsStore.WebUI 프로젝트의 Web.config 파일에 데이터베이스 연결 문자열을 추가해서 Entity Framework가 데이터베이스를 찾을수 있도록 정보를 알려준다. 목록7-13과 같이 데이터베이스 연결 문자열의 이름은 컨텍스트 클래스와 같은 이름으로 지정해야 한다. 

목록7-13 Web.config 파일에 데이터베이스 연결 추가하기
<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  https://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
	
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
  </appSettings>
  <system.web>
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" />
  </system.web>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.7.0" newVersion="5.2.7.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:default /nowarn:1659;1699;1701" />
      <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:default /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" />
    </compilers>
  </system.codedom>
  <entityFramework>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>

	<connectionStrings><!-- 추가된곳-->
		<add name="EFDbContext" connectionString="Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=SportsStore;Integrated Security=True;" providerName="System.Data.SqlClient" />
	</connectionStrings>
</configuration>




TIP:
이 작업을 수행할 때 프로젝트가 바뀐 것에 주의하기 바란다. 즉 모델과 리파지토리 로직은 SportsStore.Domain 프로젝트에 정의했지만 데이터베이스 연결 정보는 SportsStore.WebUI프로젝트의 Web.config 파일에 지정하고 있다. 

주의:
목록 7-13에서는 페이지의 너비 때문에 connectionString 속성의 값을 여러줄에 나눠서 입력했지만 실제 Web.config 파일에서는 모두 한 줄에 입력해야 한다. 


Web.config 파일의 connectionString 영역에 이미 다른 add 항목이 존재할 수도 있다. Visual Studio가 기본으로 생성해주는 요소인데 그냥 무시하거나 Web.config 파일에서 삭제해도 된다. 