CHAPTER13장 : 배포
응용프로그램의 개발 과정에 있어서 결정적인 마지막 단계는 여러분의 응용프로그램을 세상에 알려서 사용할 수 있도록 만드는 배포 과정이다. 이번 장에서는 SportsStore 응용프로그램을 준비하고 배포하는 방법에 관하여 살펴볼 것이다. 

MVC 프레임워크 응용프로그램을 배포할 수 있는 방법에는 여러 가지 다양한 방식들이 존재할 뿐만 아니라 배포할 수 있는 대상 자체도 광범위하다. 직접 로컬 네트워크에서 운영 및 관리가 가능한 Internet Information Services(IIS)가 실행 중인 Windows 서버 머신에 배포할 수도 있고 여러분을 대신해서 서버들을 관리해 주는 원격 호스팅 서비스에 배포할 수도 있다. 또는 최근 증가 추세에 있는 클라우드 기반의 플랫폼에 배포할 수도 있는데, 이런 클라우드 플랫폼은 호스팅 환경을 제공할 뿐만 아니라 응용프로그램에 대한 수요에 유연하게 대응할 수 있도록 서비스 확장까지도 지원해준다. 

필자는 이번 장에서 어떻게 해야 여러분에게 유용한 배포 예제를 소개할 수 있을지 오랫동안 어렵게 고민했다. 일단 IIS에 직접 배포하는 방식은 배제시켰는데, 서버를 구성하는 과정이 길고 복잡할 뿐만 아니라 대부분의 MVC 프레임워크 개발자들은 로컬 서버를 구성하여 개발에 사용하고 배포하는 작업은 IT 운영 그룹에 의존하기 때문이다. 그리고 호스팅 업체의 서비스에 배포하는 방식도 배제시켰는데, 그 이유는 각 회사들이 자신들만의 고유한 배포 과정을 갖고 있는 데다가 그 어떤 회사도 자사의 배포 과정을 호스팅에 대한 표준이라고 주장할수는 없기 때문이다. 

그래서 다소 기본적이기는 하지만 Microsoft의 클라우드 플랫폼이면서 MVC 응용프로그램을 잘 지원해주는 Windows Azure에 배포하는 방식을 살펴보기로 최종 결정했다. 개인적으로 Azure의 동작 방식을 선호하는 편이지만 Azure가 모든 배포 시나리오에 적합하다고 제안하려는 것은 아니다. 이번 장에서 Azure를 사용한 배포 과정을 보여주는 것은 다른 방식을 선택해서 IIS나 Windows 구성 문제에 얽매여서 옴짝달싹 못하게 되는 것보다는 좋은 선택이라고 판단했기 때문이다. 필자가 이 글을 작성하고 있는 현재 Azure 90일 무료 체험이 가능하므로 (MSDN 구독자는 Azure 사용을 활성화하는 것만으로도 Azure를 사용할 수 있다)(번역이 진행 중인 2014년 9월 현재, 1개월 무료 평가판을 등록할수 있는 것을 확인했다)
응용 프로그램을 Azure에 호스트할 의도가 없더라도 이번 장의 예제를 따라 해볼 수는 있을 것이다. 

주의:
실제 응용프로그램을 운영 환경에 배포하기 전에 먼저 테스트 응용프로그램과 테스트 서버를 이용해서 배포 연습을 수행해볼 것을 추천한다. 소프트웨어 개발 수명주기의 다른 모든 단계들과 마찬가지로 배포 과정 또한 테스트를 수행함으로써 많은 이점들을 얻을 수 있다. 필자는 운영 환경을 망쳐버린 프로젝트팀들에 대한 끔찍한 이야기들을 많이 알고 있는데, 대부분 배포 과정을 지나치게 성급하게 추진하거나 적절히 테스트하지 않아서 끔찍한 결과를 초래한 경우들이다. 다시 말해 ASP .NET의 배포 기능이 특별히 위험하다는 것이 아니라(전혀 위험하지 않다) 실제 사용자 데이터를 기반으로 운영되는 응용프로그램을 대상으로 수행되는 모든 상호 작용은 신중한 고려와 철저한 계획이 필요하다는 것이다. 



웹 응용프로그램 배포는 지루하고 오류가 발생하기 쉬운 작업이지만, Microsoft는 Visual Studio의 배포 도구를 개선하기 위해서 많은 노력들을 기울여왔다. 그 결과 다양한 종류의인프라를 대상으로 배포를 수행해야 하는 경우에도 Visual Studio가 여러분을 대신해서 많은 어려운 일들을 처리해준다는 것을 알게 될 것이다. 



※ Windows Azure 준비하기
Azure를 사용하려면 먼저 www.windowsazure.com에서 계정을 생성해야 한다. Microsoft는 이 책을 집필하고 있는 현재 무료 체험 계정을 지원하고 있으며 MSDN 패키지에도 Azure 서비스들이 포함되어 있다. 정상적으로 계정을 생성한 뒤에는 http://manage.windowsazure.com에 로그인해서 Azure 서비스들을 관리할 수 있다. 포털에 로그인을 하고 나면 그림13-1과 비슷한 요약 뷰를 보게 될 것이다. (WindowsAzure 서비스는 2014년 현재 가장 활발하게 기능 추가와 개선이 이루어지고 있는 Microsoft의 제품들 중 하나다. 따라서 직접 Azure 서비스를 사용해보면 이 책의 그림과 다른 부분들을 종종 발견하게 될 수도 있다)



※ 웹 사이트 및 데이터베이스 만들기
먼저 Azure가 제공해주는 두 가지 클라우드 서비스인 웹사이트와 데이터베이스 서비스부터 새로 만들어보자. 포털 창의 화면 좌측 하단에 위치한 큼지막한 더하기 기호를 클릭한 다음, [계산(Compute)] > [웹 사이트(Web Site)] > [사용자 지정 만들기(Custom Create)]를 선택 하면 그림13-2와 같은 사용자 입력 폼이 나타날 것이다. (번역 시점에 확인한 화면에서 [지역(REGION)] 필드는 [웹 호스팅 계획(WB HOSTING PLAN)] 필드로 변경되었다)

우선 응용프로그램에 사용할 URL을 선택해야 하는데 무료 Azure 서비스에서는 도메인명이 azurewebsites.net으로 제한되어 있다. 이 책에서는 mvc5sportsstore라고 이름을 붙였지만 각각의 Azure 웹사이트는 고유한 이름을 필요로 하기 때문에 여러분은 각자 다른 이름을 선택해야만 할 것이다. 

응용프로그램을 배포할 [웹 호스팅 계획(WEB HOSTING PLAN)] 을 선택하고 [데이터베이스(DATABASE)] 필드에서 [새 SQL 데이터베이스 만들기(Create a new SQL database)] 옵션을 선택하도록 한다(Azure에서는 MySQL도 사용할 수 있지만 SportsStore 응용프로그램이 MySQL을 사용하도록 구성되어 있지 않으므로 SQL Server 데이터베이스를 선택한다)

[DB 연결 문자열 이름(DB CONNECT STRING NAME)] 필드는 EFDbContext로 설정한다. 이는 SportsStore 응용프로그램이 Web.config 파일에서 데이터베이스 연결을 찾는데 사용하는 이름으로 Azure 서비스에서도 같은 이름을 그대로 사용함으로써 응용프로그램의 코드를 수정하지 않고 배포 환경에서 코드가 동작하도록 만든다. 

폼 입력을 마치고 화살표를 클릭해서 계속 진행하면 그림 13-3과 같은 폼이 나타난다. 
Specify database settings

Name
mvc5sportsstore_db

SERVER
New SQL database server

SERVER LOGIN NAME
sportsstore

SERVER LOGIN PASSWORD	CONFIRM PASSWORD
원하는 비번입력			비번 같은걸로 

REGION
East US


계속해서 데이터베이스 이름을 설정한다. 여기에서는 mvc5sportsstore_db라는 이름을 지정해서 데이터베이스가 어떤 응용프로그램과 연관되어 있는지를 명확하게 나타냈다 [서버(SERVER)] 필드에서 [새 SQL 데이터베이스 서버(New SQL database server)] 옵션을 선택하고 로그인 이름과 비밀번호를 입력한다. 

필자는 sportsstore라는 로그인 이름을 지정하고 폼의 가이드에 따라 대소문자와 숫자를 섞어서 비밀번호를 지정했다. 여기에 지정한 로그인 이름과 비밀번호는 다음 절에서도 필요하기 때문에 따로 적어놓도록 한다. 마지막으로 체크 표시 버튼을 클릭하여 설정 과정을 완료한다. 그러면 Azure가 새로운 웹 사이트와 데이터베이스 서비스를 생성하는데, 작업이 완료될 때까지 몇 분 정도 걸릴 수 있다. 모든 설정이 완료되면 다시 개요 화면으로 돌아오게 되고 그림13-4와 같이 웹 사이트와 SQL 데이터베이스 카테고리에 각각 한 개씩 항목이 구성된 것을 확인할 수 있다. 


※ 원격 관리를 위한 데이터베이스 준비하기
다음 단계는 Azure 데이터베이스를 구성해서 7장에서 사용했던 것과 동일한 스키마와 데이터를 갖도록 만드는 작업이다. Azure 요약 화면에서 SQL 데이터베이스 링크를 클릭한 다음, SQL  데이터 베이스 목록에서 이전 절에서 생성한 데이터베이스 항목을 클릭한다(이 책의 예제를 그대로 따라했다면 데이터베이스가 mvc5sportsstore_db 라는 이름을 갖고 있을 것이다)

그러면 포탈 사이트가 데이터베이스의 상세 정보와 이를 구성하고 관리하기 위한 다양한 옵션들을 보여줄 것이다 [SQL 데이터베이스 디자인(Design Your Database)] 영역에 위치한 [이 IP 주소에 대한 Windows Azure 방화벽 규칙 설정(Set up Windows Azure firewall rules for this address)] 링크를 클릭하면 여러분의 IP 주소(작업 컴퓨터의 IP 주소)가 방화벽 규칙에 포함되어 있지 않다는 메시지를 보게 될 것이다. 그림13-5와 같이 [예(YES)]버튼을 클릭한다. 


주의:
Visual Studio는 응용프로그램과 함께 데이터베이스까지 배포할수 있는 기능도 지원해준다. 그러나 이렇게 간단히 메뉴를 선택하는 것으로 너무나도 쉽게 실제 응용프로그램의 데이터를 삭제할 수 있기 때문에 추천하지 않는다. 데이터베이스는 항상 응용프로그램과 별도로 갱신해야 하고, 또 갱신하기 전에 철저하게 테스트할 것을 권장한다. 



※ 스키마 생성하기
다음 단계는 데이터베이스에 스키마를 생성하는 것이다 [데이터베이스에 연결(Connect to your Database)] 영역에서 [SQL 데이터베이스 디자인(Design your SQL database)]을 클릭한다. 그리고 데이터베이스를 생성하면서 정의했던 데이터베이스 이름(mvc5sportsstore_db), 사용자명(sportsstore) 비밀번호를 입력한 다음 그림13-6과 같이 [로그온 (Log On)] 버튼을 클릭한다. 

TIP:
데이터베이스 관리는 Silverlight를 필요로 하기 때문에 작업을 계속 진행하려면 먼저 브라우저에 Silverlight를 설치해야 할 수도 있다. 


새롭게 열린 창의 상단을 살펴보면 [새 쿼리(New Query)] 버튼이 보일 것이다. 이 버튼을 클릭하면 텍스트 영역이 SQL 명령어를 입력할 수 있는 상태로 변경된다. 필요한 데이터베이스 테이블을 생성하기 위해서 여기에 SQL 명령어를 입력할 것이다. 

SQL DATABASE

SERVER
un4hiowryj.database.windows.net

DATABASE
mvc5sportsstore_db

USERNAME
sportsstore

PASSWORD
원하는비번입력


※ 스키마 명령어 가져오기
Visual Studio에서 필요한 SQL 구문을 가져오려면 [서버 탐색기(Server Explorer)] 창을 열고 개발중인 SportsStore 응용프로그램의 Products 테이블을 찾을 때까지 항목들을 확장한다. Products 테이블을 마우스 오른쪽 버튼으로 클릭한 다음 [테이블 정의 열기(Open Table Definition)]를 선택하면 테이블 스키마용 편집기가 열리는데 T-SQL 탭에서 목록13-1과 같은 SQL 구문을 확인할 수 있을 것이다. 

목록13-1 Products 테이블을 생성하기 위한 SQL 문장
CREATE TABLE [dbo].[Products] (
    [ProductID]     INT             IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (100)  NOT NULL,
    [Description]   NVARCHAR (500)  NOT NULL,
    [Category]      NVARCHAR (50)   NOT NULL,
    [Price]         DECIMAL (16, 2) NOT NULL,
    [ImageData]     VARBINARY (MAX) NULL,
    [ImageMimeType] VARCHAR (50)    NULL,
    PRIMARY KEY CLUSTERED ([ProductID] ASC)
);

Visual Studio에서 이 SQL 구문을 복사한 다음 브라우저에 위치한 텍스트 영역에 붙여넣고, 브라우저 창의 상단에 있는 [실행(Run)] 버튼을 클릭한다. 그러면 잠시 후 명령이 완료되었습니다(Command(s) completed successfully)라는 메시지가 나타나는데, 이 메시지는 Azure 데이터베이스가 SportsStore 응용프로그램에서 정의했던 스키마와 동일한 Products 데이터베이스를 갖게 되었다는 것을 의미한다. 


※ 테이블 데이터 추가하기
이제 테이블이 생성되었으므로 7장에서 사용했던 상품 데이터를 테이블에 채울 수 있다. 다시 서버 탐색기 창에서 Products 항목을 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [테이블 데이터 표시(Show Table Data)]를 선택한다. 그러면 열린 테이블 데이터 창의 상단에서 그림13-7과 같은[ 스크립트(Script)] 버튼을 확인할 수 있을 것이다. 

이 스크립트 버튼을 클릭하면 목록13-2에서 볼 수 있는 것과 같은 SQL 문장을 포함하는 새창이 열린다. 

목록13-2 상품 테이블에 데이터를 추가하기 위한 SQL 문장
SET IDENTITY_INSERT [dbo].[Products] ON
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (1, N'Kayak', N'A boat for one person', N'Watersports', CAST(275.00 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (2, N'Lifejacket', N'Protective and fashionable', N'Watersports', CAST(48.95 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (3, N'Soccer Ball', N'FIFA-approved size and weight', N'Soccer', CAST(19.50 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (4, N'Stadium', N'Flat-packed, 35,000-seat stadium', N'Soccer', CAST(79500.00 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (5, N'Thinking Cap', N'Improve your brain efficiency by 75%', N'Chess', CAST(16.00 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (6, N'Unsteady Chair', N'Secretly give your opponent a disadvantage', N'Chess', CAST(29.95 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (7, N'Human Chess Board', N'A fun game for the family', N'Chess', CAST(75.00 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (8, N'Bling-Bling King', N'Gold-plated, diamond-studded King', N'Chess', CAST(1200.00 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (9, N'Snorkel', N'Breathe underwater', N'Watersports', CAST(10.50 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
INSERT INTO [dbo].[Products] ([ProductID], [Name], [Description], [Category], [Price], [ImageData], [ImageMimeType]) VALUES (11, N'iu', N'ㅇㅇ', N'연예인', CAST(1000000.00 AS Decimal(16, 2)), <SQLVARIANT>, NULL)
SET IDENTITY_INSERT [dbo].[Products] OFF

Azure 브라우저 창의 텍스트 영역을 깨끗이 지운 다음, 이 목록에 표시된 SQL 구문을 복사해서 붙여 넣는다. 그리고 다시 [실행(Run)] 버튼을 클릭하면 스크립트가 실행되고 테이블에 데이터가 추가된다. 


※ 응용프로그램 배포하기
이제 설정은 완료했고 남은 일은 응용프로그램 배포인데, 이는 아주 간단하다. Azure 포탈의 메인 화면으로 돌아가서 [웹 사이트(Web Sites)] 버튼을 클릭한다. 그리고 mvc5sportsstore 웹사이트를 클릭하여 대시보드 페이지를 열고 오른쪽의 링크 영역에서 [게시 프로필 다운로드(Download the publish profile)] 링크를 클릭한다. 그러면 다운로드가 시작되는데, 파일을 기억하기 쉬운 위치에 저장한다. 

필자의 경우에는 mvc5sportsstore.azurewebsites.net.PublishSettings라는 이름의 파일을 바탕화면 폴더에 저장했다. 이 파일에는 Visual Studio 가 응용프로그램을 Azure 환경에 게시하기 위해 필요한 상세 정보들이 담겨있다. 

이제 Visual Studio로 돌아 가서 솔루션 탐색기에서 SportsStore.WebUI 프로젝트를 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [게시(Publish)]를 선택한다. 그러면 그림13-8과 같이 [웹 게시(Publish Web)] 대화 상자 창이 나타날 것이다.(이 대화 상자 역시 설치된 Visual Studio 의 업데이트 버전에 따라 다소 다른 화면이 나타날 것이다. 2014년 8월 현재 업데이트 3까지 릴리즈된 상태다. )

[가져오기(Import)] 버튼을 클릭한 다음 Azure 포탈에서 다운로드한 파일의 위치를 지정한다. 그러면 Visual Studio가 파일을 처리하고 그림13-9와 같이 Azure 서비스 구성에 대한 상세한 내용들을 보여줄 것이다. 다만 여러분의 상세 내용은 이 그림과 조금 다를텐데 웹 사이트를 만들면서 선택했던 이름이 반영되었기 때문이다. 

자동으로 출력된 내용의 어떤 값도 변경할 필요가 없다. [다음(Next)] 버튼을 클릭해서 배포과정의 다음 단계로 이동하면 그림13-10과 같은 페이지가 나타난다. 

이번 단계에서는 배포에 사용될 응용프로그램의 구성(configuration)옵션을 선택할 수 있다. 대부분 Release가 될 텐데 Azure 환경에서 응용프로그램을 테스트하려고 한다거나 컴파일 러와 응용프로그램 번들에 대한 디버그 설정을 원한다면 Debug 를 선택할 수도 있다. 

이 페이지에서 수행할 수 있는 또 다른 설정은 데이터베이스 연결 구성이다. Visual Studio는 프로젝트에 정의된 데이터베이스 연결들과 Azure 웹 사이트에 연결된 데이터베이스들을 매핑할 수 있는 기회를 제공해준다. 그러나 SportsStore 응용프로그램의 Web.config파일에는 오직 한 세트의 연결 정보만 포함되어 있고 Azure 데이터베이스도 하나만 생성했기 때문에 드롭다운 리스트에는 선택할 수 있는 항목이 한 가지 밖에 존재하지 않는다. 만약 응용프로그램에서 다수의 데이터베이스를 사용하고 있다면 올바른 Azure 데이터베이스를 선택하도록 유의해야 한다. 

다시[다음(Next)] 버튼을 클릭하면 그림 13-11과 같이 배포 결과를 미리 확인해볼 수 있는 [미리 보기(Preview)] 페이지로 이동한다. [미리 보기 시작(Start Preview)] 버튼을 클릭하면 Visual Studio가 배포 과정을 파일 단위로 자세하게 보여주는데 이 단계에서 실제로 파일들이 서버로 전송되는 것은 아니다. 만약 이미 배포된 응용프로그램을 다시 배포하는 작업을 수행 하는 중이라면 이 기능을 통해서 여러분이원하는 파일들만 교체되는지 유용하게 확인할수 있을 것이다. 

지금은 응용프로그램을 처음 배포하는 것이기 때문에 그림13-12에서 볼 수 있는 것처럼 프로젝트의 모든 파일들이 미리보기 창에 나타날 것이다. 각각의 파일 이름들 앞에 체크 박스가 존재한다는 점에 주목하자. 이체크 박스를 이용해서 각각의 파일들을 개별적으로 배포되지 않도록 조정할 수도 있지만 이 작업은 주의해서 처리해야만 한다. 필자는 이런 면에서 꽤 보수적이어서 배포해야 할 파일을 잊고 누락하는 것보다는 차라리 모든 파일을 배포하고 마는 편이다. 

마지막으로 [게시(Publish)] 버튼을 클릭하면 Azure 플랫폼에 응용프로그램이 배포된다. [웹 게시(Publish Web)] 대화상자 창이 닫히고 그림 13-13과 같이 Visual Studio의 [출력(output)] 창을 통해서 배포가 진행되는 상세한 내용들을 볼 수 있을 것이다. 

응용프로그램을 배포하는 작업이 몇 분 가량 걸릴 수도 있지만, 이 과정만 끝나면 모든 배포 과정이 완료된 것이다. 작업이 완료되고 나면 Visual Studio가 Azure 웹 사이트의 URL에 접속 하는 브라우저 창을 자동으로 열어준다. 필자의 경우 이 URL은 그림 13-14에서 볼 수 있는 것처럼 http://mvc5sportsstore.azurewebsites.net이다. 



※ 요약
이번 장에서는 MVC 프레임워크 응용프로그램을 Windows Azure 플랫폼에 배포하는 과정을 살펴봤다. 응용프로그램을 배포할 수 있는 다양한 방법들과 다양한 플랫폼들이 존재하지만, 이번 장에서 살펴본 과정은 여러분이 Azure를 사용하지 않더라도 한 번쯤은 살펴볼 만한 대표적인 방법이다. 그리고 이 배포 과정에 관한 설명이 SportsStore 응용프로그램과 이 책, 전반부의 끝이다. 이어지는 후반부에서는 보다 상세한 내용들을 파고들기 시작해서 예제를 만들면서 사용했던 기능들이 동작하는 방식을 더 깊은 수준에서 살펴볼 것이다. 