※ 어트리뷰트로 영역 생성하기
컨트롤러 클래스에 RouteArea 어트리뷰트를 적용해서 영역을 생성할 수도 있다. 목록16-30은 Customer 컨트롤러의 액션 메서드들에 Service라는 새로운 영역을 할당하는 방법을 보여주고 있다. 

목록16-30 CustomerController.cs 파일에서 어트리뷰트를 이용해서 영역 생성하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    [RouteArea("Services")] //추가
    [RoutePrefix("Users")]
    public class CustomerController : Controller
    {
        [Route("~/Test")]
        public ActionResult Index()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "Index";
            return View("ActionName");
        }

        [Route("Add/{user}/{id:int}",Name = "AddRoute")]
        public string Create(string user, int id)
        {
            return string.Format("User: {0}, ID: {1}", user, id);
        }

        [Route("Add/{user}/{password:alpha:length(6)}")]
        public string ChangePass(string user, string password)
        {
            return string.Format("ChangePass Method - User: {0}, Pass: {1}", user, password);
        }

        public ActionResult List()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "List";
            return View("ActionName");
        }
    }
}


이 RouteArea 어트리뷰트는 Route 어트리뷰트로 정의된 모든 라우트들을 지정된 영역으로 이동시킨다. 목록 16-30에서는 이 어트리뷰트와 RoutePrefix 어트리뷰트가 동시에 적용됐으므로 예를 들어서 Create 액션 메서드에 접근하기 위해서는 다음과 같은 URL 을 만들어야 한다. 

http://localhost:34855/Services/Users/Add/Adam/100

그러나 RouteArea 어트리뷰트는 Route 어트리뷰트를 이용해서 정의되었으므로 ~/로 시작하는 라우트에는 아무런 영향을 미치지 않는다. 결과적으로 Index 액션 메서드에 접근하려면 계속 다음 URL을 사용해야 한다는 의미다. 

http://localhost:34855/Test/

마지막으로 RouteArea 어트리뷰트는 Route 어트리뷰트가 정의되어 있지 않은 액션 메서드에는 아무런 영향도 주지 않는다. 따라서 List 액션 메서드에 대한 라우팅은 어트리뷰트 기반 라우팅이 아닌 RouteConfig.cs 파일에 의해서 결정된다. 



※ 영역 내부의 액션에 대한 링크 생성하기

현재의 요청과 동일한 MVC 영역에 존재하는 액션을 참조하는 링크를 만들기 위해서는 별다른 작업이 필요하지 않다 . MVC 프레임워크가 자동으로 해당 요청이 어떤 영역과 관련되어 있는지를 감지해서 나가는 URL을 생성할 때도 동일한 영역에 정의된 라우트들 중에서 매치되는 라우트를 찾아서 사용한다. 가령 다음과 같이 Admin 영역에 위치한 뷰에 Html.ActionLink 헬퍼 메서드를 호출하는 코드를 추가했다면

...
@Html.ActionLink("Click me", "About")
...


다음과 같은 HTML이 생성된다

<a href="/Admin/Home/About">Click me</a>

그러나 다른 영역에 존재하는 액션이나 아예 영역에 포함되어 있지 않은 액션에 대한 링크를 만들기 위해서는 다음과 같이 반드시 익명 개체에 area라는 속성을 만들어서 원하는 영역의 이름을 지정해야 한다. 

...
@Html.ActionLink("Click me to go to another area", "Index", new { area = "Support" })
...

바로 이것이 area라는 이름의 세그먼트 변수를 사용할 수 없는 이유다(15장에서 설명했던 내용을 다시 떠올려보면 controller, action, area라는 이름은 미리 예약되어 있기 때문에 세그먼트 변수로는 사용할 수 없다)

이 호출을 통해서 생성된 HTML은 다음과 같다(단 적절한 라우트가 정의되어 있는 Support라는 영역을 생성했다고 가정한다)

<a href="/Support/Home">Click me to go to another area</a>

반면 최상위 수준의 컨트롤러들 중 하나에 정의된 액션에 대한 링크를 만들려면 다음과 같이 빈 문자열을 사용하여 영역을 지정하면 된다. 

...
@Html.ActionLink("Click me to go to another area", "Index", new { area = ""})
...



※ 디스크 파일에 대한 요청 라우트하기

MVC 응용프로그램에 대한 모든 요청들이 컨트롤러와 액션만을 대상으로 하는 것은 아니다. 대부분의 응용프로그램들에서는 이미지, 정적 HTML 파일, JavaScript 라이브러리 등과 같은 콘텐트를 전달할 방법이 필요하다. 관련된 내용들을 살펴보기 위해서 Content 폴더를 생성하고 [HTML 페이지(HTML Page)] 템플릿을 사용하여 StaticContent.html 이라는 파일을 추가했다. 목록16-31은 이 HTML 파일의 내용을 보여주고 있다. 

목록 16-31 StaticContent.html 파일의 내용

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Static HTML Content</title>
</head>
<body>
    This is the static html file (~/Content/StaticContent.html)
</body>
</html>

라우팅 시스템은 이런 콘텐트를 제공해주기 위한 통합된 지원을 제공해준다. 그림16-9에서 볼 수 있는 것처럼 응용프로그램을 시작한 다음 /Content/StaticContent.html URL로 요청을 보내면 브라우저에 이 간단한 HTML 파일의 내용이 표시될 것이다. 

기본적으로 라우팅 시스템은 응용프로그램의 라우트들을 평가하기 전에 URL이 디스크상에 존재하는 파일과 매치되는지를 먼저 검사한다. 이것이 그림16-9와 같은 결과를 얻기 위해서 별도로 라우트를 추가할 필요가 없었던 이유다. 

만약 요청된 URL과 디스크상의 파일이 매치될 경우 디스크의 파일이 그대로 전달되며 응용프로그램에 정의된 라우트는 전혀 사용되지 않는다. 그러나 목록16-32에서 볼 수 있는 것처럼 RouteCollection의 RouteExistingFiles 속성을 true로 설정하여 반대로 디스크상에 파일이 존재하는지 검사하기 전에 라우트를 먼저 평가하도록 지정할 수도 있다. 

목록16-32 RouteConfig.cs 파일에서 파일 검사 전에 라우트를 먼저 평가하도록 설정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
using UrlsAndRoutes.Infrastructure;
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {

            routes.RouteExistingFiles = true; //추가

            routes.MapMvcAttributeRoutes();

            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.Add(new Route("SayHello", new CustomRouteHandler()));

            routes.Add(new LegacyRoute("~/articles/Windows_3.1_Overview.html", "~/old/.NET_1.0_Class_Library"));

            routes.MapRoute("MyRoute", "{controller}/{action}",null, new[] { "UrlsAndRoutes.Controllers" });

            routes.MapRoute("MyOtherRoute", "App/{action}", new { controller = "Home" }, new[] { "UrlsAndRoutes.Controllers" });
            
        
        }
    }
}


이 구문은 라우트를 정의한 이후에 설정하더라도 정상적으로 동작하기는 하지만 코드의 가독성을 위해서 RegisterRoutes 메서드에서 가급적 위쪽에 작성하는 것이 규약이다. 


※ 응용프로그램 서버 구성하기

Visual Studio 는 MVC 응용프로그램 프로젝트를 위한 응용프로그램 서버로는 IIS Express를 사용한다. 따라서 RegisterRoutes 메서드에서 RouteExistingFiles 속성을 true로 설정해야 할 뿐만 아니라 디스크 파일에 대한 요청이 MVC 라우팅 시스템으로 전달되기 전에 IIS Express가 가로채지 않도록 추가로 구성해야 한다. 

우선 IIS Express를 시작한다. 가장 쉬운 방법은 Visual Studio를 이용해서 MVC 응용프로그램을 시작하는 것이다. 그러면 IIS Express 아이콘이 작업 표시줄에 나타난다. 이 아이콘을 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [모든 응용프로그램 표시(Show All Application)] 메뉴를 선택한다. 그리고 그림16-10에서 볼 수 있는 것처럼 IIS 구성 정보에 표시되는 항목들 중에서 [사이트 이름(Site Name)] 칼럼이 UrlsAndRoutes 인 항목을 클릭한다. 

창의 하단 부에 위치한[구성 (Config)] 링크를 클릭해서 Visual Studio의 IIS Express 구성 파일을 연다. 그런 다음 컨트롤 + F 키를 눌러서 UrlRoutingModule-4.0 모듈을 찾는다. 구성 파일의 modules 섹션에서 항목을 찾을 수 있을 텐데 다음 처럼 빈 문자열을 값을 갖는 preCondition 속성을 추가한다. 

....
<aa name="UrlRoutingModule-4.0" type="System.Web.Routing.UrlRoutingModule" preCondition="" />
...


이제 Visual Studio에서 응용프로그램을 다시 시작해서, 수정된 내용을 적용하고 /Content/StaticContent.html 로 이동해보자. 그러면 그림 16-11과 같이 파일 내용 대신 오류 메시지를 보게 될 것이다. 이 오류는 HTML 파일에 대한 요청이 MVC 라우트 시스템으로 전달되었지만 이 URL과 매치되는 라우트는 요청을 Content 컨트롤러로 보내고 이 컨트롤러는 존재하지 않기 때문에 발생한다. 



※ 디스크 파일을 위한 라우트 정의

일단 속성을 true로 설정한 뒤에는 목록16-33에서 볼 수 있는 것처럼 디스크 파일에 대응하는 URL과 매치되는 라우트를 정의하면 된다. 

목록16-33 RouteConfig.cs 파일에서 디스크 파일에 대응하는 URL 패턴이 지정된 라우트 정의하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
using UrlsAndRoutes.Infrastructure;
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {

            routes.RouteExistingFiles = true;

            routes.MapMvcAttributeRoutes();

            routes.MapRoute("DiskFile", "Content/StaticContent.html", new { controller = "Customer", action = "List" }); //추가

            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.Add(new Route("SayHello", new CustomRouteHandler()));

            routes.Add(new LegacyRoute("~/articles/Windows_3.1_Overview.html", "~/old/.NET_1.0_Class_Library"));

            routes.MapRoute("MyRoute", "{controller}/{action}",null, new[] { "UrlsAndRoutes.Controllers" });

            routes.MapRoute("MyOtherRoute", "App/{action}", new { controller = "Home" }, new[] { "UrlsAndRoutes.Controllers" });
            
        
        }
    }
}


이 라우트는 Content/StaticContent.html 이라는 URL에 대한 요청을 Customer 컨트롤러의 List 액션과 매핑한다. 응용프로그램을 실행하고 /Content/StaticContent.html URL로 다시 이동해보면 그림 16-12처럼 URL 매핑이 동작하는 모습을 확인할 수 있다. 


TIP:
브라우저가 이전 응답을 캐시하고 있을 수도 있다. 특히 14장에서 설명했던 브라우저 링크 기능을 사용하고 있다면 더욱 그럴 수 있다. 만약 그렇다면 웹 페이지를 다시 로드해서 이 그림처럼 응답이 표시되는지확인해야 한다 


디스크 파일에 대한 요청을 라우팅할 때는 주의해야 할 필요가 있다. 왜냐하면 많은 URL 패턴들이 특히 이런 형태의 URL과 쉽게 매치되기 때문이다. 예를 들어 이전 절에서 살펴봤던 것처럼 /Content/StaticContent.html에 대한 요청은 {controller}/{action}과 같은 URL 패턴에도 매치될 것이다. 따라서 주의하지 않으면 매우 이상한 결과가 나오거나 성능이 저하될 수도 있다. 그러므로 이 기능은 가급적 최후의 수단으로만 사용해야 한다. 


※ 라우팅 시스템 우회하기

이전 절에서 살펴봤던 RouteExistingFiles 속성을 설정하면 라우팅 시스템이 더욱 개방적으로 동작하게 된다. 일반적으로 라우팅 시스템을 우회하던 요청들까지도 이제는 응용프로그램에 정의된 라우트에 대해서 평가되는 것이다. 

이 기능과는 정반대로 라우팅시스템을 더 폐쇄적으로 만들어서 URL이 라우트에 대해서 평가되지 않게 만들 수도 있다. 목록16-34에서 볼 수 있는 것처럼 RouteCollection 클래스의 IgnoreRoute 메서드를 통해서 이 기능을 구현할 수 있다. 

목록16-34 RouteConfig.cs 파일에서 IgnoreRoute 메서드 사용하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
using UrlsAndRoutes.Infrastructure;
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {

            routes.RouteExistingFiles = true;

            routes.MapMvcAttributeRoutes();

            routes.IgnoreRoute("Content/{filename}.html"); //추가

            routes.MapRoute("DiskFile", "Content/StaticContent.html", new { controller = "Customer", action = "List" });

            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.Add(new Route("SayHello", new CustomRouteHandler()));

            routes.Add(new LegacyRoute("~/articles/Windows_3.1_Overview.html", "~/old/.NET_1.0_Class_Library"));

            routes.MapRoute("MyRoute", "{controller}/{action}",null, new[] { "UrlsAndRoutes.Controllers" });

            routes.MapRoute("MyOtherRoute", "App/{action}", new { controller = "Home" }, new[] { "UrlsAndRoutes.Controllers" });
            
        
        }
    }
}


이때 다양한 URL들과 매치되도록 {filename}과 같은 세그먼트 변수들을 사용할 수 있다. 이 번 예제의 URL 패턴은 첫 번째 세그먼트가 Content이고 두 번째 세그먼트가 .html 이라는 확장자를 갖고 있는 두 개의 세그먼트로 구성된 모든 URL들과 매치될 것이다. 

이 IgnoreRoute 메서드는 RouteCollection에 MvcRouteHandler 대신 StopRoutingHandler 클래스의 인스턴스를 라우트 처리기로 사용하는 항목을 생성하는데 아예 라우팅 시스템에 내부적으로 이 처리기를 사용하도록 하드코딩되어 있다. 일반적인 라우트가 매치됐을 때처럼, IgnoreRoute 메서드에 매치되는 URL 패턴이 전달되면 다음 라우트들은 평가되지 않는다. 그러므로 IgnoreRoute 메서드를 호출할 때는 그 위치가 대단히 중요하다. 응용프로그램을 실행하고 /Content/StaticContent.html URL로 다시 이동해보면 URL과 매칭되는 다른 모든 라우트보다 StopRoutingHandler 개체가 가장먼저 처리하게 되므로 HTML 파일의 내용을 볼 수 있을 것이다. 


※ URL 스키마 모범 사례

지금까지 다양한 기능들을 살펴봤지만 여전히 URL 스키마를 어디에서부터 어떻게 설계해야 할지 막막할 수도 있다. 그냥 Visual Studio가 만들어준 기본 스키마를 그대로 사용할 수도 있겠지만 자체적으로 정의한 스키마가 주는 장점들을 감안해본다면 고려해 볼만한 가치는 충분하다. 최근 몇 년간 응용프로그램의 URL 설계는 나날이 중요해지고 있으며 몇 가지 중요한 설계 원칙들이 부각되고 있다. 만약 이런 설계 패턴들을 준수한다면 응용프로그램의 사용성과 호환성을 개선할 수 있고 검색 엔진의 결과에서도 상위에 노출될 수 있을 것이다. 


※ 깔끔하고 사용자 친화적인 URL 만들기

무엇보다도 사용자가 응용프로그램의 URL을 이해할수 있어야 한다. 이 말에 동의하지 않는 다면, 지난 번에 누군가에게 아마존의 URL을 보내려고 했었을 때를 떠올려보자. 가령 다음은 이 책의 이전 판에 대한 URL 이다. 

http://www.amazon.com/Pro-ASP-NET-MVC-Professional-Apress/dp/1430242361/ref=la_B001IU0SNK+1_5?ie=UTF8&qid=1349978167&sr=1-5

전자 우편으로이런 URL을 누군가에 보내는 일도 별로 달갑지 않지만 심지어 휴대폰에서 이 URL을 읽어야 한다면 어떨까? 실제로 최근에 이런 일을 겪었었는데 결국 ISBN(도서번호)번호를 불러주고 상다방에게 직접 찾아보도록 부탁할수 밖에 없었다. 만약 다음과 같은 URL을 사용해서 책을 찾을수 있었다면 더 좋았을 것이다. 

http://www.amazon.com/books/pro-aspnet-mvc-framework

이런 형식의 URL 이었다면 휴대폰에서 쉽게 읽을 수도 있고. 전자 우편 메시지를 작성하는 동안 오타없이 쉽게 작성할 수도 있을 것이다. 


Note:
분명히 말해두지만 필다는 다른 모든 곳을 합한 것보다 더 많이 필자의 책을 판매해주는 아마존에 최고의 경의를 표한다. 아마존팀의 모든 구성원들이 지적이며 멋진 사람들이라는 점도 잘 알고 있다. 아마존의 URL 형식을 비판했다는 아주 사소한 일로 필자의 책을 판매하지 않는다거나 하는 옹졸한 행동을 할 사람은 없을 것이다. 필자는 아마존을 사랑한다. 아마존을 흠모한다. 단지 URL 형식을 바꾸기를 바랄 뿐이다 


다음은 사용자 친화적인 URL을 만들기 위한 가이드라인 이다. 

* 응용프로그램의 구현 상세 정보가 아닌 내용을 설명하도록 URL을 설계한다 가령 /Website_v2/CachedContentServer/FromCache/AnnualReport같은 URL 보다는 /Articles/AnnualReport같은 URL을 사용한다. 

* ID번호보다는 콘텐트의 제목을 사용하는 편이 좋다. 즉 /Articles/2392같은 URL보다는 /Articles/AnnualReport같은 URL을 사용하자. 반드시 ID번호를 사용해야 한다면(동일한 제목을 갖고 있는 항목들을 구분해야 한다거나 제목으로 데이터베이스를 질의해서 다시 해당 항목을 찾아야 하는 경우를 피하기 위해서) ID번호와 제목을 모두 사용하는 것이 좋다(/Articles/2392/AnnualReport) 입력해야 할 내용은 조금 더 길었지만 사용자들이 인식하기도 쉽고 검색엔진의 순위를 개선해주는 효과도 있다. 응용프로그램에서는 제목은 그냥 무시해버리고 ID와 매치되는 항목을 표시하면 된다. 

* HTML 페이지들에 대한 확장자는(.aspx 또는 .mvc등)사용하지 말자 그러나 특별한 형식의 파일들에 대한 확장자는(.jpg, .pdf, .zip등)사용하는 것이 좋다. MIME 형식만 적절하게 설정됐다면 웹 브라우저는 파일명의 확장자를 크게 신경쓰지 않지만 사람들은 여전히 PDF 파일은 .pdf라는 확장자를 갖고 있을 것으로 기대할 것이다. 

* 이해할수 있는 계층 구조를(예:Products/Menuswear/Shirts/Red)사용해서 방문자가 상위 카테고리의 URL을 예측할 수 있도록 한다. 

* 대소문자를 구분하지 않는다(인쇄된 페이지를 보고 URL을 입력할 수도 있다) ASP .NET 라우팅 시스템은 기본적으로 대소문자를 구분하지 않는다. 

* 기호 코드 문자 시퀀스는 사용하지 않는다. 단어를 구분하기 위해서 구분자를 사용해야 한다면 대시를 사용하자(/my-great-article), 밑줄(_)은 어색하고 URL 인코딩된 공백 문자는 이상하게 보이며(/my+great+article)꼴도 보기 싫어진다(/my%20great%20article)

* URL을 변경하지말자. 깨져버린 링크는 곧 사업적 손실을 뜻한다. URL을 변경할 경우 301리디렉션을 통해서 가능한 오랫동안 기존의 URL 스키마를 지원해야 한다. 

* 일관성이 있어야 한다. 응용프로그램 전체에서 한 가지 URL 형식만 사용해야 한다. 


URL은 짧고 입력하기 쉬우며, 사용자가 편집하기 쉬워야 한다. 또한 지속적으로 유지돼야 하며, 사이트 구조를 반영해야 한다. 사용성 전문가인 Jakob Nielsen은 http://www.useit.com/alertbox/990321.html 에서 이 주제에 관해서 더 상세하게 기술하고 있다. 웹의 창시자인 TimBerners-Lee도 이와 비슷한 충고를 하고 있다(http://www.w3.org/Provider/Style/URI 참고)


※ GET과 POST : 올바른 방식을 선택해야 한다. 

경험적으로 GET 요청은 모든 읽기 전용 정보를 조회하는데 사용해야 하는 반면 POST 요청은 응용프로그램의 상태를 변경하는 모든 작업에 사용해야 한다. 표준 준수의 관점에서 본다면 GET 요청은(정보 조회 이외에 부작용이 없는) 안전한 상호작용을 위한 것이며 POST 요청은 (결정을 내리거나 무언가에 대한 변경을 수행하는)안전하지 않은 상호작용을 위한것이다. 이와 같은 규약은 World Wide Web Consortium(W3C)에 의해서 http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html에 정의되어 있다. 

GET 요청은 접근이 가능해야 한다. 모든 정보들이 URL 자체에 포함되므로 이 주소를 즐겨찾기에 등록하거나 링크로 만들수 있다. 

반면 상태를 변경하는 작업에는 GET 요청을 사용하면 안된다. 수많은 웹 개발자들이 2005년 Google 의 웹 가속기가 처음 공개됐을 때 쓰라린 경험을 통해서 깨닫게 되었다. 이 응용프로그램은 각 페이지에 연결된 모든 내용들을 미리 가져오는데 GET 요청은 안전해야 하므로 원론적으로 이 기능은 HTTP에서 전혀 문제가 없는 작업이다. 그러나 불행하게도 수많은 개발자들이 HTTP 규약을 무시하고 항목 삭제나 쇼핑 카트 추가 같은 간단한 링크를 응용프로그램에 넣어 두었다. 혼란은 계속됐다. 

심지어 어떤 회사는 그들의 콘텐트 관리 시스템이 반복되는 적대적 공격의 대상이 됐다고 믿고 있었는데 모든 콘텐트가 계속해서 삭제되었기 때문이다. 결국 원인이 발견됐는데 그 이유는 검색 엔진 크롤러가 관리자 페이지의 URL을 찾아내서 모든 삭제 링크들을 수집하고 있었기 때문이다. 인증이 이런 문제를 방어해줄 수도 있겠지만 웹 가속기로부터는 보호해주지 못할 것이다. 



※ 요약
이번 장에서는 MVC 프레임워크 라우팅 시스템의 고급 기능들에 대해서 살펴봤다. 나가는 링크 및 URL을 만드는 방법과 라우팅 시스템을 사용자 지정하는 방법에 대해서도 살펴봤다. 이런 다양한 기능들을 살펴보고 영역에 대한 개념에 대해서도 알아봤으며 효율적이며 의미 있는 URL 스키마를 만들기 위한 필자의 개인적인 관점에 대해서 설명했다. 다음 장에서는 MVC 프레임워크의 핵심인 컨트롤러와 액션으로 다시 돌아갈 것이다 이 구성요소들의 동작을 상세하게 살펴보고 응용프로그램에서 최상의 결과를 얻어내기 위해서 어떻게 사용해야 하는지 알아보도록 하자