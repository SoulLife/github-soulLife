※의존성 주입 컨테이너 사용하기
이제 의존성 문제를 해결할 수 있게 됐지만, 그렇다면 구체적으로 어떻게 해야 응용프로그램의 다른 위치에 또 다시 의존성을 만들지 않고 인터페이스의 실제 구현 인스턴스를 생성할수 있을까? 다시 말해서 일반적인 방법만으로는 여전히 응용프로그램의 어딘가에 다음과 같은 구문을 작성할 수밖에 없는 것이다. 

...
IEmailSender sender = new MyEmailSender();
helper = new PasswordResetHelper(sender);
...
정답은 바로 IoC 컨테이너로도 알려져 있는 DI 컨테이너를 사용하는 것이다. DI 컨테이너는 PasswordResetHelper 같은 클래스가 선언하고 있는 의존성과 이 의존성을 해결하기 위해서 사용할 수 있는 MyEmailSender 같은 클래스 사이에서 중개자 역할을 해주는 구성요소다. 

DI 컨테이너에 응용프로그램에서 사용할 인터페이스와 추상 형식들을 등록하고 의존성을 만족시키기 위해서는 어떤 구현 클래스의 인스턴스를 생성해야 하는지를 지정해준다. 가령 IEmailSender 인터페이스를 컨테이너에 등록한 다음, 앞으로 IEmailSender 의 구현이 요청되면 MyEmailSender 클래스의 인스턴스가 생성돼야 한다고 지정하는 식이다. 

그리고 응용프로그램에서는 PasswordResetHelper 개체가 필요할 때마다 DI 컨테이너에게 이 개체의 생성을 요청한다. 그러면 DI 컨테이너는 PasswordResetHelper 클래스가 IEmailSender 클래스가 설정됐다는 것을 알아낸다. 그리고 DI 컨테이너는 이 두가지 정보를 이용해서 MyEmailSender 개체를 생성한 다음 이를 PasswordResetHelper 개체를 생성하기 위한 인자로 사용하고 그 결과로 생성된 PasswordResetHelper 개체를 응용프로그램에서 사용할 수 있도록 반환해주는 것이다. 


Note:
더 이상 응용프로그램에서 new 키워드를 사용해서 개체를 직접 생성하지 않는다는 점을 이해하는 것이 중요하다. 대신 DI 컨테이너에게 필요한 개체를 요청하는 것이다. DI를 처음 접한다면 이점에 익숙해지기까지 약간 시간이 걸릴수도 있을 것이다. 나중에 살펴보겠지만 MVC 프레임워크는 이 과정을 간단하게 만들어주는 몇 가지 기능들을 제공해준다. 


직접 DI 컨테이너를 구현할 필요는 없다. 이미 무료 라이선스로 사용 가능한 훌륭한 오픈소스 DI 컨테이너들이 많이 존재한다. 필자의 경우 Ninject를 선호해서 실제 프로젝트에서 자주 사용하곤 하는데, www.ninject.org에서 이 DI 컨테이너에 대한 자세한 정보를 얻을 수 있다. 6장에서는 Ninject의 사용법과 NuGet을 이용한 패키지 설치 방법을 살펴본다. 


TIP:
Microsoft도 Unity라는 자체 DI 컨테이너를 갖고 있다. 그러나 이 책에서는 Ninject를 사용하려고 하는데, 그 이유는 필자가 이 DI 컨테이너를 선호하기도 하거니와 MVC와 여러가지 도구들을 함께 섞어서 사용하는 상황을 실제로 보여주기 위해서다. Unity에 대한 보다 자세한 정보는 unity.codeplex.com을 참고하기 바란다. 


DI 컨테이너의 역할이 단순하고 하찮은 것처럼 생각될 수도 있겠지만 절대로 그렇지 않다. Ninject같이 좋은 DI 컨테이너는 다음과 같은 몇 가지 훌륭한 기능들을 제공해준다. 

* 종속성 체인 해결 : 특정 구성요소를 요청했을 떄, 그 구성요소가 의존하는 개체 자체도 종속성을 갖고 있다면 (예 : 생성자 매개변수 등), DI 컨테이너가 그 종속성까지 만족시켜준다. 가령 MyEmailSender 클래스의 생성자가 INetworkTransport라는 인터페이스의 구현을 필요로한다면 DI 컨테이너가 해당 인터페이스에 대한 기본 구현 인스턴스를 생성한 다음 이를 MyEmailSender 클래스의 생성자에 전달해준다. 그리고 다시 그 결과를 IEmailSender 클래스의 기본 구현으로 반환해준다. 

*개체 수명주기 관리: 만약 특정 구성요소를 한 번 이상 요청하면 매번 동일한 인스턴스를 얻게 될 까 아니면 매번 새롭게 생성된 인스턴스를 얻게 될까? 좋은 DI 컨테이너는 싱글톤(Singleton: 매번 동일한 인스턴스) 트렌지언트(Transient: 매번 새로운 인스턴스) 스레드별 인스턴스(Instance-per-Thread) HTTP요청별 인스턴스(Instance-per-HTTP-request)풀에서 가져온 인스턴스(Instance-from-a-Pool)같은 미리 정의된 다양한 옵션들 중 한가지를 선택해서 구성요소의 생명주기를 구성할 수 있는 기능을 제공해준다. 

* 생성자 매개변수 값 구성 : 만약 INetworkTransport 인터페이스를 구현하고 있는 클래스의 생성자가 serverName이라는 문자열 매개변수를 필요로 한다면 DI 컨테이너의 구성에서 이 매개변수의 값을 지정해줄 수도 있다. 단순한 기능이지만 연결 문자열이나 서버 주소 등을 지정하기 위한 코드를 여기 저기에 별도로 작성해야 할 필요성을 없애주는 간결한 구성 시스템이다. 


직접 DI 컨테이너를 구현해보면 C#과 .NET이 형식이나 리플렉션을 처리하는 방법을 깊게 이해할수 있을 것이다. 가령 비가 오는 주말에 시도해보기 좋은 프로젝트일 것이다. 그러나 직접 작성한 코드를 실제 프로젝트에 배포해 보고픈 유혹에 넘어가지는 말기 바란다. 신뢰할 수 있고 강력하면서도 고성능의 DI 컨테이너를 구현하기란 매우 어려운 일이어서 반드시 검증되고 테스트된 패키지를 선택해야만 한다. 필자는 개인적으로 Ninject를 선호하지만 사용할수 있는 다른 컨테이너들도 많이 있으므로 각자 자신의 개발 방식에 적합한 제품을 쉽게 찾을수 있을 것이다. 



※ 자동화된 테스트 시작하기
ASP.NET MVC 프레임워크는 최대한 손쉽게 자동화된 테스트를 구성해서 잠시 뒤에 살펴볼 테스트 주도 개발(Test-Driven Development, TDD)같은 개발 방법론을 사용할수있도록 설계됐다. ASP .NET MVC는 자동화된 테스트를 위한 이상적인 플랫폼을 제공해주며 Visual Studio도 탄탄한 테스트 관련 기능들을 갖추고 있다. 이 두가지를 잘 활용하면 간단하고 손쉽게 테스트를 설계하거나 수행할 수 있다. 

폭넓은 관점에서 볼 때 오늘날 웹 응용프로그램 개발자들은 두 가지 방식의 자동화된 테스트에 초점을 맞추고 있다. 그중 첫번째 방식은 단위테스트(Unit Testing)로 개별적인 클래스들의 동작을(또는 다른 형태의 소규모 코드 단위의 동작을)응용프로그램의 다른 부분들과는 독립적으로 정의하고 검증하는 방식이다. 두 번째 방식은 통합 테스트(Integration Testing)로 전체 웹 응용프로그램을 구성하는 다수의 구성요소들이 더불어 수행하는 동작들을 정의하고 검증하는 방식이다. 

웹 응용프로그램에 있어 이 두가지 테스트는 모두 매우 중요하다. 단위 테스트는 작성이 쉽고 수행이 간단하며, 알고리즘이나 업무 로직, 또는 그 밖의 백-엔드(Back-End) 기반구조 테스트에 더할 나위 없이 적합하다. 반면 통합 테스트는 사용자가 UI와 상호작용하는 방식을 설계할 수 있고, 웹 서버와 데이터베이스를 비롯한 응용프로그램이 사용하는 모든 기술적 계층들을 다룰 수 있다. 일반적으로 통합 테스트는 오래된 기능에서 발생할수 있는 새로운버그를 감지하는 데 특히 유용한데 이를 회기 테스트(Regression Testing)라고도 한다. 



※단위 테스트 이해하기
일반적으로 .NET 환경에서는 Visual Studio의 솔루션에 테스트 픽스처(Test Fixtrues)들을 관리하기 위한 별도의 테스트 프로젝트를 추가하는 경우가 많다. 이 프로젝트는 첫 번째 단위 테스트를 추가할 때 생성되거나, MVC 프로젝트 템플릿을 선택할 때 자동으로 생성되도록 지정할 수 있다. 테스트 픽스처는 테스트 메서드들이 정의되어 있는 C# 클래스로 보통 검증하고자 하는 동작마다 각각 하나의 메서드를 정의한다. 그리고 하나의 테스트 프로젝트에는 여러 개의 테스트 픽스처 클래스들이 포함될 수 있다. 


※단위 테스트를 경험해보자!
단위 테스트를 손쉽게 수행할 수 있다는 점은 MVC 프레임워크를 사용함으로써 얻을 수 있는 큰 장점중 하나지만, 누구나 그렇게 느끼는 것은 아닐뿐더러 필자 역시 그 사실을 부정할 생각은 없다. 만약 지금까지 단위테스트를 한 번도 접해본 적이 없다면 실제로 사용해보면서 동작하는 방식을 직접 살펴보기를 권한다. 

개인적으로 단위 테스트를 선호하고 실제 프로젝트에서도 적극적으로 사용하고는 있지만, 여러분이 예상하고 있는 것처럼 필자도 모든 곳에서 항상 사용하고 있지는 않다. 주로 작성하기 까다롭거나 배포시 버그의 원인이 될 가능성이 높다고 판단되는 특성이나 기능에 대한 단위 테스트 작성에 집중하는 편이다. 그런 경우 필요한 기능을 가장 잘 구현할 수 있는 방법에 관한 생각들을 체계화시키는데 단위 테스트가 많은 도움이 된다. 실제로 버그나 결함이 발생해서 이를 처리해야 하는 상황이 벌어지기 전에 수행할 테스트에 관해서 잠시 생각해보는 것만으로도 잠재적인 문제점들을 미리 떠올리는 데 많은 도움이 된다고 생각한다. 

그렇기는 하지만 단위 테스트는 결코 신앙이 아닌 도구일 뿐으로 자신에게 얼마나 많은 테스트가, 그리고 어떤 종류의 테스트가 필요한지는 오직 여러분만 알고 있다. 단위 테스트가 유용하지 않다고 느껴진다거나 더 적합한 다른 방법론을 알고 있다면 단지 유행에 따르기 위해서 단위 테스트를 수용해야 할 필요는 없다(그러나 더 나은 방법론을 따르는 것도 아니면서 테스트조차 수행하지 않는다면 여러분은 사용자들이 직접 버그를 발견하도록 방치하는 수준 낮은 개발자인 셈이다. 반드시 단위 테스트를 수행해야 할 필요는 없지만, 어떤 식으로든 뭔가 테스트를 수행하기는 해야 한다. )



NOTE:
테스트 프로젝트를 생성하는 방법과 프로젝트에 단위 테스트를 작성하는 방법은 6장에서 살펴본다. 이번 장의 목표는 단위 테스트에 대한 개념을 소개하고 테스트 픽스처의 형태와 사용되는 방식에 대한 지식을 제공하는 데 있다. 


먼저 가상의 응용프로그램을 위해서 목록 3-1과 같은 컨트롤러 클래스를 작성했다고 생각해보자. 이 AdminController 라는 클래스는 가상의 사용자들이 자신의 비밀번호를 변경할수 있도록 해주는 ChangeLoginName이라는 액션 메서드를 정의하고 있다. 

목록3-1. AdminController 클래스의 정의

using System.Web.Mvc;

namespace TestingDemo
{
	public class AdminController : Controller
	{
		private IUserRepository repository;

		public AdminController(IUserRepository repo)
		{
			repository = repo;
		}
		public ActionResult ChangeLoginName(string oldName, string newName)
		{
			User user = repository.FetchByLoginName(oldName);
			user.LoginName = newName;
			repository.SubmitChanges();
			//결과를 보여주기 위한 뷰를 렌더한다
			return View();
		}
	}
}


TIP : 
이번 예제는 TestingDemo라는 새로운 Visual Studio프로젝트에서 클래스들을 생성하고 있다. 그러나 소스 코드에 이 프로젝트도 넣어놨으므로 단지 예제를따라 해보기 위해서 이번 절의 예제를 처음부터 생성할 필요는 없다. 


이 컨트롤러는 목록 3-2에서 볼 수 있는 몇 가지 모델 클래스들과 인터페이스를 이용한다. 다시 한번 강조하지만 이 클래스들과 인터페이스는 실제 프로젝트에서 사용할 의도로 만들어진 것이 아닌 손쉬운 테스트 시연을 위해 단순화시킨 것들이다. 가령 단지 문자열 속성 하나만 존재하는 사용자 클래스의 생성을 권장하지는 않는다. 


목록3-2 AdminController 에서 사용하는 모델 클래스들과 인터페이스

namespace TestingDemo
{
	public class User
	{
		public string LoginName { get; set; }
	}
	public interface IUserRepository
	{
		void Add(User newUser);
		User FetchByLoginName(string loginName);
		void SubmitChanges();
	}
	public class DefaultUserRepository : IUserRepository
	{
		public void Add(User newUser)
		{
			//구현이 필요하다.
		}
		public User FetchByLoginName(string loginName)
		{
			//구현이 필요하다. 
			return new User() { LoginName = loginName };
		}
		public void SubmitChanges()
		{
			//구현이 필요하다. 
		}
	}
}

목록 3-2에서 User클래스는 응용프로그램의 사용자를 나타낸다. 그리고 사용자들은 IUserRepository 인터페이스에 정의된 리파지토리의 기능들을 통해서 생성되거나 관리되고 저장되는데, 이 예제 코드에는 DefaultUserRepository 클래스에 이 인터페이스의 구현이 부분적으로 완료되어 있다. 

이번 절의 목표는 목록 3-3에서 볼 수 있는 것처럼 AdminControll 에 정의된 ChangeLoginName메서드의 기능을 테스트하기 위한 단위 테스트를 작성하는 것이다. 

목록3-3 AdminController.ChangeLoginName 메서드에 대한 테스트 픽스처 


using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestingDemo.Tests
{
	[TestClass]
	public class AdminControllerTests
	{
		[TestMethod]
		public void CanChangeLoginName()
		{
			//Arrange(시나리오를 설정한다).
			User user = new User() { LoginName = "Bob"	};
			FakeRepository repositoryParam = new FakeRepository();
			repositoryParam.Add(user);
			AdminController target = new AdminController(repositoryParam);
			string oldLoginParam = user.LoginName;
			string newLoginParam = "Joe";

			//Act(작업을 시도한다)
			target.ChangeLoginName(oldLoginName, newLoginParam);

			// Assert(결과를 검증한다.)
			Assert.AreEqual(newLoginParam, user.LoginName);
			Assert.IsTrue(repositoryParam, DidSubmitChanges);
		}
	}
	class FakeRepository : UIserRepository
	{
		public List<User> Users = new List<User>();
		public bool DidSubmitChanges = false;

		public void Add(User user)
		{
			Users.Add(user);
		}
		public user FetchByLoginName(string loginName)
		{
			return Users.First(m => m.LoginName == loginName);
		}
		public void SubmitChanges()
		{
			DidSubmitChanges = true;
		}
	}
}

이 코드에서 테스트 픽스는 바로 CanChangeLoginName메서드다. 이 메서드에는 TestMethod 어트리뷰트가 지정되어 있고, 이 메서드가 정의된 AdminControllerTest 클래스에는 TestClass 어트리뷰트가 지정되어 있다는 점을 주의해서 살펴보기바란다. Visual Studio 는 바로 이 어트리뷰트들을 이용해서 테스트 픽스처를 찾아낸다. 

또한 CanChangeLoginName 메서드는 Arrange/Act/Assert(A/A/A)로 알려진 패턴을 따르고 있다. Arrange 단계에서는 테스트에 대한 조건들을 설정하고 ,Act 단계에서는 테스트를 수행하며 Assert 단계에서는 반환된 결과가 요구 사항을 만족하는지를 검증한다. 이런 식으로 단위 테스트 메서드의 구조를 일관성 있게 유지하면 메서드를 읽기도 쉽고 프로젝트 내에 수백개의 단위 테스트가 존재하더라도 원하는 것을 구분해내기 편리하다. 

이 테스트 픽스처는 특정 조건을 모의하기 위해서 테스트 전용의 가상 IUserRepository 인터페이스 구현을 사용하고 있는데, 가령 이 예제에서는 리파지토리에 Bob이라는 멤버가 한명 존재한다고 가정하고 있다. 이런 가상의 리파지토리와 User는 테스트의 Arrange 영역에서 생성되고 준비되어야 한다. 

그런 다음 AdminController.ChangeLoginName 메서드가 호출되어 테스트가 수행되는데, 이 부분이 테스트의 Act 영역이다. 마지막으로 일련의 Assert 문을 호출해서 결과를 점검하게 되며, 이 부분이 테스트의 Assert 영역이다. 이 코드에서처럼 Visual Studio 의 테스트 도구 모음에서 제공되는 Assert 메서드를 사용하면 특정 결과를 확인할 수 있다. 테스트는 Visual Studio의 [테스트(Test)] 메뉴를 이용해서 수행할 수 있으며, 그 결과로 그림 3-7에서 볼수 있는 것처럼 수행된 테스트에 관한 시각적인 피드백을 얻을수 있다. 


만약 테스트에서 아무런 예외도 발생하지 않고 모든 Assert문이 문제 없이 통과됐다면 [테스트 탐색기(Test Explorer)]창에 녹색 불이 표시된다. 만약 그렇지 않다면 빨간 불과 함께 잘못된 부분에 대한 자세한 정보가 나타날 것이다. 



Note:
DI를 사용하면 단위 테스트에 큰 도움이 된다는 것을 알 수 있다. 즉 리파지토리의 가상 구현을 생성한 다음, 이를 컨트롤러에 주입해서 구체적인 시나리오를 만들어 낼 수 있는 것이다. 바로 이런 점이 필자가 DI의 열렬한 팬이 된 이유중 하나다. 


고작 간단한 메서드 하나를 테스트하기 위해서 과도한 노력을 기울인 것처럼 보일 수도 있지만 훨씬 더 복잡한 메서드를 테스트하는 경우에도 이번 예제와 비슷한 분량의 코드만 필요할 뿐이다. 만약 이런 사소한 테스트를 그냥 무시해버려도 될지 고민이 된다면, 때때로 이런 테스트 픽스처가 더 복잡한 테스트 내부에 숨겨져 있어서 찾아내지 못한 버그들을 감지해내는 데 큰 도움이 된다는 사실을 기억해보기 바란다. 또한 Mocking 도구를 사용하면 FakeMemberRepository같은 테스트 전용 가상 클래스들을 제거해서 테스트를 더욱 개선 할 수 있는데, 그 방법에 관해서도 6장에서 살펴본다. 



※ 테스트 주도 개발(TDD)과 실패- 성공 - 리팩터(Red-Green-Refactor) 작업 방식 사용하기
테스트 주도 개발(TDD)방식에서는 단위 테스트를 이용해서 코드를 설계한다. 여러분은 주로 코딩을 마치고 난 이후에 테스트를 해왔을 것이기에 이 방식이 이상한 개념처럼 느껴질 수 도 있겠지만, 이 접근 방식은 나름대로 사리에 합당한 점들이 많다. 그 핵심 개념은 실패-성공-리팩터(Red-Green-Refactor)작업 방식에 따른 개발이다. 이 작업 방식은 다음과 같이 이뤄진다. 


* 응용프로그램에 추가할 새로운 기능이나 메서드를 결정한다.
* 새로운 기능의 동작을 검증할 테스트부터 먼저 작성하고 작성이 완료되면
* 테스트를 수행해서 빨간 불을 얻는다(즉 일부러 테스트를 실패한다)
* 새로운 기능을 구현하기 위한 코드를 작성한다. 
* 녹색불을 얻을 때까지(즉 테스트가 성공할 때까지) 다시 테스트 수행과 코드 수정을 반복한다. 
* 필요한 경우, 코드를 리팩터한다. 가령 구문을 재구성하거나 변수명을 변경하는 등의 작업을 수행한다. 
* 테스트를 수행해서 변경사항이 여러분이 추가한 기능의 동작에 영향을 주지 않았는지 확인한다. 

기능이 추가될 때마다 이 과정이 반복된다. TDD는 전통적인 개발 절차를 뒤집어버린다. 즉 먼저 완벽하게 구현된 기능에 대한 테스트부터 작성하는데, 당연히 이 테스트들은 실패하게 된다. 그런 다음 실제로 기능을 구현하고 여러 측면의 동작들을 구현해서 하나 이상의 테스트들을 통과시킨다. 

바로 이 일련의 과정들이 TDD의 본질이다. TDD가 개발 스타일로 권장되는 이유는 많은데, 가장 큰 이유는 이처럼 프로그래머가 코딩을 시작하기 전에 변경이나 개선 작업이 어떻게 동작하게 될지에 관해서 많은 생각을 하게 만들어주기 때문이다. 즉 계획상의 명확한 최종 목표와 그 목표를 달성했는지 여부를 언제든지 확인할 수 있는 방법을 확보할 수 있는 것이다. 게다가 응용프로그램의 다른 부분들에 대한 단위 테스트들까지 확보하고 있다면 추가된 코드가 다른 부분의 동작에 악영향을 주지 않았는지 까지도 확신할 수 있다. 

TDD를 처음 시도해볼 때는 조금 어색하게 느껴지지만 테스트를 먼저 작성함으로써 코드 작성에 사용되는 기술로 인한 선입견이 생기기 전에 어떻게 완벽한 구현을 할수 있을지를 먼저 생각하게 해준다. 

반면 TDD의 가장 큰 단점은 훈련이 필요하다는 점이다. 마감 시간이 임박함에 따라 TDD를 무시해버리고 먼저 코드부터 작성하고 싶은 마음이 들기도 하고, 실제 프로젝트에서도 자주 목격하듯이 문제가 있는 테스트를 살짝 감추고 코드가 실제보다 잘 동작하는 것처럼 보이게 만들기도 한다. 이런 이유 때문에 TDD는 전반적으로 수준 높은 기술을 보유하고 있는 잘 훈련된 개발팀이나, 시간적인 제약에 직면하더라도 올바른 방식을 집행할 수 있는 팀리더가 존재하는 노련하고 성숙한 개발팀에 의해 사용되어야 한다. 


TIP:
6장에서는 Visual Studio에 내장된 테스트 도구들을 살펴보면서 TDD의 간단한 예제를 살펴볼것이다. 



※ 통합 테스트 이해하기
웹 응용프로그램에서 가장 일반적인 통합 테스트 방식은 UI 자동화(UI Automation)로 이 방식은 버튼 눌림, 링크 이동, 폼 제출같이 사용자가 수행할 수있는 동작들을 재현해서 응용프로그램의 전체 기술 계층을 테스트할 수 있도록 웹 브라우저를 가장하거나 자동화하는 방식을 뜻한다. .NET 개발자들을 위한 가장 널리 알려진 오픈소스 브라우저 자동화 제품으로는 다음과 같은 것들이 있다. 

* Selenium RC(http://seleniumhq.org/)는 Internet Explorer, Firefox, Safari, Opera에 자동화 명령을 전송할 수 있는 Java 서버 응용프로그램과 .NET, Python, Ruby및 그 밖의 다른 언어들에 대한 클라이언트로 구성되어 있어서 원하는 언어로 테스트 스크립트를 작성할 수 있다. Selenium은 강력하고 충분히 검증됐지만 Java 서버에서만 운영이 가능하다는 점만 유일한 단점이다. 

* WatiN(http://watin.org)은 Internet Explorer나 Firefox에 자동화 명령을 전송할수 있는 .NET 라이브러리다. API 자체는 Selenium만큼 강력하지는 않지만 대부분의 시나리오를 손쉽게 처리할 수 있고 설치도 쉽다(DLL 하나만 참조하면 된다)


통합 테스트는 단위 테스트를 이상적으로 보완해준다. 단위 테스트가 개별 구성요소들의 서버측 동작을 검증하기에 알맞은 반면, 통합 테스트는 클라이언트 중심적이고 사용자의 동작을 재현할 수 있는 테스트를 작성할 수 있게 해준다. 결과적으로 통합 테스트라는 단어의 뜻그 대로 구성요소들 간의 상호작용으로 인해서 발생하는 문제들에 중점을 두고 있는 것이다. 웹응용 프로그램에 대한 통합 테스트는 브라우저를 통해서 이뤄지기 때문에 JavaScript가 기대하는 대로 동작하는지도 테스트할 수 있는데, 보통 이런 테스트는 단위 테스트를 통해서는 수행하기가 매우 힘들다. 

물론 몇 가지 단점도 존재한다. 일단 통합 테스트에는 더 많은 시간이 든다. 통합 테스트는 테스트를 작성하는 데도 많은 시간이 들고, 그 테스트들을 수행하는 데에도 많은 시간이 든다. 그리고 통합 테스트는 너무 민감하다. 만약 테스트에서 점검하는 요소의 ID 어트리뷰트가 변경된다면 해당 테스트는 아마도 (거의 확실하게)실패할 것이다. 

통합 테스트는 추가적인 시간과 노력을 필요로 하기 때문에 주로 소스 코드의 주간 체크인을 마친 뒤라거나 중요한 기능 블록이 완성된 경우처럼, 프로젝트 진행 과정상 중요한 시점에 이뤄지는 경우가 많다. 통합 테스트는 어느 면에서나 단위 테스트 못지 않게 유용할 뿐만 아니라 단위 테스트로는 찾아내기 어려운 문제점을 발견해낼수도 있다. 통합 테스트를 설정하거나 수행하는데 드는 시간은 충분히 투자할만한 가치가 있다. 필자 역시 통합 테스트를 여러분의 개발 프로세스에 추가할 것을 권하고 싶다. 

다만 이 책에서 통합 테스트를 따로 다루지는 않을 것이다 통합 테스트는 MVC 프레임워크에 관한 이책의 주제를 벗어나는 영역이다. 게다가 모든 웹 응용프로그램들이 통합 테스트의 이점을 얻을 수 있으며, MVC 프레임워크라고 해서 통합 테스트를 지원하기 위해서 특별히 따로 제공해주는 기능도 없다. 통합 테스트는 그 자체만으로도 또 다른 중요한 논의 대상이다. 그리고 다른 모든 웹 응용프로그램들을 대상으로 통합 테스트를 수행할 때 적용되는 사항들은 MVC에도 동일하게 적용된다. 



요약:
이번 장에서는 MVC 아키텍처 패턴에 관해서 살펴보고, 여러분이 이미 본 적이 있거나 들어본적이 있는 다른 몇 가지 패턴들과 비교해봤다. 도메인 모델의 중요성에 관해서도 논의해봤으며, 응용프로그램의 각 부분들을서로 엄격하게 분리하기 위해서 구성요소들은 분리할수 있게 만들어주는 의존성 주입에 관해서도 살펴봤다. 간단한 단위 테스트 예제도 만들어봤으며, 분리된 구성요소와 의존성 주입이 어떻게 단위 테스트를 단순하고 손쉽게 만들어주는지도 살펴봤다. 다음 장에서는 MVC 프레임워크 응용프로그램에서 사용되는 C# 언어의 주요 기능들을 살펴보도록 하자