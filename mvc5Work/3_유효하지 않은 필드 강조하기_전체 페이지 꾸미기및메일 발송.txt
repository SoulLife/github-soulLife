※ 유효하지 않은 필드 강조하기
텍스트 박스나 드롭다운 리스트, 그리고 그 밖의 다른 요소들을 생성해주는 HTML 헬퍼 메서드들은 모델 바인딩과 함께 사용할 수 있는 대단히 멋진 기능 한 가지를 갖고 있다. 사용자가 폼에 입력했던 값들을 유지해주는 바로 그 메커니즘이 유효성 검사에 실패한 각각의 필드들을 강조하는 용도로 사용될수 있는 것이다. 

모델 클래스의 특정 속성이 유효성 검사에 실패했다면 HTML 헬퍼 메서드는 약간 다른 내용의 HTML을 생성해준다. 먼저 다음은 유효성 검사 오류가 발생하지 않은 경우 Html.TextBoxFor(x => x.Name)메서드 호출이 생성해주는 HTML이다. 
<input data-val="true" data-val-required="Please enter your name" id="Name" name="Name" type="text" value="" />

그리고 다음은 사용자가 값을 입력하지 않은 경우, 동일한 메서드 호출이 생성해주는 HTML 이다(GuestResponse 모델 클래스의 Name 속성에 Required 어트리뷰트가 적용되어 있으므로 값이 입력되지 않으면 유효성 검사 오류가 발생한다. )

<input clsss="input-validation-error" data-val="true" data-val-required="Please enter your name" id="Name" name="Name" type="text" value="" />
달라진 부분이 굵게 강조되어 있는데, 유효성 검사 오류가 발생하면 헬퍼 메서드가 input 요소에 input-validation-error라는 이름의 CSS 클래스를 추가해준다. 이 클래스를 비롯해서다른 HTML 헬퍼 메서드들이 추가해주는 그 밖의 클래스들에 대한 CSS 스타일들이 작성된 스타일시트를 생성하면 이기능을 활용할수 있다. 

MVC 프로젝트의 규약에 따라 CSS 스타일시트 같은 정적 콘텐트는 Content 폴더에 위치해야 한다. 먼저 솔루션 탐색기에서 PartyInvites 항목을 마우스 오른쪽 버튼으로 클릭한 다음, 메뉴에서 [추가(Add)] -> [새폴더(New Folder)]를선택해서 폴더를 생성하고 폴더 이름을 Content로 설정한다. 

그리고 CSS 파일을 생성하려면 새로 생성한 Content 폴더를 마우스 오른쪽 버튼으로 클릭하고 메뉴에서 [추가(Add)] -> [새항목(New Item)]을 선택한 다음 ,항목 템플릿들의 목록에서 [스타일 시트(Style Sheet)]를 선택한다. 그리고 그림 2-22처럼 이 새로운 파일의 이름을 Styles.css로 설정한다. 

[추가(Add)] 버튼을 클릭하면 Visual Studio 가 Content/Styles.css 파일을 생성해준다. 이 새 파일의 내용을 목록 2-19처럼 작성한다. 

목록2-19. Styles.css 파일의 내용

.field-validation-error {
    color: #f00;
}
.field-validation-valid{
    display: none;
}
.input-validation-error{
    border: 1px solid #f00; background-color: #fee;
}
.validation-summary-errors
{
    font-weight: bold; color: #f00;
}
.validation-summary-valid
{
    display:none;
}

이 스타일 시트를 사용하려면 목록 2-20에서 볼 수 있는 것처럼 RsvpForm 뷰의 head 섹션에 새로운 참조를 추가해야 한다. 일단 지금은 일반적인 정적 HTML 파일에 link 요소를 추가할 때처럼 뷰에 link 요소를 추가하면 되는데, 26장에서는 JavaScript 및 CSS 스타일시트들을 병합하고 단일 HTTP 요청으로 브라우저에 배포할 수 있게 해주는 번들(Bundles)기능에 관해서 살펴볼 것이다. 


TIP:
솔루션 탐색기 창에서 JavaScript 파일이나 CSS 파일을 드래그한 다음 코드 편집기에 드롭시켜도 된다. 그러면 Visual Studio가 선택한 파일에 대한 script 요소나 link 요소를 생성해줄 것이다. 

목록 2-20. RsvpForm.cshtml 파일에 Link 요소 추가하기
@model PartyInvites.Models.GuestResponse

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" type="text/css" href="~/Content/Styles.css" /> <!-- 생성한 css파일 임포트 이부분 추가 -->
    <title>RsvpForm</title>
</head>
<body>
    @using (Html.BeginForm())
            {
                @Html.ValidationSummary()
                <p>Your name: @Html.TextBoxFor(x => x.Name)</p>
                <p>Your email: @Html.TextBoxFor(x => x.Email)</p>
                <p>Your Phone: @Html.TextBoxFor(x => x.Phone)</p>
                <p>
                    Will you attend?
                    @Html.DropDownListFor(x => x.WillAttend, new[]
               {
                   new SelectListItem() { Text = "Yes, I'll be there", Value=bool.TrueString},
                   new SelectListItem() { Text="No, I can't come", Value=bool.FalseString}
               }, "Choose an option")
                </p>
                <input type="submit" value="Submit RSVP" />
            }
</body>
</html>


TIP:
만약 여러분이 MVC3에서 바로 MVC5로 전환한 경우라면 뷰에 CSS 파일을 추가할때 href 어트리뷰트에 @Href("~/Content/Site.css")나 @Url.Content("~/Content/Site.css")를 지정할 것으로 예상했을 수도 있다. MVC4에서부터는 Razor가 ~/로 시작하는 어트리뷰트를 감지해서 자동으로 @Href 또는 @Url를 대신 호출해준다. 


이제 응용 프로그램에 스타일 시트가 적용되었으므로 유효성 검사 오류를 발생시키는 데이터가 제출되면 그림2-23에서 볼 수 있는 것처럼 시각적으로 보다 명확한 유효성 검사 오류를 확인할 수 있을 것이다. 


※내용 꾸미기
이제 잠시 뒤에 살펴볼 전자 메일 발송 기능을 제외한다면 응용프로그램의 기본적인 기능들이 모두 구현된 셈이다. 그러나 아직 전체적인 외양은 초라하기 그지 없다. 비록 이 책이 서버 측개발에 중점을 두고 있는 책이기는 하지만 Microsoft가 몇 가지 오픈 소스 클라이언트 라이브러리들을 도입해서 일부 Visual Studio 프로젝트 템플릿들에 포함시켰기 때문에 이 라이브러리들에 관해서도 살펴볼 필요는 있다. 

개인적으로 이 템플릿들을 선호하지는 않지만 템플릿에 사용되는 일부 라이브러리들은 좋아하는 편이다. 가령 Bootstrap은 MVC5에 새로 도입된 라이브러리들 중 하나로 본래 Twitter에 의해 개발되어 현재 널리 사용되고 있는 뛰어난 CSS 라이브러리다. 

물론 Bootstrap같은 라이브러리들을 사용하기 위해서 반드시 Visual Studio의 프로젝트 템플릿을 사용해야만 하는 것은 아니다. 라이브러리의 프로젝트 웹 사이트에서 직접 파일을 다운 로드 받거나 NuGet을 이용할 수도 있다. Visual Studio에 통합되어 있는 NuGet을 이용하면 자동으로 다운로드와 설치가 가능하도록 미리 준비된 소프트웨어들의 카탈로그에 접근할 수 있다. NuGet의 가장 뛰어난 점 중 하나는 패키지들 간의 의존성을 관리해주는 기능으로. 가령 Bootstrap을 설치하면 Bootstrap의 일부 기능들이 의존성을 갖고 있는 jQuery까지 NuGet이 함께 다운로드해서 설치해준다. 


※ NuGet으로 Bootstrap 설치하기
Bootstrap 패키지를 설치하려면 Visual Studio의 [도구(Tools)] 메뉴에서 [NuGet 패키지 관리자(Library Package Manager)] -> [패키지 관리자 콘솔(Package Manager Console)]을 선택한다. 그러면 Visual Studio가 NuGet 명령줄을 열어준다. 명령줄에 다음 명령어를 입력하고 리턴 키를 누른다. 

Install-Package -version 3.0.0 bootstrap

이 Install-Package 명령어는 NuGet에게 지정한 패키지와 해당 패키지가 의존하는 패키지들을 다운로드해서 프로젝트에 추가하도록 지시한다. 지금 설치하려고 하는 패키지의 이름은 bootstrap으로 NuGet 웹 사이트(http://www.nuget.org)나 Visual Studio의 NuGet 사용자 인터페이스를 사용해서 ([도구(Tools)] -> [NuGet 패키지 관리자(Library Package Manager)] -> [솔루션용 NuGet 패키지 관리(Manage NuGet Packages for Solution)]를 선택한다.) 패키지 이름을 검색할 수 있다. 

그리고 이 명령어에서는 -version 옵션을 지정해서 이 책을 집필하던 당시의 안정된 가장 최신 버전인 Bootstrap 버전 3을 지정하고 있다. 만약 -version 옵션을 지정하지 않는다면 NuGet은 지정한 패키지의 가장 최신 버전을 다운로드하게 된다. 그러나 이번 장에서 제시하고 있는 예제를 정확하게 똑같이 재현하려면 이렇게 당시의 버전을 지정해서 일관성을 유지하는 것이 좋을 것이다. 

이 명령어가 실행되면 NuGet이 Bootstrap과 Bootstrap이 의존하는 jQuery를 비롯해서 필요한 모든 파일들을 다운로드한다. 이때 다운로드된 CSS 파일들은 Content 폴더에 추가되고 Scripts 폴더가 생성된 다음(이 폴더가 JavaScript 파일들을 위한 MVC의 표준 위치다)
Bootstrap과 jQuery의 파일들이 여기에 위치하게 된다(추가로 fonts 라는 폴더가 함께 만들어지는데, 이 폴더는 특정 위치에 파일들이 존재할 것을 전제로 하는 Bootstrap의 특수한 타이포그래피 기능을 지원하기 위해서 만들어지는 폴더다)



Note:
이번 장에서 Bootstrap을 살펴보는 이유는 대중적인 CSS 및 JavaScript 라이브러리들을 사용하기에 적합한 HTML을 MVC 프레임워크로 얼마나 손쉽게 생성할 수 있는지를 보여주기 위해서다. 그러나 서버 측 개발에 관한 이 책의 주제를 벗어날 의도는 없으므로 MVC 프레임워크를 이용한 클라이언트 측 작업에 관해 더 자세한 내용들을 살펴보려면 필자의 [Pro ASP.NET MVC5 Client]를 참고하기 바란다. 




※Index 뷰 꾸미기
기본적으로 Bootstrap의 기능들은 Content 폴더에 추가된 파일들에 정의되어 있는 CSS 선택자들을 HTML 요소의 클래스에 적용함으로써 동작한다. Bootstrap이 정의하고 있는 클래스들에 대한 전체적인 세부사항들은 http://getbootstrap.com에서 살펴볼수 있다. 일단여기에서 는 목록 2-21을 통해서 Index.cshtml 파일에 적용된 몇가지 기본적인 스타일 지정 방식을 확인해 보도록 하자. 

목록2-21 Bootstrap이 적용된 Index.cshtml 파일

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" /> 		<!-- 추가 -->
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />	<!-- 추가 -->
    <title>Index</title>
    <style>										<!-- 추가 -->
        .btn a { color: white; text-decoration: none}				<!-- 추가 -->
        body { background-color: #F1F1F1;}					<!-- 추가 -->
    </style>										<!-- 추가 -->
</head>
<body>
    <div class="text-center"> 							<!-- 추가 -->
        <h2>we're going to have an exciting party. </h2>			<!-- 추가 -->
        <h3>(To do: sell it better. Add pictures or something.)</h3>    <!-- 추가 -->
        <div class="btn btn-success">						<!-- 추가 -->
            @Html.ActionLink("RSVP Now", "RsvpForm")
        </div>									<!-- 추가 -->
    </div>
</body>
</html>
먼저 Content 폴더에 위치한 bootstrap.css 파일과 bootstrap-theme.css 파일에 대한 link 요소들이 추가됐다. 이 파일들은 라이브러리 자체에서 제공되는 기본적인 CSS 스타일링에 필요한 Bootstrap 파일들로 Scripts 폴더에는 이 파일들에 대응하는 JavaScript 파일도 존재한다. 그러나 이번 예제에서는 JavaScript 파일까지는 필요 없다. 그리고 목록 2-21에는 body 요소의 배경색을 설정하고 a 요소의 텍스트 스타일을 지정하기 위한 Style요소도 정의됐다. 


TIP:
Content 폴더에 위치한 Bootstrap 파일들을 살펴보면 bootstrap.css와 bootstrap.min.css 같이 min 이라는 키워드가 추가된 쌍둥이 파일들이존재하는 것을 볼 수 있다. 이 파일들은 응용프로그램을 운영 환경에 배포할 때, JavaScript 나 CSS 파일들을 축소하기 위해서 사용되는 파일들로, 불필요한 모든 공백 문자들이 제거되고 심지어 JavaScript 파일의 경우에는 함수와 변수의 이름들까지 짧게 치환 처리된 파일들이다. 축소(Minification)는 콘텐트를 브라우저에 배포하기 위해 필요한 대역폭의 총량을 줄이기 위한 기술로 26장에서는 그 과정을 자동으로 관리하기 위한 ASP.NET 의 기능을 살펴본다. 그러나 이번 장을 비롯한 이 책의 대부분의 장들에서는 개발 이나 테스트 시에 보편적으로 사용하는 일반적인 파일들을 사용하도록 하겠다. 



Bootstrap 스타일들을 추가하고 직접 두 가지 스타일도 정의했으므로, 이번에는 실제로 요소에 이 스타일들을 지정해볼 차례다.  이번 예제에서는 간단하게 text-center, btn, btn-success의 세 가지 Bootstrap CSS 클래스들만 사용하고 있다. 

먼저 text-center 클래스는 이클래스가 지정된 요소와 그 자식 요소들의 내용을 가운데 정렬한다. 그리고 btn 클래스는 Button이나 input 또는 a 요소를 멋진 버튼 형태로 꾸며주고, btn-success 클래스는 버튼에 지정하고자 하는 색상들의 범위를 지정한다. 버튼의 색상은 사용 중인 테마에 좌우되는데, 이번 예제에서는 기본 테마를 사용하고 있다. (bootstrap-theme.css 파일에 정의되어 있다)그러나 온라인을 검색해보면 적용할 수 있는 무수히 많은 테마들이 존재한다. 그림 2-24에서 이번 작업의 결과를 확인할 수 있다. 

다만 이 결과를 보면 필자가 웹 디자이너는 아니라는 사실을 확연히 알 수 있을 것이다. 사실 필자는 어렸을 때 예술적인 재능이 정말 눈곱만큼도 없어서 예술 수업을 면제 받기까지 했었다. 그래서 감사하게도 더 많은 시간을 수학 공부에 투자할 수는 있었지만, 필자의 예술적 능력이 10세 수준이상으로는 전혀 발전하지 못하게 된 결과를 가져왔다. 그래서 실제 프로젝트에서는 디자인이 필요하거나 내용을 꾸며야 할때 전문가의 도움을 받곤 하지만, 지금은 혼자 작업하고 있으므로 이번 예제에서는 가능한 만큼만 적당히 Bootstrap을 적용해보려고 한다. 




※ RsvpForm 뷰 꾸미기
Bootstrap은 폼을 꾸밀 때 사용할 수 있는 클래스들도 제공해준다. 비록 자세한 설명은 생략하겠지만 목록 2-22에서 해당 클래스들을 적용하는 방법을 엿볼수 있다. 

목록2-22 Bootstrap이 적용된 RsvpForm.cshtml 파일
@model PartyInvites.Models.GuestResponse

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" type="text/css" href="~/Content/Styles.css" />
    <title>RsvpForm</title>
</head>
<body>
    <div class="panel panel-success">
        <div class="panel-heading text-center"><h4>RSVP</h4></div>
        <div class="panel-body">
            @using (Html.BeginForm())
            {
                @Html.ValidationSummary()
                <div class="form-group">
                    <label>Your name:</label>
                    @Html.TextBoxFor(x => x.Name, new {  @class="form-control"})
                </div>
                <div class="form-group">
                    <label>Your email:</label>
                    @Html.TextBoxFor(x => x.Email, new { @class="form-control"})
                </div>
                <div class="form-group">
                    <label>Your phone:</label>
                    @Html.TextBoxFor(x => x.Phone,new { @class="form-control"})
                </div>
                <div class="form-group">
                    <label>Will you attend?</label>
                    @Html.DropDownListFor(x => x.WillAttend, new []
               {
                   new SelectListItem() { Text="Yes, I'll be there", Value=bool.TrueString},
                   new SelectListItem() { Text="No, I can't come", Value=bool.FalseString}
               },"Choose an option", new { @class = "form-control" })
                </div>
                <div class="text-center">
                    <input class="btn btn-success" type="submit" value="Submit RSVP" />
                </div>
            }
        </div>
    </div>                
</body>
</html>


이번에는 레이아웃의 구조를 잡기 위해서 Bootstrap 클래스들을 이용해서 헤더가 존재하는 패널을 생성하고 있다. 그리고 라벨과 그에 관련된 input 또는 select 요소를 포함하고 있는 요소를 꾸미는 데 사용되는 form-group 클래스를 사용해서 폼을 꾸미고 있다. 

또한 폼의 각 요소들은 HTML 헬퍼 메서드를 이용해서 생성하고 있는데, 결과적으로 이 얘기는 form-control 클래스를 적용할 수 있는 정적으로 정의된 요소들이 존재하지 않는다는 뜻이다. 그러나 다행히도 헬퍼 메서드들은 다음과 같이 생성할 요소에 어트리뷰트를 지정할 수 있는 선택적 object 매개변수를 지원해준다. 
...
@Html.TextBoxFor(x => x.Name, new { @class="form-control" })
...

이 코드는 4장에서 살펴보게 될 C#의 익명형식 기능을 이용해서 개체를 생성한 다음, TextBoxFor 헬퍼 메서드가 생성하는 요소의 class 어트리뷰트를 form-control로 설정해야 한다고 지정하고 있다. 이 개체에 정의된 속성들은 HTML 요소에 추가될 어트리뷰트들의 이름으로 사용된다. 다만 class라는 단어는 C# 언어에서 예약된 단어이므로 접두사로 @ 문자를 붙였다. 이는 표현식에 키워드를 사용할수 있게 해주는 C#의 표준 기능이다. 그림 2-25에서 이 작업의 결과를 확인할 수 있다. 



※ Thanks 뷰 꾸미기
마지막으로 꾸며볼 뷰 파일은 Thanks.cshtml 으로 목록 2-23에서 작업 결과를 확인할수 있다. 이 파일에 추가된 마크업과 Index.cshtml뷰의 마크업이 비슷하다는 점을 알 수 있는데,관리가 용이한 응용프로그램을 작성하려면 가급적 동일한 코드와 마크업의 반복적인 사용을 피하는 것이 가장 중요하다. 이와 관련해서 5장에서는 Razor의 레이아웃 기능을 20장에서는 부분 뷰(Partial View)에 관해서 살펴볼 텐데, 이 두가지 기능 모두 마크업의 중복을 줄이는 데 사용할 수 있는 기능들이다. 

목록2-23 Bootstrap이 적용된 Thanks.cshtml 파일

@model PartyInvites.Models.GuestResponse

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width" />
    <title>Thanks</title>
    <style>
        body { background-color: #F1F1F1; }
    </style>
</head>
<body>
    <div class="text-center"> 
        <h1>Thank you, @Model.Name!</h1>
        <div class="lead">
            @if (Model.WillAttend == true)
            {
                @:It's great that you're coming. The drinks are already in the fridge!
            }
            else
            {
                @:Sorry to hear that you can't make it, but thanks for letting us know.
            }
        </div>
    </div>
</body>
</html>

lead 클래스는 Bootstrap의 타이포그래피 스타일 중 한가지를 적용해주며 그 결과를 그림 2-26에서 확인할 수 있다. 



※ 예제 마무리하기
예제 응용프로그램의 마지막 요청사항은 작성이 완료된 RSVP를 파티 주최자에게 전자 메일로 발송해주는 것이다. 물론 이 작업은 .NET 프레임워크의 전자 메일 관련 클래스를 이용해서 전자 메일을 생성하고 발송하는 액션 메서드를 추가해서 수행할 수도 있다. 그리고 이 기법이 MVC 패턴과 가장 부합하는 방식일 것이다. 그러나 여기에서는 대신 WebMail 헬퍼 메서드를 사용해보려고 한다. 비록 이 헬퍼 메서드는 MVC 프레임워크의 일부는 아니지만, 전자메일 발송을 위해 필요한 잡다한 설정 등의 세부 작업으로 고민할 필요 없이 이번 예제를 완료할 수 있도록 도와줄 것이다. 이번 예제에서는 Thanks 뷰가 렌더될 때 전자 메일 메시지가 발송되어야 한다. 목록2-24에 변경해야할 부분들이 나타나 있다. 

목록2-24. WebMail 헬퍼 메서드를 사용하고 있는 Thanks.cshtml 파일
<body>
    @{ 
        try
        {
            WebMail.SmtpServer = "smtp.example.com";
            WebMail.SmtpPort = 587;
            WebMail.EnableSsl = true;
            WebMail.UserName = "mySmtpUsername";
            WebMail.Password = "mySmtpPassword";
            WebMail.From = "rsvps@example.com";
            WebMail.Send("party-host@example.com", "RSVP Notification", Model.Name + " is " + ((Model.WillAttend?? false) ? "" : "not") + "attending");
        }catch(Exception)
            {
                @:<b>Sorry - we couldn't send the email to confirm your RSVP.'</b>
            }
    }
    <div class="text-center"> 
        <h1>Thank you, @Model.Name!</h1>
        <div class="lead">
            @if (Model.WillAttend == true)
            {
                @:It's great that you're coming. The drinks are already in the fridge!
            }
            else
            {
                @:Sorry to hear that you can't make it, but thanks for letting us know.
            }
        </div>
    </div>
</body>



NOTE:
이 예제에서 WebMail 도우미를 사용하는 이유는 가장 최소한의 노력으로 전자 메일 메시지 발송을 구현할 수 있기 때문이다. 그러나 보통은 해당 기능을 액션 메서드의 형태로 구현하는 것을 선호하는 편이다. 그 이유에 관해서는 3장에서 MVC 아키텍처 패턴에 관해서 살펴보면서 다시 설명하도록 한다. 



먼저 서버의 이름, 서버가 SSL 연결을 필요로 하는지 여부, 계정 세부 정보 등 전자 메일 서버의 상세 정보를 구성하기 위한 WebMail 도우미 관련 Razor 표현식을 추가한다. 이렇게 상세 정보들을 구성한 다음 바로 WebMail.Send 메서드를 사용해서 전자 메일을 발송하고 있다. 

전자 메일이 발송되지 않았을 경우 사용자에게 메시지를 출력하기 위해서 전자 메일 발송과 관련된 모든 코드를 try...catch 블록안에 집어넣었다. 이 메시지 블록은 Thanks뷰의 출력에 함께 나타나게 된다. 더 바람직한 접근 방식은 전자 메일 메시지가 정상적으로 발송되지 않는 경우, 별도의 오류 뷰에 메시지를 출력하는 것이겠지만 이번 첫 번째 MVC 응용프로그램에서는 모든 것을 가급적 간결하게 유지하기 위해서 이런 방식을 선택했다. 



※ 요약
이번 장에서는 새로운 MVC 프로젝트를 생성하고 이 프로젝트를 이용해서 간단한  MVC 데이터 입력 응용프로그램을 구축해보면서 MVC 프레임워크의 아키텍처와 접근 방식을 가볍게 살펴봤다. 일부 중요한 기능들(Razor 구문, 라우팅, 자동화된 테스트 등)은 설명 없이 그냥 지나쳤지만 이후의 장들에서 다시 자세하게 살펴볼 것이다. 다음 장에서는 이 책 전반에 걸쳐 사용되고 있으며 MVC 프레임워크를 사용해서 효과적인 개발을 수행하기 위한 기반을 형성하는 MVC 아키텍처와 디자인 패턴, 그리고 기술들을 살펴볼 것이다. 