CHAPTER 19장 : 컨트롤러 확장성

이번 장에서는 컨트롤러를 다루는 방법과 관련된 MVC의 고급 기능들을 살펴보려고 한다. 우선 액션 메서드를 실행하기 전에 거치게 되는 요청 처리 파이프라인의 각 단계들을 알아보는 것으로부터 시작하여 이런 처리 과정을 제어하는 다양한 방법들까지 살펴볼 예정이다. 그림 19-1은 각 구성요소들 간의 기본적인 제어 흐름을 보여준다. 

요청 -> 라우팅				-> 컨트롤러						-> 액션 메서드 -> 응답

		-> 컨트롤러 팩토리					-> 액션 호출자
				그림 19-1 액션 메서드의 호출 과정

우선 컨트롤러 팩토리 (Controller Factory)와 액션 호출자(Action Invoker)를 설명하는 것으로부터 논의를 시작해보자. 이 구성 요소들의 역할은 그 이름에서 대략적으로 추측할 수 있을 텐데 컨트롤러 팩토리는 요청을 처리할 컨트롤러의 인스턴스를 생성하는 역할을 수행하며 액션 호출자는 컨트롤러 클래스 내부에 정의되어 있는 액션 메서드를 찾아서 호출하는 역할을 수행한다. MVC 프레임워크는 이러한 두 가지 구성요소 모두에 대한 기본 구현을 포함하고 있다. 이 구성요소들의 동작방식을 변경하거나 제어하는 방법을 잠시 후에 살펴볼 예정이다. 또한 이러한 구성 요소를 완전히 대체하는 방법과 사용자 지정 로직을 사용하는 방법에 대해서도 다뤄볼 것이다. 표19-1은 이번 장에서 설명할 내용들을 간략하게 정리하여 보여주고 있다. 


표19-1 19장 요약

주제								내용															목록
사용자 지정 컨트롤러 팩토리 만들기			IControllerFactory 인터페이스를 구현한다.									1 - 7

기본 컨트롤러 팩토리 안에서 네임스페이스의 우선 	DefaultNamespaces 컬렉션을 사용한다.									8
순위 정하기

사용자 지정 컨트롤러 활성기 만들기			IControllerActivator 인터페이스를 구현한다.									9 - 11

사용자 지정 액션 호출자 만들기				IActionInvoker 인터페이스를 구현한다.										12 - 14

액션 메서드명과 동일하지 않은 액션 이름 지정하기	ActionName 어트리뷰트를 적용한다.										15

액션 메서드의 선택 제어하기				액션 메서드 선택기 적용												16

메서드가 액션으로 사용되지 않도록 방지하기		NoAction 어트리뷰트를 사용한다.										17

사용자 지정 액션 메서드 선택기 만들기			ActionMethodSelectorAttribute 클래스를 상속받는다.							18 - 21

존재하지 않는 액션 메서드를 이용해서 요청에 응답	컨트롤러에서 HandleUnknownAction 메서드를 재정의 한다						22
하기

컨트롤러의 세션 사용 방식 제어하기			IControllerFactory 내부에서 SessionStateBehavior 열거형 값을 반환하거나 컨트롤러 클래스에	23, 24
								SessionState 어트리뷰트를 적용한다.			

입력을 기다리는 동안 컨트롤러가 작업자 스레드를	비동기 컨트롤러를 생성한다.											25 - 30
블록하지 않게 하기



※ 예제 프로젝트 준비하기

이번 장의 예제들을 살펴보기 위해서 Empty 템플릿을 기반으로 ControllerExtensibility라는 프로젝트를 하나 새롭게 생성했는데, 프로젝트 생성 시에 MVC 옵션을 체크해서 MVC 참조 및 관련 폴더들을 추가하도록 지정했다. 더해서 이번 장에서 사용할 간단한 수준의 컨트롤러들이 몇 가지 필요한데 이를 이용하여 다양한 종류의 확장성 기능을 보여주고자 하기 때문이다. 이를 위해서 Models 폴더에 Result.cs라는 파일을 추가하고 목록 19-1과 같이 Result 클래스를 정의하도록 하자


목록 19-1 Result.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace ControllerExtensibility.Models
{
    public class Result
    {
        public string ControllerName {get; set;}

        public string ActionName {get; set;}

    }
}

다음으로 /Views/Shared 폴더를 만들고(아직 존재하지 않는다면) Result.cshtml라는 새로운 뷰를 추가한다. 이 뷰는 컨트롤러에 존재하는 모든 액션 메서드들이 공통적으로 랜더할 뷰로 파일의 내용은 목록 19-2와 같다. 

목록 19-2 Result.cshtml 파일의 내용

@model ControllerExtensibility.Models.Result
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Result</title>
</head>
<body>
    <div>
        Controller: @Model.ControllerName
    </div>
    <div>Action: @Model.ActionName</div>
</body>
</html>


이 뷰는 목록 19-1에 정의된 Result 클래스를 모델로 사용하며, ControllerName 속성과 ActionName 속성의 값을 출력하고 있다. 마지막으로 몇 가지 기본적인 컨트롤러들이 필요한데 목록 19-3은 그 중 Product 컨트롤러를 보여주고 있다. 


목록 19-3 ProductController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ControllerExtensibility.Models;
namespace ControllerExtensibility.Controllers
{
    public class ProductController : Controller
    {
        
        public ViewResult Index()
        {
            return View("Result",new Result { ControllerName = "Product", ActionName = "Index" });
        }

        public ViewResult List()
        {
            return View("Result", new Result { ControllerName = "Product", ActionName = "List" });
        }
    }
}

그리고 목록 19-4는 Customer 컨트롤러의 내용이다. 



목록 19-4 CustomerController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ControllerExtensibility.Models;
namespace ControllerExtensibility.Controllers
{
    public class CustomerController : Controller
    {
        
        public ViewResult Index()
        {
            return View("Result", new Result { ControllerName = "Customer", ActionName = "Index" });
        }

        public ViewResult List()
        {
            return View("Result", new Result { ControllerName = "Customer", ActionName = "List" });
        }
    }
}


이 컨트롤러들은 단지 Result.cshtml 뷰를 통해서 자신이 호출되었음을 나타내는 것 외에는 별다른 작업을 하지 않는다. 




※ 시작 URL 설정하기

이번 장에서도 응용프로그램에 대한 루트 URL이 지정된 상태로 Visual Studio를 시작하고자 한다. 그렇게 하는 것이 현재 수정하고 있는 파일을 기반으로 실행해야 하는 URL을 생각해내는 것보다 효율적이니 말이다. 따라서 Visual Studio의 [프로젝트(Project)] 메뉴에서 [ControllerExtensibility 속성(ControllerExtensibility Properties)]을 선택하고 [웹(Web)] 탭으로 이동한 다음 [시작 작업(Start Action)]영역에 위치한 [특정 페이지(Specific Page)] 옵션을 체크하도록 하자. 값을 입력할 필요는 없다. 단지 옵션을 체크하기만 하면 된다. 



※ 사용자 지정 컨트롤러 팩토리 만들기

MVC 프레임워크의 다른 부분들과 마찬가지로 컨트롤러 팩토리가 동작하는 방식을 이해하기에 가장 좋은 방법은 직접 사용자 지정 구현을 만들어보는 것이다. 그러나 실제 프로젝트에서 이런 작업을 수행하는 것을 권장하지는 않는다. 이미 내장되어 있는 팩토리를 확장하여 사용자 지정 동작(Behavior)을 만드는 것이 훨씬 쉬울테니 말이다. 그렇다고는 하더라도 공부삼아 사용자 지정 구현을 작성해보는 것은 시도해볼만한 일이다. 그 과정을 통해서 MVC 프레임워크가 컨트롤러의 인스턴스를 생성하는 방법을 대략적으로나마 엿볼수 있을 테니 말이다. 컨트롤러 팩토리는 목록 19-5 에서 볼 수 있는 IControllerFactory 인터페이스를 구현해야 한다. 



목록 19-5 IControllerFactory 인터페이스


using System.Web.Routing;
using System.Web.SessionState;

namespace System.Web.Mvc
{
	public interface IControllerFactory
	{
		IController CreateController(RequestContext requestContext, string controllerName);

		SessionStateBehavior GetControllerSessionBehavior(RequestContext requestContext, string controllerName);

		void ReleaseController(IController controller);
	}
}


이어지는 절들에서는 간단한 사용자 지정 컨트롤러 팩토리를 만들어보고 IControllerFactory 인터페이스에 정의되어 있는 각각의 메서드들에 대한 구현도 살펴보도록 하겠다. 우선 프로젝트 루트의 하위에 Infrastructure라는 폴더를 만들고 새로운 클래스 파일인 CustomControllerFactory.cs를 추가하도록 하자. 그리고 파일에 목록 19-6과 같이 사용자 지정 컨트롤러 팩토리를 작성한다. 


목록 19-6 CustomControllerFactory.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.SessionState;
using ControllerExtensibility.Controllers;

namespace ControllerExtensibility.Infrastructure
{
    public class CustomControllerFactory : IControllerFactory
    {
        public IController CreateController(RequestContext requestContext, string controllerName)
        {
            Type targetType = null;
            switch (controllerName)
            {
                case "Product":
                    targetType = typeof(ProductController);
                    break;
                case "Customer":
                    targetType = typeof(CustomerController);
                    break;
                default:
                    requestContext.RouteData.Values["controller"] = "Product";
                    targetType = typeof(ProductController);
                    break;
            }

            return targetType == null ? null : (IController)DependencyResolver.Current.GetService(targetType);
        }

        public SessionStateBehavior GetControllerSessionBehavior(RequestContext requestContext, string controllerName)
        {
            return SessionStateBehavior.Default;
        }

        public void ReleaseController(IController controller)
        {
            IDisposable disposable = controller as IDisposable;
            if (disposable != null)
            {
                disposable.Dispose();
            }
        }
    }
}


이 인터페이스에서 가장 중요한 메서드는 CreateController 인데 이는 요청을 처리할 컨트롤러가 필요한 경우에 MVC 프레임워크가 호출하는 메서드다. 이 메서드의 매개변수는 RequestContext 개체와 문자열로 RequestContext 개체는 팩토리가 요청의 상세 정보를 살펴보기 위해서 사용하며, 문자열 매개변수는 라우트된 URL에서 가져온 컨트롤러 변수의 값이다. RequestContext 클래스는 표 19-2에서 기술되어 있는 속성들을 갖고 있다. 


표 19-2 RequestContext 속성

이름				형식					설명
HttpContext			HttpContextBase			HTTP 요청에 대한 정보를 제공한다.

RouteData			RouteData				요청과 매치되는 라우트에 대한 정보를 제공한다. 



이 인터페이스를 직접 구현하여 사용자 지정 컨트롤러를 생성하는 것을 권장하지 않는 이유중 하나는 웹 응용프로그램에서 컨트롤러 클래스를 찾아서 그 인스턴스를 생성하는 과정이 상당히 복잡하기 때문이다. 즉 동적으로 일관되게 컨트롤러들을 파악할 수 있어야 하며, 그 밖의 모든 잠재적인 문제점들도 직접 해결해야 한다. 예를 들면 서로 다른 네임스페이스에 존재하는 동일한 이름의 클래스들을 식별할 수 있어야 하고, 생성자 예외 등과 같은 다양한 문제들을 모두 직접 해결해야 한다는 뜻이다. 

이번 예제 프로젝트에는 단 두개의 컨트롤러만 존재하기 때문에 그 인스턴스들을 직접 생성하고 있다. 다시 말해서 컨트롤러 팩토리 안에서 클래스 이름을 직접 하드코딩하고 있다는 뜻인데 사실 이방식은 실제 프로젝트에서는 전혀 권장되지 않는 방법이지만 예제 코드가 복잡해지는 것을 피할수 있기에 여기서는 그렇게 하려고 한다. 


이 CreateController 메서드의 목표는 현재 요청을 처리할 수 있는 컨트롤러의 인스턴스를 생성하는 것이다. 이를 수행하는 데 있어 별다른 제약사항은 없지만 메서드 결과로 반드시 IController 인터페이스를 구현하는 개체를 반환해야 한다는 규칙만은 지켜야 한다. 

또한 여러분이 지금까지 이 책에서 보아온 규약들이 존재하는 이유도, 기본 컨트롤러 팩토리가 그렇게 작성되어 있기 때문이다. 가령 목록 19-6의 코드에도 그런 규약들 중 하나가 반영되어 있는 것을 볼 수 있는데 바로 특정 컨트롤러에 대한 요청을 받았을 때 클래스 이름에 Controller를 덧붙이고 있는 것이 그것이다. 그 결과 Product에 대한 요청은 ProductController 클래스의 인스턴스로 연결되게 된다. 

컨트롤러 팩토리 클래스를 직접 작성할 경우에는 가급적 MVC 프레임워크의 규약을 따르는 것이 바람직하다 물론 원한다면 이를 무시하고 자신의 프로젝트에 맞는 자체 규약을 만들어서 사용하는 것도 가능하기는 하지만 단지 그런 이유 때문에 자체 규약까지 만드는 것은 그다지 좋은 생각은 아니라고 본다. 그러나 그와는 별개로 MVC 프레임워크가 얼마나 유연할수 있는지를 살펴보기 위한 용도로는 꽤 의미가 있을 것이다. 




※ 대체 컨트롤러 다루기

사용자 지정 컨트롤러 팩토리는 CreateController 메서드의 결과로 반드시 IController 인터페이스의 구현체를 반환해야만 한다. 그렇지 않으면 사용자에게 오류가 출력될 것이니 말이다. 이는 처리하려는 요청이 프로젝트에 존재하는 그 어떠한 컨트롤러와 도 연결되지 않는 경우에 대응하기 위해서 대비책이 필요할 수도 있다는 의미이다. 이러한 상황을 해결하기 위해서는 뭔가 정책을 만들어야 하는데 예를 들면 오류 메시지를 렌더하는 특별한 용도의 컨트롤러를 작성할 수도 있다. 혹은 지금부터 살펴보려는 것처럼 요청을 확실히 존재하는 다른 특정 컨트롤러에 매핑하는 것도 하나의 방법이다. 

이번 예제에서는 요청이 프로젝트에 존재하는 어떠한 컨트롤러와도 매핑되지 않는 경우 ProductController 클래스로 전달하려고 한다. 물론 이 방법이 실제 프로젝트에서 가장 효과적인 방법은 아닐 것이다. 하지만 이는 컨트롤러 팩토리가 요청을 해석하는 방식에 엄청난 유연성을 가지고 있음을 보여주는 좋은 사례다. 게다가 MVC 프레임워크의 다른 요소들이 어떻게 동작하는지도 알아둘 필요가 있다. 

기본적으로 MVC 프레임워크는 컨트롤러 클래스의 이름을 기반으로 뷰를 선택하는 것이 아니라 라우팅 데이터의 컨트롤러 변수 값을 기반으로 뷰를 선택한다. 그렇기에 이번 예제에서 처럼 컨트롤러 이름에 의해서 구성되는 규약을 따르는 뷰에 대한 대비책을 적용하고자 한다면 controller 라우팅 속성의 값을 다음과 같이 바꿀 필요가 있다. 

...
requestContext.RouteData.Values["controller"] = "Product";
..


이렇게 변경하게 되면 MVC 프레임워크는 사용자가 요청한 URL을 기반으로 하여 라우팅 시스템이 식별해낸 컨트롤러가 아닌 대체 컨트롤러와 연결되어 있는 뷰를 찾게 된다. 

이를 통해서 두 가지 중요한 점을 알 수 있다. 첫 번째는 컨트롤러 팩토리가 요청과 컨트롤러 를 연결하는 책임을 갖고 있을 뿐만 아니라 요청을 변경하여 요청 처리 파이프라인 안에서 이어지는 단계들의 동작을 바꿀 수도 있다는 것이다. 이렇듯 컨트롤러 팩토리는 MVC 프레임워크의 중요한 특징이며 대단히 강력한 요소인 것이다. 

두 번째는 여러분의 컨트롤러 팩토리 안에서 어떠한 규약을 따를 것인지는 순전히 여러분의 자유이지만 MVC 프레임워크의 그 밖의 규약에 대해서도 알아둘 필요가 있다는 점이다. 다른 구성요소들도 사용자 지정 코드로 대체될 수 있기 때문에(가령 20장에서는 뷰에 대한 사용자 지정 코드 대체 방법을 살펴볼 것이다) 그러한 구성요소들을 개발하여 서로 독립적으로 사용될 수 있도록 만들기 위해서는 가능한 한 많은 규약들을 따르는 것이 바람직하다. 



※ 컨트롤러 클래스 인스턴스 만들기

컨트롤러 클래스의 인스턴스를 만드는 방법에 뭔가 특별한 규칙이 있는 것은 아니지만 6장에서 소개했던 의존성 해결자를 사용하여 인스턴스를 만드는 것도 좋은 방법이다. 이 방식은 사용자 지정 컨트롤러 팩토리가 요청과 컨트롤러 클래스를 매핑하는 작업에만 집중할 수 있게 만들어주며 전체 응용프로그램에 걸쳐 의존성 주입과 같은 문제를 개별적으로 해결할수 있게 해주기 때문이다. 다음은 DependecyResolver 클래스를 사용하여 컨트롤러의 인스턴스를 만드는 방법을 보여준다. 

...
return targetType == null? null : (IController)DependencyResolver.Current.GetService(targetType);
..

정적 속성인 DependencyResolver.Current는 GetService 메서드를 정의하고 있는 IDependencyResolver 인터페이스의 구현을 반환한다. 이 메서드에 System.Type 개체를 전달하여 그에 해당하는 형식의 인스턴스를 얻어낼 수 있다. 이 GetService 메서드에는 강력한 형식을 지원하는 버전도 존재하지만 어떤 형식을 사용해야 하는지를 미리 알 수 없기 때문에 이번 예제에서는 Object를 반환하는 버전을 사용한 뒤 IController로 명시적인 형변환을 수행한 것이다. 



Note:
목록 19-5에서는 클래스들 간의 강력한 결합(tight coupling) 문제를 해결하기 위해서 의존성 해결자를 사용하고 있지는 않음에 주목하자. 그보다는 의존성 해결자에 지정한 형식의 인스턴스를 생성하도록 요청하여 컨트롤러 클래스가 갖고 있는 의존성을 검사하고 해결하게 하고 있다. 이번 장에서는 Ninject를 구성하지 않았는데 기본 해결자를 사용하여 매개변수가 없는 생성자를 찾아서 호출하는 식으로 간단하게 인스턴스를 생성해볼 것이기 때문이다. 하지만 컨트롤러 팩토리가 DependencyResolver 클래스를 사용하도록 만들어 두었기에 언젠가 Ninject와 같이 좀 더 진보된 의존성 해결자가 프로젝트에 추가되어야 하는 경우에도 별다른 문제 없이 사용할수 있을 것이다. 





※ 그밖의 인터페이스 메서드 구현하기

IControllerFactory 인터페이스에는 두 개의 또다른 메서드가 존재한다. 

* GetControllerSessionBehavior 메서드는 MVC 프레임워크에 의해서 세션 데이터가 컨트롤러에서 유지되어야 하는지를 결정하기 위해서 사용된다. 이번 장의 후반에서 세션을 사용하지 않는 컨트롤러 다루기를 설명할 때 이러한 내용을 다룰 예정이다. 

*  ReleaseController 메서드는 CreateController 메서드에 의해서 생성된 컨트롤러 개체가 더 이상 필요하지 않은 경우에 호출된다. 이번 장의 예제 구현에서는 먼저 컨트롤러가 IDisposable 인터페이스를 구현하는지를 확인하고 있다. 만일 IDisposable 인터페이스를 구현하고 있다면 해제가 가능한 모든 자원들을 해제하기 위해서 Dispose 메서드를 호출한다. 


이번 예제에서 작성한 GetControllerSessionBehavior 메서드와 ReleaseController 메서드의 구현은 대부분의 프로젝트에 적합하며 그대로 사용될 수 있다(다만 사용 가능한 옵션들을 이해하기 위해서는 이번 장의 후반부에서 설명하는 세션을 사용하지 않는 컨트롤러에 관한 내용을 숙지해야 한다.)



※ 사용자 지정 컨트롤러 팩토리 등록하기


MVC 프레임워크가 사용자 지정 컨트롤러 팩토리를 사용하도록 지정하려면 ControllerBuilder 클래스를 사용해야 한다. 즉 응용프로그램이 시작될 때 사용자 지정 컨트롤러 팩토리들을 등록할 필요가 있는데 목록 19-7에서 볼 수 있는 것처럼 Global.asax 파일에 있는 Application_Start 메서드에서 등록하면 된다. 




목록 19-7 Global.asax 파일에서 사용자 지정 컨트롤러 팩토리 등록하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using ControllerExtensibility.Infrastructure; //추가
namespace ControllerExtensibility
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);

            ControllerBuilder.Current.SetControllerFactory(new CustomControllerFactory()); //추가
        }
    }
}


일단 컨트롤러 팩토리가 등록되고 나면 응용프로그램이 수신하는 모든 요청들을 처리하는 역할을 수행할 것이다. 응용프로그램을 실행시켜보면 사용자 지정 팩토리의 효과를 확인해볼수 있을 텐데 브라우저는 설정에 따라 루트 URL 을 요청할 것이고 이는 라우팅 시스템에 의해서 Home 컨트롤러로 매핑될 것이다. 그러면 사용자 지정 팩토리가 ProductController 클래스의 인스턴스를 생성하여 Home 컨트롤러에 대한 요청을 처리하게 될 것이며 그림 19-2에서 볼 수 있는 것과 같은 결과가 나타날 것이다. 