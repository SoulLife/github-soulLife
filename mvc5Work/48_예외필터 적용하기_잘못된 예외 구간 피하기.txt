※ 예외 필터 적용하기
예외 필터를 테스트하기에 앞서 먼저 약간의 기초 작업을 해야 할 필요가 있는데 우선 예제 프로젝트에 Content 폴더를 생성해야 하고, 이 폴더에 RangeErrorPage.html 이라는 파일을 만들어야 한다. 이파일은 예외가 처리될 경우에 사용자를 전송할 파일로 이 파일의 내용은 목록 18-22와 같다. 

목록 18-22 RangeErrorPage.html 파일의 내용

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Range Error</title>
</head>
<body>
    <h2>Sorry></h2>
    <span>One of the arguments was out of the expected range.</span>
</body>
</html>

그런 다음 시연을 위해서 Home 컨트롤러에 예외를 던질 액션 메서드를 추가해야 한다. 이렇게 변경을 마친 코드는 목록 18-23과 같다. 

목록 18-23 HomeController.cs 파일에 새로운 액션 추가하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Filters.Infrastructure;
namespace Filters.Controllers
{
    public class HomeController : Controller
    {
        [Authorize(Users = "admin")]
        public string Index()
        {
            return "This is the Index action on the Home controller";
        }

        [GoogleAuth]
        [Authorize(Users = "bob@google.com")]
        public string List()
        {
            return "This is the List action on the Home controller";
        }
	//하단 아래 메서드 추가
        public string RangeTest(int id)
        {
            if (id > 100)
            {
                return String.Format("The id value is: {0}", id);
            }
            else
            {
                throw new ArgumentOutOfRangeException("id", id, "");
            }
        }
    }
}


응용프로그램을 실행하고 /Home/RangeTest/50 URL로 이동해보면 기본 예외 처리에 따른 결과를 볼 수 있을 것이다. Visual Studio가 MVC 프로젝트를 생성할 때 기본적으로 구성하는 라우팅에는 id라는 세그먼트 변수가 존재하는데 이번 URL의 경우에는 그 변수의 값이 50으로 설정될 것이기에 그림 18-3과 같은 응답이 나타나게 될 것이다(라우팅과 URL 세그먼트에 대해서는 15장과 16장에서 자세히 다루고 있다)



Note:
만약 F5 키를 눌러서 이번 예제 응용프로그램을 실행했다면 Visual Studio가 예외를 탐지해서 응용프로그램의 실행을 제어할 수있도록 디버거를 수행할 것이다. 다시 F5키를 누르거나 [계속(Continue)] 버튼을 클릭하여 응용프로그램이 계속해서 실행되게 해서 기본 예외 처리가 동작하는 방식을 살펴보도록 하자. 또는 컨트롤 + F5 키를 눌러서 디버그하지 않고 시작하면 디버거에의한 영향 없이 바로 결과 화면을 볼 수 있을 것이다. 



이제 직접 구현한 예외 필터를 목록 18-24에서 볼 수 있는 것처럼 컨트롤러나 개별 액션에 적용할 수 있다. 

목록 18-24 HomeController.cs 파일에 필터 적용하기

        [RangeException]
        public string RangeTest(int id)
        {
            if (id > 100)
            {
                return String.Format("The id value is: {0}", id);
            }
            else
            {
                throw new ArgumentOutOfRangeException("id",id,"");
            }
        }

이제 응용프로그램을 다시 실행하고 /Home/RangeTest/50 URL로 이동해보면 그림 18-4와 같이 필터가 적용된 결과를 확인할 수 있을 것이다. 




※ 뷰를 이용해서 예외 응답하기
물론 처리해야 하는 예외에 따라서는 이전 예제에서 처럼 정적인 페이지를 보여주는 것이 간단하고 안전한 방법일 수도 있다. 하지만 이 방식은 그다지 바람직하지 않은 문제를 야기하게 될 수도 있는데 사용자가 메시지를 확실히 보게 되기는 하겠지만 지나치게 평범한 통보에 식상한 사용자가 응용프로그램을 사용하지 않기로 마음먹을 수도 있기 때문이다. 

그 대안의 하나로 뷰를 사용하여 문제에 대한 상세 내용을 보여주고 약간의 상황 설명과 지켜야할 사항들을 사용자에게 안내하는 방법이 있다. 이러한 예를 살펴보기 위해서 목록 18-25와 같이 RangeExceptionAttribute 클래스를 일부 수정해 보았다. 

목록 18-25 RangeExceptionAttribute.cs 파일에서 예외 필터로부터 뷰 반환하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
namespace Filters.Infrastructure
{
    public class RangeExceptionAttribute : FilterAttribute, IExceptionFilter
    {
        public void OnException(ExceptionContext filterContext)
        {
            if (!filterContext.ExceptionHandled && filterContext.Exception is ArgumentOutOfRangeException)
            {
                int val = (int)(((ArgumentOutOfRangeException)
                    filterContext.Exception).ActualValue);
                filterContext.Result = new ViewResult
                {
                    ViewName = "RangeError",
                    ViewData = new ViewDataDictionary<int>(val)
                };
                filterContext.ExceptionHandled = true;
            }
        }
    }
}

목록 18-25에서는 ViewResult 개체를 만들고 ViewName 속성과 ViewData 속성의 값을 설정하여 뷰의 이름과 뷰에 전달될 모델 개체를 지정하고 있다. 코드가 다소 지저분해 보이는 이유는 Controller 클래스에 정의되어 있는 View 메서드(액션 메서드에서 사용했던 메서드)를 사용하지 않고 직접적으로 ViewResult 개체를 만들어서 사용하고 있기 때문이다. 이번 코드에 대해서는 그다지 깊이 있게 살펴보지는 않을 예정인데, 그 이유는 뷰에 대해서는 20장에서 자세히 다루고 있고 좀 더 세련되게 동일한 효과를 얻기 위해서 사용할 수 있는 내장 예외 필터를 잠시 뒤의 절에서 살펴볼 것이기 때문이다. 그렇기에 여기에서는 내부 적으로 어떻게 동작하는지를 살펴보는 일에만 집중하고자 한다. 

이 ViewResult 개체는 RangeError라는 이름의 뷰를 지정하고 있으며, 예외를 일으키는 int 값 인자를 뷰 모델 개체로 전달하고 있다. 

이번에는 오류의 상세 내용을 사용자에게 보여주기 위해서 이번 장의 앞부분에서 추가했던 Views/Shared 폴더에 목록 18-26과 같은 내용으로 구성된 RangeError.cshtml 이라는 새로운 뷰 파일을 생성한다. 

목록 18-26 RangeError.cshtml 뷰 파일의 내용

@model int

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Range Error</title>
</head>
<body>
    <div>
        <h2>Sorry</h2>
        <span>The value @Model was out of the expected range. </span>
        <div>
            @Html.ActionLink("Change value and try again", "Index")
        </div>
    </div>
</body>
</html>


이 뷰 파일은 표준 HTML과 Razor 태그들을 사용하여 사용자에게 조금이나마 더 도움이 되는 메시지를 나타내고 있다. 다만 현재의 예제 응용프로그램은 기능적으로 다소 부족한 편인데 이는 사용자가 문제를 해결하는 데 도움이 될만한 기능을 제공하고 있지 않기 때문이다. 단지 뷰가 제공해주는 본래의 기능들을 모두 사용할 수 있다는 점을 보여주기 위해서 ActionLink도우미 메서드를 사용하여 다른 액션 메서드로 이동하는 링크를 생성하고 있을 뿐이다. 다시 응용프로그램을 시작하고 /Home/RangeTest/50 URL로 이동해보면 그림 18-5와 같은 결과를 볼 수 있을 것이다. 



※ 잘못된 예외 구간 피하기

이처럼 뷰를 활용하여 오류를 출력하는 방식의 장점은 레이아웃을 사용하여 응용프로그램의 다른 부분들과 어울리도록 오류 메시지를 출력할 수도 있고 사용자에게 잘못된 점이 무엇이고 어떤 작업을 할 수 있는지를 알려주는 데 도움이 되는 동적 콘텐트를 생성할 수도 있다는 점이다. 

반면 단점은 뷰 때문에 또 다른 예외가 일어날 가능성은 없는지 확실하게 테스트를 해야만 한다는 점이다. 테스트가 주로 응용프로그램의 핵심 기능에만 집중되다 보니 발생할 가능성이 있는 또 다른 오류 상황에 대해서는 테스트를 소홀히 하는 경우가 의외로 자주 있는 편이다. 이와 관련된 간단한 예를 보여주기 위해서 목록 18-27과 같이 RangeError.cshtml 뷰에 Razor 코드들을 추가했는데 이로 인해서 예외가 발생하게 될 것이다. 

목록 18-27 RangeError.cshtml 파일에 예외를 일으키는 코드 추가하기

@model int
<!-- 하단 추가-->
    @{
        var count = 0;
        var number = Model / count;
    }

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Range Error</title>
</head>
<body>
    <div>
        <h2>Sorry</h2>
        <span>The value @Model was out of the expected range. </span>
        <div>
            @Html.ActionLink("Change value and try again", "Index")
        </div>
    </div>
</body>
</html>


이제 이 뷰가 렌더될 경우 방금 추가한 코드로 인해서 DivideByZeroException 예외가 발생할 것이다. 응용프로그램을 실행한 다음 /Home/RangeTest/50 URL로 다시금 이동해보면 그림 18-6과 같이 컨트롤러에 의해서 예외가 던져지는 것이 아니라 뷰가 렌더되는 동안에 예외가 던져지는 것을 확인할 수 있을 것이다. 

이번 예제는 그다지 현실적이지는 않지만 뷰에 문제가 있을 경우 이러한 상황이 발생할 수 있음을 보여준다. 사용자는 그들의 요구하는 것과는 전혀 관계 없는 당황스러운 오류를 보게 되는 것이다. 그렇기에 뷰에 의존적인 예외 필터를 사용하는 경우에는 해당 뷰를 철저하게 테스트해야만 한다. 


※ 내장 예외 필터 사용하기

MVC 프레임워크 내부에서 일어나는 일들을 이해하는 것이 상당히 유용하다고 생각하기에 이전 절에서는 직접 예외 필터를 생성하는 방법에 대해서 살펴보았다. 하지만 실제 프로젝트에서는 자체적인 필터를 직접 만들 필요가 그다지 없는 편인데 이는 MVC 프레임워크에 이미 HandleErrorAttribute라는 클래스(IExceptionFilter 인터페이스를 구현하는 내장된 필터)가 존재하고 있기 때문이다. 이 필터를 사용할 경우 표18-8에서 볼 수 있는 속성들을 사용하여 예외뿐만 아니라 뷰의 이름과 레이아웃까지도 지정할 수가 있다. 

표 18-8 HandleErrorAttribute 클래스의 속성

이름				형식			설명
ExceptionType		Type			필터에 의해 처리되는 예외 형식 지정된 예외 형식으로부터 파생된 예외들만 이 필터에 의해서 처리된다. 그 밖의
							다른 예외들은 무시될 것이다. 기본 값은 System.Exception 이며, 이는 기본적으로 모든 표준 예외들을 처리한다는 							것을 의미한다.

View				string			필터가 렌더할 뷰 템플릿의 이름. 만일 값을 지정하지 않으면 기본값으로 Error를 사용한다. 그렇기에 기본적으로 
							이는 /Views/<현재 컨트롤러명>/Error.cshtml 혹은 /Views/Shared/Error.cshtml를 렌더할 것이다. 

Master			string			필터의 뷰를 렌더하는 경우에 사용되는 레이아웃의 이름. 값을 지정하지 않는다면 뷰는 기본 레이아웃 페이지를 
							사용한다. 



이 필터는 ExceptionType 속성에 지정된, 처리되지 않은 예외 형식을 만나게 되면 View 속성에 지정된 뷰를 렌더하게 된다(이때 Master 속성에 지정된 레이아웃이나 기본 레이아웃이 함께 적용된다)



※ 내장 예외 필터를 사용하기 위해 준비하기

HandleErrorAttribute 필터는 목록 18-28에서 볼 수 있는 것처럼 Web.config 파일에 존재하는 <system.web> 노드 내부에 customErrors 항목을 추가하여 사용자 지정 오류를 사용하도록 설정한 경우에만 동작한다. 

목록 18-28 Web.config 파일에서 사용자 지정 오류를 사용하도록 설정하기

<system.web>
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" />
	  <authentication mode="Forms">
		  <forms loginUrl="~/Account/Login" timeout="2880">
			  <credentials passwordFormat="Clear">
				  <user name="user" password="secret" />
				  <user name="admin" password="secret"/>
			  </credentials>
		  </forms>
	  </authentication>
	  <customErrors mode="On" defaultRedirect="/Content/RangeErrorPage.html" />
  </system.web>

이 customErrors 노드의 mode 어트리뷰트의 기본값은 RemoteOnly이며 이는 로컬 머신에서 연결할 경우에는 항상 노란색의 표준 오류 페이지가 보여질 것임을 의미한다. 그러나 이번 예제에서는 이 점이 문제가 될 수 있는데 우리가 사용하고 있는 IIS Express는 오직 로컬 연결만을 허용하기 때문이다. 그렇기에 목록 18-28에서는 이 mode 어트리뷰트를 On으로 설정하여 연결이 어디에서 이루어지던 오류 처리 정책이 항상 적용되도록 지정하고 있다. defaultRedirect 어트리뷰트에는 다른 모든 방법이 실패할 경우에 출력될 기본 콘텐트 페이지를 지정한다. 


※ 내장 예외 필터 적용하기

목록 18-29는 Home 컨트롤러에 HandleError 필터를 적용한 모습을 보여준다. 

목록 18-29 HomeController.cs에서 HandleErrorAttribute 필터 적용하기

        [HandleError(ExceptionType = typeof(ArgumentOutOfRangeException),View = "RangeError")]
        public string RangeTest(int id)
        {
            if (id > 100)
            {
                return String.Format("The id value is: {0}", id);
            }
            else
            {
                throw new ArgumentOutOfRangeException("id",id,"");
            }
        }


목록 18-29에서는 사용자 지정 필터를 다룰 때 다루었던 상황 즉 ArgumentOutOfRangeException 이 발생하는 경우 RangeError 뷰를 사용자에게 출력했던 상황을 다시금 재연하고 있다. 

이 HandleErrorAttribute 필터는 뷰가 렌더될 때 HandleErrorInfo 뷰 모델 개체를 전달해주는데 이 개체는 뷰에서 사용할 수 있는 추가적인 정보들을 제공해주는 예외를 기반으로 구성된 래퍼 개체다. 표 18-9는 HandleErrorInfo 클래스가 정의하고 있는 속성들을 보여준다. 

표 18-9 HandleErrorInfo 클래스의 속성

이름			형식			설명
ActionName		string			예외를 생성한 액션 메서드의 이름을 반환한다

ControllerName	string			예외를 생성한 컨트롤러의 이름을 반환한다. 

Exception		Exception		예외를 반환한다. 

목록 18-30은 RangeError.cshtml 뷰를 수정하여 이러한 모델 개체를 사용하도록 바꾼 코드를 보여준다. 



목록 18-30 RangeError.cshtml 파일에서 HandleErrorInfo 모델 개체 사용하기
@model HandleErrorInfo
    @{
        ViewBag.Title = "Sorry, there was a problem!";
    }

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Range Error</title>
</head>
<body>
    <div>
        <h2>Sorry</h2>
        <span>The value @(((ArgumentOutOfRangeException)Model.Exception).ActualValue) was out of the expected range. </span>
        <div>
            @Html.ActionLink("Change value and try again", "Index")
        </div>
    </div>
</body>
</html>


이 HandleErrorInfo 클래스는 모든 종류의 예외를 뷰로 전달하기 위해서 사용되는 범용적인 목적의 모델 개체이기 때문에 .ActualValue 속성을 읽기 위해서는 Model.Exception속성의 값을 ArgumentOutOfRangeException 형식으로 형변환해야 할 필요가 있다. 



※ 액션 필터 사용하기

액션(Action)필터는 다양한 용도로 사용될 수 있는 필터다. 이 유형의 액션 필터를 생성하기 위한 내장 인터페이스 즉 IActionFilter 인터페이스는 목록 18-31과 같다. 

목록18-31 IActionFilter 인터페이스

namespace System.Web.Mvc
{
	public interface IActionFilter
	{
		void OnActionExecuting(ActionExecutingContext filterContext);
		void OnActionExecuted(ActionExecutedContext filterContext);
	}
}


이 인터페이스는 두 개의 메서드를 정의하고 있는데 MVC 프레임워크는 액션 메서드가 호출되기에 앞서 OnActionExecuting 메서드를 호출하며, 액션 메서드가 호출된 후에는 OnActionExecuted 메서드를 호출한다. 


※ OnActionExecuting 메서드 구현하기

OnActionExecuting 메서드는 액션 메서드가 불려지기 전에 호출된다. 그렇기에 이 메서드는 요청을 확인하거나 취소하거나 변경하는 등 액션의 수행과 관련된 어떤 행동을 시작하는 기회로서 활용할 수 있다. 이 메서드의 매개변수는 ActionExecutingContext 개체로, 이 개체는 ControllerContext 클래스의 하위 클래스이며 표 18-10 에 정리된 두 가지 추가적인 속성을 정의하고 있다. 

표18-10 ActionExecutingContext 클래스의 속성

이름				형식				설명
ActionDescriptor		ActionDescriptor		액션 메서드의 상세 정보를 제공한다. 

Result				ActionResult			액션 메서드에 대한 결과로 필터는 이 속성에 null이 아닌 값을 설정하여 요청을 취소할 수 있다. 

이 필터를 사용하여 요청 자체를 취소할 수도 있는데, 그렇게 하려면 매개변수의 Result 속성을 액션 결과로 설정하면 된다. 이 필터의 동작을 직접 살펴보기 위해서 예제 프로젝트의 Infrastructure 폴더에 목록 18-32와 같이 CustomActionAttribute.cs라는 이름의 사용자 지정 액션 필터 클래스 파일을 생성해보도록 하자. 

목록 18-32 CustomActionAttribute.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
namespace Filters.Infrastructure
{
    public class CustomActionAttribute :FilterAttribute, IActionFilter
    {
        public void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (filterContext.HttpContext.Request.IsLocal)
            {
                filterContext.Result = new HttpNotFoundResult();
            }
        }

        public void OnActionExecuted(ActionExecutedContext filterContext)
        {
            //아직 구현되지 않음
        }
    }
}

이번 예제에서는 OnActionExecuting 메서드에서 요청이 로컬 머신으로부터 전달된 요청인 지 여부를 검사하고 있으며, 만일 로컬 요청이라면 404-찾을수 없음 을 사용자에게 응답으로 반환하고 있다. 


Note:
목록 18-32를 살펴보면 실제로 동작하는 필터를 만들기 위해서 IActionFlter 인터페이스에 정의되어 있는 메서드 모두를 구현할 필요는 없다는 것을 알 수 있다. 다만 인터페이스를 구현할 경우에는 Visual Studio가 클래스에 자동으로 추가해주는 NotImplementedException을 그대로 방치하지 않도록 주의해야 한다. MVC 프레임워크는 액션 필터에 있는 메서드 모두를 호출하고 예외가 던져지면 예외 필터를 호출할 것이니 말이다. 그렇기에 메서드에 어떠한 로직도 추가할 필요가 없다면 그냥 비어있는 채로 놔두면 된다. 



액션 필터 역시 다른 어트리뷰트들과 마찬가지 방식으로 적용하면 된다. 목록 18-32에서 만든 액션 필터를 직접 사용해보기 위해서 목록 18-33과 같이 새로운 액션 메서드를 Home 컨트롤러에 추가하도록 하자


목록 18-33 HomeController.cs 파일에 새로운 액션 추가하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Filters.Infrastructure;
namespace Filters.Controllers
{
    public class HomeController : Controller
    {
        [Authorize(Users = "admin")]
        public string Index()
        {
            return "This is the Index action on the Home controller";
        }

        [GoogleAuth]
        [Authorize(Users = "bob@google.com")]
        public string List()
        {
            return "This is the List action on the Home controller";
        }

        [HandleError(ExceptionType = typeof(ArgumentOutOfRangeException),View = "RangeError")]
        public string RangeTest(int id)
        {
            if (id > 100)
            {
                return String.Format("The id value is: {0}", id);
            }
            else
            {
                throw new ArgumentOutOfRangeException("id",id,"");
            }
        }
	//추가
        [CustomAction]
        public string FilterTest()
        {
            return "This is the FilterTest action";
        }
    }
}


응용프로그램을 실행하고 /Home/FilterTest URL로 이동해보면 이 필터가 어떻게 동작하는지 확인해볼 수 있다. 브라우저에서 수행되는 요청은 당연히 로컬 연결일 것이기에 이 사용자 지정 액션 필터는 그림 18-7과 같이 브라우저에 404 오류를 나타낼 것이다. 



TIP:
오류가 정말로 필터 때문에 발생하는지 확실하게 검증해보고 싶다면 Home 컨트롤러의 FilterTest 액션 메서드에서 어트리뷰트를 제거한 다음 다시 실행해보면 된다. 