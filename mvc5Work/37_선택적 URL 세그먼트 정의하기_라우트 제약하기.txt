※ 선택적 URL 세그먼트 정의하기
선택적 URL 세그먼트란 기본값이 지정되어 있지 않지만, 사용자가 제공하지 않아도 되는 세그먼트를 말한다. 목록15-19에서 이에 대한 예제를 확인할 수 있는데 기본값을 UrlParameter.Optional로 설정해서 해당 세그먼트 변수가 선택적임을 지정하고 있다. 

목록15-19 RouteConfig.cs 파일에 선택적 URL 세그먼트 지정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}", new { controller = "Home", action = "Index",
                id = UrlParameter.Optional });
        }
    }
}


이 라우트는 id 세그먼트의 제공 유무와는 무관하게 URL에 매치된다. 표15-4는 각각의 URL마다 라우트가 어떻게 동작하는지를 보여준다. 

표15-4 선택적 세그먼트 변수를 이용한 URL 매칭하기

세그먼트	예제 URL											매핑
0		mydomain.com										controller = Home, action = Index
1		mydomain.com/Customer									controller = Customer, action = Index
2		mydomain.com/Customer/List								controller = Customer, action = List
3		mydomain.com/Customer/List/All							controller = Customer, action = List, id = All
4		mydomain.com/Customer/List/All/Delete						세그먼트가 너무 많아서 매치되지 않는다. 

이 표에서 알 수 있듯이 id 변수는 오직 들어오는 URL에 해당하는 세그먼트가 존재하는 경우에만 변수들의 모음에 추가된다. 이 기능은 사용자가 특정 세그먼트 변수에 대한 값을 지정했는지 여부를 알아야 할 필요가 있을 때 유용하다. 선택적 세그먼트 변수에 아무런 값이 제공되지 않았다면, 해당 매개변수의 값은 null이 될 것이다. 목록15-20은 id 세그먼트에 아무런 값도 제공되지 않았을 경우에 대응할 수 있도록 수정된 컨트롤러를 보여준다. 

목록15-20 HomeController.cs 파일에서 선택적 세그먼트 변수 검사하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            ViewBag.Controller = "Home";
            ViewBag.Action = "Index";
            return View("ActionName");
        }

        public ActionResult CustomVariable(string id)
        {
            ViewBag.Controller = "Home";
            ViewBag.Action = "CustomVariable";
            ViewBag.CustomVariable = id ?? "<no value>";
            return View();
        }
    }
}

응용프로그램을 시작한 다음 /Home/CustomVariable 컨트롤러 URL로 이동해보면(id 세그먼트 변수의 값을 정의하지 않았다) 그림15-10과 같은 결과를 확인할 수 있다. 



※ 선택적 URL 세그먼트를 이용해서 관심사의 분리를 강제하기
MVC 패턴에서 관심사의 분리를 중요하게 생각하는 일부 개발자들은 응용프로그램의 라우트 들에서 세그먼트 변수들에 대한 기본값을 지정하는 것을 선호하지 않는다. 만약 이 방식이 문제가 된다면 라우트의 선택적 세그먼트 변수와 C#의 선택적 매개변수를 함께 사용해서 액션 메서드 매개변수의 기본값을 정의하면 된다. 그 예로 목록15-21은 URL에서 값이 제공되지 않았을 때 CustomVariable 액션 메서드에 사용될 id 매개변수에 대한 기본값을 정의하는 방법을 보여주고 있다. 

목록15-21 HomeController.cs 파일에서 액션 메서드 매개변수에 대한 기본값 정의하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            ViewBag.Controller = "Home";
            ViewBag.Action = "Index";
            return View("ActionName");
        }

        public ActionResult CustomVariable(string id = "DefaultId")
        {
            ViewBag.Controller = "Home";
            ViewBag.Action = "CustomVariable";
            ViewBag.CustomVariable = id;
            return View();
        }
    }
}

이 방식을 사용하면 항상 id 매개변수에 대한 값이 제공된다(URL에서 값을 가져오거나 기본 값을 사용한다) 또한 null값을 확인하기 위한 코드도 제거할수 있다. 이 액션 메서드와 목록 15-19에서 정의한 라우트를 함께 사용하면 목록15-22에 정의된 라우트와 기능적으로 동일하게 동작한다. 

목록15-22 이번 예제와 기능적으로 동일한 라우트

...
routes.MapRoute("MyRoute", "{controller}/{action}/{id}", new { controller = "Home", action = "Index",
                id = "DefaultId" });
...

그 차이점은 id 세그먼트 변수에 대한 기본값을 컨트롤러 코드에 정의하느냐 아니면 라우트 정의에 포함시키느냐에 있다. 


※ 단위 테스트 : 선택적 URL 세그먼트
선택적 URL 세그먼트를 테스트할 때 주의해야 할 점은 URL에서 값이 발견되지 않았을 경우 아예 세그먼트 변수 자체가 RouteData.values 컬렉션에 추가되지 않는다는 사실이다. 이는 선택적 매개변수를 포함하고 있는 URL을 테스트하는 경우가 아니라면 익명 형식에 변수를 포함시켜서는 안된다는 뜻이다. 다음은 목록15-21의 라우트를 테스트하기 위해서 변경한 TestIncomingRoutes 메서드를 보여준다. 

...
[TestMethod]
        public void TestIncomingRoutes()
        {
            //기대하고 있는 URL을 검사한다

            TestRouteMatch("~/", "Home", "Index");
            TestRouteMatch("~/Customer", "Customer", "Index");
            TestRouteMatch("~/Customer/List", "Customer", "List");
            TestRouteMatch("~/Customer/List/All", "Customer", "List", new { id = "All" });
            TestRouteFail("~/Customer/List/All/Delete");
        }
...



※ 가변 길이를 갖는 라우트 정의하기
URL 패턴의 보수적인 성향을 완화시킬수 있는 또 다른 방법은 가변적인 개수로 구성된 URL 세그먼트들을 허용하는 것이다. 이 방식을 사용하면 임의의 길이를 갖고 있는 URL을 단일 라우트에 매치시킬수 있다. 목록15-23에서 볼 수 있는 것처럼 세그먼트 변수들 중 하나를 catchall이라는 이름으로 지정하고, 그 앞에 에스터리스크(*)를 붙이면 가변적인 세그먼트를 지정할 수 있다. 

목록15-23 RouteConfig.cs 파일에 Catchall 변수 지정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new { controller = "Home", action = "Index",
                id = UrlParameter.Optional });
        }
    }
}


이전 예제의 라우트에 catchall 세그먼트 변수를 추가하여 기능을 확장했는데, 이 변수를 catchall이라 부르도록 하자 이제 라우트는 URL에 포함되어 있는 세그먼트의 개수나 세그먼트의 값에 관계 없이 모든 URL들과 매치될 것이다. 첫 세그먼트부터 세 번째 세그먼트까지는 각각 컨트롤러 액션 id 변수에 값을 설정하는 데 사용된다. 만약 URL에 더 많은 세그먼트가 존재한다면 그 세그먼트들은 전부 catchall 변수에 할당된다. 표15-5를 참고하기 바란다. 

표15-5 Catchall 세그먼트 변수를 사용하여 URL 매칭하기

세그먼트	예제 URL											매핑
0		/												controller = Home, action = Index
1		/Customer											controller = Customer, action = Index
2		/Customer/List										controller = Customer, action = List
3		/Customer/List/All										controller = Customer, action = List, id = All
4		/Customer/List/All/Delete									controller = Customer, action = List, id = All, catchall = Delete
5		/Customer/List/All/Delete/Perm								controller = Customer, action = List, id = All, catchall = 																Delete/Perm

이 라우트의 URL 패턴과 매치될 수 있는 세그먼트의 개수에는 제한이 없다. catchall 변수를 통해서 캡처된 세그먼트들은 세그먼트/세그먼트/세그먼트의 형태로 표현된다는 점에 주의하자. 이 문자열을 각각의 세그먼트들로 분리하는 작업은 직접 수행해야 한다. 



※ 단위 테스트 : Catchall 세그먼트 변수 테스트하기
이 catchall 변수는 일반적인 사용자 지정 변수처럼 처리할 수 있다. 유일한 차이점은 세그먼트/세그먼트/세그먼트 처럼 여러 개의 세그먼트들이 단일 값으로 연결되어 있다는 점뿐이다. 또한 전달 받은 문자열이 / 문자로 시작하거나 끝나지 않는다는 점도 기억해두기 바란다. 다음은 목록15-23에 정의된 라우트와 표 15-5에 제시된 URL들을 이용해서 catchall 세그먼트를 테스트할 수 있도록 변경된 TestIncomingRoutes 메서드를 보여주고 있다. 

....
[TestMethod]
        public void TestIncomingRoutes()
        {
            //기대하고 있는 URL을 검사한다

            TestRouteMatch("~/", "Home", "Index");
            TestRouteMatch("~/Customer", "Customer", "Index");
            TestRouteMatch("~/Customer/List", "Customer", "List");
            TestRouteMatch("~/Customer/List/All", "Customer", "List", new { id = "All" });
            TestRouteMatch("~/Customer/List/All/Delete", "Customer", "List", new { id = "All", catchall = "Delete" });
            TestRouteMatch("~/Customer/List/All/Delete/Perm", "Customer", "List", new { id = "All", catchall = "Delete/Perm" });
        }
....


※ 네임스페이스를 이용해서 컨트롤러의 우선순위 지정하기
MVC 프레임워크는 들어오는 URL이 라우트와 매치되는 경우 컨트롤러 변수의 값을 이용해서 그 값에 적합한 컨트롤러를 찾는다. 예를 들어 컨트롤러 변수의 값이 Home이라면 MVC 프레임워크는 HomeController 라는 컨트롤러를 찾게 된다. 그러나 만약 HomeController라는 이름을 갖고 있는 서로 다른 클래스가 두 개 이상 존재한다면 MVC 프레임워크로서는 어떻게 처리해야 할지를 알수가 없게 되므로 이 값만으로는 컨트롤러의 이름에 적합하지가 않다. 

이 문제를 재현해보기 위해서 예제 프로젝트의 루트에 AdditionalControllers라는 새로운 폴더를 만들고 또 하나의 Home 컨트롤러를 추가한 다음 목록15-24와 같이 코드를 작성하도록 하자. 

목록 15-24 AdditionalControllers/HomeController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.AdditionalControllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            ViewBag.Controller = "Additional Controllers - Home";
            ViewBag.Action = "Index";
            return View("ActionName");
        }
    }
}

이제 응용프로그램을 실행해보면 그림15-11과 같은 오류가 발생할 것이다. 

이런 오류가 발생하는 이유는 MVC 프레임워크가 HomeController라는 이름의 클래스를 검색한 결과 두 개의 클래스를 발견했기 때문이다. 하나는 원래부터 존재하던 RoutesAndUrls.Controllers 네임스페이스의 클래스이고, 다른 하나는 방금 새로 추가한 RoutesAndUrls.AdditionalControllers 네임스페이스에 포함된 클래스다. 그림15-11에 나타난 오류의 내용을 살펴보면 MVC 프레임워크가 어떤 클래스들을 찾아냈는지를 친절하게 알려주고 있다는 것을 알 수 있다. 

이 문제는 생각하는 것보다 자주 발생한다. 특히 다른 개발팀이 만든 컨트롤러 라이브러리를 사용하거나, 타사에서 제공하는 라이브러리를 사용하는 큰 규모의 MVC 프로젝트를 진행하다 보면 빈번하게 발생하는 일이다. 예를 들어 사용자 계정에 관련된 컨트롤러의 이름을 AccountController로 짓는 것은 매우 자연스러운 일이기 때문에 컨트롤러의 이름이 충돌하는 것은 시간 문제라고 볼 수 있다. 

이 문제를 해결하려면 목록 15-25에서 볼 수 있는 것처럼 MVC 프레임워크가 컨트롤러 클래스의 이름을 분석할 때 특정 네임스페이스에 우선 순위를 갖게 만들면 된다. 

목록15-25 RouteConfig.cs 파일에서 네임스페이스 선정 우선순위 지정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new { controller = "Home", action = "Index",
                id = UrlParameter.Optional },new[] { "UrlsAndRoutes.AdditionalControllers" });
        }
    }
}


네임스페이스는 문자열 배열로 지정할 수 있는데 목록15-25에서는 MVC 프레임워크에 가장 먼저 URLsAndRoutes.AdditionalControllers 네임스페이스에서 컨트롤러를 찾도록 지정하고 있다. 

만약 지정한 네임스페이스에서 적합한 컨트롤러를 찾을 수 없다면 MVC 프레임워크는 원래 방식대로 동작해서 사용 가능한 모든 네임스페이스들을 조사하게 된다. 라우트에 이 기능을 추가한 다음 다시 응용프로그램을 실행시켜보면 그림 15-12와 같은 결과를 보게될 것이다. 이 그림에서 루트 URL에 대한 요청이 Home 컨트롤러의 Index 액션 메서드에 대한 요청으로 변환되는 모습을 볼 수 있는데, 이때 Home 컨트롤러에 대한 요청은 AdditionalControllers 네임스페이스에 존재하는 Home 컨트롤러로 전달되게 된다. 

라우트에 추가된 네임스페이스들은 모두 동등한 우선순위를 갖는다. MVC 프레임워크가 첫 번째 네임스페이스부터 검사하고 이어서 두 번째, 세 번째 네임스페이스를 순차적으로 검사하는 것은 아니다. 가령 다음과 같이 라우트에 프로젝트의 두 가지 네임스페이스를 모두 추가했다고 가정해 보자. 
...
routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new { controller = "Home", action = "Index",
                id = UrlParameter.Optional },new[] { "UrlsAndRoutes.AdditionalControllers","UrlsAndRoutes.Controllers" });

그러면 MVC 프레임워크가 라우트에 추가된 모든 네임스페이스들에서 컨트롤러 변수 이름과 일치하는 컨트롤러 클래스를 찾게 되므로 그림15-11과 같은 오류가 다시 발생하게 된다. 특정 네임스페이스에 존재하는 컨트롤러에 우선권을 부여하고 다른 네임스페이스에서도 컨트롤러를 찾아야 한다면 목록15-26처럼 라우트 자체를 여러 개로 만들어야 한다. 

목록15-26 RouteConfig.cs 파일에서 컨트롤 네임스페이스의 우선순위를 제어하기 위해서 여러 개의 라우트 사용하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("AddControllerRoute", "Home/{action}/{id}/{*catchall}", new{ controller = "Home",action = "Index",
                id = UrlParameter.Optional}, new[] { "UrlsAndRoutes.AdditionalControllers"});

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new { controller = "Home", action = "Index",
                id = UrlParameter.Optional },new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}


여기서 첫 번째 라우트는 사용자가 명시적으로 첫 번째 세그먼트를 Home으로 요청할 때 적용되며 AdditionalControllers 폴더에 존재하는 Home 컨트롤러가 그 대상이 된다. 그리고 첫 번째 세그먼트가 지정되지 않은 요청을 비롯한 나머지 다른 모든 요청들은 Controllers 폴더에 존재하는 컨트롤러가 처리하게 된다. 

필요하다면 MVC 프레임워크가 지정된 네임스페이스에서만 컨트롤러를 찾게 할 수도 있다. 만약 지정된 네임스페이스에서 일치하는 컨트롤러를 찾을 수 없다면 프레임워크는 더 이상 컨트롤러를 찾지 않을 것이다. 목록15-27는 이기능을 사용하는 방법을 보여주고 있다. 

목록15-27 RouteConfig.cs 파일에서 대체(Fallback) 네임스페이스를 사용하지 않도록 설정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            Route myRoute = routes.MapRoute("AddControllerRoute", "Home/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",
                id = UrlParameter.Optional}, new[] { "URLsAndRoutes.AdditionalControllers" });

            myRoute.DataTokens["UseNamespaceFallback"] = false;
        }
    }
}


MapRoute 메서드는 Route 개체를 반환해주는데 지금까지 살펴본 예제들에서는 라우트가 만들어진 이후에 아무런 조정도 할 필요가 없었기 때문에 이 개체를 사용하지 않았다. 그러나 다른 네임스페이스들에 대한 컨트롤러 검색을 비활성화시키려면 이 Route 개체를 얻은 다음 DataTokens 컬렉션 속성에서 UseNamespaceFallback이라는 키의 값을 false로 지정해야 한다. 

이 설정은 컨트롤러를 찾는 역할을 컨트롤러 팩토리라는 구성요소로 위임하는 역할을 하는데 컨트롤러 팩토리에 관해서는 19장에서 자세하게 살펴볼 것이다. 이렇게 코드를 작성하면 AdditionalControllers 폴더의 Home 컨트롤러를 사용할 수 없는 경우 요청이 실패하게 된다. 



※ 라우트 제약하기
이번 장을 시작하면서 URL 패턴과 세그먼트가 매치되는 방식이 얼마나 보수적인지 반면 세그먼트의 내용과 매치되는 방식이 얼마나 자유로운지에 관해서 설명했다. 그리고 이전 몇몇 절에서는 그 보수성의 수준을 제어할 수 있는 몇가지 기법들에 대해서 살펴봤는데 기본값이나 선택적 변수등을 이용해서 더 많거나 적은 세그먼트를 라우트와 매치되게 만들어봤다. 

이번에는 URL 세그먼트의 내용을 매칭하는 자유도를 제어하는 방법에 대해서 즉 라우트가 매치될 URL 집합을 제한하기 위한 방법을 살펴보도록 하자. 라우트의 동작에 대한 이 두가지 측면을 제어할 수 있게 되면 대단히 정교한 URL 스키마를 만들수 있다. 


※ 정규표현식을 사용해서 라우트 제약 설정하기

라우트에 제약을 설정할 수 있는 첫 번째 기술은 정규표현식을 사용하는 것이다. 목록15-28은 그 예제를 보여주고 있다. 

목록15-28 RouteConfig.cs 파일에서 정규 표현식을 이용해서 라우트 제약 설정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",id = UrlParameter.Optional},
                new { controller = "^H.*" }, new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}
제약 조건은 MapRoute 메서드에 매개변수로 전달하는 방식으로 지정한다. 제약조건도 기본값 처럼 익명 형식으로 표현되는데 제약조건을 설정하려는 세그먼트 변수의 이름과 동일한 이름의 익명 형식 속성에 제약 조건을 설정하면 된다. 이번 예제에서는 정규표현식을 사용해서 제약조건을 지정하고 있으며, 이 정규표현식은 컨트롤러 변수의 값이 H로 시작하는 URL에만 매치된다. 


Note:
기본값은 제약조건을 검사하기 전에 적용된다. 예를 들어 /라는 URL을 요청하게 되면 먼저 컨트롤러에 대한 기본값인 Home이 적용된다. 그리고 제약조건이 그 뒤에 적용되어 컨트롤러 값이 H로 시작하기 때문에 기본 URL이 라우트와 매치되는 것이다. 


※ 여러 개의 값을 지정하여 라우트 제약 설정하기
정규표현식을 활용해서 URL 세그먼트가 지정한 값들과만 매치되도록 라우트에 제약조건을 설정할 수 있다. 목록15-29에서 볼 수 있는 것처럼 파이프(|)문자를 사용하면 된다. 

목록15-29 RouteConfig.cs 파일에서 특정 세그먼트 변수값들의 모음만 매치되도록 제약조건 설정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",id = UrlParameter.Optional},
                new { controller = "^H.*", action = "^Index$|^About$" }, new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}


이 제약조건은 액션 세그먼트의 값이 Index나 About인 URL들만 매치시킬 것이다. 또한 이 라우트는 제약조건이 컨트롤러와 액션에 모두에 적용되어 있기 때문에 액션 변수 값에 적용된 제약조건과 컨트롤러 변수에 적용된 제약조건이 동시에 적용된다. 결과적으로 목록15-29의 라우트는 컨트롤러 변수가 H로 시작하고 Index나 Action이라는 이름의 액션 변수를 갖는 URL과만 매치된다. 이 결과를 보면 정확한 라우트를 생성할 수 있다는 말이 어떤 뜻이었는지 이해할 수 있을 것이다. 



※ HTTP 메서드를 사용하여 라우트 제약 조건 설정하기

목록 15-30에서 볼 수 있는 것처럼 라우트는 특정 HTTP 메서드를 사용해서 요청하는 URL 과만 매치되도록 제약조건을 설정할 수도 있다. 

목록15-30 RouteConfig.cs 파일에서 HTTP 메서드에 기반한 라우트 제약 조건 설정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",id = UrlParameter.Optional},
                new { controller = "^H.*", action = "^Index$|^About$",httpMethod = new HttpMethodConstraint("GET") }, new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}


다만 HTTP 메서드 제약조건을 지정하는 형식은 조금 특이하다. HttpMethodConstraint 클래스의 인스턴스를 이용해서 메서드를 지정하기만 하면 어떤 속성 이름을 사용하던 상관하지 않는다. 목록15-30에서는 앞에서 정의한 값 기반의 제약조건들과 구분하기 쉽도록 httpMethod라는 이름의 제약 조건 속성을 지정하고 있다. 


Note:
HTTP 메서드를 지정해서 라우트를 제약할 수 있는 기능은 HttpGet이나 HttpPost 같은 어트리뷰트를 적용해서 액션 메서드를 제한하는 기능과는 아무런 관련이 없다. 라우트 제약조건은 요청 파이프라인의 훨씬 앞쪽에 처리되며, 요청을 처리할 컨트롤러와 액션의 이름을 결정한다. 반면, 액션 메서드에 적용되는 어트리뷰트들은 컨트롤러가 요청을 처리하는데 사용하게 될 특정 액션 메서드를 결정하는데 사용된다. 다양한 HTTP 메서드들을(비교적 사용빈도가 낮은 PUT이나 DELETE같은 HTTP 메서드들도 포함해서)처리하는 방법에 대해서는 16장에서 자세하게 살펴볼 것이다. 


지원하려는 HTTP 메서드의 이름을 HttpMethodConstraint 클래스의 생성자 매개변수에 문자열로 전달한다. 또한 목록15-30에서는 GET 요청만 처리하도록 라우트를 제한했지만, 다음처럼 아주 쉽게 다른 메서드를 지원하게 만들 수도 있다. 

...
httpMethod = new HttpMethodConstraint("GET", "POST") },
...



※ 단위 테스트 : 라우트 제약조건
제약조건이 설정된 라우트를 테스트할 때는 매치되는 URL과 제외하려는 URL을 모두 테스트해보는 것이 좋다. 테스트는 앞에서 작성한 지원 메서드를 사용하면 된다. 다음은 목록 15-30에서 정의한 라우트를 테스트하기 위해서 변경한 TestIncomingRoutes 테스트 메서드의 코드다. 

...
[TestMethod]
        public void TestIncomingRoutes()
        {
            //기대하고 있는 URL을 검사한다
            TestRouteMatch("~/", "Home", "Index");
            TestRouteMatch("~/Home", "Home", "Index");
            TestRouteMatch("~/Home/Index", "Home", "Index");

            TestRouteMatch("~/Home/About", "Home", "About");
            TestRouteMatch("~/Home/About/MyId", "Home", "About", new { id = "MyId" });
            TestRouteMatch("~/Home/About/MyId/More/Segments", "Home", "About",new { id = "MyId", catchall="More/Segments" });

            TestRouteFail("~/Home/OtherAction");
            TestRouteFail("~/Account/Index");
            TestRouteFail("~/Account/About");
        }
.....