CHAPTER 9장 : SportsStore: 카트 완성하기
이번 장에서는 계속해서 SportsStore 예제 응용프로그램을 확장시켜 나갈 것이다. 이전 장에서는 쇼핑카트에서 기본적으로 지원해야 할 기능들을 추가했었다. 이번에는 이를 향상시켜서 전체 기능을 완성시켜보도록 하자. 



※ 모델 바인딩 사용하기
MVC 프레임워크는 모델 바인딩(Model Binding)이라는 시스템을 이용해서 HTTP 요청으로부터 C# 개체들을 생성한 다음, 이 개체들을 액션 메서드의 매개변수 값으로 전달한다. 예를 들어 MVC 프레임워크는 먼저 대상 액션 메서드의 매개변수들을 확인한 후 모델 바인더(Model Binder)를 사용하여 브라우저가 보낸 폼의 값들과 이를 비교한다. 만약 같은 이름을 가진 폼 값들이 존재한다면 해당 폼 값들을 액션 메서드에 전달하기 전에 매개변수의 형식으로 변환한다. 이것이 MVC 프레임워크가 폼을 처리하는 방식이다. 

모델 바인더는 HTTP 요청에 존재하는 모든 정보들로부터 C# 형식을 생성할 수 있다. 이는 MVC 프레임워크의 핵심 기능들 중 하나로, 이번 장에서는 CartController 클래스를 개선하기 위해서 사용자 지정 모델 바인더를 작성해볼 것이다. 

8장에서는 Cart 컨트롤러에서 세션 상태(session state) 기능을 이용해서 Cart 개체를 저장하고 관리하도록 구현했었다. 접근 방식 자체는 좋은 생각이지만, 세션 상태를 다루는 구체적인 방법에는 개선의 여지가 남아있다. 즉 지금의 방식은 액션 메서드의 매개변수를 기반으로 동작하는, 응용프로그램 모델의 나머지 부분들과 잘 어울리지 않는다. 현재 상태로는 기본 클래스(base class)의 Session 매개변수에 대한 Mock을 구현하지 않고서는 CartController 클래스를 적절하게 단위 테스트를 할 수 없기 떄문이다. 결과적으로 단위 테스트를 수행하기 위해서 Session 매개변수를 Mock 으로 구현하기 시작하다 보면 그뿐만 아니라 다루고 싶지 않은 여러 개체들에 대한 Mock 도 구현해야만 한다. 바로 이 문제를 해결하기 위해서 세션 데이터에 담겨있는 Cart 개체를 가져오도록 사용자 지정 모델 바인더를 생성할 것이다. 그러면 MVC 프레임워크가 이 모델 바인더를 사용해서 Cart 개체를 생성할 수 있게 되므로 Cart 개체를 CartController 클래스의 액션 메서드에 매개변수로 전달할 수 있다. 모델 바인딩 기능은 강력하면서도 유연하다. 24장에서 보다 자세하게 알아보겠지만 세션과 관련된 이번 예제는 모델 바인딩을 살펴보기에 좋은 기회다. 


※ 사용자 지정 모델 바인더 생성하기
사용자 지정 모델 바인더를 생성하기 위해서는 System.Web.Mvc.IModelBinder 인터페이스를 구현해야 한다. 따라서 SportsStore.WebUI 프로젝트의 Infrastructure 폴더 하위에 Binders라는 이름의 폴더를 새로 생성한 다음, 여기에 CartModelBinder.cs 라는 클래스를 추가한다. 목록9-1은 새 클래스파일의 내용을 보여주고 있다. 


목록 9-1 CartModelBinder.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Entities;

namespace SportsStore.WebUI.Infrastructure.Binders
{
    public class CartModelBinder : IModelBinder
    {
        private const string sessionKey = "Cart";

        public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
        {
            //세션에서 Cart 개체 가져오기
            Cart cart = null;
            if(controllerContext.HttpContext.Session != null)
            {
                cart = (Cart)controllerContext.HttpContext.Session[sessionKey];
            }

            //세션 데이터에 Cart 개체가 없다면 새로 생성한다
            if(cart == null)
            {
                cart = new Cart();
                if(controllerContext.HttpContext.Session != null)
                {
                    controllerContext.HttpContext.Session[sessionKey] = cart;
                }
            }
            //Cart 개체를 반환한다. 
            return cart;
        }
    }
}

이 IModelBinder 인터페이스는 단 하나의 메서드, BindModel만을 정의하고 있다. 이 메서드에 제공되는 두 개의 매개변수를 이용하면 도메인 모델 개체를 생성할 수 있다. 먼저 ControllerContext를 통해서 컨트롤러 클래스가 갖고 있는 모든 정보들에 접근할 수 있는데, 그 정보에는 클라이언트 브라우저로부터 들어오는 요청의 상세 내용들까지 포함되어 있다. 그리고 ModelBindingContext는 여러분이 작성해야 할 모델 개체에 대한 정보와, 바인딩 과정을 손쉽게 만들어주는 도구들을 제공해준다. 

여기서 관심을 가져야 할 클래스는 바로 ControllerContext 클래스다. 이 클래스는 HttpContext라는 속성을 갖고 있으며 이 HttpContext 속성은 다시 Session 이라는 속성을 갖고 있어서 이를 통해서 세션 데이터를 가져오거나 설정할 수 있기 때문이다. 목록9-1에서는 먼저 세션 데이터의 값을 읽음으로써 사용자의 세션과 관련된 Cart 개체를 획득하려고 시도한다. 그러나 기존에 생성한 Cart 개체가 만약 존재하지 않는다면 새로생성하게 된다. 

이제 MVC 프레임워크에 새로 생성한 모델바인더 클래스를 알려줌으로써 MVC가 Cart 개체의 인스턴스를 생성할 때 CartModelBinder 클래스를 사용하도록 지시해야 한다. 목록9-2에서 볼 수 있는 것처럼 Global.asax의 Application_Start 메서드에 바인딩 정보를 추가한다. 

목록9-2 Global.asax.cs 파일에서 CartModelBinder 클래스 등록하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Infrastructure.Binders;
namespace SportsStore.WebUI
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);

            ModelBinders.Binders.Add(typeof(Cart), new CartModelBinder());
        }
    }
}


다음으로 Cart 컨트롤러를 수정하여 GetCart 메서드를 삭제하고, 대신 모델 바인더를 이용해서 컨트롤러에 Cart 개체를 제공한다. 목록9-3에서 이 변경사항을 확인할 수 있다. 

목록9-3 모델 바인더를 이용하도록 수정된 CartController.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Models;
namespace SportsStore.WebUI.Controllers
{
    public class CartController : Controller
    {
        private IProductRepository repository;

        public CartController(IProductRepository repo)
        {
            repository = repo;
        }

        public ViewResult Index(Cart cart,string returnUrl)
        {
            return View(new CartIndexViewModel
            {
                Cart = cart,
                ReturnUrl = returnUrl
            });
        }
        
        public RedirectToRouteResult AddToCart(Cart cart, int productId, string returnUrl )
        {
            Product product = repository.Products.FirstOrDefault(p => p.ProductID == productId);

            if(product != null)
            {
                cart.AddItem(product, 1);
            }
            return RedirectToAction("Index", new { returnUrl });
        }

        public RedirectToRouteResult RemoveFromCart(Cart cart,int productId, string returnUrl)
        {
            Product product = repository.Products.FirstOrDefault(p => p.ProductID == productId);

            if(product != null)
            {
                cart.RemoveLine(product);
            }
            return RedirectToAction("Index", new { returnUrl });
        }
           

    }
}

목록9-3의 수정된 Cart 컨트롤러에서는 GetCart 메서드가 삭제됐으며, 모든 액션 메서드에 Cart 매개변수가 추가됐다. MVC 프레임워크는 Cart 개체가 필요하다는 요청을 받으면 (가령 AddToCart 메서드가 호출되면) 먼저 액션 메서드의 매개변수들부터 확인한다. 그런다음 사용 가능한 바인더들의 목록을 살펴보고 각각의 매개변수 형식들의 인스턴스를 생성할수 있는 바인더를 찾는다. 그에 따라 사용자 지정 바인더가 Cart 개체를 생성하도록 요청되면 목록9-1에서 정의한 대로 세션, 상태로부터 인스턴스가 생성된다. MVC 프레임워크는 사용자 지정 바인더와 기본 바인더를 사용해서 액션 메서드에 필요한 일련의 매개변수들을 생성할 수 있으며, 그 덕분에 컨트롤러를 Cart 개체를 생성하는 방법을 알 필요 없이 지금과 같은 상태로 리팩터링될 수 있는 것이다. 

이렇게 사용자 지정 모델 바인더를 사용하면 몇 가지 장점이 있다. 첫 번째 장점은 Cart 개체를 생성하는 로직을 컨트롤러로부터 분리했다는 점이다. 이는 컨트롤러를 변경하지 않고도 Cart 개체를 저장하는 방식을 변경할 수 있다는 사실을 의미한다. 그리고 두 번째 장점은 Cart 개체가 필요한 어떤 컨트롤러에서도 간단히 액션 메서드에 Cart 형식의 매개변수를 정의하기만 하면 사용자 지정 모델 바인더의 이점을 취할수 있다는 점이다. 마지막 세 번째 장점이자 개인적으로 가장 중요하다고 생각하는 장점은 ASP .NET의 파이프라인과 관련된 여러 가지 개체(예를 들면 Session 개체)에 대한 Mock을 구현하지 않더라도 Cart 컨트롤러를 테스트할수 있게 됐다는 점이다. 


※ 단위 테스트 : CART 컨트롤러
이제 Cart 개체를 직접 생성한 다음 이를 액션메서드에 전달하기만 하면 CartController 클래스를 테스트 할 수 있다. 여기서 테스트해볼 Cart 컨트롤러의 세 가지 기능은 다음과 같다. 

* AddToCart : 메서드는 선택된 상품을 고객의 카트에 추가해야 한다. 

* 상품이 카트에 추가된 뒤에 사용자는 Index 뷰 페이지로 이동되어야 한다. 

* Index 액션 메서드가 호출될 때 카탈로그로 되돌아갈수 있는 URL이 정확하게 전달되어야 한다. 

다음은 이 기능들을 테스트하기 위해서 SportsStore.UnitTests 프로젝트의 CartTest.cs 파일에 추가한 단위 테스트들이다. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SportsStore.Domain.Entities;
using Moq;
using SportsStore.Domain.Abstract;
using SportsStore.WebUI.Controllers;
using System.Web.Mvc;
using SportsStore.WebUI.Models;

namespace SportsStore.UnitTests
{
    [TestClass]
    public class CartTests
    {
	
[TestMethod]
        public void Can_Add_To_Cart()
        {

            //Arrange - Mock 리파지토리를 생성한다.
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1", Category="Apples" }
            }.AsQueryable());

            //Arrange - Cart 개체를 생성한다
            Cart cart = new Cart();

            //Arrange - 컨트롤러를 생성한다. 
            CartController target = new CartController(mock.Object);

            //Act - 카트에 상품을 추가한다. 
            target.AddToCart(cart, 1, null);

            //Assert
            Assert.AreEqual(cart.Lines.Count(), 1);
            Assert.AreEqual(cart.Lines.ToArray()[0].Product.ProductID, 1);
        }

        [TestMethod]
        public void Adding_Product_To_Cart_Goes_To_Cart_Screen()
        {
            // Arrange - Mock 리파지토리를 생성한다. 
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1", Category="Apples" }
            }.AsQueryable());

            //Arrange - Cart 개체를 생성한다
            Cart cart = new Cart();

            //Arrange - 컨트롤러를 생성한다. 
            CartController target = new CartController(mock.Object);

            //Act - 카트에 상품을 추가한다. 
            RedirectToRouteResult result = target.AddToCart(cart, 2, "myUrl");

            //Assert
            Assert.AreEqual(result.RouteValues["action"], "Index");
            Assert.AreEqual(result.RouteValues["returnUrl"], "myUrl");
        }

        [TestMethod]
        public void Can_View_Cart_Contents()
        {
            //Arrange - Cart 개체를 생성한다
            Cart cart = new Cart();

            //Arrange - 컨트롤러를 생성한다 
            CartController target = new CartController(null);

            //Act - Index 액션 메서드를 호출한다. 
            CartIndexViewModel result = (CartIndexViewModel)target.Index(cart, "myUrl").ViewData.Model;

            //Assert
            Assert.AreSame(result.Cart, cart);
            Assert.AreEqual(result.ReturnUrl, "myUrl");
        }

    }
}


※ 카트 완성하기
이제 사용자 지정 모델 바인더를 의도한 대로 도입했으니 카트에 새로운 두 가지 기능을 추가 함으로써 카트의 전체 기능을 완성할수 있게 됐다. 그 첫 번째 기능은 고객이 카트에서 상품을 삭제할수 있는 기능이며, 두 번째 기능은 페이지 상단에 카트의 요약 정보를 보여주는 기능이다. 


※ 카트에서 상품 삭제하기 
이미 컨트롤러에 RemoveFromCart라는 액션 메서드를 정의하고 테스트까지 마쳤기 때문에, 고객에게 삭제 기능을 제공해주는 작업은 뷰에 해당 메서드를 노출하기만 하면 되는 간단한 문제다. 이를 위해서 카트 요약 정보 페이지의 각 행에 [Remove]버튼을 추가할 것이다. 목록 9-4에 Views/Cart/Index.cshtml 뷰에 대한 변경사항들이 나타나 있다. 

목록9-4 Index.cshtml 파일에 Remove 버튼 추가하기
@model SportsStore.WebUI.Models.CartIndexViewModel

@{
    ViewBag.Title = "Sports Store: Your Cart";
}
<style>
    #cartTable td { vertical-align: middle;}
</style>
<h2>Your cart</h2>
<table class="table" id="cartTable">
    <thead>
        <tr>
            <th>Quantity</th>
            <th>Item</th>
            <th class="text-right">Price</th>
            <th class="text-right">Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var line in Model.Cart.Lines)
            {
            <tr>
                <td class="text-center">@line.Quantity</td>
                <td class="text-left">@line.Product.Name</td>
                <td class="text-right">@line.Product.Price.ToString("c")</td>
                <td class="text-right">
                    @((line.Quantity * line.Product.Price).ToString("c"))
                </td>
                <td>
                    @using (Html.BeginForm("RemoveFromCart", "Cart"))
                {
                    @Html.Hidden("ProductId", line.Product.ProductID)
                    @Html.HiddenFor(x => x.ReturnUrl)
                    <input class="btn btn-sm btn-warning" type="submit" value="Remove" />
                }
                </td>
            </tr>
            }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-right">Total:</td>
            <td class="text-right">@Model.Cart.ComputeTotalValue().ToString("c")</td>
        </tr>
    </tfoot>
</table>

<div class="text-center">
    <a class="btn btn-primary" href="@Model.ReturnUrl">Continue shopping</a>
</div>


테이블의 각 행에 input 요소를 담고 있는 폼을 새 칼럼으로 추가했다. 또한 Bootstrap 클래스를 이용해서 input 요소를 버튼으로 꾸몄으며, table 요소에 id 어트리뷰트를 추가하고 이에 대한 style 요소를 추가해서 버튼과 다른 칼럼의 내용들이 테이블 내에서 적절히 배치되도록 조정하고 있다. 



※ Note:
목록 9-4에서는 강력한 형식의 Html.HiddenFor 헬퍼 메서드를 사용해서 ReturnUrl 모델 속성을 숨겨진 필드로 생성하고 있다. 반면 ProductID 속성을 숨겨진 필드로 생성할 때는 문자열 기반의 Html.Hidden 헬퍼 메서드를 사용해야만 했다. 만약 Html.HiddenFor(x => line.Product.ProductID)와 같은 구문을 사용해서 숨겨진 필드를 생성했다면 헬퍼 메서드는 필드의 name 어트리뷰트를 line.Product.ProductID로 렌더했을 것이다. 그러나 이 필드명은 CartController.RemoveFromCart 액션 메서드의 매개변수명과 일치하지 않기 때문에 기본 모델 바인더가 올바르게 동작하지 못하므로 MVC 프레임워크는 해당 메서드를 호출할 수 없었을 것이다. 

이제 응용프로그램을 실행 시킨 다음 쇼핑 카트에 상품을 담아보면 [Remove] 버튼을 확인할 수 있다. 이미 카트에 삭제 기능이 구현되어 있기 때문에 그림9-1과 같이 이 새 버튼들 중 하나를 클릭해서 실제로 동작하는지 테스트할 수도 있다. 


※ 카트 요약 정보 추가하기
이제 정상적으로 동작하는 카트 기능을 갖추긴 했지만 이 카트가 사용자 인터페이스와 효과적으로 통합됐다고 보기에는 약간의 문제점이 남아있다. 즉 고객들은 카트 요약 정보 화면에서만 카트에 무엇이 담겨있는지 알 수 있는데, 정작 카트에 새 상품을 담아야만 그 요약 정보화면으로 이동할 수 있는 것이다. 

이 문제점을 해결하기 위해서 카트의 내용물을 요약해서 보여주는 위젯을 추가해보도록 하자. 이 위젯은 클릭이 가능하며 응용프로그램의 어디에서나 카트의 내용물을 확인할 수 있게 해줄 것이다. 이전 장에서 네비게이션 위젯을 추가할 때 사용했던 것과 거의 동일한 방법으로 액션 메서드를 구현하여 Razor 레이아웃에 그 출력을 삽입할 것이다. 먼저 목록9-5와 같이 CartController 클래스에 간단한 메서드를 추가해야 한다. 

목록9-5 CartController.cs 파일에 Summary 메서드 추가하기
 public PartialViewResult Summary(Cart cart)
        {
            return PartialView(cart);
        }

이 간단한 메서드는 뷰에서 (사용자 지정 모델 바인더를 통해서 가져온) 현재 Cart 개체를 뷰데이터로 렌더해야 한다. 뷰를 생성하기 위해서 Summary 액션 메서드를 마우스 오른쪽 버튼으로 클릭하고 [뷰 추가(Add View)] 를 선택한다. 뷰의 이름을 Summary라고 입력하고 [추가(OK)] 버튼을 클릭하여 Views/Cart/Summary.cshtml 파일을 추가한다. 그리고 이 뷰의 내용을 목록 9-6과 같이 편집하자. 

@model SportsStore.Domain.Entities.Cart

<div class="navbar-right">
    @Html.ActionLink("Checkout", "Index", "Cart",
    new { returnUrl=Request.Url.PathAndQuery}, new { @class="btn btn-default navbar-btn"})
</div>

<div class="navbar-text navbar-right">
    <b>Your cart:</b>
    @Model.Lines.Sum(x => x.Quantity) item(s),
    @Model.ComputeTotalValue().ToString("c")
</div>





이 뷰는 카트에 담겨 있는 상품 개수와 그에 대한 총 금액을 보여주고, 사용자가 카트의 상세 정보 화면으로 이동할 수 있는 링크를 제공해준다(그리고 이제는 여러분도 예상하고 있겠지만 Bootstrap에 정의된 캘르스를 사용하여 링크를 꾸미고 있다.)이제 Summary 액션 메서드가 반환할 뷰를 생성했으므로 목록9-7에서 볼 수 있는 것처럼 카트 요약 정보를 보여주기 위해서 _Layout.cshtml 파일에서 Summary 액션 메서드를 호출할 수 있다. 

목록9-7 _Layout.cshtml 파일에 Summary 부분 뷰 추가하기
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <title>@ViewBag.Title</title>
</head>
<body>
    <div class="navbar navbar-inverse" role="navigation">
        <a class="navbar-brand" href="#">SPORTS STORE</a>
    </div>
    <div class="navbar navbar-inverse" role="navigation">
        <a class="navbar-brand" href="#">SPORTS STORE</a>
        @Html.Action("Summary", "Cart")
    </div>
    <div class="row panel">
        <div id="categories" class="col-xs-3">
            @Html.Action("Menu", "Nav");
        </div>
        <div class="col-xs-8">
            @RenderBody()
        </div>
    </div>
</body>
</html>

다시 응용프로그램을 실행시켜보면 카트 요약 정보를 확인할 수 있을 것이다. 그림9-2에서 볼 수 있는 것처럼 카트에 상품을 추가하면 상품의 개수와 총 금액이 증가하게 된다. 

이번 변경으로 인해서 고객들은 자신의 카트에 무엇이 담겨 있는지 확인하거나 지불 페이지로 이동할 수 있는 명확한 방법을 갖게 됐다. 그리고 Html.Action 헬퍼 메서드를 사용해서 특정 뷰에 다른 액션의 결과물을 병합해서 보여주는 작업이 얼마나 쉬운지 다시 한번 확인할수 있었다. 이는 응용프로그램의 일부 기능을 독립적이고 재사용 가능한 작은 블럭으로 세분화시킬 수 있는 좋은 기법이다. 


※ 주문 제출하기
이제 SportsStore에서 구현해야 할 마지막 고객용 기능만 남겨두고 있다. 바로 금액을 지불하고 주문을 완료하는 기능이 그것이다. 이어지는 절들에서는 도메인 모델을 확장해서 사용자로부터 배송 정보를 입력받고 그 정보를 처리하는 기능을 응용프로그램에 추가해볼 것이다. 