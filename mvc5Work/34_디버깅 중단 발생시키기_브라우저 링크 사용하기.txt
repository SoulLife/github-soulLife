※ Visual Studio 디버거 중단 발생시키기
디버거와 연결되어 실행 중인 응용프로그램은 실행이 중지되고 디버거로 제어가 넘어가는 중 단(Break)이 발생하기 전까지는 평범하게 동작한다. 일단 응용프로그램이 중단되면 응용프로그램을 분석하거나 상태를 제어할 수 있다. 중단은 대부분 두 가지 이유로 인해서 발생하게 되는데 중단점에 도달하거나 처리되지 않은 예외(Unhandled Exception)가 발생하는 경우가 바로 그것이다. 다음 절들에서는 이 두가지 경우에 관해서 하나씩 살펴볼 것이다. 


※ 중단점 사용하기
중단점(breakpoint)은 디버거에 응용프로그램의 실행을 중지하고 프로그래머에게 제어를 넘기도록 지시하는 명령이다. 이 상태가 되면 응용프로그램의 상태를 분석하거나 어떤 일이 벌어지고 있는지 확인할 수 있으며, 응용프로그램을 다시 시작할 수도 있다. 

중단점을 설정하려면 코드 구문에 마우스 오른쪽 버튼을 클릭한 다음 팝업 메뉴에서 [중단점(Breakpoint)], [중단점 삽입(Insert Breakpoint)]을 차례로 선택한다. 중단점을 실제로 직접 살펴보기 위해서 Home 컨트롤러의 Index 액션 메서드의 첫 번째 구문에 중단점을 적용해보자. 그러면 그림14-8과 같이 텍스트 편집기의 왼쪽에 빨간색 점이 표시된다. 

그런 다음 중단점의 효과를 알아보기 위해 Visual Studio의 [디버그(Debug)] 메뉴에서 [디버깅 시작(Start Debugging)] 메뉴를 선택한다. 그러면 응용프로그램은 중단점이 설정된 구문에 도달할 때까지 실행될 것이다. 중단점에 도달하면 디버거가 중단되면서 응용프로그램이 중지되고 제어할 수 있는 권한이 프로그래머에게 넘어오게 된다. Visual Studio는 어느 지점에서 실행이 중단되었는지 알려주기 위해 그림14-9 와 같이 노란색으로 표시한다. 


Note:
중단점은 중단점이 설정된 구문이 실행되는 경우에만 동작한다. 이 예제의 경우 응용프로그램 시작과 거의 동시에 중단점에 도달하는데 그 이유는 중단점이 기본 URL에 대한 요청이 전달될때 호출되는 액션 메서드 내에 존재하기 때문이다. 만약 중단점을 다른 액션 메서드에 설정했다면, 반드시 브라우저에서 해당 메서드와 연결된 URL을 요청해야만 중단점이 동작할 것이다. 즉 사용자가 브라우저 창에서 직접 해당 URL로 이동해야만 응용프로그램에서 중단점이 동작하는 모습을 확인할 수 있다는 뜻이다. 



응용프로그램의 실행 제어권을 넘겨받은 후에는 다음 구문으로 이동하거나, 실행 순서를 따라 다른 메서드로 이동하면서 응용프로그램상의 상태를 확인할 수 있다. 이러한 과정은 도구 모음의 버튼을 클릭하거나 Visual Studio의 [디버그(Debug)] 메뉴의 항목을 선택하여 실행할 수 있다. Visual Studio는 응용프로그램에 대한 실행 제어 권한만 넘겨주는 것이 아니라 응용프로그램의 상태에 대한 많은 정보도 함께 제공한다. 그 정보가 너무 많기 때문에 여기서는 기본적인 몇 가지 정보에 대해서만 설명한다. 



※ 코드 편집기에 데이터 값 표시하기
중단점이 가장 많이 사용되는 경우는 코드의 버그를 찾으려고 할 때다 버그를 수정하기에 앞서 어떤 일이 일어나고 있는지부터 확인해야 하는데, Visual Studio는 코드 편집기 창에서 변수의 값을 확인하고 모니터링할 수 있는 아주 유용한 기능을 제공한다. 

예를 들어 디버그 모드로 응용프로그램을 실행한 다음 이전 절에서 설정한 중단점에 다다를때까지 기다려보자. 그리고 디버거가 중단되면 마우스 포인터를 result 변수가 정의된 구문에 올려 놓는다. 그러면 작은 팝업이 나타나면서 그림14-10과 같이 변수의 현재 값이 표시되는 것을 확인할수 있을 것이다. 

현재는 Index 액션 메서드의 구문 실행이 아직 result 변수에 값이 할당되는 지점까지 도달하지 않았기 때문에 Visual Studio는 int 형식의 기본값인 0을 표시한다. 이 상태에서 Visual Studio의 [디버그(Debug)] 메뉴에서 [프로시저 단위 실행(Step Over)] 메뉴를 선택하여(또는 F10 키를 눌러서) ViewBag.Message 속성이 정의된 구문까지 실행해보자. 그리고 여기서 다시 result 변수에 마우스를 올려놓자. 그러면 이번에는 디버거가 result 변수에 값을 할당하는 구문을 실행했기 때문에 이제 result 변수의 값은 그림 14-11과 같이 표시될 것이다. 

이 기능은 주로 코드의 버그를 추적할 때 사용하게 되는데 응용프로그램에 어떤 일이 일어나고 있는지 즉시 확인할 수 있기 때문이다. 특히 이 기능은 값이 할당되지 않은 즉 null값을 갖는 변수(이는 개발 초기에 많은 버그의 원인이 되기도 한다)를 찾는데 유용하다. 그리고 이 팝업에는 변수 값 옆에 압정(pushpin) 아이콘이 있는데 이 아이콘을 클릭하면 팝업이 고정되어 변수의 값이 바뀔 때마다 바로 알 수 있다. 팝업을 고정시켜놓으면 여러 개의 변수를 동시에 확인할 때 편리한데, 변수 값이 언제 어떤 값으로 할당되는지 확인하기에 좋다. 


※ 디버거 창에서 응용프로그램 상태 확인하기
Visual Studio는 응용프로그램이 중단점에 멈춰 있는 동안 여러 가지 정보를 얻을 수 있는 다양한 창들을 제공한다 [디버그(Debug)] > [창(Windows)] 메뉴에서 어떤 창들이 제공되는지 확인할 수 있으며 이 중에서 [지역(Locals)] 창과 [호출 스택(Call Stack)] 창이 가장 유용하게 사용된다 [지역(Locals)] 창은 그림 14-12와 같이 현재 범위 내에 있는 모든 변수들의 값을 자동으로 표시한다. 이 창을 통해서 여러분이 관심을 갖고 있는 변수들을 한 번에 모두 확인할수 있다. 

직전에 실행된 구문에 의해서 값이 변경된 변수들은 빨간색으로 표시된다. 가령 이 그림을 보면 방금 실행된 구문에서 result 변수의 값이 할당되었기 때문에 빨간색으로 표시되고 있다. 


TIP:
[지역(Locals)] 창에 표시되는 변수들은 응용프로그램을 탐색하는 동안 계속 바뀐다. 그러나 특정 변수를 계속해서 확인하고 싶다면 [지역(Locals)] 창에서 해당 변수에 마우스 오른쪽 버튼을 클릭한 다음 [조사식 추가(Add Watch)] 옵션을 선택한다 [조사식(Watch)] 창에 있는 항목은 응용프로그램에서 구문을 실행해도 바뀌지 않기 때문에 계속해서 확인할 수 있다. 

[호출 스택(Call Stack)] 창은 실행된 현재 구문의 호출 순서를 표시한다. 이 창은 응용프로그램의 오류를 파악하고자 할 때 호출 스텍을 확인할 수 있기 때문에 중단점이 동작한 원인을 찾는데 편리하다 (이번 예제 응용프로그램에는 호출 스택을 보여줄 만큼의 호출이 없기 때문에 여기서는 [호출 스택(Call Stack)] 창의 그림을 추가하지 않았다. 그러나 디버거가 제공하는 정보들에는 어떤 것들이 존재하는지 호출 스택 및 다른 창들을 통해서 직접 확인해보길 바란다)


TIP:
뷰에도 중단점을 삽입할 수 있다. 이 기능은 뷰 모델의 속성 값을 분석하고자 하는 등의 경우에 도움이 된다. 뷰에 중단점을 삽입할 때도 코드 파일에서와 동일한 방법을 사용하면 된다. 즉 마우스 오른쪽 버튼으로 원하는 Razor 구문을 클릭한 다음 [중단점(Breakpoint)] > [중단점 삽입(Insert Breakpoint)] 메뉴를 선택한다. 




※ 예외로 인한 중단
처리되지 않은 예외(unhandled exceptions)는 프로그램 개발에 있어서 결코 피할 수 없는 현실이다. 프로젝트를 대상으로 단위 테스트 및 통합 테스트를 수행하는 이유 중 하나가 바로 이러한 예외가 운영 환경에서 발생할 수 있는 가능성을 최소화시키기 위한 것이다. Visual Studio디버거는 처리되지 않은 예외가 발생하면 자동으로 응용프로그램을 중단시켜 예외를 파악하고 수정할수 있도록 지원한다. 

Note:
오직 처리되지 않은 (Unhandled) 예외만 디버거를 중단시킨다 try...catch 블록의 내부에서 예외를 잡아서 처리할 수도 있는데 이런 예외는 처리된(Handled) 예외라고 한다. 처리된 예외는 유용한 프로그래밍 도구로써 메서드가 자신의 작업을 완료할수 없으며, 그 사실을 호출자에 통보해야 할 필요가 있는 시나리오를 구현할 때 사용된다. 처리되지 않은 예외는 결코 바람직 하지 않는데, 그 이유는 예기치 못한 상태를 발생시키고 사용자에게 오류 페이지를 표시하기 때문이다. 



그러면 이번에는 예외로 인한 중단을 살펴보기 위해 목록 14-5와 같이 Home 컨트롤러의 Index 액션 메서드의 일부를 변경해보자. 

목록14-5 HomeController.cs 파일에 예외를 발생시키는 구문 추가하기
using System.Web.Mvc;

namespace DebuggingDemo.Controllers
{
	public class HomeController : Controller
	{
		public ActionResult Index()
		{
			int firstVal = 0;
			int secondVal = 0;
			int result = firstVal / secondVal;

			ViewBag.Message = "Welcome to ASP .NET MVC!";

			return View(result);
		}
	}
}

목록 14-5의 코드에서는 secondVal 변수의 값을 0으로 변경했기 때문에 firstVal 변수를 secondVal 변수로 나누는 구문에서 예외가 발생하게 된다. 


Note:
먼저 코드 구문의 왼쪽에 설정된 중단점 아이콘을 마우스 오른쪽 버튼을 클릭한 다음 팝업 메뉴에서 [중단점 삭제(Delete Breakpoint)] 메뉴를 선택해서 이전 절에서 Index 액션 메서드에 설정한 중단점을 제거한다. 


다시 디버거를 실행해보면 예외가 던져질 때까지 응용프로그램이 실행되고 예외가 던져지면 그림14-13에서 볼 수 있는 것과 같은 예외 정보 팝업이 나타난다. 

이 예외 정보 팝업은 예외에 대한 상세한 정보들을 제공한다. 디버거가 예외에서 중단되면 중단점에 도달했을 때처럼 응용프로그램의 상태를 분석하거나 실행을 제어할 수 있다. 


※ 편집하며 계속 하기 기능 사용하기
Visual Studio 의 흥미로운 기능 중의 하나는 바로 편집하며 계속하기 (Edit and Continue)기능이다. 이 기능을 이용하면 디버거가 중단되었을 때 코드를 편집한 다음 바로 계속 해서 디버깅을 할 수 있다. 그러면 Visual Studio가 응용프로그램을 다시 컴파일 한 뒤 디버거가 중단된 시점의 응용프로그램 상태를 재현한다. 



※ 편집하며 계속하기 기능 활성화하기
먼저 두 곳에서 편집하며 계속 하기 기능을 활성화시켜야 한다. 

* [디버깅(Debugging)] 옵션 대화상자(Visual Studio의 [도구(Tools)]메뉴에서 [옵션(Options)] 메뉴를 선택하면 나타난다)의 [편집하며 계속하기(Edit and Continue)] 영역에서 그림 14-14와 같이 [편집하며 계속하기(Edit and Continue)] 항목이 선택되어 있는지 확인한다

* 프로젝트 속성(Visual Studio의 [프로젝트(Project)] 메뉴에서 [DebuggingDemo 속성(DebuggingDemo Properties)]을 선택한다. )에서 [웹(Web)] 영역을 클릭한 다음 그림14-15와 같이 [편집하며 계속하기 사용(Enable Edit and Continue)] 항목이 선택되어 있는지 확인한다. 


※ 프로젝트 변경하기
편집하며 계속하기는 다소 까다로운 기능이다. 가령 특정 조건에서는 기능이 정상적으로 동작하지 않는다. HomeController 클래스의 Index 액션 메서드도 그중 한 가지 조건에 해당되는데 바로 동적 개체를 사용하고 있기 때문이다. 이 문제를 해결하려면 HomeController.cs 클래스에서 ViewBag 을 호출하는 행을 주석 처리한다. 

목록14-6 HomeController.cs 파일의 Index 메서드에서 ViewBag 호출 제거하기
using System.Web.Mvc;

namespace DebuggingDemo.Controllers
{
	public class HomeController : Controller
	{
		public ActionResult Index()
		{
			int firstVal = 0;
			int secondVal = 0;
			int result = firstVal / secondVal;

			//이 구문을 주석으로 처리한다.
			//ViewBag.Message = "Welcome to ASP .NET MVC!";

			return View(result);
		}
	}
}
그리고 목록14-7과 같이 Index.cshtml 뷰에서도 ViewBag을 사용하는 부분을 주석 처리한다. 

목록14-7 Index.cshtml 파일에서 ViewBag 호출 제거하기
@model int
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/Site.css" rel="stylesheet" type="text/css" />
    <title>Index</title>
</head>
<body>
    <!-- 이 요소를 주석으로 처리한다. -->
    <!-- <h2 class="message">@ViewData["Message"]</h2> -->
    <p>
        The calculation result value is: @Model
    </p>
</body>
</html>

※ 편집하며 계속하기
이제 편집하며 계속 하기 기능을 살펴보기 위한 모든 준비가 마무리되었다. Visual Studio의 [디버그(Debug)] 메뉴에서 [디버깅 시작(Start Debugging)] 메뉴를 선택해서 디버거를 시작하자. 그러면 디버거와 연결된 상태로 응용프로그램이 시작되고 Index 메서드에 작성된 간단한 계산을 수행하는 구문에 도달할 때까지 진행된다. 그러나 이 구문의 두 번째 매개변수 값이 0이므로 예외가 발생해서 던져지게 된다. 그에 따라 디버거는 실행을 중지한 다음 예외 정보팝업을 띄워준다(그림14-13 참고) 그러면 예외 정보 팝업에서 [편집 사용(Enable editing)] 링크를 클릭한다. 그리고 코드 편집기에서 result 변수의 값을 계산하는 계산식을 다음과 같이 변경해보자. 

...
int result = firstVal / 2;
...

secondVal 변수의 참조를 제거하고 숫자 값인 2로 대체하였다. 이제 Visual Studio의 [디버그(Debug)]메뉴에서 [계속(Continue)]을 선택하여 응용프로그램을 다시 시작시키자 그러면 새값을 이용해서 result 변수 값이 계산되고 그림14-16과 같이 정상적으로 실행될 것이다. 

이번 예제에서 무슨일이 벌어진 것인지 잠시 살펴보도록 하자. 먼저 버그가 존재하는 상태로 (값을 0으로 나누려고 시도했다) 응용프로그램을 실행했다. 따라서 디버거가 예외를 감지하고 프로그램의 실행을 중지시킨다. 코드를 수정하고 디버거에게 다시 실행을 계속하도록 지시하면 Visual Studio는 응용프로그램을 다시 컴파일하고 예외를 발생시켰던 상태를 재구성한 다음 새로운 값을 이용해서 마치 정상적인 상황인 것처럼 동작한다. 만약 편집하며 계속하기 기능이 지원되지 않았다면 디버거를 다시 시작해야 했을 것이다. 게다가 브라우저에서 디버거가 중단된 시점까지의 과정을 반복해야 했을 것이다. 이 일련의 과정들 중에서 마지막 과정을 피할수 있다는 점이 가장 중요하다. 복잡한 버그인 경우에는 응용프로그램을 재생성하고 상태를 재현하기 위해서 많은 과정이 필요할 수도 있기 때문에 그런 일련의 과정들을 다시 반복할 필요 없이 수정사항들을 테스트해볼 수 있는 편집하며 계속하기 기능은 프로그래머의 시간을 절약해주고 올바른 판단력을 유지시켜주는데 큰 도움이 된다. 


※ 브라우저 링크 사용하기
Visual Studio 2013에는 브라우저 링크(browser link)라는 기능이 추가되었는데 이 기능은 동시에 여러 개의 브라우저에서 응용프로그램을 실행하고 응용프로그램을 수정한 다음 해당 변경 내용을 동시에 모든 브라우저에 다시 로드할 수 있는 기능이다. 이 기능은 응용프로그램의 기능이 안정화된 상태에서 뷰를 구성하는 HTML이나 CSS를 미세하게 조정해서 작업을 마무리하고자 할 때 특히 유용하다 (왜 그런지는 뒤에서 간략하게 설명할 것이다)

브라우저 링크 기능을 사용하려면 그림14-17과 같이 Visual Studio 의 도구 모음에서 현재 선택된 브라우저 우측의 아래쪽 화살표를 클릭한 다음 메뉴에서 [찾아보기(Browse With)]를 선택한다. 

그러면 [브라우저 선택(Browse With)] 대화상자가 나타난다. 컨트롤 키를 누른 상태에서 사용할 브라우저들을 선택한다. 그림14-18은 Internet Explorer와 Chrome 브라우저가 선택된 모습을 보여주고 있다. 또는 이 대화 상자에서 새 브라우저들을 추가할 수도 있다(물론 Visual Studio가 대부분의 주요 브라우저들을 자동으로 표시한다. )

그런 다음 [찾아보기(Browse)] 버튼을 클릭하면 Visual Studio 가 여러분이 선택한 브라우저들을 모두 열고 각 브라우저에 프로젝트의 URL을 로드한다. 응용프로그램의 코드 및 뷰를 수정한 다음 그림14-19에서 볼 수 있는 것처럼 Visual Studio 도구 모음에서 [연결된 브라우저 새로 고침(Refresh Linked Browsers)] 을 선택하면 모든 브라우저 창이 업데이트 된다. 이때 응용프로그램이 자동으로 다시 컴파일되므로 변경된 내용이 브라우저에 나타나게 된다. 

이 기능은 브라우저로 전송되는 HTML에 추가된 javaScript를 통해서 동작하며 이는 반복적으로 개발하는 데 있어서 괜찮은 방식이다. 다만 이 기능은 뷰를 개발할 때만 사용하는 것이 좋다. 왜냐하면 뷰를 개발할 때는 IIS가 브라우저로 HTTP 오류 메시지를 전송할 가능성이 비교적 적기 때문이다(일반적으로 HTTP 오류 메시지는 코드에 오류가 존재할 때 전송된다) 오류 응답에는 브라우저 링크 기능에 필요한 JavaScript 코드가 추가되지 않으므로, 결과적으로이는 Visual Studio와 브라우저 사이의 연결이 끊기게 된다는 것을 의미한다. 따라서 [찾아보기(Browse With)]메뉴를 이용해서 다시 시작해야만 한다. 브라우저 링크 기능은 괜찮은 아이디어이긴 하지만 JavaScript 를 사용한다는 단점이 있다. 가령 ASP .NET 기반이 아닌 환경에서 응용프로그램을 개발하는 경우 LiveReload(http://livereload.com)라고 하는 비슷한 도구가 사용되곤 하는데, 이 도구는 브라우저 링크보다 개선된 접근 방식을 제공한다. 반면 Visual Studio의 브라우저 링크 기능은 Microsoft가 이와 같은 접근 방식을 채택할 때까지는 활용도가 떨어질수 밖에 없다. 



요약
이번 장에서는 Visual Studio가 생성해주는 MVC 프로젝트의 구조를 비롯해서 다양한 부분들이 서로 함께 맞물려 동작하는 방법에 대해 살펴봤다. 그리고 MVC 프레임워크의 가장 중요한 특징 중의 하나인 규약에 대해서도 살펴봤다. 이 주제에 관해서는 이어지는 장들에서 MVC 프레임워크의 동작 방식에 대해서 더 자세하게 알아보면서 계속해서 반복적으로 살펴보게 될 것이다. 