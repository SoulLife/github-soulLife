CHAPTER11장 : SportsStore : 관리
이번 장에서는 관리자가 상품 카탈로그를 관리할 수 있도록 계속해서 SportsStore 응용프로그램의 관리자 기능을 구현해볼 것이다. 상품 리파지토리에서 상품을 생성하고 수정하고 삭제할 수 있는 기능을 이번 장에서 구현하고 상품의 이미지를 업로드하고 그 이미지를 상품 정보와 함께 출력하는 기능은 다음 장에서 추가할 것이다. 

※ 카탈로그 관리 기능 추가하기
특정 항목들의 컬렉션을 관리하기 위한 가장 보편적인 방법은 그림11-1과 같이 두 가지 형태의 페이지, 즉 목록 페이지와 편집 페이지를 제공하는 것이다. 

List Screen							Edit Item: Kayak

Item			Actions				Name:			Kayak				
Kayak			Edit | Delete				Description:		A boat for one pe.....
Lifejacket		Edit | Delete				Category:		WaterSports
Soccer ball		Edit | Delete				Price($):		275.00

	Add New Item						Save		Cancel
				그림 11-1 상품 카탈로그에 대한 CRUD UI 스케치


이 두 페이지를 활용하면 사용자가 컬렉션에서 항목들을 생성(create)하고, 조회(read)하고, 수정(update)하고, 삭제(delete)할수 있는데 이런 동작들을 포괄적으로 일컬어 CRUD 라고 한다. 개발자들은 CRUD를 상당히 자주 구현해야 하기 때문에, Visual Studio 는 CRUD동작에 해당하는 액션 메서드들이 구현된 컨트롤러와 그 액션 메서드들을 지원하는 뷰 템플릿들을 제공함으로써 개발자를 돕기 위해 노력한다. Visual Studio의 다른 모든 템플릿들도 마찬가지이지만 배움에 있어 MVC 프레임워크의 기능을 직접 사용하는 것보다 더 좋은 방법은 없다. 



※ CRUD 컨트롤러 만들기
먼저 SportsStore 응용프로그램의 관리 기능을 구현하기 위한 새 컨트롤러부터 생성해보도록 하자. SportsStore.WebUI 프로젝트의 Controllers 폴더를 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [추가(Add)] > [컨트롤러(Controller)]를 선택한다. 다시 [MVC 5 컨트롤러 - 비어 있음(MVC 5 Controller - Empty)]을 선택한 다음 [추가(Add)] 버튼을 클릭하고 AdminController라고 이름을 입력한 후 [추가(Add)] 버튼을 클릭해서 Controllers/AdminController.cs 파일을 생성한다. 그리고 컨트롤러 클래스의 내용을 목록 11-1과 같이 편집한다. 

목록 11-1 AdminController.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;

namespace SportsStore.WebUI.Controllers
{
    public class AdminController : Controller
    {
        private IProductRepository repository;

        public AdminController(IProductRepository repo)
        {
            repository = repo;
        }
        // GET: Admin
        public ViewResult Index()
        {
            return View(repository.Products);
        }
    }
}

이 컨트롤러의 생성자에서는 IProductRepository 인터페이스에 대한 종속성을 선언하고 있으며 이 종속성은 인스턴스가 생성될 때 Ninject에 의해서 해결될 것이다. 또한 이 컨트롤러는 Index라는 하나의 액션 메서드만을 정의하고 있는데 이 액션 메서드는 View 메서드를 호출해서 액션에 대한 기본 뷰를 사용한다. 뷰 모델로는 데이터베이스에서 가져온 상품들의 목록을 뷰에 전달하고 있다. 




※ 단위 테스트 : INDEX 액션
Admin 컨트롤러의 Index 메서드에 대해서 확인해야 할 동작은 리파지토리에 저장되어 있는 Product 개체들을 올바르게 반환하는지 여부다. 이 동작은 Mock 리파지토리를 생성하고 액션 메서드가 반환하는 데이터를 테스트 데이터와 비교함으로써 테스트할 수 있다. 다음은 이 동작을 테스트 하기 위해서 SportsStore.UnitTests 프로젝트에 AdminTests.cs라는 이름으로 새롭게 생성한 단위 테스트 파일의 내용이다. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Controllers;
using System.Web.Mvc;

namespace SportsStore.UnitTests
{
    [TestClass]
    public class AdminTests
    {
        [TestMethod]
        public void Index_Contains_All_Products()
        {
            //Arrange - Mock 리파지토리를 생성한다
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1"},new Product{ProductID=2, Name="P2"},new Product{ProductID=3, Name="P3"}
            });

            //Arrange - 컨트롤러를 생성한다
            AdminController target = new AdminController(mock.Object);

            //Action
            Product[] result = ((IEnumerable<Product>)target.Index().ViewData.Model).ToArray();

            //Assert
            Assert.AreEqual(result.Length, 3);
            Assert.AreEqual("P1", result[0].Name);
            Assert.AreEqual("P2", result[1].Name);
            Assert.AreEqual("P3", result[2].Name);
        }
    }
}


※ 새 레이아웃 생성하기
이번에는 SportsStore 관리 뷰들에 사용할 새로운 레이아웃을 생성해보자. 이 레이아웃은 관리 뷰들에 대한 모든 변경사항을 한 번에 적용할 수 있는 단일 관리 지점으로 사용될 것이며 아주 간단한 형태를 갖게될 것이다. 

SportsStore.WebUI 프로젝트의 Views/Shared 폴더를 마우스 오른쪽 버튼으로 클릭한 다음. 팝업 메뉴에서 [추가(Add)] > [MVC 5 레이아웃 페이지(Razor)(MVC 5 Layout Page(Razor))]를 선택해서 새로운 레이아웃을 생성한다 뷰의 이름을 _AdminLayout.cshtml라고 (밑줄로 시작하는 것에 주의하기 바란다)입력하고 (확인(OK)]버튼을 눌러서 Views/Shared/_AdminLayout.cshtml 파일을 생성한다. 그리고 이 새로운 레이아웃의 내용을 목록 11-2와 같이 편집한다. 


Note:
이미 설명했듯이 레이아웃 파일의 이름은 명명규칙에 따라 밑줄(_)로 시작해야 한다. Razor는 Microsoft의 다른 기술인 WebMatrix에서도 사용되는데 바로 이 WebMatrix에서는 레이아웃 페이지가 브라우저에 직접 서비스되는 것을 방지하기 위해 파일 이름에 밑줄을 사용한다. 비록 MVC 에서는 이런 보호 장치가 필요 없지만 레이아웃의 이름을 짓는 관례가 MVC에서도 어찌됐든 이어지고 있는 것이다. 

목록11-2 _AdminLayout.cshtml 파일의 내용
@{ 
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <link href="~/Content/ErrorStyles.css" rel="stylesheet" />
    <title></title>
</head>
<body>
    <div>
        @RenderBody()
    </div>
</body>
</html>

이 레이아웃에서는 RenderBody 메서드를 호출하는 구문을 추가해서 뷰의 콘텐트가 서버 응답에 삽입되도록 만들고 있다 또한 Bootstrap 파일들과 유효성 검사 오류들을 사용자에게 시각적으로 강조해서 보여주기 위해 9장에서 작성했던 스타일이 포함된 CSS 파일을 위한 link 요소들도 추가했다. 



※ 목록 뷰 구현하기
이제 새로운 레이아웃이 준비됐으므로 Admin 컨트롤러의 Index 액션 메서드를 위한 뷰를 프로젝트에 추가할 수 있게 되었다. 비록 개인적으로는 Visual Studio의 스캐폴드(scaffold)와 템플릿 기능들을 선호하지 않지만 이 기능들이 동작하는 방식을 보여주기 위한 차원에서 이번에는 스캐폴드 시스템을 이용해서 Index 메서드에 대한 뷰를 생성해보도록 하겠다. 물론 필자가 미리 다듬어진 코드를 좋아하지 않는다고 해서 여러분도 그런 코드를 사용하지 말아야 한다는 의미는 아니다. 

SportsStore.WebUI 프로젝트의 Views/Admin 폴더를 마우스 오른쪽 버튼으로 클릭한 다음[추가(Add)] > [뷰(View)]를 선택한다. 뷰 이름으로 Index라고 입력하고 [템플릿(Template)] 옵션으로는 List를 선택한다(이 옵션에 대해서 지금까지는 주로 Empty를 선택했었다) 또한 [모델 클래스(Model class)]로는 Product를 선택한 다음[레이아웃 페이지 사용(Use a layout page)] 옵션을 체크하고 이전 절에서 Views/Shared 폴더에 추가했던 _AdminLayout.cshtml 파일을 선택한다. 그림11-2에서 지금까지 지정한 모든 구성 옵션들을 확인할 수 있다. 



Note:
List 스캐폴드 옵션을 사용할 경우 Visual Studio는 여러분이 모델 뷰 형식의 IEnumerable 형태로 작업한다고 가정한다. 그래서 [모델 클래스(Model class)] 옵션에서는 클래스의 단수형을 선택해도 된다. 



마지막으로 [추가(Add)] 버튼을 클릭해서 새 뷰를 추가하면 목록11-3과 같은 내용이 생성된다.(코드가 페이지 공간을 너무 많이 차지하지 않도록 마크업을 정리했다.)

목록11-3 Views/Admin/Index.cshtml 파일의 내용
@model IEnumerable<SportsStore.Domain.Entities.Product>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>@Html.DisplayNameFor(model => model.Name)</th>
        <th>@Html.DisplayNameFor(model => model.Description)</th>
        <th>@Html.DisplayNameFor(model => model.Price)</th>
        <th>@Html.DisplayNameFor(model => model.Category)</th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>@Html.DisplayFor(modelItem => item.Name)</td>
        <td>@Html.DisplayFor(modelItem => item.Description)</td>
        <td>@Html.DisplayFor(modelItem => item.Price)</td>
        <td>@Html.DisplayFor(modelItem => item.Category)</td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ProductID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ProductID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ProductID })
        </td>
    </tr>
}

</table>



Visual Studio는 뷰 모델 개체의 형식을 참고해서 모델 형식에 정의된 속성들에 대응하는 요소들을 테이블로 만들어준다. 응용프로그램을 실행한 다음 /Admin/Index URL로 이동해보면 이 뷰가 어떻게 렌더되는지 확인할 수 있다. 그림11-3은 그 결과를 보여준다. 

이 스캐폴드 뷰는 제법 쓸만하다. 추가 수정을 한다해도 기본적으로 괜찮은 수준에서 출발하기 때문이다. 뷰 안에는 Product 클래스의 각 속성들에 대한 칼럼들과, Admin 컨트롤러의 액션 메서드들을 대상으로 하는 CRUD 동작들에 대한 링크가 만들어졌다(비록 스캐폴딩을 사용하지 않고 컨트롤러를 생성했기 때문에 대상이 되는 액션 메서드들은 존재하지 않지만서도 말이다)

스캐폴딩 기능이 유용하기는 하지만 그 결과로 만들어지는 뷰는 대부분의 복잡한 프로젝트에 서는 활용하기 어려운, 밋밋하고 일반적인 모습이다. 필자가 권하고 싶은 방식은 빈 컨트롤러와 빈 뷰, 그리고 빈 레이아웃으로부터 시작해서 필요한 시점에 여러분이 원하는 대로 기능들을 직접 추가하는 것이다. 

다시 DIY(do-it-yourself)접근법으로 돌아와서 Index.cshtml 파일을 목록 11-4와 같이 편집한다.

목록11-4 Index.cshtml 뷰 수정하기
@model IEnumerable<SportsStore.Domain.Entities.Product>

@{
    ViewBag.Title = "Admin: All Products";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="panel panel-default">
    <div class="panel-heading">
        <h3>All Products</h3>
    </div>
    <div class="panel-body">
        <table class="table table-striped table-condensed table-bordered">
            <tr>
                <th class="text-right">ID</th>
                <th>Name</th>
                <th class="text-right">Price</th>
                <th class="text-center">Actions</th>
            </tr>
            @foreach(var item in Model)
            {
                <tr>
                    <td class="text-right">@item.ProductID</td>
                    <td>@Html.ActionLink(item.Name, "Edit", new { item.ProductID })</td>
                    <td class="text-right">@item.Price.ToString("c")</td>
                    <td class="text-center">
                        @using (Html.BeginForm("Delete", "Admin"))
                        {
                            @Html.Hidden("ProductID", item.ProductID)
                            <input type="submit" class="btn btn-default btn-xs" value="Delete" />
                        }
                    </td>
                </tr>
            }
        </table>
    </div>
    <div class="panel-footer">
        @Html.ActionLink("Add a new product", "Create", null, new { @class="btn btn-default"})
    </div>
</div>


목록 11-4의 뷰는 보다 간결한 형태로 정보를 출력하고 있는데 Product 클래스의 일부 속성들이 생략되었으며 Bootstrap을 이용해서 꾸며졌다. 그림 11-4는 이 뷰가 어떻게 렌더되는지를 보여주고 있다. 


이제 멋진 목록 페이지를 갖게 됐다. 관리자가 카탈로그에 존재하는 상품들을 살펴볼 수 있을 뿐만 아니라 상품을 추가하거나 삭제하고 상세 내용을 살펴볼 수 있는 링크와 버튼들도 제공된다. 이어지는 절들에서는 이 동작들을 실제로 지원해주는 기능들을 추가할 것이다. 



※ 상품 편집하기

먼저 상품을 생성하거나 수정할 수 있는 기능을 제공하기 위해서는 그림11-1에서 살펴본 페이지들 중 하나와 유사한 상품 편집 페이지가 필요하다. 이를 위해서 다음과 같은 두 가지 작업을 수행해야 한다. 

* 관리자가 상품의 속성 값들을 변경할 수 있는 페이지를 보여준다. 

* 변경된 내용이 제출되었을 때 이를 처리할수 있는 액션 메서드를 추가한다. 




※ Edit 액션 메서드 생성하기
목록 11-5는 Admin 컨트롤러에 추가한 Edit 메서드를 보여주고 있다. 이 액션 메서드는 Index 뷰에서 Html.ActionLink 헬퍼 메서드를 이용해서 호출했던 액션 메서드다. 

목록11-5 AdminController.cs 파일에 Edit 액션 메서드 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Controllers
{
    public class AdminController : Controller
    {
        private IProductRepository repository;

        public AdminController(IProductRepository repo)
        {
            repository = repo;
        }
        // GET: Admin
        public ViewResult Index()
        {
            return View(repository.Products);
        }

        public ViewResult Edit(int productId)
        {
            Product product = repository.Products.FirstOrDefault(p => p.ProductID == productId);
            return View(product);
        }
    }
}

이 간단한 메서드는 productId 매개변수로 전달된 상품 ID를 이용해서 상품을 찾고, 찾은 상품을 뷰 모델 개체로 View 메서드에 전달한다. 




※ 단위 테스트 : EDIT 액션 메서드
Edit 액션 메서드에 대해서는 두 가지 동작을 테스트해야 한다. 첫 번째 동작은 유효한 ID를 제공했을 때 찾고자 했던 상품이 정상적으로 반환되는지 여부다. 즉 수정하기 위해서 지정한 바로 그 상품을 편집하고 있다는 것을 분명히 해야한다. 두 번째로 테스트해야 할 동작은 리파지토리에 존재하지 않는 ID를 요청했을 떄 어떤 상품도 반환되서는 안 된다는 점이다. 다음은 AdminTests.cs 단위 테스트 파일에 추가한 테스트 메서드들이다. 
...
[TestMethod]
        public void Can_Edit_Product()
        {
            //Arrange - Mock 리파지토리를 생성한다
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1"},new Product{ProductID=2, Name="P2"},new Product{ProductID=3, Name="P3"}
            });

            //Arrange - 컨트롤러를 생성한다
            AdminController target = new AdminController(mock.Object);

            //Act
            Product p1 = target.Edit(1).ViewData.Model as Product;
            Product p2 = target.Edit(2).ViewData.Model as Product;
            Product p3 = target.Edit(3).ViewData.Model as Product;

            //Assert
            Assert.AreEqual(1, p1.ProductID);
            Assert.AreEqual(2, p2.ProductID);
            Assert.AreEqual(3, p3.ProductID);
        }

        [TestMethod]
        public void Cannot_Edit_Nonexistent_Product()
        {
            //Arrange - Mock 리파지토리를 생성한다. 
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1"},new Product{ProductID=2, Name="P2"},new Product{ProductID=3, Name="P3"}
            });

            //Arrange - 컨트롤러를 생성한다
            AdminController target = new AdminController(mock.Object);

            //Act
            Product result = (Product)target.Edit(4).ViewData.Model;

            //Assert
            Assert.IsNull(result);
        }
.....