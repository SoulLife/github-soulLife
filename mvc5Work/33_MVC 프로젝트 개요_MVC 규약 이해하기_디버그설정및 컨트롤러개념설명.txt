CHAPTER 14장 MVC 프로젝트 개요

본격적으로 MVC 프레임워크의 기능들을 살펴보기 전에 몇 가지 추가적인 부분을 더 살펴보고자 한다. 이번장에서는 기본 프로젝트의 구조와 명명규약을 비롯한 ASP .NET MVC 응용프로그램의 구조 및 특징에 관해서 살펴볼 것이다. 이 중 일부는 MVC 프레임워크가 동작하는 방식에 따라 선택적으로 변경할 수도 있지만 일부는 MVC 프레임워크의 동작 방식에 하드코딩되어 있어서 변경이 불가능 하다. 

※ Visual Studio MVC 프로젝트를 이용하여 작업하기
Visual Studio는 새 ASP .NET 프로젝트를 만들 때 여러분이 원하는 프로젝트의 초기 내용들을 선택할 수 있도록 다양한 옵션들을 제공한다. 이를 통해 초급 개발자들은 ASP .NET 기술을 쉽게 습득할 수 있으며 일반적인 기능이나 작업에 대한 성공 사례를 적용하는 데도 시간을 절약할 수 있다. 이와 같은 지원은 컨트롤러나 뷰를 생성하는 템플릿에도 적용되어 있어서 데이터 개체를 나열하거나 모델의 속성을 편집하는 등의 코드가 포함된 컨트롤러나 뷰를 생성할 수도 있다. 

이미 알고 있는 것처럼 Microsoft는 Visual Studio 2013에서 MVC 5의 템플릿 및 스캐폴딩(scaffolding)기능을 개선했다. 이는 다양한 ASP .NET 프로젝트들 간의 경계를 없애고 더 많은 프로젝트 템플릿과코드 구성을 제공하기 위한 것이다. 

이 책의 1부에서도 느꼈겠지만 필자는 비슷한 형태의 프로젝트나 코드를 찍어내는 듯한 방식을 지양하고 있다. 이러한 방식은 의도 자체는 나쁘지 않지만 항상 실행에 있어서는 실망스러운 결과를 가져오기 때문이다. ASP .NET 및 MVC 프레임워크의 괜찮은 특징 중 하나는 바로 자신의 개발 스타일에 맞게 플랫폼을 고칠수 있는 유연성이다. 그러나 Visual Studio가 만들어내는 프로젝트, 클래스, 뷰를 보면, 마치 다른 사람의 스타일대로 개발을 하라고 강요하는 것같은 느낌을 받는다. 또한 그 내용과 구성에 있어서도 너무 일반적이고 평범해서 활용성이 별로 없다. 가령 10장에서 언급했던 것처럼 모바일 기기를 대상으로 한 반응형 디자인을 사용할 경우 모든 기기에 대한 경험을 반영하지 못하고 결국 하향 평준화시키게 되는 위험이 생길 수 있는데, 이는 Visual Studio의 템플릿에서도 마찬가지다. Microsoft는 여러분이 어떤 응용프로그램을 만들고자 하는지 알 수 없기 때문에 모든 면들을 감안하게 된다. 이러한 단조롭고 일반적인 방식 때문에 필자는 더 이상 기본 콘텐트를 사용하지 않는다. 

필자는 (그럼 어떻게 해야 하는지 묻는 사람들에게)우선 빈 프로젝트를 만들고, 거기에 여러 분이 원하는 폴더와 파일, 그리고 패키지를 추가하라고 충고하고 싶다. 그렇게 하면 MVC 프레임워크의 동작 원리를 더 많이 배울 수 있을 뿐만 아니라 여러분이 만든 응용프로그램을 완벽하게 제어할 수 있을 것이다. 

그러나 필자의 취향 때문에 여러분의 개발 경험이 영향을 받아서는 안될 것이다. 어쩌면 여러분은 이 템플릿과 스캐폴딩이 필자의 작업 방식보다 훨씬 유용하다고 생각할 수도 있다. 특히 여러분이 ASP .NET 초보 개발자라서 아직까지 자신에게 맞는 개발 스타일을 만들지 못한 경우라면 더욱 그럴 것이다. 또한 프로젝트 템플릿에서 유용한 리소스와 다양한 아이디어들을 발견할 수도 있다. 물론 그런 경우에도 템플릿이 어떻게 동작하는지 충분히 이해한 다음 응용프로그램에 필요한 기능을 추가하는 것이 좋을 것이다. 


※ 프로젝트 생성하기
일반적으로 새로운 MVC 프레임워크 프로젝트를 처음 만드는 경우, Empty 템플릿과 MVC 템플릿 중에서 한 가지를 선택하게된다. 이 템플릿들의 이름은 다소 오해를 불러일으킬 소지가 있는데, 왜냐하면 그림14-1에서 볼 수 있는 것처럼 [새 ASP .NET 프로젝트(New ASP.NET Project)] 대화상자의 [다음의 폴더 및 코어 참조 추가(Add folders and core references for)]영역에서 MVC 옵션을 선택하면 어떤 프로젝트 템플릿을 선택하더라도 MVC 프레임워크에 필요한 기본 폴더와 어셈블리가 추가되기 때문이다. 그림14-1은 MVC 옵션이 선택된 모습을 보여준다 


이 템플릿들 간의 실질적인 차이점은 MVC 프로젝트 템플릿이 새 프로젝트에 추가해주는 부가적인 콘텐츠에 있다. 이 콘텐츠는 이미 만들어진 시작 지점을 제공해주며 여기에는 기본 컨트롤러와 뷰, 보안 구성, 몇 가지 잘 알려진 JavaScript 및 CSS 패키지들(예를 들면 jQuery와 Bootstrap)과 Bootstrap을 사용하여 응용프로그램의 콘텐트 테마를 제공하는 레이아웃 등이 포함된다. 반면 Empty 템플릿에는 MVC 프레임워크에 필요한 기본 참조와 간단한 폴더 구조만 포함되어 있다. MVC 템플릿에는 많은 콘텐츠가 포함되어 있는데 그림14-2에서 그 차이점을 확인할 수 있다. 이 그림은 새롭게 추가된 두 개의 프로젝트를 보여준다. 이 중 왼쪽은 Empty 템플릿에서 MVC 폴더 및 참조 옵션을 선택하여 만든 프로젝트다. 그리고 오른쪽은 MVC 템플릿으로 만든 프로젝트의 콘텐트를 보여주는데, 콘텐츠를 한 페이지에 표시하기에는 너무 길어서 몇 가지 폴더별로 솔루션 탐색기를 나누어 한 페이지에 보이도록 하였다. 

MVC 프로젝트가 추가해주는 부가적인 파일들이 그림에서는 복잡하고 많아 보이지만 실제는 그렇지가 않다. 이 중 일부는 인증과 관련된 파일들이고, 나머지는 JavaScript 파일들과 CSS 파일들의 일반 버전들 및 축소된 버전들이다(이 파일들이 어떻게 사용되는지는 26장에서 살펴본다)


TIP:
Visual Studio는  MVC 템플릿을 선택해서 생성한 프로젝트를 구성할 때 NuGet 패키지를 이용하기 때문에 Visual Studio의 [도구(Tools)] > [라이브러리 패키지 관리자(Library Package Manager)] 메뉴에서 [솔루션용 NuGet 패키지 관리(Manager NuGet Packages for Solution)]를 선택해보면 어떤 패키지가 사용되었는지 확인할 수 있다. 또한 Empty 템플릿으로 만든 프로젝트뿐만 아니라 모든 프로젝트에 동일한 패키지를 추가할 수도 있다. (이 책의 1부에서 살펴본 예제들은 모두 이방식을 사용해서 Empty 템플릿을 기반으로 생성했다. 



어떤 템플릿을 선택하든지 생성된 프로젝트의 폴더 구조는 비슷하다. MVC 프로젝트에 포함되는 일부 항목들은 특별한 역할을 담당하는데 이는 ASP .NET 또는 MVC 프레임워크에 하트코드로 작성되어 있다. 나머지 항목들에는 명명규약이 적용된다. 표 14-1은 MVC 프로젝트에 포함된 주요 파일 및 폴더에 대한 설명이다. 프로젝트에 기본적으로 표시되지 않은 파일 및 폴더에 대해서는 나머지 장들에서 다시 설명할 것이다. 

표14-1 MVC 프로젝트 항목 요약

폴더 및 파일			설명											비고
/App_Data			이 폴더는 SQL Server Express, SQLite 및 기타 파일 기반 저장소를	IIS는 이 폴더의 내용들을 외부로 서비스하지 않는다. 
				사용할 경우 XML 파일이나 데이터베이스 같은 내부 데이터를 저장하는
				위치다

/App_Start			이 폴더에는 라우트, 필터, 콘텐츠 번들 등에 대한 정의 같은 프로젝트에	라우트는 15장과 16장에서, 필터는 18장에서 콘텐츠 번들은
				대한 주요 구성 설정들이 위치한다.						26장에서 살펴본다.

/Areas				영역(areas)은 큰 응용프로그램을 보다 작은 조각으로 나누는 방법이다.	영역에 대해서는 15장에서 살펴본다. 

/bin				컴파일된 MVC 응용프로그램의 어셈블리와 GAC에 등록되지 않은 		솔루션 탐색기 창에 bin 디렉터리가 나타나지 않는 경우 [모든
				모든 참조된 어셈블리들이 위치하는 장소다.					파일보기(Show All Files)] 버튼을 클릭하면 볼 수 있다. 이 폴더
															에 위치한 파일들은 컴파일 할 때 생성되는 바이너리 파일들이
															기 떄문에 기본적으로 소스 제어에 포함시켜서는 안 된다. 

/Content			이 폴더는 CSS 및 이미지 파일 같은 정적 콘텐츠를 위치시키기 위한	규약이기는 하지만 반드시 준수해야 하는 것은 아니다. 각자	의
				장소다.										상황에 맞게 정적 콘텐츠를 다른 폴더에 위치시킬수 있다. 

/Controllers			컨트롤러 클래스를 위치시키기 위한 장소다.					단지 규약일 뿐이다. 컨트롤러 클래스는 위치에 상관없이 모두
															동일한 어셈블리로 컴파일되기 때문에 다른 폴더에 위치시킬 
															수 있다. 

/Models			뷰 모델 및 도메인 모델 클래스를 위치시키기 위한 장소다. 그러나 아주 	단지 규약일 뿐이다. 프로젝트 내부의 다른 폴더나 별도 프로젝
				간단한 응용프로그램이 아니라면 SportsStore 예제에서 살펴봤던 것처럼	트 등에 모델 클래스를 정의할 수도 있다. 
				별도의 프로젝트에 도메인 모델을 정의하는 것이 좋다. 

/Scripts 			응용프로그램에 필요한 JavaScript 라이브러리들을 저장하기 위한		단지 규약일 뿐이다. 스크립트 파일들은 단지 일종의 정적 콘텐
				폴더다.										츠이기 때문에 다른 장소에 위치시킬 수 있다. 스크립트 파일 
															관리에 대한 더 자세한 내용은 26장을 참고하기 바란다.

/Views			뷰 및 부분 뷰가 위치하는 폴더로 일반적으로 뷰 및 부분 뷰와 관련된	/Views/Web.config 구성 파일에는 IIS가 이 디렉터리의 뷰를	 
				컨트롤러의 이름과 동일한 이름의 폴더에 함께 묶여 있다.			서비스하지 못하도록 설정되어 있다. 뷰는 반드시 액션 메서드
															를 통해서 렌더되어야 한다.

/Views/Shared		이 디렉터리에는 특정 컨트롤러에 종속되지 않는 레이아웃과 뷰가
				포함된다. 

/Views/Web.config		이 파일은 응용프로그램 위한 구성 파일이 아니다. 이 파일에는 ASP .NET
				에서 뷰가 동작하는 데 필요한 구성과 IIS에 의해서 뷰 파일 자체가 서비스
				되지 않도록 제한하는 데 필요한 구성, 그리고 기본적으로 뷰에 임포트하는
				네임스페이스에 대한 정보가 포함되어 있다. 

/Global.asax			이 파일은 전역 ASP .NET 응용프로그램 클래스이다. 이 코드 숨김(code-	Global.asax 파일은 MVC 응용프로그램에서도 Web Forms 응용
				behind) 클래스(Global.asax.cs)에는 라우팅 구성 정보가 등록되며(MVC 5	프로그램에서와 동일한 역할을 수행한다. 
				에서는 더 이상 Global.asax.cs 파일에 라우팅 정보가 저장되지 않는다. 이
				제 실제 라우팅 정보는 /App_Start폴더의 RouteConfig.cs 파일 내에 설정
				된다)
				응용프로그램이 초기화되거나 종료될 때 또는 처리되지 않은 예외가 발생
				했을 때 실행될 코드가 설정된다. 

/Web.config			이 파일은 응용프로그램을 위한 구성 파일이다. 				Web.config 파일은 MVC 응용프로그램에서도 WebForms 응용
															프로그램에서와 동일한 역할을 수행한다. 



※ MVC 규약 이해하기
MVC 프로젝트에는 두 가지 종류의 규약이 존재한다. 그 중 첫 번째는 프로젝트 구조를 구성하는 방식에 관한 제안이다. 예를 들어 JavaScript 파일은 Scripts 폴더에 위치한다는 규약 같은 것이다. 이 규약을 준수함으로써 다른 MVC 개발자들도 이 폴더에서 JavaScript 파일을 쉽게 찾을 수 있을 것이라고 기대할 수 있으며, NuGet 패키지 역시 이 폴더에 JavaScript 파일들을 설치할 것이다. 그러나 원한다면 얼마든지 자유롭게 Script 폴더의 이름을 바꾸거나 아예 Script 폴더를 삭제하고 JavaScript 파일들을 다른 폴더에 들 수도 있다. 그렇게 하더라도 뷰의 script 요소가 여러분이 설정한 위치를 참조하는 한 MVC 프레임워크가 응용프로그램을 실행하는 데에는 어떠한 악영향도 미치지 않는다. 

또 다른 종류의 규약은 CoC(Convention over Configuration)법칙에서 비롯된 것으로 이는 루비온 레일즈(Ruby on Rails)를 매우 인기 있게 만든 가장 큰 매력 중에 하나이기도 하다 CoC란 예를 들어 컨트롤러와 뷰의 관계를 명시적으로 구성할 필요가 없다는 것을 말한다. 즉 명명규칙에 따라 파일의 이름을 지정하기만 하면 모든 것이 정상적으로 동작을 하게 된다는 것이다. 그러나 이러한 규약을 따르게 되면 프로젝트 구조를 바꾸는 데 유연성이 떨어지게 된다. 이어지는 절들에서는 이처럼 구성 대신에 사용되는 규약들에 대해서 살펴볼 것이다. 


TIP:
사용자 지정 뷰 엔진(이에 대해서는 20장에서 다룬다) 을 사용하게 되면 어떤 규약이라도 변경할 수 있다. 그러나 규약을 변경하는 것을 가볍게 생각해서는 안 된다. 왜냐하면 대개의 경우 변경된 규약들은 여러분들이 MVC 프로젝트 내에서 준수해야 할 규약들이기 때문이다. 




※ 컨트롤러 클래스에 대한 규약 따르기
컨트롤러 클래스의 이름은 반드시 ProductController , AdminController, HomeController 등과 같이 Controller로 끝나야 한다. 프로젝트의 다른 곳에서 컨트롤러를 참조할 때는 가령 HTML 헬퍼 메서드를 사용할 때는 컨트롤러 이름의 앞부분만(예를 들면 Product)입력하면 MVC 프레임워크가 자동으로 그 이름에 Controller를 붙여서 컨트롤러 클래스를 찾아준다. 

TIP:
IControllerFactory 인터페이스를 구현하면 이 동작을 변경할 수 있다. 이에 대해서는 19장에서 다룬다. 


※ 뷰에 대한 규약 따르기
뷰 및 부분 뷰는 /Views/Controllername 폴더에 저장된다. 예를 들어 ProductController 클래스와 연결된 뷰는 /Views/Product 폴더에 저장될 것이다. 



TIP:
Views 폴더에서 클래스 이름의 Controller 부분이 제외되었음을 유의하기 바란다. 즉 뷰가 저장되는 폴더의 이름은 /Views/ProductController가 아닌 /Views/Product 이다. 이러한 명명규칙이 처음에는 낯설게 느껴지겠지만 곧익숙해질 것이다. 



MVC 프레임워크는 액션 메서드의 기본 뷰 이름이 그 메서드의 이름과 같다고 가정한다. 예를 들어 List 라는 액션 메서드와 관련된 기본 뷰의 이름은 List.cshtml일 것으로 생각한다는 것이다. 따라서 ProductController 클래스의 List 액션 메서드의 경우 기본 뷰는 /Views/Product/List.cshtml 이라고 간주된다. 기본 뷰는 다음과 같이 액션 메서드 내에서 View 메서드를 호출한 결과를 반환할 때 사용된다. 

...
return View();
...

또는 다음과 같이 다른 뷰의 이름을 명시적으로 지정할 수도 있다. 

...
return View("MyOtherView");
...

이때 한 가지 유의할 점은 파일 확장자나 뷰의 경로를 지정하지 않는다는 것이다. MVC 프레임워크는 뷰를 찾을 때 먼저 컨트롤러 이름으로 명명된 폴더에서 찾은 뒤에 뷰를 찾지 못하면 다시 /Views/Shared 폴더에서 찾는다. 따라서 여러 컨트롤러에서 공통으로 사용되는 뷰들을 /Views/Shared 폴더에 두면 프레임워크가 그뷰들을 찾을수 있다. 


※ 레이아웃에 대한 규약 따르기
레이아웃에 대한 명명규약은 파일 이름은 밑줄(_)문자로 시작해야 하며, 레이아웃 파일은 /Views/Shared 폴더에 위치해야 한다는 것이다. 그리고 레이아웃은 기본적으로 /Views/_ViewStart.cshtml 파일을 매개체로 모든 뷰에 적용된다. 만약 뷰에 기본 레이아웃을 적용하지 않으려면 다음과 같이 다른 레이아웃을 적용하도록 _ViewStart.cshtml 파일의 설정을 변경하면(또는 파일 자체를 삭제하면)된다. 
@{
	Layout = "~/Views/Shared/_Mylayout.cshtml";
}

또는 다음과 같이 특정 뷰에서 레이아웃 자체를 비활성화시킬 수도 있다. 
@{
	Layout = null;
}



※ MVC 응용프로그램 디버깅하기
ASP .NET MVC 응용프로그램은 ASP .NET Web Forms 응용프로그램을 디버깅할 때와 정확하게 같은 방법으로 디버깅할 수 있다. 

Visual Studio 디버거는 다양한 기능과 사용법을 제공해주는 강력하고 유연한 도구다. 다만 이 책에서는 아주 기본적인 내용들만 살펴볼 것이다. 이어지는 절들에서 디버거를 설정하고 MVC 프로젝트를 디버깅하는 다양한 방법에 대해 알아보자. 



※ 예제 프로젝트 준비하기
디버거의 사용법을 알아보기 위해 MVC 프로젝트 템플릿을 이용해서 새 MVC 프로젝트를 생성해보자. 이 프로젝트를 통해서 기본 콘텐츠와 구성이 어떻게 설정되는지, 그리고 뷰에 적용된 기본 테마 효과는 어떤 것인지 확인할 수 있다. 새 프로젝트의 이름은 그림 14-3에서 보는 바와 같이 DebuggingDemo다. 기본 사용자 보안 시스템을 설정하도록 [개별 사용자 계정(Individual User Accounts)[ 인증 옵션을 선택했다. 

그런 다음 [확인(OK)] 버튼을 클릭하면 프로젝트가 생성되고 MVC 템플릿에 포함된 기본 패키지, 파일, 폴더 등이 추가된다. 응용프로그램을 실행시켜보면 그림14-4와 같이 프로젝트에 추가된 파일과 설정들이 어떻게 적용되었는지 확인할 수 있다. 

응용프로그램 및 브랜드 이름에 대한 자리표시자 요소들이 존재하며, MVC 문서, NuGet 호스팅 옵션에 대한 링크가 있다. 화면 위쪽에 있는 네비게이션 바는 SportsStore 응용프로그램에서 사용했던 네비게이션 바와 동일하며 레이아웃은 약간의 반응형(responsive) 기능도 갖고 있다. 창의 폭을 변경해보면 그 효과를 확인할 수 있을 것이다. 


※ 컨트롤러 만들기
MVC 프로젝트를 만들면 Visual Studio가 기본적으로 Home 컨트롤러를 추가해주는데, 이 컨트롤러의 코드를 목록 14-1과 같이 수정한다. 

목록14-1 HomeController.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace DebuggingDemo.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            int firstVal = 10;
            int secondVal = 5;
            int result = firstVal / secondVal;

            ViewBag.Message = "Welcome to ASP .NET MVC!";

            return View(result);
        }

        
    }
}


※ 뷰 만들기
Visual Studio 는 프로젝트를 만드는 과정에서 Views/Home/Index.cshtml 뷰를 함께 추가한다. 이 뷰의 코드도 목록 14-2와 같이 수정한다. 

목록14-2 Index.cshtml 파일의 내용
@model int
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/Site.css" rel="stylesheet" type="text/css" />
    <title>Index</title>
</head>
<body>
    <h2 class="message">@ViewData["Message"]</h2>
    <p>
        The calculation result value is: @Model
    </p>
</body>
</html>


마지막 준비 과정으로 목록 14-3과 같이 /Content/Site.css 파일에 새로운 스타일을 하나 추가하고, 기존 스타일 중 하나를 수정한다. Visual Studio는 MVC 템플릿의 일부로 이 Site.css 파일을 생성해주는데 이 파일은 응용프로그램의 CSS 스타일들을 작성하는 기본 위치다. (목록14-2의 뷰를 살펴보면 이 파일을 참조하기 위한 link 요소가 추가되어 있다.)

목록14-3 /Content/Site.css 파일에 스타일 추가하기
body {
    padding-top: 5px; padding-bottom: 5px;
}
.field-validation-error {color: #b94a48;}
.field-validation-valid { display: none;}
input.input-validation-error {border: 1px solid #b94a48;}
input[type="checkbox"].input-validation-error { border: 0 none;}
.validation-summary-errors { color: #b94a48;}
.validation-summary-valid { display: none;}
.no-color { background-color: white; border-style:none;}
.message { font-size: 20pt; text-decoration: underline;}



※ Visual Studio 디버거 시작하기
새로운 프로젝트를 생성하면 Visual Studio 가 자동으로 디버깅이 가능하도록 준비해주지만 그 구성을 어떻게 변경하는지는 이해할 필요가 있다. 이에 관한 주요 설정은 목록 14-4와 같이 프로젝트의 루트 폴더에 위치한 Web.config 파일의 System.Web 요소에서 확인할 수 있다. 

목록14-4 Web.config 파일의 debug 어트리뷰트
<system.web>
    <authentication mode="None" />
    <compilation debug="true" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" />
  </system.web>

MVC 프레임워크 프로젝트는 보통 응용프로그램이 IIS상에서 구동될 때 컴파일된다. 따라서 개발하는 동안에는 compilation 요소의 debug 어트리뷰트를 true로 설정해야 한다. 이는 디버거가 컴파일을 통해 만들어진 클래스 파일상에서 동작하도록 하기 위한 것이다. 


주의:
절대로 debug 어트리뷰트의 값을 false로 설정하지 않은 상태로 응용프로그램을 운영 서버에 배포해서는 안 된다. Visual Studio를 통해서 응용프로그램을 배포한다면(13장에서 살펴본 것처럼)프로젝트 구성을 Release로 변경할 때 Visual Studio가 이 설정을 자동으로 변경할 것이다. 


Web.config 파일 외에 Visual Studio가 생성한 클래스 파일들에도 디버그 정보가 포함되어 있다. 이는 그리 중요한 것은 아니지만 다양한 디버그 설정들 간에 동기화가 되지 않을 경우 문제를 일으킬 수 있다. 그림14-5는 Visual Studio 의 도구 모음에서 Debug 구성을 선택한 모습이다. 

MVC 프레임워크 응용프로그램을 디버깅하려면 Visual Studio 의 [디버그(Debug)] 메뉴에서 [디버깅 시작(Start Debugging)]을 선택하거나 Visual Studio 의 도구 모음에서 초록색 화살표(그림14-5에서 보면 응용 프로그램을 표시할 브라우저 이름(여기서는 Internet Explorer)옆에 있는 화살표)를 클릭한다. 

만약 디버거가 시작될 때 Web.config 파일의 디버그 속성이 false로 설정되어 있으면 Visual Studio가 그림14-6과 같은 대화 상자를 표시한다. Visual Studio가 Web.config 파일을 수정할 수 있도록 옵션을 선택한 다음 [확인(OK)]버튼을 클릭하면 디버그가 시작된다. 

그러면 잠시 후 그림14-7과 같이 새 브라우저 창에 응용프로그램이 나타날 것이다. 

이미 응용프로그램에 디버거가 연결된 상태지만 디버거가 중단되기 전까지는 아무것도 달라진 점을 느끼지 못할 것이다(이에 대해서는 바로 다음 절에서 설명할 것이다)디버거를 중지 하려면 Visual Studio의 [디버그(Debug)] 메뉴에서 [디버깅 중지(Stop Debugging)]를 선택하거나 브라우저 창을 닫는다. 