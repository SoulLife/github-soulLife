※ Visual Studio를 이용한 단위 테스트
이 책에서는 Visual Studio와 함께 제공되는 내장 단위 테스트 지원 기능을 사용하고 있지만 선택할 수 있는 다른 단위 테스트 패키지들도 많다. 가장 유명한 것은 아마도 NUnit일 것이다. 그러나 거의 모든 테스트 패키지들은 대부분 같은 작업을 수행한다. 이 책에서 Visual Studio의 테스트 도구들을 선택한 이유는 단지 필자가 테스트 도구와 IDE의 다른 부분들이 통합되어 있는 형태를 선호하기 때문이다. 

먼저 예제 프로젝트에 Visual Studio의 단위 테스트 지원을 살펴보기 위한 IDiscountHelper 인터페이스의 새로운 구현을 추가한다. Models 폴더에 MinimumDiscountHelper.cs 라는 새로운 파일을 생성하고 목록6-26과 같이 그 내용을 작성한다. 

목록6-26 MinumumDiscountHelper.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace EssentialTools.Models
{
    public class MinumumDiscountHelper : IDiscountHelper
    {
        public decimal ApplyDiscount(decimal totalParam)
        {
            throw new NotImplementedException();
        }
    }
}

이번 예제의 목표는 다음과 같은 동작들을 수행하도록 MinimumDiscountHelper 클래스를 구현하는 것이다. 

* 합계가 $100를 초과하면 10퍼센의 할인율이 적용된다. 
* 합계가 $10에서 $100 사이면 $5의 할인율이 적용된다.
* 합계가 $10 미만이면 할인율은 적용되지 않는다.
* 합계가 $0보다 작으면 ArgumentOutOfRangeException 예외가 던져진다. 

아직 MinimumDiscountHelper 클래스에는 이 중 어떠한 동작도 구현되지 않은 상태다. 3장에서 살펴봤던 것처럼 테스트 주도 개발(Test Driven Development, TDD)방법론에 따라 단위 테스트부터 먼저 작성한 다음 코드를 구현해보도록 하자. 



※ 단위 테스트 프로젝트 생성하기
가장 먼저 해야할 일은 단위 테스트 프로젝트를 생성하는 것이다 [솔루션 탐색기(Solution Explorer)]의 최상위 수준 항목(이번 장의 예제의 경우 [솔루션 EssentialTools]라는 레이블을 갖고 있을 것이다)을마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [추가(Add)] > [새 프로젝트(New project)]를 선택한다. 


TIP:
MVC 프로젝트를 새로 생성할 때 프로젝트의 초기 내용을 선택할 수 있는 [새 ASP .NET 프로젝트(New ASP .NET Project)]대화상자에서 [단위 테스트 추가(Add Unit Tests)]옵션을 선택하면 처음부터 테스트 프로젝트를 함께 생성할 수도 있다. 



그러면 [새 프로젝트 추가(Add New Project)] 대화 상자가 나타난다. 그림6-4와 같이 좌측 패인의 [VIsual C#] 템플릿 영역에서 [테스트(Test)]를 선택한 다음 중앙 패인에서 [단위 테스트 프로젝트(Unit Test Project)]를 선택한다. 

프로젝트의 이름을 EssentialTools.Tests라고 지정한 다음에 [확인(OK)]버튼을 클릭하면 Visual Studio가 새로운 프로젝트를 생성해서 현재 솔루션의 MVC 응용프로그램 프로젝트와 같은 수준에 추가해 준다. 

계속해서 테스트 프로젝트에 응용프로그램 프로젝트에 대한 참조를 추가해준다. 그래야만 테스트 프로젝트가 응용프로그램의 클래스들에 접근하거나, 그 클래스들에 대한 테스트를 수행할 수 있다. 솔루션 탐색기에서 EssentialTools.Tests 프로젝트의 [참조(References)] 항목을 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [참조 추가(Add Reference)]를 선택한다. 그리고 그림6-5와 같이 좌측 패인에서 [솔루션(Solution)]을 클릭하고 EssentialTools 항목 좌측의 체크박스를 선택한 다음 [확인(OK)] 버튼을 클릭한다(만약 이 작업의 결과로 EssentialTools.Tests 프로젝트의 [참조(References)]에 추가된 EssentialTools 프로젝트 참조에 노란 느낌표 아이콘이 나타난다면 테스트 프로젝트의 대상 프레임워크 버전을 4.5.1로 변경해준다. 두 프로젝트 간의 프레임워크 버전이 일치하지 않으면 이렇게 경고가 나타난다.





※단위 테스트 생성하기
자동으로 생성된 EssentialTools.Tests 프로젝트의 UnitTest1.cs 파일에 단위 테스트를 추가해 보자. Visual Studio의 유료 버전에서는 특정 클래스에 대한 테스트 메서드들을 자동으로 생성해주는 Express 에디션에서는 사용할 수 없는 멋진 기능들을 제공해 준다. 그러나 그런 기능들 없이도 얼마든지 유용하고 의미 있는 테스트들을 작성할 수 있다. 먼저 UnitTest1.cs 파일의 내용을 목록 6-27과 같이 변경한다. 
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using EssentialTools.Models;
namespace EssentialTools.Tests
{
    [TestClass]
    public class UnitTest1
    {
        private IDiscountHelper getTestObject()
        {
            return new MinumumDiscountHelper();
        }
        [TestMethod]
        public void Discount_Above_100()
        {
            //Arrange (시나리오를 설정한다)
            IDiscountHelper target = getTestObject();
            decimal total = 200;

            //Act (작업을 시도한다)
            var discountedTotal = target.ApplyDiscount(total);

            // Assert(결과를 검증한다)
            Assert.AreEqual(total * 0.9M, discountedTotal);
        }

        
    }
}

테스트를 포함하고 있는 클래스에는 TestClass 어트리뷰트가 지정되어 있다. 그리고 TestMethod 어트리뷰트가 지정된 각각의 메서드들이 바로 단위 테스트들이다. 그러나 단위 테스트 클래스의 모든 메서드들이 단위 테스트일 필요는 없다. 결과적으로 목록6-27에는 하나의 단위 테스트가 작성되어 있는 셈이다. 

이 클래스에는 테스트를 준비하기 위한 용도로 사용될 getTestObject 메서드가 정의되어 있다. 그러나 이 메서드에는 TestMethod 어트리뷰트가 지정되어 있지 않기 때문에 Visual Studio는 이 메서드를 단위 테스트로 인식하지 않는다. 


TIP:
테스트 클래스에서 using 구문을 사용해서 EssentialTools.Models 네임스페이스를 임포트하고 있다는 점에 주의하기 바란다. 테스트 클래스 역시 일반적인 C# 클래스일뿐 MVC 프로젝트에 관한 특별한 정보를 갖고 있는 것은 아니다. 프로젝트에 테스트에 관한 마법을 부여해주는 주체는 TestClass 어트리뷰트와 TestMethod 어트리뷰트다. 



이 단위 테스트 메서드도 3장에서 살펴봤던 Arrange/ Act/Assert(A/A/A) 패턴을 따르고 있다는 것을 알 수 있다. 그리고 단위 테스트의 이름 명명 방식에 대한 수많은 규약이 존재하지만 필자가 추천하는 방식은 간단한데, 단지 해당 테스트가 검사하는 내용을 잘 나타내주는 이름을 지정하라는 것이다. 이번 단위 테스트 메서드의 이름은 Discount_Above_100으로 필자가 판단하기에는 명료하고 의미 있는 이름이다. 가장 중요한 점은 설령 이 방식이 마음에 들지 않아서 다른 이름 명명 규칙을 도입한다고 하더라도 여러분이(또는 여러분의 팀이)지정한 이름의 패턴을 이해할수 있기만 하면 된다는 것이다. 

Discount_Above_100 메서드에서는 먼저 이번 예제에서 테스트하고자 하는 개체, 즉 MinimumDiscountHelper 클래스의 인스턴스를 생성해주는 GetTestObject 메서드를 호출해서 테스트 메서드를 설정하고 있다. 그리고 뒤이어 테스트에서 사용할 합계 값을 선언하고 있는데, 이 작업들은 단위 테스트의 준비(Arrange) 부분에 해당된다. 

단위 테스트의 작업(Act)부분에서는 실제로 MinimumDiscountHelper.ApplyDiscount 메서드를 호출하고 그 결과를 discountedTotal 변수에 할당한다. 마지막으로 테스트의 검증(Assert)부분에서는 Assert.AreEqual 메서드를 이용해서 ApplyDiscount 메서드에서 반환받은 값이 처음 지정한 합계 값의 90%인지를 확인한다. 

검증 과정에 사용되는 Assert 클래스는 테스트에서 사용할 수 있는 다양한 정적 메서드들을 제공해준다. 이 클래스는 테스트들을 설정하거나 실행할 때 유용하게 활용할 수 있는 몇 가지 다른 추가적인 클래스들과 함께 Microsoft.VisualStudio.TestTools.UnitTesting 네임스페이스에 위치해 있다. 이 네임스페이스의 클래스들에 대한 보다 자세한 정보는 http://msdn.microsoft.com/en-us/library/ms182530.aspx를 참고하기 바란다. 


이 Assert 클래스는 테스트 시 가장 많이 사용되는 클래스 들 중 하나로 표6-4에 이 클래스의 가장 중요한 메서드들을 정리해봤다. 

표6-4 정적 Assert 메서드
메서드메서드				설명
AreEqual<T>(T, T)				두 개의 T 형식 개체가 동일한 값을 갖고 있으면 어설션을 통과한다
AreEqual<T>(T, T, string)

AreNotEqual<T>(T, T)			두 개의 T 형식 개체가 서로 다른 값을 갖고 있으면 어설션을 통과한다
AreNotEqual<T>(T, T, string)

AreSame<T>(T, T)				두 변수가 동일한 개체를 참조하고 있으면 어설션을 통과한다
AreSame<T>(T, T, string)

AreNotSame<T>(T, T)			두 변수가 서로 다른 개체를 참조하고 있으면 어설션을 통과한다
AreNotSame<T>(T, T, string)

Fail()						조건 확인 없이 어설션을 실패로 처리한다
Fail(string)

Inconclusive()				단위 테스트 결과를 명확하게 판명되지 않은 것으로 나타낸다. 
Inconclusive(string)

IsTrue(bool)					bool 매개변수의 값이 true면 어설션을 통과한다. 주로 bool 결과를 반환하는 표현식을 평가할 때 사용된다. 
IsTrue(bool, string)

IsFalse(bool)					bool 매개변수의 값이 false면 어설션을 통과한다
IsFalse(bool, string)

IsNull(object)				지정한 변수에 개체 참조가 할당되어 있지 않으면 어설션을 통과한다
IsNull(object, string)

IsNotNull(object)				지정한 변수에 개체 참조가 할당되어 있으면 어설션을 통과한다. 
IsNotNull(object, string)

IsInstanceOfType(object, Type)		object 매개변수가 지정된 형식이거나 지정된 형식으로부터 파생된 형식인 경우 어설션을 통과한다 
IsInstanceOfType(object,Type, string)

IsNotInstanceOfType(object, Type)	object 매개변수가 지정된 형식이 아니면 어설션을 통과한다
IsNotInstanceOfType(object, Type, string)


Assert 클래스의 이런 다양한 정적 메서드들을 이용하면 단위 테스트의 여러 가지 측면들을 점검할 수 있다. 이 메서드들은 점검에 실패하는 경우 예외를 던진다. 단위 테스트를 통과하려면 모든 어설션들이 성공해야만 한다. 

이 표의 모든 메서드들은 문자열 매개변수를 지정할 수 있는 오버로드 버전을 갖고 있다. 이 문자열에는 어설션이 실패했을 때 출력할 예외 메시지를 전달할 수 있다. 또한 AreEqual 메서드와 AreNotEqual 메서드는 다양한 방식의 비교를 지원하는 여러 가지 오버로드들을 갖고 있는데, 가령 대소문자를 고려하지 않고 문자열을 비교하는 버전도 존재한다. 

TIP:
Microsoft.VisualStudio.TestTools.UnitTesting 네임스페이스의 멤버들 중, 주목할 만한 멤버로는 ExpectedException 어트리뷰트가 있다. 이 어트리뷰트는 단위 테스트에서 ExceptionType 매개변수에 지정한 형식의 예외가 던져지는 경우에만 어설션이 성공한다. 이 어트리뷰트를 사용하면 try... catch 블록으로 단위 테스트 코드를 지저분하게 만들지 않더라도 던져진 예외를 깔끔하게 확인할 수 있다. 


지금까지는 한 가지 단위 테스트만 집중적으로 살펴봤지만 MinimumDiscountHelper 클래스가 필요한 다른 모든 동작들을 정상적으로 수행하는지를 검증하기 위해서는 테스트 프로젝트에 더 많은 테스트들을 추가해야 한다. 목록 6-28에서 추가된 테스트들을 확인할 수 있는데, 이 테스트들은 짧고 간단하므로 (이는 단위 테스트의 일반적인 특징이기도 하다)자세한 설명은 생략하도록 하겠다. 


목록6-28 나머지 단위 테스트들이 추가된 UnitTest1.cs 파일
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using EssentialTools.Models;
namespace EssentialTools.Tests
{
    [TestClass]
    public class UnitTest1
    {
        private IDiscountHelper getTestObject()
        {
            return new MinumumDiscountHelper();
        }
        [TestMethod]
        public void Discount_Above_100()
        {
            //Arrange (시나리오를 설정한다)
            IDiscountHelper target = getTestObject();
            decimal total = 200;

            //Act (작업을 시도한다)
            var discountedTotal = target.ApplyDiscount(total);

            // Assert(결과를 검증한다)
            Assert.AreEqual(total * 0.9M, discountedTotal);
        }
	//여기아래부터 추가된 메서드
        [TestMethod]
        public void Discount_Between_10_And_100()
        {
            //Arrange (시나리오를 설정한다)
            IDiscountHelper target = getTestObject();

            //Act (작업을 시도한다)
            decimal TenDollarDiscount = target.ApplyDiscount(10);
            decimal HundredDollarDiscount = target.ApplyDiscount(100);
            decimal FiftyDollarDiscount = target.ApplyDiscount(50);

            //Assert( 결과를 검증한다)
            Assert.AreEqual(5, TenDollarDiscount, "$10 discount is wrong");
            Assert.AreEqual(95, HundredDollarDiscount, "$100 discount is wrong");
            Assert.AreEqual(45, FiftyDollarDiscount, "$50 discount is wrong");
        }

        [TestMethod]
        public void Discount_Less_Than_10()
        {
            //Arrange (시나리오를 설정한다)
            IDiscountHelper target = getTestObject();

            //Act(작업을 시도한다)
            decimal discount5 = target.ApplyDiscount(5);
            decimal discount0 = target.ApplyDiscount(0);

            //Assert (결과를 검증한다)
            Assert.AreEqual(5, discount5);
            Assert.AreEqual(0, discount0);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void Discount_Negative_Total()
        {
            //Arrange (시나리오를 설정한다)
            IDiscountHelper target = getTestObject();

            //Act(작업을 시도한다)
            target.ApplyDiscount(-1);
        }

        
    }
}


※ 단위 테스트 실행하기(그리고 실패하기)
Visual Studio는 테스트들을 관리하고 실행할 수 있는 [테스트 탐색기(Test Explorer)] 창을 제공해준다. Visual Studio의 [테스트(Test)] 메뉴에서 [창(Windows)] > [테스트 탐색기(Test Explorer)]를 선택해서 창을 열고 좌측 상단의 [모두 실행(Run All)] 버튼을 클릭한다 그러면 그림6-6과 비슷한 결과를 얻게될 것이다. 

이[테스트 탐색기(Test Explorer)]창의 좌측 패인에서는 정의된 테스트들의 목록을 확인할수 있다. 물론 테스트 대상 메서드를 아직 구현하지 않았으므로 모든 테스트들이 실패했을 것이다 테스트 목록에서 아무 테스트나 클릭해보면 해당 테스트가 실패한 이유에 대한 자세한 정보를 확인할 수 있다. [테스트 탐색기(Test Explorer)]창은 테스트들을 선택하고 필터링하거나 실행할 테스트들을 선택할 수 있는 다양한 방법들을 제공해준다. 그러나 비교적 간단한 이번예제 프로젝트에서는 [모두 실행(Run All)]버튼을 클릭해서 모든 테스트들을 실행해봤다. 



※ 기능 구현하기
이제 코드 작성을 완료했을 때 해당 코드가 기대하는 대로 동작하는지를 즉각 점검할 수 있다고 확신할 수 있는 단계에 이르렀으므로 기능 구현을 시작해보자. 지금까지 준비한 모든 내용들에 대한 MinimumDiscountHelper 클래스의 구현은 목록6-29에서 볼 수 있는 것처럼 간단하다. 

목록6-29 MinimumDiscountHelper.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace EssentialTools.Models
{
    public class MinumumDiscountHelper : IDiscountHelper
    {
        public decimal ApplyDiscount(decimal totalParam)
        {
            if (totalParam < 0)
                throw new ArgumentOutOfRangeException();
            else if (totalParam > 100)
                return totalParam * 0.9M
            else if (totalParam > 10 && totalParam <= 100)
                return totalParam - 5;
            else
                return totalParam;
        }
    }
}



※ 테스트 수행 및 코드 수정하기
목록 6-29의 코드에는 Visual Studio를 이용한 반복적인 단위 테스트 동작 방법을 살펴보기 위해 의도적으로 남겨진 오류가 존재한다 [테스트 탐색기(Test Explorer)]창에서 [모두 실행(Run All)] 버튼을 클릭해보면 그 결과를 직접 확인할 수 있을 것이다. 그림6-7은 이 두 번째 테스트의 결과를 보여주고 있다. 


참고로 Visual Studio 는 항상 가장 유용한 정보들을 [테스트 탐색기(Test Explorer)]창의 상단에 보여주려고 시도한다. 즉 지금과 같은 경우에는 실패한 테스트들이 통과한 테스트들보다 먼저 출력된다. 

이 결과를 통해서 세 가지 단위 테스트는 통과됐지만 Discount_Between_10_And_100 테스트 메서드가 문제를 감지했다는 것을 확인할 수 있다. 그리고 실패한 테스트를 클릭해보면 테스트는 결과 값으로 5를 기대하고 있지만 실제로 반환된 값은 10이라는 보다 상세한 정보를 얻을 수 있다. 

이제 다시 구현 코드로 돌아가보면 원하는 동작이 적절하게 구현되지 않았다는 사실을 발견할 수 있다. 즉 합계가 10인 경우에 대한 할인율을 적절히 처리하지 않은 것이다. 이 문제점은 MinumumDiscountHelper 클래스의 다음 구문에서 비롯된다. 

...
}else if(totalParam > 10 && totalParam <= 100)
{
...
}

명세상으로는 $10와 $100를 포함한 그 사이의 값들에 대해 구현해야 할 동작을 정의하고 있지만 실제 구현은 합계가 정확하게 $10인 경우를 제외한 $10 보다 큰 값들에 대해서만 처리하고 있다. 이 문제를 해결하기 위한 방법은 목록6-30에서 볼 수 있는 것처럼 간단하다.  if구문의 동작을 변경하기 위한 문자 하나만 추가해주면 된다. 

목록6-30 MinimumDiscountHelper.cs 파일의 기능 코드 수정하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace EssentialTools.Models
{
    public class MinumumDiscountHelper : IDiscountHelper
    {
        public decimal ApplyDiscount(decimal totalParam)
        {
            if (totalParam < 0)
                throw new ArgumentOutOfRangeException();
            else if (totalParam > 100)
                return totalParam * 0.9M;
            else if (totalParam >= 10 && totalParam <= 100) //수정
                return totalParam - 5;
            else
                return totalParam;
        }
    }
}

이제 다시 [테스트 탐색기(Test Explorer)] 창에서 [모두 실행(Run All)]버튼을 클릭해보면 문제점이 수정되었으며 구현된 코드가 모든 테스트들을 통과했음을 알 수 있다(그림 6-8참조)

물론 이번 예제는 단위 테스트에 대한 간단한 소개 수준에 불과하다 이후의 장들에서는 더 다양한 단위 테스트 예제들을 살펴보게 될 것이다. Visual Studio 의 단위 테스트 지원 기능은 매우 훌륭한 편으로 MSDN의 http://msdn.microsoft.com/en-us/library/dd264975.aspx에서 단위 테스트 관련 문서들을 살펴볼 것을 권한다.