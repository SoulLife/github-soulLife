※ Edit 뷰 생성하기
이제 액션 메서드를작성했으므로 이를 렌더하기 위한 뷰를 생성할 수 있다 [솔루션 탐색기(Solution Explorer)]에서 Views/Admin 폴더를 마우스 오른쪽 버튼으로 클릭한 다음 메뉴에서 [추가(Add)] > [MVC 5 뷰 페이지(Razor)(MVC 5 View Page(Razor))]를 선택한다 뷰 이름을 Edit.cshtml 이라고 입력하고 [확인(OK)] 버튼을 클릭해서 파일을 생성한 후 목록11-6과 같이 편집한다. 

목록11-6 Edit.cshtml 파일의 내용
@model SportsStore.Domain.Entities.Product

@{
    ViewBag.Title = "Admin: Edit " + @Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1>Edit @Model.Name</h1>

@using (Html.BeginForm())
{
    @Html.EditorForModel()
    <input type="submit" value="Save" />
    @Html.ActionLink("Cancel and return to List", "Index")
}

목록 11-6의 뷰에서는 각각의 필드들에 대한 label 요소나 input 요소의 마크업을 일일이 손으로 작성하는 대신 Html.EditorForModel 이라는 헬퍼 메서드를 호출하고있다. 이 메서드는 MVC 프레임워크에 자동으로 편집 인터페이스를 생성하도록 요청하는데, 그러면 MVC 프레임워크는 모델 형식(이번 예제에서는 Product 클래스)을 분석해서 사용자 인터페이스를 만들어낸다. Edit 뷰가 생성한 페이지를 확인하기 위해 응용프로그램을 실행한 후 /Admin/Index로 이동한다. 상품명에 걸린 링크중 하나를 클릭해보면 그림11-5와 같은 페이지를 확인할 수 있을 것이다. 

그러나 솔직히 말해서 EditorForModel 메서드는 편리하기는 하지만 그다지 매력적인 결과물을 만들어내지는 못한다. 게다가 관리자가 ProductID 속성을 보거나 수정할 수 있기를 바라지도 않고 Description 속성을 위한 텍스트 박스 또한 너무 작다. 

이런 문제점들을 해결하려면 모델 메타데이터(model matadata)를 이용해서 각 속성들에 대한 편집기를 생성하도록 MVC 프레임워크에 지시해야 한다. 이렇게 하면 모델 클래스의 속성들에 어트리뷰트를 적용함으로써 Html.EditorForModel 메서드가 생성하는 결과물에 영향을 줄 수 있다. 목록11-7은 SportsStore.Domain 프로젝트의 Product 클래스에 메타데이터를 적용하는 방법을 보여주고 있다. 

목록11-7 Product.cs 파일에 모델 메타데이터 적용하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using System.Web.Mvc;
namespace SportsStore.Domain.Entities
{
    public class Product
    {
        [HiddenInput(DisplayValue =false)]
        public int ProductID { get; set; }
        public string Name { get; set; }
        [DataType(DataType.MultilineText)]
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string Category { get; set; }

    }
}


목록 11-7에 사용된 HiddenInput 어트리뷰트는 MVC 프레임워크에 해당 속성을 숨겨진 폼요소로 렌더하라고 알려주고 DataType 어트리뷰트는 적용된 속성의 값이 표현되고 편집되는 방식을 지정해준다 여기에서는 Description 속성에 대해 MultilineText 옵션을 선택하고 있다. 이 HiddenInput 어트리뷰트는 System.Web.Mvc 네임스페이스의 일부이고, DataType 어트리뷰트는 System.ComponentModel.DataAnnotation 네임스페이스의 일부인데, 바로 이런 이유 때문에 7장에서 SportsStore.Domain 프로젝트를 구성하면서 이 네임스페이스에 대한 어셈블리들을 추가하라고 했던 것이다. 

그림11-6은 메타 데이터가적용된 Edit 페이지를 보여주고 있다. 더 이상 ProductId 속성을 보거나 편집할 수도 없고, Description 속성의 값을 입력하기 위해 여러 행을 입력할 수 있는 텍스트 박스도 제공된다. 그러나 여전히 전체적인 모습은 볼품 없다. 

문제는 Html.EditorForModel 헬퍼 메서드가 Product 클래스에 대해서 전혀 아는 바가 없기 때문에 기본적이고 무난한 HTML을 생성한다는 점에 있다. 이 문제점을 해결할 수 있는 세 가지 방법이 존재하는데 첫 번째 방법은 헬퍼 메서드가 생성해주는 콘텐트에 대한 CSS 스타일을 정의하는 것이다. 이 방법은 MVC 프레임워크가 HTML 요소들에 자동으로 추가해주는 클래스들에 대한 스타일들만 정의해주면 됨으로 쉽게 처리가 가능하다. 

그림11-6에 나타난 페이지의 소스 코드를 살펴보면 상품 설명을 입력하기 위해 생성된 textarea 요소를 찾을수 있는데, 이 요소에는 다음과 같이 text-box-multi-line 이라는 CSS 클래스가 지정되어 있다. 

<textarea class="text-box-multi-line" id="Description" name="Description">

다른 HTML 요소들에도 이와 비슷한 성격의 클래스들이 지정되어 있으므로, 이 클래스들에 대한 CSS 스타일을 생성하기만 하면 된다. 그러나 이 접근 방식은 사용자 지정 스타일들을 사용할 때는 잘 동작하지만 Bootstrap에 의해 미리 정의된 클래스들처럼 사용자가 미리 정의한 클래스들을 활용하기에는 다소 어려운 방법이다. 

두번째 접근 방식은 헬퍼 메서드에게 템플릿을 제공해서 헬퍼 메서드 자체가 필요한 스타일을 포함하여 요소들을 생성하게 하는 것이다. 이 방법에 대해서는 22장에서 자세하게 살펴볼 것이다. 

세 번째 접근 방식은 모델 수준(model-lvel)의 헬퍼 메서드를 사용하는 대신, 필요한 요소들을 직접 생성하는 것이다. 비록 모델 헬퍼 메서드의 개념 자체는 나쁘지 않다고 생각하지만 개인적으로는 거의 사용하지 않는다. 오히려 목록11-8에서 볼 수 있는 것처럼 HTML을 직접 생성하고, 개별 속성들에 대해서 헬퍼 메서드들을 사용하는 것을 선호하는편이다. 

목록11-8 Edit.cshtml 파일 수정하기
@model SportsStore.Domain.Entities.Product

@{
    ViewBag.Title = "Admin: Edit " + @Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1>Edit @Model.Name</h1>
<div class="panel">
    <div class="panel-heading">
        <h3>Edit @Model.Name</h3>
    </div>

    @using (Html.BeginForm())
    {
        <div class="panel-body">
            @Html.HiddenFor(m => m.ProductID)
            @foreach(var property in ViewData.ModelMetadata.Properties)
            {
                if(property.PropertyName != "ProductID")
                {
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>
                        @if(property.PropertyName == "Description")
                        {
                            @Html.TextArea(property.PropertyName, null, new {@class="form-control", rows=5})
                        }else
                        {
                            @Html.TextBox(property.PropertyName, null, new {@class="form-control"})
                        }
                    </div>
                }
            }
        </div>

        <div class="panel-footer">
            <input type="submit" value="Save" class="btn btn-primary" />
            @Html.ActionLink("Cancel and return to List", "Index", null, new {@class="btn btn-default"})
        </div>
    }
</div>


목록 11-8은 9장에서 사용했던 메타데이터 기법을 약간 변형한 것이다. 나중에 22장에서 살펴보게 될 사용자 지정 기법들과 HTML 헬퍼 메서드를 함께 사용해서 이와 비슷한 결과물을 얻을 수도 있지만 필자는 이렇게 직접 HTML 을 생성하는 접근법을 주로 사용하는 편이다. 이 방식이 필자의 개발 스타일과 만족스럽게 잘 어울리기 때문인데, 이렇게 메타데이터를 직접 처리하는 방식이 여러분의 경우에 적합하지 않다고 판단된다면 MVC 프레임워크를 이용한 작업이 언제나 그러하듯이 또 다른 접근 방식을 쉽게 찾을 수 있을 것이다. 이제 방금 수정한 뷰가 브라우저에서 어떻게 보여지는지 그림11-7에서 확인해보자. 




※ 상품 리파지토리 수정하기
계속해서 상품 수정에 관한 작업을 진행하기 전에 변경된 내용을 저장될 수 있도록 상품 리파지토리를 개선해야 한다. 먼저 목록 11-9와 같이 IProductRepository 인터페이스에 새로운 메서드를 추가하도록 하자 (SportsStore.Domain 프로젝트의 Abstract 폴더에서 이인터페이스를 찾을 수 있을 것이다)

목록11-9 IProductRepository.cs 파일에 메서드 추가하기
using System.Collections.Generic;
using SportsStore.Domain.Entities;
namespace SportsStore.Domain.Abstract
{
    public interface IProductRepository
    {
        IEnumerable<Product> Products { get; }

        void SaveProduct(Product product);
    }
}


이제 이 리파지토리에 대한 Entity Framework 구현 클래스에 새로운 메서드를 추가할 수 있다. 목록11-10과 같이 Concrete/EFProductRepository.cs 파일에 새로운 메서드를 정의한다. 

목록11-10 EFProductRepository.cs 파일에서 SaveProduct 메서드 구현하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;

namespace SportsStore.Domain.Concrete
{
    public class EFProductRepository : IProductRepository
    {
        private EFDbContext context = new EFDbContext();

        public IEnumerable<Product> Products
        {
            get { return context.Products; }
        }

        public void SaveProduct(Product product)
        {
            if(product.ProductID == 0)
            {
                context.Products.Add(product);
            }
            else
            {
                Product dbEntry = context.Products.Find(product.ProductID);
                if(dbEntry != null)
                {
                    dbEntry.Name = product.Name;
                    dbEntry.Description = product.Description;
                    dbEntry.Price = product.Price;
                    dbEntry.Category = product.Category;
                }
            }
            context.SaveChanges();
        }
    }
}


목록11-10의 SaveProduct 메서드 구현은 ProductID 속성 값이 0이면 상품을 리파지토리에 추가하고 그렇지 않으면 변경된 내용을 데이터베이스에 저장되어 있는 기존 상품 항목에 적용하도록 구현하고 있다. 

이미 언급했던 것처럼 Entity Framework는 그 자체로 하나의 주제이고 MVC 프레임워크의 일부가 아니기 때문에 이 책에서는 그 내용을 깊이 있게 다루지 않는다. 그러나 SaveProduct 메서드에는 MVC 응용프로그램의 설계와 관련된 내용이 일부분 존재한다. 

이를테면 ProductID 속성 값이 0이 아닌 Product 매개변수를 전달 받으면 갱신 작업을 수행해야 하는데 이번 예제에서는 리파지토리에서 동일한 ProductID 속성 값을 갖고 있는 상품 개체를 가져온 다음, 각각의 속성들을 하나씩 수정함으로써 매개변수로 전달받은 상품 개체와 동일하게 만들고 있다. 

이런 작업이가능한 이유는 Entity Framework가 데이터베이스로부터 생성한 개체의 변화를 계속해서 추적하기 때문이다. 반면 SaveProduct 액션 메서드에 전달된 매개변수 개체는 MVC 프레임워크가 기본 모델 바인더를 이용해서 생성한 개체이기 때문에 Entity Framework 는 이 매개변수 개체에 대해서 아무것도 알지 못하고, 또 데이터베이스 갱신에 사용할 수도 없다. 이 문제점을 해결할 수 있는 다양한 방법들이 있겠지만 이번 예제에서는 가장 간단한 방법을 선택하고 있다. 즉 Entity Framework 가 인식할 수 있는 대상 객체를 찾은 다음, 그 개체를 명시적으로 수정하는 방법이다. 

다른 접근법을 생각해보자면 사용자 지정 모델 바인더를 구현해서 리파지토리로부터 직접 개체를 가져오게 하는 방법도 있을 것이다. 이 방법이 조금 더 우아한 접근 방식처럼 보이지만 이렇게 하려면 사용자 지정 모델 바인더에서 ProductID 속성 값을 이용해서 Product 개체를 찾을 수 있도록 먼저 리파지토리 인터페이스에 새로운 기능이 추가되어야 할 것이다. 




※ Edit POST 요청 처리하기
여기까지 작업을마치고 나면 관리자가 [Save] 버튼을 클릭했을 때 POST 요청을 처리하게 될 Admin 컨트롤러의 Edit 액션 메서드의 오버로드를 구현할 준비가 된 셈이다. 목록11-11은 이 새로운 메서드를 보여주고 있다. 

목록11-11 AdminController.cs 파일에 Edit 액션 메서드의 POST 요청 처리 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Controllers
{
    public class AdminController : Controller
    {
        private IProductRepository repository;

        public AdminController(IProductRepository repo)
        {
            repository = repo;
        }
        // GET: Admin
        public ViewResult Index()
        {
            return View(repository.Products);
        }

        public ViewResult Edit(int productId)
        {
            Product product = repository.Products.FirstOrDefault(p => p.ProductID == productId);
            return View(product);
        }
	//추가된 POST 메서드
        [HttpPost]
        public ActionResult Edit(Product product)
        {
            if(ModelState.IsValid)
            {
                repository.SaveProduct(product);
                TempData["message"] = string.Format("{0} has been saved", product.Name);
                return RedirectToAction("Index");
            }else
            {
                //데이터 값들중에 뭔가 문제가 존재하는 경우다
                return View(product);
            }
        }
    }
}

목록11-11의 새로운 메서드에서는 ModelState.IsValid 속성 값을 읽음으로써 모델 바인더가 사용자가 제출한 데이터에 대해 유효성 검사를 수행한 결과를 확인한다. 만약 아무런 문제도 없다면 리파지토리에 변경사항을 저장하고 Index 액션 메서드를 호출해서 사용자에게 상품 목록 페이지를 보여준다. 만약 데이터에 문제가 존재한다면 Edit 뷰를 다시 출력해서 사용자가 내용을 수정할 수 있도록 한다. 

그리고 리파지토리에 변경사항을 저장한 뒤에는 TempData 기능을 사용해서 뷰에 출력할 메시지를 저장하고 있는데, 이 기능은 이미 앞에서 사용해봤던 세션 데이터나 Viewbag 기능과 유사한 키/값의 사전을 제공해준다. 그러나 TempData는 세션 데이터와는 달리 HTTP 요청이 끝나는 시점에 데이터가 삭제된다. 

이 Edit 메서드가 ActionResult 형식을 반환하고 있다는 점에도 유의하도록 하자. 지금까지는 대부분 ViewResult 형식만 사용해왔었다. ViewResult는 ActionResult에서 파생된 형식으로 프레임워크로 하여금 뷰를 렌더하도록 지시하고자 할 때 사용된다. ActionResult에서 파생된 형식들에는 ViewResult뿐만 아니라 다른 형식들도 존재하는데, RedirectToAction 메서드가 반환하는 형식도 그 중 하나다. 이번 예제에서 RedirectToAction 메서드가 반환하는 형식은 브라우저의 요청이 Index 액션 메서드를 호출하도록 재지정한다. 다양한 액션 결과들(action results)에 대해서는 17장에서 다시 자세하게 살펴볼 것이다. 

지금과 같은 상황에서는 ViewBag 기능을 사용할 수가 없는데 사용자의 요청이 다른 URL로 재지정되기 때문이다. ViewBag 기능은 컨트롤러와 뷰 간에 데이터를 전달하기 위해서 사용될뿐 현재의 HTTP 요청보다 더 오래 데이터를 유지할 수는 없다. 물론 세션 데이터 기능을 사용하는 방법도 있겠지만, 세션에 저장된 메시지는 명시적으로 삭제할 때까지 계속보관 되므로 이 경우에는 사용하기에 적합하지 않다. 바로 이런 상황에서는 TempData 기능이 안성맞춤이다. TempData에 저장된 데이터는 단일 사용자 세션으로 제약되고(다른 사용자의 TempData를 볼 수 없도록) 데이터를 읽어서 사용하게 되는 시점까지 충분히 오랫동안 보관된다. 이 메시지 데이터는 액션 메서드(Index)가 렌더하는 뷰에서 읽혀지게 되는데, 바로 다음 절에서 이 부분을 살펴볼 것이다. 


※ 단위 테스트 : 편집 데이터 제출하기
Edit 액션 메서드가 POST 요청 처리를 정상적으로 수행하는지 확인해보려면 모델 바인더가 생성한 Product 개체에 대한 유효한 변경사항들이 상품 리파지토리에 전달되어 저장되는지 확인해봐야 한다. 또한 반대로(모델에 오류가 존재하는)유효하지 않은 변경사항에 대한 요청은 리파지토리에 전달되지 않는다는 것도 확인해야 한다. 다음은 이에 대한 테스트 메서드들을 보여준다. 

...
[TestMethod]
        public void Can_Save_Valid_Changes()
        {
            //Arrange - Mock 리파지토리를 생성한다
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            //Arrange - 컨트롤러를 생성한다
            AdminController target = new AdminController(mock.Object);
            //Arrange - 상품을 생성한다
            Product product = new Product { Name = "Test" };

            //Act - 상품 저장을 시도한다. 
            ActionResult result = target.Edit(product);

            //Assert - 리파지토리가 호출되었는지 확인한다
            mock.Verify(m => m.SaveProduct(product));
            //Assert - 메서드의 반환 형식을 확인한다
            Assert.IsNotInstanceOfType(result, typeof(ViewResult));
        }

        [TestMethod]
        public void Cannot_Save_Invalid_Changes()
        {
            //Arrange - Mock 리파지토리를 생성한다
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            //Arrange - 컨트롤러를 생성한다
            AdminController target = new AdminController(mock.Object);
            //Arrange - 상품을 생성한다
            Product product = new Product { Name = "Test" };
            //Arrange - 모델 상태에 오류를 추가한다. 
            target.ModelState.AddModelError("error", "error");

            //Act - 상품 저장을 시도한다.
            ActionResult result = target.Edit(product);

            //Assert - 리파지토리가 호출되지 않았는지 확인한다
            mock.Verify(m => m.SaveProduct(It.IsAny<Product>()), Times.Never());
            //Assert - 메서드의 반환 형식을 확인한다
            Assert.IsNotInstanceOfType(result, typeof(ViewResult));
        }
....



※확인 메시지 보여주기
이전 절에서 TempData를 이용해서 저장했던 메시지는 _AdminLayout.cshtml 레이아웃 파일에서 사용될 것이다. 이렇게 메시지를 템플릿에서 처리하면 이 템플릿을 사용하는 모든 뷰에서 추가적인 Razor 블록 없이도 메시지를 보여줄 수 있다. 목록11-12는 이 파일에 대한 변경 내용을 보여주고 있다. 

목록11-12 _AdminLayout.cshtml 파일에서 TempData 메시지 처리하기
@{ 
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <link href="~/Content/ErrorStyles.css" rel="stylesheet" />
    <title></title>
</head>
<body>
    <div>
        @if(TempData["message"] != null)
        {
            <div class="alert alert-success">@TempData["message"]</div>
        }
        @RenderBody()
    </div>
</body>
</html>



TIP:
이런 방식으로 템플릿에서 메시지를 처리하는 것의 장점은 사용자가 변경사항을 저장한 직후에 보게 되는 모든 페이지에서 이 메시지를 확인할 수 있다는 것이다. 즉 현재는 사용자가 상품 목록 페이지로 이동되고 있지만 만약 다른 뷰를 보도록 작업의 흐름을 바꾸더라도 사용자는 여전히 메시지를 보게된다(다음에 보게되는 뷰가 동일한 레이아웃을 사용하기만 하면 된다)


이제 상품 정보 수정을 위해 필요한 모든 구현을 마쳤다. 실제로 어떻게 동작하는지 확인해보려면 응용프로그램을 실행하고 Admin/Index URL로 이동한 다음 특정 상품을 수정해보자. 그런 다음[Save] 버튼을 클릭하면 상품 목록 뷰로 이동되면서 그림11-8과 같이 TempDate의 메시지가 출력될 것이다. 

이 메시지는 상품 목록 화면을 새로 고침하면 사라진다. TempData는 한 번 읽히고 나면 삭제되기 때문이다. 오래된 메시지가 계속 화면에 걸려 있는 것을 원하지 않는다면 이 기능은 상당히 편리한 기능이다. 