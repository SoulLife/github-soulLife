CHAPTER 4장 : 필수 언어 기능

C#은 기능이 매우 풍부한 언어이기 때문에 모든 프로그래머가 이 책에서 사용하고 있는 기능들을 잘 알고 있지는 못할 것이다. 이번 장에서는 MVC 프로그래머라면 알고 있어야할 그리고 이 책의 예제들에서 빈번하게 사용되는 C#언어의 기능들에 관해서 살펴본다. 

그러나 이 책에서는 각 기능들에 대한 간략한 정보들만 다루려고 한다. 따라서 C#이나 LINQ 에 관해 더 자세한 내용들이 알고싶다면 필자가 집필한 세 권의 책을 추천한다. 먼저 C#에 관한 완벽한 안내서인 [Introducing Visual C#]과 LINQ에 관해 심도 있는 내용들을 다루고 있는 [Pro LINQ in C#] 그리고 .NET의 비동기 프로그래밍 관련 기능을 자세하게 검토하고 있는 [Pro .NET Parallel Programming in C#]이 바로 그것이다. 이 책들은 모두 Apress에서 출판됐다. 표4-1은 이번 장의 개요를 요약해서 보여주고 있다. 

표4-1 4장 요약
주제							내용								목록
C#의 속성들을 단순화시키기			자동으로 구현된 속성을 사용한다.			1-7
개체 생성과 속성 설정을 한 번에 수행하기	개체 및 컬렉션 이니셜라이저를 사용한다. 		8-10
수정이 불가능한 클래스에 기능 추가하기	확장 메서드를 사용한다. 					11-18
델리게이트 사용 방식 단순화시키기		람다식을 사용한다. 					19-23
암시적 형식 사용하기				var 키워드를 사용한다.					24
형식정의 과정 없이 개체 생성하기		익명 형식을 사용한다. 					25-26
데이터베이스를 질의하는 것처럼 개체들의
컬렉션 질의하기					LINQ를 사용한다. 						27-31
비동기 메서드 사용 방식 단순화시키기		async 키워드와 await 키워드를 사용한다. 		32-33





※ 예제 프로젝트 준비하기
이번 장에서 살펴볼 언어 기능들을 직접 확인해보기 위해서 .[ASP .NET MVC 웹 응용프로그램(ASP .NET MVC Web Application)]템플릿을 선택해서 LanguageFeatures라는 이름으로 새로운 Visual Studio프로젝트를 생성한다. 이때 2장에서 살펴봤던 것처럼 Empty 템플릿을 선택해서 프로젝트의 초기 내용을 선택한 다음 MVC 옵션을 체크해서 MVC 관련 폴더들과 참조들을 추가한다. 물론 이번장에서 살펴볼 언어 기능들을 MVC에서만 사용할수 있는 것은 아니지만, Visual Studio Express 2013 for Web에서는 콘솔 출력이 가능한 프로젝트의 생성을 지원하지 않기 때문에 예제를 직접 따라 해보려면 MVC 응용프로그램을 생성해야 한다. 언어 기능들을 살펴보려면 간단한 컨트롤러가 필요하므로, [솔루션 탐색기(Solution Explorer)]에서 Controllers 폴더를 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [추가(Add)] > [컨트롤러(Controller)]를 선택한다 그리고 [스캐폴드 추가(Add Scaffold)] 대화상자에서 [MVC 5 컨트롤러 - 비어있음(MVC 5 Controller-Empty)] 옵션을 선택하고 [추가(Add)] 버튼을 클릭한다. 마지막으로 [컨트롤러 추가(Add Controller)]대화상자에서 컨트롤러의 이름을 HomeController로 지정하고 [추가(Add)] 버튼을 클릭해서 Controller 폴더에 HomeController.cs라는 이름의 컨트롤러 클래스 파일을 생성한다. 목록4-1에서 파일의 편집된 내용을 확인할수 있다. 

목록4-1 HomeController.cs 파일의 초기 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using LanguageFeatures.Models;
namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public string Index()
        {
            return "Navigate to a URL to show an example";
        }
    }
}


각각의 예제마다 적절한 액션 메서드를 따로 생성할 것이므로 Index 액션 메서드에서는 기본 적인 메시지만 반환해서 프로젝트를 간단하게 유지하도록 하자. 



주의 :
현재 상태로는 HomeController 클래스가 컴파일되지 않을 텐데, 그 이유는 LanguageFeatures.Models 네임스페이스를 임포트하고 있기 때문이다. 이 네임스페이스는 바로 다음절의 첫 번째 예제에서 Models 폴더에 클래스를 추가하기 전까지는 생성되지 않을 것이다. 


이번에는 마우스 오른쪽 버튼으로 Index 액션 메서드를 클릭한 다음 [뷰 추가(Add View)]를 선택해서 이번 장의 모든 예제들의 액션 메서드 결과를 출력하기 위한 Result라는 이름의 새로운 뷰를 생성한다(목록 4-2의 마크업으로 파일의 초기 내용을 대체할 것이므로 뷰를 생성할 때 [뷰 추가(Add View)]대화상자에서 어떤 옵션을 선택하는지는 중요하지 않다. )목록 4-2에서 변경된 뷰의 내용을 살펴볼 수 있다. 

@model string
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Result</title>
</head>
<body>
    <div> 
    </div>
</body>
</html>


이 뷰는 모델 형식이 string 인 강력한 형식의 뷰로, 이번 장에서 살펴볼 대부분의 예제들은 그리 복잡하지가 않기 때문에 간단한 문자열만으로도 결과를 나타내는데 아무런 문제가 없다. 



※ System.Net.Http 어셈블리 추가하기
이번 장의 후반부에서는 System.Net.Http 어셈블리를 사용하는 예제를 살펴볼 예정이다. 그러나 이 어셈블리는 MVC 프로젝트에 기본으로 추가되지 않는다. 따라서 Visual Studio의 [프로젝트(Project)] 메뉴에서 [참조 추가(Add Reference)]를 선택해서 [참조 관리자(Reference Manager)]창을 열고 그림4-1에서 볼 수 있는 것처럼 좌측에서 [어셈블리(Assemblies)] 영역이 선택됐는지 확인한 다음 System.Net.Http 항목을 찾아서 체크한다. 



※ 자동으로 구현된 속성 사용하기
일반적인 C#의 속성 기능을 사용하면 데이터 그 자체와 데이터가 설정되거나 반환되는 방법을 분리시킨 상태로 클래스의 일부 데이터를 노출할 수 있다. 목록 4-3은 LanguageFeatures 프로젝트의 Models폴더에 추가한 Product.cs라는 클래스 파일에 작성한 Product 클래스와 간단한 속성의 사례를 보여준다. 

목록4-3 Product.cs 파일에 속성 정의하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace LanguageFeatures.Models
{
    public class Product
    {
        private string name;
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
    }
}

목록4-3에는 이름이 Name이 속성이 굵은 글씨로 강조되어 있다. get 코드 블록의 구문은 (보통 getter라고 부른다)속성의 값이 읽혀질 때 수행되고 set 코드 블록의 구문은 (보통 setter라고 부른다)속성에 값이 할당될 때 수행된다(이때 사용되는 특수한 변수인 value는 할당되는 값을 의미한다)목록 4-4는 Home 컨트롤러에 추가된 AutoProperty 액션 메서드를 보여주고 있는데, 이 액션 메서드에서 볼 수 있는 것처럼 속성은 다른 클래스에 의해서 마치 필드처럼 사용된다. 

목록4-4 속성을 사용하고 있는 HomeController.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using LanguageFeatures.Models;
namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public string Index()
        {
            return "Navigate to a URL to show an example";
        }

        public ViewResult AutoProperty()
        {
            //새로운 Product 개체를 생성한다. 
            Product myProduct = new Product();

            //속성값을 설정한다
            myProduct.Name = "Kayak";

            //속성 값을 가져온다. 
            string productName = myProduct.Name;

            //뷰를 생성한다
            return View("Result", (object)String.Format("Product name: {0}", productName));
        }
    }
}

마치 일반적인 필드처럼 속성 값을 읽거나 쓰고 있는 것을 확인할 수 있다. 필드를 사용하는 것보다는 이처럼 속성을 사용하는 게 더 좋은데, 해당 속성을 사용하는 클래스들을 일일이 변경하지 않고도 get 블록이나 set 블록의 구문을 변경할 수 있기 때문이다. 


TIP:
목록4-4를 잘 살펴보면 View 메서드에 두 번째 인자를 전달하면서 object 형으로 형 변환을 수행하고 있다는 것을 알 수 있다. 그 이유는 View메서드에 두 개의 String 인자를 매개변수로 받는 오버로드가 별도로 존재하기 때문이다. 이 오버로드는 String과 object를 인자로 받는 오버로드와는 다른 동작을 수행하기 때문에 잘못된 오버로드를 호출하는 것을 피하기 위해서 두 번째 인자를 명시적으로 형 변환하고 있는 것이다. View 메서드와 그 오버로드들에 관해서는 20장에서 다시 살펴본다. 


프로젝트를 실행한 다음 /Home/AutoProperty로 이동해보면 이 번 예제의 결과를 확인할 수 있다(그러면 AutoProperty 액션 메서드가 실행되는데, 이번 장에서는 계속 이런 방식으로 예제를 테스트할 것이다. ) 이 액션 메서드는 뷰에 문자열을 전달하므로 그 결과도 스크린샷 대신 텍스트로 살펴보도록 하자. 다음은 목록4-4의 액션 메서드가 수행된 결과다. 


Product name: Kayak

이처럼 일반적인 속성 기능도 쓸만하기는 하지만 단순히 필드에 대한 접근을 전달만 해주는 속성들이 너무 많이 존재하는 클래스의 경우에는 목록4-5에서 볼 수 있는 것처럼 클래스 파일을 작성하는 작업 자체가 쓸데 없이 장황한 매우 따분한 일이 될 가능성이 높다. 이 클래스는 Product.cs 파일의 Product 클래스에 몇 가지 속성들을 추가한 것이다. 


목록4-5. 속성들이 장황하게 정의되어 있는 Product.cs 파일

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace LanguageFeatures.Models
{
    public class Product
    {
        private int productID;
        private string name;
        private string description;
        private decimal price;
        private string category;

        
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public int ProductID
        {
            get { return productID; }
            set { productID = value; }
        }
        public string Description
        {
            get { return description; }
            set { description = value; }
        }
        public decimal Price
        {
            get { return price; }
            set { price = value; }
        }
        public string Category
        {
            get { return category; }
            set { category = value; }
        }

    }
}

단적으로 말해서 속성의 유연함은 필요로 하지만 이런 반복적인 getter와 setter는 결코 원하지 않는다. 이 문제에 대한 해법은 자동으로 구현된 속성(Automatically implemented property)이 나 자동 속성(Automatic property)으로 알려진 기능을 사용하는 것이다. 자동 속성 기능을 사용하면 목록 4-6에서 볼 수 있는 것처럼 필드를 정의하거나 getter 및 setter코드를 작성하지 않더라도 암시적으로 필드가 지원되는 속성들을 생성할 수 있다. 

목록4-6 자동으로 구현된 속성 기능을 사용하고 있는 Product.cs 파일

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace LanguageFeatures.Models
{
    public class Product
    {

        
        public string Name
        {
            get; set;
        }
        public int ProductID
        {
		get; set;
        }
        public string Description
        {
		get; set;
        }
        public decimal Price
        {
		get; set;
        }
        public string Category
        {
		get; set;
        }

    }
}
목록 4-6에서는 속성을 구현하기 위해서 getter나 setter의 본문이나 필드를 선언하지 않고 있다는 점에 주목하기 바란다. 이 두 가지 작업은 클래스가 빌드될 때 C# 컴파일러가 대신 자동으로 처리해준다. 자동 속성을 사용하더라도 일반적인 속성을 사용하는 것과 전혀 다를 바가 없기 때문에 목록 4-4의 액션 메서드 코드는 아무런 수정 없이도 정상적으로 동작할 것이다. 

자동 속성을 사용하면 지루한 타이핑 작업에서 벗어날 수 있고, 읽기 쉬운 코드를 작성할 수 있으면서도 속성이 제공해주는 유연함은 그대로 유지할 수 있다. 그리고 자동으로 구현된 속성을 변경해서 직접 구현하는 방식으로 바꿔야만 하는 경우가 발생하더라도 그저 다시 일반적인 속성 형태로 변경하기만 하면 된다. 가령 목록4-7은 Name 속성의 구현 방식을 변경해야 할 필요가 생겨서 코드를 변경한 사례를 보여주고 있다. 

목록4-7 자동으로 구현된 Name 속성을 일반적인 속성으로 되돌린 Product.cs 파일
namespace LanguageFeatures.Models
{
	public class Product
	{
		private string name;

		public int ProductID { get; set; }
		public string Name
		{
			get { return ProductID + name;
			set { name =value; }
		}
		public string Description { get; set;	}
		public decimal Price{ get; set; }
		public string Category { set; get; }
	}
}



Note : 
자동으로 구현된 속성을 일반적인 속성 형태로 되돌리는 경우 getter와 setter를 모두 구현해야 한다. C#은 자동으로 구현된 속성 형태의 getter및 setter와 일반적인 속성 형태의 getter 및 setter를 함께 섞어서 사용하는 기능은 지원해주지 않는다. 



※ 개체 및 컬렉션 이니셜라이저 사용하기
프로그래밍 작업을 지루하게 만드는 또 다른 작업들 중 하나는 목록 4-8에서 볼 수 있는 것처럼 새로운 개체를 생성한 다음 속성들의 값을 할당하는 작업이다. 이 목록은 Home 컨트롤러에 추가된 CreateProduct 액션 메서드를 보여주고 있다. 

목록4-8. 개체를 생성하고 그 속성들을 초기화하고 있는 HomeController.cs 파일

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using LanguageFeatures.Models;
namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public string Index()
        {
            return "Navigate to a URL to show an example";
        }

        public ViewResult AutoProperty()
        {
            //새로운 Product 개체를 생성한다. 
            Product myProduct = new Product();

            //속성값을 설정한다
            myProduct.Name = "Kayak";

            //속성 값을 가져온다. 
            string productName = myProduct.Name;

            //뷰를 생성한다
            return View("Result", (object)String.Format("Product name: {0}", productName));
            
        }
        public ViewResult CreateProduct()
        {
            //새로운 Product 개체를 생성한다
            Product myProduct = new Product();

            //속성 값들을 설정한다. 
            myProduct.ProductID = 100;
            myProduct.Name = "Kayak";
            myProduct.Description = "A boat for one person";
            myProduct.Price = 275M;
            myProduct.Category = "Watersports";

            return View("Result", (object)String.Format("Category: {0}", myProduct.Category));
        }
    }
}

이 코드에서는 Product 개체를 생성해서 결과를 얻기까지 세 단계를 거치고 있다. 먼저 개체를 생성하고 그 속성 값들을 설정한 다음 View 메서드를 호출해서 뷰를 통해서 결과를 출력한다. 그러나 개체 이니셜라이저 기능을 이용하면 목록4-9에서 볼 수 있는 것처럼 Product의 인스턴스를 생성하고 속성 값들을 설정하는 과정을 단 한번에 처리할수 있다. 

목록4-9. 개체 이니셜라이저 기능을 사용하도록 변경된 HomeController.cs 파일

public ViewResult CreateProduct()
        {
            //새로운 Product 개체를 생성한다
            Product myProduct = new Product()
            {
                ProductID = 100,Name="Kayak", Description="A boat for one person", Price=275M, Category="Watersports"
            };

            return View("Result", (object)String.Format("Category: {0}", myProduct.Category));
        }

이 코드에서 Product이름 호출뒤에 나타나는 중괄호 ({ } ) 가 바로 이니셜라이저인데, 이 기능을 사용하면 개체 생성 과정의 일부로 매개변수 값들을 전달할 수 있다. 이와 동일한 기능을 컬렉션이나 배열의 생성 과정에 적용해서 그 내용들을 초기화시킬 수도 있으며 목록 4-10 에 바로 그 사례가 나타나 있다. 

목록4-10 컬렉션과 배열을 초기화하고 있는 HomeController.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using LanguageFeatures.Models;
namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public string Index()
        {
            return "Navigate to a URL to show an example";
        }

        public ViewResult AutoProperty()
        {
            //새로운 Product 개체를 생성한다. 
            Product myProduct = new Product();

            //속성값을 설정한다
            myProduct.Name = "Kayak";

            //속성 값을 가져온다. 
            string productName = myProduct.Name;

            //뷰를 생성한다
            return View("Result", (object)String.Format("Product name: {0}", productName));
            
        }
        public ViewResult CreateProduct()
        {
            //새로운 Product 개체를 생성한다
            Product myProduct = new Product()
            {
                ProductID = 100,Name="Kayak", Description="A boat for one person", Price=275M, Category="Watersports"
            };

            return View("Result", (object)String.Format("Category: {0}", myProduct.Category));
        }
        public ViewResult CreateCollection()
        {
            string[] stringArray = { "apple", "orange", "plum" };

            List<int> intList = new List<int> { 10, 20, 30, 40 };

            Dictionary<string, int> myDict = new Dictionary<string, int> { { "apple", 10 }, { "orange", 20 }, { "plum", 30 } };

            return View("Result", (object)stringArray[1]);
        }
    }
}

이 코드는 배열과 두 가지 제네릭 컬렉션 라이브러리 클래스들을 생성과 동시에 초기화시키는 방법을 보여주고 있다. 이 기능은 그저 구문작성 시의 편의를 위한 것으로 C#을 보다 간편하게 작성할 수 있도록 도와줄 뿐이다. 그 밖에 다른 효과나 이점은 없다. 



※ 확장 메서드 사용하기
확장 메서드(Extension Method)는 직접 작성하지 않았거나 소스 코드가 없어서 직접 변경이 불가능한 클래스에 메서드를 추가할 수 있는 편리한 방법이다. 목록 4-11 은 Models 폴더에 ShoppingCart.cs 라는 이름의 파일로 추가한 Product 개체들의 컬렉션을 담고 있는 ShoppingCart 클래스를 보여주고 있다. 

목록4-11 ShoppingCart.cs 파일의 ShoppingCar 클래스
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace LanguageFeatures.Models
{
    public class ShoppingCart
    {
        public List<Product> Products { get; set; }
    }
}

이 클래스는 Product 개체들의 List 컬렉션을 감싸는 래퍼 역할을 수행하는 아주 간단한 클래스다(이번 예제는 기초적인 클래스만으로도 충분하다) 그런데 ShoppingCart 클래스에 담겨 있는 Product 개체들의 합계를 구해야 하는 상황이지만 이 클래스는 타사로 부터 제공받은 것이라서 소스 코드를 갖고 있지 않기 때문에 클래스 자체를 직접 수정할 수 는 없다고 가정해 보자. 바로 이런 경우에 확장 메서드를 이용해서 필요한 기능을 추가할수 있다. 목록 4-12는 Models 폴더에 MyExtensionMethods.cs 라는 이름의 파일로 추가한 MyExtensionMethods 클래스의 내용을 보여준다. 

목록4-12 확장 메서드가 정의된 MyExtensionMethods.cs 파일

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace LanguageFeatures.Models
{
    public static class MyExtensionMethods
    {
        public static decimal TotalPrices(this ShoppingCart cartParam)
        {
            decimal total = 0;
            foreach(Product prod in cartParam.Products)
            {
                total += prod.Price;
            }
            return total;
        }
    }
}

TotalPrices 메서드의 첫 번째 매개변수 앞에 자리잡고 있는 this 키워드는 이 메서드를 확장 메서드로 표시해주는 역할을 한다. 그리고 첫 번째 매개변수 그 자체는 .NET에게 이 확장 메서드가 적용될 클래스를 지정해주는데, 이번 예제에서는 ShoppingCart 클래스가 그 대상이다. 이 cartParam 매개변수를 이용하면 확장 메서드가 적용된 ShoppingCart 클래스의 해당 인스턴스를 참조할 수 있다. 이 확장 메서드는 ShoppingCart 클래스의 Products 속성을 대상으로 반복문을 수행해서 Product.Price 속성 값들의 합계를 구한 다음 반환해준다. 목록 4-13은 Home 컨트롤러에 추가한 UseExtension라는 새로운 액션 메서드에서 이 확장 메서드를 사용하고 있는 모습을 보여준다. 


목록4-13 HomeController.cs 파일에서 확장 메서드 사용하기. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using LanguageFeatures.Models;
namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public string Index()
        {
            return "Navigate to a URL to show an example";
        }

        public ViewResult AutoProperty()
        {
            //새로운 Product 개체를 생성한다. 
            Product myProduct = new Product();

            //속성값을 설정한다
            myProduct.Name = "Kayak";

            //속성 값을 가져온다. 
            string productName = myProduct.Name;

            //뷰를 생성한다
            return View("Result", (object)String.Format("Product name: {0}", productName));
            
        }
        public ViewResult CreateProduct()
        {
            //새로운 Product 개체를 생성한다
            Product myProduct = new Product()
            {
                ProductID = 100,Name="Kayak", Description="A boat for one person", Price=275M, Category="Watersports"
            };

            return View("Result", (object)String.Format("Category: {0}", myProduct.Category));
        }
        public ViewResult CreateCollection()
        {
            string[] stringArray = { "apple", "orange", "plum" };

            List<int> intList = new List<int> { 10, 20, 30, 40 };

            Dictionary<string, int> myDict = new Dictionary<string, int> { { "apple", 10 }, { "orange", 20 }, { "plum", 30 } };

            return View("Result", (object)stringArray[1]);
        }

        public ViewResult UseExtension()
        {
            // ShoppingCart 개체를 생성하고 속성 값을 설정한다. 
            ShoppingCart cart = new ShoppingCart()
            {
                    Products = new List<Product>
                {
                    new Product {Name="Kayak", Price=275M},new Product{Name="Lifejacket",Price=48.95M},
                    new Product{Name="Soccer ball", Price=19.50M},new Product{Name="Corner flag", Price=34.95M}
                }
            };

            //카트에 담긴 제품들의 합계 값을 구한다. 
            decimal cartTotal = cart.TotalPrices();

            return View("Result", (object)String.Format("Total: {0:c}", cartTotal));
        }
    }
}


Note:
확장 메서드를 사용하더라도 해당 클래스의 메서드, 필드 및 속성에 대한 접근 규칙 자체를 위배할 수는 없다. 확장 메서드를 통해서 클래스의 기능을 확장할 수는 있지만 일반적인 방식으로 접근할 수 있는 클래스 멤버들만 사용 가능하다. 


이 코드에서 가장 중요한 구문은 다음과 같다. 
...
decimal cartTotal = cart.TotalPrices();

완전히 다른 클래스에 정의된 확장 메서드에 불과한 TotalPrices 메서드를 마치 ShoppingCart 클래스의 메서드인 것처럼 ShoppingCart 개체를 통해서 호출하고 있다. 다만 .NET은 현재 클래스의 범위 내에 존재하는 확장 클래스들만 검색하기 때문에 확장 클래스는 현재 클래스와 동일한 네임스페이스나 using 구문을 사용해서 지정한 네임스페이스에 존재해야 한다. 다음은 응용프로그램을 실행한 다음 /Home/UseExtension URL로 이동했을 때 확인할 수 있는 UseExtension 액션 메서드의 결과다. (한글 Windows의 기본 국가별 설정하에서 이 예제를 실행해보면 통화 기호가 $가 아닌 \로 나타날 것이다. 

Total : $378.40