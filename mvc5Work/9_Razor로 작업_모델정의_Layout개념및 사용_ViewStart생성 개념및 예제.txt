CHAPTER 5장 : Razor로 작업하기

뷰 엔진(View Engine)은 ASP.NET 의 내용을 처리하고 뷰에 포함된 지시를 수행한다. 일반적으로 그 지시 중 거의 대부분은 브라우저로 전송될 출력에 동적 내용을 삽입하기 위한 것이다. MVC 프레임워크는 Razor라는 이름의 뷰 엔진을 사용한다. MVC5의 Razor에는 변경된 부분이 없으므로 이전 버전의 Razor 구문에 익숙하다면 이번 장은 그냥 넘어가도 무방하다. 

이번 장에서는 여러분이 Razor 표현식을 보고 이해할 수 있도록 Razor의 문법에 대한 간략한 설명을 제공하고자 한다. 그러나 Razor에 대한 완벽한 레퍼런스를 제공하려는 의도는 아니다. 단지 문법에 관한 간단한 속성 과정 정도로만 이해하면 될 것이다. Razor에 관해서는 이 책을 진행해 나가면서 MVC 프레임워크의 다른 기능들과 더불어 보다 자세하게 살펴보기로 한다. 표5-1은 이번 장의 개요를 요약해서 보여주고 있다. 

표5-1 5장 요약
주제							내용										목록
모델 형식 선언하기 및 접근하기			@model 및 @Model 표현식을 사용한다. 				1 - 4, 15
뷰의 중복 부분 줄이기				레이아웃을 사용한다.							5-7, 10 - 12
기본 레이아웃 지정하기				뷰 시작(View Start)뷰를 사용한다. 					8, 9
컨트롤러에서 뷰로 데이터 값을 전달하기	뷰 모델 개체나 ViewBag을 전달한다. 					13, 14
데이터 값들을 기반으로 다른 내용 생성 하기	Razor 조건문을 사용한다. 							16, 17
배열이나 컬렉션 열거하기				@foreach 표현식을 사용한다. 						18, 19
뷰에 네임스페이스 추가하기			@using 표현식을 사용한다. 						20



※ 예제 프로젝트 준비하기
먼저 [ASP.NET MVC 웹 응용프로그램 (ASP .NET MVC Web Application)] 템플릿을 이용해서 이번 장에서 살펴볼 Razor의 구문들을 직접 실행해보기 위한 Razor라는 이름의 새로운 Visual Studio 프로젝트를 생성한다. 이때 Empty 옵션을 선택하고 MVC 체크박스를 설정해서 MVC 프로젝트를 위한 가장 기본적인 구성을 선택한다(이 설명이 부족하게 느껴진다면 4장의 예제 프로젝트 준비하기 절을 다시 참고해보면 도움이 될 것이다)


※ 모델 정의하기
Models 폴더에 Product.cs 라는 이름으로 클래스 파일을 추가하고 이 파일에 Product라는 이름의 간단한 도메인 모델을 작성한다. 목록5-1은 이 새로운 파일의 내용을 보여주고 있다. 

목록5-1 Product.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Razor.Models
{
    public class Product
    {
        public int ProductID { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string Category { get; set; }
    }
}


※ 컨트롤러 정의하기
이번에는 MVC 프레임워크의 규약에 따라 프로젝트의 최초 시작점으로 사용될 Home컨트롤러를 추가해보자 [솔루션 탐색기(Solution Explorer)]에서 Controllers 폴더를 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [추가(Add)] > [컨트롤러 (Controller)] 를 선택한다. [스캐폴드 추가(Add Scaffold)] 대화 상자가 나타나면 [MVC 5 컨트롤러 - 비어 있음(MVC 5 Controller - Empty)] 옵션을 선택하고 [추가(Add)] 버튼을 클릭한다. 컨트롤러의 이름을 HomeController로 지정하고 다시 [추가(Add)]버튼을 클릭하면 Visual Studio가 Controllers/HomeController.cs 파일을 생성해준다. 그러면 이 파일의 내용을 목록 5-2와 같이 변경한다. 


목록5-2 HomeController.cs 파일의 초기 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Razor.Models;
namespace Razor.Controllers
{
    public class HomeController : Controller
    {
        Product myProduct = new Product()
        {
            ProductID = 1,
            Name = "Kayak",
            Description = "A boat for one person",
            Category = "Watersports",
            Price = 275M
        };
        // GET: Home
        public ActionResult Index()
        {
            return View(myProduct);
        }
    }
}

이 컨트롤러는 개체 이니셜라이저를 사용해서 Product 개체를 생성하면서 동시에 그 속성들까지 설정하고있다. 또한 Index 액션 메서드에서는 뷰가 렌더될 때 모델로 사용할수 있도록 생성된 Product 개체를 View 메서드에 전달해준다. 이때 View 메서드를 호출하면서 뷰 파일의 이름을 지정하지 않고 있기 때문에 규약에 따라 액션 메서드의 기본 뷰가 사용되게 된다. 


※ 뷰 생성하기
계속해서 HomeController 클래스의 Index 메서드를 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [뷰 추가(Add View)]를 선택한다 [뷰 추가(Add View)]대화 상자가 나타나면 뷰의 이름이 Index로 지정되어 있는지 확인한 다음 [템플릿(Template)]을 [Empty]로 변경하고 [모델 클래스(Model Class)] 항목에서 Product를 선택한다(만약 모델 클래스 항목에 Product가 나타나지 않는다면 프로젝트를 컴파일한 다음 다시 진행한다.) [ 뷰 옵션(View Options)] 영역의 체크박스들을 모두 해제하고 [추가(Add)] 버튼을 클릭하면 Views/Home 폴더에 Index.cshtml 파일이 생성된다. 목록5-3에 이 새로운 뷰 파일의 내용이 나타나 있다. 

목록5-3 Index.cshtml 파일의 내용
@model Razor.Models.Product

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div> 
    </div>
</body>
</html>



이어 지는 절들에서는 Razor 뷰의 여러 가지 부분들을 살펴보고 이를 활용해서 처리할 수 있는 다양한 작업들 중 일부를 직접 살펴볼 것이다. 뷰는 모델의 일부분을 사용자에게 보여주기 위해서 다시 말해 개체들로부터 가져온 데이터를 출력하는 HTML 을 생성하기 위해서 존재한다는 점을 유념하면 Razor를 이해하는 데 많은 도움이 될 것이다. 또한 이번 장의 모든 예제들은 클라이언트로 전송할 수 있는 HTML 페이지를 생성하는 것이 근본적인 목적이라는 점도 기억해두면 Razor 가 수행하는 작업들의 모든 의미가 이해되기 시작할 것이다. 


Note:
이어지는 절들에서는 이미 2장에서 살펴봤던 내용들 중 일부를 다시 설명하고 있는 경우도 있다. 이는 Razor의 기능을 급하게 찾아봐야 할 필요가 있을 때 여기저기 뒤적거릴 필요 없이 한곳에 서 전체적인 내용을 참고할수 있기를 바랐기 때문이다. 비록 일부 내용이 중복되더라도 그럴만한 가치가 있다고 생각한다. 



※ Model 개체를 이용해서 작업하기
먼저 뷰의 첫 번째 줄부터 살펴보도록 하자. 

@model Razor.Models.Product

이처럼 Razor 구문은 @문자로시작한다. 이 코드는 @model 구문을 사용해서 액션 메서드에서 뷰로 전달하는 모델 개체의 형식을 선언하고 있다. 이 구문을 사용하면 목록5-4에서 볼 수 있는 것처럼 @Model 속성을 통해서 뷰 모델 개체의 메서드나 필드 또는 속성을 참조할수 있다. 이 목록은 Index 뷰에 간단한 코드를 추가한 결과를 보여준다. 

목록5-4 Model 개체의 속성을 참조하고 있는 Index.cshtml 파일
@model Razor.Models.Product

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div> 
        @Model.Name
    </div>
</body>
</html>


Note:
뷰 모델 개체의 형식을 선언할 때는 @model(소문자 m)을 사용하지만 Name 속성에 접근할 때는 @Model(대문자M)을 사용하고 있다는 점에 주의하도록 하자. Razor를 처음 사용할 때는 조금 헷갈리겠지만 금방 익숙해질 것이다. 


프로젝트를 실행해보면 그림5-1과 같은 결과를 확인할수 있을 것이다. 

이렇게 @model 표현식을 이용해서 MVC에게 작업에 사용할 개체의 형식을 알려주면 , Visual Studio에서 두 가지 방식으로 그 이점을 활용할 수 있다. 먼저 그림5-2에서 볼 수 있는 것처럼 뷰의 코드를 작성할 때 @Model 바로 뒤에 마침표를 입력하면 Visual Studio가 모델 개체에서 제공되는 멤버들의 목록을 팝업으로 제시해준다. 이 기능은 2장에서 HTML 헬퍼 메서드에 람다식을 전달했을 때 자동완성 기능이 동작했던 방식과도 비슷하다. 

또한 참조하려는 뷰 모델 개체의 멤버에 문제가 있을 때 Visual Studio가 오류를 표시해주는 기능도 유용하다. 그림5-3에서 그 사례를 살펴볼 수 있는데, 실제로는 존재하지 않는 @Model.NotArealProperty라는 속성을 참조하려고 시도하자 Visual Studio가 모델 형식으로 지정한 Product 클래스에 해당 속성이 존재하지 않는 다는 사실을 감지해서 편집기에 오류를 밑줄로 강조해서 표시해주고 있다. 



※레이아웃을 이용해서 작업하기
Index.cshtml 뷰 파일에 작성된 또 다른 Razor 표현식은 다음과 같다. 

...
@{
	Layout = null;
}
...

이 표현식은 뷰에 C# 구문을 작성할 수 있게 해주는 Razor코드 블록의 사례로 코드 블록은 @{로 시작해서 }로 끝나며 그 내부에 존재하는 구문들은 뷰가 렌더될 때 평가된다. 


※레이아웃을 이용해서 작업하기
Index.cshtml 뷰 파일에 작성된 또 다른 Razor 표현식은 다음과 같다. 

...
@{
	Layout = null;
}
...

이 표현식은 뷰에 C# 구문을 작성할수 있게 해주는 Razor 코드 블록의 사례로 코드 블록은 @{로 시작해서 } 로 끝나며 그 내부에 존재하는 구문들은 뷰가 렌더될 때 평가된다. 

이 코드 블록은 Layout 속성의 값을 null로 설정하고 있다. 20장에서 다시 자세하게 살펴보겠지만 Razor 뷰는 MVC 응용프로그램 내부의 C# 클래스로 컴파일 되는데 이때 사용되는 기본 클래스에 이 Layout 속성이 정의되어 있다. 이 클래스의 동작 방식에 관해서는 20장에서 살펴보도록 하고, 일단 지금은 Layout 속성을 null로 설정하면 해당 뷰가 클라이언트에 필요한 모든 내용을 독립적으로 직접 렌더할 것이라는 사실을 MVC 프레임워크에게 알려준다는 점만 이해하도록 하자. 


이번 예제처럼 간단한 예제 응용프로그램에서는 독립적인 뷰를 사용하더라도 큰 상관이 없지만 실제 프로젝트에서는 수 많은 뷰가 필요할 수도 있다. 레이아웃은 응용프로그램의 외형을 일관적으로 만들어주는 마크업을 작성하기에 안성맞춤인 템플릿으로 렌더된 결과에 올바른 JavaScript 라이브러리 들이 포함되고 전체적으로 일관된 룩앤필이 사용될 것이라는 점을 보장해 줄 수 있다. 



※ 레이아웃 생성하기
레이아웃을 생성하려면 솔루션 탐색기에서 Views 폴더를 마우스 오른쪽 버튼으로 클릭하고 팝업 메뉴에서 [추가(Add)] > [새 항목(New Item)]을 선택한 다음 그림5-4에서 볼 수 있는 것처럼 [MVC5 레이아웃 페이지(Razor)(MVC 5 Layout Page (Razor))] 템플릿을 선택한다. 

파일 이름을 _BasicLayout.cshtml 로 설정하고 [추가(Add)] 버튼을 클릭하면 파일이 생성된다(파일 이름의 첫 번째 문자가 밑줄이라는 점에 주의한다) 목록 5-5에 VIsual Studio 가 생성해준 파일의 내용이 나타나있다. 


Note:
Views 폴더 하위에 존재하는 이름이 밑줄(_)로 시작하는 파일들은 사용자에게 반환되지 않으므로 이 기능을 활용해서 렌더하고자 하는 파일들과, 그 파일들을 지원하기 위한 파일들을 파일 이름을 기준으로 구분 지을수 있다. 이를 테면 레이아웃은 지원하는 파일에 속하므로 밑줄로 시작해야 한다. 



목록5-5 _BasicLayout.cshtml 파일의 초기 내용
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
    <div>
        @RenderBody()
    </div>
</body>
</html>

레이아웃은 뷰의특화된 형태로 목록5-5에는 이 레이아웃에 사용된 @표현식들이 굵게 강조되어 있다. 먼저 레이아웃의 마크업 내에서 @RenderBody 메서드를 호출하면 해당 위치에 액션 메서드에서 지정한 뷰의 내용이 삽입된다. 그리고 또 다른 Razor 표현식인 @ViewBag.Title은 ViewBag의 Title 속성값으로 title 요소의 내용을 설정해준다. 

레이아웃에 작성된 요소들은 해당 레이아웃을 사용하는 모든 뷰에 동일하게 적용된다. 바로 이 점이 레이아웃을 템플릿으로 간주하는 본질적인 이유다. 목록 5-6은 레이아웃이 동작하는 방식을 직접 살펴보기 위해서 레이아웃에 몇 가지 간단한 마크업을 추가한 결과를 보여준다. 

목록5-6 몇 가지 요소들이 추가된 _BasicLayout.cshtml 파일
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
    <h1>Product Information</h1>
    <div style="padding: 20px; border: solid medium black; font-size: 20pt">
        @RenderBody()
    </div>
    <h2>Visit<a href="http://apress.com">Apress</a></h2>
</body>
</html>


이 레이아웃에는 두 개의 헤더 요소가 추가됐으며, @RenderBody 표현식을 담고 있는 div 요소에 몇 가지 CSS 스타일들이 적용됐다. 내용 중 어떤 부분이 레이아웃에서 비롯된 것이고 어떤 부분이 뷰에서 비롯된 것인지를 명확하게 구분하기 위한 것이다. 



※ 레이아웃 적용하기
뷰에 레이아웃을 적용하려면 간단히 Layout 속성 값만 설정해주면 된다. 브라우저로 반환될 응답의 구조를 정의하는 HTML 요소들은 이미 레이아웃에 작성되어 있으므로, 뷰에서는 해당 요소들을 제거해버릴 수 있다. 목록5-7은 레이아웃을 적용함으로써 극적으로 단순해진 Index.cshtml 파일을 보여준다. 


TIP:
이 뷰에서는 ViewBag.Title 속성 값을 함께 설정해주고 있다. 이 값은 사용자에게 전송될 HTML 문서의 title 요소의 내용으로 사용된다. 비록 필수적인 사항은 아니지만 바람직한 작업 습관이다. 만약 이 속성 값을 지정하지 않는다면 MVC 프레임워크는 빈 title 요소를 반환할것이다. 


목록5-7 Layout 속성을 사용하고 있는 Index.cshtml 파일
@model Razor.Models.Product

@{
    ViewBag.Title = "Product Name";
    Layout = "~/Views/_BasicLayout.cshtml";
}

<!DOCTYPE html>
Product Name: @Model.Name


본래도 간단한 뷰였지만 변경된 결과는 인상적이다. 뷰에 남겨진 부분은 뷰 모델 개체의 데이터를 사용자에게 출력하는 작업에만 집중하고 있다. 중요한 점은 그저 작업해야 할 마크업만 간단해진 것이 아니라 앞으로 생성할 모든 뷰에서 공통적인 요소들을 반복해서 작성할 필요성 자체가 사라졌다는 사실이다. 그러면 이제 예제 응용프로그램을 실행해서 레이아웃이 적용된 결과를 살펴봐보자. 그 결과가 그림5-5에 나타나 있다. 



※ 뷰 시작 파일 사용하기
아직 작지만 개선할 수 있는 부분이 남아있는데, 지금과 같은 방식으로는 뷰마다 직접 일일이 레이아웃 파일을 지정해줘야 한다. 만약 레이아웃 파일의 이름을 바꾸기라도 하면 해당 레이아웃을 참조하는 모든 뷰 파일들을 찾아서 변경해줘야 한다. 이런 작업은 오류를 만들어내기 도 쉬울 뿐만 아니라 MVC 프레임워크를 통해서 손쉽게 유지보수를 수행하고자 하는 전반적인 목표에도 어긋나는 일이다. 

이 문제점은 뷰 시작(View Start) 파일을 이용해서 해결할 수 있다. MVC 프레임워크는 뷰를 렌더할 때 먼저 _ViewStart.cshtml 라는 이름의 파일을 찾는다. 이 파일에 작성된 내용들은 마치 뷰 파일 자체에 포함되어 있는 것처럼 처리되므로 이 기능을 활용해서 자동으로 Layout 속성의 값이 설정되도록 만들 수 있다. 

뷰 시작 파일을 생성하려면 Views 폴더에 새로운 레이아웃 파일을 추가하되 파일 이름을 _ViewStart.cshtml 로 지정한다(이 파일의 이름도 밑줄로 시작된다는 점에 주의한다) 그리고 파일 내용을 편집해서 목록 5-8과 같이 수정한다. 

목록 5-8 _ViewStart.cshtml 파일의 내용
@{ 
    Layout = "~/Views/_BasicLayout.cshtml";
}

작업을 마치고 나면 뷰 시작 파일을 통해서 일괄적으로 Layout 속성 값을 지정하게 되므로, 목록 5-9에서 볼 수 있는 것처럼 Index.cshtml 파일에서는 해당 표현식을 제거할수 있게 된다. 

목록 5-9 뷰 시작 파일의 적용을 반영하기 위해 변경된 Index.cshtml 파일
@model Razor.Models.Product

@{
    ViewBag.Title = "Product Name";
}

<!DOCTYPE html>
Product Name: @Model.Name


뷰 시작 파일을 적용하기 위해서 따로 지정해줘야 할 사항은 없다. MVC 프레임워크가 자동으로 뷰 시작 파일을 찾아서 그 내용을 적용해주기 때문이다. 또한 뷰 파일에 선언된 값들이 뷰 시작 파일에 선언된 값들보다 우선순위가 높으므로 뷰 시작 파일의 값을 재정의하기도 쉽다. 

주의 :
뷰 파일에서 Layout 속성 설정 자체를 생략하는 것과 Layout 속성 값을 null로 설정하는 것 간의 차이점을 이해하는 것이 중요하다. 만약 뷰 파일이 자체적으로 완전한 내용을 담고 있으며 레이아웃을 사용하지 않을 생각이라면 Layout 속성의 값을 null로 설정하면 된다. 그러나 Layout 속성 값 자체를 설정하지 않으면 MVC 프레임워크는 뷰 시작 파일에 지정된 값을 이용해서 레이아웃을 사용하려는 의도라고 이해한다. 



※ 레이아웃 공유 예제 살펴보기 
Home 컨트롤러에 NameAndPrice라는 이름으로 새로운 액션 메서드를 추가해서 레이아웃이 실제로 공유되는 모습을 빠르고 간략하게 살펴보도록 하자. 목록 5-10은 HomeController.cs 파일에 추가된 NameAndPrice 액션 메서드의 정의를 보여주고 있다. 

목록5-10 새로운 액션 메서드가 추가된 HomeController.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Razor.Models;
namespace Razor.Controllers
{
    public class HomeController : Controller
    {
        Product myProduct = new Product()
        {
            ProductID = 1,
            Name = "Kayak",
            Description = "A boat for one person",
            Category = "Watersports",
            Price = 275M
        };
        // GET: Home
        public ActionResult Index()
        {
            return View(myProduct);
        }
	//추가된 액션메서드
        public ActionResult NameAndPrice()
        {
            return View(myProduct);
        }
    }
}

이 액션 메서드는 Index 액션 메서드와 동일하게 View 메서드로 myProduct 개체를 전달하고 있다. 물론 실제 프로젝트에서는 이런 식으로 작업하지는 않겠지만 지금은 Razor 의 기능을 살펴보기에 적합한 단순한 예제를 만드는 것이 목적이다. NameAndPrice 액션 메서드를 마우스 오른쪽 버튼으로 클릭한 다음 팝업 메뉴에서 [뷰 추가(Add View)]를 선택한다. 그리고 [뷰 추가(Add View)] 대화 상자의 내용을 그림 5-6과 같이 입력한다. 즉 [뷰 이름(View Name)]은 NameAndPrice로 [템플릿(Template)]은 [Empty]로 그리고 [모델 클래스(Model Class)]는 Product로 설정한다. 

계속해서 [레이아웃 페이지 사용(Use a Layout Page)]항목이 체크되어 있는지 확인하고 그 아래에 위치한 텍스트 박스를 살펴보기 바란다. 뷰에 뷰 시작 파일을 적용하려면 이 텍스트 박스를 빈 상태로 남겨두면 된다. 이 상태에서 [추가(Add)]버튼을 클릭하면 Layout 속성 값을 설정하지 않은 뷰가 생성된다. 

그러나 이번 예제에서는 명시적으로 뷰를 지정해보려고 하므로 텍스트 박스의 우측에 위치한 생략 라벨(．．．)이 지정된 버튼을 클릭한다. 그러면 Visual Studio가 그림 5-7과 같이 레이아웃 파일을 선택할 수 있는 대화상자를 보여준다. 

대부분 레이아웃 파일은 MVC 프로젝트의 규약에 따라 Views 폴더에 위치하는 것이 일반적이지만 이는 단지 규약일 뿐이며, 여러분 의 결정에 따라 레이아웃 파일을 다른 위치에 저장한 경우 대화 상자 좌측의 패널을 이용해서 프로젝트의 다른 위치들로 이동할 수도 있다. 

물론 현재 프로젝트에는 단 하나의 레이아웃 파일만 정의되어 있으므로 _BasicLayout.cshtml 파일을 선택하고 [확인(OK)]버튼을 클릭해서 [뷰 추가(Add View)]대화 상자로 돌아간다. 그러면 그림5-8과 같이 텍스트 박스에 레이아웃 파일의 이름이 설정되는 것을 확인할수 있다. 

마지막으로 [추가(Add)]버튼을 클릭하면 /Views/Home/NameAndPrice.cshtml 파일이 생성된다. 5-11에 생성된 파일의 내용이 나타나 있다. 

목록5-11 NameAndPrice.cshtml 파일의 내용
@model Razor.Models.Product

@{
    ViewBag.Title = "NameAndPrice";
    Layout = "~/Views/_BasicLayout.cshtml";
}

<h2>NameAndPrice</h2>


이번 예제에서 처럼 레이아웃 파일을 지정해서 뷰를 생성하는 경우 Visual Studio 가 약간 변형된 기본 내용으로 구성된 뷰 파일을 만들어주는데, 그 내용과 뷰에 레이아웃을 적용하기 위해서 우리가 직접 작성했던 Razor 표현식의 내용이 동일하다는 것을 알 수 있다. 목록5-12에서 볼 수 있는 것처럼 NameAndPrice.cshtml 파일에 뷰 모델 개체의 데이터 값을 출력하기 위한 간단한 표현식을 추가해서 이번 예제를 마무리해보자. 

목록5-12 NameAndPrice.cshtml 파일에 내용 추가하기
@model Razor.Models.Product

@{
    ViewBag.Title = "NameAndPrice";
    Layout = "~/Views/_BasicLayout.cshtml";
}

<h2>NameAndPrice</h2>
The product name is @Model.Name and it costs $@Model.Price



이제 응용프로그램을 실행한 다음 /Home/NameAndPrice 로 이동해보면 그림5-9와 같은 결과를 확인할수 있을 것이다. 예상하고 있는 것처럼 레이아웃에 정의된 공통 요소들과 스타일들이 뷰에 적용된다. 이 결과를 통해서 공통 룩앤필을 작성하기 위해서 레이아웃을 템플릿으로 사용하는 방법을 확인할수 있을 것이다(비록 간단하고 볼품 없는 예제이기는 하지만 말이다)



Note:
만약 이번 예제에서 [뷰 추가(Add View)]대화 상자의 텍스트 박스를 빈 상태로 놔두고 뷰 시작 파일을 적용했더라도 동일한 결과를 얻었을 것이다. 레이아웃 파일을 명시적으로 지정한 이유는 단지 파일 선택을 도와주는 Visual Studio 의 기능을 직접 보여주고 싶었기 때문이다. 