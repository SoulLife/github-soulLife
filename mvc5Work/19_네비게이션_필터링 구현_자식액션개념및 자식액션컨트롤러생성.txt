CHAPTER 8장: SportsStore : 네비게이션

이전 장에서는 SportsStore 응용프로그램의 핵심 기반구조를 작성해봤다. 지금부터는 그 기반 구조를 토대로 응용프로그램에 새로운 기능들을 추가해보자. 이전 장에서 구현했던 기본적인 배관 작업을 투자라고 생각했을 때, 그 투자가 어떻게 좋은 결과로 돌아오는지 이장에서 확인할 수 있을 것이다. 이제 고객들이 직접 사용하게 될 중요한 기능들을 간단하고 쉽게 추가할 수 있게 되었고, 구현하는 과정에서 MVC 프레임워크가 제공해주는 몇 가지 추가적인 기능을 살펴보게 될 것이다. 


※ 네비게이션 컨트롤 추가하기
고객들이 상품들을 카테고리별로 탐색할 수 있다면 SportsStore 응용프로그램을 사용하기가 훨씬 더 편리할 것이다. 다음과 같은 세 가지 단계를 거쳐서 이 기능을 구현해보자. 

1. 리파지토리의 Product 개체들을 필터링할 수 있도록 ProductController 클래스의 List 액션 메서드를 개선한다. 

2. URL 구성(scheme)을 재검토 및 개선하고 라우팅 전략을 수정한다. 

3. 카테고리 목록을 만들고 사이트의 사이드바에 배치해서 현재 선택된 카테고리는 강조하고 나머지 카테고리에는 링크를 건다. 


※ 제품 목록 필터링하기
먼저 이전 장에서 SportsStore.WebUI 프로젝트에 추가했던 ProductListViewModel 클래스부터 개선해보자. 뷰에서 사이드바를 렌더하려면 현재 선택된 카테고리가 무엇인지 뷰에 알려줘야 하므로 뷰 모델부터 수정하는 것이 좋다. 목록8-1은 수정된 ProductListViewModel.cs 파일의 내용을 보여주고 있다. 

목록8-1 ProductListViewModel.cs 파일 개선하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Models
{
    public class ProductsListViewModel
    {
        public IEnumerable<Product> Products { get; set; }
        public PagingInfo PagingInfo { get; set; }
        public string CurrentCategory { get; set; }
    }
}


목록 8-1에서는 ProductsListViewModel 클래스에 CurrentCategory 라는 속성을 추가했다. 그리고 Product 컨트롤러의 List 액션 메서드를 수정해서 선택된 카테고리를 기준으로 Product 개체들을 필터링한 다음 방금 뷰모델에 새로 추가한 속성을 이용해서 현재 선택된 카테고리를 표시한다. 목록8-2에서 변경된 내용을 확인할 수 있다. 


목록8-2 ProductController.cs 파일의 List 액션 메서드에 카테고리 관련 기능 추가하기.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Models;
namespace SportsStore.WebUI.Controllers
{
    public class ProductController : Controller
    {
        private IProductRepository repository;
        public int PageSize = 4;

        public ProductController(IProductRepository productRepository)
        {
            this.repository = productRepository;
        }

        /*
        public ViewResult List()
        {
            return View(repository.Products);
        }
        */
        public ViewResult List(string category,int page=1)
        {
            ProductsListViewModel model = new ProductsListViewModel
            {
                Products = repository.Products.Where(p => category == null || p.Category == category)
                .OrderBy(p => p.ProductID).Skip((page - 1) * PageSize).Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = page,
                    ItemsPerpage = PageSize,
                    TotalItems = repository.Products.Count()
                },
                CurrentCategory = category
            };
            return View(model);
        }

    }
}

이 액션 메서드는 모두 세 군데가 변경됐다. 첫 번째 변경사항은 category 라는 매개변수가 추가된 것으로 이 매개변수의 값은 두 번째 변경사항인 LINQ 질의를 개선하는 데 사용된다. 그 결과로 category 매개변수의 값이 null이 아닌 경우, Category 속성 값이 이 매개변수의 값과 일치하는 Product 개체들만 선택될 것이다. 마지막 변경 사항은 ProductsListViewModel 클래스에 추가했던 CurrentCategory 속성의 값을 설정한 것이다. 그러나 이 변경사항들 때문에 PagingInfo.TotalItems 속성의 값이 부정확하게 계산되는 결과가 야기된다. 현재 TotalItems 속성의 값은 카테고리를 전혀 고려하고 있지 않기 때문이다. 이 문제점은 잠시 후에 개선할 것이다. 



※ 단위 테스트 : 기존 단위 테스트 수정하기
목록 8-2에서 category 매개변수를 추가해서 List 액션 메서드의 시그니처를 변경했기 때문에 프로젝트 빌드 시 기존의 단위 테스트 메서드들에서 컴파일 오류가 발생하게 된다. 이 문제를 해결하려면 해당 단위 테스트들에서 List 메서드를 호출할 때 첫 번째 매개변수를  null로 전달해야 한다. 예를 들어 Can_Paginate 테스트의 Act 영역을 다음 코드와 같이 변경한다. 

public void Can_Paginate()
        {
            //Arrange
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product {ProductID=1, Name="P1" }, new Product{ProductID=2, Name="P2"}, new Product{ProductID=3, Name="P3"},
                new Product {ProductID=4, Name="P4"}, new Product{ProductID=5, Name="P5"}
            });

            ProductController controller = new ProductController(mock.Object);
            controller.PageSize = 3;

            //Act
            ProductsListViewModel result = (ProductsListViewModel)controller.List(null,2).Model;

            //Assert
            Product[] prodArray = result.Products.ToArray();
            Assert.IsTrue(prodArray.Length == 2);
            Assert.AreEqual(prodArray[0].Name, "P4");
            Assert.AreEqual(prodArray[1].Name, "P5");
        }

이렇게 null을 전달하면, 컨트롤러가 새 매개변수를 추가하기 전과 같이 리파지토리에서 가져오는 모든 Product 개체들을 반환한다. Can_Send_Pagination_View_Model 테스트 역시 동일한 방식으로 변경해야 한다. 

 [TestMethod]
        public void Can_Send_Pagination_View_Model()
        {
            //Arrange
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product { ProductID=1, Name="P1"},new Product { ProductID=2, Name="P2"},new Product { ProductID=3, Name="P3"},
                new Product { ProductID=4, Name="P4"},new Product { ProductID=5, Name="P5"}
            });

            //Arrange
            ProductController controller = new ProductController(mock.Object);
            controller.PageSize = 3;

            //Act
            ProductsListViewModel result = (ProductsListViewModel)controller.List(null,2).Model;

            //Assert
            PagingInfo pageInfo = result.PagingInfo;
            Assert.AreEqual(pageInfo.CurrentPage, 2);
            Assert.AreEqual(pageInfo.ItemsPerpage, 3);
            Assert.AreEqual(pageInfo.TotalItems, 5);
            Assert.AreEqual(pageInfo.TotalPages, 2);
        }

매사를 테스트 중심으로 생각하기 시작하면 코드를 변경함에 따라 단위 테스트를 바로바로 수정하는 것이 자연스럽게 습관화될 것이다. 



카테고리 필터링은 비록 작은 변경에 불과하지만 그 효과는 명확하다. 응용프로그램을 시작하고 다음과 같은 질의 문자열을 사용해서 카테고리를 지정해본다. 단 이때 URL 의 포트 번호는 Visual Studio가 여러분의 프로젝트에 할당한 번호로 변경해야 한다. 

http://localhost:51280/?category=Soccer

그러면 그림8-1과 같이 Soccer 카테고리의 상품들만 나타날 것이다. 

물론 사용자들은 이렇게 직접 URL을 변경해가면서 카테고리를 탐색하고 싶어하지 않을 것이 분명하지만 MVC 프레임워크 응용프로그램의 기반구조가 잘 잡혀있기 때문에 이런 작은 변경만으로도 큰 효과를 낼 수 있다는 것을 알 수 있다. 



※ 단위 테스트 : 카테고리 필터링
카테고리 필터링 기능이 올바르게 동작하는지, 즉 명시된 카테고리에 대한 상품들만 정확하게 생성되는지를 확인하기 위한 단위 테스트가 필요하다. 다음 테스트가 바로 그것이다. 

[TestMethod]
        public void Can_Filter_Products()
        {
            //Arrange
            // - Mock 리파지토리를 생성한다
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1", Category="Cat1"},new Product{ProductID=2, Name="P2", Category="Cat2"},
                new Product{ProductID=3, Name="P3", Category="Cat3"},new Product{ProductID=4, Name="P4", Category="Cat4"},
                new Product{ProductID=5, Name="P5", Category="Cat5"}
            });
            //Arrange - 컨트롤러를 생성하고 페이지 크기를 세 개의 항목으로 설정한다. 
            ProductController controller = new ProductController(mock.Object);
            controller.PageSize = 3;

            //Action
            Product[] result = ((ProductsListViewModel)controller.List("Cat2", 1).Model).Products.ToArray();

            //Assert
            Assert.AreEqual(result.Length, 2);
            Assert.IsTrue(result[0].Name == "P2" && result[0].Category == "Cat2");
            Assert.IsTrue(result[1].Name == "P4" && result[1].Category == "Cat2");
        }

이 테스트는 먼저 다양한 카테고리들이 지정된 Product 개체들이 포함된 Mock 리파지토리를 생성한다. 그런 다음 특정 카테고리를 지정해서 액션 메서드를 호출하고 올바른 개체들이 올바른 순서로 반환되는지를 검사한다. 




※ URL 구성 개선하기
누구도 /?Category=Soccer처럼 보기 싫은 URL을 원하지는 않을 것이다. 이 문제를 해결하기 위해 라우팅 구성으로 되돌아가서 사용자에게 친숙한 URL을 만들어보자. 목록 8-3과 같이 App_Start/RouteConfig.cs 파일의 RegisterRoutes 메서드를 변경해서 새로운 라우트 구성을 추가한다. 

목록8-3 RouteConfig.cs 파일에서 새로운 URL 스킵 구성하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace SportsStore.WebUI
{
    public class RouteConfig
    {        
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                null, "", new { Controller = "Product", Action = "List",category=(string)null,page=1 });

            routes.MapRoute(
                null,
                "Page{page}",
                new { controller = "Product", action = "List", category=(string)null},new {page=@"\d+"}
            );
            routes.MapRoute(null,
                "{category}", new { controller = "Product", action = "List", page = 1 });

            routes.MapRoute(null, "{category}/Page{page}", new { controller = "Product", action = "List" }, new { page = @"\d+" });

            routes.MapRoute(null, "{controller}/{action}");


        }
    }
}


※ 주의:
반드시 목록 8-3에서 나열된 순서대로 새 라우트들을 추가해야 한다. 라우트는 정의된 순서대로 적용되기 때문에 이 순서를 바꾸면 이상한 결과를 얻게 될 것이다. 

표8-1은 이 라우트들이 나타내는 URL의 구성을 설명하고 있다. 라우팅에 관해서는 15장과 16장에서 다시 자세하게 살펴볼 것이다. 

표8-1 라우트 요약
URL				목적지(Leads To)
/				모든 카테고리의 상품들에 대한 첫 번째 페이지를 보여준다. 
/Page2			모든 카테고리의 상품들에 대한 두 번째 페이지를 보여준다. 
/Soccer			Soccer 카테고리의 상품들에 대한 첫 번째 페이지를 보여준다.
/Soccer/Page2		Soccer 카테고리의 상품들에 대한 두 번째 페이지를 보여준다. 


MVC는 브라우저에서 들어오는 (incoming) 요청을 처리할 때뿐만 아니라, 웹 페이지에 포함될 브라우저로 나가는 (outgoing) URL을 생성할 때도 URL 구성을 준수하기 위해 ASP .NET라우팅 시스템을 이용한다. 이렇게 하나의 라우팅 시스템을 사용해서 들어오는 요청을 처리하고, 나가는 URL을 생성함으로써 응용프로그램에서 사용하는 모든 URL 들에 대해 일관성을 유지할수 있다. 


Note:
라우팅 설정을 단위 테스트하는 방법은 15장에서 살펴볼 것이다. 



나가는 링크를 생성하는 가장 편리한 방법은 Url.Action 메서드를 사용하는 것이다. 이미 이 전 장에서 List 뷰의 페이지 링크를 출력하기 위해서 이 헬퍼 메서드를 사용했었다. 이제 카테고리 필터링 기능을 추가했으므로, 목록 8-4와 같이 링크를 출력하는 코드에서도 카테고리 정보를 헬퍼 메서드에 전달해줘야 한다. 

목록 8-4 List.cshtml 파일에서 페이징 링크에 카테고리 정보 추가하기
@model SportsStore.WebUI.Models.ProductsListViewModel

@{
    ViewBag.Title = "Products";
}
@foreach (var p in Model.Products)
{
    @Html.Partial("ProductSummary", p);
}
<div class="btn-group pull-right">
    @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new {  page=x,category=Model.CurrentCategory }))
</div>



이렇게 변경하기 전에 페이징을 위해서 생성된 링크는 다음과 같았다.

http://<myserver>:<port>/Page1

만약 사용자가 이런 URL을 클릭한다면 이미 적용했던 카테고리 필터 정보를 잃어버리고 다시 모든 카테고리의 상품들이 출력된 페이지를 보게 될 것이다. 그러나 이제는 뷰 모델에서 전달받은, 선택된 카테고리의 정보를 추가함으로써 다음과 같은 URL이 생성된다. 

http://<myserver>:<port>/Chess/Page1

사용자가 이 링크를 클릭하면 현재 선택된 카테고리에 대한 정보가 List 액션 메서드에 전달되어 필터링이 계속 유지된다. 목록 8-4처럼 변경한 후에 /Chess나 /Soccer같은 URL로 접속해보면 페이지 하단의 페이지 링크에 카테고리 필터링이 적용되어 정확한 결과를 보여주는 것을 확인할 수 있을 것이다(페이지 링크 자체에는 카테고리가 적용됐지만 전체 페이지 수를 계산하는 로직에는 아직 카테고리 필터링 기능이 반영되지 않았기 때문에 실제로 반환되는 상품의 수와는 무관하게 항상 세 개의 페이지가 유지된다. 이 문제점은 잠시 후에 수정할 것이다)



※ 카테고리 네비게이션 메뉴 구성하기
고객이 URL을 직접 입력하지 않더라도 카테고리를 탐색할 수 있는 방법을 제공할 필요가 있다. 고객에게 사용 가능한 카테고리들의 목록을 보여주고, 현재 선택된 카테고리가 무엇인지도 표시해줘야 한다. 또한 앞으로 응용프로그램을 계속 만들어가면서 이번 장에서 만든 카테고리 목록을 여러 컨트롤러들에서 사용할 것이므로 독립적이고 재사용할 수 있는 형태로 구현할 필요가 있다. 

ASP .NET MVC 프레임워크에는 자식 액션(Child Actions)이라는 개념이 존재하는데, 이 개념은 지금처럼 재사용 가능한 네비게이션 컨트롤 같은 구성요소들을 구현해야 할 때 아주 적합하다. 자식 액션은 특정 액션 메서드의 출력을 현재 뷰에 포함시켜주는 HTML.Action 이라는 HTML 헬퍼 메서드에 의존해서 동작한다. 이번 예제에서는 NavController라는 새로운 컨트롤러를 생성하고 이 컨트롤러에 네비게이션 메뉴를 랜더하는 Menu라는 액션 메서드를 정의할 것이다. 그런 뒤에 Html.Action 헬퍼 메서드를 사용해서 이 액션 메서드의 출력을 레이아웃에 삽입할 것이다. 

이런 접근 방식을 사용하면 필요한 모든 유형의 응용프로그램 로직을 구현하면서도 지금까지 살펴봤던 다른 모든 컨트롤러처럼 단위 테스트가 가능한 실제 컨트롤러를 얻을수 있다. 전반적인 MVC 프레임워크의 접근 방식을 유지하면서도 응용프로그램의 보다 작은 영역을 구서하기에 좋은 방법이다. 


※ 네비게이션 컨트롤러 만들기
먼저 Controllers 폴더를 마우스 오른쪽 버튼으로 클릭하고 [추가(Add)] > [컨트롤러(Controller)]를 선택한다. [MVC5 컨트롤러 - 비어있음(MVC 5 Controller - Empty)] 템플릿을 선택한 다음 NavController 라고 이름을입력하고 [추가(Add)] 버튼을 클릭해서 NavController.cs 클래스 파일을 생성한다. Visual Studio 가 컨트롤러에 기본으로 추가해주는 Index 메서드를 삭제하고 목록8-5와 같이 Menu라는 액션 메서드를 추가한다. 

목록8-5 NavController.cs 파일에 Menu 액션 메서드 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace SportsStore.WebUI.Controllers
{
    public class NavController : Controller
    {
        public string Menu()
        {
            return "Hello from NavController";
        }
    }
}

이 메서드는 비록 정적 메시지 문자열을 반환하고 있을 뿐이지만 자식 액션을 응용프로그램의 다른 부분들과 통합해보기 위한 용도로는 충분하다. 모든 페이지에 카테고리 목록을 보여줘야 하므로 특정 뷰보다는 레이아웃에 자식 액션을 렌더하는 것이 좋다. 따라서 Views/Shared/_Layout.cshtml 파일을 수정해서 목록 8-6과 같이 Html.Action 헬퍼 메서드를 호출하도록 변경한다. 

목록8-6 _Layout.cshtml 파일에 Html.Action 추가하기
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <title>@ViewBag.Title</title>
</head>
<body>
    <div class="navbar navbar-inverse" role="navigation">
        <a class="navbar-brand" href="#">SPORTS STORE</a>
    </div>
    <div class="row panel">
        <div id="categories" class="col-xs-3">
            @Html.Action("Menu", "Nav");
        </div>
        <div class="col-xs-8">
            @RenderBody()
        </div>
    </div>
</body>
</html>

자리 표시자로 입력해뒀던 텍스트를 Html.Action 메서드 호출로 대체했다. 이 메서드의 매개변수로는 실행하고자 하는 액션 메서드의 이름(Menu)과 그 액션 메서드가 정의되어 있는 컨트롤러 이름(Nav)을 전달해주면 된다. 이제 응용프로그램을 실행해보면 그림 8-2와 같이 Menu 액션 메서드의 결과가 브라우저에 반영된 것을 확인할 수 있을 것이다. 



※ 카테고리 목록 생성하기
이제 NavController를 구현해서 실제 카테고리들의 모음을 생성할 수 있는 모든 준비가 모두 마무리됐다. 다만 카테고리에 대한 URL들을 컨트롤러 내부에서 생성하고 싶지는 않기 때문에 뷰에서 헬퍼 메서드를 사용하여 생성하려고 한다. 따라서 Menu 액션 메서드에서 수행할 작업은 단지 목록 8-7과 같이 카테고리들의 목록을 생성하는 것뿐이다. 

목록8-7 NavController.cs 파일의 Menu 메서드 구현하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;

namespace SportsStore.WebUI.Controllers
{
    public class NavController : Controller
    {
        private IProductRepository repository;

        public NavController(IProductRepository repo)
        {
            repository = repo;
        }
        public PartialViewResult Menu()
        {
            IEnumerable<string> categories = repository.Products.Select(x => x.Category).Distinct().OrderBy(x => x);

            return PartialView(categories);
        }
    }
}


먼저 첫 번째 변경사항은 IProductRepository 인터페이스의 구현을 인자로 받는 생성자를 추가한 것이다. 이는 NavController 클래스의 인스턴스가 생성될 때 Ninject가 해결해야 할 의존성을 선언하는 효과를 갖는다. 두 번째 변경사항은 Menu 액션 메서드에 대한 부분으로 LINQ 질의를 이용해서 리파지토리에서 카테고리 목록을 가져온다음 이를 뷰에 전달해주고 있다. 이 컨트롤러에서는 부분 뷰를 반환해야 하기 때문에 액션 메서드에서 PartialViewResult 개체를 반환해주는 PartialView 메서드를 호출하고 있으며, 액션 메서드 자체도 PartialViewResult 개체 형식을 반환하고 있다는 점에 유의하도록 하자. 