CHAPTER 15장 : URL 라우팅
MVC 프레임워크가 등장하기 이전에 널리 사용되던 ASP.NET은 요청 URL과 서버의 하드디스크에 존재하는 파일들 사이에 직접적인 연관성이 있다고 가정한다. 본질적으로 서버가 하는 일은 브라우저의 요청을 받아서 매칭되는 파일을 결과물로 전달해주는 것이었다. 

그러나 이와 같은 처리 방식은 각각의 ASPX 페이지가 실제 파일이자 요청에 대한 독립적인 응답인 Web Forms 방식에는 적합하지만 컨트롤러의 액션 메서드에서 요청을 처리하고 요청과 디스크의 파일이 일대일로 대응하지 않는 MVC 응용프로그램에는 적합하지 않다. 

ASP .NET 플랫폼에서는 MVC의 URL들을 처리하기 위해서 라우팅 시스템을 사용하는데, 이번 장에서는 이 라우팅 시스템을 사용해서 프로젝트의 URL들을 강력하고 유연하게 처리할수 있는 방법에 대해서 살펴본다. 직접 보면 알겠지만 라우팅 시스템은 표현하고자 하는 모든 URL들의 패턴을 간단명료한 방식으로 만들수 있게 도와준다. 라우팅 시스템은 두 가지 기능을 가지고 있다. 

* 들어오는 URL을 검사하여 요청의 대상이 되는 컨트롤러와 액션을 알아낸다. 
* 나가는 URL을 생성한다. 이 URL은 사용자가 링크를 클릭했을 때 특정 액션이 호출되도록 뷰를 통해서 렌더된 HTML에 표시되는 URL이다(이 나가는 URL을 클릭하면 다시 들어오는 URL이 된다)

먼저 이번 장에서는 여러분이 작성한 컨트롤러의 액션에 사용자의 요청이 도달할수 있도록 라우트를 정의하는 방법과 들어오는 URL을 처리하기 위한 라우트의 사용법을 집중적으로 알아볼 것이다. MVC 프레임워크 응용프로그램에서는 두 가지 방식으로 라우트를 생성할 수 있는데, 규칙 기반 라우팅과 어트리뷰트 라우팅이 바로 그것이다. 이미 기존 버전의 MVC 프레임워크를 사용해봤다면 규칙 기반 라우팅에 익숙하겠지만 어트리뷰트 라우팅은 MVC5에서 새로 도입된 기능이다. 이번 장에서는 두 가지 방식을 모두 살펴볼 것이다. 

그런 다음 다음 장에서는 이 두 가지 방식을 이용해서 뷰에 추가될 나가는 URL을 만드는 방법에 대해 알아볼 것이다. 뿐만 아니라 라우팅 시스템을 사용자 지정하는 방법에 대해서 알아보고 관련된 기능인 영역(Area)에 대해서도 알아볼 것이다. 표15-1은 이번 장의 개요를 요약해서 보여주고 있다. 

표15-1 15장 요약

주제							내용										목록
URL과 액션 메서드 매핑하기			라우트를 정의한다.								1 - 8

URL 세그먼트 생략하기				세그먼트 변수를 위한 기본값을 정의한다.				9, 10

대응하는 라우팅 변수가 없는 URL 세그먼트	정적 세그먼트를 사용한다.						11 - 14
매치하기

액션 메서드로 URL 세그먼트 전달하기		사용자 지정 세그먼트 변수를 정의한다.					15 - 18

기본값이 생략된 URL 세그먼트 허용하기	선택적 세그먼트를 정의한다.						19 - 22

URL 세그먼트의 수에 관계없이 모두 매치되는	catchall 세그먼트를 사용한다.						23
라우트 정의하기

컨트롤러 이름 중복 막기				라우트에 우선적 네임스페이스를 지정한다.				24 - 27

라우트와 매치될 수 있는 URL 제한하기		라우트 제약 조건을 적용한다.						28 - 34

어트리뷰트 라우팅 사용하기			MapMvcAttributeRoutes 메서드를 호출한다.				35

컨트롤러 내부에서 라우트 정의하기		액션 메서드에 Route 어트리뷰트를 적용한다.				36, 37

어트리뷰트 라우트 제약조건 설정하기		라우트 패턴에 세그먼트 변수를 위한 제약조건을 적용한다.		38, 39

컨트롤러의 모든 어트리뷰트 라우트에 대해	컨트롤러 클래스에 RoutePrefix 어트리뷰트를 적용한다.		40
공통 접두사 정의하기


※ 예제 프로젝트 준비하기
라우팅 시스템을 살펴보기 위해서는 직접 라우트를 추가해볼 프로젝트가 필요하다. Empty 템플릿을 사용해서 UrlsAndRoutes라는 이름으로 새로운 MVC 응용프로그램을 생성한다. 이때 그림15-1에서 보여주는 것처럼 [단위 테스트 추가(Add Unit Tests)] 옵션을 선택하여 UrlsAndRoutes.Tests라는 이름의 테스트 프로젝트도 Visual Studio 솔루션에 함께 추가한다. 

이미 SportsStore 예제 응용프로그램에서 직접 단위 테스트를 생성하는 방법을 살펴봤지만 이 방식을 사용하면 동일한 결과를 얻을 수 있을 뿐만 아니라 프로젝트 간의 참조도 자동으로 처리해준다. 하지만 여전히 Moq 패키지는 직접 추가해야 하므로 NuGet 명령어 라인에 다음 명령어를 입력하도록 하자. 

Install-Package Moq -version 4.1.1309.1617 -projectname UrlsAndRoutes.Tests


※ 예제 컨트롤러 만들기
먼저 예제 응용프로그램에 라우팅 기능을 직접 살펴보기 위한 몇 가지 간단한 컨트롤러를 추가해보자. 여기에서는 URL을 해석하여 액션 메서드를 호출하는 방법에만 관심을 둘 것이다. 따라서 뷰 모델로 간단한 문자열 값들을 사용하고 있으며 이 문자열들은 컨트롤러와 액션 메서드의 이름을 알려주기 위한 용도로 ViewBag에 추가된다. 우선 Home 컨트롤러를 만들고 목록15-1처럼 내용을 입력하자. 

목록15-1 HomeController.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            ViewBag.Controller = "Home";
            ViewBag.Action = "Index";
            return View("ActionName");
        }
    }
}

이어서 Customer 컨트롤러를 만들고 목록 15-2 처럼 내용을 작성한다. 


목록15-2 CustomerController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class CustomerController : Controller
    {
        // GET: Customer
        public ActionResult Index()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "Index";
            return View("ActionName");
        }

        public ActionResult List()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "List";
            return View("ActionName");
        }
    }
}

마지막으로 Admin 컨트롤러를 만들고 목록15-3에서 보여주는 코드처럼 내용을 수정하자. 

목록15-3 AdminController.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin
        public ActionResult Index()
        {
            ViewBag.Controller = "Admin";
            ViewBag.Action = "Index";
            return View("ActionName");
        }
    }
}



※ 뷰 만들기
예제 응용프로그램에서 단 하나의 뷰만 정의하고 사용하기 위해서 이전 절에서 만든 컨트롤러들의 모든 액션 메서드에서는 뷰 이름으로 ActionName을 지정하고 있다. Views 폴더에 Shared라는 폴더를 만들고 ActionName.cshtml이라는 뷰를 추가한 다음 목록 15-4처럼 내용을 추가한다

목록15-4 ActionName.cshtml 파일의 내용

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>ActionName</title>
</head>
<body>
    <div>The controller is: @ViewBag.Controller</div>    
    <div>The action is: @ViewBag.Action</div>
</body>
</html>


※ 시작 URL 설정 및 응용프로그램 테스트하기
이 책의 1부에서 설명했던 것처럼 기본적으로 Visual Studio는 디버깅을 시작할 때 여러분이 편집 중이던 파일을 기준으로 브라우저가 요청해야 할 URL을 알아내려고 시도한다. 이는 아주 짜증나는 기능으로 필자는 이 기능을 절대 사용하지 않는다. Visual Studio의 [프로젝트(Project)] 메뉴에서 [UrlsAndRoutes 속성(UrlsAndRoutes Properties)]을 선택하고[웹(Web)] 탭으로 이동한 다음 [시작 작업(Start Action)]영역의 [특정 페이지(Specific Page)] 옵션을 체크한다. 텍스트 박스에는 아무런 값도 입력할 필요가 없으며, 그저 옵션을 체크하는 것만으로도 충분하다. 이제 예제 응용프로그램을 실행해보면 그림15-2와 같은 결과를 보게 될것이다. 



※ URL 패턴 살펴보기
라우팅 시스템은 라우트들의 모음을 통해서 동작한다. 여기서 라우트들은 응용프로그램의 URL 스키마나 구성표를 일괄적으로 구성하는 응용프로그램이 인식하고 응답하게 될 URL 들의 집합을 말한다. 

그러나 응용프로그램에서 지원하고자 하는 모든 URL들을 일일이 하나씩 작성할 필요는 없다. 대신 각각의 라우트는 들어오는 URL들과 비교하기 위한 URL 패턴을 갖게 되는데 라우팅 시스템은 들어오는 URL과 이 패턴이 일치할 경우 해당 라우트를 이용해서 URL을 처리하게 된다. 먼저 예제 응용프로그램의 URL중 하나를 살펴보도록 하자. 

http://mysite.com/Admin/Index

URL은 세그먼트 단위로 나눠서 구분할 수 있다. 세그먼트는 URL에서 호스트 이름과 질의 문자열을 제외한 부분들을 말하며 / 문자로 구분된다. 가령 예제 URL에는 그림15-3처럼 두 개의 세그먼트가 존재한다. 

http://mysite.com/Admin/Index

첫 번째 세그먼트는 Admin이란 단어를 포함하고 있으며, 두 번째 세그먼트는 Index라는 단어를 포함하고 있다. 사람이 보기에는 첫 번째 세그먼트는 컨트롤러와 관계가 있고 두 번째 세그먼트는 액션과 관계가 있다는 점이 너무나도 명확하다. 하지만 MVC 프레임워크를 이용해서 개발할 때는 라우팅 시스템이 이해할수 있는 방식으로 이 관계를 표현해야 한다. 이를 위한 URL 패턴은 다음과 같다. 

{controller}/{action}

들어오는 요청을 처리할 때 라우팅 시스템이 수행하는 작업은 요청된 URL을 패턴과 매치하여 패턴에 정의된 세그먼트 변수들에 대한 값을 URL로부터 추출하는 것이다. 세그먼트 변수는 중괄호( 즉 { 문자와 } 문자)를 사용해서 표기한다. 가령 이번 예제 패턴에는 controller와 action이라는 이름의 두 가지 세그먼트 변수가 존재하므로 controller 세그먼트 변수의 값은 Admin이 되고 action 세그먼트의 값은 Index가 될 것이다. 

패턴과 매치한다고 표현하는 이유는 MVC 응용프로그램은 일반적으로 여러 개의 라우트를 갖고 있기 때문에 라우팅 시스템은 일치하는 패턴을 찾을 때까지 들어오는 URL과 각 라우트들의 URL 패턴을 비교하기 때문이다. 


NOTE:
라우팅 시스템은 컨트롤러나 액션에 대해 특별한 정보를 갖고 있지는 않다. 단지 세그먼트 변수들에 대한 값들을 추출하기만 할 뿐이다. 이 작업은 요청 처리 과정의 후반부인 MVC 프레임워크에 요청이 도착했을 때 수행되는데 결과적으로 이 말은 이미 controller와 action 변수에 값이 할당된 상태라는 뜻이다. 바로 이 점이 Web Forms이나 Web API에서도 라우팅 시스템을 사용할 수 있는 이유이기도 하다(Web API에 관해서는 27장에서 살펴본다. 그리고 ASP .NET의 요청 처리 과정에 대한 자세한 내용은 필자가 집필한 Pro ASP.NET MVC5 Platform을 참고하기 바란다. 


기본적으로 URL 패턴은 세그먼트들의 개수만 같으면 어떤 URL이라도 매치된다. 예를 들어 표15-2에서 볼 수 있는 것처럼 {controller}/{action} 패턴은 두 개의 세그먼트로 구성된 모든 URL들과 매치된다. 

15-2 URL 패턴 매칭 결과

요청URL											세그먼트 변수			
http://mysite.com/Admin/Index								controller = Admin, action = Index

http://mysite.com/Index/Admin								controller=Index, action = Admin

http://mysite.com/Apples/Oranges							controller=Apples, action=Oranges

http://mysite.com/Admin									일치하지 않음 - 세그먼트가 너무 적음

http://mysite.com/Admin/Index/Soccer							일치하지 않음 - 세그먼트가 너무 많음

표 15-2에서는 다음과 같은 URL 패턴의 두 가지 핵심 동작을 강조하고 있다. 

* URL 패턴은 엄격하게 적용되며 세그먼트의 수가 패턴과 동일한 URL들만 일치시킨다. 이 표의  네번째와 다섯 번째 URL을 통해서 이를 확인할 수 있다. 

* URL 패턴은 자유롭다. URL이 정확한 개수의 세그먼트를 가지고 있다면 그 값이 무엇이건 간에 패턴은 세그먼트 변수에 대한 값을 추출한다. 


이것이 기본 동작이며 URL 패턴이 동작하는 방식을 이해하려면 반드시 알아둬야할 부분이다. 이번 장의 뒷부분에서는 이 기본 동작을 변경하는 방법에 대해서도 알아볼 것이다. 

이미 말했던 것처럼, 라우팅 시스템은 MVC 응용프로그램에 대해 전혀 아는 것이 없다. 그래서 URL 패턴은 URL에서 추출한 값에 대응하는 컨트롤러나 액션이 실제로 존재하지 않더라도 매치되는 것이다. 가령 표 15-2의 두 번째 URL을 통해서도 이 점을 확인할 수 있다. URL의 Admin과 Index 세그먼트를 바꿔놨기 때문에 비록 예제 프로젝트에 Index 컨트롤러가 존재하지 않더라도 URL에서 추출한 값 역시 바뀌게 된다. 




※ 간단한 라우트 생성 및 등록하기
이제 사용할 URL 패턴을 결정했으므로 이 패턴을 사용해서 라우트를 정의할 수 있다. 라우트는 프로젝트의 App_Start 폴더에 위치한 RouteConfig.cs 파일에 정의된다. 목록15-5에서 Visual Studio가 이 파일에 기본적으로 정의해준 내용을 확인할 수 있다. 

목록15-5 RouteConfig.cs 파일의 기본 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
        }
    }
}


RouteConfig.cs 파일에 정의된 정적 메서드인 RegisterRoutes는 응용프로그램이 시작될때 MVC 의 몇 가지 핵심 기능들을 설정하는 Global.asax.cs 파일에서 호출된다. 목록15-6에서 Global.asax.cs 파일의 기본적인 내용을 볼 수 있는데 Application_Start 메서드에서 RouteConfig.RegisterRoutes 메서드를 호출하고 있는 코드를 굵게 강조해두었다. 

목록15-6 Global.asax.cs 파일의 기본 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);
        }
    }
}


이 Application_Start 메서드는 MVC 응용프로그램이 최초로 실행될 때 ASP.NET 기반 플랫폼에 의해서 호출되며 이는 자연스럽게 RouteConfig.RegisterRoutes 메서드의 호출로 이어지게 된다. 이 메서드의 매개변수는 RouteTable.Routes라는 정적 속성 값으로 잠시 뒤에 살펴볼 RouteCollection 클래스의 인스턴스다. 


TIP:
Application_Start 메서드에 작성되어 있는 다른 호출 구문은 영역(Area)이라고 부르는 관련 기능을 설정하게 된다. 이 기능에 대해서는 다음 장에서 살펴본다. 


목록15-7은 이전 절에서 살펴본 URL 패턴을 사용하여 RouteConfig.cs 파일의 RegisterRoutes 메서드에 라우트를 구성하는 방법을 보여준다(이번 예제에만 집중할 수 있도록 다른 구문들을 모두 제거했다)

목록15-7 RouteConfig.cs 파일에서 라우트 등록하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
            //하단은 라우트 추가
            Route myRoute = new Route("{controller}/{action}", new MvcRouteHandler());
            routes.Add("MyRoute", myRoute);using System;
	}
  }
}




이 코드에서는 문자열로 구성된 URL 패턴과 MvcRouteHandler 클래스의 인스턴스를 생성자 매개변수로 전달해서 새로운 Route 클래스의 인스턴스를 생성하고 있다. 각각의 ASP .NET 기술들은 서로 다른 클래스를 이용해서 라우트의 동작을 조정하는데, ASP .NET MVC 응용프로그램에서는 MvcRouteHandler 클래스가 사용된다. 라우트를 생성한 뒤에는 라우트를 나타내는 이름과 라우트 그 자체를 Add 메서드에 전달해서 RouteCollection 개체에 추가한다. 


TIP:
라우트의 이름을 지정할 지 여부는 선택사항인데, 이 때문에 라우트로부터 얻을 수 있는 깔끔한 관심사의 분리가 훼손된다는 철학적 논쟁이 있다. 필자는 명명에 대해 너그러운 편이지만 16장의 특정 라우트로부터 URL 만들기 절에서 이 점이 왜 문제가 될 수 있는지 살펴볼 것이다. 


라우트를 보다 편리하게 등록할 수 있는 방법은 RouteCollection 클래스에 정의된 MapRoute 메서드를 사용하는 것이다. 목록15-8은 이 메서드를 이용해서 라우트를 등록하는 방법을 보여주고 있는데, 목록15-7의 예제와 동일한 효과를 얻을 뿐이지만 문법은 훨씬 명료해진다. 

목록15-8 RouteConfig.cs 파일에서 MapRoute 메서드를 이용해서 라우트 등록하기. 

using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
            //하단은 라우트 추가
            routes.MapRoute("MyRoute", "{controller}/{action}");
        }
    }
}

이 방식은 MvcRouteHandler 클래스의 인스턴스를 생성할 필요가 없기 때문에 조금 더 간편하다(내부적으로 인스턴스가 생성된다) 그러나 MapRoute 메서드는 MVC 응용프로그램에서 만 사용할 수 있다. 가령 ASP .NET Web Forms 응용프로그램에서는 대신 MapPageRoute 메서드가 사용되는데 이 메서드도 RouteCollection 클래스에 정의되어 있다. 


※ 간단한 라우트 사용하기
이제 예제 응용프로그램을 실행해보면 지금까지 변경한 라우팅의 효과를 확인할수 있다. 처음에는 브라우저가 응용프로그램의 루트 URL로 이동하면서 오류가 발생하지만{controller}/{action} 패턴과 일치하는 라우트로 이동해보면 그림15-4와 같은 화면을 보게 될 것이다. 다음은 /Admin/Index로 이동한 결과를 보여주는 화면이다. 

목록15-8에 작성한 간단한 라우트에서는 MVC 프레임워크에 루트 URL에 대한 요청에 응답할 수 있는 방법을 알려주지 않고, 오직 하나의 특정 URL 패턴만을 지원하고 있기 때문에, 루트 URL을 요청하면 오류가 발생한다. 일단 지금은 Visual Studio가 프로젝트를 생성하면서 기본으로 RouteConfig.cs 파일에 생성해주는 코드로 다시 되돌리면 임시로 이 문제를 해결할 수 있다. 그러나 이번 장의 나머지 부분들을 통해서 보다 복잡한 패턴과 라우트를 구축하는 방법에 대해서 살펴보도록 하자. 



※단위 테스트 : 들어오는 URL 테스트하기
비록 응용프로그램의 다른 부분들에 대해서는 단위 테스트를 수행하지 않더라도 라우트에 대해서는 반드시 단위 테스트를 수행해서 들어오는 URL이 기대하는 대로 처리되는지 확인해보는 것이 좋다. 큰 규모의 응용프로그램에서는 URL 스키마가 매우 복잡해질 수도 있으며 생각하지도 못했던 결과를 초래할 수도 있기 때문이다. 

지금까지 살펴본 장들에서는 각각의 단위 테스트에서 스스로 어떤 테스트를 수행하고 있는지 살펴보기 쉽도록 테스트들 간에 공유되는 공통 지원 메서드를 만들지 않았다. 그러나 이번 장에서는 다른 접근 방식을 취해보려고 한다. 응용프로그램의 라우팅 스키마를 손쉽게 테스트하기 위해서는 다양한 관련 테스트들을 단일 메서드 내에서 일괄적으로 수행하는 방식이 더 좋은데 몇 가지 지원 메서드를 이용하면 훨씬 더 쉽게 처리할 수있다. 

라우트를 테스트하기 위해서는 MVC 프레임워크의 HttpRequestBase, HttpContextBase, HttpResponseBase 클래스에 대한 세 가지 Mock을 만들어야 한다(이 중 마지막 클래스는 나가는 URL을 테스트하는 데 필요하며, 다음 장에서 알아볼 것이다)이 클래스들의 Mock을 사용하면 라우팅 시스템을 지원하는 MVC의 기반구조를 충분히 재현할수 있다. 

UrlsAndRoutes.Tests 단위 테스트 프로젝트에 RouteTests.cs라는 새로운 단위 테스트 파일을 추가하고, 먼저 HttpContextBase Mock 개체를 생성하는 지원 메서드부터 추가해보자. 

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Moq;
using System.Reflection;
using System.Web;
using System.Web.Routing;
namespace UrlsAndRoutes.Tests
{
    [TestClass]
    public class RouteTests
    {
        private HttpContextBase CreateHttpContext(string targetUrl = null, string httpMethod="GET")
        {
            // MOCK request 개체를 생성한다. 
            Mock<HttpRequestBase> mockRequest = new Mock<HttpRequestBase>();
            mockRequest.Setup(m => m.AppRelativeCurrentExecutionFilePath).Returns(targetUrl);
            mockRequest.Setup(m => m.HttpMethod).Returns(httpMethod);

            //Mock response 개체를 생성한다
            Mock<HttpResponseBase> mockResponse = new Mock<HttpResponseBase>();
            mockResponse.Setup(m => m.ApplyAppPathModifier(It.IsAny<string>())).Returns<string>(s => s);

            //request 개체와 response 개체를 사용하는 mock 컨텍스트 개체를 생성한다
            Mock<HttpContextBase> mockContext = new Mock<HttpContextBase>();
            mockContext.Setup(m => m.Request).Returns(mockRequest.Object);
            mockContext.Setup(m => m.Response).Returns(mockResponse.Object);

            // Mock 컨텍스트 개체를 반환한다. 
            return mockContext.Object;
        }

    }
}

보기보다 이 코드가 처리해주는 설정은 간단하다. HttpRequestBase 클래스의 AppRelativeCurrentExecutionFilePath 속성을 이용해서 테스트하려는 URL을 노출하고 다시 HttpContextBase Mock 클래스의 Request 속성을 이용해서 HttpRequestBase 개체를 노출한다. 계속해서 다음 지원 메서드는 라우트를 테스트해주는 메서드다. 

..
private void TestRouteMatch(string url, string controller, string action,object routeProperties = null, string httpMethod="GET")
        {
            //Arrange
            RouteCollection routes = new RouteCollection();
            RouteConfig.RegisterRoutes(routes);

            // Act - 라우트를 처리한다
            RouteData result = routes.GetRouteData(CreateHttpContext(url, httpMethod));

            //Assert
            Assert.IsNotNull(result);
            Assert.IsTrue(TestIncomingRouteResult(result, controller, action, routeProperties));
        }

...

이 메서드의 매개변수들에는 테스트할 URL, 컨트롤러, 액션 세그먼트 변수들에 대한 기댓값들 그리고 모든 추가적인 변수들에 대한 기댓값을 담고 있는 개체를 전달할 수 있다. 이번 장의 뒷부분과 다음 장에서 이런 변수를 생성하는 방법들을 살펴보게 될 것이다. 또한 라우트 제약하기 절에서 설명할 HTTP 메서드를 지정하기 위한 매개변수도 정의하고 있다. 

이 TestRouteMatch 메서드는 라우팅 시스템을 통해서 가져온 결과와 기대하고 있는 세그먼트 변수의 값들을 비교하기 위해서 TestIncomingRouteResult라는 또 다른 메서드를 이용한다. 이 메서드는 .NET 리플렉션을 사용하므로 추가적인 어떤 세그먼트 변수라도 익명 형식을 사용하여 표현할 수 있다. 만약 이 메서드가 이해가 안되더라도 걱정할 필요는 없다. 이 메서드는 단지 테스트를 더욱 편리하게 만들기 위한 도구일 뿐 MVC를 이해하는데 반드시 필요한 요소는 아니다. 다음은 TestIncomingRouteResult 메서드의 정의다. 

...
 private bool TestIncomingRouteResult(RouteData routeResult, string controller, string action, object propertySet = null)
        {
            Func<object, object, bool> valCompare = (v1, v2) =>
             {
                 return StringComparer.InvariantCultureIgnoreCase.Compare(v1, v2) == 0;
             };

            bool result = valCompare(routeResult.Values["controller"], controller) && valCompare(routeResult.Values["action"], action);

            if(propertySet != null)
            {
                PropertyInfo[] propInfo = propertySet.GetType().GetProperties();
                foreach(PropertyInfo pi in propInfo)
                {
                    if(!(routeResult.Values.ContainsKey(pi.Name) && valCompare(routeResult.Values[pi.Name],pi.GetValue(propertySet,null))))
                    {
                        result = false;
                        break;
                    }
                }
            }
            return result;
        }

또한 비정상적인 URL은 처리되지 않도록 검사하는 메서드도 필요하다. 곧 살펴보게되겠지만 이 검사는 URL 스키마를 정의하는데 있어 아주 중요한 부분이다. 
...
 private void TestRouteFail(string url)
        {
            //Arrange
            RouteCollection routes = new RouteCollection();
            RouteConfig.RegisterRoutes(routes);
            //Act - 라우트를 처리한다
            RouteData result = routes.GetRouteData(CreateHttpContext(url));
            //Assert
            Assert.IsTrue(result == null || result.Route == null);
        }

TestRouteMatch 메서드와 TestRouteFail 메서드에는 Assert 메서드를 호출하는 부분이 존재하는데 만약 어설션에 실패하면 예외가 발생한다. C#의 예외는 호출 스택을 통해서 전달되기 때문에 URL 들을 테스트하고 원하는 테스트 동작을 수행하는 테스트 메서드를 간단하게 작성할 수 있다. 다음은 목록 15-8에서 정의한 라우트를 테스트하는 메서드다. 

...
[TestMethod]
        public void TestIncomingRoutes()
        {
            //기대하고 있는 URL을 검사한다

            TestRouteMatch("~/Admin/Index", "Admin", "Index");
            // 세그먼트에서 획득한 값들을 검사한다. 
            TestRouteMatch("~/One/Two", "One", "Two");

            //세그먼트나 너무 많거나 적으면 매치가 실패한다. 
            TestRouteFail("~/Admin/Index/Segment");
            TestRouteFail("~/Admin");
        }
...

이 테스트에서는 TestRouteMatch 메서드를 사용해서 기대하고 있는 URL을 검사하고 동일한 형태의 다른 URL을 대상으로도 URL 세그먼트에서 올바른 컨트롤러와 액션 값을 획득하는지를 확인한다. 그리고 TestRouteFail 메서드를 사용해서 응용프로그램이 세그먼트의 숫자가 너무 많거나 적은 URL을 허용하지 않는지도 확인한다. 테스트를 수행할 URL은 반드시 틸트(~) 문자로 시작해야 하는데 ASP  .NET 프레임워크가 라우팅 시스템에 URL을 제공할 때 그렇게 하기 때문이다. 

테스트 메서드에는 라우트를 정의할 필요가 없다는 점을 명시하자. 그 이유는 RouteConfig 클래스의 RegisterRoutes 메서드를 이용해서 직접 라우트를 로드하고 있기 때문이다. 