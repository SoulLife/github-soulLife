※ 상품 리파지토리 생성하기
남은 작업은 SportsStore.Domain 프로젝트의 Concrete 폴더에 EFProductRepository.cs 라는 클래스 파일을 추가하는 것뿐이다. 이 클래스 파일을 목록 7-14와 같이 수정한다. 

목록7-14 EFProductRepository.cs 파일의 코드 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;

namespace SportsStore.Domain.Concrete
{
    class EFProductRepository : IProductRepository
    {
        private EFDbContext context = new EFDbContext();

        public IEnumerable<Product> Products
        {
            get { return context.Products; }
        }
    }
}


이 리파지토리 클래스는 IProductRepository 인터페이스를 구현하고 있으며, EFDbContext의 인스턴스를 사용해서 데이터베이스로부터 데이터를 조회한다. 리파지토리에 기능을 추가하면서 Entity Framework를 이용해서 작업을 얼마나 쉽게 처리할 수 있는지 직접 살펴볼 것이다. 

새로운 리파지토리 클래스를 사용하려면 Ninject 의 바인딩을 수정해야 한다. Mock 리파지토리를 방금 생성한 실제 리파지토리로 교체해야 하기 때문이다. SportsStore.WebUI 프로젝트의 NinjectDependencyResolver.cs 클래스를 수정해서 목록7-15와 같이 AddBindigns메서드를 수정한다. 

목록7-15 NinjectDependencyResolver.cs 파일에 실제 라파지토리 바인딩 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using Moq;
using Ninject;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.Domain.Concrete;
namespace SportsStore.WebUI.Infrastructure
{
    public class NinjectDependencyResolver :IDependencyResolver
    {
        private IKernel kernel;

        public NinjectDependencyResolver(IKernel kernelParam)
        {
            kernel = kernelParam;
            AddBindings();
        }
        public object GetService(Type serviceType)
        {
            return kernel.TryGet(serviceType);
        }
        public IEnumerable<object> GetServices(Type serviceType)
        {
            return kernel.GetAll(serviceType);
        }
        private void AddBindings()
        {

            kernel.Bind<IProductRepository>().To<EFProductRepository>(); //추가
        }
    }
}

새 바인딩에 관한 구문이 목록 7-15에 굵은 글씨로 강조되어 있다. 이 구문은 Ninject에 IProductRepository 인터페이스에 대한 요청이 전달되면 EFProductRepository 클래스의 인스턴스를 생성해서 제공하도록 지시한다. 이제 남은 것은 응용프로그램을 다시 실행해보는 것이다. 그림7-13은 응용프로그램이 Mock 리파지토리가 아닌 데이터베이스에서 상품 데이터를 가져온 결과를 보여주고 있다. 


TIP:
만약 프로젝트를 시작할 때 System.ArgumentException 오류가 발생한다면 이는 Web.config 파일에서 데이터베이스 연결 정보를 두 줄에 걸쳐서 작성했기 때문이다. 자세한 내용은 이전 절을 참고하자. 


Entity Framework를 이용해서 SQL Server 데이터베이스를 일련의 모델 개체로 표현하는 이런 접근 방식은 작업하기도 쉽고 간결하다. 또한 MVC 프레임워크 자체에만 집중할 수 있게 해준다. 물론 Entity Framework가 동작하는 방법에 대해 많은 내용들을 건너뛰었고, 엄청나게 많은 설정 관련 옵션에 대해서도 설명하지 않았다. 필자는 Entity Framework를 선호하는 편인데, 여러분도 시간을 내어 학습하기를 추천한다. Entity Framework에 관해서 살펴보기 좋은 곳은 Microsoft의 Entity Framework 관련 사이트인 http://msdn.microsoft.com/data/ef다. 



※ 페이징 추가하기
그림 7-13을 살펴보면 List.cshtml 뷰가 데이터베이스의 모든 상품을 한 페이지에 보여주고 있다는 사실을 알 수 있다. 이번 절에서는 페이징 기능을 추가하여 뷰가 정해진 개수의 상품만 보여주도록 해보자. 그러면 사용자는 페이지 사이를 이동하면서 전체 카탈로그를 볼 수 있게 된다. 이 기능을 구현하기 위한 매개변수를 목록7-16과 같이 Product 컨트롤러의 List 메서드에 추가한다. 

목록7-16 ProductController.cs 파일의 List 액션 메서드에 페이징 기능 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Controllers
{
    public class ProductController : Controller
    {
        private IProductRepository repository;
        public int PageSize = 4;

        public ProductController(IProductRepository productRepository)
        {
            this.repository = productRepository;
        }

        public ViewResult List()
        {
            return View(repository.Products);
        }
        
        public ViewResult List(int page=1)
        {
            return View(repository.Products.OrderBy(p => p.ProductID).Skip((page - 1) * PageSize).Take(PageSize));
        }

    }
}

PageSize 필드를 이용해서 한 페이지당 네 개의 상품을 조회하고자 한다는 것을 지정하고 있다. 이 부분은 나중에 좀 더 나은 방식으로 개선할 것이다. 그리고 List 메서드에 선택적 매개변수(optional parameter)를 추가했다. 따라서 List 메서드가 매개변수 없이 호출되면 (List()), 매개변수의 정의에 따라 기본 값이 사용될 것이다.(List(1)), 결과적으로 MVC 프레임워크가 인자를 지정하지 않고 메서드를 실행할 경우, 액션 메서드는 첫 번째 페이지를 출력하게 된다. 메서드의 내부를 살펴보면 Product 개체를 가져와서 기본 키를 기준으로 정렬하고, 현재 페이지 이전의 상품들은 건너뛰고, PageSize 필드에 지정된 개수만큼의 상품을 가져온다. 


단위 테스트:페이징
Mock 리파지토리를 생성하면 페이징 기능을 손쉽게 테스트할 수 있다. 먼저 Mock 리파지토리를 생성해서 ProductController 클래스의 생성자에 주입하고, 특정 페이지를 지정하여 List 메서드를 호출한다 그런 다음 Mock 구현에서 예상하고 있는 테스트 데이터와 실제로 반환된 Product 개체를 비교하면 된다. 단위 테스트를 설정하는 방법에 관해서는 6장을 참고하기 바란다. 다음은실제로 이 테스트를 수행하기 위해서 작성한 SportsStore.UnitTest 프로젝트의 UnitTest1.cs파일을 보여준다(만약 이 단위 테스트를 실행했을 때 종속 어셈블리의 서로 다른 버전이 충돌한다는 오류 메시지가 나타난다면, 세 가지 프로젝트에 추가된 특정 어셈블리들의 버전들이 서로 일치하지 않기 때문이다. 예를 들어 System.Web.Mvc의 버전이 일치하지 않는다면 이번 장의 앞부분에서 입력했던 NuGet 패키지 설치 명령어를 다시 활용해서 다음과 같이 패키지를 다시 설채히주면 된다. 
Install-Package Microsoft.Aspnet.Mvc -version [필요한버전]-projectname SportsStore.Domain
Install-Package Microsoft.Aspnet.Mvc -version [필요한버전]-projectname SportsStore.UnitTests)

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;
using System;
using Moq;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Controllers;

namespace SportsStore.UnitTests
{
    [TestClass]
    public class UnitTest1
    {

        [TestMethod]
        public void Can_Paginate()
        {
            //Arrange
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product {ProductID=1, Name="P1" }, new Product{ProductID=2, Name="P2"}, new Product{ProductID=3, Name="P3"},
                new Product {ProductID=4, Name="P4"}, new Product{ProductID=5, Name="P5"}
            });

            ProductController controller = new ProductController(mock.Object);
            controller.PageSize = 3;

            //Act
            IEnumerable<Product> result = (IEnumerable<Product>)controller.List(2).Model;

            //Assert
            Product[] prodArray = result.ToArray();
            Assert.IsTrue(prodArray.Length == 2);
            Assert.AreEqual(prodArray[0].Name, "P4");
            Assert.AreEqual(prodArray[1].Name, "P5");
        }
    }
}


컨트롤러 메서드에서 데이터를 받는 작업이 얼마나 쉬운지 주목하자. List 메서드에서 순차적으로 생성된 IEnumerable<Product> 를얻기 위해서 result 변수를 정의하면서 Model 속성을 사용했고 그렇게 반환된 데이터를 예상하고 있는 결과와 비교하고 있다. 이 경우에는 LINQ의 확장 메서드인 ToArray를 사용해서 순차 리스트를 배열로 변환했고 그 배열의 길이와 각 개체의 값을 확인했다. 




※ 페이지 링크 표시하기
이제 응용프로그램을 실행해보면 페이지에 네 개의 상품만 표시되는 것을 확인할 수 있을 것이다. 다른 페이지를 보고 싶다면 질의 문자열(query string)의 매개변수를 다음과 같이 URL의 끝에 추가하면 된다. 

http://localhost:51280/?page=2

여러분은 이 URL에서 (Visual Studio가 제공해주는) ASP .NET 개발 웹 서버가 사용하는 포트에 맞게 URL의 포트 번호를 수정해야 할 것이다. 이런 질의 문자열을 사용해서 페이지별로 상품의 카탈로그를 탐색할 수도 있다. 

물론 고객들이 이런 질의 문자열의 매개변수가 동작하는 방식을 이해하기는 어려울 것이다. 설령 이해한다고 하더라도 이런 방식으로 탐색하기를 원하지는 않을 것이다. 그 대신 편하게 페이지를 이동할 수 있도록 각 상품 목록의 하단에 페이지 링크를 출력할 필요가 있다. 2장에서 살펴봤던 Html.TextBoxFor 또는 Html.BeginForm 메서드와 비슷하게 뷰에서 편리하게 재사용할 수 있는 HTML 헬퍼 메서드를 구현해보도록 하자. 이 헬퍼 메서드는 페이지 링크에 해당하는 HTML 마크업(markup)을 생성할 것이다. 


※ 뷰 모델 추가하기
HTML 헬퍼 메서드를 구현하려면 필요한 전체 페이지 수 , 현재 페이지, 리파지토리의 전체 상품 개수를 뷰에 전달해야 한다. 가장 쉬운 방법은 뷰 모델을 만드는 것인데 뷰 모델에 관해서는 3장에서 간단하게 소개한 바 있다. 목록7-17과 같이 PagingInfo라는 클래스를 SportsStore.WebUI 프로젝트의 Models 폴더에 추가한다. 


목록7-17 PagingInfo.cs 파일의 코드 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace SportsStore.WebUI.Models
{
    public class PagingInfo
    {
        public int TotalItems { get; set; }
        public int ItemsPerpage { get; set; }
        public int CurrentPage { get; set; }

        public int TotalPages
        {
            get { return (int)Math.Ceiling((decimal)TotalItems / ItemsPerpage); }
        }
    }
}

이 뷰 모델은 도메인 모델의 일부가 아니다 단순히 컨트롤러와 뷰 사이에 데이터를 전달하기 위해 편리하게 사용하는 클래스일 뿐이다. 이 점을 강조하기 위해 이 클래스는 도메인 모델 클래스들과 분리해서 SportsStore.WebUI 프로젝트에 작성했다. 




※ HTML 헬퍼 메서드 추가하기
이제 뷰 모델이 준비됐으므로 HTML 헬퍼 메서드를 구현할 수 있다. 이 헬퍼 메서드를 PageLinks라고 부를 것이다. SprotsStore.WebUI 프로젝트에 HtmlHelpers 라는 새 폴더를 추가하고 PagingHelpers.cs라는 클래스 파일을 추가하여 목록7-18의 내용과 같이 수정하자. 

목록7-18 PagingHelpers.cs 클래스 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Web.Mvc;
using SportsStore.WebUI.Models;
namespace SportsStore.WebUI.HtmlHelpers
{
    public static class PagingHelpers
    {
        public static MvcHtmlString PageLinks(this HtmlHelper html, PagingInfo pagingInfo, Func<int, string> pageUrl)
        {
            StringBuilder result = new StringBuilder();
            for(int i=1; i<=pagingInfo.TotalPages; i++)
            {
                TagBuilder tag = new TagBuilder("a");
                tag.MergeAttribute("href", pageUrl(i));
                tag.InnerHtml = i.ToString();
                if(i == pagingInfo.CurrentPage)
                {
                    tag.AddCssClass("selected");
                    tag.AddCssClass("btn-primary");
                }
                tag.AddCssClass("btn btn-default");
                result.Append(tag.ToString());
            }
            return MvcHtmlString.Create(result.ToString());
        }
    }
}

PageLinks 확장 메서드는 PagingInfo 개체를 통해 제공된 정보를 이용해서 일련의 페이지 링크를 HTML 로 생성한다. Func 매개변수는 다른 페이지로의 링크를 생성하는 데 사용되는 델리게이트를 전달받는다. 


※ 단위 테스트: 페이지 링크 생성하기
PageLinks 헬퍼 메서드를 테스트하려면 테스트 데이터와 함께 메서드를 호출하고 그 결과를 기대하고 있는 HTML 과 비교하면 된다. 실제 단위 테스트 메서드는 다음과 같다. 

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;
using System;
using Moq;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Controllers;
using SportsStore.WebUI.Models;
using SportsStore.WebUI.HtmlHelpers;
namespace SportsStore.UnitTests
{
    [TestClass]
    public class UnitTest1
    {

        [TestMethod]
        public void Can_Paginate()
        {
            //Arrange
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product {ProductID=1, Name="P1" }, new Product{ProductID=2, Name="P2"}, new Product{ProductID=3, Name="P3"},
                new Product {ProductID=4, Name="P4"}, new Product{ProductID=5, Name="P5"}
            });

            ProductController controller = new ProductController(mock.Object);
            controller.PageSize = 3;

            //Act
            IEnumerable<Product> result = (IEnumerable<Product>)controller.List(2).Model;

            //Assert
            Product[] prodArray = result.ToArray();
            Assert.IsTrue(prodArray.Length == 2);
            Assert.AreEqual(prodArray[0].Name, "P4");
            Assert.AreEqual(prodArray[1].Name, "P5");
        }

        [TestMethod]
        public void Can_Generate_Page_Links()
        {
            //Arrange - 확장 메서드를 적용하기 위한 HTML 헬퍼 를 정의한다. 
            HtmlHelper myHelper = null;

            //Arrange -- PagingInfo 데이터를 생성한다.
            PagingInfo pagingInfo = new PagingInfo { CurrentPage = 2, TotalItems = 28, ItemsPerpage = 10 };

            //Arrange -- 람다 표현식을 사용해서 델리게이트를 설정한다. 
            Func<int, string> pageUrlDelegate = i => "Page" + i;

            //Act
            MvcHtmlString result = myHelper.PageLinks(pagingInfo, pageUrlDelegate);

            //Assert
            Assert.AreEqual(@"<a class=""btn btn-default"" href=""Page1"">1</a>" + @"<a class=""btn btn-default btn-primary selected"" href=""Page2"">2</a>"
                            + @"<a class=""btn btn-default"" href=""Page3"">3</a>", result.ToString());
        }
    }
}



이 테스트는 큰따옴표를 포함하는 리터럴 문자열 값을 사용하여 헬퍼 메서드를 검증하고 있다. C#은 문자열 서두에 @를 붙이고 큰따옴표 하나가 있을 자리에 두 개를 위치시키는 방식으로 이런 종류의 리터럴 문자열 작업을 완벽히 지원한다. 다만 하나의 리터럴 문자열은 반드시 한 줄에 정의되어야 한다 만일 편집상의 이유로 줄 바꿈 문자를 추가하면 테스트는 실패할 것이다. 



확장 메서드는 영역(scope)내에 자신을 포함하고 있는 네임스페이스가 있어야만 사용할 수 있다. 코드 파일에서는 using 구문을 사용해서 네임스페이스를 지정할 수 있지만 Razor 뷰에서는 Web.config 파일에 구성 항목을 입력하거나 뷰 자체에 @using문을 추가해야 한다. MVC 프로젝트에는 혼란스럽게도 두 개의 Web.config 파일이 존재한다. 응용프로그램 프로젝트의 최상위 폴더에 존재하는 파일이 메인 구성 파일이고, Views 폴더에 있는 파일은 뷰 전용이다. 우리가 수정하고자 하는 파일은 목록 7-19에서 볼 수 있는 것처럼 Views 폴더 아래에 Web.config 파일이다. 

목록7-19 Views/web.config 파일에 HTML 헬퍼 메서드의 네임스페이스 추가하기
<system.web.webPages.razor>
    <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.7.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
    <pages pageBaseType="System.Web.Mvc.WebViewPage">
      <namespaces>
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Routing" />
        <add namespace="SportsStore.WebUI" />
		  <add namespace="SportsStore.WebUI.HtmlHelpers"/>
      </namespaces>
    </pages>
  </system.web.webPages.razor>


Razor 뷰에서 참조하는 모든 네임스페이스는 Web.config 파일에 선언하거나 뷰에 @using문을 추가해서 명시적으로 지정해야 한다. 



뷰 모델 데이터 추가하기
HTML 헬퍼 메서드를 사용하기 위해서는 아직 준비할 것이 남아있다. 즉 뷰에 PageInfo 뷰모델 클래스를 아직 전달하지 않았다. ViewBag 기능을 사용할 수도 있지만 컨트롤러에서 뷰로 전달하는 단일 뷰 모델 클래스에 이 데이터를 포함시키고자 한다. SportsStore.WebUI프로젝트의 Models 폴더에 ProductsListViewModel.cs라는 클래스를 추가한다. 목록 7-20은 새 파일의 코드 내용을 보여준다. 

목록7-20 ProductsListViewModel.cs 파일의 코드 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Models
{
    public class ProductsListViewModel
    {
        public IEnumerable<Product> Products { get; set; }
        public PagingInfo PagingInfo { get; set; }
    }
}

이제 ProductController 클래스의 List 액션 메서드에서는 뷰에 ProductsListViewModel 클래스를 전달하여 해당 페이지에서 표시할 상품의 상세정보와 함께 페이징에 관한 상세정보를 알려줄 수 있다. List 액션 메서드를 목록7-21과 같이 수정한다. 

목록7-21 ProductController.cs 파일의 List 메서드 수정하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Models;
namespace SportsStore.WebUI.Controllers
{
    public class ProductController : Controller
    {
        private IProductRepository repository;
        public int PageSize = 4;

        public ProductController(IProductRepository productRepository)
        {
            this.repository = productRepository;
        }

        public ViewResult List()
        {
            return View(repository.Products);
        }
        
        public ViewResult List(int page=1)
        {
            ProductsListViewModel model = new ProductsListViewModel
            {
                Products = repository.Products.OrderBy(p => p.ProductID).Skip((page - 1) * PageSize).Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = page,
                    ItemsPerpage = PageSize,
                    TotalItems = repository.Products.Count()
                }
            };
            return View(model);
        }

    }
}
이렇게 변경하고 나면 ProductListViewModel 개체를 뷰의 모델 데이터로 전달하게 된다. 