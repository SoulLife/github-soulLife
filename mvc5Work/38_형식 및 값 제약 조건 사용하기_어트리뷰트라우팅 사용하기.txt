※ 형식 및 값 제약조건 사용하기
MVC 프레임워크는 세그먼트 변수들의 형식과 값을 기반으로 라우트와 매치시킬 URL들을 제약하기 위한 다양한 내장 제약조건들을 제공해준다. 목록15-31은 예제 응용프로그램의 라우트를 구성하기 위해서 이 제약조건들 중 한가지를 적용하는 방법을 보여주고 있다. 

목록15-31 RouteConfig.cs 파일에서 프레임워크 내장 형식/값 제약조건 사용하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",id = UrlParameter.Optional},
                new { controller = "^H.*", action = "^Index$|^About$",httpMethod = new HttpMethodConstraint("GET"),id = new RangeRouteConstraint(10,20) },
                new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}


이 제약조건 클래스들은 System.Web.Mvc.Routing.Constraints 네임스페이스에 정의되어 있으며 세그먼트 변수들이 특정 C# 형식 값인지 여부를 검사하거나 기타 기본적인 검사들을 수행할 수 있다. 목록15-31에서는 RangeRouteConstraint 클래스를 사용하고 있는데, 이 클래스는 세그먼트 변수로 제공된 값이 지정된 두 값 사이에 위치하는 유효한 정수 값인지 즉 이 경우에는 10과 20사이의 값인지를 검사한다. 표15-6은 모든 내장 제약조건 클래스들을 보여주고 있다. 모든 클래스가 매개변수를 받지는 않으므로 라우트를 구성하는 데 사용할 이름만 표시해 두었다. 다만 지금은 어트리뷰트 제약조건 열은 잠시 무시하도록 하자. 이 부분에 대해서는 이번 장의 마지막 부분에서 어트리뷰트 라우팅 기능을 설명할 때 다시 설명할 것이다. 

표15-6 라우트 제약조건 클래스

이름						설명													어트리뷰트 제약조건
AlphaRouteConstraint()			대소문자에 관계없이 알파벳 문자(A-Z, a-z)와 매치된다.					Alpha

BoolRouteConstraint()			Bool로 파싱할 수 있는 값과 매치된다.								bool

DateTimeRouteConstraint()		DateTime으로 파싱할 수 있는 값과 매치된다.							datetime

DecimalRouteConstraint()			Decimal로 파싱할 수 있는 값과 매치된다.							decimal

DoubleRouteConstraint()			Double로 파싱할 수 있는 값과 매치된다.							double

FloatRouteConstraint()			Float로 파싱할 수 있는 값과 매치된다.								float

IntRouteConstraint()			Int로 파싱할 수 있는 값과 매치된다.								int

LengthRouteConstraint(len)		값의 길이가 지정된 길이와 일치하거나, 최소/최대 길이 사이에 해당할 경우에만 	length(len)
LengthRouteConstraint			매치된다.												length(min, max)
(min, max)

LongRouteConstraint()			Long 으로 파싱할 수 있는 값과 매치된다. 							long

MaxRouteConstraint(val)			val보다 작은 int 값과 매치된다.									max(val)

MaxLengthRouteConstraint(len)		len의 길이보다 작은 문자열과 매치된다.							maxlength(len)

MinRouteConstraint(val)			val보다 큰 int 값과 매치된다.									min(val)

MinLengthRouteConstraint(len)		len의 길이보다 큰 문자열과 매치된다.								minlength(len)

RangeRouteConstraint(min,max)		min과 max 사이에 오는 int 값과 매치된다.							range(min, max)


또한 CompoundRouteConstraint 클래스의 생성자 매개변수에 제약조건들의 배열을 전달해서 하나의 세그먼트 변수를 대상으로 다양한 제약조건들을 중복해서 적용할수도 있다. 목록15-32는 id 세그먼트 변수에 AlphaRouteConstraint 제약조건과 MinLengthRouteConstraint 제약조건을 동시에 적용하는 방법을 보여준다. 결과적으로 이 라우트는 오직 최소 여섯개의 알파벳 문자로만 구성된 문자열 값들과만 매치될 것이다. 

목록15-32 RouteConfig.cs 파일에서 라우트 제약조건 결합하기.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",id = UrlParameter.Optional},
                new { controller = "^H.*", action = "^Index$|^About$", httpMethod = new HttpMethodConstraint("GET"),
                    id = new CompoundRouteConstraint(new IRouteConstraint[]{
                    new AlphaRouteConstraint(), new MinLengthRouteConstraint(6)
                    }) }, new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}


※ 사용자 지정 제약조건 정의하기
내장 제약조건들만으로는 충분하지 않을 경우 IRouteConstraint 인터페이스를 구현하여 직접 사용자 지정 제약조건을 정의할 수도 있다. 이 기능을 직접 살펴보기 위해서 예제 프로젝트에 Infrastructure 폴더를 추가하고 UserAgentConstraint.cs라는 새로운 클래스를 추가한다. 목록15-33은 이 클래스의 내용을 보여주고 있다.

목록15-33 UserAgentConstraint.cs 파일의 내용

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Routing;
namespace UrlsAndRoutes.Infrastructure
{
    public class UserAgentConstraint : IRouteConstraint
    {
        private string requiredUserAgent;

        public UserAgentConstraint(string agenParam)
        {
            requiredUserAgent = agenParam;
        }

        public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
        {
            return httpContext.Request.UserAgent != null && httpContext.Request.UserAgent.Contains(requiredUserAgent);
        }
    }
}

IRouteConstraint 인터페이스는 Match 메서드를 정의하고 있는데, 이 메서드를 구현해서 라우팅 시스템에 제약조건이 만족하는지 여부를 알려줄 수 있다. Match 메서드의 매개변수들은 각각 클라이언트의 요청, 평가될 라우트, 제약조건의 매개변수 이름, URL에서 추출된 세그먼트 변수들 그리고 들어오는 URL을 검사할 것인지 나가는 URL을 검사할 것인지 대한 상세 정보를 제공해준다. 이번 예제에서는 클라이언트 요청의 UserAgent 속성 값을 검사하여 생성자 매개변수로 전달된 값이 포함되어 있는지 여부를 확인하고 있다. 목록15-34는 라우트에 이 사용자 지정 제약 조건을 지정하는 모습을 보여주고 있다. 

목록15-34 RouteConfig.cs 파일의 Route에 사용자 지정 제약 조건 적용하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
using UrlsAndRoutes.Infrastructure; //유징 해줘야함
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
	   //추가
            routes.MapRoute("ChromeRoute", "{*catchall}", new { controller = "Home", action = "Index" },
                new { customConstraint = new UserAgentConstraint("Chrome") },
                new[] { "UrlsAndRoutes.AdditionalControllers" });

            routes.MapRoute("MyRoute", "{controller}/{action}/{id}/{*catchall}", new{controller = "Home",action = "Index",id = UrlParameter.Optional},
                new { controller = "^H.*", action = "^Index$|^About$", httpMethod = new HttpMethodConstraint("GET"),
                    id = new CompoundRouteConstraint(new IRouteConstraint[]{
                    new AlphaRouteConstraint(), new MinLengthRouteConstraint(6)
                    }) }, new[] { "UrlsAndRoutes.Controllers" });
        }
    }
}

목록 15-34에서는 첫 번째 라우트에 사용자 에이전트 문자열에 Chrome이라는 문자열을 포함하고 있는 브라우저에서 만들어진 요청만 매치되도록 제약조건을 지정하고 있다. 이 라우트가 매치될 경우 요청된 URL의 내용이나 구조와는 관계없이 AdditionalControllers 폴더에 정의된 Home 컨트롤러의 Index 액션 메서드로 요청이 전달된다. URL 패턴은 catchall 세그먼트 변수로만 구성되어 있으므로, 컨트롤러와 액션 세그먼트 변수에 대한 값을 URL에서 가져오지 않고 항상 기본값만 사용하게 된다. 

두 번째 라우트는 나머지 다른 모든 요청들과 매치되며, Controllers 폴더에 존재하는 컨트롤러을 대상으로 하며, 이전 절에서 정의한 형식/값 제약조건이 적용된다. 결과적으로 접근한 브라우저의 종류에 따라 응용프로그램의 각각 다른 곳으로 이동하게 된다. 특히 Chrome 으로 접근하는 경우에는 어떤 URL을 지정하던지 항상 같은 결과를 얻게 된다. 그림 15-13은 Google Chrome으로 응용프로그램에 접근했을 때의 결과를 보여준다. 


그리고 그림15-14는 Internet Explorer로 예제 응용프로그램에 접근한 결과를 보여준다(이전 절에서 지정한 제약 조건 때문에 두번째 라우트가 URL에 매치되려면 URL의 세 번째 세그먼트로 알파벳으로 구성된 여섯 글자 이상을 지정해야만 한다. 


Note:
분명하게 밝혀두지만 응용프로그램이 특정 브라우저에서만 동작한다면 사용자에게 큰 항의를 받게 될 것이다. 반드시 다양한 브라우저에 대응할수 있도록 응용프로그램을 작성해야 한다. 이번 예제에서는 단지 사용자 지정 라우트 제약 조건을 설명하기 위해서 사용자 에이전트 문자열을 사용한 것일 뿐이며, 응용프로그램은 모든 브라우저에서 동일하게 동작해야 한다고 생각한다. 필자는 사용자에게 선호하는 브라우저를 강요하는 웹 사이트를 정말 싫어한다. 



※ 어트리뷰트 라우팅 사용하기
지금까지 살펴본 이번 장의 모든 예제들은 규칙 기반 라우팅이라는 이름으로 알려진 기술을 사용해서 정의되었다. MVC 5에서는 컨트롤러 클래스에 C#의 어트리뷰트를 직접 적용해서 라우트를 정의하는 어트리뷰트 라우팅이라는 새로운 기술을 지원해준다. 이어지는 절들에서는 어트리뷰트를 사용하여 라우트를 생성하고 구성하는 방법을 살펴보고 표준 규칙 기반 라우팅과 자유롭게 섞어 서 사용하는 방법에 대해서도 알아본다. 



규칙기반 라우팅과 어트리뷰트 라우팅:
비록 어트리뷰트 라우팅이 MVC5에 추가된 가장 중요한 기능들 중 하나이긴 하지만 개인적으로 그다지 좋아하지는 않는다. MVC 패턴의 주요 목표 중 하나는 이미 3장에서 설명한 것처럼 개발*테스트 * 유지보수 가 용이하도록 응용프로그램의 각 부분들을 분리하는 것이다. 필자가규칙 기반 라우팅을 선호하는 이유 역시 이 목표에 따라 컨트롤러가 응용프로그램의 라우팅 구성을 의존하지도 않고 이에 대해 아무것도 알지 못하기 때문이다. 반면 어트리뷰트 라우팅은 응용프로그램의 두 가지 주요 구성요소 간의 경계를 모호하게 만들어서 혼란을 만들어낸다. 

그렇기는 하지만 MVC5의 어트리뷰트 라우팅은 MVC 프레임워크의 일부이므로 다음 절들을 읽어보고 사용할지 말지를 직접 결정하기 바란다. 필자의 개인적인 의견 때문에 프로젝트에 이 기능을 추가할지 말지를 결정해서는 안 된다고 생각한다. 

그나마 다행스러운 점은 라우트를 정의하는 두 방식이 모두 같은 기반구조를 사용한다는 점이다. 따라서 이어지는 절들에서 직접 살펴보게 되겠지만 아무런 부작용 없이 하나의 프로젝트에서 두 가지 방식을 모두 사용할 수 있다. 



※ 어트리뷰트 라우팅 활성화 및 적용하기
기본적으로 어트리뷰트 라우팅은 비활성화되어 있는데, RegisterRoutes 정적 메서드의 매개변수로 전달되는 RouteCollection 개체의 MapMvcAttributeRoutes 확장 메서드를 호출해서 활성화시킬 수 있다. 목록15-35의 RouteConfig.cs 파일에 이 메서드를 호출하는 부분을 추가하고, 어트리뷰트를 사용 방법에 집중할수 있도록 응용프로그램의 라우트들을 간단하게 정리했다. 

목록15-35 RouteConfig.cs 파일에서 어트리뷰트 라우팅 활성화시키기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Mvc.Routing.Constraints;
using UrlsAndRoutes.Infrastructure;
namespace UrlsAndRoutes
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapMvcAttributeRoutes();

        }
    }
}


이렇게 MapMvcAttributeRoutes 메서드를 호출하면 라우팅 시스템이 응용프로그램의 컨트롤러 클래스들을 조사해서 라우트를 구성하고 있는 어트리뷰트들을 찾는다. 가장 중요한 어트리뷰트는 Route라는 어트리뷰트로 목록 15-36에서 Customer 컨트롤러에 이 어트리뷰트를 적용하는 방법을 볼수 있다. 

목록15-36 CustomerController.cs 파일에 Route 어트리뷰트 적용하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class CustomerController : Controller
    {
        [Route("Test")]
        public ActionResult Index()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "Index";
            return View("ActionName");
        }

        public ActionResult List()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "List";
            return View("ActionName");
        }
    }
}

이 코드는 액션 메서드에 Route 어트리뷰트를 적용해서 정적 라우트를 정의하는 가장 기본적인 방법을 보여준다. 이 Route 어트리뷰트는 표15-7처럼 두 가지 속성을 갖고 있다. 

표15-7 Route 어트리뷰트가 지원하는 매개변수
이름			설명
Name			특정 라우트를 이용해서 나가는 URL을 만드는 데 사용할 라우트의 이름을 할당한다
Template		액션 메서드에 대해 URL과 매치하는 데 사용될 패턴을 정의한다. 

목록15-36처럼 Route 어트리뷰트에 매개변수를 하나만 전달하면 이 값은 라우트와 매치하는 데 사용될 패턴으로 간주된다. 라우트 매치 제약조건을 지정할 때 약간 차이가 나기는 하지만 ( 이 부분에 관해서는 잠시 뒤에 "라우트 제약조건 적용하기" 절에서 살펴본다) Route 어트리뷰트에 지정할 수 있는 패턴은 규칙 기반 라우팅의 패턴과 동일한 구조를 갖고 있다. 이번예제에서는 /Test라는 URL을 통해서 Customer 컨트롤러의 Index 액션 메서드에 접근할수 있도록 Index 메서드에 Route 어트리뷰트를 적용하고 있다. 그림15-15에서 그 결과를 확인할 수 있다. Name 속성을 사용하는 방법에 관해서는 16장에서 살펴볼 것이다. 

이렇게 액션 메서드에 Route 어트리뷰트를 적용하면 RouteConfig.cs 파일에 정의된 규칙기반 라우트를 통해서는 접근이 불가능해진다. 이번 예제의 경우 더 이상 /Customer/Index URL로는 Customer 컨트롤러의 Index 액션 메서드에 접근할수 없게 된다는 뜻이다. 



주의:
어트리뷰트 라우팅이 활성화되어 있지 않더라도 Route 어트리뷰트를 적용하면 해당 액션 메서드에 대한 규칙 기반의 라우트가 중단된다. RouteConfig.cs 파일에서 MapMvcAttributeRoutes 메서드를 호출할 때는 신중하게 생각해봐야 하며, 자칫하면 실행되지도 않을 액션 메서드를 생성하게 될 수도 있다.



Route 어트리뷰트는 적용된 메서드에만 영향을 미치므로, Customer 컨트롤러의 Index 액션 메서드는 /Test URL을 통해서 접근할 수 있지만 List 액션 메서드는 여전히 /Customer/List URL을 통해서 접근해야 한다. 


TIP:
하나의 액션 메서드에 Route 어트리뷰트를 여러번 적용할 수 있으며, 각 인스턴스들은 새로운 라우트를 생성한다. 



※ 세그먼트 변수를 사용하여 라우트 만들기
비록 어트리뷰트 라우팅 기능이 어트리뷰트로 표현되기는 하지만 규칙 기반 라우팅의 모든 기능들을 지원해준다. 따라서 목록15-37에서 볼 수 있는 것처럼 세그먼트 변수가 포함들이 라우트도 생성할 수 있다. 

목록15-37 CustomerController.cs 파일에서 세그먼트 변수를 사용하여 어트리뷰트 라우트 생성하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class CustomerController : Controller
    {
        [Route("Test")]
        public ActionResult Index()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "Index";
            return View("ActionName");
        }
	//추가
        [Route("Users/Add/{user}/{id}")]
        public string Create(string user, int id)
        {
            return string.Format("User: {0}, ID: {1}", user, id);
        }

        public ActionResult List()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "List";
            return View("ActionName");
        }
    }
}

목록15-37 에서는 string과 int 형식의 값을 매개변수로 받는 Create라는 액션 메서드를 추가했다. 이 액션 메서드는 설명상의 편의를 위해서 뷰를 생성하지 않고 문자열 결과만 반환하고 있다. 그리고 정적인 값(User/Add)과 메서드의 매개변수에 대응하는 user및 id 세그먼트 변수를 함께 섞어서 Route 어트리뷰트에 지정하여 라우트를 정의하고 있다. MVC 프레임워크는 Create 메서드를 호출할 때 25장에서 살펴보게 될 모델 바인딩 기능을 이용해서 세그먼트 변수들의 값을 올바른 형식으로 변환해준다. 그림15-16은 /Users/Add/Admin/100으로 접근했을 때의 결과를 보여준다. 

Route 어트리뷰트의 각 인스턴스들은 독립적으로 실행되기 때문에 컨트롤러에 존재하는 각각의 액션 메서드들에 서로 완전히 다른 라우트를 적용할 수도 있다. 표15-8은 그 사례를 보여주고 있다. 

표15-8 Customer 컨트롤러의 액션들과 해당 액션들에 대한 라우트

액션			URL
Index			/Test
Create		/Users/Add/Adm/100 (마지막 두 개의 세그먼트 변수에는 어떤 값이든 지정할 수 있다.)
List			/Customer/List (RouteConfig.cs 파일에 정의된 라우트를 통해서 처리된다)



※ 라우트 제약 조건 적용하기
비록 보다 직접적인 기법을 사용하기는 하지만 어트리뷰트를 이용해서 정의된 라우트에도 RouteConfig.cs 파일에서 정의했던 것처럼 제약조건을 그대로 적용할 수 있다. 제약조건을 설정하는 방법을 알아보기 위해서 목록15-38처럼 Customer 컨트롤러에 또 다른 액션 메서드를 추가해보자. 

목록15-38 CustomerController.cs 파일에 액션 메서드와 라우트 추가하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    public class CustomerController : Controller
    {
        [Route("Test")]
        public ActionResult Index()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "Index";
            return View("ActionName");
        }
	//id에 인트타입 추가선언
        [Route("Users/Add/{user}/{id:int}")]
        public string Create(string user, int id)
        {
            return string.Format("User: {0}, ID: {1}", user, id);
        }
	//추가
        [Route("users/Add/{user}/{password}")]
        public string ChangePass(string user, string password)
        {
            return string.Format("ChangePass Method - User: {0}, Pass: {1}", user, password);
        }

        public ActionResult List()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "List";
            return View("ActionName");
        }
    }
}

목록 15-38에 새로 추가된 ChangePass라는 액션 메서드는 두 개의 문자열을 매개변수로 받는다. 그리고 이 액션 메서드에는 Create 액션 메서드와 동일하게 정적 접두어 /User/Add와 이어지는 두 개의 세그먼트 값으로 구성된 URL 패턴이 지정된 Route 어트리뷰트가 적용됐다. 두 액션 메서드들 간의 차이점은 다음과 같이 Create 메서드에 적용한 Route 속성에 제약조건이 지정됐다는 점뿐이다. 

...
[Route("Users/Add/{user}/{id:int}"]
...

즉 세그먼트 변수 이름인 id 뒤에 콜론(:)과 int라는 문자를 추가했는데, 이는 id 세그먼트에 제공되는 값이 유효한 int 형식의 값인 요청인 경우에만 Create 액션 메서드로 전달되어야 한다는 것을 라우팅 시스템에 알려준다. 이int 제약조건은 IntRouteConstraint 제약조건 클래스에 해당하는데 표15-6의 어트리뷰트 제약조건 열에 내장 형식/값 제약조건에 해당하는 제약조건의 이름이 나타나 있다. 

이 제약조건들의 효과를 확인해보려면 응용프로그램을 실행한 다음 /Users/Add/Adam/100 URL과 /Users/Add/Adam/Secret URL을 요청해보면 된다. 그림15-17에서 볼 수 있는 것처럼 첫 번째 URL의 마지막 세그먼트는 유효한 int 값이므로 Create 메서드로 연결된다. 반면 두 번째 URL의 마지막 세그먼트는 int 형식이 아니므로 ChangePass 메서드로 연결된다. 



※ 제약조건 결합하기
세그먼트 변수에 여러 개의 제약조건을 적용해서 라우트가 매치될 값의 범위를 보다 더 제한 할 수도 있다. 목록15-30의 코드에서 ChangePass 메서드의 라우트에 alpha 제약조건과 length 제약조건을 결합하는 방법을 확인할 수 있다. 

목록15-39 CustomerController.cs 파일에서 라우트에 여러 개의 제약조건 적용하기

[Route("users/Add/{user}/{password:alpha:length(6)}")]
        public string ChangePass(string user, string password)
        {
            return string.Format("ChangePass Method - User: {0}, Pass: {1}", user, password);
        }

다중 제약 조건은 단일 제약조건과 같은 형태로 반복적으로 결합된다. 먼저 콜론이 오고 이어서 제약조건의 이름이 오며 필요할 경우 괄호가 지정된다. 이번 예제에서 어트리뷰트로 생성한 라우트는 여섯 개의 알파벳 문자로 구성된 값과만 매치될 것이다. 



주의:
제약 조건은 주의해서 적용해야 한다. Route 어트리뷰트를 통해서 정의된 라우트는 RouteConfig.cs 파일에 정의한 라우트와 동일한 방식으로 동작하며 URL이 액션 메서드에 매치되지 않으면 브라우저는 4.4 Not Found 오류를 받게된다. URL에 포함된 값에 관계 없이 항상 매치될수 있는 대체 라우트를 정의하도록 하자. 



※ 라우트 접두어 사용하기

RoutePrefix 어트리뷰트를 사용하면 컨트롤러에 정의된 모든 라우트에 적용되는 공통 접두어를 정의할 수 있는데, 이 기능은 컨트롤러 내에 동일한 루트 URL을 사용하는 액션메서드가 여러 개 존재할 때 매우 유용하다. 목록15-40은 CustomerController에 RoutePrefix 어트리뷰트를 적용하는 방법을 보여주고 있다. 

목록15-40 CustomerController.cs 파일에 공통 라우트 접두어 설정하기

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace UrlsAndRoutes.Controllers
{
    [RoutePrefix("Users")]
    public class CustomerController : Controller
    {
        [Route("~/Test")]
        public ActionResult Index()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "Index";
            return View("ActionName");
        }

        [Route("Add/{user}/{id:int}")]
        public string Create(string user, int id)
        {
            return string.Format("User: {0}, ID: {1}", user, id);
        }

        [Route("Add/{user}/{password:alpha:length(6)}")]
        public string ChangePass(string user, string password)
        {
            return string.Format("ChangePass Method - User: {0}, Pass: {1}", user, password);
        }

        public ActionResult List()
        {
            ViewBag.Controller = "Customer";
            ViewBag.Action = "List";
            return View("ActionName");
        }
    }
}

목록 15-40에서는 Routeprefix 어트리뷰트를 사용해서 액션 메서드에 대한 라우트들에 Users 접두어가 추가되도록 지정하고 있다. 이렇게 접두어를 정의함으로써 Create 액션 메서드와 ChangePass 액션 메서드의 Route 어트리뷰트에서 접두어를 제거할 수 있다. 그러면 MVC 프레임워크가 라우트를 생성할 때 접두어와 URL 패턴을 자동으로 결합해준다. 

또한 Index 액션 메서드에 적용된 Route 어트리뷰트의 URL 패턴이 변경된 것에 주의하자. 

..
[Route("~/Test")]
...

이렇게 ~/로 시작하는 URL을 지정하면 MVC 프레임워크가 Index 액션 메서드에는 RoutePrefix 어트리뷰트를 적용하지 않게 된다. 결과적으로 계속해서 /Test URL을 사용해서 Index 액션 메서드에 접근하게 되는 것이다. 


※ 요약:
이번 장에서는 라우팅 시스템에 관해서 상세하게 살펴봤다. 규칙 기반 라우팅과 어트리뷰트 라우팅을 정의하는 방법과 들어오는 URL을 매치하고 처리하는 방법에 대해서 알아봤으며 URL 세그먼트들의 매치 방법을 변경하고 기본값과 선택적 세그먼트를 사용해서 라우트를 사용자 지정하는 방법도 살펴봤다. 또한 매치될 요청의 범위를 제한하기 위해서 내장 제약조건 클래스들과 사용자 지정 제약조건 클래스를 사용해서 라우트에 제약조건을 설정하는 방법을 알아봤다. 

다음 장에서는 뷰에서 라우트를 이용해서 나가는 URL을 만드는 방법과 라우팅 시스템에 의존해서 동작하는 매우 크고 복잡한 MVC 프레임워크 응용프로그램에 적용할 수 있는 MVC 프레임워크의 영역(Area)기능의 사용 방법에 대해서도 알아볼 것이다. 