※ Razor 표현식 사용하기
지금까지 뷰와 레이아웃에 대한 기본적인 내용들을 살펴봤으므로, 이번에는 Razor가 지원해주는 다양한 유형의 표현식들에 대해서 알아보고, 그 표현식들을 이용해서 뷰의 내용을 작성하는 방법을 살펴보도록 하자. 잘 만들어진 MVC 프레임워크 응용프로그램에는 액션 메서드가 수행하는 역할과 뷰가 수행하는 역할에 대한 명확한 구분이 존재한다. 그 규칙은 간단한데 표 5-2에 정리되어 있다. 

표5-2 액션 메서드와 뷰에 의해서 각각 수행돼야할 역할
구성요소	해야할일												하지말아야 할일
액션메서드	뷰로 뷰 모델 개체를 전달한다. 									서식을 설정한 데이터를 뷰로 전달한다. 

뷰		뷰 모델 개체를 이용해서 사용자에게 내용을 제공 한다.					어떤 식으로든 뷰 모델 개체를 변경한다. 

앞으로 이 책에서는 이 규칙을 계속 반복해서 강조할 것이다. MVC 프레임워크를 사용해서 최고의 결과물을 얻으려면, 응용프로그램의 각 부분들을 엄격하게 분리시켜야 한다. 곧 살펴보겠지만 Razor 를 이용해서 다양한 작업들을 수행할 수 있으며, 심지어 C#의 구문들을 실행할 수도 있다. 그러나 어떤 방식으로든 Razor를 사용해서 업무 로직을 수행하거나 도메인 모델 개체를 조작해서는 안 된다. 

반대로, 액션 메서드에서 뷰로 전달할 데이터의 서식을 설정해서도 안 된다. 그 대신, 출력에 필요한 데이터를 뷰가 직접 구성하도록 만들어야 한다. 가령 이전 절의 간단한 예제에서도 이에 대한 사례를 확인할 수 있다. 이전 절의 예제에서는 Product 개체의 Name 속성값과 Price 속성 값을 출력하는 NameAndPrice라는 이름의 액션 메서드를 정의하고 있는데, 비록 출력에 필요한 속성이 이 두 가지뿐이라는 사실을 뻔히 알고 있지만, 그럼에도 불구하고 다음과같이 Product 개체 전체를 뷰 모델로 전달하고 있다. 

...
public	 ActionResult NameAndPrice()
{
	return View(myProduct);
}

그런 다음 다음과 같이 뷰에서 Razor의 @Model표현식을 이용해서 필요한 속성들의 값을 얻었다. 

...
The product name is @Model.Name and it costs $@Model.Price


물론 출력할 문자열을 액션 메서드에서 직접 생성한 다음 이를 뷰 모델 개체로 만들어서 뷰에 전달할 수도 있었을 것이다. 그래도 동작이야 하겠지만 이런 방식은 MVC 패턴의 장점을 훼손시키고 앞으로 발생할 변화에 대한 대응 능력을 떨어뜨린다. 이미 얘기했던 것처럼 앞으로도 계속 반복해서 이 얘기를 강조하겠지만, MVC 프레임워크는 MVC 패턴을 적절하게 사용하도록 강요하지 않으므로, 여러분이 설계나 코딩 시에 내린 결정이 어떤 영향을 끼지는지를 직접 확실하게 인식하고 있어야 한다는 점을 기억해두기 바란다. 


데이터처리 VS 데이터 서식 설정 :
데이터 처리와 데이터 서식 설정 간의 차이점을 이해하는 것이 중요하다. 데이터 서식 설정은 뷰의 역할로, 이전 절에서 개체의 속성 값들을 조합해서 출력 문자열의 서식을 설정하는 대신, Product개체 자체를 뷰로 전달하고 있는 이유가 바로 이 때문이다. 반면 출력할 데이터 개체의 선택을 비롯 한 데이터 가공 작업은 컨트롤러의 역할로 필요한 데이터를 얻거나 수정하기 위해서 모델을 호출하게 된다. 때때로 데이터 처리와 데이터 서식 설정 간의 경계를 파악하기가 어려운 경우도 있지만 개인적인 경험에 비춰본다면 지나치다 싶을 정도로 조심해서 극히 간단한 표현식들 말고는 대부분 뷰대신 컨트롤러에 작성하는 편이 좋다. 




※ 데이터 값 삽입하기
Razor 표현식으로 처리할 수 있는 가장 간단한 작업은 마크업에 데이터 값을 삽입하는 것이다. 이 작업은 뷰 모델에 정의된 속성이나 메서드를 @Model 표현식을 이용해서 참조하거나, ViewBag 기능을 이용해서 동적으로 정의한 속성들을 @ViewBag 표현식으로 참조하는 방식으로 수행할 수 있다.(ViewBag 기능에 관해서는 2장에서 이미 살펴봤다)

이미 지금까지 이 두가지 표현식에 관한 예제들을 많이 살펴봤지만 완벽을 기하기 위해서 모델 개체와 ViewBag 기능을 이용해서 뷰에 데이터를 전달하는 DemoExpression이라는 이름의 새로운 액션 메서드를 Home 컨트롤러에 추가해보자. 목록5-13에서 이 새로운 액션 메서드의 정의를 확인할 수 있다. 

목록5-13 DemoExpression 액션 메서드가 추가된 HomeController.cs 파일
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Razor.Models;
namespace Razor.Controllers
{
    public class HomeController : Controller
    {
        Product myProduct = new Product()
        {
            ProductID = 1,
            Name = "Kayak",
            Description = "A boat for one person",
            Category = "Watersports",
            Price = 275M
        };
        // GET: Home
        public ActionResult Index()
        {
            return View(myProduct);
        }

        public ActionResult NameAndPrice()
        {
            return View(myProduct);
        }
	//추가된 액션 메서드
        public ActionResult DemoExpression()
        {
            ViewBag.ProductCount = 1;
            ViewBag.ExpressShip = true;
            ViewBag.ApplyDiscount = false;
            ViewBag.Supplier = null;

            return View(myProduct);
        }
    }
}

그리고 기초적인 표현식들을 살펴보기 위해 DemoExpression.cshtml 이라는 이름의 강력한 형식의 뷰를 Views/Home 폴더에 생성한다. 목록5-14는 이 뷰파일의 내용을 보여주고 있다. 

목록5-14 DemoExpression.csht 파일의 내용
@model Razor.Models.Product

@{
    ViewBag.Title = "DemoExpression";
}

<table>
    <thead>
        <tr><th>Property</th><th>Value</th></tr>
    </thead>
    <tbody>
        <tr><td>Name</td><td>@Model.Name</td></tr>
        <tr><td>Price</td><td>@Model.Price</td></tr>
        <tr><td>Stock Level</td><td>@ViewBag.ProductCount</td></tr>
    </tbody>
</table>


이 뷰 파일은 간단한 HTML 테이블을 생성하고 모델 개체와 ViewBag의 속성들을 이용해서 일부 셀들의 값을 채우고 있다. 응용프로그램을 실행 한 다음 /Home/DemoExpression URL로 이동해보면 그림 5-10과 같은 결과를 확인할 수 있다. 이 결과는 단지 지금까지 살펴봤던 예제들에서 사용해왔던 기초적인 Razor 표현식을 재확인 한 것에 불과하다. 

뷰와 레이아웃이 생성해주는 HTML 요소에 별다른 CSS 스타일을 적용하지 않았기 때문에 그 다지 멋진 결과를 보여주지는 않지만, 액션 메서드로부터 뷰에 전달된 데이터를 출력하기 위해서 Razor 표현식을 사용하는 방법을 조금 더 구체적으로 보완해서 보여준다. 



※ 어트리뷰트 값 설정하기

지금까지 살펴본 모든 예제들은 HTML 요소의 내용을 설정하고 있다. 그러나 Razor 표현식을 사용해서 HTML 요소의 어트리뷰트 값을 설정할 수도 있다. 목록5-15는 ViewBag 개체의 속성들을 이용해서 어트리뷰트 값들을 설정하는 부분이 추가된 DemoExpression.cshtml뷰의 마크업을 보여준다. 


목록5-15 Razor 표현식으로 어트리뷰트 값을 설정하고 있는 DemoExpression.cshtml 파일
@model Razor.Models.Product

@{
    ViewBag.Title = "DemoExpression";
}

<table>
    <thead>
        <tr><th>Property</th><th>Value</th></tr>
    </thead>
    <tbody>
        <tr><td>Name</td><td>@Model.Name</td></tr>
        <tr><td>Price</td><td>@Model.Price</td></tr>
        <tr><td>Stock Level</td><td>@ViewBag.ProductCount</td></tr>
    </tbody>
</table>
<div data-discount="@ViewBag.ApplyDiscount" data-express="@ViewBag.ExpressShip" data-supplier="@ViewBag.Supplier">
    The containing element has data attributes
</div>

Discount:<input type="checkbox" checked="@ViewBag.ApplyDiscount" />
Express:<input type="checkbox" checked="@ViewBag.ExpressShip" />
Supplier:<input type="checkbox" checked="@ViewBag.Supplier" />


이 뷰는 먼저 기초적인 Razor 표현식을 사용해서 div 요소의 몇 가지 data 어트리뷰트들의 값을 설정하고 있다. 


TIP:
이름이 data-로 시작하는 어트리뷰트들을 뜻하는 data 어트리뷰트는 다년간 사용자 지정 어트리뷰트를 지정하기 위한 비공식적인 방법으로 널리 이용되어 왔으며, 이제 공식적인 HTML5 표준의 일부로 채택됐다. 이 예제에서는 ViewBag 개체의 ApplyDiscount, ExpressShip, Supplier 속성 값으로 data 어트리뷰트의 값들을 설정하고 있다. 


이제 응용프로그램을 실행하고 이 액션 메서드에 대응하는 경로로 이동한 다음 페이지 렌더에 사용된 HTML 소스 코드를 살펴보자. 그러면 Razor가 어트리뷰트들의 값을 다음과 같이 렌더한 것을 확인할 수 있을 것이다. 

...
<div data-discount=False" data-express="True" data-supplier="">
	The containing element has data attributes
</div>
...

이 결과에서 False 값과 True 값은 ViewBag 개체의 Boolean 속성들의 값과 일치하는 값이다. 그러나 ViewBag 개체의 속성 값이 null인 경우에는 Razor가 재치 있게 알아서 빈 문자열로 렌더해준다는 사실을 알 수 있다. 

그러나 정말 흥미로운 결과는 data 어트리뷰트들을 설정하기 위해서 사용했던 ViewBag 속성들을 다시 이용해서 일련의 체크박스들의 checked 어트리뷰트를 설정하고 있는 뷰에 추가된 두 번째 부분에서 확인할 수 있다. Razor가 렌더해주는 HTML은 다음과 같다. 

...
Discount:<input type="checkbox" />
Express:<input type="checkbox" checked="@ViewBag.ExpressShip" />
Supplier:<input type="checkbox" />
...
이렇게 checked 같은 어트리뷰트들은 자신의 값 대신, 존재 여부 자체를 통해서 자신이 포함된 HTML 요소의 구성을 변경하는데(HTML 명세서에서는 이런 어트리뷰트들을 Boolean 어트리뷰트라고 부른다) Razor는 이런 유형의 어트리뷰트들이 동작하는 방식을 인지하고 있다. 만약 Razor가 checked 어트리뷰트의 값을 False나 null또는 빈 문자열로 설정했다면 브라우저는 이 체크박스들을 모두 체크된 상태로 출력했을 것이다. 그러나 속성 값이 false이거나 null인경우 HTML 요소에서 어트리뷰트 자체를 완전히 제거해버리기 때문에 그림5-11에서 볼 수 있는 것처럼 뷰의 데이터와 일치하는 결과가 만들어지게 된다. 




※ 조건문 사용하기
Razor는 조건문을 처리할 수 있기 때문에, 뷰 데이터의 값들을 기반으로 뷰에서 자유자재로 출력을 만들어낼 수 있다. 바로 이런 형태의 기술이 Razor의 핵심이며, 이를 통해서 복잡하고 유연하지만 여전히 읽기 쉽고 관리하기 쉬운, 합리적인 레이아웃을 작성할 수 있다. 목록 5-16은 조건문이 추가된 DemoExpression.cshtml뷰 파일을 보여준다. 

목록5-16 Razor의 조건문이 사용된 DemoExpression.cshtml 파일
@model Razor.Models.Product

@{
    ViewBag.Title = "DemoExpression";
}

<table>
    <thead>
        <tr><th>Property</th><th>Value</th></tr>
    </thead>
    <tbody>
        <tr><td>Name</td><td>@Model.Name</td></tr>
        <tr><td>Price</td><td>@Model.Price</td></tr>
        <tr><td>Stock Level</td>
        <td>
            @switch ((int)ViewBag.ProductCount)
            {
                case 0:
                    @: Out of Stock
                    break;
                case 1:
                    <b>Low Stock (@ViewBag.ProductCount)</b>
                    break;
                default:
                    @ViewBag.ProductCount
                    break;
            }
           </td>
        </tr>
    </tbody>
</table>

조건문을 시작하려면 이번 예제의 switch 문 같은 C# 의 조건문 키워드 앞에 @문자를 입력한다. 반대로 코드 블록을 종료하려면 일반적인 C#의 코드 블록처럼 중괄호를 닫으면 (}) 된다. 

TIP:
목록5-16에서 ViewBag.ProductCount 속성의 값을 int로 형 변환한 뒤에 switch 구문이 사용하고 있다는 점에 주의하기 바란다. Razor의 switch 표현식은 동적 속성을 평가하지 못하기 때문에 비교를 수행하려면 반드시 특정 형식으로 형 변환 작업을 수행해줘야 한다. 


다음과 같이 Razor 코드 블록 내부에서 HTML 이나 Razor 표현식을 정의해서 뷰 출력에 HTML 요소나 데이터 값들을 포함시킬 수도 있다. 

...
<b>Low Stock (@ViewBag.ProductCount)</b>
...

또는
...
@ViewBag.ProductCount
...

이때 HTML 요소나 표현식을 따옴표로 묶거나 기타 특별한 방식으로 표시해줄 필요는 없다. Razor 엔진이 해당 요소나 표현식을 출력으로 처리해야 한다는 것을 자동으로 인식하기 때문이다. 그러나 HTML 요소에 담겨있지 않은 일반적인 문자열을 뷰에 삽입해야 할 경우에는 다음과 같이 접두사를 지정해서 Razor에 약간의 힌트를 제공해줘야 한다. 

...
@: Out of Stock
...

기본적으로 Razor는 문자열을 만나면 이를 C# 구문으로 간주하고 처리하는데 @: 접두사는 이를 막아준다. 그림5-12는 이번 예제의 조건문이 수행된 결과를 보여준다. 


Razor 뷰에서 조건문이 중요한 이유는 액션 메서드로부터 전달받은 데이터 값들을 기준으로 뷰의 내용을 다채롭게 변경할 수 있기 때문이다. 가령 목록5-17은 DemoExpression.cshtml 뷰에서 if 구문을 사용하고 있는 모습을 보여주고 있다. 누구나 알고 있는 것처럼 일상적으로 사용되는 조건문이다. 

목록5-17 Razor뷰에서 if 구문을 사용하고 있는 DemoExpression.cshtml 파일
@model Razor.Models.Product

@{
    ViewBag.Title = "DemoExpression";
}

<table>
    <thead>
        <tr><th>Property</th><th>Value</th></tr>
    </thead>
    <tbody>
        <tr><td>Name</td><td>@Model.Name</td></tr>
        <tr><td>Price</td><td>@Model.Price</td></tr>
        <tr><td>Stock Level</td>
            <td>
                @if (ViewBag.ProductCount == 0)
                {
                    @:Out of Stock
                }
                else if (ViewBag.ProductCount == 1)
                {
                    <b>Low Stock (@ViewBag.ProductCount)</b>
                }else
                {
                    @ViewBag.ProductCount
                }
            </td>
        </tr>
    </tbody>
</table>


목록 5-17 의 조건문은 switch문을 사용했을 때와 동일한 결과를 만들어내지만 이번 예제는 Razor뷰에서 C#의 조건문들을 자유롭게 활용하는 방법을 보여주기 위한 것이다. 20장에서 뷰에 관해서 더 자세히 살펴보면서 보다 전반적인 동작에 관해서 살펴볼 것이다. 




※ 배열 및 컬렉션 열거하기
MVC 응용프로그램을 작성하다 보면 배열을 비롯한 특정 종류의 개체들의 컬렉션을 열거해서 각각의 세부적인 내용을 생성하는 경우가 빈번하다 목록5-18과 같이 Home 컨트롤러에 DemoArray 라는 이름으로 새로운 액션 메서드를 추가해서 이런 작업들을 처리하는 방법을 살펴보자. 

목록5-18 DemoArray 액션 메서드가 추가된 HomeController.cs 파일
 public ActionResult DemoArray()
        {
            Product[] array =
            {
                new Product{Name="Kayak", Price=275M},new Product{Name="Lifejacket", Price=48.95M},new Product{Name="Soccer ball", Price=19.50M},
                new Product{Name="Corner flag", Price=34.95M}
            };
            return View(array);
        }

이 액션 메서드는 간단한 데이터 값들을 담고 있는 Product[] 개체를 생성한 다음 이를 View 메서드에 전달해서 기본 뷰를 통해서 데이터를 렌더하고 있다. 그러나 Visual Studio의 스캐폴드 기능은 배열을 모델 형식으로 지정할 수 있도록 허용하지 않는다. (Razor 자체는 배열을 지원한다는 점을 감안해볼 때 그 이유를 잘 모르겠다)따라서 배열을 전달하는 액션 메서드에 대한 뷰를 생성하는 가장 쉬운 방법은 그냥 모델을 지정하지 않고 뷰를 생성한 다음, 파일이 생성된 뒤에 직접 @model표현식을 추가하는 것이다. 목록5-19에는 이런 방식으로 Views/Home 폴더에 추가한 다음 편집을 마친 DemoArray.cshtml 파일의 내용이 나타나있다. 

목록5-19 DemoArray.cshtml 파일의 내용
@model Razor.Models.Product[]
@{
    ViewBag.Title = "DemoArray";
    Layout = "~/Views/_BasicLayout.cshtml";
}

@if (Model.Length > 0)
{
    <table>
        <thead><tr><th>Product</th></tr></thead>
        <tbody>
            @foreach(Razor.Models.Product p in Model)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Price</td>
                </tr>
            }
        </tbody>
    </table>
}else
{
    <h2>No product data</h2>
}


이 뷰는 @if 구문을 사용해서 전달받은 뷰 모델 배열의 길이에 따라 뷰의 내용을 변경하고 @foreach 표현식을 사용해서 배열의 내용들을 열거하고 각 항목에 대해 HTML 테이블의 로우(row)를 생성하고 있다. 각각의 표현식들이 C# 의 구문과 어떻게 대응되는지 확인해볼 수 있을 것이다. 그리고 foreach 루프에서 p라는 이름으로 지역 변수를 생성한 다음 @p.Name이 나 @p.Price같은 Razor 표현식을 사용해서 이 변수의 속성들을 참조하는 방법도 살펴볼 수 있다. 

결과적으로 만약 배열이 비어있다면 h2 요소가 생성되고 그렇지 않다면 HTML 테이블에 배열의 항목 한 개당 하나씩의 로우가 만들어지게 된다. 이번 예제의 데이터는 고정적이기 때문에 항상 그림5-13과 같은 동일한 결과를 보게 될 것이다. 





※ 네임 스페이스 지정하기
이전 절의 예제에서는 foreach 루프 내에서 Product 클래스를 참조할 때 다음과 같이 정규화된 이름(Fully Qualified Name)을 사용하고 있다. 

...
@foreach(Razor.Models.Product p in Model)
{
...

그러나 뷰 모델을 비롯해서 그 밖에 다른 클래스들에 대한 다양한 참조를 갖고 있는 복잡한 뷰에서는 이렇게 정규화된 이름을 사용하는 것조차 성가신 작업이 될 수도 있다. 뷰에서도 일반적인 C# 클래스에서처럼 @using 표현식으로 네임스페이스를 뷰의 컨텍스트로 가져와서 뷰를 깔끔하게 정돈할 수 있다. 목록5-20은 DemoArray.cshtml 뷰에 적용된 @using 표현식을 보여준다. 


목록 5-20 @using 표현식을 적용한 DemoArray.cshtml 파일
@using Razor.Models
@model Product[]
@{
    ViewBag.Title = "DemoArray";
    Layout = "~/Views/_BasicLayout.cshtml";
}

@if (Model.Length > 0)
{
    <table>
        <thead><tr><th>Product</th></tr></thead>
        <tbody>
            @foreach(Product p in Model)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Price</td>
                </tr>
            }
        </tbody>
    </table>
}else
{
    <h2>No product data</h2>
}


뷰에는 여러 개의 @using 표현식이 존재할 수 있다. 목록5-20에서는 @using 표현식으로 Razor.Models 네임스페이스를 임포트하고 있으며 그 결과 @model 표현식과 foreach 루프에서 네임스페이스를 지정하지 않고도 클래스를 참조할 수 있게 됐다. 



※ 요약
이번 장에서는 Razor 뷰 엔진의 개요와 Razor를 이용해서 HTML을 생성하는 방법을 살펴봤다. 

뷰 모델 개체나 ViewBag 개체를 통해서 컨트롤러로부터 전달된 데이터를 참조하는 방법과, Razor 표현식을 사용해서 데이터 값들을 기준으로 사용자에게 반환될 응답을 자유롭게 처리하는 방법을 살펴봤다. 이 책의 나머지 부분에서는 Razor가 사용되는 수많은 다른 예제들을 살펴보게 될 것이다. 그리고 20장에서는 MVC의 뷰 메커니즘이 동작하는 방식에 대해서 자세하게 살펴볼 것이다. 다음 장에서는 MVC 프레임워크를 뒷받침해주고 프로젝트에서 최고의 결과를 얻을 수 있게 도와주는 필수적인 개발 및 테스트 도구들에 관해서 살펴본다. 