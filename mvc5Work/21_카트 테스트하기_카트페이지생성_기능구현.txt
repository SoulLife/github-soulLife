※단위 테스트 : 카트 테스트하기
Cart 클래스 자체는 비교적 단순하지만 반드시 올바르게 동작해야만 하는 여러 가지 중요한 기능들을 포함하고 있다. 카트의 기능이 형편없다면 SportsStore 응용프로그램의 전체의 완성도를 훼손시킬 수도 있다. 필자는 카트의 기능들을 세분화시켜서 각각 개별적으로 테스트를 작성했다. SportsStore.UnitTests 프로젝트에 CartTests.cs라는 파일을 추가해서 카트에 대한 새로운 단위 테스트를 별도로 작성해 보자. 

첫번째로 테스트해볼 동작은 카트에 상품을 추가하는 기능에 대한 것이다. 만약 카트에 담는 상품이 처음으로 추가되는 것이라면 새로운 CartLine 개체가 생성되야 한다. 다음은 단위 테스트 클래스의 정의를 포함한 전체 테스트 코드를 보여준다. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SportsStore.Domain.Entities;
namespace SportsStore.UnitTests
{
    [TestClass]
    public class CartTests
    {
        [TestMethod]
        public void Can_Add_New_Lines()
        {
            //Arrage - 테스트할 상품들을 생성한다. 

            Product p1 = new Product { ProductID = 1, Name = "P1" };
            Product p2 = new Product { ProductID = 2, Name = "P2" };

            //Arrange - 새로운 카트를 생성한다
            Cart target = new Cart();

            //Act
            target.AddItem(p1, 1);
            target.AddItem(p2, 1);
            CartLine[] results = target.Lines.ToArray();

            //Assert
            Assert.AreEqual(results.Length, 2);
            Assert.AreEqual(results[0].Product, p1);
            Assert.AreEqual(results[1].Product, p2);
        }
    }
}


그러나 만약 고객이 같은 상품을 이미 추가했다면, 새로운 CartLine 개체을 만드는 대신, 해당 CartLine 개체의 수량만 증가시켜야 한다. 다음은 이 동작에 대한 테스트 내용이다. 

[TestMethod]
        public void Can_Add_Quantity_For_Existing_Lines()
        {
            //Arrage - 테스트할 상품들을 생성한다. 

            Product p1 = new Product { ProductID = 1, Name = "P1" };
            Product p2 = new Product { ProductID = 2, Name = "P2" };
            //Arrange - 새로운 카트를 생성한다
            Cart target = new Cart();

            //Act
            target.AddItem(p1, 1);
            target.AddItem(p2, 1);
            target.AddItem(p1, 10);

            CartLine[] results = target.Lines.OrderBy(c => c.Product.ProductID).ToArray();

            //Assert
            Assert.AreEqual(results.Length, 2);
            Assert.AreEqual(results[0].Quantity, 11);
            Assert.AreEqual(results[1].Quantity, 1);

        }

또한 사용자들이 마음을 바꿔서 카트에서 선택했던 상품들을 제거할 수도 있다는 점도 확인해볼 필요가 있다. 이 기능은 RemoveLine 메서드에 구현되어 있다. 다음은 이 동작에 대한 테스트 내용이다. 

[TestMethod]
        public void Can_Remove_Line()
        {
            //Arrage - 테스트할 상품들을 생성한다. 

            Product p1 = new Product { ProductID = 1, Name = "P1" };
            Product p2 = new Product { ProductID = 2, Name = "P2" };
            Product p3 = new Product { ProductID = 3, Name = "P3" };
            //Arrange - 새로운 카트를 생성한다
            Cart target = new Cart();

            //Arrange - 카트에 상품들을 추가한다. 
            target.AddItem(p1, 1);
            target.AddItem(p2, 3);
            target.AddItem(p3, 5);
            target.AddItem(p2, 1);

            //Act
            target.RemoveLine(p2);

            //Assert
            Assert.AreEqual(target.Lines.Where(c => c.Product == p2).Count(), 0);
            Assert.AreEqual(target.Lines.Count(), 2);
        }

다음으로 테스트해볼 동작은 카트에 담긴 모든 상품들의 합계금액을 계산하는 기능이다. 다음은 이동작에 대한 테스트 내용이다. 

[TestMethod]
        public void Calculate_Cart_Total()
        {
            //Arrage - 테스트할 상품들을 생성한다. 

            Product p1 = new Product { ProductID = 1, Name = "P1" };
            Product p2 = new Product { ProductID = 2, Name = "P2" };
            
            //Arrange - 새로운 카트를 생성한다
            Cart target = new Cart();

            // Act
            target.AddItem(p1, 1);
            target.AddItem(p2, 1);
            target.AddItem(p1, 3);
            decimal result = target.ComputeTotalValue();

            //Assert
            Assert.AreEqual(result, 450M);

        }

마지막으로 수행해볼 테스트는 간단하다. 카트를 초기화시킬 때 카트의 모든 상품들이 올바르게 삭제되는지를 확인하고자 한다. 다음은 이 동작에 대한 테스트 내용이다. 
[TestMethod]
        public void Can_Clear_Contents()
        {
            //Arrage - 테스트할 상품들을 생성한다. 

            Product p1 = new Product { ProductID = 1, Name = "P1" };
            Product p2 = new Product { ProductID = 2, Name = "P2" };

            //Arrange - 새로운 카트를 생성한다
            Cart target = new Cart();

            // Arrange - 카트에 상품들을 추가한다. 
            target.AddItem(p1, 1);
            target.AddItem(p2, 1);

            //Act - 카트를 초기화시킨다. 

            target.Clear();

            //Assert
            Assert.AreEqual(target.Lines.Count(), 0);
        }

가끔은 이번 경우처럼 특정 형식(type)의 기능들을 테스트하는 코드가 형식 그 자체보다 길고 복잡할 때도 있다. 그렇다고 해서 단위 테스트의 작성을 미루지는 말도록 하자. 간단한 클래스들의 작은 결정들이 큰 영향을 미칠수도 있는데, 특별히 Cart 클래스처럼 응용프로그램에서 중요한 역할을 담당하는 클래스들의 결점은 아무리 사소하더라도 파급 효과가 지대하기 마련이다. 




※ [Add to Cart] 버튼 추가하기
이번에는 Views/Shared/ProductSummary.cshtml 뷰 를 편집해서 상품 목록에 버튼들을 추가해볼 차례다. 변경된 내용은 목록8-13에서 확인할 수 있다. 

목록8-13 ProductSummary.cshtml 뷰 파일에 버튼 추가하기
@model SportsStore.Domain.Entities.Product

<div class="well">
    <h3>
        <strong>@Model.Name</strong>
        <span class="pull-right label label-primary">@Model.Price.ToString("c")</span>
    </h3>
    @using (Html.BeginForm("AddToCart", "Cart"))
    {
        <div class="pull-right">
        @Html.HiddenFor(x => x.ProductID)
        @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
        <input type="submit" class="btn btn-success" value="Add to cart" />
        </div>
     }
</div>

목록8-13에서는 상품 목록에서 각각의 상품에 대한 작은 HTML 폼을 생성해주는 Razor 문장을 추가했다. 이 폼이 제출되면 잠시 후에 구현할 Cart 컨트롤러의 AddToCart 액션 메서드가 호출될 것이다. 


Note:
기본적으로 BeginForm 헬퍼 메서드는 HTTP POST 메서드를 사용하는 form 요소를 생성해준다. 물론 원한다면 GET 메서드를 사용하도록 변경할 수도 있지만 그 전에 먼저 조심스럽게 생각을 해봐야 한다. HTTP 명세서에서 GET 요청은 여러 번 호출하더라도 항상 같은 결과를 받을 수 있어야 한다고 명시하고 있다. 결국 이 얘기는 GET 메서드를 사용해서 변경을 유발해서는 안 된다는 의미지만, 상품을 카트에 추가하는 행위는 분명히 변경에 해당하는 동작이라고 볼 수 있다. 이 문제에 관해서는 16장에서 보다 자세하게 논의할텐데, GET 요청에서 이런 요건을 무시하면 어떤 일이 발생할 수 있는지 살펴볼 것이다. 



※ 한 페이지에 여러 개의 HTML 폼 생성하기
지금처럼 목록에서 상품을 열거하면서 각각의 상품에 대해서 Html.BeginForm 헬퍼메서드를 사용한다는 것은 모든 [Add to cart] 버튼이 각각 독립된 HTML form 요소로 렌더된다는 것을 의미한다. 만약 여러분이 지금까지 ASP .NET Web Forms을 사용해서 개발해왔다면 놀라울 수도 있는 일이다. Web Forms에서 뷰 스테이트(view state)나 뷰 스테이트에 의존하는 복잡한 컨트롤들을 사용하려면, 웹 페이지별로 하나의 form 요소만 존재하기 때문이다(ASP .NET Web Forms에서도 일반적인 HTML form 요소는 한 페이지 내에 여러 개가 존재해도 상관 없다. 본문에서 말하고 있는 form 요소는 runat="server" 어트리뷰트가 지정된 서버 측 form 요소를 뜻하는 것이므로 참고하기 바란다.)
반면 ASP .NET MVC는 뷰 스테이트를 사용하지 않으므로 생성할 수 있는 폼의 개수에 제약이 없다. 

물론 form 요소의 개수에 제한이 없는 것처럼 반대로 각각의 버튼들을 개별적인 form 요소에 생성해야만 한다는 요구사항도 없다. 그러나 각각의 폼들이 같은 컨트롤러의 같은 메서드로 제출된다고 하더라도 각 버튼에 의해 서로 다른 매개변수 값들이 제출되므로  버튼 클릭을 처리하기에 간단하고 좋은 방식이다. 



※ Cart 컨트롤러 구현하기
이제 [Add to cart] 버튼을 클릭했을 때 상품을 카트에 담아주기 위한 컨트롤러가 필요하다. SportsStore.WebUI 프로젝트에 CartController라는 새 컨트롤러를 생성하고 목록8-14와 같이 내용을 편집하자. 

목록 8-14 CartController.cs파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
namespace SportsStore.WebUI.Controllers
{
    public class CartController : Controller
    {
        private IProductRepository repository;

        public CartController(IProductRepository repo)
        {
            repository = repo;
        }

        public RedirectToRouteResult AddToCart(int productId, string returnUrl)
        {
            Product product = repository.Products.FirstOrDefault(p => p.ProductID == productId);

            if(product != null)
            {
                GetCart().AddItem(product, 1);
            }
            return RedirectToAction("Index", new { returnUrl });
        }

        public RedirectToRouteResult RemoveFromCart(int productId, string returnUrl)
        {
            Product product = repository.Products.FirstOrDefault(p => p.ProductID == productId);

            if(product != null)
            {
                GetCart().RemoveLine(product);
            }
            return RedirectToAction("Index", new { returnUrl });
        }

        private Cart GetCart()
        {
            Cart cart = (Cart)Session["Cart"];
            if(cart == null)
            {
                cart = new Cart();
                Session["Cart"] = cart;
            }
            return cart;
        }

    }
}

이 컨트롤러에는 몇 가지 주목할 만한 부분들이 존재한다. 첫 번째는 Cart 개체를 저장하고 조회하기 위해서 ASP .NET의 세션 상태(Session State)기능을 사용하고 있다는 점으로 이것이 GetCart 메서드의 용도이기도 하다. ASP .NET은 훌륭한 세션 기능을 제공해주는데, 쿠키나 URL 재작성(Rewriting)을 이용해서 한 사용자로부터 비롯된 여러 번의 요청을 단일 브라우저 세션으로 구성해준다. 이와 관련된 기능인 세션상태 기능은 데이터를 특정 세션과 연결 시켜주는 Cart 클래스에 딱 안성맞춤인 기능이다. 각각의 사용자들은 자신만의 고유한 카트를 갖고 있어야 하고, 이 카트는 여러 번의 요청 간에서도 지속적으로 보존돼야 한다. 세션에 연결된 데이터들은 세션이 만료될 때 같이 삭제되기 때문에(일반적으로 사용자가 한 동안 요청을 하지 않으면 세션이 만료된다.) 개발자의 입장에서는 Cart 개체의 수명주기나 저장소를 관리할 필요가 없어서 편리하다. 세션 상태에 개체를 추가하기 위해서 Session 개체에 Cart 키의 값을 다음과 같이 설정했다. 

...
Session["Cart"] = cart;
...

반대로 개체를 다시 조회하려면 처음에 지정했던 같은 키를 읽기만 하면 된다. 

..
Cart cart = (Cart)Session["Cart"];
...



TIP:
세션 상태 개체는 기본적으로 ASP .NET 서버의 메모리에 저장되지만 다양한 다른 저장소(SQL 데이터베이스 등)를 사용하도록 구성할 수도 있다. 보다 자세한 내용은 필자의 [Pro ASP .NET MVC5 Platform]을 참고하기 바란다. 


그리고 AddToCart 메서드와 RemoveFromCart 메서드의 매개변수들의 이름을 ProductSummary.cshtml 뷰에서 생성한 HTML forms 요소 내의 input 요소들의 이름과 같게 지정하고 있다. 이렇게 하면 MVC 프레임워크가 이 매개변수들과 제출된 요청의 POST 변수들을 이용해서 자동으로 바인딩해주므로 개발자가 직접 폼을 일일이 처리하지 않아도 된다. 




※ 카트 내용 출력하기
이 Cart 컨트롤러에서 마지막으로 주목해야 할 부분은 AddToCart 메서드와 RemoveFromCart 메서드 모두에서 RedirectToAction 메서드를 호출한다는 점이다. 이 메서드를 호출하면 클라이언트 브라우저에 HTTP 재전송(Redirect) 지시를 보내서 브라우저가 새 URL을 요청하도록 만든다. 여기에서는 브라우저에게 Cart 컨트롤러의 Index 액션 메서드를 호출하는 URL을 요청하도록 지시하고 있다. 

이제 Index 메서드를 구현해서 카트의 내용을 출력해보자.  잠시 돌아가서 그림 8-7을 살펴보면 지금 처리하려는 작업이 사용자가 [Add to cart] 버튼을 클릭했을 때 일어나는 업무 흐름이 라는 것을 알 수 있을 것이다. 

카트의 내용을 출력하려면 뷰에 두 가지 정보를 전달해야 하는데, Cart 개체 자체의 사용자가 [Continue Shoppoing] 버튼을 눌렀을 때 이동하게 될 URL이 바로 그것이다. 따라서 SportsStore.WebUI 프로젝트의 Models 폴더에 이 정보들을 담을 CartIndexViewModel.cs라는 새 클래스 파일을 생성한다. 목록8-15는 이 파일의 내용을 보여주고 있다. 

목록8-15 CartIndexViewModel.cs 파일의 내용
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using SportsStore.Domain.Entities;

namespace SportsStore.WebUI.Models
{
    public class CartIndexViewModel
    {
        public Cart Cart { get; set; }

        public string ReturnUrl { get; set; }
    }
}

이제 뷰 모델이 준비됐으므로 목록8-16과 같이 Cart 컨트롤러 클래스의 Index 액션 메서드를 구현할 수 있다. 

목록8-16 CartController.cs 파일의 Index 액션 메서드
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Models;
namespace SportsStore.WebUI.Controllers
{
    public class CartController : Controller
    {
        	private IProductRepository repository;

	        public ViewResult Index(string returnUrl)
        	{
	            return View(new CartIndexViewModel
        	    {
                	Cart = GetCart(),
	                ReturnUrl = returnUrl
        	    });
	        }
		//...  간결한 코드를 위해서 다른 구문들은 생략한다.. 
    }
}

카트의 내용을 출력하기 위한 마지막 단계는 새로운 뷰를 생성하는 것이다. Index 액션 메서드 내부를 마우스 오른쪽 버튼으로 클릭한 다음, 팝업 메뉴에서 [뷰 추가(Add View)]를 선택한다. 그리고 뷰의 이름을 Index로 지정하고 [추가(OK)]버튼을 눌러서 Index.cshtml 뷰 파일을 생성한다. 그리고 뷰 파일의 내용을 목록 8-17과 같이 수정한다. 


목록8-17 Index.cshtml 파일의 내용
@model SportsStore.WebUI.Models.CartIndexViewModel

@{
    ViewBag.Title = "Sports Store: Your Cart";
}

<h2>Your cart</h2>
<table class="table">
    <thead>
        <tr>
            <th>Quantity</th>
            <th>Item</th>
            <th class="text-right">Price</th>
            <th class="text-right">Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var line in Model.Cart.Lines)
            {
            <tr>
                <td class="text-center">@line.Quantity</td>
                <td class="text-left">@line.Product.Name</td>
                <td class="text-right">@line.Product.Price.ToString("c")</td>
                <td class="text-right">
                    @((line.Quantity * line.Product.Price).ToString("c"))
                </td>
            </tr>
            }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-right">Total:</td>
            <td class="text-right">@Model.Cart.ComputeTotalValue().ToString("c")</td>
        </tr>
    </tfoot>
</table>

<div class="text-center">
    <a class="btn btn-primary" href="@Model.ReturnUrl">Continue shopping</a>
</div>


이 뷰는 카트에 담긴 상품들을 열거해서 각 상품별 정보와 소계를 보여주는 행들을 HTML 테이블에 추가하고 카트에 담긴 모든 상품들의 총 합계 금액과 함께 보여준다. 또한 Bootstrap 클래스를 사용해서 테이블을 꾸미고 텍스트 정렬 방식을 지정하고 있다. 드디어 기본적인 기능을 갖고 있는 쇼핑카트가 구현된 셈이다. 먼저 그림 8-8과 같이 상품을 카트에 추가하기 위한 버튼이 상품 옆에 배치됐다. 

그리고 사용자가 이 [Add to cart] 버튼을 클릭하면 해당 상품이 카트에 추가되고 그림8-9와 같이 카트의 요약 정보가 표시된다. 마지막으로 [Continue shopping] 버튼을 클릭하면 이전 상품 페이지로 돌아가게 된다. 


요약:
이번 장에서는 고객이 직접 사용할 하게될 SportsStore 응용프로그램의 주요 기능들에 조금씩 살을 붙이기 시작했다. 사용자가 카테고리별로 탐색할 수 있는 기능과, 상품을 쇼핑 카트에 담을 수 있는 기본 빌딩 블록을 구현함으로써 고객이 필요로 하는 수단을 제공했다. 그러나 아직도 구현해야할 기능들이 많이 남아있으므로 다음 장에서도 계속 응용프로그램을 개발할 것이다. 