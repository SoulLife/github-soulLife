※ 데이터 베이스 확장하기
Visual Studio의 [서버 탐색기(Server Explorer)] 창을 열고 7장에서 만들었던 데이터베이스의 Products 테이블을 찾아서 이동한다. 참고로 [데이터 연결(data connection)]의 이름이 Web.config 파일에 지정한 EFDbContext 로 변경되었을 수도 있다. 또는 Visual Studio는 연결 이름을 변경할 때 간혹 처리하지 못하는 경우도 있기 때문에 데이터 연결을 생성했을 당시의 원래 이름을 그대로 갖고 있을 수도 있다. Products 테이블을 마우스 오른쪽 버튼으로 클릭하고 팝업 메뉴에서 [새 쿼리(New Query)]를 선택한 후 다음 SQL 문장을 텍스트 영역에 입력 한다. 

ALTER TABLE [dbo].[Products]
	ADD [ImageData] 	VARBINARY (MAX) NULL,
		[ImageMimeType] VARCHAR(50) NULL;

그런 다음 서버 탐색기 창의 좌측 상단에 위치한 (화살표로 표현된) [실행(Execute)] 버튼을 클릭하면 Visual Studio가 테이블에 새로운 두 개의 칼럼을 추가하는 것으로 데이터베이스를 업데이트할 것이다. 업데이트 결과를 확인해보려면 서버 탐색기 창에서 Products 테이블을 마우스 오른쪽 버튼으로 클릭한 다음 [테이블 정의 열기(Open Table Definition)] 메뉴를 선택한다. 그러면 그림 12-3과 같이 ImageData와 ImageMimeType이라고 정의된 새로운 칼럼들을 확인할 수 있을 것이다. 


TIP:
만약 새로 추가한 칼럼들이 보이지 않는다면 디자인 창을 닫고 서버 탐색기의 데이터 연결을 마우스 오른쪽 버튼으로 클릭해서 [새로 고침(Refresh)] 메뉴를 선택한다. 그런 다음 [테이블 정의 열기(Open Table Definition)] 메뉴를 다시 선택하면 새로운 칼럼들이 보일 것이다. 




※ 도메인 모델 개선하기
데이터베이스의 새로운 칼럼들을 반영하기 위해서는 목록 12-10과 같이 SportsStore.Domain 프로젝트의 Products 클래스에 새로운 두 개의 필드를 추가해야 한다. 

목록12-10 Product.cs 파일에 속성 추가하기
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using System.Web.Mvc;
namespace SportsStore.Domain.Entities
{
    public class Product
    {
        [HiddenInput(DisplayValue =false)]
        public int ProductID { get; set; }
        [Required(ErrorMessage ="Please enter a product name")]
        public string Name { get; set; }
        [DataType(DataType.MultilineText)]
        [Required(ErrorMessage ="Please enter a description")]
        public string Description { get; set; }
        [Required]
        [Range(0.01, double.MaxValue, ErrorMessage ="Please enter a positive price")]
        public decimal Price { get; set; }
        [Required(ErrorMessage ="Please specify a category")]
        public string Category { get; set; }

        public byte[] ImageData { get; set; } //추가
        public string ImageMimeType { get; set; } //추가

    }
}


주의:
데이터베이스에 추가한 칼럼명과 똑같은 이름으로 Product 클래스에 속성들을 추가해야 한다. 



※ 업로드용 사용자 인터페이스 생성하기
다음 단계는 파일 업로드를 처리하기 위한 기능을 추가하는 것이다. 이 작업은 관리자가 이미지를 업로드하기 위해서 사용할 수 있는 UI를 필요로 한다. 따라서 Views/Admin/Edit.cshtml 뷰를 목록 12-11과 같이 수정하자. 

목록12-11 Edit.cshtml 파일에 이미지 지원 기능 추가하기
@model SportsStore.Domain.Entities.Product

@{
    ViewBag.Title = "Admin: Edit " + @Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1>Edit @Model.Name</h1>
<div class="panel">
    <div class="panel-heading">
        <h3>Edit @Model.Name</h3>
    </div>

    @using (Html.BeginForm("Edit", "Admin",FormMethod.Post, new { enctype = "multipart-form-data" }))
    {
        <div class="panel-body">
            @Html.HiddenFor(m => m.ProductID)
            @foreach(var property in ViewData.ModelMetadata.Properties)
            {
                            switch(property.PropertyName)
                            {
                                case "ProductID":
                                case "ImageData":
                                case "ImageMimeType":
                                    //아무 작업도 하지 않는다. 
                                    break;
                                default:
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>
                        @if(property.PropertyName == "Description")
                    {
                        @Html.TextArea(property.PropertyName, null, new {@class="form-control", rows=5})
                        }else
                        {
                            @Html.TextBox(property.PropertyName, null, new {@class="form-control"})
                        }
            @Html.ValidationMessage(property.PropertyName)
        </div>
                        break;
                }
            }
        <div class="form-group">
            <div style="position:relative;">
                <label>Image</label>
                <a class='btn' href='javascript:;'>
                    Choose File...
                    <input type="file" name="Image" size="40" style="position:absolute;z-index:2;top:0; left:0filter: alpha(opacity=0); opacity:0;
                           background-color:transparent;color:transparent;" onchange='$("#upload-file-info").html($(this).val());' >
                    </a>
                <span class='label label-info' id="upload-file-info"></span>
            </div>
            @if(Model.ImageData == null)
                {
                    <div class="form-control-static">No Image</div>
            }else
                {
                    <img class="img-thumbnail" width="150" height="150" src="@Url.Action("GetImage", "Product", new {Model.ProductID})" />
                }
            </div>
        </div>

        <div class="panel-footer">
            <input type="submit" value="Save" class="btn btn-primary" />
            @Html.ActionLink("Cancel and return to List", "Index", null, new {@class="btn btn-default"})
        </div>
    }
</div>


여러분도 이미 알고 있겠지만 웹 브라우저에서 정상적으로 파일을 업로드하려면 HTML form 요소의 enctype 어트리뷰트 값을 multipart/form-data로 설정해야만 한다. 다시 말해서 파일을 업로드하려면 form 요소가 다음과 같이 정의되어야 한다. 

...
<form action="/Admin/Edit" enctype="multipart/form-data" method="post">
...

만약 form 요소에 enctype 어트리뷰트가 지정되어 있지 않다면 브라우저는 파일의 내용은 생략하고 파일명만 전송하게 되는데 이는 전혀 쓸모 없는 결과가 될 뿐이다. enctype 어트리뷰트를 지정하려면 다음과 같이 Html.BeginForm 헬퍼 메서드의 오버로드 중 하나를 사용해야만 한다. 

...
@using (Html.BeginForm("Edit" , "Admin", FormMethod.Post, new { enctype = "multipart/form-data"})) {
...

이 뷰에는 두 가지 또 다른 변경사항들이 존재한다. 첫 번째 변경사항은 input 요소들을 생성하기 위해서 사용했던 Razor 의 if 구문을 switch 구문으로 대체한 것이다. 그 효과는 동일하지만 이렇게 변경함으로 인해서 건너뛰고자 하는 모델의 속성들을 보다 간결하게 지정할 수 있게 되었다. 필자는 이미지 관련 속성들을 사용자에게 직접 노출하는 것을 원하지 않는다. 

그 대신에 이를 보완하기 위해 마지막으로 변경한 내용은 파일을 업로드하기 위해 type 어트리뷰트가 file로 설정된 input 요소와 데이터베이스에 상품과 관련된 이미지가 저장되어 있는 경우에 이미지를 보여줄 img 요소를 함께 추가했다. 

또한 끔찍하게 복잡한 인라인 CSS와 JavaScript 를 이용해서 파일 input 요소들을 제대로 스타일링하지 못하는 Bootstrap 라이브러리의 결정을 보완하고 있다. Bootstrap 의 부족한 기능들을 보완할 수 있는 다양한 확장들도 존재하지만 이번 예제에서는 목록에서 볼 수 있는 것처럼 마법의 주문과도 같은 방식을 사용하고 있는데, 이는 독립적이고 믿을만하기 때문이다. 그렇다고 해서 MVC 프레임워크가 동작하는 방식이 변경되는 것은 아니다. 단지 Edit.cshtml 파일의 HTML 요소들이 꾸며지는 방식이 변경될 뿐이다. 



※ 데이터베이스에 이미지 저장하기
이제 Admin 컨트롤러에 정의되어 있는 Edit 메서드의 POST 버전을 개선해서 업로드된 이미지 데이터를 얻은 다음 이를 데이터베이스에 저장하도록 구성해야 한다. 목록12-12는 이와 관련된 변경사항을 보여준다 

목록12-12 AdminController.cs 파일에서 이미지 데이터 처리하기
[HttpPost]
        public ActionResult Edit(Product product,HttpPostedFileBase image = null)
        {
            if(ModelState.IsValid)
            {
                if(image != null)
                {
                    product.ImageMimeType = image.ContentType;
                    product.ImageData = new byte[image.ContentLength];
                    image.InputStream.Read(product.ImageData, 0, image.ContentLength);
                }
                repository.SaveProduct(product);
                TempData["message"] = string.Format("{0} has been saved", product.Name);
                return RedirectToAction("Index");
            }else
            {
                //데이터 값들중에 뭔가 문제가 존재하는 경우다
                return View(product);
            }
        }

목록12-12에서는 Edit 메서드에 새 매개변수를 추가했는데, MVC 프레임워크가 업로드 된 파일의 데이터를 액션 메서드에 전달하기 위한 매개변수다. 먼저 매개변수가null인지 여부를 확인한 다음 만약 null이 아니라면 데이터베이스에 저장하기 위해서 매개변수의 데이터와 MIME 형식을 Product 개체에 복사한다. 또한 SportsStore.Domain 프로젝트의 EFProductRepository 클래스도 수정해서 ImageData 속성과 ImageMimeType 속성에 할당된 값들이 데이터베이스에 저장되도록 변경해야 한다. 목록12-13은 SaveProduct 메서드에서 변경해야 할 내용들을 보여주고 있다. 

목록12-13 EFPrdouctRepository.cs 파일에서 이미지 값들이 데이터베이스에 저장되도록 수정하기
public void SaveProduct(Product product)
        {
            if(product.ProductID == 0)
            {
                context.Products.Add(product);
            }
            else
            {
                Product dbEntry = context.Products.Find(product.ProductID);
                if(dbEntry != null)
                {
                    dbEntry.Name = product.Name;
                    dbEntry.Description = product.Description;
                    dbEntry.Price = product.Price;
                    dbEntry.Category = product.Category;
                    dbEntry.ImageData = product.ImageData;
                    dbEntry.ImageMimeType = product.ImageMimeType;
                }
            }
            context.SaveChanges();
        }



※ GetImage 액션 메서드 구현하기
목록 12-11에서는 Product 컨트롤러의 GetImage 액션 메서드를 통해서 이미지의 내용을 얻는 img 요소를 추가했었다. 이번에는 이 액션 메서드를 구현해서 데이터베이스에 저장되어 있는 이미지를 출력하도록 구현해볼 것이다. 목록12-14는 이 액션 메서드의 정의를 보여준다. 

목록12-14 ProductController.cs 파일에 정의된 GetImage 액션 메서드
public FileContentResult GetImage(int productId)
        {
            Product prod = repository.Products.FirstOrDefault(p => p.ProductID == productId);
            if(prod != null)
            {
                return File(prod.ImageData, prod.ImageMimeType);
            }else
            {
                return null;
            }
        }

이 메서드는 매개변수로 지정된 ID에 해당하는 상품을 찾으려고 시도한다. 그리고 FileContentResult 클래스는 클라이언트 브라우저에 파일을 반환하고 싶을 때 액션 메서드의 결과 형식으로 사용되며, 그 인스턴스는 기본 컨트롤러 클래스의 File 메서드를 통해서 생성된다. 17장에서는 액션 메서드의 결과로 반환할수 있는 그밖의 다양한 형식들에 대해서 논의할 것이다 


※ 단위 테스트 : 이미지 조회하기
이 GetImage 액션 메서드가 리파지토리에서 올바른 MIME 형식을 반환하는지, 그리고 존재하지 않는 상품 ID를 요청한 경우 데이터를 반환하지 않는지도 테스트하고자 한다. 다음은 ImageTests.cs 라는 새로운 단위 테스트 파일을 추가하여 정의한 테스트 메서드들이다. 
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Moq;
using SportsStore.Domain.Abstract;
using SportsStore.Domain.Entities;
using SportsStore.WebUI.Controllers;
using System.Linq;
using System.Web.Mvc;
namespace SportsStore.UnitTests
{
    [TestClass]
    public class ImageTests
    {
        
        [TestMethod]
        public void Can_Retrieve_Image_Data()
        {            
                //Arrange - 이미지 데이터와 함께 Product 개체를 생성한다. 
                Product prod = new Product
                {
                    ProductID = 2,
                    Name = "Test",
                    ImageData = new byte[] { },
                    ImageMimeType = "image/png"
                };

                //Arrange - Mock 리파지토리를 생성한다
                Mock<IProductRepository> mock = new Mock<IProductRepository>();
                mock.Setup(m => m.Products).Returns(new Product[]
                {
                    new Product{ProductID=1, Name="P1"},prod, new Product{ProductID=3, Name="P3"}
                }.AsQueryable());
                //Arrange - 컨트롤러를 생성한다
                ProductController target = new ProductController(mock.Object);

                //Act - GetImage 액션 메서드를 호출한다
                ActionResult result = target.GetImage(2);

                //Assert
                Assert.IsNotNull(result);
                Assert.IsInstanceOfType(result, typeof(FileResult));
                Assert.AreEqual(prod.ImageMimeType, ((FileResult)result).ContentType);
            
        }

        [TestMethod]
        public void Cannot_Retrieve_Image_Data_For_Invalid_ID()
        {
            //Arrange - Mock 리파지토리를 생성한다
            Mock<IProductRepository> mock = new Mock<IProductRepository>();
            mock.Setup(m => m.Products).Returns(new Product[]
            {
                new Product{ProductID=1, Name="P1"},new Product{ProductID=2, Name="P2"}
            }.AsQueryable());

            //Arrange - 컨트롤러를 생성한다
            ProductController target = new ProductController(mock.Object);

            //Act - GetImage 액션메서드를 호출한다
            ActionResult result = target.GetImage(100);

            //Assert
            Assert.IsNull(result);
        }

    }
}


먼저 유효한 상품 ID를 요청한 경우에 액션 메서드에서 FileResult 형식을 반환하는지, 그리고 그 콘텐트 형식이 Mock 데이터의 형식과 일치하는지를 확인한다. 다만 FileResult 클래스는 파일의 이진 콘텐트에 대한 접근을 허용하지 않기 때문에 완벽한 테스트는 불가능하며, 이 정도 수준에서 만족해야만 한다. 반대로 유효하지 않은 상품 ID를 요청한 경우 그 결과가 null인지를 확인한다. 


이제 관리자는 상품 이미지를 업로드할 수 있다. 응용프로그램을 실행하고 /Admin/Index URL로 이동한 다음 상품들 중 하나를 직접 편집해서 업로드 기능을 테스트해볼 수 있다. 그림 12-4는 그 사례를 보여주고 있다. 



※ 상품 이미지 출력하기
마지막으로 남은 작업은 상품 카탈로그에서 상품 설명 옆에 저장된 이미지를 보여주는 것이다. 이 변경 사항을 반영하기 위해서 목록12-15에서 굵은 글씨로 강조한 것처럼 Views/Shared/ProductSmmary.cshtml 뷰를 수정한다. 

목록12-15 ProductSummary.cshtml 파일에서 이미지 보여주기
@model SportsStore.Domain.Entities.Product

<div class="well">
    @if(Model.ImageData != null)
    {
        <div class="pull-left" style="margin-right: 10px">
            <img class="img-thumbnail" width="75" height="75" src="@Url.Action("GetImage", "Product",new {Model.ProductID})" />
        </div>
    }
    <h3>
        <strong>@Model.Name</strong>
        <span class="pull-right label label-primary">@Model.Price.ToString("c")</span>
    </h3>
    @using (Html.BeginForm("AddToCart", "Cart"))
    {
        <div class="pull-right">
        @Html.HiddenFor(x => x.ProductID)
        @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
        <input type="submit" class="btn btn-success" value="Add to cart" />
        </div>
     }
</div>

이 변경 사항을 적용하고 나면 그림12-5에서 볼 수 있는 것처럼 고객들이 카탈로그를 살펴보면서 상품 설명의 일부로 출력된 이미지도 함께 확인할 수 있다. 



※ 요약
이번 장을 비롯한 이전 장들을 통해 실무에 가까운 전자상거래 응용프로그램을 만들기 위해서 ASP .NET MVC 프레임워크를 사용하는 방법을 직접 살펴봤다. 이 확장된 예제를 통해서 컨트롤러, 액션 메서드, 라우팅, 뷰, 모델 바인딩, 메타데이터, 유효성 검사, 레이아웃, 인증 등 프레임워크의 다양한 핵심 기능들을 알아봤다. 또한 몇 가지 다른 핵심적인 기술들이 MVC와 연계되어 사용되는 방법도 살펴봤는데, Entity Framework Ninject, Moq, Visual Studio 가 제공하는 단위 테스트가 바로 그런 기술들이다. 그 결과로 얻게 된 응용프로그램은 깔끔하면서도 다양한 관심사를 분리하는 컴포넌트 지향적인 아키텍처, 그리고 확장과 유지보수가 쉬운 코드 기반을 갖게 되었다. 다음 장에서는 SportsStore 응용프로그램을 운영 환경(production)에 배포하는 방법을 알아보도록 한다. 