2.2 상수 멤버

상수 멤버는 한 번 초기화되면 더 이상 값을 변경할 수 없는 멤버이다. 늘 같은 값만 가지기는 하지만 클래스에 소속되고 이름을 가진다는 면에서 수치 상수와는 다르다. 123, "string", 3.14같은 진짜 상수들은 상수 멤버와 구분하기 위해 리터럴(Literal)이라고 부르기도 한다. 값이 초기화되는 시점에 따라 두 가지 종류가 있다.



const 상수는 컴파일할때 값이 딱한번 초기화되며 실행 중에는 절대로 변경될 수 없다. 일반 필드 선언문과 동일하되 앞에 const 키워드를 붙이고 = 다음에 초기값을 지정한다. const 키워드는 상수를 선언할 때만 사용되며 C++ 에서처럼 인수의 의미를 한정하는 용도로는 사용되지 않는다. 실행 중 에는 값을 변경할 수 없으므로 선언할 때 반드시 초기값을 지정해야 한다. 값이 없는 상수는 의미가 없으며 초기값 지정을 생략하면 에러로 처리된다.



class Date

{

    public const int DAY = 24

}

Date 클래스는 24라는 값을 가지는 DAY상수 멤버를 정의한다. DAY는 언제까지고 24라는 값만 가진다. 코드에서 하루의 시간을 필요로 한다면 24라는 리터럴 대신 DAY 상수 멤버를 사용하면 된다. 상수 멤버의 액세스 지정은 통상 public이다. 어차피 한번 초기화되면 누구도 이 값을 변경할 수 없으므로 외부에 공개해도 전혀 위험하지 않다. 그러나 public으로 공개된 멤버는 인텔리센스 목록에 나오기 때문에 내부적으로만 사용될 상수라면 private로 숨기는 것이 더 바람직하다. 최종 사용자 입장에서는 쓸 필요가 없는 불필요한 멤버가 목록에 너무 많이 나오면 귀찮아지기만 할 뿐이다.





클래스 외부에서 상수를 참조할 때는 클래스.상수 식으로 읽는다. 클래스 내부에서 읽을 때는 물론 상수 이름만으로 읽을 수 있다. 위 예제의 DAY를 외부에서 참조하려면 Date.DAY로 읽으면 된다.

상수는 static 지정자를 쓰지않더라도 항상 정적 멤버의 성질을가지며 오히려 static을 붙이면 왜 쓸데없는 짓을 하느냐며 에러로 처리해 버린다. 변하지도 않는 고정된 값을 객체별로 따로 가질 필요는 전혀 없으며 그래 봐야 메모리만 낭비될 뿐이다. 그래서 상수를 참조할 떄는 항상 객체가 아닌 클래스 이름으로 소속을 밝힌다.



상수 멤버는 영문으로 된(한글로 이름을 붙이는 것도 가능은 하다) 설명적인 이름을 가지므로 의미를 파악하기가 훨씬 더 쉽다. 24라는 리터럴보다 DAY라는 상수를 쓰면 하루의 시간수라는 것을 분명히 알수 있어 가독성이 훨씬 더 좋아진다. 숫자라는 것은 값만 보이므로 값으로부터 의미를 알기 는 참 어렵다. 예를 들어 1609라는 숫자를 그냥 쓰면 무슨 의미를 가지는 숫자인지 짐작할 수 있는 사람이 많지 않을 것이다. 하지만 MILE이라는 이름을 붙여 주면 1마일을 의미하는 1609미터라는 것을 쉽게 파악할 수 있다.



상수 멤버를 쓰면 소스를 수정하고 관리하기도 쉬워진다. 예를 들어 평가 기간이 30일인 셰어웨어를 만든다고 해보자. 30이라는 숫자를 바로 쓰지않고 Trial같은 상수 멤버를 사용하면 이 멤버만 수정함으로써 평가 기간을 쉽게 늘리거나 줄일 수 있다. 30이라는 숫자를 코드에 직접 사용했다면 일일이 이 숫자를 찾아 모두 수정해야 하므로 번거로워질 뿐만 아니라 일부를 고치지 않아 불일치가 발생할 위험도 있고 전혀 상관없는 엉뚱한 값을 건드릴 가능성도 있다.



상수 멤버는 C언어의 #define 으로 정의하는 매크로 상수와 유사하며 효과도 거의 비슷하다. 다만 매크로 상수는 본질적으로 전역적이지만 상수 멤버는 클래스에소속된다는 점이 다르다. C#에서는 전역 상수를 정의할 수 없는데 만약 상수만 정의하는 클래스를 만들고 싶다면 객체를 생성하지 않는 추상 클래스로 만드는 것이 좋다 .또는 열거형을 상수 멤버대신 사용하는 방법도 종종 사용된다.



const 키워드는 메서드 내의 지역 변수에도 사용할 수 있다. 긴 메서드에서 특정 상수가 계속 반복 된다면 리터럴을 쓰는 것보다 지역 상수를 정의해 쓰는것이 더 좋다. 예를 들어 어떤 수학적 계산을 하는 메서드에서 고정된 비율을 계속 적용해야 한다면 이 비율을 지역 상수로 정의한 후 사용한다. 이 상수는 비록 메서드 내에서 밖에 사용되지 않지만 소스의 가독성을 높이고 필요할 경우 적용 비율을 간편하게 수정할 수도 있다.



void Calculate()

{

        const double RATE = 0.85;

}



상수 멤버의 두 번째 종류는 readonly 키워드로 지정하는 읽기 전용 필드이다. 상수와 읽기 전용은 같은 뜻인 것처럼 보이며 일단 초기화된 후에는 값을 변경할 수 없다는 면에서는 동일하다. 그러나 초기화 시점이 다름으로 인해 여러 가지 차이점이 있으며 사용하는 용도도 확연이 다르다.



1. 상수는 컴파일 시에 초기화되지만 읽기 전용은 실행 시에 생성자에 의해 초기화된다. 생성자에서 읽기 전용 변수에 값을 대입하는데 적어도 생성되는 동안에는 일시적으로 상수가 아니다. 복잡한 게산을 통해 초기화할 수도 있으며 함수를 호출할 수도 있고 다른 함수의 출력용 인수로 전달할 수도있다. 읽기 전용 필드도 = 초기식으로 초기값을 지정할수 있는데 만약 초기식도 없고 생성자에서도 초기화를 하지 않으면 디폴트 값을 가진다. 상수는 초기화되지 않으면 컴파일이 거부되지만 읽기 전용은 그렇지 않다.



2. 상수는 선언문 뒤의 = 초기식으로 초기값을 지정하므로 값 타입만 가능하다. 클래스나 배열 같은 참조 타입은 대입문만으로 초기화할 수 없어 상수로 선언할 수없다. 알다시피 참조 타입은 new 연산자로 생성해야 하는데 연산자는 컴파일중에 실행될 수 없다. 컴파일 중에 힙에서 메모리르 할당한다는 것 자체가 말이 안된다. 단, 예외적으로 문자열은 참조 타입이지만 = 초기식을 사용할 수 있으므로 상수로 선언할 수 있으며 별 실용성은 없지만 다른 참조 타입도 null초기값으로는 선언할 수 있다. 이에 비해 읽기 전용 필드는 실행중에 생성자에서 초기화하므로 참조 타입도 가능하다.



3. 읽기 전용 필드는 생성자에서 초기화되므로 각 객체마다 다른 값으로 초기화할 수 있다. 객체마다 값이 달라질수 있으므로 기본적으로 정적인 성질을 가지지 않으며 개별 객체마다 하나씩 할당된다. 물론 원한다면 static 지정자를 붙여 정적인 읽기 전용 필드를 선언할 수도 있다. 정적 읽기 전용 필드는 정적 생성자에서 딱 한번 초기화된다.



4. const는 지역 변수에도 적용되지만 readonly 는 클래스의 필드에만 적용된다. 메서드는 생성자라는 것이 없으므로 readonly가 초기화될 시점이 없다. 사실 메서드 내의 지역 상수는 const만으로도 충분하다.



const는 한번 결정되면 절대로 값을 바꿀 수 없는 진짜 상수이지만 readonly는 상수이기는 하되 생성자에서 딱 한번 값을 결정할 수 있는 기회가 제공된다는 점이 다르다. const는 공장에서 구워져 나오는 CD-ROM미디어에 비유할 수 있겠고 readonly는 일단은 비어 있되 비록 한번 뿐이지만 원하는 데이터를 마음대로 기록할수 있는 CD-R미디어에 비유할 수 있겠다.



두 종류의 상수는 성질이 다름으로 인해 사용하는 용도도 구분된다. const는 기억의 용이함이나 효율적인 소스 관리를 목적으로 하지만 readonly는 부주의한 변경 방지가 주된 목적이다. 다음 예제는 조폭 클래스를 모형화한 것인데 소스가 조금 길기는 하지만 읽기 전용 필드에 대한 예제로는  적당하다



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {   
        static void Main(string[] args)
        {
            Jopok NalaliPa = new Jopok("송재호",25,500);
            NalaliPa.Intro();

        }
    }

    class Human
    {
        private string Name;
        private int Age;
        public Human(string aName, int aAge) { Name = aName; Age = aAge; }
        public void Intro()
        {
            Console.WriteLine("이름:" + Name);
            Console.WriteLine("나이:" + Age);
        }
    }
    class Jopok
    {
        readonly private Human Dumok;
        private int Jolgae;
        public Jopok(string aName, int aAge, int aJolgae)
        {
            Dumok = new Human(aName, aAge);
            Jolgae = aJolgae;
        }
        public void Intro()
        {
            Console.WriteLine("대빵 신상 명세");
            Dumok.Intro();
            Console.WriteLine("조직원:{0}명", Jolgae);
        }
    }
  
   
}



조폭은 두목과 그를 따르는 졸개들로 구성된다. Jopok 클래스는 두목을 표현하는 Human 객체 Dumok 필드(어쩃든 두목도 인간이니까)와 조직의 규모에 해당하는 졸개의 수를 표현하는 Jolgae필드로 구성되어 있다. 물론 제대로 표현하려면 조직 강령, 주 근거지, 부두목, 행동 대장 등이 더 필요하겠지만 예제일 뿐이므로 대충 하자. 메서드는 생성자와 간략하게 조직을 소개하는 Intro 메서드 정도가 포함되어 있다.



실행 결과       대빵 신상 명세

이름 : 송재호

나이 :25

조직원:500명



조폭의 두목은 조직이 만들어질 때 한번 정해지면 끝까지 변하지 않으므로 Dumok 필드는 readonly로 지정되었으며 생성자에서 초기화된다. 하극상이 발생하지 않는 한 이 조직의 두목은 조직이 해체될 때까지 생성자에서 초기화된대로 계속 유지되는 것이 정상이며 그래서 Dumok 필드가 읽기 전용이다. 두목이 바뀌면 사실상 그 조직은 와해된 것이다. 그렇다고 해서 두목 필드를 const로 선언할 수는 없다. 왜냐하면 const는 값 타입만 가능하며 클래스 같은 객체 타입은 안되기 때문이다. 다음 선언문을 실행 해보면 왜 안되는지 컴파일러가 가르쳐 줄 것이다.



private const Human Dumok = new Human("김상형",25);



const를 쓸 수 없는 또 다른 이유는 한 조직의 두목은 바뀌지 않지만 조직별로 두목은 다를 수도 있기 때문이다. 즉 조폭 클래스의 두목 필드는 정적이어서는 안 되며 조직마다 각각의 다른 두목이 따로 생성될 수 있어야 하는데 const는 무조건 정적이므로 적합하지 않다. 날라리파 두목은 김상형님이지만 다른 파의 두목은 다른 놈일 수도 있다. Main 끝에 다른 조폭을 생성하는 코드를 추가해 보자.



Jopok JebiPa = new Jopok("강제비",45,99);

JebiPa.Intro();



이렇게 되면 제비파의 두목은 강제비가 된다. 물론 제비파도 일종의 조직이므로 한번 정해진 두목을 바꿀 수는 없다. 만약 행동대장 길용이가 강제비를 숙청하고 새 두목이 되었다면 제비파는 길용이파가 된 것이지 더 이상 제비파가 아닌 것이다.







2.3 내부 타입

클래스는 주로 필드, 메서드로 구성되지만 이 외에도 생성자, 파괴자, 상수, 프로퍼티,인덱서 등등 갖가지 종류의 별별 희한한 멤버들이 포함될 수 있다. 객체 지향 환경에서 클래스는 거의 모든 것들을 담는 통의 역할을 한다. 심지어 클래스가 클래스를 포함하는 중첩도 가능하다. 클래스 내부적으로만 사용할 타입이 필요하다면 클래스 안에 클래스 선언문을 작성한다.



이때 다른 클래스에 포함된 클래스를 내부 타입(Nested Type)이라고 한다. 클래스뿐만 아니라 구조체나 열거형도 내부타입으로 포함될 수 있으며 다음에 배울 델리게이트도 일종의 내부 타입이다. 반대 개념은 외부타입(Non Nested Type)이며 네임스페이스나 소스 파일의 바깥에 선언된 것이다. 지금까지의 실습에서 작성한 Human, Time, Socket 클래스 등은 모두 외부타입이라고 할 수 있다. 다음 예제는 클래스의 중첩 예이다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {   
        static void Main(string[] args)
        {

            Time Now = new Time(12, 34, 56);
            Now.OutTime();
        }
    }

    class Time
    {
        private class Int60
        {
            private int Integer;
            public Int60(int avalue) { Value = avalue; }
            public int Value
            {
                get { return Integer; }
                set { if (value >= 0 && value < 60)Integer = value; }
            }
        }
        private int hour;
        private Int60 min, sec;
        public Time(int aHour, int aMin, int aSec)
        {
            hour = aHour;
            min = new Int60(aMin);
            sec = new Int60(aSec);
        }
        public void OutTime()
        {
            Console.WriteLine("{0}시 {1}분 {2}초", hour, min.Value, sec.Value);
        }
    }
   
}



시간을 표현하는 Time 클래스의 min, sec필드는 일단은 정수형이지만 0이상 60미만의 정수만 저장해야 논리적으로 문제가 없다. 이 범위를 지키기 위해 프로퍼티나 액세스 메서드를 따로 정의하는 방법을 쓸수도 있지만 아예 범위가 고정된 타입을 만들어 쓴다면 문제가 발생할 소지가 원천적으로 차단될 것이다. 이 예제의 Int60 클래스는 정수형을 표현하되 가능한 값의 범위가 0~59까지로 제한된다.



Int60의 선언문이 Time 클래스 선언문 안에 포함되어 있으므로 이 클래스를 내부타입 이라고 한다. 물론 이 클래스를 외부에 선언해도 동작에는 아무 상관이없다. 하지만 Time 내부에서만 사용되고 외부에서는 사용할 일이 전혀 없다면 굳이 밖으로 끄집어 낼 필요가 없다. 오히려 필요한 타입을 클래스 내부에 캡슐화하면 기동성이 좋아지는 장점이 있다. 다른 프로젝트에서 Time 클래스가 필요하다면 Time 클래스 선언문만 복사하여 그대로 가져가면 된다. 클래스 내에서만 사용되는 간단한 유틸리티 클래스 정도는 아예 포함시켜 버리는 것이 더 좋다.



내부 타입도 일종의 멤버이므로 모든 액세스 지정자를 붙일 수 있다. 내부 타입을 private로 선언하면 외부에서는 이 타입을 직접 사용할 수 없으며 이렇게 하면 정보 은폐에 의해 안전성이 확보되고 업그레이드 편의성도 보장된다. 클래스 밖에서도 내부 타입을 사용할 수 있도록 하려면 public으로 공개할 수 있는데 이때 외부에서 내부 타입을 참조할 때는 소속 클래스를 밝혀야 한다. Main에서 Int60타입의 객체가 필요하면 다음과 같이 생성할 수 있다.



Time.Int60 A = new Time.Int60(12);



Int60타입은 TIme 클래스에 소속된 내부 타입이므로 Int60이라고 써서는 안되며 TIme.Int60식으로 반드시 소속을 밝혀야 한다. 물론 Main에서 이 타입을 자유롭게 쓰려면 Int60의 액세스 지정자는 public으로 바꿔야한다. 내부 타입에 비해 외부타입의 액세스 지정자는 public과 internal만 사용할 수 있다. 외부 타입은 클래스에 소속되는 것이 아니라 네임스페이스에 소속되므로 protected나 private액세스 지정자가 아무 의미가 없으며 어셈블리 내에서는 무조건 공개되고  어셈블리 외부에 대해서만 숨길수 있다.



다음은 Human클래스에 내부 타입을 정의해보자. 사람의 신상 정보를 표현하는 Human클래스는 이름과 나이 필드를 가지는데 사실 나이값은 Age는 그다지 유용한 정보가 아니다. 나이라는 것은 항상 현재 시점을 기준으로 하므로 년도가 바뀌면 자연스럽게 틀린 정보가 되어 버린다. 내가 올해는 28살이라고 해도 언제까지고 28살은 아니지 않은가? 그래서 신상 정보를 표현할 때는 나이보다는 생년월일을 저장하는 것이 더 일반적이고 실용적이다. 다음 예제는 Human 클래스에 날짜를 표현하는 Date 내부 타입을 선언한다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {   
        static void Main(string[] args)
        {
            Human Kim = new Human("송재호", 1982, 10, 13);
            Kim.Intro();
           
        }
    }

    class Human
    {
        private class Date
        {
            int y, m, d;
            public Date(int ay, int am, int ad)
            {
                y = ay;
                m = am;
                d = ad;
            }
            public void OutDate()
            {
                Console.WriteLine("{0}년 {1}월 {2}일", y, m, d);
            }
        }
        private string Name;
        private Date Birth;
        public Human(string aName, int ay, int am, int ad)
        {
            Name = aName;
            Birth = new Date(ay, am, ad);
        }
        public void Intro()
        {
            Console.WriteLine("이름:" + Name);
            Console.Write("생년월일:");
            Birth.OutDate();
        }
    }
   
}



Human 클래스는 이름을 기억하는 Name과 문자열 필드오 생년 월일을 기억하는 Birth 필드로 구성되어 있으며 Birth는 내부 타입인 Date 타입이다. Date 내부타입에는 별다른 기능을 넣지 않았는데 필요하다면 음양력 변환, 날짜의 유효 범위 검사 등의 기능을 더 넣을수 있다. 내부 타입의 기능이 많아지면 외부 타입이 할 일은 줄어들 것이다.



이 예제의 Human 클래스는 나이를 기억하는 방식보다 더 범용성이 높다. 생년월일을 기억해두었으므로 언제든지 현재 년도로부터 정확한 나이를 계산할 수 있다. 클래스의 중첩 횟수에는 제한이 없다. 여기서 만든 Human 클래스를 Jopok 클래스 내부에 포함시켜 두목의 신상 명세를 표현하는 것도 가능하다.
