03 추상 클래스



3.1 추상 클래스

메서드는 객체의 동작을 정의하며 그러기 위해서는 동작을 구현하는 코드를 가져야 한다. 코드가 없으면 동작을 표현할 수 없으므로 메서드는 본체를 가지고 본체에는 구현 코드가 작성되는 것이 당연하다. 그러나 구현 코드를 가지지 않는 메서드도 있는데 이런 메서드를 추상 메서드라고 한다. 추상 메서드는 abstract 지정자를 붙이는데 인수 목록과 리턴 타입은 가지지만 본체는 가지지 않으며 세미콜론 하나로 끝난다. 다음이 그 예이다.



public abstract int MoMo(int a, double b);



추상 메서드는 본체가 없기 때문에 구체적인 동작을 정의하지 않으며 호출할 수도 없다. 존재할 필요가 없어 보이지만 상속 계층의 상위 클래스에서 파생 클래스를 위해 메서드 시그니처만 정의해 놓고자 할때 추상 메서드가 사용된다. 추상 메서드는 너무 일반적이기 때문에 코드를 정의할 수 없으며 파생 클래스에서 재정의해야만 호출 가능한 메서드가 된다. 파생 클래스에서 반드시 재정의해야 하므로 virtual을 붙이지 않아도 자동으로 가상이다.



추상 클래스는 너무 일반적이어서 인스턴스를 생성할수 없는 클래스이다. 클래스 선언문에 abstract 지정자를 붙이면 이 클래스는 추상 클래스가 된다. 추상 클래스에는 보통 추상 메서드가 포함된다. 물론 비추상 메서드도 가질수 있다. 추상 메서드가 하나라도 선언되어 있는 클래스는 역시 추상이어야 한다. 인스턴스를 만들 수 없는 클래스를 선언하는 이유는 구체적인 동작이 정의되지 않은 객체를 생성할수 없도록 금지함으로써 잠재적으로 발생할 수 있는 버그를 방지하고 클래스 계층을 논리적으로 디자인하는데 큰 도움이 되기 때문이다.



여기서 추상(Abstract)이라는 용어는 말 그대로 너무 애매모호해서 코에 걸면 코걸이, 귀에 걸면 귀걸이, 배꼽에 걸면 배꼽걸이 식으로 해석하기 나름이라는 뜻이다. 상위 클래스는 필요한 메서드를 추상적으로 정의할 뿐이며 구체적으로 어떻게 구현할 것인가는 파생 클래스에게 결정권을 준다. 추상 메서드는 C++의 순수 가상 함수와 개념적으로 동일하며 추상 클래스에 해당하는 C++의 지정자는 따로 없다. 추상 메서드 , 추상 클래스에 대한 이론도 굉장히 추상적이라 글만 읽어서는 이해하기 힘들므로 구체적인 예제를 봐야 감이 올 것 이다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
        static void Main()
        {
            Animal a;
            //a = new Animal();
            a = new Dog(); a.Sound();
            a = new Cow(); a.Sound();
            a = new Cat(); a.Sound();
        }
       
    }

    abstract class Animal
    {
        public abstract void Sound();
    }
    class Dog : Animal
    {
        public override void Sound() { Console.WriteLine("멍멍"); }
    }
    class Cow : Animal
    {
        public override void Sound() { Console.WriteLine("음메"); }
    }
    class Cat : Animal
    {
        public override void Sound() { Console.WriteLine("야옹"); }
    }
}



이 예제의 클래스들은 동물이라는 실세계의 사물들을 표현했다. Animal은 일반적인 동물 클래스인데 모든 동물은 울거나 짖거나 어쨋든 소리를 낼 수 있으므로 Sound라는 메서드를 선언했다. Animal로부터 Dog, Cow, Cat클래스를 파생했으며 각 자식 클래스는 Sound 메서드를 재정의하여 나름대로의 우는 소리를 표현한다. Main에서는 세 동물 객체를 생성한 후 Sound 메서드를 호출했다. 실행해 보면 개나 소나 잘 짖는다.



실행 결과 : 멍멍

음메

야옹



개가 멍멍 짖고 소가 음메 하고 우는 것이 당연하며 그래서 Dog, Cow의 Sound 메서드는 표현하는 동물의 울음소리를 출력한다. 그렇다면 Animal의 Sound메서드는 도대체 어떤 울음소리를 내야 하는 것일까? Animal은 일반적인 동물을 표현하기는 하지만 너무 일반적이어서 아무 것도 할 수 없으며 우는 소리조차 정의할 수 없다. 동물들은 울 수 있지만 동물 그 자체는 우는 방식을 결정할 수 없는 것이다. 그래서 Animal의 Sound 메서드는 본체를 가지지 않는 추상 메서드로 정의되어 있다. 즉 동물은 분명히 울기는 하는데 어떻게 우는지는 ANimal 단계에서 결정할 수 없고 Dog, Cow로 내려가 봐야 아는 것이다.



Animal 클래스는 추상 메서드를 가지고 있으므로 이 클래스도 추상으로 선언해야 한다. 추상적이고 개념적인 동물을 표현할 뿐이지 개나 고양이처럼 실세계에 존재하는 특정한 동물을 표현하는 것이 아니므로 Animal 타입의 인스턴스는 생성할 수 없다. new Animal() 생성문은 에러로 처리되는데 어떻게 우는지 결정되지도 않은 객체를 생성할 수는 없기 떄문이다. 설사 문법적으로 생성 가능하다고 하더라도 이 객체는 만들어봐야 써먹을 데가 전혀 없다.



그렇다면 이 예제에서 ANimal 클래스의 존재 이유는 무엇일까? 인스턴스를 생성할 수 없음에도 불구하고 Animal 클래스는 자연스러운 계층 설계를 위해 꼭 필요하다. ANimal은 동물들을 대표하는 타입으로서 존재 가치를 가진다. 그래서 Animal의 객체는 생성할 수 없지만 Animal 타입의 변수는 선언할 수 있으며 이 변수로 자식 타입의 객체를 가리킬 수 있다. 일반적인 동물 클래스를 먼저 정의하고 이 클래스로부터 구체적인 개, 소, 고양이를 파생시켰기 때문에 다음과 같은 클래스 계층이 만들어진다. 보다시피 얼마나 자연스러운가?



 Animal

▲       ▲        ▲

Dog    Cow    Cat



이런 계층이 형성되면 Animal 타입의 변수 A로 파생 타입들을 가리킬 수 있으며 Animal 타입의 배열 arAnimal로 동물 농장을 표현할 수도 있고 Animal을 인수로 받아들이는 메서드를 정의하는 것도 가능하다. Animal의 Sound 메서드는 가상이고 파생 클래스들이 이 메서드를 재정의함으로써 다형성도 자연스럽게 성립한다. 똑같은 A.Sound()호출문이라도 A가 어떤 객체를 가리키는가에 따라 우는 소리가 달라진다. 만약 Dog, Cow, Cat을 공통의 조상없이 따로 만들었다면 이들 객체들 간의 관계가 정의되지 않으므로 객체 지향의 여러 이점들을 활용할 수 없을 것이다.



추상 클래스의 자식들은 상속받은 추상 메서드를 재정의해야만 비로소 구체 클래스가 된다. 추상 메서드가 존재하는 상태에서는 여전히 추상적이며 모든 동작을 구체적으로 정의해야만 인스턴스를 생성할 수 있다. 만약 자식 클래스가 추상 메서드를 재정의하지 않으면 이 클래스도 아직 추상 클래스이다. 다음 계층을 보자.              



abstract class Animal
    {
        public abstract void Sound();
    }
    abstract class Mammal : Animal
    {
        public void pregnant(int n) { Console.WriteLine(n + "주째 임신중."); }
    }
    class Dog : Mammal
    {
        public override void Sound() { Console.WriteLine("멍멍"); }
    }



동물과 개 사이에 포유류라는 중간 계층을 넣어 보았는데 포유류는 다른 동물과는 달리 임신을 한다는 특징이 있다. 그래서 pregnant라는 메서드를 추가했다. 하지만 우는 동작을 재정의하지 않았으므로 포유류도 아직까지는 추상 클래스이다. 포유류는 특수한 동물 하나를 지칭하는 것이 아니라 동물의 한 분류일 뿐이므로 우는 소리를 정의할 수 없다. 포유류를 상속받은 개는 Sound를 재정의함으로써 비로소 구체 클래스가 된다.



추상 클래스는 실세계의 사물을 표현하기 위해 반드시 필요한 메서드를 타입에 맞게 재정의할것을 강제하는 역할을 한다. 위 예제는 편의상 Sound 메서드만 있지만 좀 더 현실적으로 만든다면 Animal에 Eat, Move, Sleep 같은 추상 메서드가 포함될 것이다. 그래서 개나소나 제대로 된 동물이 되기 위해서는 이 메서드들을 의무적으로 재정의해야 한다. 먹지 않거나 움직이지 못하는 것은 동물이 아니다.







3.2 봉인 클래스

지정자 sealed를 메서드 앞에 붙이면 이 메서드는 봉인되며 더 이상 재정의할 수 없다. 봉인되었다는 것은 기능이 확정되어 이후의 파생 클래스에서는 호출만 할 수 있고 재정의는 할수 없다는 뜻이다. 부모가 virtual 지정자로 가상 선언해 놓은 메서드는 자식 클래스에서 override 지정자를 붙여 재정의할 수 있으며 이 메서드는 계속 가상이므로 이후 파생되는 클래스에서도 자유롭게 재정의할수 있다. 하지만 중간 단계에서 메서드를 봉인해 버리면 이후의 재정의가 금지된다.



sealed 지정자는 중간 단계의 클래스에서만 사용되며 최상위의 부모 클래스에서는 이 키워드를 사용할 필요가 없다. 메서드를 최초 정의하는 클래스에서는 virtual 지정자를 붙이지만 않으면 자식클래스가 이 메서드를 재정의할수 없다. 가상 으로 선언된 메서드만 재정의 대상이며 가상이 아닌 메서드는 암시적으로 봉인된 것이다. 중간 단계의 클래스가 자신이 마지막으로 재정의하고 싶을때만 sealed 지정자를 사용한다. 그래서 sealed 지정자는 항상 override 지정자와 함께 사용된다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
        static void Main()
        {
            Base b = new Base();
            Derived d = new Derived();
            Third t = new Third();
            b.Message();
            d.Message();
            t.Message();
        }
       
    }
    class Base
    {
        public virtual void Message() { Console.WriteLine("Base Message"); }
    }
    class Derived : Base
    {
        public sealed override void Message() { Console.WriteLine("Derived"); }
    }
    class Third : Derived
    {
        public new void Message() { Console.WriteLine("Third Message"); }
    }
}



Base에서 Message를 가상으로 선언했으므로 파생 클래스들은 이 메서드를 상속받아 재정의할수 있다. 그런데 Derived에서 Message를 재정의하면서 sealed 지정자를 붙여 봉인해 버렸으므로 이후의 클래스에서는 이 메서드를 더이상 재정의할 수 없다. Derived에서 파생된 Third 클래스는 Message를 재정의하지 못하고 new 지정자를 붙여 아예 새로 만들어야 한다. 실행 결과는 다음과 같다.



실행 결과 : Base Message

Derived Message

Third Message



Third의 Message 선언문에서 new 지정자를 빼면 부모의 메서드가 숨겨진다고 경고가 발생한다. 그렇다고 override 지정자를 붙이면 봉인된 메서드이므로 재정의할 수 없다는 에러가 발생한다. Third 의 Message 메서드는 Base나 Derived와 이름만 같을 뿐이지 아무런 연관이 없으며 다형성도 성립되지 않는다. Main에 다음 코드를 작성해 보자.



Base b2 = new Third();
            b2.Message();



b2의 정적 타입은 Base이고 동적 타입은 Third인 상태에서 Message를 호출했는데 결과는 어떻게 될까? 실행해보면 엉뚱하게도 Derived의 Message가 호출된다. 왜냐하면 Message가 가상메서드이므로 동적 타입을 따르는데 Third가 가진 가상 Message 메서드는 새로 정의한 것이 아니라 Derived로부터 상속받은 숨겨진 메서드이기 때문이다. 보다시피 봉인된 메서드를 억지로 다시 정의하면 직관적이지 못한 결과가 나오며 그래서 봉인된 메서드는 그대로 상속받아 쓰는 수밖에 없다.



그렇다면 메서드를 왜 봉인시켜 재정의를 금지하는 걸까? 재정의를 할필요가 없을 정도로 완벽하게 작성된 메서드라면 파생 클래스에서 알아서 재정의를 하지 않을 것이므로 굳이 금지할 필요까지는 없을것 같다. 그러나 세상일이 그렇게 단순하지 않아서 사용자들은 항상 엉뚱한 생각을 할수도 있으며 모든 사용자들이 다 똑똑하기만 한 것은 아니다. 재정의 여부를 사용자가 알아서 선택하도록 내버려두면 여러 가지 곤란한 문제가 생길 수도 있다.



1. 우선 안전성의 문제가 있는데 아주 복잡한 메서드는 재정의하는 데도 여러 가지 규칙과 주의 사항이 존재한다. 파생 클래스 작성자가 모든 주의 사항을 다 숙지하고 재정의를 하기 어렵다면 아예 금지시켜 버리는 것이 더 낫다. 제대로 알지도 못하면서 대충 재정의하도록 내버려 두었다가 나중에 다운되는 것보다는 기능상의 제약이 있더라도 안전성을 확보하는 것이 더 합리적인 선택일 수도 있다. 선무당이 사람을 못 잡도록 아예 가둬 버리는 것이다.



2. 봉인이 필요한 또 다른 예는 라이선스를 보호해야할 때이다. 상업적인 이유로 사용자가 클래스를 마음대로 바꾸지 못하도록 하고 싶을 때도 메서드를 봉인한다. 상속과 재정의 기법은 워낙 강력해서 이미 컴파일된 라이브러리도 실력만 있으면 마음대로 수정할 수 있는데 이렇게 되면 제작사에서 라이브러리를 독점적으로 관리하기 어렵다. 막대한 자본을 들여 만든 라이브러리가 요상하게 수정되어 돌아다닌다면 제작사 입장에서 결코 유쾌하지 않을 것이다. 또 가격별로 제품 차별화를 하기도 곤란해진다.



3. 또 보안 관련 클래스들은 그 특성상 함부로 기능을 수정하지 못하도록 막아 놓을 필요도 있다. 봉인이 자물쇠 역할을 하는 것이다. 구체적으로 설명하지 않아도 봉인과 보안과의 관계는 쉽게 상상이 될 것이다. 메서드를 봉인하는 것은 최적화에도 도움을 주는데 봉인된 메서드는 더이상 가상이 아니므로 동적 결합을 할 필요가 없어진다. 컴파일러는 봉인된 메서드에 대해서는 최적화된 호출 코드를 작성함으로써 성능을 높일 수 있다.



이런 여러 가지 이유로 C#은 메서드의 재정의를 문법적으로 금지하는 장치를 제공한다. 필요하다면 개별 메서드가 아닌 클래스 전체를 봉인할 수도 있다. 클래스 선언문에 sealed 지정자를 붙이면 이 클래스는 더이상 파생되지 못한다. 즉 봉인된 클래스는 기반 클래스로 사용할수 없다. 그 자체로 완벽해서  더이상 기능을 추가할 필요가 없거나 상속할 경우 부작용이 많은 클래스는 봉인하는 것이 좋다.

이 클래스의 사용자는 클래스를 쓸 수만 있으며 상속에 의해 수정하지는 못한다.



닷넷 라이브러리에도 봉인된 클래스가 몇 개 있는데 대표적인 예가 문자열을 표현하는 string이 다. 이 클래스는 가변 길이의 문자열을 표현하기 위해 굉장히 정밀한 내부 구조를 가지고 있으며 내부 버퍼를 관리하는 규칙도 꽤나 복잡하다. 이런 클래스를 상속받아 수정하려면 내부 구조를 완벽하게 파악해야 하는데 최종 사용자가 그렇게 하기는 쉽지 않다. 만약 string을 마음대로 뜯어 고치도록 내버려 두면 닷넷 시스템 전체의 안정성이 위협받을 것이며 그래서 더이상 수정하지 못하도록 봉인되어 있다.



봉인과 추상은 완전히 반대되는 성질을 표현한다. 추상은 반드시 상속 또는 재정의해야 한다는 뜻이며 봉인은 거꾸로 상속이나 재정의를 허락하지 않는다는 뜻이다. 그래서 sealed와 abstract 지정자는 동시에 사용할 수 없다. 봉인해 놓고 상속하라는 것은 말도 안되므로 너무 너무 당연한 규칙이다.







3.3 정적 클래스

생성자는 사용자에 의해 호출되는 것이 아니라 컴파일러에 의해 자동으로 호출되므로 액세스 지정자는 통상 public이다. 외부에서 생성자를 호출할수 있어야 객체를 제대로 초기화할수 있다. 그러나 특수한 목적으로 사용되는 생성자는 public이 아닐수도 있다. private로 선언된 생성자는 외부에서는 호출하지 못하며 같은 클래스 내의 다른 생성자에 의해서만 호출될 수 있다. 비슷하게 protected로 선언된 생성자는 파생 클래스에서만 호출할 수 있다.



생성자가 숨겨진 클래스는 외부에서 호출할 수 없으므로 객체를 만들수 없다. 바로 이 특성 때문에 생성자를 숨기는데 객체를 생성할 필요가 전혀 없는 클래스들이 생성자를 숨긴다. 가장 전형적인 예로 정적 메서드만 가진 클래스를 들 수 있는데 정적 메서드는 객체를 만들지 않아도 호출할 수 있으므로 사실 객체가 필요 없다. 그래서 객체 생성을 의도적으로 금지하기 위해 생성자를 private로 선언한다.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FirstCon
{
    class Program
    {
        static void Main()
        {
            //Message m = new Message();
            Message.Warning();
            Message.Error();
            Message.Advice();
        }
       
    }
    class Message
    {
        private Message()
        {

        }
        public static void Warning()
        {
            Console.WriteLine("그렇게 하면 안 좋을 텐데...");
        }
        public static void Error()
        {
            Console.WriteLine("그렇게 하면 안돼지!");
        }
        public static void Advice()
        {
            Console.WriteLine("요렇게 하는게 어떄?");
        }
    }
    //class Message2 : Message{}
}



이 예제의 Message 클래스는 여러 종류의 메시지를 출력하는 정적 메서드만을 가진다. 전역 메서드라는 것이 존재할수 없기 때문에 메서드는 어쨋든 클래스 안에 선언되어야 하며 그래서 비슷한 메서드끼리 묶어서 Message라는 클래스에 정의한 것이다. 이런 클래스는 오로지 메서드를 담는 껍데기에 불과하다. 정적 메서드는 객체 없이 호출가능하므로 객체를 만들 필요가 없으며 오히려 만들어봐야 자원만 낭비될  뿐이다. 그래서 생성자를 private로 숨겨 아예 객체 생성을 금지해 버렸으며 객체가 없어도 메서드는 잘 호출된다.



실행 결과 : 그렇게 하면 안 좋을 텐데...

그렇게 하면 안 돼지!

요렇게 하는게 어때?



생성자가 숨겨져 있으니 외부에서 객체를 만들 방법이 없는 것이다. 예제에 주석 처리된 new Message()의 주석을 풀면 컴파일 중에 에러 처리된다. 생성자를 숨기는 것과 아예 정의하지 않는 것은 효과가 아주 다르다. 아무 생성자도 정의하지 않으면 컴파일러에 의해 공개된 디폴트 생성자가 만들어지므로 객체를 생성할 수 있다. 그래서 객체 생성을 금지하려면 생성자를 생략해서는 안 되며 아무 동작도 하지 않더라도 인수가 없는 생성자를 정의하고 private로 선언해야 한다.



객체를 생성할 수 없다는 면에서는 추상 클래스와 효과가 동일하지만 이둘은 사용 목적이 다르다. 추상 클래스는 워낙 일반적이어서 객체를 생성할 수 없는 것이고 생성자가 숨겨진 클래스는 의도적으로 생성을 금지한 것이다. 추상 클래스는 상속 가능하며 반드시 상속해야 하지만 생성자가 숨겨진 클래스는 상속도 할수 없다. 왜냐하면 파생 클래스에서 기반 클래스의 생성자를 호출하는 것도 금지되기 때문이다.



닷넷 라이브러리의 Console이나 Environment 클래스가 이런 식으로 생성자가 숨겨진 클래스의 좋은 예이다. 이 클래스들은 콘솔 입출력이나 시스템의 환경을 조사하는 정적 메서드로 구성되어 있다. 메서드 만으로 원하는 동작을 다 할수 있으므로 굳이 객체를 생성할 필요가 없으며 생성이 허락되지도 않는다. 지금까지 문자열 출력을 위해 WriteLine 메서드를 부지런히 애용해 왔는데 아마 다음과 같이 써본적이 없을 것이다.



Console con;

con.WriteLine("옛날 옛날 호랑이 담배 필때...");



WriteLine은 정적 메서드이므로 이 메서드를 호출하기 위해 Console 클래스형의 객체를 선언할 필요가 없다. 객체 생성을 금지하기 위해 생성자를 숨기는 것은 아주 고전적인 방법이며 C++에서도 이런 기법을 흔히 사용한다. 그러나 이 방법은 잘 동작하기는 해도 몇 가지 문제가 있다. 위 예제의 Message 클래스는 객체 생성이 금지되어 있지만 어쨋든 클래스인 것은 분명하므로 Message 타입의 변수를 선언할 수 있으며 이 타입을 인수로 받는 메서드도 정의할 수 있다.



Message M;

public static void func(Message M)

{

      ....

}



그러나 이렇게 선언된 변수는 객체를 가리킬 수 없으며 메서드는 호출할 수 없다. 왜냐하면 실인수 M을 만들 방법이 없기 때문이다. 결국 이 메서드는 사실상 호출될수 없으며 아무 의미도 없다고 할 수 있다. 그래서 C#2.0부터는 생성자를 숨기는 꼼수를 쓰는 대신 객체를 생성할 수 없는 정적 클래스라는 개념을 공식적으로 도입했다. 클래스 선언문에 static이라는 지정자를 붙이면 이 클래스는 객체 생성이 완전히 금지된다. 생성자를 선언할 필요도 없고 선언할 수도 없다.

static class Message
    {
        public static void Warning()
        {
            Console.WriteLine("그렇게 하면 안 좋을 텐데...");
        }
        public static void Error()
        {
            Console.WriteLine("그렇게 하면 안돼지!");
        }
        public static void Advice()
        {
            Console.WriteLine("요렇게 하는게 어떄?");
        }
    }



정적 클래스는 특이하게도 봉인과 추상의 성질을 동시에 가진다. 추상이므로 객체를 생성할 수 없으며 봉인되어 있으므로 상속할 수도 없다. 이뿐만 아니라 정적 클래스를 참조하는 변수나 이 타입을 받는 메서드도 모두 에러 처리된다. 정적 클래스는 오로지 정적 멤버만을 가질수 있다. 왜냐하면 객체를 만들 수 없고 클래스로부터 참조되는 것만 존재할수 있기 때문이다.



닷넷 라이브러리에서 정적 클래스의 가장 전형적인 예는 Convert 클래스이다. Convert에는 타입을 강제 변환하는 ToInt32,ToDouble등의 정적 메서드들만 잔뜩 선언되어 있다. 이 메서드들은 변환 대상을 인수로 받고 변환 결과를 리턴할 뿐이며 그 외의 상태나 동작을 가지지는 않는다. 호출할때만 동작하므로 초기화도 필요 없고 정리할 것도 없다. 이런 단순한 메서드들을 한 틀에 묶어 놓기 위한 껍데기가 바로 Convert인 것이다.



그다지 흔한 일은 아니지만 여러 가지 이유로 객체 생성을 금지할 필요는 분명히 있다. 과거의 언어들은 생성자를 숨기는 얄딱구리한 방법을 동원하여 원하는 목적을 달성했으며 이런 기법들이 큰문제 없이 하나의 기술로 정형화되어 두루 사용된다. 꼼수이다 보니 약간의 문제가 있기도 한데 이 문제를 해결하는 또 다른 꼼수들이 존재하여 어쨋거나 실무에서는 자주 사용된다. C#은 이런 기법들을 좀 더 깔끔하게 언어 차원의 문법으로 정식 포함했다는 점에서 수준이 더 높은 것이다.
