STEP1 : 뷰 A를 선택하고 마우스 오른쪽 버튼(또는 <Ctrl> + 마우스 왼쪽 버튼)을 누른 상태에서 뷰 B로 드래그합니다. 조금 전 실습과 동일합니다. 

STEP2 : 제약 조건 팝업 창이 나타나면 [Equal Heights]를 선택합니다. 

이를 통해 양쪽 뷰의 세로 길이까지 동기화되면서 다음과 같은 표시가 추가됩니다. 

이와 같은 방식으로 뷰 A와 C의 세로 길이도 동기화해주어야 합니다. 이 제약 조건은 화면 사이즈가 변경될 때 뷰 A의 세로 길이에 대한 기준을 잡아줍니다.  이 설정을 추가하지 않으면 A는 어느 길이만큼 뷰가 늘어나야 하는지 명확하게 추론할수 없습니다. 하지만 이 설정 덕택에 뷰 A의 세로 길이는 다음의 공식으로 얻을수 있습니다. 

뷰 A의 세로 길이 = (화면의 세로 길이 - 뷰 사이의 간격들)/2

STEP3 : 뷰 A를 선택하고 마우스 오른쪽 버튼(또는 <Ctrl> + 마우스 왼쪽 버튼)을 누른 상태에서 뷰 C로 드래그합니다. 

STEP4 : 제약 조건 팝업 메뉴에서 [Equal Heights]를 선택합니다. 

간혹 드래그 방향에 따라 팝업창에 나타나는 메뉴의 형태가 조금씩 다를수 있습니다. 가령 예를 들어 뷰 A와 C 사이를 대각선 방향으로 드래그할 경우 다음과 같은 메뉴가 나타납니다. 그림 14-51보다 선택할수 있는 항목이 몇 개 더 많죠 

이같은 팝업창 메뉴의 차이는 설정 가능한 전체 제약 조건 중에서 마우스 드래그 방향에 맞는 제약 조건들만 Xcode가 필터링하여 보여주기 때문입니다. 가령 세로 방향으로 드래그했다면 그방향에 맞는 제약 조건들만 표시되고, 가로 방향으로 드래그하면 가로 방향에 맞는 제약 조건들만 표시됩니다. 대각선으로 드래그할 경우에는 가로 방향과 세로 방향의 제약 조건들이 모두 표시되기 때문에 그림 14-52과 같이 많은 항목이 보이는 거고요. 그러니 책에 표시된 것보다 더 많은 항목들이 나열되어 있더라도 우리는 그저 우리에게 필요한 항목만 찾아 선택하면 됩니다. 

이것으로 뷰 A와 C사이의 세로 길이를 동기화하는 제약 조건이 추가되었습니다. 

뷰 B와 C사이의 세로 길이도 동기화해야 하는것이 아닌가 생각하는 분이 있을텐데요. 뷰 A와 B의 높이가 동기화되어 있고 뷰 A와 C의 높이도 동기화되어 있으므로 연역적 추론 방식에 의해 뷰 B와 C의 높이는 동기화됩니다. 따라서 별도로 설정을 추가할 필요는 없습니다. 

자이제 마지막 설정입니다. 뷰 A, B, C의 객체 사이 간격을 제약 조건으로 추가해주겠습니다. 

STEP1 : 뷰 A를 선택하여 뷰 B로 드래그합니다. 

STEP2 : 제약 조건 팝업 메뉴에서 [Horizontal Spacing]을 선택합니다. 

[Horizontal Spacing]제약 조건은 선택된 객체들 사이의 수평 간격을 고정하는 역할을 합니다. 덕분에 A와 B 사이의 간격이 다음 그림처럼 설정됩니다. 

STEP3 : 이어서 뷰 A에서 C로 드래그하여 팝업 메뉴에서 [Vertical Spacing]을 선택합니다. 그러면 뷰 A와 C사이에 수직 방향의 간격이 고정됩니다. 

이로써 세 개의 뷰를 각기기별 화면 크기에 유연하게 대응할수 있게 만들어주는 오토레이아웃 설정이 모두 완료되었습니다. 누락된 설정 없이 레이아웃 처리에 필요한 모든 항목이 추가된 것을 문서 개요창으로 확인할수 있는데, 아래 그림에서처럼 오류 표시는 모두 사라졌을 겁니다. 혹 일부의 경고 표시가 남아있을수 있는데 이것은 우리가 설정한 레이아웃 옵션과 실제 스토리보드상의 객체 위치나 크기 등이 일치하지 않을때 표시됩니다. 필자의 경우에는 다음과 같은 경고창이 남아있군요. 

필자의 Xcode 에 표시된 경고는 제약 조건을 설정한 후에 객체의 크기나 위치를 변경하는 바람에 생긴 문제입니다. 제약 조건을 통해 계산된 위치 및 크기와 ,스토리보드 상의 실제 위치 및 크기가 차이가 있기 때문이죠. 무시하고 넘어가도 큰일이 있는 것은 아니지만, 그래도 경고가 남아 있다는 건 뭔가 안좋은 거니까 이를 해결해봅시다. 




※ 제약 조건 설정창
문서 개요창의 오토 레이아웃 설정 화면에서 경고 표시가 발생한 노란 삼각형을 클릭하면 다음과 같은 몇 가지 항목이 나타납니다. 

설정창의 각 항목은 레이아웃 경고를 어떻게 처리할 것인지 선택할수 있게 도와줍니다. 선택한 항목에 따라 오토 레이아웃 설정이 변경되거나 혹은 스토리보드상의 객체 위치나 크기가 변경될 수도 있습니다. 개별 옵션 항목에 대해 알아봅시다. 

※ Update frames : 레이아웃 제약 조건을 기준으로 스토리보드상의 객체 위치나 크기 등을 수정합니다. 

※ Update constraints : 현재 스토리보드 상의 객체 위치나 크기를 기준으로 레이아웃 제약 조건을 수정합니다. 두 객체의 크기가 다른 상태라면 Equal Widths, Equal Heights 등의 제약 조건은 수정되지 않습니다. 

※ Reset to suggested constraints : 현재 설정된 레이아웃 제약 조건을 모두 제거하고 스토리보드상의 객체 위치를 기준으로 인터페이스 빌더의 판단에 따라 임의로 레이아웃 제약 조건을 설정합니다. 

※ Apply to all views in container : 이옵션에 체크하면 선택한 옵션이 뷰 컨트롤러 내 모든 뷰에 적용됩니다. 그렇지 않으면 대상 뷰에 한하여 적용됩니다. 

필자는 Update frames 를 선택하여 설정된 제약 조건에 맞추어 스토리보드의 객체 위치와 크기를 수정하고자 합니다. 특별한 문제가 없다면 이 옵션을 선택하고 Fix Misplacement 버튼을 클릭함으로써 모든 경고 항목이 정리됩니다. 이를 적용해 봅시다. 경고 항목이 모두 사라지는 것이 확인 되나요?

간혹 옵션을 설정하였음에도 제대로 수정이 이루어지지 않을수 있습니다. 이때는 개별 경고 항목을 이해하고 직접 수정해야 합니다. 위치가 잘못되었다고 한다면 위치를 수정하고, 크기가 다르다고 한다면 크기를 변경해야 합니다. 

자 이제 오토 레이아웃의 개념을 다시 정리해 봅시다. 뷰 컨트롤러에 추가된 세 개의 뷰들은 가로와 세로 크기를 직접 설정하지 않았으므로 디바이스에 따라 크기가 달라집니다. 이때 iOS는 정의된 제약 조건을 통해 고정된 부분의 크기를 계산한 다음 잉여 크기를 뷰와 가로 세로 크기에 적절하게 할당하여 레이아웃을 구성합니다. 일종의 방정식이라고 생각하면 됩니다. 각각의 뷰마다 가로와 세로 길이가 모두 다르다면 미지수는 가로세로 각각 2개이므로 어느 부분에 어느만큼의 길이를 할당해야 할지 판단이 모호해지겠지만 각각의 뷰들은 가로 및 세로 길이가 서로 동기화되어 있으므로 미지수가 하나입니다. 

일차 방정식에서 미지수가 하나일 때에는 명확하게 계산이 가능하므로, iOS는 모호함 없이 정확하게 뷰의 가로와 세로 길이를 처리합니다. 사실 인터페이스 빌더의 문서 개요창에서 본 빨간 오류 마크는 이처럼 미지수가 하나 남을 때까지 추가적인 제약 조건을 계속 요청하는 표시입니다. 더이상 레이아웃에 대한 추가 제약 조건이 필요 없는 상태가 되면 비로소 오류 마크가 제거됩니다. 

시뮬레이터를 통해 직접 레이아웃을 확인해 봅시다. 설정된 제약 조건들을 통해 iOS의 오토레이아웃은 다양한 화면 크기에 유연하게 대응하는 모습을 보여줍니다. 

이와는 달리 객체의 가로세로 크기를 유치한 채로 화면의 변화에 따라 간격을 늘리거나 줄이고 싶을 수도 있습니다. 이때는 간격 대신 가로세로의 크기에 대한 제약 조건을 추가하면 됩니다. 

방법은 어렵지 않습니다. 해당 뷰를 선택한 다음 자기 자신을 벗어나지 않는 범위 내에서 우클릭 드래그하면 다음과 같이 팝업 메뉴가 나타나는데 여기서 Width, Height 또는 Aspect Ratio를 선택합니다. Width, Height는 각각 객체의 가로와 세로 크기를 고정하는 제약 조건이며 Aspect Ratio는 가로나 세로의 길이를 기준으로 나머지 하나의 길이 비율을 일정하게 유지하는 제약 조건입니다. 

지금까지 뷰 A, B, C에 설정한 제약 조건을 정리해보면 다음과 같습니다. 

1. 뷰 A에서 [Leading Space to Safe Area], [Top Space to Safe Area]
2. 뷰 B에서 [Trailing Space to Safe Area], [Top Space to Safe Area]
3. 뷰 C에서 [Leading Space to Safe Area], [Trailing Space to Safe Area], [Bottom Space to Safe Area]
4. 뷰 A에서 B로 드래그하여 [Equal Widths], [Equal Heights]선택
5. 뷰 A에서 C로 드래그하여 [EqualHeights] 선택
6. 뷰 A에서 B로 드래그하여 [Horizontal Spacing]선택
7. 뷰 A에서 C로 드래그하여 [Vertical Spacing]선택

눈치챈 독자들도 있겠지만 이 설정들은 앞서 우리가 오토 레이아웃을 구성하기 전에 정의한 제약 조건과 일치합니다. 즉 오토레이아웃이란 우리가 논리적으로 정의한 레이아웃의 제약 조건을 스토리보드에 구현해주는 것에 지나지 않습니다. 

오토 레이아웃에는 드래그를 통해 간격이나 크기를 고정하는 제약 조건만 있는 것은 아닙니다. 수평 또는 수직 정렬을 가능하게 해주는 기능도 있는데 이기능은 메뉴에 포함되어 있습니다. [Editor] > [Align]메뉴를 열어보면 이에 관련된 정렬 기능을 찾아볼수 있죠. 이기능은 뒤에 서 다시 등장하므로 지금은 자세한 설명을 생략하겠습니다. 