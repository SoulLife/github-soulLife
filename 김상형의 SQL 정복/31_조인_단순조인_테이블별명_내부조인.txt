10장 : 조인



10-1 조인


1. 조인의 정의

정규화는 엔터티별로 테이블을 잘게 쪼개 중복을 방지하고 논리적인 구조를 만든다. 여러 테이블에 흩어져 존재하는 정보를 찾기 위해 두 개 이상의 테이블을 연속적으로 조회하는 경우가 많다. 이럴 때 서브쿼리도 간편하지만 더 일반적인 해결책은 조인이다. 

조인(Join)은 복수 개의 테이블에서 조건에 맞는 데이터를 조회하는 방법이다. 구문이 길고 처리 시간이 오래 걸려 정확성과 효율성을 항상 고려 해야 한다. 관계형 DB 의 핵심 기술이어서 기본 문법은 물론 내부 처리과정까지 심도깊은 연구와 충분한 실습이 필요하다. 

조인문 실습을 위해 다음 두 테이블을 만들자 관계를 맺는 예제 테이블이 몇 개 있고 쇼핑몰 테이블도 실습용으로 괜찮지만 복잡해서 조인 결과를 직관적으로 예측하기 어렵다. 그래서 조인 실습에 딱 어울리는 초간단 테이블을 통해 기본 동작을 연구해 보자. 



CREATE TABLE tCar
(
	car	VARCHAR(30) NOT NULL,	--이름
	capacity	INT NOT NULL,		--배기량
	price	INT NOT NULL,		-- 가격
	maker	VARCHAR(30) NOT NULL	-- 제조사


);

INSERT INTO tCar (car, capacity, price, maker) VALUES ('소나타', 2000, 2500, '현대');
INSERT INTO tCar (car, capacity, price, maker) VALUES ('티볼리', 1600, 2300, '쌍용');
INSERT INTO tCar (car, capacity, price, maker) VALUES ('A8', 3000, 4800, 'Audi');
INSERT INTO tCar (car, capacity, price, maker) VALUES ('SM5', 2000, 2600, '삼성');


CREATE TABLE tMaker
(
	maker	VARCHAR(30) NOT NULL,	-- 회사
	factory	CHAR(10) NOT NULL,	-- 공장
	domestic	CHAR(1) NOT NULL	-- 국산 여부, Y/N
);

INSERT INTO tMaker (maker, factory, demestic) VALUES ('현대', '부산', 'y');
INSERT INTO tMaker (maker, factory, demestic) VALUES ('쌍용', '청주', 'y');
INSERT INTO tMaker (maker, factory, demestic) VALUES ('Audi', '독일', 'n');
INSERT INTO tMaker (maker, factory, demestic) VALUES ('기아', '서울', 'y');


tCar는 차에 대한 정보를 가지며 tMaker 는 자동차 제조사의 정보를 가진다. 샘플이라 필드 수를 최소화했지만 실무에서는 거대하고 복잡할 것이다. 
두 테이블을 연결하는 maker 필드는 외래키이지만 조인문을 종류별로 실습해 보려면 제약에 어긋난 데이터도 필요해 외래키로 지정하지는 않았다. 

회사와 자동차는 1:다의 관계이며 표현하는 엔터티가 달라 테이블을 분리했다. 차를 만든 회사의 공장은 어디에 있는지, 특정 회사가 만든 차는 무엇인지 등을 한 번에 조회할 때 두 테이블의 정보를 조합해서 읽어야 한다. 이럴 때 사용하는 기술이 바로 조인이다. 

조인은 여러 테이블에 존재하는 정보를 한 번에 조사하고 요약 정보를 뽑아낸다. 방법에 따라 단순 조인, 내부 조인, 외부 조인 등으로 분류하며 외부 조인은 왼쪽, 오른족, 완전 등으로 세분화한다. 쉬운 순서대로 하나씩 실습해 보자. 



2. 단순 조인

단순 조인은 두 개 이상의 테이블을 특별한 조건없이 논리곱으로 조합한다. FROM 절에 출력대상 테이블의 목록을 콤마로 구분하여 나열한다. 


SELECT * FROM tCar, tMaker;


ANSI 표준은 단순 조인을 크로스 조인으로 정의하여 공식화해 두었는데 이름만 다를 뿐 같은 조인이다. 콤마 대신 CROSS JOIN이라고 쓰면 된다. 


SELECT * FROM tCar CROSS JOIN tMaker;

tCar의 각 자동차에 대해 tMaker의 각 회사가 반복되며 결과셋의 크기는 두 테이블의 레코드 개수를 곱한 것과 같다. 예제 테이블은 레코드가 각각 4개씩 있어 단순 조인한 결과셋은 16개의 레코드를 가진다. 


tCar의 소나타를 tMaker의 현대, 쌍용, Audi, 기아 등 모든 자동차 회사와 조합하고 마찬가지로 티볼리, A8, SM5도 모든 회사와 조합한다. 차4개, 회사 4개를 곱하니 총 16개의 조합이 나온다. 이를 테이블의 논리곱(Cartesian Product)이라고 하는데 그 자체는 별 실용성이 없다. 

다만 논리곱은 조인의 중간 처리 과정중 하나여서 내부 동작을 개념적으로 유추하는데 도움을 준다. 논리곱에 조건을 지정하면 이 중 원하는 조합만 표시한다. WHERE 조건절에 tCar의 회사명과 tMaker의 회사명이 일치하는 것만 표시하도록 지정해 보자. 


SELECT * FROM tCar , tMaker WHERE tCar.maker = tmaker.maker;


16가지 조합에서 두 테이블의 회사가 같은 차만 나타난다. 논리곱에서 사각형으로 강조한 행이며 가운데 maker 필드가 똑같은 것만 추려낸다. 이 표를 보면 각 자동차를 만든 회사가 어디에 있고 국내 생산인지 아닌지 한눈에 알 수 있다. 

필드 목록에 *라고 적었으니 두 테이블의 모든 필드가 다 출력되며 양쪽에 있는 maker 필드가 두 번 나타나 보기 좋지 않다. 조건절에 maker가 같은 레코드만 출력하라고 했으니 이 둘은 항상 같을 수밖에 없다. 이런 중복을 없애려면 SELECT 의 필드 목록에 원하는 필드명만 적는다. 필드 순서는 마음대로 정할수 있고 별명을 붙일 수도 있다. 


SELECT tCar.car, tCar.price, tMaker.maker, tMaker.factoy FROM tCar, tMaker WHERE tCar.maker = tMaker.maker;


차이름, 가격, 제조사, 공장만 표시하였다. 두 테이블의 값을 조합하면서도 원하는 필드만 선택적으로 표시하여 깔끔하다. 논리곱에서 조건문으로 행을 고르고 필드 목록으로 열을 선택하여 딱 보기 좋은 보고서를 만들었다. 

한쪽 테이블의 정보가 아주 많으면 다 출력할 테이블에 대해서만 *를 써도 된다. 다음 쿼리문은 자동차 테이블의 모든 필드를 다 출력하고 회사 정보는 공장 위치만 출력한다. tCar.*는 tCar 테이블의 모든 필드라는 뜻이다. 


SELECT tCar.*, tMaker.factoy, FROM tCar, tMaker WHERE tCar.maker = tMaker.maker;


양쪽 테이블의 중복 필드를 없애고 원하는 필드만 골라 출력하는 방식을 자연조인이라고 한다. 별도의 문법은 없고 필드 목록을 잘 작성하는 것 외에 특별할 것도 없지만 그냥 자연스럽다는 뜻이다. 



3. 테이블 별명

여러 테이블을 조인할 때는 tCar.car, tMaker.factory 처럼 필드명 앞에 소속 테이블을 붙이는 것이 정석이다. 그러나 일일이 소속을 밝히면 귀찮은 면이 있다. 소속이 분명하다면 테이블 명을 생략해도 상관없다. 

SELECT car, price, tMaker.maker, factory FROM tCar, tMaker WHERE tCar.maker = tMaker.maker;


car 필드와 price필드는 둘다 tCar 테이블 소속임이 확실하며 tCar.을 생략해도 모호하지 않다. 마찬가지로 factory 필드는 tMaker 소속이므로 역시 tMaker.을 붙이지 않아도 된다. 그러나 maker 필드는 소속을 생략해서는 안된다. 다음 쿼리문은 에러이다. 


SELECT car, price, maker, factory FROM tCar, tMaker WHERE tCar.maker = tMaker.maker;


maker 필드는 tCar에도 있고 tMaker에도 있어 그냥 maker 라고 하면 어느 테이블의 필드인지 모호하다. 이 경우는 두 값이 같은 것만 출력하라는 조건이 있어 어떤 테이블에서 읽으나 같지만 조건이 복잡하면 다를 수도 있다. 컴퓨터는 사람과 달라 애매한 것은 처리하지 못하며 에러를 출력한다. 


ORA-00918: 열의 정의가 애매합니다. 
열 이름 'maker'이(가) 불확실합니다. 


필드 이름만 써 놓으면 소속이 명확하지 않다는 뜻이다. 양쪽 테이블에 조건을 각각 지정하거나 여러 테이블을 다중 조인하면 복잡도는 더 증가한다. 필드가 많은 테이블은 컴퓨터도 헷갈리지만 사람이 보기에도 누가 어느 테이블 소속인지 분명히 알아보기 어렵다. 

그래서 조인문은 필드의 소속을 일일이 밝힐것을 권장한다. 그러나 짧지도 않은 테이블명을 매번 입력하기는 번거로울 뿐만 아니라 안그래도 복잡한 쿼리가 더 정신없어 보인다. 이럴 때 쓰는 것이 별명이다. 테이블에 짧은 별명을 붙이고 필드명 앞에는 별명을 쓴다. 


SELECT C.car, C.price, M.maker, M.factory FROM tCar C, tMaker M WHERE C.maker = M.maker;



tCar에 C라는 별명을 붙이고 이후 tCar의 필드는 C.xxx로 칭한다. 마찬가지로 tMaker에 M이라는 별명을 붙여두면 M.factory 식으로 필드를 칭할수 있다. 소속을 밝히는 방법상의 차이일 뿐이어서 결과는 같다. 

	tCar에 C별명	tMaker에 M별명		tCar의 maker필드			tMaker의 maker 필드
FROM	tCar C,		tMaker M		WHERE C.maker		=	M.maker


쿼리문을 짧게 줄이는 것이 목적인 별명을 길게 쓰면 의미가 없다. 테이블의 첫 글자 하나만 대문자로 붙이는 것이 관례이지만 그것도 귀찮다면 아무 알파벳이나 순서대로 붙여도 상관없다. 


SELECT A.car, A.price, B.maker, B.factory FROM tCar A, tMaker B WHERE A.maker = B.maker;


별명은 쿼리문 내에서 지역적으로 사용하는 것이라 실무에서도 A, B, C, D 식으로 임시적인 알파벳을 흔히쓴다. 그러나 테이블 수가 많아지고 조인 구문이 복잡해지면 헷갈리기 마련이다. A, B보다는 C, M이 자동차, 제조사임을 더 잘 표현한다. 


쿼리문 좀 짧아지는게 뭔 대수냐고 하겠지만 조인문이 길어지면 백줄이 넘어가는 경우도 왕왕 있다. 입력의 편의성 뿐만 아니라 가독성과 이후의 관리 효율성도 고려해야 한다. 조인문에서 테이블의 별명은 선택 사항이 아니라 거의 필수적이며 반강제적이라고 생각하는 것이 좋다. 



※ 호환성체크
SQL Server와 MariaDB는 테이블 별명을 지정할 때 tCar AS C 식으로 AS를 넣는 것이 보기 좋다. 그러나 오라클은 테이블의 별명에 AS를 허락하지 않으며 공백 뒤에 바로 붙여야 한다. 그래서 테이블 별명에는 AS를 쓰지 않는 것이 호환성에 유리하다. 







4. 내부 조인
내부 조인(INNER JOIN)은 각 테이블의 필드값을 비교하여 조건에 맞는 레코드만 선택적으로 가져오는 명령이다. FROM 절의 INNER JOIN 양쪽에 조인할 테이블명을 지정하고 ON 다음에 조인조건을 작성한다. 기본 형식은 다음과 같다. 


SELECT 필드 FROM A [INNER] JOIN B ON 조건;


조인의 디폴트가 내부 조인이어서 INNER 키워드는 생략하고 JOIN만 써도 상관없다. 조건문에는 주로 두 테이블의 필드를 비교하는 연산문이 온다. 앞에서 단순 조인으로 만들었던 쿼리를 내부 조인으로 바꿔 보자. 가장 간단한 내부 조인문의 예이다. 


SELECT C.car, C.price, M.maker, M.factory FROM tCar C INNER JOIN tMaker M ON C.maker = M.maker;


FROM 절에서 tCar와 tMaker를 조인하고 ON 절에 두 테이블의 회사명이 같다는 조건을 지정했다. 단순 조인한 결과에서 ON 조건에 맞는 레코드만 나타난다. 


두 테이블에서 maker가 같은 현대, 쌍용, Audi 세 개의 결과셋을 생성한다. 이 결과로부터 소나타는 현대 부산 공장에서 만들고 청주에서는 쌍용이 티볼리를 만든다는 것을 한 번에 알 수 있다. 조인 순서는 아무래도 상관없다. 

SELECT C.car, C.price, M.maker, M.factory FROM tMaker M INNER JOIN tCar C ON M.maker = C.maker;


tCar와 tMaker를 조인하나 tMaker와 tCar를 조인하나 별반 달라질 것은 없다. ON의 조건에 따라 레코드를 선택하고 필드 목록에 따라 해당 필드를 보여줄 뿐이다. 단순 조인과 구문을 비교해 보면 콤마가 INNER JOIN 키워드로 바뀌고 WHERE 조건절이 ON절로 바뀐 것만다르다. 



FROM tCar C, tMaker M WHERE C.maker = M.maker;


FROM tCar C INNER JOIN tMaker M ON C.maker = M.maker;


단순 조인은 조건절을 생략하고 논리곱을 볼 수 있지만 내부 조인은 ON 절이 필수이다. 조건없이 출력한 논리곱은 중간 과정일 뿐 별 실용성은 없다. 그래서 내부 조인은 ON을 생략하면 에러 처리한다. 단순 조인은 표준에서 권장하지 않아 가급적 내부 조인을 쓰는 것이 바람직하다. 


내부 조인은 논리곱에서 ON 절에 부합하는 레코드만 출력한다. DB 엔진은 거대한 논리곱을 생성하지 않고 고도로 최적화된 방법을 사용한다. 그러나 개념적으로 단순 조인을 중간 단계로 생각하면 조인의 동작 방식을 이해하는데 도움이 되며 조인문을 작성할 때도 쉬워진다. 

조인 조건문인 ON 에서 주로 외래키를 비교하기 때문에 양쪽 테이블의 필드명이 같은 경우가 많다. 위 예의 ON M.maker = C.maker 조건절을 보면 제조사와 자동차를 연결하는 외래키가 maker로 이름과 타입이 같다. 이 경우 ON 절 대신 USING(조건필드) 식으로 더 간단히 지정할 수 있다. ON 절을 생략하고 USING(maker)라고 적으면 된다. 


SELECT C.car, C.price, M.maker, M.factory FROM tCar C, tMaker M INNER JOIN USING(maker);


단 이 경우 필드 목록의 조건 필드에는 소속을 밝혀서는 안된다. maker가 같은 레코드를 찾으면 M.maker나 C.maker나 똑같으니 필드명만 적어야 하며 소속을 밝히면 오히려 에러 처리한다. 논리적으로는 타당한 제한이지만 굳이 금지까지 할 필요까지는 없어 보인다. 실제로 MariaDB는 M.maker라고 적어도 상관없다. SQL Server는 USING 문을 아예 지원하지 않는다. 


ON 절에 = 연산자로 필드값을 비교하는 방식을 등가 조인이라고 한다. 반개 개념은 ON 절에 <. >, <>등의 부등 연산자로 필드값의 대소를 비교하는 비등가 조인이다. 비등가 조인이 의미 있으려면 연결 고리인 FK가 수치형이거나 대소 비교가 가능한 값이어야 하는데 이런 경우가 드물어 실무에서 활용하는 예가 많지 않다. 