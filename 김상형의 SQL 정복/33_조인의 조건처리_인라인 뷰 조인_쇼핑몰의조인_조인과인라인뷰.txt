3. 조인의 조건 처리

조인에 의해 생성한 결과셋도 하나의 테이블이며 따라서 WHERE 절로 출력할 조건을 지정할 수 있다. 두 종류의 소나타 중에 2000cc 소나타만 출력해 보자. 먼저 내부 조인의 경우를 보자. 


SELECT * FROM tCar C INNER JOIN tMaker M ON C.maker = M.maker WHERE C.capacity = 2000;


조인문 끝에 capacity가 2000이라는 WHERE 절을 추가하여 배기량이 2000인 차만 출력한다. SM5도 배기량이 2000이지만 회사 정보가 없어 내부 조인 결과에서 제외되었음을 유의하자. 이 명령은 조건절이 ON, WHERE 2개나 있는데 이 둘은 미세하게 다르다. 배기량 조건을 ON 절로 옮겨보자. WHERE를 AND로 바꾸면 된다. 


SELECT * FROM tCar C INNER JOIN tMaker ON C.maker = M.maker AND C.capacity = 2000;


두 명령의 의미는 다르다. 전자는 조인한 후 2000cc만 추려내는 것이고 후자는 조인할 때 2000cc만 대상으로 한다. 그러나 내부 조인은 조건이 일치하는 행만 보여주기 때문에 ON에 있으나 WHERE에 있으나 효과는 같다. 그러나 외부 조인의 경우는 그렇지 않다. 먼저 WHERE 절에 조건을 걸어 보자. 


SELECT * FROM tCar C LEFT OUTER JOIN tMaker M ON C.maker = M.maker WHERE C.capacity = 2000;

WHERE 절에 조건을 지정하면 내부 조인과 큰 차이가 없다. 다만 외부 조인이므로 회사 정보가 없는 SM5도 결과셋에 포함되며 이 차도 배기량 2000cc 조건을 만족하므로 출력 대상이다. 조인한 후 배기량이 2000인 차만 나타난다. 그러나 ON 절에 조건을 지정하면 결과는 완전히 달라진다. WHERE를 AND로 바꿔보자. 

SELECT * FROM tCar C LEFT OUTER JOIN tMaker M ON C.maker = M.maker AND C.capacity = 2000;


이 명령은 조인할 때 제조사가 같은 것 뿐만 아니라 배기량이 2000인지도 점검하여 이 조건에 해당하는 차에 대해 tMaker의 세부 정보를 표시한다. 주 테이블의 나머지 차도 일단은 목록에 나타나며 다만 조인 조건에 부합하지 않아 부테이블의 정보를 NULL로 표시한다. 

ON 조건과 WHERE 조건은 적용 시점이 다르다. ON 조건은 조인 단계에서 부테이블의 정보를 읽을 대상을 선택하고 WHERE 절은 조인한 결과셋에서 출력할 레코드를 선택한다. ON 절의 조건을 먼저 적용하여 결과셋을 생성하고 WHERE 절은 출력하기 전에 적용한다. 

조건에 맞는 행만 조인하라				조건에 맞는 행만 출력하라
ON C.capacity = 2000				WHERE C.capacity = 2000



ON 절의 조건은 2000cc만 조인하라는 뜻이고 WHERE 절의 조건은 2000cc만 보여달라는 뜻이다. ON C.capacity = 2000은 이 조건에 맞는 차만 부테이블의 정보를 읽으라는 뜻이지 2000cc가 아니라고해서 출력 대상에서 제외하라는 뜻이 아니다. 

좀 헷갈리는데 이 섬세한 차이를 잘 이해해야 한다. 둘 다 조건문이지만 적용 시점과 대상이 다르다. 각각 다른 조건이라면 ON 절에 조건을 걸고 WHERE 절에도 조건을 또 걸수 있다. 결과셋이 하나의 테이블이므로 ORDER BY도 물론 붙일수 있다. 



SELECT * FROM tCar C LEFT OUTER JOIN tMaker M ON C.maker = M.maker AND C.capacity = 2000 WHERE C.price > 2800 ORDER BY price DESC;


배기량 2000cc인 차만 조인한 후 가격이 2800만원 초과인 차만 출력했다. 조인을 먼저 수행한 후 WHERE 절에서 결과를 걸러낸다. JOIN ON 문까지 하나의 테이블로 보고 WHERE는 조인 결과에 대해 조건을 추가하는 것이다. 소나타 2000cc는 제외하고 티볼리, SM5도 출력 대상에서 빠진다. 





4. 인라인 뷰 조인

지금까지는 tCar, tMaker 테이블 전체에 대해 조인을 걸었는데 일부 레코드만 추려낸 후 조인을 걸 수도 있다. 예를 들어 차중에 2000cc 초과만 대상으로 조인을 건다면 tCar 테이블에 조건을 걸어야 한다. 테이블의 일부만 추려낼 때는 WHERE 절을 사용하는데 다음 구문을 보자. 


SELECT * FROM tCar WHERE capacity > 2000 C LEFT JOIN tMaker M ON C.maker = M.maker;



SELECT * FROM tCar WHERE capacity > 2000 까지는 2000cc 초과의 차를 표현하는 쿼리문이며 단독 실행 가능하다. 그러나 WHERE 절이 JOIN 테이블 중간에 끼어드는 것은 허락하지 않는다. JOIN은 테이블끼리 하는 것이며 양쪽이 모두 테이블이어야 한다. 조건까지 포함한 쿼리문을 조인 테이블로 사용하려면 인라인뷰로 정의한다. 



SELECT * FROM (SELECT * FROM tCar WHERE capacity > 2000 ) C LEFT JOIN tMaker M ON C.maker = M.maker;


2000cc 초과의 차를 구하는 쿼리문을 괄호로 감싸 인라인뷰로 정의하고 별명 C를 붙인 후 C와 tMaker를 조인한다. 별명 C를 tCar에 붙이는 것이 아니라 조건까지 다 지정한 인라인뷰에 붙인다는 것을 유의하자. 주 테이블에서 2000cc 이하의 차인 티볼리, SM5, 소나타 2000cc는 제외하고 A8과 소나타 2400cc만 남는다. 


그렇다면 2000cc 초과 조건을 인라인뷰가 아닌 조인문 전체에 대해 걸면 어떻게 될까? 즉 조인 대상은 전체 자동차로 하고 조인 후의 결과셋 중에 2000cc 초과 차만 출력한다. 



SELECT * FROM tCar C LEFT JOIN tMaker M ON C.maker = M.maker WHERE C.capacity > 2000;


의미상으로는 다른 명령이지만 이 경우는 효과가 같다. 그러나 결과가 같다고해서 완전히 같은 것은 아니다. 차가 100만대 정도 있다면 이중 일부를 먼저 추린 후 조인을 거는 것과 100만대를 다 조인한 후 그중 일부를 추리는 것은 작업량에 있어 차이가 있다. 

원론적으로는 먼저 솎아 내는 것이 더 빠르지만 다행히 DBMS의 최적화에 의해 실제로는 차이가 거의 없다. DBMS는 바깥의 WHERE 조건까지 고려하여 최종적으로 제외할 레코드는 조인하지 않을 정도로 충분히 똑똑하다. 

부테이블도 일부 레코드만을 대상으로 할 수 있으며 이때도 인라인뷰로 정의한다. 테이블이 들어갈수 있는 자리이면 인라인뷰도 항상 들어갈 수 있다. 다음 명령은 2000cc 초과의 자동차와 울산에 공장이 있는 제조사를 조인한다. 


SELECT * FROM (SELECT * FROM tCar WHERE capacity > 2000) C LEFT JOIN 
(SELECT * FROM tMaker WHERE factory = '울산') M ON C.maker = M.maker;


울산에 있는 현대만 조인이 걸리므로 소나타 2400cc에 대해서만 회사 정보가 나타난다. A8은 주 테이블의 조건에 부합해 목록에 나타나지만 회사가 울산에 있지 않아 세부 정보는 나타나지 않는다. 부 테이블은 인라인뷰에서 조건을 거는 것과 전체 결과셋에 조건을 거는 것이 결과가 다르다. 


SELECT * FROM (SELECT * FROM tCar WHERE capacity > 2000 ) C LEFT JOIN 
tMaker ON C.maker = M.maker WHERE M.factory = '울산';


이렇게 하면 A8은 아예 최종 결과셋에서 제외된다. 부 테이블의 조건은 세부 정보를 제한하는데 비해 전체 결과셋에 대한 WHERE 조건은 행 자체를 제외한다. A8을 만드는 Audi는 울산에 공장이 없으니 아예 출력 대상이 아니다. 





10-3 조인 실습


1. 쇼핑몰의 조인


조인은 난이도가 높은 기술이어서 깊은 연구와 충분한 실습이 필요하다. 의도적으로 만든 tCar와 tMaker 테이블로 조인의 기본 이론을 살펴봤는데 데이터가 적어 현실감이 떨어진다. 여기서는 쇼핑몰 테이블을 대상으로 조인을 다시 연구해 보자. 

이 절은 이미 학습한 조인문을 예제 테이블을 바꿔 다시 반복 설명 및 정리한다. 예제를 바꾸어 다른 각도에서 바라보면 앞에서 놓쳤던 부분을 더 명확히 파악할 수 있다. 실습이 꼭 필요한 주제이니 이미 이해한 사람도 반복 실습해 보자. tMember와 tOrder에 대해 단순 조인(또는 CROSS JOIN)부터 해 보자. 



SELECT * FROM tMember, tOrder;

회원이 4명이고 주문 목록은 6개이므로 총 결과셋은 24개이다. 다른 회원의 주문을 볼 필요는 없으니 회원명이 같다는 조건을 지정하여 각 회원의 상세 주문 내역만 보자. tMember, tOrder에 공통적으로 존재하는 member필드를 조건으로 사용한다. 



SELECT * FROM tMember M, tOrder O WHERE M.member = O.member;

SELECT * FROM tMember INNER JOIN tOrder O ON M.member = O.member;


단순 조인으로 처리할수도 있고 내부 조인으로 처리할 수도 있다. 단순 조인은 WHERE 절에 조건을 작성하고 내부 조인은 ON 절에 조건을 작성한다. 이후부터는 가급적이면 내부조인을 사용하자. 회원은 4명이지만 이도령은 주문 내역이 없고 방자, 향단의 주문이 각 2개여서 결과셋은 5행이다. 모든 필드를 다 출력해 번잡해 보이는데 꼭 필요한 필드만 추려 보자. 


SELECT M.addr, M.member, O.item, O.num, O.orderDate FROM tMember M INNER JOIN tOrder O ON M.member = O.member;


어디사는 누가 무엇을 몇 개 언제 주문했는지 요약적으로 표시하여 꽤 그럴듯한 보고서를 뽑아낸다. 이런 식으로 다른 테이블에 있는 정보를 조합하는 기술이 바로 조인이다. 위 쿼리문을 왼쪽외부 조인으로 바꿔 보자. 


SELECT M.addr, M.member, O.item, O.num, O.orderDate FROM tMember M LEFT OUTER JOIN tOrder O ON M.member = O.member;


모든것이 같되 키워드 INNER를 LEFT OUTER로 바꾸었다. 주 테이블인 왼쪽의 회원 목록을 모두 출력하고 각 회원에 대해 일치하는 주문 목록이 나타난다. 내부 조인은 조건에 일치하는, 즉 구매를 한 적이 있는 고객의 정보만 출력하는데 비해 외부 조인은 주테이블의 모든 정보를 출력한다. 

구매를 한 적이 없는 즉, 매출에 별 도움이 안되는 불량 고객의 정보도 출력한다. 이 예에서는 서울 사는 이도령이 불량 고객이며 주문 관련 정보는 NULL로 채운다. 장사하다 보면 이런 정보도 필요하다. 이도령에게 메일을 보내고 쿠폰을 잔뜩 안겨주어 주문하도록 살살 꼬드겨야 한다. 다음은 반대의 경우를 생각해 보자. RIGHT OUTER JOIN 으로 변경하면 주문이 주 테이블이 된다. 


SELECT M.addr, M.member, O.item, O.num, O.orderDate FROM tMember M RIGHT OUTER JOIN tOrder O ON M.member = O.member;


주 테이블이 Order로 바뀌었으니 필드 목록의 멤버를 O.member로 변경한다. 가급적 주 테이블의 필드를 출력해야 NULL이 나오지 않는다. 흥부는 주문 테이블에만 있고 고객 테이블에는 없는 비회원이다. 회원 테이블에 없으니 필드 목록에서 O.member를 읽어야 이름을 알 수 있다. 


비회원 주문이란 1회만 구입할 목적으로 회원 가입은 하지 않고 주문만 한 사람인데 장사를 잘하려면 어떡하든 이런 사람을 포섭하여 회원으로 가입시켜야 한다. 그래서 이런 정보도 뽑아볼 가치가 있다. 완전 조인은 양쪽의 모든 레코드가 다 나타난다. 


SELECT M.addr, M.member, O.member, O.item, O.num, O.orderDate FROM tMember M FULL OUTER JOIN tOrder O ON
M.member = O.member;



비 주문 회원, 비회원 주문까지 일괄 조사한다. 비주문 회원의 이름은 M에서 읽고 비회원의 이름은 O에서 읽어야 하므로 두 필드 모두 출력했다. 조건절에 두 테이블의 회원명이 같다고 지정해도 외부 조인은 어느쪽에서 읽는가에 따라 값이 다르다. 그래서 회원명 필드의 소속을 반드시 밝혀야 한다. 

쇼핑몰 테이블에 대해 각종 조인을 모두 적용해 보았다. 각 조인문의 목적을 요약적으로 설명하자면 다음과 같다. 약간씩 의미상의 차이가 있고 그 차이만큼 출력 결과가 달라진다.



※ 내부 조인 : 구매 실적이 있는 회원의 주문 내역을 출력하라. 

※ 왼쪽 외부 조인(고객이 주) : 회원 목록과 주문 목록을 출력하되, 비주문 회원도 표시한다. 

※ 오른쪽 외부 조인(주문이 주) : 주문 목록과 주문회원을 출력하라.비회원 주문도 같이 표시한다. 


쇼핑몰 테이블을 기준으로 이렇게 외워두면 각 조인의 특성을 직관적으로 이해할수 있다. 데이터는 다 비슷비슷해 다른 테이블에도 거의 유사한 방식으로 적용하면 된다. 





2. 조인문 제작 과정

결과를 보고 조인문을 이해하는 것과 그런 조인문을 작성하는 것은 또 다른 문제이다. 완성된 조인문을 이해할수는 있어도 직접 만들어 보면 만만치 않다. 처음부터 완벽한 조인문을 만들기는 쉽지 않으므로 단계를 밟아가며 문제를 하나씩 풀어야 한다. 

쇼핑몰 테이블에서 춘향이가 구입한 물건의 제품과 가격을 구해보자. 가장 간단한 방법은 서브쿼리이다. 주문 테이블에서 춘향이가 구입한 제품명을 조사하고 제품 테이블에서 해당 제품의 가격을 구하면 된다. 


SELECT item, price FROM tItem WHERE item = (SELECT item FROM tOrder WHERE member ='춘향');


춘향이는 청바지를 32000원에 구입했음을 알 수 있다. tOrder와 tItem 두 개의 테이블을 동시에 읽어야 하니 이 경우는 조인문이 더 적합하다. 일단 덮어 놓고 조인부터 해 보자. 


SELECT * FROM tItem I INNER JOIN tOrder O ON O.item = I.item;


tOrder와 tItem을 내부 조인하면 주문 테이블과 제품 테이블에서 제품명이 일치하는 모든 정보를 출력한다. 이 중 우리의 관심은 춘향이의 쇼핑 목록이다. ON절에 조건을 붙이거나 아니면 WHERE 절에 조건을 붙인다. 내부 조인이므로 어디에 조건을 붙이나 마찬가지이다. 

SELECT * FROM tItem I INNER JOIN tOrder O ON O.item = I.item WHERE O.member = '춘향';


SELECT * FROM tItem I INNER JOIN tOrder O ON O.item = I.item AND O.member = '춘향';


춘향이의 쇼핑 내역중에 애초에 알고 싶었던 정보는 제품명과 가격 뿐이다. 필드 목록의 *를 원하는 필드명으로 변경하면 서브쿼리와 똑같은 결과를 출력한다. 


SELECT O.item, I.price FROM tItem I INNER JOIN tOrder O ON O.item = I.item WHERE O.member = '춘향';



결과는 같지만 서브쿼리와 조인은 엄연히 수준이 다른 기술이다. 과연 그런지 춘향이를 향단이로 바꿔 보고 주문 수량도 조사해 보자. 향단이가 어떤 제품을 얼마에 몇개 주문했는지 알수 있다. 


SELECT O.item, I.price, O.num FROM tItem I INNER JOIN tOrder O ON O.item = I.item WHERE O.member ='향단';


조인은 양쪽 테이블의 모든 필드를 자유롭게 사용할 수 있지만 서브쿼리로는 이런 보고서를 출력할 수 없다. 향단이가 주문한 목록이 복수개여서 = 연산자로 비교할 수 없으며 IN 연산자를 사용해야 한다. 주문 수량은 쿼리 대상인 tItem에 있는 정보가 아니어서 직접 읽을수 없다. 다음 쿼리문은 일단 출력 결과가 나오기는 한다. 



SELECT item, price, num FROM tItem WHERE item IN (SELECT item FROM tOrder WHERE member = '향단');


그러나 여기서 num 필드는 주문 수량인 tOrder.num이 아니라 재고 수량인 tItem.num이어서 원하는 값이 아니다. 서브 쿼리는 각자의 테이블을 참조할 수 있지만 외부쿼리의 FROM 절에 있는 테이블의 필드만 출력할 수 있다. 만약 서브쿼리로 꼭 출력하려면 연관 서브쿼리를 동원해야 하며 테이블에 별명도 주어야 한다. 



SELECT item, price, (SELECT num FROM tOrder O WHERE O.item = I.item)
FROM tItem I WHERE item IN(SELECT item FROM tOrder WHERE member = '향단');


가능은 하지만 쿼리가 길어져 번잡스럽고 느리다. 여기에 주문 날짜나 배송 상태까지 추가하려면 쿼리문은 더 장황해지만 2개의 테이블 정도는 서브쿼리로도 어느 정도 속도를 낼수 있지만 그 이상은 정석대로 조인을 쓰는 것이 바람직하다. 





3. 다중 조인 실습

다음은 다중 조인을 실습해보자. 회원 목록과 주문 내역, 그리고 회원이 주문한 상품 정보까지 한 번에 출력할 것이다. 관계형 DB의 구조상 여러 테이블에 정보가 흩어져 있어 조회할 때 조인으로 원하는 정보를 모아야 한다. 주 테이블은 회원이므로 일단 회원 명부를 뽑는다. 


SELECT * FROM tMember;


한 눈 감고 봐도 알 수 있는 너무 쉬운 쿼리문이다. 이 명부 오른쪽에 회원이 주문한 내역을 덧붙여 보자. tOrder 를 조인하여 붙이되 조인 기술이 들어가는 즉시 각 테이블에 별명을 붙이는 것이 좋다. 조인 조건은 회원의 이름과 주문한 회원이 같은 것으로 지정한다. 


SELECT * FROM tMember M INNER JOIN tOrder O ON M.member = O.member;


내부 조인 후 회원 명부가 원래와 약간 다른 모습으로 변형된다. 중복 주문한 회원은 두 번 나타나고 비주문 회원은 사라진다. 이제 이 결과셋에 tItem을 조인하여 제품 정보까지 붙여 보자. 조인 조건은 주문 상품명과 제품의 상품명이 같은 것이다. 세 개의 테이블을 조합한 거대한 테이블이 나타난다. 


SELECT * FROM tMember M INNER JOIN tOrder O ON M.member = O.member INNER JOIN tItem I ON I.item = O.item;


이왕 덧붙이는 김에 배송비를 조사하기 위해 제품의 유형 정보까지 덧붙여 보자. tCategory를 조인하며 조건은 상품의 유형과 같은 유형으로 지정한다. 


SELECT * FROM tMember M INNER JOIN tOrder O ON M.member = O.member INNER JOIN tItem I ON I.item = O.item INNER JOIN tCategory C ON I.category = C.category;


회원 이름이나 제품명 등 PK, FK에 해당하는 필드가 중복되어 있지만 원하는 값은 다 나왔다. 이중 필요한 필드만 추려 필드 목록에 적는다. 각 테이블에 있는 어떤 필드든지 선택할 수 있다. 회원명, 제품, 개수, 날짜, 가격, 배송비까지만 출력해 보자. 


SELECT M.member, O.item, O.num, O.orderDate, I.price, C.delivery FROM tMember M INNER JOIN tOrder O ON M.member = O.member INNER JOIN tItem I ON I.item = O.item INNER JOIN tCategory C ON I.category = C.category;

원하는 모든 정보를 다 포함한 딱 보기좋은 보고서이다. 실제 쇼핑몰이라면 회원도 많고 주문도 엄청나서 수직 목록이 더 길어진다. 이 중 원하는 것만 추려 내려면 또 다른 조건을 더 지정한다. 원본 테이블에 대한 조건인지, 조인에 대한 조건인지 또는 전체 결과셋에 대한 조건인지에 따라 붙이는 곳이 다르다. 각종 조건을 다 붙여 보자. 


SELECT M.member, O.item, O.num, O.orderDate, I.price, C.delivery FROM (SELECT * FROM tMember WHERE age > 19) M
INNER JOIN tOrder O ON M.member = O.member
INNER JOIN tItem I ON I.item = O.item
LEFT OUTER JOIN tCategory C ON I.category = C.category AND C.category != '성인'
WHERE I.price * O.num > 100000 ORDER BY M.member;


앞 쿼리에 비해 여러모로 많이 바뀌었다. 각 조건에 의해 어떤 변화가 발생했는지 보자. 



※ tMember에 조건을 추가하여 미성년자는 제외한다. WHERE 조건을 추가하여 인라인뷰로 정의하고 별명 M을 붙인다. 춘향이가 사라진다. 

※ 유형 테이블을 외부 조인으로 바꾸고 성인 유형은 제외한다. 이는 성인 유형은 보여주지 말라는 뜻이 아니라 조인을 하지 말라는 뜻이다. 즉 성인 유형의 상품은 배송비에 관심이 없다. 

※ 전체 결과셋에 대해 가격이 10만원을 넘는 것만 포함한다. 사과 8만원어치를 구입한 향단이의 주문은 제거한다. 비싼 주문만 보겠다는 뜻이다. 

※ 이름순으로 정렬한다. ORDER BY는 최종 출력 형식에 영향을 끼치므로 언제나 제일 마지막에 와야 한다. 방자가 향단이보다 더 앞에 온다. 


테이블이 충분히 크다면 더 복잡하고 다양한 조건을 걸 수 있다. 여기까지 4중 조인이며 길고 복잡하지만 단계를 따라 작성해 보면 이해 불가할 정도로 난해한 명령은 아니다. 이 쿼리문을 자쥬자재로 작성할 수 있다면 조인에 대해 많은 부분을 이해한 것이다. 




4. 조인과 인라인뷰

서브쿼리와 조인은 상호 대체관계이면서 포함관계이기도 하다. 서브쿼리에 조건을 적용한 인라인뷰를 조인하기도 하고 조인문을 괄호로 감싸면 인라인뷰가 된다. 둘 다 테이블이라는 면에서 공통적이기 때문에 테이블이 올 수 있는 모든 곳에 둘 다 올 수 있다. 다음 쿼리는 앞 항에서 실습한 회원별 주문 목록을 조인문으로 작성한 것이다. 


SELECT M.member, O.item, O.num, I.price FROM tMember M INNER JOIN tOrder O ON M.member = O.member
INNER JOIN tItem I ON I.item = O.item;



이 테이블을 여러번 사용한다면 매번 조인하기 번거롭다. 이럴 때는 전체 쿼리를 괄호로 감싸인라인뷰로 정의하면 조인 결과셋이 하나의 테이블이 된다. 외부쿼리에서 필드의 타입, 순서, 포맷을 마음대로 변경할 수 있고 두 필드를 조합하여 계산식을 만들 수도 있다. 


SELECT member, num * price AS total, item FROM
(
	SELECT M.member, O.item, O.num, I.price FROM tMember M
	INNER JOIN tOrder O ON M.member = O.member
	INNER JOIN tItem I ON I.item = O.item
) A;

조인문을 괄호로 감싸 인라인뷰로 정의했다. 다른 쿼리의 일부가 되므로 세미콜론은 빼야 하며 별명도 필요하다. 외부쿼리에서 A 인라인뷰를 읽괴 원하는대로 조작할 수 있다.


※ 필드 앞에 소속 테이블명이 사라졌다. member나 num은 이제 M이나 O의 필드가 아니라 인라인뷰 A의 필드이다. 대상 테이블이 A 하나밖에 없으니 굳이 A.member라고 칭하지 않는다. 

※ item을 필드 목록의 제일 뒤로 보내 순서를 조정한다. 필드의 순서는 큰 의미 없고 보기좋은 순서대로 나열하면 된다.

※ num과 price를 곱해 총 주문가격인 total 계산 필드를 생성했다. num과 price도 같이 출력할 수 있지만 총가격이 대신하므로 제외했다. 


실행 결과는 다음과 같다. 인라인뷰 A의 모습과는 약간 다른 형태로 변형했다. A를 하나의 테이블로 보면 필드 순서 변경이나 계산식 필드 등은 별 기술도 아니다. 



만약 이 테이블을 또 다른 용도로 계속 사용한다면 마찬가지로 전체 쿼리를 괄호로 묶고 별명 B를 붙이면 된다. 조인문이나 인라인뷰나 내부가 아무리 복잡해도 괄호로 묶고 이름을 주면 그냥 하나의 테이블일 뿐이다. 

과연 그러진 앞에서 작성한 복잡한 결과셋에 대해 또 조인을 걸어 보자. 연결 고리만 있다면 테이블끼리의 조인은 언제나 가능하다. 주문 목록에 주소가 있으니 도시 목록인 tCity와 조인할 수 있다. 다만 내부에 이미 WHERE 조건을 사용했기 때문에 바로 조인할수는없고 인라인뷰로 감싸야 한다. 


SELECT * FROM
(
	SELECT M.member, M.addr, O.item, O.num, O.orderDate, I.price, C.delivery
	FROM (SELECT * FROM tMember WHERE age > 19 ) M
	INNER JOIN tOrder O ON M.member = O.member
	INNER JOIN tItem I ON I.item = O.item
	LEFT OUTER JOIN tCategory C ON I.category = C.category AND C.category != '성인'
	WHERE I.price * O.num  > 100000
) A
LEFT OUTER JOIN tCity T ON TRIM(T.name) = SUBSTR(A.addr, 0, 2);


기존 쿼리문을 괄호로 감싸 인라인뷰로 정의하고 별명 A를 붙인다. 인라인뷰는 아직 출력할 대상이 아니므로 ORDER BY는 제거하고 세미콜론도 제거한다. 이 상태에서 A와 tCity를 외부 조인하여 회원 거주지 도시의 정보를 추가한다. 


조인 방식은 원론적이되 주소 형식이 달라 약간의 조작이 필요하다. 회원의 주소는 "서울시 개포동" 식으로 되어있고 tCity에는 도시명만 있어 앞부분 2문자(한글이므로 4바이트)만 추출하며 이때는 SUBSTR함수를 사용한다. tCity의 name 필드가 CHAR(10) 타입이어서 TRIM 함수로 뒤쪽 공백을 제거해야 회원의 주소지와 비교할수 있다. 

별 실용성은 없지만 방자가 살고 있는 서울에 대한 상세한 정보가 나타난다. 타입간의 내부 구조 차이와 문자열을 추출하는 함수가 달라 마지막 조인문의 ON 조건은 DBMS마다 약간씩 차이가 있다. 이 차이점은 다음 장에서 상세히 연구해 보기로 한다. 


SQL Server : LEFT OUTER JOIN tCity T ON T.name = SUBSTRING(A.addr, 0, 4);
MariaDB : LEFT OUTER JOIN tCity T ON T.name = SUBSTRING(addr, 1, 2);


이상으로 4중 조인과 인라인뷰를 통한 5중 조인까지 해 보고 각종 조건까지 걸어 보았다. 이 과정을 그대로 복원할수 있다면 조인을 정복한 것이다.