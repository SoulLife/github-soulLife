3. DBMS

정보를 영구적으로 저장하려면 하드 디스크나 SSD에 기록해야 한다. 저장 장치는 종류가 다양하고 구조가 복잡해 프로그램이 직접 사용하기 번거롭다. 무슨 파일의 어디쯤을 읽는 명령보다. A 제품의 가격은? B의 월급은? 식의 논리적인 명령이 더 쉽고 분명하다. 

논리적인 명령을 해석하여원하는 정보를 찾아줄 무엇인가가 필요한데 이것이 바로 DBMS 이다. DBMS(DataBase Management System : 데이터베이스 관리 시스템)는 정보의 저장과 관리를 전담하는 특수한 소프트웨어이다. 사람과 하드웨어의 중간에서 요청을 번역하여 데이터의 입출력을 관리한다. 

응용프로그램이 구조체 배열이나 리스트 같은 자료형으로 데이터를 직접 관리할 때는 효율이 떨어질 뿐만 아니라 구조가 특수해 다른 곳에 데이터를 재사용할 수 없었다. 데이터 관리를 DBMS가 전담하면 프로그램과 데이터가 분리되고 종속성이 제거되어 다른 프로그램도 DBMS를 경유하여 데이터를 사용할 수 있다. 

중간 과정이 하나 더 추가되면 약간의 성능 저하가 발생하는 대신 유연성이 극적으로 증가한다. DBMS는 데이터 관리만을 전담하는 소프트웨어 레이어이다. 모든 응용프로그램이 DBMS와만 통신하면 데이터를 다루는 방법이 획일화되어 재사용성이 확보되고 이기종끼리 데이터를 교환할 수 있다. 중간의 DBMS에 의해 응용 프로그램과 데이터가 다:다 양쪽으로 연결된다. 


응용 프로그램
			데이터 요청
모바일 앱	--------------------------->	DBMS		----------------------------------------->	DB 저장 장치
		<---------------------------			<-----------------------------------------
웹 페이지			결과


데이터가 응용 프로그램에게 투명해지는 효과가 있어 물리적인 위치나 구조에 영향을 받지 않는다. 로컬 PC에 있건 바다 건너 미국의 서버에 있건 클라우드에 있건 DBMS와만 통신하면 누구나 일관된 방법으로 읽고 쓸 수 있다. 

기억 장치만 관리하던 초기의 DBMS에 비해 현재는 요구가 더 복잡해져 응용 프로그램이 해야 할 잡스러운 작업까지 대신한다. 효율적인 검색을 위해 인덱스를 관리하고 동시 사용자의 보안 검사와 충돌 방지를 수행하며 자동화된 백업, 복제로 데이터를 보호한다. 효율성, 안정성, 신뢰성까지 다 겸비해야 하니 과연 소프트웨어 기술의 총체라고 할 수 있다. 

DBMS는 게임이나 워드 프로세서같이 사람이 직접 사용하는 소프트웨어는 아니다. 백그라운드에서 데이터 관리를 전담하여 응용 프로그램에게 서비스를 할뿐이며 우리는 전면의 프로그램만 사용한다. 어딘가에 존재하지만 동작 모습이 직접적으로 보이지 않아 막연하고 어려워 보인다. 



4. 역사
인류는 문자를 발명한 이후 지식 축적과 후세 전달을 목적으로 기록을 시작했다. DBMS가 어떤 과정을 거쳐 발전해 왔는지 역사를 간략히 정리해 보자. 


※ 전통적인 방법
가장 고전적인 방법은 종이에 적어 놓는 것이다. 일상 생활에서 늘상 사용하던 외상 장부나 가계부, 주소록이 데이터베이스의 원형이다. 구닥다리 같지만 저렴하고 기동성이 좋아 소규모에는 꽤 효율적이며 요즘도 여전히 애용하는 방법이다. 

기록의 목적은 달성했지만 검색이나 수정은 어려워 활용성이 떨어진다. 영희 엄마가 빌려간 돈이 총 얼마인지 알려면 육안 검색 및 합산해야 하며 나중에는 김씨가 누구인지 당최 기억나지 않을 가능성도 농후하다. 


※ 파일 시스템
컴퓨터가 발명된 이후 파일에 정보를 기록했다. 메모장에 텍스트 형태로 기록하거나 엑셀을 사용한다. 저장량이 방대하고 수정 및 검색도 용이하며 엑셀은 계산 기능까지 갖추고 있어 데이터베이스에 근접한다. 그러나 형식성이 떨어져 6월 38일이나 268억이라고 적을 수도 있어 신뢰성이 없다. 

이상의 두 방법은 정보만 저장할 뿐 관리 능력이 미흡하고 여러 사람이 동시에 사용할수 없어 DBMS의 범주에 포함하지는 않는다. 


※ ISAM

고전적인 방법에 비해 정보를 관리하는 전문화된 기술이 데이터베이스이다. 원시적인 형태의 데이터베이스는 SAM(Sequential Access Method과 ISAM(Indexed SAM)이다. 

SAM은 정보를 파일에 순서대로 쟁여 놓는 방법이며, 순차 검색만 가능하다. 100만건 중에 하나를 찾으려면 100만번 비교하는 단순 무식한 방법이다. 이에 비해 ISAM은 정보의 순서를 기억하는 인덱스가 있어 이분 검색이 가능하다. 영한 사전에서 단어를 찾을 떄처럼 중간 중간을 쿡쿡 찔러보는 알고리즘을 활용하여 수백만 건의 정보도 순식간에 찾을 정도로 성능이 뛰어나다. 

90년대를 풍미했던 dBase나 Access가 바로 ISAM 방식의 데이터베이스다. 소규모에 가볍게 쓰기 적합해 요즘도 종종 사용한다. 현재의 DBMS가 사용하는 인덱스의 원론을 확립했다는 데 큰 의의가 있다. 그러나 무결성 관리나 다중 사용자 지원이 취약해 기업용으로 쓰기에는 한계가 많다. 


※ 계층형, 네트워크형
ISAM 이후에 정보를 수직적인 트리 형태로 저장하는 계층형 데이터베이스가 개발되었다. 디렉터리나 조직 구성도처럼 포함 관계의 데이터를 표현하기 쉽고 트리 구조의 특성상 몇 단계만 거치면 최종값을 신속하게 찾을 수 있다. 평면적인 구조의 ISAM으로는 입체적인 정보를 표현하기 어렵다. 

네트워크형은 여기서 한 단계 더 발전하여 정보끼리 망을 이루는 구조이다. 지리 정보나 사회 관계망 같은 복잡한 데이터에 적합하다. 두 방식은 DBMS 발전 과정의 한 형태일 뿐 복잡도에 비해 실용성이 떨어져 특수한 분야에만 가끔 사용한다. 


※ 관계형
관계형 데이터베이스(Relational Database)는 1969년 Edgar.F.Codd 박사의 논문을 기반으로 탄생했으며 간단히 줄여 RDB라고 부른다. 모든 데이터를 표 형태의 테이블에 저장한다. 테이블은 직관적이며 관련 정보를 구하기 쉽고 제약 조건으로 무결성을 보장한다. 

여러 개의 테이블을 만들고 관계를 정의하면 복잡한 정보를 간결하게 저장할 수 있다. 직원과 부서를 각각의 테이블로 정의하고 부서 필드로 관계를 맺음으로써 소속 부서에 대한 상세한 정보를 표현한다. 더 필요한 정보가 있으면 테이블을 추가한 후 관계만 재구축하면 된다. 

RDB는 성능보다 유연성에 중점을 두어 비즈니스 로직의 변화에 신속히 대처할 수 있다. 현실 세계의 요구는 수시로 변하며 그때마다 시스템을 갈아엎어야 하는데 RDB는 변화에 대처하기쉽다. 수십 년 동안 현장에서 활약하여 고도로 최적화되었으며 막대한 설계 노하우가 축적되어 있다는 것도 큰 장점이다. 

자원소모가 많다는 것은 단점이다. 기능이 워낙 많아 고성능 하드웨어를 요구하며 제 성능을 내려면 모델링부터 튜닝까지 고급인력이 필요하다. 다행히 하드웨어의 발전과 편리한모 델링 툴의 보급으로 요즘은 큰 문제가 되지 않는다. 가장 많이 쓰이는 방식이며 앞으로도 대세를 이룰 전망이다. 


※ 객체지향형
1980년대 말 소프트웨어 위기를 겪으면서 객체지향기법(OOP)이라는 프로그래밍 방법론이 등장하여 혁혁한 성과를 이루었다. OOP를 DBMS에 적용한 것이 객체지향형 DB(OODB)이다. 모든 것을 객체로 저장하여 멀티미디어나 비정형 데이터도 효율적으로 다룰 수 있다. 

미래의 DBMS로 물망에 올랐지만 너무 복잡해 성능상의 열세를 극복하지 못했고 실용적으로 활용할 분야가 드물어 아직 연구 단계이다. 순수한 OODB보다는 관계형을 기본으로 사용자 정의형, 중첩 테이블, 타입 상속등 객체형의 장점을 취한 객체 관계형(ORDB)이 시도되고 있다. 


※ 빅 데이터

RDB는 수십 년간 대세였고 지금도 여전하지만 규칙이 엄격해 대용량 데이터 처리에 많은 비용이 소모된다. 현대의 데이터는 대용량(Volume)인데다 형태도 다양하고(Variety)생성 주기가 빨라(Velocity) RDB로는 수집, 저장, 분석이 어려운 지경에 이르렀다. 그래서 일관성을 약간 희생하더라도 성능과 용량을 극적으로 향상시킨 빅데이터 기법이 대두되었다. 

값싼 컴퓨터를 수평적으로 확장하여 데이터를 분산 저장하는 Hadoop 솔루션, 비정형 데이터를 다루는 NoSQL(Non Only SQL)문법, 데이터마이닝이나 인공지능, 딥러닝을 활용한 분석 등이 빅 데이터를 구성하는 주요 기술이다. 관련 기술과 응용 범위가 넓어 따로 연구해야 할 별도의 과목이다. 빅데이터는 RDB에 대한 반발로 나온 기술이다 보니 RDB를 먼저 익혀야 제대로 연구할 수 있다. 