1-3 DB의 구조

1. 테이블
다음 장부터 DBMS를 설치하여 실습을 진행하기 전에 여기서는 데이터베이스의 구조와 용어를 익혀보자. 이론적인 얘기라 조금 따분하지만 전문 용어에 거부감이 없어야 개념 이해가 쉽고 실습 진행이 빠르다. 

현실 세계의 정보는 상상을 초월할 정도로 구조가 복잡하다. 정보를 아무렇게나 모아만 놓는 것이 아니라 치밀하게 잘 정리해야 효율적으로 활용할 수 있다. 관계형 데이터베이스는 정보를 표 형태로 정리한다. 주변의 친한 사람에 대한 주소록을 만들어 보자. 


이름		주소			전화번호		키		성별
김상형	경기도 오산시	111-2222		180		남자

김한슬	경기도 용인시	333-4444		178		여자

권성직	경기도 화성시	555-6666		175		남자

최상미	경기도 화성시	777-8888		166		여자

문종민	서울시 송파구	999-0000		179		남자


가로 세로로 줄이 쳐진 도표 형태의 각 칸에 신상 정보를 기록한다. 2차원 형태의 도표는 익숙해서 읽기 쉽고 직관적이다. 척 보면 문종민의 키는 179이고, 전화번호가 333-4444인 사람은 김한슬임을 한눈에 알 수 있다. 이런 식으로 정보를 표 형태로 정리해 놓은 것을 테이블(table)이라고 부른다. 

테이블은 현실 세계에 존재하는 사물의 속성을 저장한다. 이때 테이블이 표현하는 대상을 엔티티(Entity)라고 부르며 세상의 모든 것이 엔티티가 될 수 있다. 사람, 상품, 건물, 화폐 등의 물건은 물론이고 계약, 권한, 처리 내역 같은 무형의 것도 엔티티이다. 주소록 테이블의 엔티티는 사람이다. 

테이블에 저장된 엔티티 하나를 레코드(Record)라고 부르며 도표의 가로줄에 해당한다. 위 도표의 김상형, 김한슬, 권성직은 모두 사람 엔티티의 한 예이며, 각각 한사람에 대한 정보를 표현한다. 이 테이블에는 5개의 레코드가 있다. 

레코드의 세부 속성을 필드(Field)라고 부르며 테이블의 세로줄에 해당한다. 이름, 주소, 전화번호, 키 등이 모두 필드이며 사람에 대한 상세한 속성이다. 표현하는 엔티티에 따라 필드의 목록은 달라진다. 몇 가지 예를 들어 보자. 

* 컴퓨터 : CPU, 메모리 용량, 그래픽 카드, 사운드 카드, 하드 디스크

* 가계부 : 날짜, 금액, 사용처, 수입, 지출, 잔액

* 재고 : 분류, 품목, 제품명, 입고날짜, 재고, 유통기간

필드 여러 개가 모여 레코드 하나가 되며 레코드 여러 개가 모여 테이블이 된다. 위 테이블에서 김상형 레코드는 주소: 경기도 오산시, 전화번호: 111-2222, 키:180 등의 필드로 구성되며 이 런 레코드 다섯 개가 모여 하나의 주소록을 구성한다. 


레코드와 필드는 문맥에 따라 여러 가지 동의어가 정의되어 있다. 보는 관점에 따라 용어가 조금씩 다를 뿐이며 칭하는 대상은 같다. 실무에서는 별 구분없이 섞어서 사용하며 이 책도 마찬가지이다. 

정식 명칭		도표 관련 용어			한국말로		모델링 용어
레코드		로(Row)				행			튜플(Tuple)

필드			컬럼(Column)			열			어트리뷰트(Attribute)


2. DB오브젝트
테이블은 실체 하나에 대한 상세한 정보를 저장한다. 그러나 현실의 데이터는 이보다 복잡해 여러 개의 테이블이 모여야 정보로서의 가치를 발휘한다. 간단한 쇼핑몰을 상상해 보면 적어도 다음 세 개의 테이블이 필요하다. 

번호	이름		주소			번호	상품		가격		날짜			고객	상품
1	구홍녀	무거동		1	노트북	120		2021-5-8		3	2

2	김상영	신복 로터리		2	원피스	32		2021-5-12		2	1

3	김영주	온산면		3	옥장판	16		2021-5-13		1	3

첫 번째 테이블은 가입한 회원의 정보이며 두 번째 테이블은 판매하는 상품의 목록이다. 세 번째 테이블은 어떤 회원이 뭘 샀는지 기록하며 5월 8일에 3번 김영주 고객이 2번 상품인 원피스를 구입했음을 알 수 있다. 쇼핑몰이 운영되려면 상품과 고객이 있어야 하고 고객이 상품을 구입해야 한다. 

회원 상품 구매라는 세 가지 정보가 모여야 온전한 쇼핑몰을 표현할 수 있다. 테이블 외에도 여러 가지 정보가 더 필요하다. 회원이 상품을 주문하는 관계를 정의해야 하며 성능을 위한 인덱스, 보안을 지키기 위한 뷰 동작을 처리하는 프로시저, 무결성 관리를 위한 제약 사항도 필요하다.

업무상 관련 있는 테이블과 이를 지원하는 장치가 모두 구비되어야 완전한 데이터베이스가 되어 현실 세계를 제대로 반영할 수 있다. 데이터베이스에 저장되는 모든 것을 통칭하여 DB 오브젝트라고 하며 간단하게 개체(Object)라고 부른다. 테이블을 구성하는 레코드, 필드는 물론이며 DBMS가 관리하는 모든 것이 다 DB 오브젝트이다. 

갑자기 새로운 용어가 너무 많이 나왔는데 각 오브젝트에 대해서는 차후 순서대로 상세히 배운다. 이 모든 오브젝트를 자유자재로 쓸 수 있다면 데이터베이스를 완전히 정복한 것이다. 가장 중요한 개체는 테이블이며 당분간은 테이블 위주로 학습하면 된다. 


3. 명칭규칙
DB 오브젝트는 서로 구분하기 위해 고유한 이름이 있어야 한다. 이름을 붙이는 것은 기본적인 절차이면서도 효율적인 관리를 위해 중요하다. 다음 몇 가지 상식적인 규칙만 잘 지키면 된다. 

* 같은 범위 내에서 이름이 중복되어서는 안된다. 한 데이터베이스에 같은 이름의 테이블이 두개 있다거나 한 테이블에 같은 이름의 필드가 두 개 존재할 수 없다. 중복된 이름이 있으면 애매함이 발생한다. 

* 대소문자는 구분하지 않으므로 마음대로 붙여도 된다. 그러나 너무 난잡하게 대소문자를 섞어서 쓰면 읽기도 어렵고 입력하기도 번거로우므로 일관성을 지키는 것이 좋다. 

* 길이는 최대 128자까지 가능하다. 너무 짧으면 의미를 설명하기 어렵고 너무 길면 입력하기 불편해 적당한 길이로 작성하는 것이 좋다. 

* SQL 예약어는 쓸 수 없다. CREATE , SELECT 등의 명령어는 동작을 지시하는 키워드이므로, 오브젝트 이름으로 사용해서는 안된다. 꼭 사용하려면 방법은 있지만 바람직하지 않다. 

* 유니코드에 포함된 모든 문자를 다 사용 할 수 있다. 한글을 사용할 수 있으며 중간에 공백 이 있어도 상관없다. 그러나 득보다 실이 많아 짧은 영문으로 작성하는 것이 무난하다. 

* #이나 @같은 기호로 시작하는 명칭은 DBMS가 정의한 특별한 의미를 가진다. DBMS별로 의미가 달라 언더바(_)외의 기호는 가급적 쓰지 않는 것이 바람직하다 


명명 규칙은 대부분의 DBMS에 똑같이 적용되지만 약간씩 다른 부분도 있다. 예약어를 꼭 쓰고 싶으면 오라클은 예약어 형식으로 SQL Server는 [예약어] 형식으로 쓸 수는 있다. 그러나 호환성이 떨어지며 모든 DBMS에서 가능하다고보장할 수 없다. 

읽기 쉬운 이름도 좋지만 호환성이나 이식성을 확보하는 것도 중요하다. 실무에서는 이런 명시적인 규칙보다 의미를 명확히 알 수 있는 간결한 이름을 붙이는 것이 더 중요하다. 이름은 name, 가격은 price 등으로 붙이면 누구라도 알 수 있어 팀 작업에 유리하고 관리하기도 편리하다. 

오브젝트의 종류나 타입을 구분하는 접두어를 붙이는 방식을 권장한다. 테이블은 t, 뷰는 v, 인덱스는 idx등으로 시작하면 이름만 봐도 무슨 오브젝트인지 쉽게 구분할 수 있다. 이 책은 실습 편의를 위해 가급적 짧은 명칭 규칙을 사용한다. 

* DB : 첫 자만 대문자 Study

* 키워드 : 모두 대문자 SELECT, CREATE

* 테이블 : t 접두로 시작하며 첫 자는 대문자로 쓴다. tCity, tMember

* 필드 : 모두 소문자 여러 단어일 경우 어근만 대문자, name, orderDate


SQL 자체가 대소문자를 구분하지 않아 키워드를 대문자로 쓰기 귀찮으면 소문자로 써도 상관없다. 테이블은 tbl 또는 table_를 붙이는 사람도 있는데 너무 길면 입력하기 번거롭다. 어떤 식으로 이름을 붙이든 자유이지만 한 번 정한 규칙을 일관되게 지키는 것이 바람직하다. 



4. 데이터 타입
테이블에 저장하는 정보의 형태는 다양하다. 1234, 3.14같은 수치값이나 "대한민국" , "노트북" 같은 문자열이 대부분이지만 2021-6-29 같은 날짜나 시간도 있고 화폐 단위, 사진 같은 더 복잡한 것도 있다. 정보의 크기나 형태를 규정하는 것을 데이터 타입(Data Type)이라고 한다. 

데이터 타입에 따라 사용하는 메모리양이나 관리하는 방식이 달라진다. 그래서 저장할 정보의 성질에 따라 적합한 데이터 타입을 지정해야 한다. 타입을 지정해야 하는 이유는 최소한의 메모리로 최대한의 효율을 내기 위해서이다. 

* 정보의 크기에 꼭 맞게 메모리를 알뜰하게 사용한다. 수십억을 넘어가는 화폐 액수는 큰 메모리가 필요하지만 사람의 나이는 고작 200을 넘지 않으니 약간의 메모리면 충분하다. 

* 실수나 에러로 인한 사고를 방지할 수 있다. 정수로 정의한 나이 정보에는 15, 39 같은 숫자만 들어가야지 아직 어림, 비밀임 따위의 문자열을 저장해서는 안된다. 

* DBMS가 타입을 미리 알고 있으면 최적화된 방법으로 정보를 읽고 빠른 속도로 연산할수 있어 성능이 향상된다. 


이책은 모든 DBMS에서 공통적으로 지원하는 딱 5개의 타입만 쓴다. 실무에서는 효율을 위해 더 정교한 타입 관리가 필요하지만 처음 학습하는 단계에서는 굳이 그럴 필요 없다. 사실 이 5개의 타입만 해도 현실 세계의 데이터 98% 이상을 표현할 수 있으며 당장 실습하는데 아무 지장이 없다. 


타입					설명
INT					정수
DECIMAL				실수
CHAR					고정 길이 문자열
VARCHAR				가변 길이 문자열
DATE					날짜


문자열 타입은 길이에 따라 두 종류가 있다. 고정 길이인 CHAR 타입은 길어보다 짧은 문자열의 뒷 부분을 공백으로 채우는데 비해 가변 길이인 VARCHAR타입은 문자열 길이만큼만 저장한다. 다음은 CHAR(10) 타입과 VARCHAR(10) 타입에 문자열을 저장한 예이다. 


abc				3 abc
한글				4 한글
SQL Server			10 SQL Server
CHAR(10)			VARCHAR(10)

둘다 최대 길이는 10바이트이지만 CHAR형은 항상 10바이트를 채우는데 비해 VARCHAR형은 문자열 길이만큼만 저장하고 길이를 같이 기록한다. 'abc'의 경우 CHAR형은 10바이트를 다 쓰지만 VARCHAR형은 길이 정보까지 더해도 7바이트밖에 되지 않는다. SQL Server처럼 길이가 정확히 10자일 때는 CHAR형이 유리하다. 

VARCHAR형은 용량면에서 유리하고 CHAR형은 길이가 일정해 속도가 빠르다. 우편번호나 주민등록번호 같이 길이가 일정한 필드에는 CHAR형을 쓰는것이 좋고 영화 제목이나 블로그의 댓글처럼 길이가 들쭉날쭉한 문자열은 VARCHAR 타입이 적합하다. 


21	좋은 정보 감사합니다.						좋은 정보 감사합니다
3	^_^									^_^
37	덕분에 골치파은 문제 잘 해결했습니다.				덕분에 골치파은 문제 잘 해결했습니다. 
23	급전 대출. 015 -396 -1523					급전 대출.015 - 396 - 1523
VARCHAR(100)								CHAR(100)


타입에 대한 더 상세한 내용은 차후 어느 정도 실습을 진행한 후에 다시 정리해 보자. 당장은 이 정도만 알아도 실습에 별문제가 없다