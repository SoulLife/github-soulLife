3장 SQL Server와 MariaDB


3-1 데이터베이스 전문가

1. 멀티 DBMS

치열한 경쟁 상황에서 각 DBMS는 온갖 강력한 기능으로 중무장하여 차별화를 꾀한다 그러나 다행스럽게도 관계형이라는 혈통이 같고 SQL 표준을 준수하여 차이점보다 공통점이 더 많아 하나만 확실히 배우면 나머지도 금방 익힐수 있다. 라면의 종류가 아무리 많아도 끊이고 먹는 방법은 비슷한 것과 같다. 

현업에서는 이것 저것 다쓰기 때문에 하나만 알아서는 곤란하다. 업체마다 프로젝트마다 사용하는 DBMS가 다르고 두 종류 이상을 같이 운영하는 회사도흔하다. 오라클에 있는 데이터를 가져와 SQL Server와 싱크를 맞추거나 자주 변하지 않는 참고용 데이터는 MariaDB에서 읽어오기도 한다. 

		  기록
오라클 > PC ---------->  SQL Server
		<---------	Maria DB

현실이 이렇다 보니 오라클을 아무리 잘해도 SQL Server나 MariaDB를 사용하는 프로젝트에 투입되면 예상외로 다시 배워야 할 것이 많다. 기술은 지속적으로 발전하고 환경도 끊임없이 바뀌고 있어 새로운 DBMS나 아예 차원이 다른 데이터 관리 방법이 등장하기도 한다. 

어떤 DBMS를 배울 것인가는 선택 사항이 아니며 멀티 플레이어가 되려면 결국 다 알아야 한다. 주종목이 있더라도 나머지도 어느 정도 다룰수 있어야 환경의 변화에 신속하게 대처할수 있다. 다양한 DBMS를 배워야 하되 학습의 순서와 방법은 선택할 수 있으며 각각 장단점이 있다. 

* 하나를 주력으로 배우고 나머지는 차이점을 확인하는 식으로 학습한다. 처음 실습은 쉽지만 하나에 너무 익숙해지면 나머지를 배우는데 오히려 걸림돌이 되기도 한다. 

* 동시에 여러 개를 같이 실습하면서 호환성 높은 코드 작성법을 익힌다. 각 제품의 장단점을 비교할 수 있고 제품별 대체 방법 익힐 수 있어 적응력을 키우는데 유리하다 

하나를 제대로 배우기도 어려운데 두 가지를 병행 학습하는 것은 피곤하다. 그러나 이왕 공부하는 김에 여러 제품을 비교 학습하면 SQL의 더 깊은 곳을 들여다 볼 수 있고 어느 제품에서나 통하는 호환성 높은 코드를 익힐수 있다. 하나를 아는데 100의 노력이 든다면 2개나 3개를 아는 데는 20, 10의 노력만 더 들이면 된다. 

이 책은 오라클을 주력으로 선정한다. 가장 선도적인 제품이며 발전 속도가 빨라 SQL의 진정한 면모를 학습하기 적합하다. 점유율이 높아 사용자가 많으며 기업체에서도 오라클 전문가를 많이 요구해 가장 현실적이고 유리한 과목이다. 모든 이론과 실습은 오라클을 기준으로 하며 SQL Server와 MariaDB는 오라클과 다른 부분에 대해서만 차이점을 정리하는 방식이다. 

여러 DB를 동시에 공부할 수 있다는 장점이 있는 반면 입문자에게 혼란스러울 수 있다는 면에서는 단점이다. 그러나 여러 DBMS를 섭렵해 보는 것도 의미있는 일이라 생각하여 과감히 시도하였다. 주제에 따라 각 DBMS의 문법과 차이점을 요약적으로 정리해 두었으므로 실무에서 대체 문법을 찾기 편리하다. 

이책의 의도와는 달리 선택은 읽는 사람의 몫이다. 처음 읽을 때는 오라클 기준으로 실습을 진행하고 두 번째 이후에는 이미 습득한 지식을 바탕으로 SQL Server와 MariaDB를 같이 공부하는 것이 효율적이다 만약 이 책을 처음 읽고 있다면 이 장은 건너 뛰고 4장부터 읽어도 무방하다. 



2. SI
네트워크가 없던 초창기의 데이터는 고립되어 있어 일관성이나 보안을 걱정할 필요가 없었다. 주소록이나 가계부처럼 혼자 사용하는 데이터는 PC한대면 충분하다 그러나 여럿이 공유할수 없어 활용성이 낮고 PC 앞에 가야 쓸 수 있어 가용성이 떨어진다. 

데이터는 공유할 때 가치가 더 높아진다. 요즘은 뭐든지 연결되어 있으며 심지어 개인적인 정보까지도 서버에 저장하여 집, 회사에서 공유한다. 이런 것이 가능하려면 데이터를 저장하는 곳과 사용하는 곳이 분리되어야 한다. 초창기에는 고성능의 메인프레임과 연산 기능이 없는 더미 터미널로 연결을 구현했는데 업무가 중앙에 집중되어 효율이떨어졌다. 

메인 프레임의 여러 가지 한계를 극복하기 위해 클라이언트/ 서버 구조가 도입되었다. 서버는 중앙에서 데이터만 관리하고 사용자를 대면하는 것을 클라이언트가 담당한다. 클라이언트도 독립된 컴퓨터이며 사용자의 검색 조건을 입력받아 전달하거나 서버로부터 받은 데이터를 보기좋게 정돈하여 보여주는 작업을 분담하여 서버의 부담을 덜어준다. 



서버	<----------------	클라이언트(서울)
	<----------------	클라이언트(부산)
	<----------------	모바일


메인 프레임이 모든 것을 다 처리하는 방식을 싱글 티어(Single tier)라고 하는데 비해 서버와 클라이언트가 협조적으로 동작하는 방식을 2티어(2 tier)라고 한다. 여기에 업무 로직을 담당하는 비즈니스 서버를 추가하면 3티어 방식이 되고 대규모의 시스템은 배포나 백업을 위한 중간 레이어를 더 추가한 다층 구조를 활용한다. 

원격지의 서버와 클라이언트가 통신하려면 빠르고 안정적인 네트워크 기술이 필수적이다. 전세계에 뻗어 있는 유선망으로 지구 어디서나 접속 가능하고 모바일 무선망으로 돌아다니면서도 데이터를 활용할 수 있다. 연결성을 확보하면 보안 또한 신경써야 한다. 

보다시피 데이터베이스 시스템은 점점 복잡해지고 있다 그러나 데이터를 활용하는 최종 사용자는 전문가가 아닌 일반인이다. 데이터에 대해 아무것도 몰라도 화면에 뜬 정보만으로 원하는 작업을 척척할 수 있어야 한다. 일상 생황에서 스마트폰으로 늘상 사용하는 프로그램을 보자. 


필요한 정보가 일목 요연하게 표시되며 읽기, 삭제, 주문 등의 버튼과 대화상자를 통해 작업 지시를 척척 내릴 수 있다. 데이터베이스니 쿼리니 하는 복잡한 이론을 전혀 몰라도 터치만 꾹꾹 누르면 원하는 모든 것을 할 수 있다. 프로그램이 데이터를 추상화하고 사용자와 DBMS 사이에서 통신 및 번역을 책임진다. 

최종 사용자가 데이터를 불편없이 사용하려면 결국은 응용 프로그램을 작성해야 한다. 여러분이 지금 이 책을 읽고 있는 이유도 데이터베이스에 대한 학술적인 연구가 아닌 실용적인 프로그램을 만들기 위해서일 것이다. DB 응용 프로그램은 요구에 따라 기능이 천차만별로 달라지는 특수한 소프트웨어이다. 

이런 맞춤형 소프트웨어를 만드는 업종을 시스템 통합(SI)이라고 한다. 요구에 적합한 하드웨어를 선정하고 기업의 고유 업무를 처리하는 응용 프로그램을 작성, 유지, 보수한다. 기업의 업무는 주로 정보를 수집, 관리하는 것이어서 SI 업체는 데이터베이스 기술에 직접적으로 의존한다. 대용량의 데이터를 다루는 웹 또한 마찬가지로 데이터베이스 없이는 아무것도 할 수 없다. 

이렇게 다양한 분야에 데이터베이스가 활용되고 있으니 그 시장성에 대해서는 굳이 논하지 않아도 짐작이 갈 것이다. 시장성이 높다는 것은 인력에 대한 수요가 많다는 뜻이고 그래서 데이터베이스는 개발자가 애쒀 배워볼만한 매력적인 분야이다. 세상의 모든 것이 전산화되고 있어 앞으로도 데이터베이스에 대한 수요가 점점 늘어날 것임은 자명하다. 



3. DB 개발요소
서버측의 DBMS가 여러 종류이듯 클라이언트측의 응용 프로그램을 개발하는 방식도 여러 가지가 있다. 지금까지 발표된 거의 모든 언어가 데이터베이스 개발을 지원한다. C/C++, 자바, C# 같은 범용 언어는 물론이고 델파이, 파워빌더 같은 SI에 특화된 언어도 있다. 웹 환경에서는 ASP .NET, PHP, JSP 스크립트를 주로 활용한다. 

서버와 클라이언트는 끊임없이 데이터를 주고 받으며 협조적으로 동작한다. 그런데 이 둘이 직접 통신하는 것은 쉽지 않으며 바람직하지도 않다. 양쪽 모두 다:다의 관게여서 DBMS가 모든 언어를 다 지원할수 없고 언어 또한 모든 DBMS를 다 알 수 없다. 그래서 서버와 클라이언트의 중간에 접속을 위한 별도의 레이어가 필요한데 이를 DB 인터페이스라고 한다. 

DB 인터페이스는 접속 및 질의를 보내고 결과를 받는 통일된 방법을 제공한다. 서버와 클라이언트는 상대방이 누구인지 정확히 모르더라도 DB 인터페이스와만 통신하면 된다. 중간에 레이어가 하나 더 추가됨으로써  호환성이 향상되며 이식도 쉬워진다. 그러나 역설적이게도 통일을 위해 만든 인터페이스가 통일되어 있지 않아 이것도 여러 종류가 있다. 


DB인터페이스			설명
ODBC					마이크로소프트에서 처음 만든 범용 DB 인터페이스이다. C 수준의 함수 호출로 동작하여 속도가 빠르고 지원 범위가 넓다. 

OLE DB				클래스 수준의 고수준 라이브러리이며 비관계형 DB 에도 접속할수 있지만 기반 이론인 COM이 난해해 익숙해지기 어렵다. 

ADO					OLE DB를 포장하여 웹에서 사용할수 있도록 더 쉽게 만들었다. 쉬운만큼 성능은 아쉽다. ADO .NET으로 재탄생하여 닷넷에서 주					로 사용한다. 

JDBC					자바의 데이터베이스 접속 인터페이스이다. 언어에 맞는 JDBC 드라이버만 설치하면임의의 DBMS에 접속할수 있다. 


이 외에 개발툴이 독자적으로 제공하는 DB 인터페이스도 있다. 데이터베이스 개발은 단순 반복 작업인 경우가 많아 시간이 오래 걸리고 노동 집약적이다. 이런 번거로움을 해소하기 위해 개발 편의성과 생산성을 높여 주는 마이바티스, 하이버네이트 같은 프레임워크도 많이 발표되어 있다. 

여기까지 데이터베이스 개발을 위해 필요한 여러 가지 기술을 소개했다. 각 요소의 종류가 워낙 많다보니 이들을 조합하는 방식도 여러 가지이고 양쪽의 운영체제까지 고려하자면 더 복잡해진다. 똑같은 프로그램을 만들더라도 어떤 조합을 선택하는가에 따라 개발 시간과 비용, 성능의 차이가 발생한다. 


오라클					C/C++
		<----ODBC------->		Java
SQL 서버					C#
		<----ADO.NET---->	Delphi
My SQL					PHP
		<----JDBC--------->	Python
DB2


이렇게 많은 것을 알아야 하니 제대로 익히는 데 엄청난 시간이 걸린다. 데이터베이스는 단기간에 습득하기 어려운 고급 기술이고 숙련도에 따라 생산성의 차이가 현격하게 벌어진다. 그러니 고급 개발자의 몸값이 비쌀 수밖에 없다. 

다행히 모든 기술을 한 번에 다 익혀야 하는 것은 아니다. 데이터베이스 개발 전반에 걸쳐 통용되는 범용 언어만 익히면 웬만한건 다 해 볼수 있다. 그게바로 SQL이다. 클라이언트측의 언어나 접속 인터페이스는 차후 천천히 배우도록 하고 당분간은 SQL에 집중하자. 