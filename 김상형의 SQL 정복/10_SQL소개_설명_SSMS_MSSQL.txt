3-2 SQL Server


1. 소개

SQL Server는 여러 회사를 거쳐 우여곡절끝에 탄생했다. 1989년 당시 마이크로소프트는 IBM에 운영체제(MS-DOS)따위나 만들어 납품하는 중소기업에 불과했다. 서버 운영체제 시장을 장악하려면 대용량 DBMS가 꼭 필요하다는 것과 데이터베이스 시장의 잠재력을 인식했다. 

그러나 관련 기술은 보유하지 못해 사이베이스(Sybase)와 합작하여 SQL Server의 초기 버전을 만들었다. 당시의 윈도우는 인기가 없어 SQL Server의 첫 버전은 OS/2용으로 발표했으며 4.2 버전부터 NT용으로 이식하였다 사이베이스와 라이센스 계약 종료후 꾸준히 업그레이드했지만 오라클 DB2, 인포믹스 같은 거물과 상대하기는 역부족이었다. 

이럴 때 마이크로소프트는 돈을 쏟아 붓는다. 막대한 자본력을 바탕으로 경쟁사의 최고 인재를 스카웃하여 처음부터 완전히 다시 만든 결과물이 SQL Server 7.0(1998년)이다. 대규모 투자의 성과로 대용량 DBMS의 면모를 갖추고 기능적으로 높은 완성도를 보이며 시장에 무사히 안착하였다. 이후 다음과 같은과정을 거쳐 지속적으로 발전해 왔다. 


버전			특징
7.0			MS가 단독으로 만든 첫 버전 대용량 데이터베이스 지원

8.0(2000)		닷넷 XML 지원 다중 인스턴스 설치 가능, 인덱싱된 뷰 지원

9.0(2005)		스냅샷 64비트 지원, QA와 EM의 통합, 미러링 지원

2008			다중 서버 관리, 병렬 데이터웨어 하우스 구성

2012 			장애 대처 기능 향상, 데이터 압축

2014			메모리 DB 지원

2016			메모리 DB 기능 개선, 상시 암호화

2017			리눅스 지원, 머신러닝 지원, 파이썬 스크립트 실행

2019( 15.x)		데이터 가상화, 빅데이터 클러스터, 지능형 쿼리


새 버전을 발표할 때마다 기능을 추가하고 안정성을 개선했지만 덩치가 커져 점점 무거워졌다. 당장은 이 표에 관심이 없겠지만 실무 프로젝트를 할 때는 버전에 따라 쓸 수 있는 기능에 차이가 있어 어떤 기능을 어느 버전 이후에 쓸 수 있는지 항상 관심을 가져야 한다. 

다행히 데이터베이스는 한 번 선택하면 자주 바꾸기 어려워 새 버전이 나온다고 해서 기업에서 즉시 교체하지 않는다. 최신 기능이 꼭 필요치 않다면 검증된 버전이 더 나은 경우도 많다. 현재 기업에서 가장 많이 쓰는 버전은 SQL Server 2012이며 SQL 문법도 큰 변화가 없어 그 이후의 버전을 기준으로 학습하면 충분하다. 





2. 설치
SQL Server는 기업에서 사용하는 유료 소프트웨어이며 가격이 만만치 않다. 개인용이나 소규모로 사용하는 Standard 버전이 $3189( 340만원)이며 Enterprise 버전은 라이센스 비용까지 수천~수억에 이른다. 학생이 선뜻 구입하기는 부담스러워 개발자 저변 확대가 쉽지 않다. 

그래서 학습에 적합한 무료 버전을 따로 배포한다. SQL Server는 일정 기간동안 모든 기능을 쓸 수 있는 평가판과 고급 기능은 제외하되 기간 제한이 없는 Express 버전을 제공한다. 기업 소속이라면 설치해 놓은 정품을 쓰면 되겠지만 그렇지 않다면 Express 버전을 사용하자. 다음 사이트를 방문한다. 


https:www.microsoft.com/ko-kr/

오만 것을 다 만드는 회사다 보니 메뉴를 통해 제품을 찾기는 쉽지 않다. 상단의 검색창에서 SQL Server 2019 Express를 직접 입력하여 검색하는 것이 더 빠르다. 프로그램을 다운로드 할 수 있는 다음 사이트로 이동한다. 

https://www.microsoft.com/ko-kr/download/details.aspx?id=101064

다운로드 주소는 자주 바뀌어 상황에 따라 눈치껏 링크를 찾아야 한다. 구글에서 mssql 2019 Express 다운로드로 검색하면 금방 찾을수 있다. 이 책은 2019 Express 버전을 기준으로하지만  안정화된 2017 Express 버전을 사용해도 상관없다. 다음 링크 사이트가 나타난다. 

[다운로드] 버튼을 누르면 SQL2019-SSEI-Expr.exe(6M)설치 파일을 보내준다. 이 파일로 미디어 다운로드 및 설치를 진행한다. SQL Server를 설치하는 과정은 상식적이고 직관적이어서 지시에 따라 옵션만 잘 선택하면 된다. 설치 파일을 실행하면 다음 화면이 나타난다. 

세가지 설치 옵션이 있다. 기본은 권장 옵션으로 설치하는 것이고 사용자 지정은 언어 등의 몇 가지 옵션을 선택한다. 미디어 다운로드는 네트워크를 쓸 수 없는 환경을 위해 ISO 파일만 받아놓고 오프라인에서 설치하는 옵션이다. 

설치 옵션은 차후에도 변경할 수 있으므로 너무 완벽하게 설치하려고 애쓸 필요 없다. 기본 옵션으로 설치해 놓고 쓰다가 불편하면 그때 바꾸어도 늦지 않다. 왼쪽의 기본을 클릭하면 라이센스 동의문이 나타나고 설치 위치를 선택한다. 디폴트 경로를 받아들이고 설치 버튼을 누르면 설치 과정을 보여주는 대화상자가 나타나며 최종적으로 완료 대화상자가 나타난다. 

SQL Server는 이미 설치 완료했으며 설치한 경로와 설치한 버전에 대한 정보를 보여준다. 다음은 쿼리툴을 설치한다. 취향에 따라 골라 쓸 수 있지만 처음 실습할 때는 SQL Server 전용 프로그램인 SSMS(SQL Server Management Studio)가 무난하다. [SSMS 설치] 버튼을 클릭하면 다운로드사이트로 이동한다. 


안내에서 보다시피 SSMS는 무료이다. 링크를 클릭하여 SSMS-Setup-KOR.exe(551M)파일을 다운로드 받아 실행한다. 별다른 옵션도 없고 설치 위치만 선택하면 된다. 


설치 후 [시작] 메뉴를 보면 SQL Server 2019와 SQL Server Tools가 등록되어 있다. 이둘은 별개의 제품이라 별도의 폴더에 따로 설치된다. 

이상의 설치 과정은 운영체제나 SQL Server의 버전에 따라 조금씩 다르지만 큰 틀은 유사해 비슷한 과정으로 설치하면 된다. 설치 해제도 쉬워 제어판에서 제거하면 깔끔하게 삭제되며 언제든지 다시 설치할수 있다. 다만 데이터나 예제는 알아서 백업해야 한다. 




3. SSMS

우리가 실제 사용할 프로그램은 SSMS이며 이 프로그램을 통해 DB를 만들고 사용한다. 실행하면 접속 정보를 묻는다. 

접속할 서버의 유형과 이름을 선택한다. 분석이나 리포팅을 위한 서버도 있고 원격지의 서버에 접속할 수도 있다. 여러 개의 서버가 있다면 접속 대상을 선택하겠지만 지금은 로컬에 설치한 데이터베이스 엔진 하나밖에 없다. 디폴트 서버를 받아들이면 된다. 

소중한 데이터를 아무나 쓰도록 방치할 수는 없으니 인증 과정을 거친다. Windows 인증은 운영체제의 사용자 정보로 인증하고 SQL Server 인증은 서버에 등록한 사용자 정보를 사용한다. 로컬에 설치한 SQL Server는 Windows 인증이 편리하다. 

결국 접속 대화상자에서 별다른 옵션 선택할 것도 없이 [연결] 버튼만 누르면 된다. 관리 스튜디오가 실행되며 로컬에 설치한 DB 서버에 접속한다. 다음 윈도우가 SSMS이며 여기서 데이터 관리 작업을 수행한다. 메뉴, 툴바, 상태란 등으로 구성된 일반적인 윈도우이다. 

왼쪽의 개체 탐색기에 서버 목록과 DB 개체가 계층적으로 표시되는데 현재는 로컬 DB 서버 하나밖에 없다. SSMS에서 데이터베이스와 테이블을 만들고 데이터를 입력해 넣는다. 그래픽 환경에서 모든 작업을 다 수행할 수 있지만 어차피 실무에서는 쿼리를 쓰므로 굳이 실습해볼 필요는 없다. 

오라클은 설치와 동시에 기본 DB를 하나 생성해 주지만 SQL Server는 그렇지 않으므로 데이터베이스부터 만들어야 한다. SSMS의 명령은 대부분 팝업 메뉴에 있다. 데이터베이스 노드의 팝업 메뉴에서 [새 데이터베이스]항목을 클릭한다. 

데이터베이스의 속성을 입력하는 대화상자가 나타난다. 일반, 옵션, 파일 그룹 세 개의 페이지로 구성되어 있으며 새로 만들 DB에 대한 상세한 옵션을 지정한다. 성능 향상을 위한 튜닝이나 안전성, 보안 설정 같은 복잡한 정보가 많지만 대부분 무난한 디폴트가 설정되어 있다. 

꼭 입력해야 하는 정보는 이름밖에 없다. 이름에 Study 라고 입력하고 [확인]버튼을 누르면 Study DB가 생성되며 개체 탐색기의 목록에도 나타난다. 다음은 DB 안에 테이블을 만든다. 테이블 노드에서 팝업 메뉴를 열고 [새로 만들기] - [테이블]을 클릭한다. 테이블 디자인창에 필드 목록을 입력하고 name 키의 팝업 메뉴에서 기본키 설정을 선택한다. 

오라클 실습시에 만들었던 tCity 의 필드 목록과 같다. 다 만든 후 툴바의 저장 버튼(Ctrl + S)을 눌러 테이블을 tCity로 저장한다. 개체 탐색기의 Study/테이블 노드 아래에 dbo.tCity 테이블이 추가된다. 다음은 데이터를 채워 넣는다. tCity의 팝업 메뉴에서 상위 200개행 편집 항목을 선택하면 테이블의 내용을 보여주는데 아직 아무것도 입력되어 있지 않다. 편집기에 다음과 같이 입력한다. 

name		area		popu		metro		region
서울		605		974		y		경기
부산		765		342		y		경상
오산		42		21		n		경기


3개의 도시 정보를 입력한 후 입력창을 닫으면 자동으로 저장된다. 데이터가 과연 잘 들어갔는지 쿼리창에서 확인해 보자. 도구 모음에서 [새 쿼리] 버튼(단축키 Ctrl + N)을 누르면 오른쪽에 쿼리창이 열린다. 쿼리창을 연 후 툴바의 콤보 박스에서 쿼리를 수행할 대상 DB를 선택한다. 

쿼리창을 새로 열면 SQL Server의 시스템 DB인 master가 선택되어 있다. 시스템 DB에 작업을 직접 하지는 않으므로 사용 대상 DB를 선택해야 한다. 우리는 Study DB에서 실습을 진행할 것이므로 콤보박스에서 "Study"를 선택해 둔다. 이후 모든 쿼리 명령은 이 DB를 대상으로 한다. 여기에 SELECT * FROM tCity; 명령을 입력한 후 실행(단축키 F5)를 누른다. 

SSMS의 쿼리 실행 단축키는 F5이며 블록을 선택하면 해당 명령만 실행한다. 블록을 선택하지 않으면 전체를 다 실행하므로 항상 블록을 먼저 선택한 후 실행해야 한다. 세 개의 도시 목록이 아래쪽 결과창에 나타난다. 도표 형식이 깔끔하지만 칸이 나누어져 있어 복사나 파일로 저장하기는 번거롭다. 툴바의 세 버튼을 통해 출력 결과를 보여줄 방식을 선택한다. 

Ctrl + T를 눌러 텍스트 모드로 변경해 놓고 F5를 누르면 결과창에 문자열 형태로 출력한다. 텍스트 모드는 블록을 자유롭게 선택할수 있어 실행 결과를 복사하기 편리하다. 




4. 쿼리 실습
SSMS의 그래픽 환경도 훌륭하지만 실무에서는 어차피 쿼리로 모든 것을 처리한다. 과연 그런지 처음부터 다시 실습해 보자. 그래픽 환경에서 실습을 했다면 Study DB 자체를 삭제해 버리자. 개체 탐색기의 [데이터 베이스] - [Study]노드의 팝업 메뉴에서 삭제 항목을 선택하거나 아니면 Del 키를 누른다. 

쿼리창을 열어 놓은 상태라면 사용중인 DB를 삭제할 수 없다. 대화상자의 아래쪽에 기존 연결 닫기 체크 박스를 클릭한 후 [확인] 버튼을 누르면 쿼리창을 닫은 후 삭제한다. DB를 삭제하면 그 안의 테이블과 데이터까지 모두 삭제한다. 

데이터베이스부터 순서대로 다시 만들어 보자. 여러 가지 고급 옵션이 있지만 현 단계에서는 필요치 않으며 무난한 디폴트가 있으므로 모두 생략하고 CREATE DATABASE 명령 다음에 이름만 Study로 지정하면 된다. 결국 DB 생성에 필수적인 정보는 이름밖에 없다. 

CREATE DATABASE Study;

별 에러가 없으면 출력창에 명령이 완료되었다는 메시지가 나타난다. 관리 스튜디오의 개체 탐색기에서 새로 고침(단축키 F5)을 실행하면 방금 만든 Study 데이터베이스가 표시된다. 

방금 생성한 Study DB는 텅 비어 있지만 이 안에 테이블을 비롯한 각종 개체를 만들수 있다. 툴바에는 아직 master DB가 선택되어 있으며 새로 만든 DB를 사용하려면 선택해야 한다. 콤보 박스를 열어 목록에서 Study를 선택해도 되지만 쿼리문으로도 활성 DB를 변경할수 있다. 쿼리창에서 USE 명령을 실행하면 활성 DB가 변경되며 툴바의 콤보 박스도 Study로 변경된다. 


USE Study;

데이터베이스를 생성하고 활성화까지 한꺼번에 변경하려면 두 명령 사이에 GO 명령을 삽입하여 다음과 같이 해야 한다. 

CREATE DATABASE Study;
GO
USE Study;


GO는 두 명령의 실행 단위를 구분한다. SQL Server는 여러 개의 명령을 한꺼번에 묶어 컴파일하고 실행하지만 GO로 분리한 명령은 따로 실행한다. 대부분의 명령은 순서대로 실행해도 되지만 위 두 명령은 같이 실행할 수 없다. 왜냐하면 USE 명령을 컴파일할 때는 아직 Study가 없기 떄문에 이럴 떄 GO 를 삽입하여 일단 만든 후 활성화해야 한다. 

참고로 GO와 USE는 SQL 명령이 아니라 쿼리창 자체의 명령이다. 이제 Study에 테이블을 만들고 데이터도 입력해 보자. 그리고 잘 생성 및 입력되었는지 SELECT 명령으로 확인해 보자. 오라클 실습에서 작성한 쿼리문을 그대로 붙여 넣고 실행하면 된다. 

오라클은 데이터를 삽입한 후 COMMIT 명령으로 확정해야 하는데 비해 SQL Server는 기본 설정이 자동 커밋이어서 굳이 COMMIT 명령을 내리지 않아도 영구적으로 삽입한다. 다 만들었으니 이번에는 삭제해 보자. 다음 명령을 순서대로 실행한다. 


DROP TABLE tCity;
USE master;
DROP DATABASE Study;


DROP TABLE명령은 오라클의 경우와 같다. DB 삭제 명령은 DROP DATABASE Study;이되 활성 DB는 삭제할수 없다는 규칙이 있어 다른 DB를 선택하여 비활성화한 후 삭제해야 한다. 

master를 선택하는 것은 Study DB를 선택 해제하기 위해 임의의 다른 DB를 선택하는 것이다. 

DB와 그 안의 모든 개체를 일괄 삭제한다. 이후의 실습을 계속하려면 생성 스크립트를 다시 실행하여 테이블을 복원해 놓자. 실습중에 테이블을 삭제했거나 변형했더라도 언제든지 스크립트만 실행하면 원래대로 되돌릴수 있다. 직원 목록 테이블은 tStaff도 스크립트를 실행하여 생성해 놓자. 

이 실습에서 보다시피 두 DBMS는 기본 DB의 존재여부 자동 커밋 방식등의 차이가 있으며 쿼리툴의 단축키가 약간 다르다. 그러나 테이블을 생성하고 데이터를 입력하고 출력하는 쿼리 명령은 단한 글자도 다른 부분이 없다. 타입을 의도적으로 맞추기는 했지만 표준만 잘 준수해도 어렵지 않게 호환성을 확보할수 있음을 알 수 있다. 