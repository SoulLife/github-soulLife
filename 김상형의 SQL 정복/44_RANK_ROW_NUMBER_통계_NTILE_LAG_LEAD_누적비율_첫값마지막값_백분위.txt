2. 윈도우절

OVER 괄호 안의 PARTITION BY 절은 그룹핑을, ORDER BY 는 정렬을 지정하여 집계를 낼 범위와 순서를 통제한다. 이 정도만 해도 대개의 경우 충분하지만 더 정밀한 범위를 지정할 때 윈도우 절(Windowing Clause)을 사용한다. 

ROWS BETWEEN start AND end

RANGE BETWEEN start AND end


start와 end는 행 범위를 지정하여 집계를 뽑을 정확한 범위를 기술한다. 전체 결과셋의 일부만 들여다 본다고해서 윈도우절이라고 부른다. 각각 다음 세 가지 종류를 지정할 수 있다. 


start			설명		end				설명
UNBOUNDED PRECEDING	처음부터		UNBOUNDED FOLLOWING		마지막까지
CURRENT ROW		현재행부터	CURRENT ROW			현재행까지
n PRECEDING		n 행 앞부터	n FOLLOWING			n 행 뒤까지

처음부터 끝까지, 앞쪽 2행에서 현재행까지 등으로 범위를 지정한다. 평이한 영어 구문으로 쉽게 만들었다고 하지만 우리는 외국인이라 쓸데없이 길어 보인다. 다음 명령은 나보다 앞뒤로 각 1명씩까지의 월급 합계를 계산한다. 앞뒤 순서를 결정하려면 정렬부터 해야 하므로 ORDER BY 절이 있어야 한다. 


SELECT name, depart, salary, SUM(salary) OVER(ORDER BY name ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS 누적월급 FROM tStaff;


강감찬은 더 앞이 없으니 어쩔 수 없이 다음 직원인 김유신의 월급만 더한다. 김유신은 앞뒤의 강감찬, 논개의 월급을 더하고 논개는김유신과 대조영의 월급을 더한다. 

	강감찬	
		--------------> 김유신 기준 앞뒤로 한명씩
	김유신


				논개
대조영 기준 앞뒤로 한명씩<-----------
				대조영
				선덕여왕

이런 식으로 나(=현재형)를 기준으로 앞뒤의 어디까지 범위에 포함시킬 것인지 지정하는 것이 윈도우절이다. 다음 명령은 나부터 마지막 직원까지의 월급 총합을 구한다. 


SELECT name, depart, salary, SUM(salary) OVER(ORDER BY name ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS 누적월급
FROM tStaff;


아래쪽으로 내려올수록 뒤쪽의 직원 수가 줄어들기 때문에 월급 총합이 점점 감소한다. PARTITION BY로 그룹핑하면 그룹 내에서의 범위로 제한한다. 다음 명령은 같은 부서 내에서 입사일 기준으로 나부터 2명 이후까지만의 합계를 구한다. 


SELECT name, depart, joindate, salary, 
SUM(salary) OVER(PARTITION BY depart ORDER BY joindate
ROWS BETWEEN CUREENT ROW AND 2 FOLLOWING) AS 누적월급 FROM tStaff;


유관순은 신사임당, 성상문의 월급을 더하고 신사임당은 성삼문, 안창호의 월급을 더한다. 영업부의 마지막 2번째인 강감찬은 남은 영업부 직원이 을지문덕밖에 없고 막내인 을지문덕은 뒤에 아무도 없어 누적 월급이 자기 월급과 같다. 장보고부터는 부서가 바뀌어 누적 월급을 새로 계산한다. 

ROWS 옵션은 지정한 물리적인 행순서로 범위를 취하는데 비해 RANGE 옵션은 논리적인 값으로 범위를 취한다. 보통의 경우는 별 차이가 없지만 동순위가 있을 때 포함 여부가 다르다. 이름으로 정렬해서는 동명이인이 없어 아무 차이가 없다. 월급순으로 정렬해 보고 첫 직원부터 현재행까지의 월급 총합을 구해 ROWS와 RANGE의 차이를 관찰해 보자.



SELECT name, depart, salary, SUM(salary) OVER(ORDER BY salary 
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 누적월급 FROM tStaff;


SELECT name, depart, salary, SUM(salary) OVER(ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 누적월급
FROM tStaff;


중간 부분을 잘 비교해 보자. 윤봉길은 같은 월급을 받는 사람이 없어 ROWS 범위나 RANGE 범위나 똑같이 누적 월급이 3046이다. 그러나 정몽주는 같은 월급을 받는 안창호가 있어 옵션에 따라 누적 월급이 달라진다. ROWS 옵션은 CURRENT ROW를 자기 자신까지만 취하지만 RANGE 옵션은 같은 월급을 받는 뒤쪽행의 값까지 취한다. 

그래서 정몽주의 월급 누적합에 안창호의 월급이 미리 더해지고 안창호의 월급 누적합도 같다. 앞쪽의 허난설헌과 성삼문도 결과가 다르고 뒤쪽의 유관순, 홍길동, 정약용은 셋 다 월급이 같아 이 부분도 다르다. 동순위 포함 여부에 따라 집계를 낼 범위가 미세하게 다르다. 

RANGE는 행번호가 아닌 값으로 범위를 정하기 때문에 시작, 끝 지정에 n PRECEDING, n FOLLOWING은 쓸 수 없다. 동순위의 값이 있으면 이 지정을 정확히 지킬 수 없기 때문이다. 처음부터, 현재행, 끝까지 세 가지 범위 지정만 가능하다. 




3. RANK

순위를 정하는 가장 간편한 방법은 ORDER BY이다. 예를 들어 성적순으로 정렬하면 1등부터 꼴찌까지 일목요연하게 석차를 매겨볼 수 있다. 하지만 정렬은 눈으로 순서를 확인할수 있을 뿐 석차 자체가 결과셋에 나타나지 않으며 동점자에 대한 처리가 명확하지 않다. RANK 함수는 지정한 기준으로 정렬한 순위를 구한다. 


RANK() OVER ([PARTITION BY 구분기준] ORDER BY 정렬기준)


이 함수의 리턴값을 필드 목록에 적으면 석차까지 포함한 완전한 성적표를 얻을 수 있다. 
OVER 절과 함께 사용하며 순위를 구하려면 정렬 순서가 있어야 하므로 ORDER BY는 필수적이다. 다음 쿼리문은 tStaff의 모든 직원을 월급순으로 내림차순 정렬하여 월급 순위를 매긴다. 

SELECT RANK() OVER(ORDER BY salary DESC), tStaff.* FROM tStaff;
SQL Server, MariaDB : SELECT RANK() OVER(ORDER BY salary DESC), * FROM tStaff;


RANK 함수로 순위를 구해 첫 필드에 출력하고 tStaff의 나머지 필드를 모두 출력한다. 계산값이나 상수 등의 다른 값과 테이블의 모든 필드를 같이 나열할 때 오라클은 테이블명 .*로 적는다. 이에 비해 SQL Server와 MariaDB는 그냥 *만 적어도 무방하다. tStaff.*로 적는 것이 의미가 분명하고 호환성에도 유리하다. 


장보고가 제일 고연봉이다. 월급이 같은 사람은 공동 순위로 매기는데 유관순, 홍길동, 정약용은 월급이 380만원으로 같아 공동 5위이다. 5위가 3명이나 되니 6, 7위는 없으며 다음 순위인 이사부는 8위가 된다. 안창호와 정몽주는 공동 9위이고 성삼문과 허난설헌도 공동 17위이다. 

RANK 구문이 있으면 내부의 ORDER BY절에 의해 자연스럽게 월급순으로 정렬하므로 뒤에 ORDER BY salary DESC를 붙일 필요는 없다. 그러나 순위와 다른 정렬 기준으로 출력하다면 이때는 ORDER BY를 별도로 붙여야 한다. 순위는 월급순으로 매기되 출력은 성취도 순으로 할수도 있다. 


SELECT RANK() OVER(ORDER BY salary DESC), tStaff.* FROM tStaff ORDER BY score;

꼭 순위만 출력해야 하는 것은 아니다 OVER안의 ORDER BY는 순위를 매기기 위한 정렬 순서이고 쿼리문 전체의 ORDER BY는 결과셋을 출력하는 순서이다. WHERE 절도 물론 사용할 수 있다. 다음 쿼리문은 영업부 직원만을 대상으로 순위를 매긴다. 


SELECT RANK() OVER(ORDER BY salary DESC) tStaff.* FROM tStaff WHERE depart = '영업부';


영업부 직원 7명에 대해서만 월급 순위를 매긴다. 같은 부서내에서는 공동 순위가 없다. 다른 부서까지 한꺼번에 그룹별로 순위를 매길 때는 OVER에 PARTITION BY 절을 추가한다. 


SELECT RANK() OVER(PARTITION BY depart ORDER BY salary DESC) AS 순위, tStaff.* FROM tStaff;


부서별로 그룹을 먼저 나누고 각 그룹내에서 월급 순위를 매긴다. 영업부 직원은 1~7위까지 월급 순위를 가지고 인사과는 1~7위까지, 총무부는 1~6위까지 순위를 매긴다. 영업부에서는 신사임당이 월급 1등이지만 인사과에서는 장보고가 1등이다. 

RANK 함수는 공동순위가 있으면 이후 공동순위 만큼 건너뛰어 순위가 불연속적이다. 공동 5위가 세명이면 다음 순위는 8위부터매긴다. 이에 비해 DENSE_RANK 함수는 공동순위는 계산하지만 그 다음 순위를 이어서 붙인다는 점이 다르다. 


SELECT DENSE_RANK() OVER(ORDER BY salary DESC) , tStaff.* FROM tStaff;

같은 구문이되 함수명만 변경하였다. 두 결과셋을 잘 비교해 보자. 공동 5등이 세명인 것은 똑같지만 다음 순위인 이사부가 8위가 아니라 6위라는 점이 다르다. 7위도 두명이지만 다음 순위는 8위이다. 동순위가 있을 때 RANK는 동순위 개수만큼 건너 뛰지만 DENSE_RANK는 연속 적인 순위를 매긴다. 




4 ROW_NUMBER

ROW_NUMBER 함수는 1,2,3,4 식으로 일련번호를 붙인다. 공동순위를 인정하지 않으며 따라서 중간에 순위가 비는 경우도 없다. 어쨌거나 번호를 붙일 순서가 분명해야 하므로 ORDER BY는 꼭 필요하다. 특별한 순서를 지정하고 싶지 않다면 PK 순으로 정렬한다. 


SELECT ROW_NUMBER() OVER(ORDER BY name), tStaff.* FROM tStaff;


이름순으로 정렬한 후 일련번호를 붙인다. 단순히 가나다순으로 1~20까지 번호를 붙일 뿐이며 쿼리창이 왼쪽에 출력하는 순번과도 일치한다. SQL Server는 기본적으로 PK로 정렬하도록 되어 있어 단순 SELECT와 순서가 같다. 오라클은 rownum으로 정렬하면 삽입한 순서대로 순번을 붙인다. 


SELECT ROW_NUMBER() OVER ( ORDER BY rownum) AS 순서, tStaff.* FROM tStaff;


ROW_NUMBER 함수가 붙이는 순번은 결국 오라클의 rownum 의사 컬럼과 같다. 그러나 다른 DBMS에서는 rownum이 없어 정렬 후 순번을 따로 붙여야 한다. 정렬 기준을 바꾸면 성취도순이나 월급순으로 일련번호를 붙인다. 순번만 붙이는 지극히 간단한 함수이지만 써먹을 데가 많다. 

대표적인 활용예는 대규모의 레코드를 페이지별로 나누어 출력하는 것이다. 게시판에 있는 수많은 글을 한꺼번에 다볼수 없으므로 한 페이지씩 끊어서 출력해야 한다. 직원 테이블을 일정한 페이지 크기로 나누어 출력해보자. 다음 명령은 5페이지씩 끊어 2페이지를 보여준다. 


SELECT ROW_NUMBER() OVER( ORDER BY name) AS 순서, tStaff.* FROM tStaff
ORDER BY 순서 OFFSET 2 * 5 ROWS FETCH NEXT 5 ROWS ONLY;


직원을 이름순으로 정렬하여 일련번호를 붙이고 10번째줄 만큼 건너뛰고 다음 5줄을 읽어 출력하면 2페이지이다. 여기서 5는 한 페이지의 크기이며 1~5까지가 0페이지, 6~10까지가 1페이지이며 2페이지는 11~15까지이다. 2는 출력할 페이지 번호이며 0부터 시작한다. 


순번
1
2
3
4
5
6		1~10순번까지 앞페이지를 건너뛴다. OFFSET 페이지수 * 페이지 크기
7
8
9
10

11		페이지 크기만큼 읽는다. FETCH NEXT 페이지 크기
12
13
14
15
16
...


위 명령에서 페이지 크기와 출력할 페이지 수를 변경하면 출력할 부분이 달라진다. 페이지 크기는 3으로, 페이지 수는 4로 지정하면 13,14,15번째 행을 출력한다. 실제 코드에서는 둘 다 변수로 처리하여 자유롭게 선택할 수 있다. 이런 페이징이 가능하려면 기준으로 쓸 일련번호가 필요하다. 

OFFSET FETCH 구문이 ORDER BY의 옵션절이어서 ORDER BY가 두 번 중복되는데 어쩔 수 없다. 오라클은 뒤쪽 ORDER BY를 생략할수 있지만 SQL Server는 형식상 뒤쪽 ORDER BY도 있어야 한다. 그나마 결과셋의 일부를 출력하는 명령이 OFFSET FETCH로 통일되어 다행이지만 각 DBMS별로 다르게 작성할 수도 있다. 복습삼아 DBMS 별로 같은 명령을 작성해 보자. 


SELECT * FROM
(SELECT ROW_NUMBER() OVER (ORDER BY name) AS 순서, tStaff.* FROM tStaff) S
WHERE S.순서 > 2 * 5 AND rownum <= 5;

오라클은 rownum으로 개수를 제한하되 직원 정보와 일련번호를 하나의 테이블로 취급하기 위해 인라인뷰를 정의하고 별도의 이름을 붙여야 한다. SQL Server는 TOP 명령으로 개수를 제한할 수 있지만 앞쪽을 건너뛰는 WHERE 조건을 먼저 적용하기 위해 역시 서브쿼리가 필요하다. 


SELECT TOP(5)  * FROM 
(SELECT ROW_NUMBER() OVER(ORDER BY name) AS 순서, tStaff.* FROM tStaff) S
WHERE S.순서 > 2 * 5;


MariaDB는 OFFSET FETCH 구문을 지원하지 않아 LIMIT 를 대신 사용한다. 그러나 건너뛸 개수가 아닌 최초 출력할 지점을 지정하는 식이라 2페이지 첫 행을 지정해야 하는 데다 LIMIT 절에는 연산식을 쓸 수 없어 시작 위치와 페이지 크기를 미리 구해 두어야 한다. 


SELECT ROW_NUMBER() OVER(ORDER BY name) AS 순서, tStaff.* FROM tStaff LIMIT 11, 5;

일련번호를 붙이고 페이지의 시작 지점과 읽을 개수를 구하는 논리는 사실상 같지만 구문이 약간씩 달라 호환성 확보가 어렵다. 그래서 표준이 중요한 것이다. 



13-3 통계

1.NTILE

NTILE(n) 함수는 레코드의 집합을 n 개의 영역으로 구분하고 소속 영역을 구한다. 인수 n은 나눌 영역의 개수를 지정한다. 다음 두 쿼리문을 실행해 보자. 

SELECT NTILE(4) OVER (ORDER BY salary DESC) AS 구간, name, salary FROM tStaff;

SELECT NTILE(4) OVER(PARTITION BY gender ORDER BY salary DESC) AS 구간, name, gender, salary FROM tStaff;


첫 번째 쿼리는 월급순으로 정렬한 후 직원을 4개의 그룹으로 나누어 각 직원이 속하는 그룹을 표시한다. 통계 용어로 사분위수라고 하는데 대략적으로 어느 정도 위치에 속하는지 알 수 있다. 20명을 4개의 그룹으로 나누었으니 각 그룹은 5명씩 포함한다. 

장보고부터 유관순까지는 고연봉 그룹에 속하고 대조용부터 안중근까지는 저연봉 그룹임을 알 수 있다. 동순위가 있어도 영역을 강제로 나눈다. 유관순, 홍길동, 정약용은 월급이 같지만 이름이 더 앞쪽인 유관순은 1구역에 속하고 길동이와 약용이는 2구역에 속한다. 

두번째 쿼리는 성별로 그룹을 나눈후 4분위수를 구했다. 남직원 14명을 4개의 구역으로 분할하고 여직원 6명도 4개의 구역으로 분할한다. 행의 개수가 구역의 배수가 아닐 때는 앞쪽 구역이 더 많은 행을 포함한다. 14는 4의 배수가 아니어서 각 구격을 4, 4, 3, 3으로 분할한다. 

구간을 나누면 극단값을 제외하고 유의미한, 또는 관심 있는 행만 골라 볼수 있다. 다음 명령은 성취도를 기준으로 5분할한 후 가운데 구간만 취한다. 너무 잘 하지도 않고 너무 떨어지지도 않는 적당한 수준의 직원을 선발하고 싶을 때 실용적인 방법이다. 


SELECT name, score FROM (SELECT NTILE(5) OVER(ORDER BY score DESC) AS 구간, tStaff.* FROM tStaff) S
WHERE S.구간 = 3;


성취도가 NULL인 직원의 순서로 인해 DBMS별로 약간의 차이가 발생할 수 있는데 이 경우 WHERE score IS NOT NULL조건으로 성취도 정보가 없는 직원을 제외하면 된다. 




2. LAG, LEAD

LAG은 이전 행의 필드를 읽고 LEAD는 다음 행의 필드를 읽는다. SELECT 문은 한 행씩 읽는 것이 보편적이지만 이 함수를 사용하면 결과셋의 이전, 이후 행을 읽을 수 있다. 기본 형식은 다음과 같다. 


LAG(필드, [offset, default]) OVER(PARTITION BY ORDER BY)

인수로 읽을 필드를 지정하며 단일값을 리턴하는 수식도 가능하다. offset은 앞뒤로 몇 행 거리를 읽을 것인지 지정하며 생략시 1을 적용하여 바로 앞 뒤의 행을 읽는다. offset에 음수를 지정할 수는 없어 앞뒤를 읽는 함수가 따로 있다. 

default는 행이 없을 때 읽을 값이며 생략시 NULL이다. 앞뒤행이 없을 때 0으로 간주하려면 이 인수에 0을 지정한다. MariaDB는 default 옵션을 지원하지 않아 IFNULL(LAG(), 0)구문을 대신 사용한다. 다음 명령은 이전월과 이후월의 매출을 같이 출력한다. 

SELECT year, month, sales, LAG(sales) OVER(ORDER BY year, month) AS priorMonth, LEAD(sales) OVER(ORDER BY year, month) AS nextMonth
FROM tMonthSale;


년도와 월로 정렬하면 시간순으로 매출을 출력한다. LAG 함수는 1개월 전의 매출을 읽고 LEAD 함수는 1개월 후의 매출을 읽는다. offset을 2로 지정하면 2개월 전후의 매출을 볼 수 도 있지만 보통은 인접행의 값을 보는 경우가 많다. 

첫달은 이전이 없고 마지막 달은 이후가 없는데 이때는 디폴트로 지정한 NULL을 출력한다. 12월의 prior 열에는 11월의 매출을 표시하고 next열에는 다음 해 1월의 매출을 표시한다. 바로 아래 위에도 있지만 옆으로 나란히 보여주니 읽기 편하다. 

9월의 이전 달이나 3월의 이후 달은 없어 NULL로 표시한다. 이 함수를 사용하면 이전 달과 비교하여 이번 달 매출이 얼마나 늘어났는지 조사할 수 있다. 


SELECT year, month, sales,
sales - LAG(sales) OVER(ORDER BY year, month) AS incsales FROM tMonthSale;


LAG(sales)함수로 이전 달 매출을 구하고 이번 달 매출에서 이 값을 빼면 매출 증가액이다. 현재값 뿐만 아니라 값의 증감분을 뽑아볼 때 유용하다. 

년도로 그룹핑하면 같은 년도내에서만 이전, 이후 행을 찾는다. 2021년과 2022년은 연결되어 있지만 년도별로 나누고 싶다면 OVER 절에 PARTITION BY year를 추가한다. 


SELECT year, month, sales,
LAG(sales) OVER(PARTITION BY year ORDER BY year, month) AS priorMonth,
LEAD(sales) OVER(PARTITION BY year ORDER BY year, month) AS nextMonth
FROM tMonthSale;


2021년 12월과 2022년 1월을 연속으로 보지 않고 따로 분리한다. 이 기능을 도입하기 전에는 자체 조인이나 CTE 같은 고급 기법을 동원해야 했지만 지금은 간단한 수식으로 이전, 이후 행을 조사할수 있어 편리하고 속도도 빠르다. 




3. 누적 비율

CUME_DIST 함수는 행의 누적 비율을 구하여 0~1사이의 실수로 리턴한다. PERCENT_RANK 함수도 비슷한 방식으로 동작하되 첫 행을 빼고 계산한다는 점만 다르다. tMonthSale 테이블로 두 함수를 테스트해 보자. 


SELECT year, month, sales, 
ROUND(CUME_DIST() OVER(ORDER BY year, month) * 100, 2) AS cume,
ROUND(PERCENT_RANK() OVER(ORDER BY year, month) * 100, 2) AS rank
FROM tMonthSale;


누적 비율 실수가 너무 길어 100을 곱하고 소수점 2자리까지만 백분율로 표시했다. 두 함수 모두 점점 증가하는 비율을 계산하며 마지막까지 다 더한 누적 비율은 항상 100이다. 


CUME_DIST 함수는 첫 행부터 비율에 포함하여 총 7개의 행에 대해 한 행당 14.29를 누적시켜 나간다. PERCENT_RANK 함수는 첫 행은 항상 0으로 계산하며 두 번째 행부터 누적 비율을 구한다. 나머지 6개 행에 대한 비율인 16.67을 계속 누적시킨다. 월급에 이함수를 적용하면 특정 직원의 월급이 상위 어느 정도 범위에 속하는지 알 수 있다. 


SELECT name, salary,
ROUND(CUME_DIST() OVER(ORDER BY salary) * 100 , 2) AS cume,
ROUND(PERCENT_RANK() OVER(ORDER BY salary) * 100, 2) AS rank
FROM tStaff;


직원 20명에 대한 비율이므로 한 단계는 5%이며 같은 월급은 같은 비율로 계산한다. 이 표를 보면 선덕여왕은 대략 하위 30%의 월급을 받고 있으며 월급 순위의 중간쯤은 윤봉길이다. 두 함수는 가장 낮은 월급을 받는 안중근의 비율을 5%로 볼지 아니면 0%로 볼지가 다르다. 부서 별로 누적 비율을 구하고싶으면 OVER 절에 PARTITION BY depart를 붙인다. 

SELECT depart, name, salary,
ROUND(CUME_DIST() OVER(PARTITION depart ORDER BY salary) * 100, 2) AS cume,
ROUND(PERCENT_RANK() OVER(PARTITION depart ORDER BY salary) * 100, 2) AS rank
FROM tStaff;

부서내의 인원만을 대상으로 누적 비율을 구한다. 실행 결과는 위 오른쪽 그림과 같으며 부서별로 경계를 나누어 누적 비율을 다시 계산한다. 



4. 첫값, 마지막 값

FIRST_VALUE는 그룹내의 첫 값을 구하고 LAST_VALUE는 마지막 값을 구한다. 단 LAST_VALUE가 인식하는 그룹은 지금까지 읽은 행 집합을 의미하기 때문에 항상 자기 자신이다. 전체 그룹에 대한 마지막 값을 구하려면 ROWS 옵션을 주어야 한다. 


SELECT name, salary,
FIRST_VALUE(salary) OVER(ORDER BY salary) AS first,
LAST_VALUE(salary) OVER(ORDER BY salary) AS midlast,
LAST_VALUE(salary) OVER(ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last
FROM tStaff;


tStaff 테이블을 월급순으로 정렬하여 세 함수의 값을 출력했다. 월급순으로 정렬한 첫 값은 안중근의 월급인 256이고 마지막 값은 장보고의 월급인 440이다. 이 값은 곧 그룹 내의 최소값과 최대값에 해당한다. 이 값과 각 행의 월급을 비교해 보면 최소 월급보다 얼마나 더 받고 있는지 최대 월급에는 얼마나 모자란지를 한눈에 알 수 있다. 


SELECT name, salary,
salary - FIRST_VALUE(salary) OVER( ORDER BY salary) AS 최저월급기준,
LAST_VALUE(salary) OVER (ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) - salary AS 최고월급기준 
FROM tStaff ORDER BY name;


SELECT depart, name, salary,
salary - FIRST_VALUE(salary) OVER(PARTITION BY depart ORDER BY salary) AS 최저월급기준,
LAST_VALUE(salary) OVER(PARTITION BY depart ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) - salary AS 최고월급기준 FROM tStaff ORDER BY depart, salary;


부서별로 비교하려면 OVER 절에 PARTITION BY depart 를 추가한다. 두 함수를 잘 활용하면 최소, 최대값을 구하는 별도의 서브쿼리를 쓰지 않아도 이런 통계를 쉽게 뽑을 수 있다. 




5. 백분위 수

PERCENTITLE_* 함수는 그룹 내의 백분위 수를 구한다. PERCENTILE_CONT는 연속적인(Continuous)백분위수를, PERCENTITLE_DISC는 이산적인(Discrete)백분위수를 구한다. 괄호 안에 백분위를 0~1사이의 실수로 지정하는데 0.5이면 정확히 중간쯤 0.3이면 30%쯤의 위치를 의미한다. 

WITHIN GROUP 절에 정렬 순서를 명시하여 백분위수를 구할 기준을 지정하고 OVER 절의 PARTITION BY로 그룹핑 기준을 지정한다. 그룹핑도 필수 구문이어서 생략할 수 없되 전체를 하나의 그룹으로 취급하려면 PARTITION BY NULL로 지정한다.


그룹핑한 후 정렬해야 백분위수를 구할 수 있다. 백분위수를 0.5로 지정하여 월별 판매량의 중위수를 구해보자. 중위수(Median)는 수치적인 평균과는 달리 위치적으로 중간쯤에 있는 값이며 극단값에 의한 통계 오차를 최소화 한다. 판매량 순으로 정렬하고 년도별로 그룹을 나누었다. 


SELECT year, month, sales,
PERCENTITLE_CONT(0.5) WITHIN GROUP(ORDER BY sales)
OVER(PARTITION BY year) AS cont,
PERCENTITLE_DISC(0.5) WITHIN GROUP(ORDER BY sales)
OVER(PARTITION BY year) AS disc
FROM tMonthSale;


먼저 2022년도의 결과부터 보자. 판매량 정보가 세 개 있으므로 연속 중위값이나 이산 중위값이나 둘 다 중간에 있는 4150임이 자명하다. 홀수 개의 행에 대해 중앙 지점을 찾는 것은 쉽고 단순하다. 이에 비해 2021년처럼 매출 정보가 4개 있는 짝수 개의 행에 대한 중앙을 특정하는 것은 애매하다.

연속 중위값은 4120과 4420의 딱 중간에 있는 값을 수학적으로 보간(Interpolation)하여 계산한 4270이며 실제 테이블에는 없는 값이다. 반면 이산 중위값은 4120으로 테이블에 존재하는 값이다. 연속 중위 값은 수치적으로 중앙인 이론적인 값이고 이산 중위값은 있는 값 중에 중앙에 가장 근접하는 실제값이다.