3-3 MariaDB

1. 소개

SQL Server나 오라클은 사용이어서 부담스럽고 학습용으로 제공하는 무료 버전도 덩치가 크고 복잡하다. 입문자의 초보 학습용으로는 더 작은 공개용 DBMS도 많다. 가벼운 실습 도구를 원한다면 MariaDB를 사용해 보자. 

기업은 고가이더라도 신뢰성있는 상용 DBMS를 선호하지만 중소 규모의 프로젝트는 오픈소스 DBMS도 쓸만하다. 특히 학습용으로 처음 배울 때는 크고 복잡한 것보다 작고 단순한 것이 유리하다. 여기서는 MySQL의 변형판인 MariaDB를 소개한다. 

MySQL은 1995년 MySQL AB사에서 리눅스의 mSQL을 기반으로 제작한 오픈소스 DBMS이다. 리눅스, 아파치, PHP와 궁합이 잘맞아 웹 게시판용으로 널리 사랑받았다. 2008년 MySQL AB를 썬이 10억 달러에 인수했다가 다시 2010년 오라클이 썬을 72억 달러에 인수하여 현재는 오라클의 소유이다. 

			10억				72억
MySQL		----->		SUN		----->		오라클
							독립
							----->		MariaDB


오라클은 이미 성능을 검증받은 자체 DBMS를 보유한데다 오픈소스에 호의적이지 않아 MySQL의 미래가 불투명해졌다. 과거 오픈소스를 사 들여 유료화했던 전력이 있으며 구글과 10년간의 자바 저작권 소송을 벌인 끝에 2021년 4월 최종 패소했다. MySQL의 부분 유료화 정책에 기존 사용자들이 불안해하자 원개발자가 2009년 MySQL 소스를 가져와 MariaDB를 새로 만들었다. 

소스가 같다 보니 MySQL과 기능적으로 거의 동일하며 요즘은 MariaDB가 먼저 개발되고 MySQL에 적용되는 식이라 오히려 더 최신 기능을 제공한다. 기부에 의해 프로젝트를 유지하며 무료 정책을 계속 고수하고 있어 MySQL을 사용하던 리눅스 배포판이 모두 MariaDB로 교체하는 추세이다. 마리아는 주 개발자의 둘째 딸 이름이다. 



2. 설치
MySQL과 MariaDB의 홈페이지는 각각 다음과 같다. 태생이 같고 둘 다 무료로 쓸 수 있지만 MySQL은 미래가 불투명해 가급적이면 MariaDB를 설치하는 것이 좋다. 


* https://www.mysql.com/

* https://mariadb.org/

새로 분가한 후 MariaDB를 빠른 속도로 업그레이드하고 있으며 2020년 7월 현재 최신 버전은 10.5.4이다. 운영체제별로 설치 파일과 소스를 제공하며 데비안용 deb 파일과 레드햇용 rpm 파일도 제공한다. 가급적 최신 버전을 받자. 


윈도우 환경에서는 64비트 msi 설치 파일이 무난하다. 사후 관리를 위해 개인 정보 입력을 요구하지만 꼭 정보를 제공하지 않아도 받을 수 있다. 설치 파일을 다운로드 받은 후 실행하여 설치한다. 


설치할 구성 요소와 설치 경로는 무난하게 선택되어 있어 디폴트를 받아들이면 된다. 데이터베이스는 보안이 중요해 루트 사용자의 비밀번호를 잘 관리해야 한다. 실제 서버에서는 복잡하게 설정해야 하지만 실습중에는 기억하기 쉬운 것이 좋다. 오라클과 마찬가지로 asdf로 설정했다. 

실 서비스용으로 설치한다면 원격지에서 루트로 접속하도록 허용해야 하지만 학습용으로는 굳이 그럴 필요 없어 원격 접속 옵션은 해제되어 있다. 한글을 사용하기 위해 제일 아래쪽의 use UTF-8 옵션을 선택한다. 다음은 서비스 이름과 포트 번호를 묻는다. 


초기에는 MySQL과의 호환성 유지를 위해 서비스 이름이 MySQL이었지만 최근에는 MariaDB로 변경하여 서비스도 독립했다. MySQL 대체용으로 쓴다면 서비스 이름을 MySQL로 바꾸는 것이 좋다. 포트 번호는 특별히 충돌하지 않는 한 디폴트인3306을 받아들인다. 

워낙 가벼워 설치는 금방 완료되며 설치 직후 서비스를 기동하여 즉시 사용할 수 있다. [시작] 메뉴에서 MySQL Client 를 실행하면 비밀번호를 묻는다. 비밀번호를 입력하면 MariaDB [(none)]프롬포트가 나타나며 이 상태에서 명령을 내릴 수 있다. 버전을 확인하는 다음 명령을 실행해 보자. 

SELECT version();

모든 명령문은 세미콜론으로 끝나며 세미콜론이 입력되어야 실행을 시작한다. 한꺼번에 여러 줄을 입력받아 실행하는 명령행의 특성상 명령의 끝을 명시하는 세미콜론이 필요하다. MariaDB의 현재 버전을 보여주며 다시 프롬프트 상태로 돌아온다. 


그래픽 환경이 나오기 전에는 명령행에서 데이터 관리를 했으며 아직도 명령행만 고집하는 사람이 있다. 아래 위 커서 이동키로 이전에 입력한 명령을 다시 불러올 수 있고 클립보드로 다른 편집기의 코드를 붙여넣을 수 있어 생각보다 쓸만하다. 

마우스에 손델 필요 없이 키보드로 모든 것을 수행할 수 있어 효율적이며 어디서나 실행할 수 있다는 것도 장점이다. 특히 리눅스나 원격접속 터미널 환경에서는 mariadb - u 사용자 -p 암호 형식으로 잽싸게 기동할 수 있어 간편하다. 





3. HeidiSQL

MySQL은 그래픽 쿼리툴이 없었으며 모든 것을 명령행에서 처리했다. 이에 비해 MariaDB는 분가하면서 GUI툴인 HeidiSQL을 패키지에 포함하였다. 독일 개발자인 안스가르 베커가 1999년 부터 MySQL Front라는 이름으로 개발을 시작하여 현재까지도 업그레이드하고 있으며 한글화까지 완료되어 있다. 

MariaDB에 기본 포함되어 있을 뿐이지 SQLite나 PostgreSQL SQL Server와도 함께 사용할 수있는 범용적인 쿼리툴이다. http://www.heidisql.com 에서 따로 설치하거나 최신 버전으로 업데이트할 수도 있다. DBMS와 쿼리툴은 항상 별개의 프로그램이다. 

[시작]메뉴의 MariaDB에서 HeidiSQL 을 선택하여 실행한다. 실행 직후 세션 관리자가 나타나 접속 정보를 묻는다. 왼쪽의 세션 이름에 unnamed 하나만 있는데 팝업 메뉴에서 [이름 바꾸기] 항목을 선택하여 Maria_Study로 변경하고 암호 asdf를 입력한 후 저장한다. 

한번 저장해 놓으면 이후부터는 [열기] 버튼만 눌러 바로 접속할 수 있다. 이 툴로 MariaDB의 기능 대부분을 사용할 수 있되 어차피 쿼리를 사용할거라면 이 실습은 굳이 해보지 않아도 상관없다. 세션창의 팝업 메뉴에서 [새로 생성] > [데이터베이스] 항목을 선택한다. 


새로 만들 데이터베이스의 이름과 문자셋을 물어오는데 이름만 Study로 입력하면 된다. study 데이터베이스가 생성되고 왼쪽 목록창에 나타난다. MariaDB 개체를 항상 소문자로 표시한다. 다음은 테이블을 만들어 보자. study 노드의 팝업 메뉴에서 [새로 생성] > [테이블] 항목을 선택한다. 

테이블을 디자인하는 창이 열리는데 이름란에 tCity 를 입력한다. 아래쪽의 열란에서 [추가 ] 버튼을 눌러 열의 이름과 타입을 선택한다. [추가] 버튼을 눌러 열을 계속 생성하며 잘못 만든 열은 [제거] 버튼으로 삭제하고 위, 아래로 열을 이동하여 순서를 조정한다. 

도시 정보를 저장하는 테이블을 디자인 한 후[저장] 버튼을 누르면 tCity 테이블이 생성되며 왼쪽의 개체 목록이 나타난다. tCity 테이블을 더블클릭한 후 [데이터] 탭의 팝업 메뉴에서 [행 삽입] 항목을 선택하면 새로운 행이 삽입된다. 이 행에 직접 데이터를 입력한다. 

행이 잘 삽입되었는지 쿼리창으로 이동하여 쿼리를 실행해 보자. SELECT * FROM tCity; 명령을 입력한 후 툴바의 [실행] 버튼을 클릭하거나 단축키 F9 를 누르면 실행 결과가 하단에 나타난다. 일부 명령만 실행할 때는 블록을 선택해 놓고 Ctrl + F9를 누르거나 아니면 실행할 명령이 있는 줄에 커서를 두고 Ctrl + Shift + F9를 누른다. 


디자인만 다를 뿐 그래픽 환경에서의 작업은 SQL Developer나 SSMS와 별 차이가 없다. 같은 종류의 작업을 처리하는 경쟁 제품이다 보니 그럴 수밖에 없다. 메뉴나 대화상자를 통한 조작 보다는 쿼리 실행 환경 정도로만 사용하는 것이 좋다. 

일반적인 용도의 쿼리툴로는 가볍게 쓸만하지만 모델링 등의 고급 기능 각, DBMS에 특화된 기능은 부족하다. 윈도우에서만 쓸 수 있으며 아직 오라클은 지원하지 않는다. 게다가 예상외로 버그가 많아 안정적으로 믿고 쓰기는 애매하다. 





4. 테이블 생성
쿼리툴을 쓰더라도 마우스와 대화상자를 사용하는것은 비효율적이다. 이제부터는 모든 것을 SQL로 처리하는 습관을 들이는 것이 좋다. 하이디로 만든 실습용 study DB를 삭제하고 처음부터 다시 만들어 보자. 명령행 또는 하이디의 쿼리창에서 명령문만 입력하면 된다. 먼저 다음 명령으로 데이터베이스를 생성한다. 

MariaDB [(none)]> CREATE DATABASE Study;
Query OK, 1 row affected(0.004 sec)

명령을 내리는 즉시 Study DB가 생성된다. Query OK라고 출력되면 DB가 잘 만들어진 것이다. SHOW DATABASES; 명령으로 확인해 보면 study가 보인다. 


새로 만든 DB를 사용하려면 USE 명령으로 활성화한다. 모든 DB 개체는 활성 DB에 생성된다. 

MariaDB [(none)]> USE Study;
Database changed
MariaDB [Study]>


프롬프트가 MariaDB [Study]로 변경된다. 다음은 스크립트를 실행하여 DB안에 테이블을 생성한다. 긴 명령을 실행할 때는 키보드로 일일이 입력할 필요 없이 클립보드에서 붙여 넣으면된다. 


CREATE TABLE tCity
(
	name	CHAR(10) PRIMARY KEY,
	area	INT NULL,
	popu	INT NULL,
	metro	CHAR(1) NOT NULL,
	region CHAR(6) NOT NULL
);


여러줄로 된 명령은 마지막에 세미콜론을 꼭 붙여야 함을 유의하자. 세미콜론으로 끝나지 않으면 -> 프롬프트가 나타나며 다음 줄을 입력하라고 표시한다. 하이디에서는 위, 아래로 이동할 수 있지만 명령행에서는 잘못 입력한 줄로 이동하여 수정할 수 없다. -> 프롬프트 상에서 \c를 입력하여 취소하고 다시 입력해야 한다. 테이블을 잘 생성했는지 SHOW TABLES; 명령으로 확인해 보자. 

MariaDB [Study]> SHOW TABLES;


잘 생성되어 있다. 테이블의 구조를 확인할 때는 DESCRIBE tCity; 명령을 사용하며 표 형태로 깔끔하게 보여준다. 새로 만든 테이블에 데이터를 입력해 보자. SQL Server나 오라클과 똑같은 INSERT 명령을 실행하면 된다. 삽입 후 SELECT * FROM tCity 문으로 테이블의 데이터를 확인해 보자. 다음은 하이디에서의 실행 모습이다. 아무래도 스크린 편집기가 편리하고 출력 결과도 표 형태로 깔끔하게 보여준다. 


Study DB를 지운 후 다시 반복해 보자. 하이디에서는 팝업 메뉴를 선택하면 되고 명령행에서는 USE mysql로 다른 DB를 선택한 후 DROP DATABASE Study; 명령으로 지운다. DB를 다시 만들고 CREATE TABLE tCity...명령 실행 후 INSERT 명령만 반복하면 깜쪽같이 다시 살아 난다. 


마우스질을 할 필요도 없고 1초도 채 걸리지 않는다. tStaff 테이블도 스크립트만 돌리면 금방 생성된다. 이것이 스크립트의 힘이다. 명령어를 텍스트 형태로 저장해 놓고 반복 실행하면 언제든지 원하는 상태로 복구할수 있다. 지금까지의 실습에서 보았다시피 세 DBMS의 SQL 명령이 단 한글자도 다른 부분이 없다. 이래서 표준은 애써 배울 가치가 있는 것이다. 