4. 제약의 편집

테이블의 제약도 편집 대상이다. 보통은 테이블을 생성할 때 제약을 지정하지만 중간에 제약을 추가하거나 제거하는 경우도 종종있다. 모델링편에서 직원과 프로젝트간의 관계 실습을 위해 tEmployee와 tProject 테이블을 생성했다. 

두 테이블은 각각 PK와 FK가 지정되어 있어 안정적으로 무결성을 지킨다. 제약이 없을 때의 문제점을 복습해 보기 위해 tProject 테이블을 지우고 새로 만들어 보자. 필드 목록만 가지며 어떠한 제약도 지정하지 않았다. 

DROP TABLE tProject;

CREATE TABLE tProject
(
	projectID	INT,
	employee VARCHAR(10),
	project	VARCHAR(30),
	cost	INT
);


기본키조차 지정하지 않아 일련번호인 projectID를 중복 삽입해도 전혀 방어하지 못한다. 다음 명령이 아무 이상 없이 실행되며 기본키를 NULL로 지정해도 삽입해 버린다. 

INSERT INTO tProject VALUES (1, '김상형', '홍콩 수출건', 800);
INSERT INTO tProject VALUES (1, '김상형', 'TV 광고건', 3400);


일련번호가 같은 두 개의 프로젝트가 있어 차후 이 테이블로 조인을 수행하거나 서브쿼리를 실행해도 정상 동작을 보증하기 어렵다. 그래서 기본키는 꼭 있어야 한다. 다음 명령으로 기본키 제약을 추가한다. 

TRUNCATE TABLE tProject;
ALTER TABLE tProject ADD CONSTRAINT PK_projectID PRIMARY KEY(projectID);

이미 기본키의 조건을 위배하는 레코드를 삽입해 놓았기 때문에 규칙에 맞게 테이블을 정리해야 한다. 테이블을 비워버리는 것이 제일 간편하다. 그리고 ADD CONSTRAINT 명령으로 적당한 이름과 함께 PRIMARY KEY를 지정하고 괄호 안에 대상 필드를 명시한다. 두 개 이상의 키를 나열하여 복합키를 지정할 수도 있다. 

기본키로 지정한 필드는 비워둘 수 없고 중복값을 입력할 수도 없어 안정성이 향상된다. 이제 1번 일련번호로 삽입하는 명령은 하나만 가능하며 두 번째부터는 실패 처리한다. 기본키를 추가하는 방법이 있으면 제거하는 방법도 당연히 있어야 한다. 


오라클, SQL Server : ALTER TABLE tProject DROP CONSTRAINT PK_projectID;

오라클, MariaDB : ALTER TABLE tProject DROP PRIMARY KEY;


DROP CONSTRAINT 명령 다음에 제거할 제약 이름을 지정한다. MariaDB는 이 명령 대신 DROP PRIMARY KEY로 기본키를 제거한다. 어차피 기본키는 테이블당 하나밖에 없어 이름을 굳이 밝히지 않아도 조사할 수 있다. 오라클은 두 방식 모두 지원한다. 제약을 삭제할 때는 규칙을 제거하는 것이므로 기존 데이터의 영향을 받지 않는다. 

멀쩡히 잘 동작하는 기본키를 일부러 제거하는 경우는 드물겠지만 기본키를 다른 필드로 바꾸는 경우는 종종있다. 기본키 제약은 테이블당 딱 하나만 지정할 수 있어 이미 기본키가 있는 상태에서 다른 기본키를 추가할 수 없다. 그래서 기존의 기본키 제약을 먼저 삭제한 후 추가해야 한다. 

직원과 프로젝트는 긴밀히 연관되어 있어 프로젝트를 수행할 직원이 반드시 있어야 한다. 그러나 tProject에 외래키 제약이 걸려있지 않아 직원 목록에 없는 이름도 이상 없이 삽입해 버려 무결성이 쉽게 깨진다. 


INSERT INTO tProject VALUES(2, '바이든', '방위비 협상', 320);


바이든은 직원 목록에 없는 사람이다. 이런 상황을 방지하려면 외래키 제약을 지정한다. tProject 테이블의 employee 필드와 tEmployee 의 name 필드를 연결해 보자. 먼저 외래키 제약을 위반한 바이든 직원을 해고한다. 


DELETE FROM tProject WHERE employee = '바이든';
ALTER TABLE tProject ADD CONSTRAINT FK_Project_Employee FOREIGN KEY(employee) REFERENCES tEmployee(name);

적당한 이름을 주고 외래키 필드와 연결할 테이블, 필드를 지정한다. 기본키에 비해 지정할 사항이 많아 구문이 길다. 이제 직원 테이블에 없는 이름으로는 프로젝트를 삽입할 수 없다. 외래키 제약을 제거하는 방법은 기본키를 제거하는 것과 같아 제약명만 주면 된다. 


ALTER TABLE tProject DROP CONSTRAINT FK_project_Employee;

기본키와 외래키를 편집할 일은 흔하지 않다. 그러나 실무에서는 불가피하게 변경해야 하는 경우가 가끔 있고 일관된 명칭 규칙을 위해 이름을 바꾸는 예도 가끔 있다. 구문까지 외울 필요는 없지만 편집 가능하다는 것은 꼭 알아 두어야 한다. 



14-2 필드 수정

1. 타입변경

필드 편집 명령은 속성이나 제약 사항 등을 변경하는데 주로 필드의 타입을 변경한다. 완전히 다른 타입으로 변경하는 경우는 드물고 저장 용량이 부족해 늘리는 경우가 많다. 필드 편집 명령은 DBMS마다 다르다. 

오라클 : ALTER TABLE 테이블명 MODIFY 필드속성
SQL Server : ALTER TABLE 테이블명 ALTER COLUMN 필드 속성
MariaDB : ALTER TABLE 테이블명 MODIFY [COLUMN] 필드 속성

MariaDB는 COLUMN 키워드가 옵션인데 비해 오라클은 MODIFY 만 쓴다는 사소한 차이점이 있다. 오라클도 10g 이전 버전은 COLUMN 키워드가 옵션이었다. 다음 명령은 region 컬럼의 길이를 6자에서 30자로 대폭 늘린다.

오라클, MariaDB : ALTER TABLE tCity MODIFY region CHAR(30);
SQL Server : ALTER TABLE tCity ALTER COLUMN region CHAR(30);

길이 뿐만 아니라 VARCHAR(30)으로 타입도 같이 변경할 수 있다. 지역이 보통 2글자여서 6바이트 길이로 설정했는데 이 상태에서는 제주특별자치도 같은 긴 지역명을 넣을 수 없다. 30바이트로 충분히 늘리면 잘 들어간다. 

INSERT INTO tCity VALUES('제주', 1849, 67, 'y', '제주특별자치도');


길이를 넉넉하게 늘리는 것은 대개의 경우 별 문제가 없다. 반면 더 짧게 줄이는 것은 불가능하다. 기존 데이터를 버리거나 임의로 자를수 없기 때문이다. 다음 명령은 에러 처리된다. 


오라클, MariaDB : ALTER TABLE tCity MODIFY region CHAR(1);
SQL Server : ALTER TABLE ALTER COLUMN region CHAR(1);

6바이트 길이를 1바이트로 줄이면 region 필드에 이미 저장되어 있는 경기, 강원, 충청 같은 지역명을 보존할 수 없다. 저장 용량을 아끼기 위해 길이를 굳이 축소하는 경우는 흔치 않다. 정 줄이려면 백업 후 재생성하고 다시 읽어오는 번거로운 과정을 거쳐야 한다. 

다음은 필드의 타입을 변경해보자. 애초 tCity를 디자인할 때 popu에 만명 단위의 인구수를 저장하려고 했는데 더 정밀하게 저장할 필요가 생겼다고 하자. popu 타입을 소수점 이하 2자리까지, 그러니까 백명 단위까지 표현 가능한 실수 타입으로 바꾸어 보자. 


오라클, MariaDB : ALTER TABLE tCity MODIFY popu DECIMAL(10, 2);
SQL Server : ALTER TABLE tCity ALTER COLUMN popu DECIMAL(10, 2);

popu 필드는 원래 정수만 지정하는 INT 타입이었는데 DECIMAL(10, 2) 타입으로 변경하여 정수부는 100억까지, 소수부는 2자리까지 저장하는 실수 타입으로 변경했다. 과연 실수가 들어가는지 오산의 인구수를 21만 2389명으로 바꿔보자. 


UPDATE tCity SET popu = 21.2389 WHERE name = '오산';


popu가 정수형이면 21까지만 저장하고 소수점 이하는 잘린다. 그러나 실수 타입으로 변경하면 반올림까지 처리하여 소수점 두 자리까지 잘 저장한다. 정수보다 실수가 더 큰 타입이기 때문에 별 문제는 없다. 다음은 SQL Server의 실행 결과이다. 

그러나 오라클에서는 "정도 또는 자리수를 축소할 열은 비어 있어야 합니다." 에러를 출력한다. 이유가 좀 복잡하다. 타입을 변경할 때는 기존 타입과 변경할 타입이 호환되어야 하고 새 타입이 더 커야 한다. 정수와 실수는 호환 타입이지만 오라클의 타입 맵핑이 과도하게 되어 있다. 

오라클은 별도의 INT 타입이 없어 NUMBER(38, 0)으로 맵핑한다. 10의 38승은 비현실적으로 큰 값이다. 정수 표현을 위해 38자리를 다 써 버렸기 때문에 소수점 이하 자리를 위해 확장할 여유분이 없다. 이에 비해 MariaDB는 INT 를 NUMBER(11, 0)으로 맵핑하여 여유분이 있다. 

그렇다면 과연 방법은 없을까? 과정이 좀 복잡해도 방법은 있기 마련이며 알고 보면 원론적이다. 타입을 함부로 변경하지 못하는 이유는 에러 메시지의 힌트대로 비어 있지 않기 때문이다. 

원래 데이터 백업해 놓고 테이블을 비운후 필드의 타입을 변경하면 잘 된다. 그리고 백업한 데이터를 다시 퍼온다. 오라클에서 다음 명령을 순서대로 실행해 보자. 


CREATE TABLE tCityBackup AS SELECT * FROM tCity;				--백업
TRUNCATE TABLE tCity;							-- 원본 비움
ALTER TABLE tCity MODIFY popu DECIMAL(10, 2);				-- 필드 타입 변경
INSERT INTO tCity SELECT * FROM tCityBackup;					-- 백업 복원
UPDATE tCity SET popu = 21.2389 WHERE name = '오산';				-- 필드값 변경
COMMIT;									-- 확정
DROP TABLE tCityBackup;							-- 백업 삭제


4단계까지가 타입을 변경하는 것이고 나머지는 잘 변경되었는지 확인 및 정리하는 과정이다. CREATE SELECT와 INSERT SELECT 명령을 적절히 잘 써먹었다. 임시 테이블을 활용하면 삭제할 필요가 없어 더 간편하다. 확인해 보자. 


오산의 인구가 반올림까지 처리되어 21.24로 잘 저장되어 있다. 사본 떠 놓고 비운 후 변경하고 다시 퍼오는 간단한 작전이지만 모든 형태의 변경을 다 수행할 수 있는 필살기이다. 타입을 바꾸는데 수고스럽게 이런 잡스러운것까지 직접 해야 하느냐 싶겠지만 원래 데이터는 손이 많이 가는 존재이다. 

타입을 변경할 때는 기존 데이터의 보존 여부를 주의해야 한다. 새 타입이 기존 데이터를 손실 없이 저장할수 있어야 한다. 문자열을 수치형으로 바꿀 때는 기존 문자열에 수치형 문자(숫자, 소수점, 부호)만 들어 있어야 한다. 모든 타입을 충분한 길이의 문자열로 바꾸는 것은 항상 가능하다. 



2. 필드 제약

필드의 제약도 필요에 따라 편집 가능하다. 최초 테이블을 디자인할 때는 NULL 허용이었는데 중간에 규칙이 바뀌어 NULL을 허용하지 않을 수도 있다 tProject의 project 필드가 NULL 허용으로 되어 있어 이름을 지정하지 않고도 삽입할 수 있다. 

INSERT INTO tProject VALUES(3, '트럼프', NULL, 10);

project 필드에 NULL을 허용하지 않으려면 이 필드를 수정하여 NOT NULL 속성을 추가한다. 단 이때 제약의 변경에 의해 무결성을 훼손하지 말아야 한다. NULL 허용 기능 타입을 NOT NULL로 수정하려면 기존의 모든 데이터는 해당 필드가 NULL이 아니어야 한다. 

NULL인 필드가 존재하는 상태에서 NULL을 허용하지 않는 NOT NULL 속성으로 바꿀 수는 없다. 앞에서 이미 project 필드가 NULL인 레코드를 삽입해 놓았기 때문에 규칙에 맞지 않는 레코드를 먼저 삭제해야 한다. 


DELETE FROM tProject WHERE  employee = '트럼프';
오라클, MariaDB : ALTER TABLE tProject MODIFY project VARCHAR(30) NOT NULL;
SQL Server : ALTER TABLE tPrject ALTER COLUMN project VARCHAR(30) NOT NULL;

NOT NULL을 NULL로 변경하는 것은 규칙을 완하는 것이므로 기존 데이터의 영향을 받지 않는다. 반대의 경우는 기존 데이터가 새로 추가할 제약을 모두 만족할 때만 변경할 수 있다. 
정 바꾸려면 NULL값을 다 제거하여 요건을 만족한 후 바꿔야 한다. 

이 점은 다른 제약도 마찬가지이며 상식적인 규칙이다. 무결성을 지키기 위해 제약을 추가하는데 제약 자체가 무결성을 위반하는 것은 말이 안된다. cost 필드의 디폴트값을 100으로 지정해 보자. 

오라클 : ALTER TABLE tProject MODIFY  cost DEFAULT 100;
MariaDB : ALTER TABLE tProject MODIFY cost VARCHAR(30) DEFAULT 100;
SQL Server : ALTER TABLE tProject ALTER COLUMN project VARCHAR(30) DEFAULT 100 NOT NULL;

오라클은 제약만 따로 변경할 수 있지만 MariaDB는 타입도 같이 지정해야 한다. 이후 cost 필드를 생략하고 삽입하면 자동으로 100을 적용한다. 

INSERT INTO tProject (projectid, employee, project ) VALUES (4, '오바마', '기후 변화 회의 참석');

디폴트는 다른 제약과는 달리 추가할 때도 기존 데이터의 영향을 받지 않으며 이미 입력해 놓은 값을 건드리지도 않는다. 기본값은 미래에 삽입할 때 적용하는 것일 뿐 과거에 이미 삽입해 놓은 값에 대한 제약은 아니어서 기존 데이터가 무엇이건 상관없다. 

다음은 체크 제약 조건을 추가해 보자. 체크 제약이 없으면 필드에 임의의 값을 입력할 수 있다. 심지어 비용에 음수를 입력해도 잘 들어간다. 

INSERT INTO tProject VALUES (5, '클린턴', '북핵 제거', -100);

프로젝트 비용이 음수인 것은 논리에 맞지 않아 이후 어떤 문제를 일으킬지 알수 없다. 체크 제약 조건을 추가하면 엉뚱한 데이터의 입력을 방지한다. 기존데이터를 삭제한 후 체크 제약을 추가하면 이후 0보다 더 큰 비용만 입력할 수 있다. 

DELETE FROM tProject WHERE employee = '클린턴';
ALTER TABLE tProject ADD CONSTRAINT cost_check CHECK(cost > 0);


모든 제약을 자유롭게 편집할 수 있지만 DBMS마다 문법이 조금씩 달라 헷갈리는 면이 있다. 게다가 편집할 일이 빈번하지 않아 문법을 외우기도 어렵고 정확히 구사하기도 쉽지않다. 이럴 때는 그래픽 툴의 도움을 받는 것이 더 편리하고 확실하다. tProject의 팝업 메뉴에서 편집 항목을 선택하면 기본값과 제약 조건을 모두 보여준다.

대화 상자를 통해 제약의 목록을 보며 실시간으로 편집할 수 있어 편리하다. 오라클 뿐만 아니라 모든 DBMS의 그래픽 툴도 거의 똑같은 기능을 제공한다. SQL 문으로 편집하는 것도 멋진 일이지만 간단한 작업은 툴만 잘 활용해도 충분하다. 


※ 호환성 체크
제약을 추가할 때는 기존 데이터가 제약을 위반하지 않아야 한다. cost에 음수를 방지하는 체크 제약은 이미 삽입한 레코드에 음수가 있으면 지정할수 없는 것이 원칙적이다. 그러나 대량의 테스트 데이터를 만들 때는 이런 강제 규칙이 불편할 수도 있어 SQL Server는 WITH NOCHECK옵션을 지원한다

ALTER TABLE tProject WITH NOCHECK ADD CONSTRAINT cost_check CHECK(cost > 0);

이 명령은 체크 제약을 추가하되 기존 데이터는 굳이 살펴보지 말라는 뜻이다. 물론 이후에 삽입하는 레코드는 체크 제약을 반드시 지켜야 한다. 테스트 데이터를 만들 때 편리하지만 무결성을 위반한 데이터를 방치한다는 면에서 바람직한 옵션은 아니다. 

SQL Server는 여섯 가지 표준 제약 외에 룰(RULE)과 디폴트(DEFAULT)라는 고유의 제약을 지원했었다. 각각 체크와 기본값에 해당하며 현재는 표준 제약으로 대체 가능해 사용을 권하지 않는다. 이전 버전의 DB에서 사용하는 예가 가끔 있으므로 기능의 존재 자체만 알아 두자. 




3. 필드 순서 조정

필드 목록은 필요에 따라 얼마든지 추가, 삭제 가능하다. 그러나 필드를 새로 추가하면 항상 제일 뒤에 위치한다. 관계형 DB에서 필드나 레코드나 순서는 별 의미가 없으며 기능적 차이도 없다. 필드의 출력 순서는 SELECT의 필드 목록으로 지정하고 레코드의 출력 순서는 ORDER BY로 지정할 수 있으니 정보만 잘 저장하면 된다. 

문제는 SELECT * 으로 출력할 때나 그래픽 툴에서 볼 때 보기 싫고 불편하다는 점이다. 테이블의 제일 뒤쪽에는 memo, remark 등 잡다한 정보를 저장할 주석이나 비고 필드를 주로 배치한다. 그 뒤쪽에 중요한 필드가 있다면 중간에 디자인이 자주 춤을 췄다는 증거이다. 자주 사용하는 필드를 가급적 앞에 배치해야 보기도 좋고 쓰기도 편하다. 

필드의 순서에 큰 의미가 없다보니 순서를 변경하는 공식적인 방법은 없다. tCity의 지역 필드인 region을 name 뒤로 옮기고 싶어도 오라클과 SQL Server는 지원하지 않는다. 다만 MariaDB만 혼자 좀 튀어 볼려고 순서 편집을 지원한다. 만약 꼭 필드 순서를 조정하고 싶다면 방법이 아주 없는 것은 아니다. 앞에서 타입을 변경할 때와 마찬가지로 백업 떠 놓고 완전히 새로 만들면 된다. 


CREATE TABLE tCityBackup AS SELECT * FROM tCity;
DROP TABLE tCity;
CREATE TABLE tCity
(
	name	CHAR(10) PRIMARY KEY,
	region	CHAR(6) NOT NULL,
	area	INT NULL,
	popu	INT NULL,
	metro	CHAR(1) NOT NULL
);
INSERT INTO tCity (name, region, area, popu, metro) SELECT name, region, area, popu, metro FROM tCityBackup;
COMMIT;
DROP TABLE tCityBackup;

앞 실습과 과정은 유사하되 TRUNCATE 로 테이블을 비우는게 아니라 아예 DROP 으로 지워버리고 CREATE 로 새로 만든다는 점이 다르다. 기존 스크립트를 편집하여 region 필드의 위치를 원하는 곳으로 옮겼다. 처음부터 다시 만드는 것이라 순서 뿐만 아니라 타입 이나 제약 사항까지도 마음대로 설정할 수 있다. 

백업에 저장해 놓은 원본 데이터를 가져올 때는 필드 순서에 주의해야 한다. 백업에는 region이 제일 뒤에 있지만 읽을 때 name, region, area, popu, metro 순으로 필드 목록을 지정하고 이 순서대로새 테이블에 복사하면 깜쪽같이 원래 데이터를 복원해 낸다. 

사본을 생성한 후 원본은 지우고 사본을 원본 이름으로 변경하는 더 간단한 방법도 있다. 그러나 CREATE SELECT 명령은 사본의 PK와 인덱스를 복사하지 않아 완벽하지 않다. 테이블을 새로 생성하는 방법도 테이블이나 필드에 대한 설명이 리셋되는 문제가 있다. 

간단한 경우는저장해둔 스크립트를 약간 수정해도 되지만 복잡한 테이블은 툴이 생성한 스크립트를 읽어 수정하는 것이 좋다. TCITY 노드를 클릭한 후 SQL 탭에서 생성 스크립트를 읽어 편집하는 방법이 완벽하다. 이렇게 복잡한 작업은 그래픽 환경에서 처리하는 것도 한 방법이다. 

SQL Server의 SSMS는 테이블 디자인 창에서 필드를 드래그하여 원하는 위치에 떨어뜨리면 순서를 즉시 바꿔준다. 역시 비주얼 툴이 편리하다. 그러나 이 상태로 바로 저장할 수 없으며 옵션의 디자이너 탭에서 "테이블을 다시 만들어야 하는 변경 내용 저장 안함" 옵션을 해제해야 한다. 

SQL Developer는 필드 순서를 편집하는 기능을 제공하지 않지만 상용 쿼리툴인 Toad는 필드 순서를 변경할 수 있다. 그러나 그래픽 툴도 앞에서 보인 스크립트를 순서대로 실행하여 새로 테이블을 만드는 방식을 쓴다. SSMS의 옵션명에도 테이블을 새로 만든다고 분명히 명시되어 있다.

결국 어떤 방법을 사용하든 번거롭기는 마찬가지이다. 필드의 순서를 변경하면 SELECT *으로 테이블을 덤프할 때 결과셋의 필드 순서가 바뀌어 응용 프로그램도 같이 수정해야 한다. 이런 경우 때문에 *을 쓰지 말고 필드 목록을 일일이 나열하는 것이 더 바람직하다. 