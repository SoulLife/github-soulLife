4. 테이블 생성
학습을 위한 모든 준비를 마쳤으니 이제  본격적인 실습을 해 보자. 처음이니만큼 그래픽 환경에서 마우스로 실습을 진행한다. 실무에서는 주로 스크립트를 사용하지만 개체를 관리할 때는 그래픽 환경도 효율적이다. 너무 상세히 볼 필요는 없고 한 번씩만 따라 해 보자. 

순서상 모든 DB 오브젝트를 저장하는 데이터베이스를 먼저 만들어야 하는데 오라클은 설치시에 기본 DB를 생성해 놓는다. Study DB 안에 테이블부터 만들어 보자. Study의 테이블 노드에서 팝업 메뉴를 열고 [새 테이블]을 선택한다. 

빈 테이블 디자인 창이 열린다. 테이블 이름란에 tCity라고 쓴다. 접두어 t는 테이블이라는 뜻이며 City는 도시에 대한 정보를 가진다는 뜻이다. 처음 만들어 볼 테이블은 우리나라 도시의 인구 면적 등을 저장하는 도시 테이블이다. 

최초 COLUMN1만 등록되어 있는데 이름을 name으로 변경한다. 테이블명이나 필드명은 소문자로 입력해도 자동으로 대문자인 TCITY, NAME으로 바뀌는데 SQL은 대소문자를 구분하지 않으므로 중요치 않다. 편한대로 입력하면 된다. 

name 필드에는 도시의 이름을 저장한다. 데이터 유형은 가변 길이 문자열인 VARCHAR2가 디폴트인데 목록에서 고정 길이 문자열인 CHAR로 선택한다. 우리 나라의 도시 이름은 대체로 일정(거의 다 두글자이며 의정부, 동두천, 남양주, 서귀포만 세 글자다)해서 CHAR 타입이 유리하다. 

길이는 넉넉하게 10바이트로 잡는다. 도시의 이름은 필수값이므로 널이 아님란을 체크한다. 또한 이 필드는 기본키이다. 제일 왼쪽의 PK란을 클릭하면 열쇠 모양의 아이콘이 표시된다. 

필드 하나에 대한 정보를 다 입력한 것이다. 오른쪽 위의 + 버튼을 누르면 아래쪽에 새로운 행을 추가하는 빈칸을 생성한다. 이 행에 도시의 면적을 저장할 area 필드를 추가한다. 면적은 정수이므로 INT 타입으로 지정한다. INT는 길이가 정해져 있어 크기는 따로 밝히지 않아도 된다. 

이런 식으로 테이블에 포함할 필드의 목록을 작성한다. 계속해서 인구수를 저장할 popu 필드와 광역시 여부인 metro 필드, 소속 지역인 region 필드를 추가한다. 타입, 크기, 널 여부 등을 정확히 입력해야 한다. 여기까지 입력하면 대화상자 모양은 다음과 같다. 


잘못 입력한 것이 있으면 언제든지 수정할 수 있다. 상단의 X 버튼으로 잘못 입력한 필드를 삭제하며 오른쪽의 화살표 버튼으로 필드의 순서를 조정한다. 완전히 다 입력했으면 [확인] 버튼을 누른다. 접속창의 테이블 노드 제일 아래쪽에 TCITY 테이블이 추가된다.

이 노드의 팝업 메뉴에서 편집 항목을 선택하면 테이블 구조는 언제든지 편집할 수 있다. 노드를 클릭하거나 팝업 메뉴에서 [열기] 항목을 선택하면 여러 개의 탭으로 구성된 편집창이 나타나며 테이블의 모든 것을 살펴볼 수 있다. 

첫 탭인 열은 어떤 열로 구성되어 있는지 보여준다. [데이터] 탭으로 이동하면 저장된 데이터가 나타나는데 방금 막 만든 테이블이어서 텅 비어있다. 여기에 레코드를 채워보자. 상단 툴바의 버튼 (단축키 Ctrl + I)을 누른후 엑셀 시트 편집하듯이 입력한다. 


NAME		AREA		POPU		METRO	REGION
서울		605		974		Y		경기
부산		765		342		Y		경상
오산		42		21		N		경기


서울 부산 오산에 대한 정보만 대충 넣어 보자. 시트에 입력했다고 해서 테이블에 입력한 것은 아니며 툴바 다섯 번째의 커밋 버튼(단축키 F11)을 눌러야 저장한다. 셀을 더블클릭해서 데이터를 수정하며 잘못 입력한 행은 X(단축키 Ctrl + D)버튼을 눌러 삭제한다. 

여기까지 그래픽 환경에서 테이블을 만들고 데이터를 입력하는 실습을 해 보았다. 전체 실습 과정을 잘 정리해 보자. 워드나 엑셀 같은 일반적인 응용 프로그램과 크게 다르지 않아 상식적이다. 익숙해지면 1분도 채 걸리지 않는다. 

1. tCity 테이블을 생성한다. 

2. 필드 디자인 및 기본키를 지정한다. 

3. [데이터] 탭에서 3개의 레코드를 입력한다. 

4. 커밋 버튼을 눌러 저장한다. 

tCity 테이블은 앞으로의 실습에 계속 사용할 샘플 테이블이다. 테이블이 거대해지면 실습이 번거로워 최대한 간단히 디자인했는데 더 많은 정보를 저장하려면 필드만 늘리면 된다. 각 필드 의미는 다음과 같다. 

필드		타입			설명
name		CHAR(10)		도시명
area		INT			면적, 제곱킬로미터 단위
popu		INT			인구, 만명 단위
metro		CHAR(1)		광역시 여부, y 또는 n
region	CHAR(6)		소속 지역

광역시 여부는 별도의 논리형이 없어 y, n 한자리 영문자로 표기한다. region은 경상, 전라, 강원 등의 소속 지역이되 편의상 남도, 북도는 구분하지 않고 광역시도 인근도에 있는 걸로 했다. 예를 들어 서울은 경기도 소속이고, 부산은 경상도 소속이다. 




2-2 쿼리
1. 마우스 작업의 단점
그래픽 환경에서 테이블을 만들고 데이터를 입력 및 확인하는 실습을 해 보았다. 화면에서 보여주는대로 마우스를 딸깍거리며 작업하니 초보자에게도 쉽고 직관적이다. 그러나 쉬운 것은 그만큼의 비효율을 동반하기 마련이어서 실제 업무를 수행하기에는 단점이 많다. 

* 작업 속도가 느리다. 테이블 하나 만들려면 수십 개의 필드 이름과 타입을 일일이 입력해야 하며 수백 행의 데이터를 정확히 입력하는 것은 더 어렵다. 그래픽 환경이 아무리 직관적이어도 양이 많으면 성가신 노가다일 뿐이다. tCity 테이블을 여러 컴퓨터에 똑같이 만들어야 한다면 정말 끔찍한 일이다. 

* 마우스 동작은 사람이 직접 수행해야 하며 복사하거나 저장할 수 없다. 따라서 똑같은 작업을 재현할 수 없으며 처음부터 다시 하는 수밖에 없다. 다른 사람에게 전달하거나 작업 절차를 알려주기도 어렵다. 후배가 전화로 그래픽 환경에서 테이블 만드는 방법을 물어볼 때 어떻게 설명할지 상상해보면 그 답답함을 쉽게 이해할수 있다. 

* 관리 프로그램에 따라 그래픽 환경이 다르고 작업 절차도 상이하다. 오라클의 SQL Developer는 우리가 실습한대로이지만 SQL Server의 SSMS는 모양도, 메뉴 구성도 달라 작업 절차도 그에 맞춰야 한다. SQL Developer에 통달해도 SQL Server의 관리 프로그램은 새로 배워야 한다. 심지어 같은 프로그램도 버전에 따라 달라 지식으로서의 가치가 떨어진다. 

여러 가지 한계가 있어 그래픽 환경에서 데이터베이스를 관리하는 경우는 드물다. 직접 보며 처리하는 것이 편리한 경우도 가끔 있지만 대량의 작업을 할 때는 비효율적이다. 그래픽 환경은 초보자의 편의를 위한 대안적인 방법으로 제공하는 것이어서 간단한 작업이나 점검용으로 가끔 사용할 뿐이다. 

이에 비해 텍스트 형식의 스크립트는 아무리 복잡한 명령도 압축해서 표현할 수 있으며 복사 및 붙여넣기가 가능해 저장, 전달, 재현이 쉽다. 키보드로 일일이 입력하는 구닥다리 방식 같지만 일관되고 신속하다. 누군가에게 작업을 지시할 때 스크립트 전달해 주고 이거 실행해 라고 하면 그만이다. 기존 코드를 재활용하는 것이 숙명인 개발자에게 Copy & Paste 만큼 강력한 무기가 없다. 