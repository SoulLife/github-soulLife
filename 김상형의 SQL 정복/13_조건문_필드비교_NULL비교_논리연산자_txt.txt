4-2 조건문

1. 필드 비교

WHERE 절은 읽을 레코드의 조건을 지정한다. 필드 목록은 읽을 열을 지정하는데 비해 WHERE 절은 읽을 행을 지정한다. 

WHERE 절이 없으면 모든 레코드를 다 조회한다. SELECT 명령은 조건에 맞는 레코드를 검색하는 것이 주 기능이어서 대개의 경우 WHERE 절과 함께 사용한다. WHERE 절은 DELETE, UPDATE 등의 명령과 함께 삭제 및 변경할 레코드를 선택할 때도 사용한다. 

WHERE 절에는 레코드를 선택하는 조건문이 온다. 주로 필드와 특정값을 비교하는 조건문 형식으로 작성한다. 다음 명령은 면적이 1000km(제곱) 이상인 도시만 검색한다. 


SELECT * FROM tCity WHERE area > 1000;


area > 1000 조건문은 area 필드의 값이 1000보다 더 큰 레코드라는 뜻이다. 이 조건을 만족하는 춘천, 홍천만 조회하며 면적이 1000 이하인 도시는 결과셋에서 제외한다. 필드 목록에 * 대신 원하는 필드만 적으면 조건에 맞는 레코드의 지정한 필드만 표시한다. 


SELECT name, area FROM tCity WHERE area > 1000;


조건문은 필드와 상수, 변수 등을 비교하는 표현식이되 비교 대상끼리 타입이 호환되어야 한다. 정수형을 문자열과 비교한다거나 실수형을 날짜와 비교해서는 안된다. 조건문에 사용하는 비교 연산자는 수학의 등호 및 부등호와 같다. 


연산자				설명													예
A = B					같다													WHERE name = '서울'

A > B					A가 더 크다.												WHERE area > 50

A < B					A가 더 작다												WHERE popu < 100

A >= B				A가 B보다 크거나 같다. SQL Server는 !<도 지원						WHERE popu >= 100

A <= B				A가 B보다 작거나 같다. SQL Server는 !>도 지원						WHERE area <= 100

A <> B, A != B			A와 B는 다르다. 또는 같지 않다. 								WHERE region <> '경기'


다르다를 의미하는 <>와 같지 않다를 의미하는 != 는 사실상 같은 연산자이다. 숫자는 상수를 그냥 쓰지만 문자열과 날짜 상수는 항상 작은 따옴표로 감싸야 한다. 도시명이 서울이라는 조건은 다음 첫 번째 처럼 쓴다. 


SELECT * FROM tCity WHERE name = '서울'					--맞음

SELECT * FROM tCity WHERE name = 서울					-- 틀림

SELECT * FROM tCity WHERE name = "서울"					-- 틀림, 단 MariaDB는 인정한다. 


따옴표없이 그냥 서울이라고만 적으면 이때의 서울은 필드명을 의미하는데 tCity에는 서울 필드가 없으니 에러이다. 큰 따옴표는 별명을 붙일때만 사용하며 문자열 상수에는 사용하지 않는다. 필드값의 영문자를 비교할 때는 대소문자에 유의해야 한다. 


SELECT * FROM tCity WHERE metro = 'y';

SELECT * FROM tCity WHERE metro = 'Y';


SQL 문 자체는 대소문자를 가리지 않아 키워드나 테이블명, 필드명을 아무렇게나 적어도 상관없다. 그러나 필드안에 저장된 값은 대소문자를 구분한다. metro 필드에는 광역시 여부를 y 또는 n으로 저장하는데 처음 데이터를 입력할 때 소문자로 적었으므로 비교할 때도 소문자로 비교해야 한다. metro 필드를 소문자 y와 비교해야 광역시인 서울, 부산을 출력한다. 


필드값의 대소문자 구분 여부는 DBMS에 따라 설정에 따라 다르다. 오라클과 달리 SQL Server와 MariaDB는 저장할 때는 대소문자를 구분하지만 비교할 때는 구분하지 않는다. 그래서 위 두명령 모두 잘 실행된다. 오라클도 설정에 따라 대소문자 구분을 무시할 수 있지만 이 설정을 바꾸는 경우는 드물다. 어떤 DBMS를 사용하건 따옴표 내의 문자열 상수는 가급적 대소문자를 정확히 적는 것이 바람직하다. 







2. NULL 비교

 NULL 은 값이 입력되어 있지 않은 특수한 상태를 표현한다. 값을 알수 없거나 아직 결정할 수 없다는 뜻이며 0 이나 빈 문자열과도 다르다. 필드를 선언할 때 NULL 가능성을 미리 지정하는데 tCity 테이블 생성문을 보자. 

CREATE TABLE tCity
(
	name CHAR(10) PRIMARY KEY,
	area INT NULL,
	popu INT NULL,
	metro CHAR(1) NOT NULL,
	region CHAR(6) NOT NULL
);

선언문 뒤에 NULL이 있으면 이 필드는 값을 입력하지 않아도 된다는 뜻이며 인구와 면적이 NULL 가능하다고 되어 있다. 정보가 아직 조사되지 않았거나 모르는 상태일 때 이 필드를 NULL로 남겨둔다. 반면 광역시 여부나 지역은 NOT NULL로 선언되어 있어 값이 없으면 레코드를 삽입할수 없다. 

tCity 테이블에 NULL 값을 가진 레코드는 없다. tStaff 테이블에는 score 필드가 NULL 가능한 것으로 선언되어 있으며 실제로 값이 없는 레코드가 2개 있다. 이런 NULL 값은 검색하는 방법도 특수하다. tStaff 테이블에서 score가 NULL인 직원을 조사해 보자. 


SELECT * FROM tStaff WHERE score = NULL;


WHERE 조건절에 score = NULL 조건식으로 작성했다. 그러나 이 쿼리를 실행해도 아무것도 출력하지 않는다. NULL은 값이 아니라 상태이기 떄문에 = 연산자로는 비교할 수 없다. 어떤 값이든 NULL이라는 특수한 상태와 비교하면 결과는 항상 거짓이다. 


필드는 값이고 NULL은 상태이다. 무슨 값인지도 모르는 상태와 특정값을 비교한다는 것 자체가 이미 수학적인 모순이다. 그래서 NULL 상태와 비교하는 IS NULL 연산자를 따로 제공한다. 

다음 명령은 제대로 실행된다. 


SELECT * FROM tStaff WHERE score IS NULL;


유관순과 을지문덕의 성취도는 알 수 없다는 뜻으로 (null)표시되어 있다. SSMS는 값과는 다른 특수한 상태임을 분명히 표시하기 위해 일반값과는 배경색을 다르게 채색하여 보여준다. 



특별히 강조해서 표시해야 할 정도로 특수하다는 뜻이다. NULL이 아니라는 조건은 IS NOT NULL로 표기한다. 다음 명령은 위2명을 제외한 나머지 모든 직원을 출력한다


SELECT * FROM tStaff WHERE score IS NOT NULL;


NULL은 일반 값과는 다른 특수한 상태여서 다루는 방법이나 연산하는 방법이 독특하다. 지금은 NULL 값을 조사할 때 IS NULL 연산자를 쓴다는 것만 잘 알아두자. 





3. 논리 연산자

두 개 이상의 조건을 동시에 점검할 때는 AND, OR 논리 연산자를 사용한다. AND 는 두 조건이 모두 참인 레코드를 검색하며 OR 는 두 조건 중 하나라도 참인 레코드를 검사한다. 다음 예는 인구 100만 이상, 면적 700km(제곱)이상인 도시를 검색한다. 

SELECT * FROM tCity WHERE popu >= 100 AND area >= 700;


두 조건이 모두 참이어야 하므로 면적만 넓은 홍천이나 인구만 많은 서울은 제외하고 두 조건을 모두 만족하는 부산만 출력한다. AND를 OR로 바꾸면 두 조건중 하나라도 참이 되는 레코드가 모두 검색되므로 훨씬 더 많은 도시를 출력하며 면적도 좁고 인구도 작은 오산, 전주만 제외한다. 


세 개 이상의 조건문을 지정할 때도 마찬가지 방법으로 WHERE 절을 작성하되 조건의 우선순위에 주의해야 한다. AND 의 우선 순위가 OR보다 높다. 애매할 때는 괄호로 우선 순위를 명확히 지정하는 것이 좋다. 다음 두 쿼리문은 우선 순위에 따라 결과가 다르게 나타난다. 


SELECT * FROM tCity WHERE region = '경기' AND popu >= 50 OR area >= 500;

SELECT * FROM tCity WHERE region = '경기' AND (popu >= 50 OR area >= 500);


위쪽 쿼리문은 경기권 도시중 인구 50만 이상이거나 또는 경기권이 아니고 인구가 50만보다 적더라도 면적이 500 이상인 도시를 검색한다. 반면 아래쪽 쿼리문은 인구 50만이거나 면적 500이상인 경기도 도시를 검색한다. 두 쿼리문을 각각 실행해 보자. 


말로 하면 조금 헷갈리는데 실행 결과를 잘 살펴보면 두 조건문이 어떻게 다른지 알 수 있다. 위쪽 조건문은 50만명 이상의 경기권 도시이거나 면적 500이상을 의미하므로 오산과 전주를 제외한 모든 도시를 다 출력한다. 

이에 비해 아래쪽 조건문은 일단 경기권이라는 조건을 먼저 만족해야 한다. 경기도에 서울, 오산이 있는데 오산은 인구가 50만을 넘지도 않고 면적도 500보다 작아 제외하고 결국 서울 하나만 선택한다. 


NOT 연산자는 표현식의 진위 여부를 반대로 바꾼다. 즉 뒤의 표현식이 참이면 거짓으로 바꾸고 거짓이면 참으로 바꾸어 반대 조건을 취한다. 경기도 소속이 아닌 도시의 정보를 조사할 때 다음 두 개의 조건식은 같다. 



SELECT * FROM tCity WHERE region != '경기';

SELECT * FROM tCity WHERE NOT(region = '경기');

위 조건문은 경기도 소속이 아니다는 뜻이고 아래 조건문은 경기도 소속이다가 아니다라는 뜻이다. 다르다는 결국 같지 않다와 동일한 조건이다. 이 경우는 누가봐도 NOT = 보다는 != 이 더 간단해 굳이 NOT 연산자를 쓸 이유가 없다. 그러나 복합 조건의 반대를 취할 때는 NOT이 편리하다. 


SELECT * FROM tCity WHERE region = '전라' OR metro = 'y';

이 조건문은 전라도에 있거나 아니면 광역시인 도시를 조사한다. 전라도에 있는 전주, 순천을 출력하고 OR 연산자로 연결했으므로 전라도 소속은 아니더라도 광역시인 서울, 부산도 같이 출력한다. 


그렇다면 이 조건의 반대는 무엇일까? 전라도 또는 광역시의 반대 조건은 전라도도 아니고 광역시도 아니다이다. 논리 연산자 앞 뒤의 조건이 바뀌면 논리 연산자도 바뀐다. 첫 번째 쿼리와 정확하게 반대의 결과가 나온다. region != '전라' OR metro != 'y'가 아님을 유의하자. 


SELECT * FROM tCity WHERE region != '전라' AND metro != 'y';


A AND B의 부정은 !A OR !B이며 이를 드 모르간의 법칙이라고 한다. 두 개만 해도 이렇게 헷갈리는데 세 개 이상의 복합 조건의 부정식을 찾는 것은 더 어렵다. 이럴 때 원래 조건은 그대로 두고 앞에 NOT만 붙이면 된다. 


SELECT * FROM tCity WHERE NOT(region = '전라' OR metro = 'y');

이 조건식은 전라도 또는 광역시의 반대조건이라는 뜻이다. 복합 조건의 역을 취할 때는 복잡한 논리 연산 법칙을 생각할 필요 없이 앞에 NOT 연산자를 붙이는 것이 간편하고 확실하다. 