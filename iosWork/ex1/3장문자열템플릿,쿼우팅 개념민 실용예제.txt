타입이 다른 변수끼리의 결합 : 프로그래밍 과정에서는 서로 다른 타입의 변수나 상수를 결합해야 하는 경우가 종종 발생합니다. 하지만 스위프트에서 서로 다른 타입의 변수나 상수끼리의 결합 연산은 허용되지 않습니다. 변수의 타입을 변경해서 결합해 보려고 해도, 한번 타입이 정해지고 나면 다른 타입으로 변경할수도 없죠. 타입이 서로 다른 변수, 예를 들어 문자열과 숫자를 결합하려면 어떻게 해야 할까요?
var stmt = "꼼꼼한 재은씨의 키는"
var height = 185
var heightStmt = stmt + String(height);
앞의 예제에서 stmt와 height는 각각 String과 Int타입 입니다. 타입 추론에 따른 결과죠 우리가 원하는 것은 이 두개의 변수를 합하여 꼼꼼한 재은씨의 키는 185라는 문자열을 만들어내는 것이지만서로 타입이 다르기 때문에 두 변수 간의 결합은 불가능합니다. stmt를 Int타입으로 바꾸거나 height를 String타입으로 바꿀 수도 없습니다. 일단 타입이 정해진 변수와 상수는 다른 타입으로 변경할수 없으니까요 어떤 언어는 숫자와 문자열이 결합할 때 친절하게도 숫자를 알아서 문자열로 변경해주기도 한다지만 타입에서만큼은 엄격한 스위프트는 그렇게 친절하지 않습니다.
변수의 값을 다른 타입으로 변경해야 할 필요가 있다면 바꾸고자 하는 타입의 새로운 객체를 명시적으로 생성해야 합니다. 이때의 객체는 보통 변수나 상수를 의미합니다. 다행히 스위프트의 기본 자료형 객체들은 다른 타입의 값을 자신의 타입에 맞게 변환하여 새로운 객체를 만드는 방법을 제공합니다. String의경우 String()라는 형식으로 이를 지원하죠 괄호안에 원하는 정수값을 넣으면 문자열이 만들어지는 방식입니다.(나중에 배우겠지만 이것을생성자 혹은 초기화 메소드라고 합니다.)185라는 정수 또는 이 값을 담은 변수를 넣어 String(185)라는 구문을 작성하면 185라는 문자열을 만들어 낼수 있습니다. 이제 문자열 185가 만들어졌으니 이를 stmt변수와 결합하면 우리가 원하는 문자열을 만들어 낼수 있게 됩니다 
요약하자면 다음과 같은 형식을 사용하여 정수값을 문자열로 만들수 있습니다. 
String(문자열로 바꾸고 싶은 정수값 또는 변수)
정확하게 짚고 넘어갑시다. 정수값이나 기존의 변수를 문자열 타입으로 바꾸는 것이 아니라. 새로운 문자열 인스턴스를 만드는 것입니다. 기존에 변수에는 아무런 영향이 없이 새로 생성하는 것이라는 점에 주의해야 합니다. 
문자열을 정수형이나 실수형으로 바꿀 때에도 이와 비슷한 방식이 적용됩니다. 문자열을 정수형으로 바꾸려면 다음과 같이 Int()구문을 사용하면 됩니다. 앞의 문자열 방식처럼 새로운 정수 인스턴스가 만들어지죠
Int(<정수로 바꾸고싶은 문자열>)
문자열을 정수로 변환할 때에는 문자열 자체가 정수로 변환 가능한 값이어야 합니다. 123, 100등과 같이 숫자로 구성된 문자열이어야 한다는 뜻입니다. 홍길동처럼 일반 문자열이나 혹은 강남1980처럼 정수로 변환할수 없는 문자열이 섞여 있다면 정상적으로 변환할수 없습니다. 이런 경우를 스위프트가 어떻게 처리하는지는 뒤의 옵셔널 편에서 다시다룰 예정입니다. 


문자열 템플릿 : 앞에서는 타입이 서로 다른 변수들 사이의 결합을 이야기했었는데요 사실 다른 타입의 변수를 문자열로 결합하는 것만 생각한다면문자열 탬플릿을 사용하여 쉽게 처리할수 있습니다. 문자열 템플릿은 변수나 상수의 값을 문자열 속에 포함시키는 방법으로 정수나 실수등 문자열이 아닌 값도 변환 과정없이 사용할수 있도록 스위프트가 제공하는 기능입니다. C와 오브젝티브-C에서 변수나 상수의 값을 문자열 속에 포함하기 쉽도록 지원하는 문자열 포맷과 유사한 개념이기도 하죠.
문자열 템플릿을 사용하는 방식은 매우 간단합니다. 문자열에서 원하는 위치에 백슬래시(\)를 입력하고 포함하려는 값이 들어있는 변수나 상수를 괄호로 감싸면 끝입니다. 다음과같이 말이죠
//상수와 변수를 정의
let name = "꼼꼼한 재은씨"
let year = 2014
let month = 10
let day = 1
//문자열 템플릿을 사용한 문자열 결합
let profile = "\(name)느 \(year)년 \(month)월 \(day)일에 출간되었습니다.
print(profile)
위 예에서 문자열 템플릿에 사용된 상수들 중 하나를 제외한 나머지는 모두 Int타입입니다. 하지만 문자열 템플릿에서는 이들 값의 타입을 구분해서 새로운 객체로 만들어줄 필요가 없습니다. 알아서 값이 문자열 속에 포함되니까요. 단지 단순히 백슬래시와 함께 괄호를 작성하고 그 안에 원하는 변수나 상수를 집어넣으면 끝입니다. 간단하죠?
문자열 템플릿의 기능은 이뿐만이 아닙니다. 문자열 템플릿을 이용하면 괄호 내부에서 값을 연산할 수도 있습니다. 
//상수 정의
let apple = 3
let banana = 2
let orange = 4
//출력할 구문을 문자열 템플릿으로 구성
let desc = "과일은 총 \(apple + banana + orange)개입니다."
print(desc)
문자열 템플릿에 반드시 변수나 상수를 사용해야 하는 것은 아닙니다. 리터럴로 구성된 단순 연산이나 간단한 표현식도 처리할수 있습니다. 일례로 다음과 같이 숫자의 합을 구하는 식을 문자열 템플릿에 사용하면 바로 계산하여 결과를 출력할수 있습니다. 
let result = "1부터 5까지의 숫자의 합은 \(1 + 2 + 3 + 4 + 5)입니다"
print(result)
문자열 템플릿은 사용이 무척 편리할 뿐만 아니라 실제로 앱을 제작하는 과정에서도 매우 자주 사용하는 기능입니다. 잘 익혀 두도록 합시다. 


스위프트 4에서의 문자열 처리 : 스위프트 4에서는 새로운 쿼우팅 문법이 추가되었습니다. 이른바 트리플쿼우팅(Triple Quoting)또는 멀티 라인 문자열(Multi-line String)이라고 불리는 것으로 연속한 세 개의 따옴표를 이용하여 여러줄에 걸친 긴 문자열을 손쉽게 작성하는 문법이죠 이 문법은 파이썬을 알고 있는 사람이라면 오 베꼇네? 라는 생각이 들만큼 파이썬과 닮아 있지만 사용 방식은 약간 까다로운 부분도 있습니다. 이 문법과 관련하여 스위프트에서 문자열과 쿼우팅을 처리하는 방식에 대해 다시 한번 정리해 보겠습니다. 

쿼우팅(Quoting)이란 ? 쿼우팅이란 문자열을 따옴표로 묶어 표시하는 방법으로 프로그래밍 코드뿐만 아니라 쉘 커멘드 에서도 사용됩니다. 프로그래밍과 전혀 관계없는 일반적인 글에서 대화나 인용 등을 구분하기 위해 사용되기도 하죠.

프로그래밍 코드에서 쿼우팅은 대부분 문자열을 정의하거나 표현하는용도로 사용합니다. 예를들어 다음과 같은 구문에서 쿼우팅은 "Hello"라는 문자열을 정의하는 역할을 합니다. 실행 결과로 message 변수에는 Hello라는 문자열이 대입되죠
var message = "Hello"
만약 쿼우팅이 누락된 채로 그냥 문자열이 작성된다면 어떻게 될까요? Hello World를 둘러싼 따옴표를 제거한 다음 구문과 같이 말입니다. 
var message = Hello
이때에는 Hello라는 단어에 대해 스위프트 컴파일러가 의미적인 해석을 시도합니다. 우선은 이 문자열이 예약어이거나 키워드로 등록된 것인지 판단하죠 예약어나 키워드가 아니라면 다음 단계로 넘어가 함수나 클래스, 구조체나 열거형등 객체 타입으로 정의된 이름인지를 확인합니다. 이도 아니라면 마지막 단계로 변수나 상수로 정의된 단어인지 확인합니다.
위 구문에서 Hello는 아무런 의미도 갖지않은 단순히 쿼우팅이 누락된 문자열에 불과합니다. 따라서 컴파일러는 오류를 발생시키게 되죠 하지만 쿼우팅이 제거된 문자열이 객체 타입이나 변수의 이름과 일치한다면 예상치 못한 문제가 발생할 수도 있습니다. 다음 구문을 봅시다
let Hello = "Hi, I'am winny"
var message = "Hello"
print(message)
Hello라는 이름의 문자열을 옵셔널로 선언하고 여기에 "Hi, I'm winny"라는 문자열을 대입했습니다. 이어서 message라는 변수에 "Hello!"라는 문자열을 대입했죠 마지막으로 message변수의 값을 출력하면 결과는 "Hello!"가 출력됩니다. 여기까지는 정상적인 구문 실행에 해당합니다 이번에는 쿼우팅이 누락된 결과를 살펴봅시다. 
let Hello = "Hi, I'm winny"
var message = Hello
print(message)
모든 구문이 동일한 상태에서 message변수에 대입될 문자열의 쿼우팅만 빠졋습니다. 하지만 앞에서 쿼우팅이 누락되었을 때의 예제처럼 오류가 발생하는 것이 아니라, 뭔가 다른 결과가 출력됩니다. "Hi, I'm winny"라는 값이 출력되는 것이죠 이는 맨 첫줄에서 Hello상수에 대입된 문자열입니다. 
message변수의 값을 출력했는데 Hello 상수의 값이 출력된 것은, 쿼우팅의 누락에 따라 컴파일러는 Hello라는 문자열에 대해 의미적인 해석을 시도하기 때문입니다. 마침 그 이름으로 정의된 상수가 있다보니 컴파일러는 "Hello!"라는 문자열이 아니라 Hello변수로 이해해 버린 것이죠 그결과로 Hello상수에 저장된 값이 message변수에 대입되었고 결국 "Hi, I'm winny"라는 값이 출력된 겁니다. 
쿼우팅이 빠진 상황을 간단히 묘사해 보면 다음과 같습니다. 
A: 아글세 개가나더라 그러는거야, "저리 가!" (B가 저리로간다)
A: 너어디가?
B: 니가 저리가라며
A: 아니 걔가 나한테 "저리가"라고 그랬다고 (B가 저리로 간다)
A: 너또 왜가?
B: 니가 저리 가라며
A: 아진짜 너한테 가라는게 아니라 걔가 그렇게 말한거라고!(다시 멀어져 가는 B의 등뒤로 공허한 A의 외침만 울려퍼진다. 


스위프트에서의 기본 쿼우팅 처리 : 이번에는 스위프트에서 사용하는 기본 쿼우팅에 대해 살펴 보겠습니다. 스위프트는 문자열을 처리할 때 큰따옴표를 사용하는데 이를 가리켜 더블 쿼우팅(Double Quoting)*이라고 합니다. 특이하게도 스위프트에서는 하나의 값으로 이루어진 문자(Character)타입을 처리할 때에도 더블 쿼우팅으로 처리하는데 이는 문자와 문자열 타입을 각각 싱글 쿼우팅(Single Quoting)과 더블 쿼우팅으로 구분해서 처리하는 자바와 차이점 중 하나입니다. 
//스위프트에서
"Swift" //String
"S" //String또는 Character
//자바에서
"Java" //String
'J' //Character
전술한 것처럼 스위프트는 문자와 문자열을 모두 더블 쿼우팅으로 처리하기 때문에 위 예에서 작성된 "S"처럼 한 문자만 입력된 경우 컴파일러는 값의 타입을 정확하게 구분할수 없습니다. "S"라는 값은 보기에 따라서 문자일수도 있지만 아직 하나의 값만 입력된 문자열일 수도 있기때문입니다(이건 저라도 모르겠네요 미아리라도 가야 알수 있을라나)
이같은 상황에서 스위프트의 타입 추론기는 아키텍처의 안정성을 위해 두 가지 원칙에 따라 값의 타입을 결정합니다. 
제 1원칙 : 주어진 값이 타입 A와 타입 B에 동시에 속하는 경우 더넓은 범위의 타입으로 결정한다
제 2원칙: 더작은 범위의 타입으로 정의하려면 반드시 타입 어노테이션을 통해 명시적으로 선언하도록 한다.
1과 2원칙에 따라 명시적으로 타입이 선언되어 있지 않을 경우 타입 추론기는 상대적으로 대응범위가 넓은 문자열 타입을 선택해 버립니다. 문자 타입으로 선언하려면 반드시 타입 어노테이션을 붙여주어야 하죠 다음 구문은 타입 어노테이션과 더블 쿼우팅을 사용하여 String과 Character타입을 선언하는 예시입니다. 
let name = "Swift" //여러 글자로 이루어져 있으므로 String 타입으로 처리
let headerLetter01 = "S" //타입 어노테이션이 없으므로 String 타입으로 처리
let headerLetter02: Character = "S" //타입 어노테이션이 선언되었으므로 Character 타입으로 처리