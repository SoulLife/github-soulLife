6.2.2 옵셔널 바인딩 : 앞에서 우리는 nil 체크 조건절을 사용하여 안전하게 옵셔널 타입을 해제할 수 있었습니다. 이 예제는 동일한 기능을 하는 비강제적인 해제 구문으로 바꾸어 작성이 가능합니다. 이는 if 구문내에서 조건식 대신 옵셔널 값을 일반 변수나 상수에 할당하는 구문을 사용하는 방식으로 옵셔널 바인딩(Optional Binding)이라고 합니다 

옵셔널 바인딩은 조건문 내에서 일반 상수에 옵셔널 값을 대입하는 방식으로 이루어집니다. 반드시 조건문에서 사용해야만 하며 상수에 옵셔널 값을 대입한 결과는 true/false로 리턴됩니다. 우리가 배운 대표적인 조건절인 if를 사용하여 옵셔널 바인딩하는 예제를 살펴봅시다. 

[if 조건문 내에서의 옵셔널 바인딩 처리]
var str = "Swift"
if let intFromStr = Int(str)
{
  print("값이 변환 되었습니다. 변환된 값은 \(intFromStr)입니다.")
}else
{
  print("값 변환에 실패하였습니다.")
}
앞의 구문과 매우 비슷하지만 intFromStr가 상수로 선언되었다는 점과 이 상수가 옵셔널이 아닌 일반 타입이라는 점이 다릅니다. 강제 해제 연산자를 사용하지 않아도 옵셔널 값이 일반 변수나 상수에 할당되면서 자연스럽게 옵셔널 타입이 해제되지만 값이 nil이더라도 값의 할당이 실패하여 결과값이 false로 반환될뿐이므로 오류는 발생하지 않습니다. 단지 else 블록이 실행될뿐이죠. 또다른 구문 하나를 봅시다. 

func intStr(str : String)
{
  guard let intFromStr = Int(str) else{
  print("값 변환에 실패하였습니다.")
  return
  }
print("값이 변환되었습니다. 변환된 값은 \(intFromStr)입니다.")
}
위 구문은 guard 구문을 이용하여 옵셔널 바인딩을 구현한 예제입니다. guard 구문은 특성상 함수나 메소드에만 사용할수 있기 때문에 intStr()함수를 정의하고 그 안에 guard 구문을 작성하였습니다. 실제로 앱을 만드는 과정 거의 대부분은 함수로 이루어지기 때문에 guard 구문을 사용할 여지는 많습니다. 

guard 구문을 사용하더라도 옵셔널 바인딩 방식은 동일합니다. 상수를 선언하고 여기에 옵셔널 값을 대입하는 것이 전부죠. 하지만 사용 용법상 if 구문내에서 옵셔널 바인딩을 사용하는것과 구분해야 할 필요는 있습니다. if 구문을 사용한 옵셔널 바인딩은 단순히 옵셔널 값의 처리 결과에 따라 서로 다른 피드백을 주고 싶을때 사용합니다. 하지만 guard구문은 조건에 맞지 않으면 무조건 함수의 실행을 종료시키는 특성이 있기 때문에 실행 흐름상 옵셔널 값이 해제되지 않으면 더 이상 진행이 불가능할 정도로 큰일이 생길 때에만 사용하는 것이 좋습니다. 참고로 옵셔널 타입이긴 하지만 절대 nil값이 들어가지 않을 것이라는 보장이 있을 때에는 강제 해제 연산자를 사용하여 옵셔널 타입을 처리하는 것이 효율적입니다.

옵셔널과 관련하여 앞 장에서 학습했던 딕셔너리에 값을 입력하고 사용하는 예제를 다시 살펴봅시다. 
[딕셔너리의 선언]
var capital = ["KR":"Seoul", "EN":"London", "FR":"Paris"]
print(capital["KR"])
print(capital["KR"]!)
[실행 결과]
Optional("Seoul")
Seoul

딕셔너리에 키로 접근하면 그 결과값은 옵셔널 타입으로 반환됩니다. 값을 출력한 결과를 확인하면 금세 알 수 있죠. 옵셔널 타입 대신 일반 타입의 값을 얻으려면 capital["KR"]뒤에 !연산자를 붙여야 합니다. 그렇지 않으면 옵셔널 타입이 그대로 반환되어 예제에서 보는 것과 같이 Optional("Seoul")이 반환됩니다. 그런데 딕셔너리는 왜 옵셔널 타입의 값을 반환하는 것일 까요?

딕셔너리에 키로 사용될 수 있는 값은 Hashable 프로토콜이 구현된 모든 자료형이라고 설명했습니다. 정해진 숫자 0, 1, 2, 3...만 차례대로 들어갈수 있는 배열과 달리 딕셔너리는 미리 정해진 키 값만 사용되는 것이 아니라 무작위로 키가 사용될 수도 있습니다. 키 사용에 대한 제한이 거의없는 거나 마찬가지이므로 키가 있는 지를 점검하기도 어렵습니다. 

이 때문에 딕셔너리에서 값을 읽을 때에는 존재하지 않는 키를 사용할 가능성이 있습니다. 이 경우 딕셔너리는 주어진 키에 값이 비어있거나 입력된 키가 아예 없다는 것을 표현하기 위해 nil을 반환해야 합니다. 이 때문에 딕셔너리는 기본적으로 옵셔널 타입으로 정의된 값을 반환하게 됩니다. 

사실 위 코드 역시 잘 구성된 코드는 아닙니다. nil 여부를 체크하지 않고 !연산자를 사용하여 바로 강제 해제를 실행한 것 때문이죠 이를 그대로 실행하면 오류가 발생할 수 있으므로 다음과 같이 보완하는 것이 좋습니다. 
if(capital["KR"] != nil)
{
  print(capital["KR"]!)
}
//또는
if let val = capital["KR"]
{
  print(val)
}
옵셔널 타입에서 !연산자를 사용할 때는 반드시 nil 점검을 해주어야 오류를 미연에 방지할수 있다는 점 잊지말아 주세요



6.2.3 컴파일러에 의한 옵셔널 자동 해제 : 옵셔널 타입의 값을 사용하려면 항상!연산자를 사용하여 옵셔널을 강제 해제(Forced-unwrapping)하든가 아니면 옵셔널 바인딩을 통해 일반 자료형으로 바꾸어 주어야 합니다. 이렇게 해야 옵셔널 객체로 감싸진 값을 꺼낼 수 있죠. 하지만 명시적으로 강제 해제를 하지 않아도 컴파일러에서 자동으로 옵셔널을 해제해 주는 경우가 있습니다. 다음 예제를 봅시다. 
let optInt = Int("123")
if((optInt!) == 123)
{
  print("optInt == 123")
}else
{
  print("optInt != 123")
}
문자열을 숫자로 변환한 옵셔널 상수의 값이 nil이 아니면 !연산자를 사용하여 옵셔널 값을 강제 해제하고 이 값을 정수 123과 비교하는 예제입니다. 그 결과는 다음과 같습니다. 
[실행 결과]
optInt == 123

이번에는 강제 해제하지 않은 옵셔널 타입과 정수 123을 비교해봅시다. 
if(optInt == 123)
{
  print("optInt == 123")
}else
{
  print("optInt != 123")
}
강제 해제 하지않은 옵셔널 값은 Optional(123)이므로 정수값 123과 다릅니다. 따라서 위 예제에서는 else 영역이 실행되어야 합니다. 하지만 실제로 실행한 결과는 그렇지 않습니다.
[실행 결과]
optInt == 123
이상한 결과입니다. 해제하지 않은 옵셔널 값 자체로 정수와 비교한 결과는 예상대로라면 일치하지 않는다고 나왔어야 합니다. 그런데 결과는 값이 일치하는 것으로 보여주고 있네요 어떻게 된 걸까요?

옵셔널 타입으로 감싼 변수나 상수는 그 값을 사용하기 위해 반드시 !연산자를 사용하여 옵셔널 객체를 해제해야 합니다. 하지만 굳이 해제하지 않아도 괜찮을 때가 있습니다. 옵셔널 객체의 값을 비교 연산자를 사용하여 비교하는 경우가 그에 해당하는데 명시적으로 옵셔널 객체를 강제 해제하지 않아도 한쪽이 옵셔널, 다른 한쪽이 일반 타입이라면 자동으로 옵셔널 타입을 해제하여 비교 연산을 수행합니다. 따라서 아래의 예제에서 모든 결과는 true 입니다. 
let tempInt = Int("123")
tempInt == 123 //true
tempInt == Optional(123) //true
tempInt! == 123 //true
tempInt! == Optional(123) //true
말하자면 비교 연산을 처리할 때는 옵셔널 타입 여부에 구애받지 않고 일반 자료형처럼 값을 비교하면 된다는 것입니다. 이는 옵셔널 타입에 값을 할당할 때도 마찬가지 입니다.
[옵셔널의 값 할당]
var optValue01 = Optional(123) //1
var optValue02 : Int? = 123 //2

원칙적으로 옵셔널 타입의 변수나 상수를 정의할 때는 대입할 값을 Optional()객체로 감싼1의 방식으로 처리해야 합니다. 하지만 2처럼 감싸지지 않은 순수 리터럴을 직접 대입할 수도 있습니다. 주의할 점은 타입 어노테이션 없이 직접 대입하면 단순히 일반 Int 타입의 변수로 선언되므로 타입 어노테이션을 추가하여 Int 타입이면서 동시에 옵셔널 타입이라는 것을 명시해 주어야 한다는 것입니다. 그러면 값 123은 대입될 대상이 옵셔널 타입이라는 것을 인지하고 그것에 맞게 Optional(123)으로 변환됩니다. 



6.2.4 옵셔널의 묵시적 해제 : 옵셔널 타입을 해제하는 방법 중에는 묵시적 해제(Implicitly Unwrapped Optional)라는 개념이 존재합니다. 이것은 비록 옵셔널 타입이긴 하지만 값을 사용할 때에는 자동으로 옵셔널이 해제되기 때문에 굳이 !연산자를 사용하여 해제할 필요가 없는 아주 편리한 구문입니다. 컴파일러가 알아서 옵셔널을 해제해 준다는 점에서 방금 다루어 본 자동 해제와 유사하지만 자동 해제가 비교 연산이나 값의 할당 등 일부 구문에 한정되는 것과 달리 묵시적 해제는 옵셔널 변수를사용하는 모든 경우에 적용할 수 있으며 옵셔널 변수의 타입을 선언할 때 묵시적 해제를 미리 선언해 주어야 한다는 차이점이 있습니다. 

옵셔널의 묵시적 해제 구문은(이하 묵시적 옵셔널)일반 옵셔널 타입의 변수 선언 구문과 매우 유사합니다 ?연산자 대신!연산자만 붙여주면 그뿐입니다. 먼저 일반 옵셔널 변수를 선언하는 구문을 봅시다. 
[명시적 옵셔널 선언]
var str: String? = "Swift optional"
print(str)
[실행결과]
Optional("Swift Optional")
문자열 변수 str을 옵셔널 타입으로 선언하고 여기에 Swift Optional"이라는 문자열을 대입했습니다. 이를 출력해 보면 대입된 문자열이 옵셔널 객체로 감싸진 것을 확인할 수 있습니다. 이제 이 구문을 묵시적 옵셔널로 바꾸어 봅시다. 딱히 큰 수정이 필요하지는 않습니다. 단지 ?연산자를 제거하고 !연산자로 그 자리를 대체하기만 하면 됩니다. 하지만 결과는 사뭇 다르죠 
[묵시적 옵셔널 선언]
var str: String! = "Swift Optional"
print(str)
[실행 결과]
Swift Optional

타입 어노테이션 뒤에 붙은 연산자 하나만 바꾸었을 뿐인데 결과는 전혀 달라졌습니다. 출력된 구문에서 옵셔널 객체가 사라졌네요 컴파일러에 의해 옵셔널 객체가 자동으로 해제된 겁니다. 혹시 str 변수가 일반 타입인 것은 아닐까요? 혹시 모르니 nil 값을 대입해 봅시다.
var str: String! = nil

nil을 대입해도 아무 문제가 없습니다. 이는 곧 str이 옵셔널 타입으로 정의되어 있음을 의미합니다. 

이처럼!연산자를 붙여 변수를 정의하면 옵셔널 타입이 됩니다. 하지만 일반적으로 옵셔널 타입을 사용할때 필요한 강제 해제 연산자나 옵셔널 바인딩 과정 없이 일반 변수처럼 다루어도 됩니다. 이는 묵시적 해제 선언이 이루어졌기 때문입니다. 

묵시적 옵셔널을 사용하면 옵셔널 타입 변수의 연산도 간단하게 처리할 수 있습니다. 
var value01: Int? = 10
value01 + 5 //오류
var value02: Int! = 10
value02 + 5 // 15
일반적으로 옵셔널 타입과 일반 타입을 직접 연산하는 것은 오류이지만 묵시적 해제를 선언한 옵셔널 타입은 다릅니다. 직접 일반 타입과 연산해도 문제가 되지 않죠.이처럼 묵시적 해제를 선언한 옵셔널은 일반 타입처럼 사용할수 있기 때문에 굉장히 편리하게 사용할 수 있습니다. 

하지만 무조건 모든 경우에 묵시적 옵셔널을 사용할수 있는 것은 아닙니다. 옵셔널의 묵시적 해제 선언에서 염두에 두어야 할 것 한 가지가 있는데 바로 변수의 값이 nil이 될 가능성이 있다면 묵시적 옵셔널 해제를 사용하지 않아야 한다는 것입니다. 

의아하죠? 변수가 nil이 될 가능성이 있을 때 사용하는 것이 옵셔널 타입인데 변수가 nil이 될가능성이 있다면 사용하지 말라니 말입니다. 그렇다면 도대체 언제 사용하는 것일까요?

묵시적 옵셔널 해제를 사용하는 경우는 한 가지로 정의할 수 있습니다. 바로 
"형식상 옵셔널로 정의해야 하지만 실제로 사용할 때에는 절대 nil값이 대입될 가능성이 없는 변수일 때"
입니다. 다음 구문을 봅시다.
var value: Int! = Int("123")

이 구문은 Int(문자열)이 반환하는 값이 옵셔널 타입이기 때문에 어쩔 수 없이 value 변수를 옵셔널 타입으로 선언해야 합니다. 하지만 Int("123")은 누가봐도 제대로 정수로 변환괼 것이 확실합니다. 이런 확실한 값에 굳이 옵셔널 처리를 해줄 필요는 사실 거의 없죠. 이때 위와 같이 value변수를 묵시적 옵셔널로 선언한다면 옵셔널 타입 여부에 신경 쓰지 않고 일반 변수처럼 편하게 사용할 수 있습니다. 하지만 이 경우가 묵시적 옵셔널을 사용해야 하는 이유로 납득하기는 조금 어렵습니다. Int("123")! 처럼 대입하는 값 쪽에 강제 해제 연산자를 붙여주면 처음부터 value를 일반 변수로 만들어 줄수 있기 때문입니다. 

실제로 묵시적 옵셔널이 정말 유용하게 사용되는 경우는 클래스 또는 구조체 내에서입니다. 주로 멤버 변수를 정의할 때 선언과 초기화를 분리시켜야 하는 경우에 해당하죠. 아직 클래스를 배우기 전이므로 이해하기 어려울겁니다. 지금은 그냥 클래스에서는 묵시적 옵셔널 해제가 많이 사용되는구나 하는 정도로만 알고 있으면 될 것 같습니다. 

많은 사람이 옵셔널 개념의 도입 여부에 대해 의문을 표시합니다. 필요할 때만 값의 여부를 점검하여 정상적으로 값이 있을 때 처리할 수 있도록 코딩하면 될 것을 뭐하러 까다롭고 번거로운 옵셔널 개념을 도입했는가에 대해 말입니다. 그러나 옵셔널의 강점은 안전성뿐만 아니라 안전성을 담보하는 과정에서 표현되는 코드의 간결성에 있습니다. 

다음은 애플에서 스위프트 언어를 발표할 때 제시했던코드로 nil값을 점검하면서 사용하는 오브젝티브-C코드와 이를 옵셔널을 사용하여 간결하게 표현한 스위프트 코드를 함께 보여주고 있습니다. 이 같은 문법을 옵셔널 체인(Optional Chain)이라고 하는데 스위프트의 옵셔널 개념이 코드를 얼마나 간결하게 만들어 줄 수 있는지 보여주는 대표적인 예라고 할 수 있습니다. 옵셔널 체인에 대한 문법은 클래스에 대해 학습하는 과정에서 자세히 다루겠습니다. 

[오브젝티브-C 코드]
if (myDelegate != nil)
{
  if( [myDelegate respondsToSelector:@selector(scrollViewDidScroll:)])
  {
      [my Delegate scrollViewDidScroll:myScrollView];
  }
}
[스위프트 코드]
myDelegate?.scrollViewDidScroll?(myScrollView)