10.1 프로토콜의 정의 : 프로토콜을 정의할 때에는 protocol 키워드를 사용합니다. protocol 키워드에 이어 프로토콜의 이름을 정의하고 중괄호로 된 코드 블록을 작성한 다음 내부에 필요한 속성이나 메소드의 형식을 나열하면 기본적인 프로토콜의 구조가 완성되죠. 

protocol <프로토콜명>
{
 <구현해야 할 프로퍼티 명세 1>
 <구현해야 할 프로퍼티 명세 2>
 <구현해야 할 프로퍼티 명세 3>
 ...
 <구현해야 할 메소드 명세 1>
 <구현해야 할 메소드 명세 2>
 <구현해야 할 메소드 명세 3>
 ...
}

이렇게 작성된 프로토콜은 클래스나 구조체를 통해 구현됩니다. 프로토콜을 구현한다는 것은 프로토콜에 선언된 명세에 따라 실질적으로 프로퍼티에 값을 할당하여 선언하거나 메소드의 내용을 작성하는 것을 의미합니다. 스위프트에서 프로토콜을 구현할수 있는 구현체들은 다음과 같습니다. 

1. 구조체(Structure)
2. 클래스(Class)
3. 열거형(Enumeration)
4. 익스텐션(Extension)

프로토콜을 구현하기 위해 가장 먼저 해야 할일은 이 프로토콜을 구현하겠습니다라고 선언하는 것입니다. 이를 위해 대상 프로토콜을 선언해야 합니다. 프로토콜을 선언할 때는 구조체나 클래스 등의 정의 구문에서 객체의 이름 다음에 콜론을 추가하고, 그 뒤에 구현할 프로토콜의 이름을 작성하면 됩니다. 이미 다른 프로토콜이 추가되어 있다면 쉼표로 구분하여 뒤쪽으로 나열합니다. 

struct / class / enum / extension 객체명 : 구현할 프로토콜명
{
}

10.1.1 프로토콜 프로퍼티 : 먼저 프로토콜의 프로퍼티에 대해서 살펴봅시다. 프로토콜에 선언되는 프로퍼티에는 초기값을 할당할수 없습니다. 연산 프로퍼티인지 저장 프로퍼티인지도 구분하지 않습니다. 프로퍼티의 종류, 이름, 변수/상수 구분 타입 읽기 전용인지 읽고쓰기가 가능한지에 대해서만 정의할 뿐 입니다. 실제로 컴파일러에 의미있는 것이 이런 부분이기 때문이죠. 실제로 프로퍼티를 선언한 예를 봅시다. 

protocol SomePropertyProtocol
{
  var name: String { get set }
  var description: String { get }
}

인스턴스 프로퍼티 두 개를 SomePropertyProtocol 프로토콜에 선언하고 있습니다. 실제로 내용을 선언한 것이 아니라 이러이러한 종류의 프로퍼티가 선언될 것이라고 설명하는 의미입니다. 프로퍼티의 명세에는 초기값을 할당하는 대신 읽기 전용/ 읽고 쓰기에 대한 여부를 get과 set 키워드로 표시해야 합니다. 읽기 전용으로 설정할 때는 get만 읽고 쓰기가 모두 가능한 프로퍼티를 선언하고자 할 때는 get과 set을 모두 작성합니다. 

의도하는 프로퍼티가 연산 프로퍼티일 때는 get 키워드만으로 읽기 전용 속성으로 설정하거나 get과 set을 모두 사용하여 읽고 쓸수 있는 프로퍼티로 설정할수 있습니다. 그러나 저장 프로퍼티로 사용하려면 반드시 get과 set 키워드를 모두 추가해야 합니다. get 키워드만 선언한 읽기 전용 속성으로는 저장 프로퍼티를 구현할수 없습니다. 이때 get, set 키워드만 작성하고 실제 구문은 작성하지 않음에 다시 한번 유의 바랍니다. 

struct RubyMember: SomePropertyProtocol
{
  var name = "홍길동"
  var description: String
  {
     return "Name : \(self.name)"
  }
}

앞에서 정의한 SomePropertyProtocol 프로토콜을 구현한 구조체입니다. 구현할 대상 프로토콜을 선언하고 그에 맞는 프로퍼티 명세를 내부에서 구현하고 있습니다. 프로토콜에서 get set으로 선언된 name 프로퍼티는 저장 프로퍼티로 읽기 전용으로 선언된 description프로퍼티는 연산 프로퍼티로 구현하고 있는 것을 볼 수 있습니다. 프로토콜에서 선언된 프로퍼티 중 일부를 누락하면 오류가 발생합니다. 그러나 프로토콜과 상관없이 필요한 프로퍼티를 구현체에서 더 추가하는 것은 아무런 문제가 되지 않습니다. 프로토콜만 제대로 구현된다면 필요한 만큼 여분의 프로퍼티를 추가하여 사용할수 있습니다 



10.1.2 프로토콜 메소드 : 프로토콜에 선언되는 메소드도 프로퍼티와 크게 다르지 않습니다. 아래 구문을 살펴봅시다. 

protocol SomeMethodProtocol
{
  func execute(cmd: String)
  func showPort(p: Int) -> String
}

프로토콜 SomeMethodProtocol은 두 개의 인스턴스 메소드를 포함하고 있습니다. 두 메소드는 모두 매개변수가 정의되어 있지만 모든 프로토콜에서 반드시 메소드에 매개변수를 정의해야 하는 것은 아닙니다. 메소드의 반환값 역시 선택사항으로 메소드의 성격에 맞게 생략하거나 작성해주면 됩니다. 이처럼 프로토콜에서 메소드를 정의하는 방식은 클래스나 구조체에서 메소드를 정의할때 사용하는 형태와 동일합니다. 심지어 내부 매개변수와 외부 매개변수를 구분하여 정의할 수도 있죠. 프로토콜의 메소드가 클래스의 메소드와 다른 점은 메소드의 선언 뒤에 중괄호 블록이 없다는 점입니다. 

프로토콜에 선언되는 메소드는 메소드 종류 메소드 이름, 파라미터 타입, 파라미터 이름, 반환 타입까지는 정의할 수 있지만 실제 실행할 내용을 작성할 수는 없습니다. 따라서 중괄호 블록을 붙이는 것이 허용되지 않습니다. 프로토콜은 구현해야 할 메소드 에 대한 형식이자 명세서이며 설계도라는 것을 염두에 두기 바랍니다. 메소드의 실질적인 내용 작성을 담당하는 것은 구현체즉 프로토콜을 구현하는 구조체나 클래스, 열거형 혹은 익스텐션의 역할이라는 것을 잊지 마세요. 

struct RubyService: SomeMethodProtocol
{
  func execute(cmd: String)
  {
     if cmd == "start"
     {
         print("실행합니다")
     }
  }
  func showPort(p: Int) -> String
  {
     return "Port : \(p)"
  }
}

앞에서 정의한 SomeMethodProtocol 프로토콜을 구현하고 있는 구조체입니다. 프로토콜에 정의된 두 개의 메소드를 형식에 맞게 구현하고 있죠. 프로토콜에 선언된 메소드 중에서 일부를 구현하지 않고 누락하면 오류가 발생합니다. 반대로 프로토콜에 정의되어 있지 않더라도 구현체에 임의로 메소드를 추가하는 것은 아무런 문제가 되지 않습니다. 

RubyService 구조체에 정의된 매개변수명이 프로토콜에 선언된 메소드의 매개변수명과 동일한 것에 주목합시다. 프로토콜에서 정의된 메소드는 구현체에서도 매개변수명까지 완전히 일치 해야 합니다. 아래는 외부 매개변수명이 포함된 프로토콜 메소드와 이를 구현한 예제입니다. 


protocol NewMethodProtocol
{
  mutating func execute(cmd command: String, desc: String)
  func showPort(p: Int, memo desc: String) -> String
}

struct RubyNewService: NewMethodProtocol
{
  func execute(cmd command: String, desc: String)
  {
     if command == "start"
     {
        print("\(desc)를 실행합니다. ")
     }
  }
  func showPort(p: Int, memo desc: String) -> String
  {
     return "Port : \(p), Memo : \(desc)"
  }
}

일치시켜야 하는 매개변수명은 외부로 드러나는 매개변수명에 국한됩니다. 다시 말해 외부 매개변수명은 프로토콜을 그대로 따라야 하지만 내부 매개변수명은 임의로 바꾸어 사용해도 된다는 뜻입니다. 또한 내부 매개변수명과 외부 매개변수명이 프로토콜에서 통합되어 선언되어 있을 경우 구현체에서는 이를 분리하여 내부와 외부 매개변수명으로 나누고 따로 작성해도 됩니다. 요약하자면 외부 매개변수명은 프로토콜을 그대로 따라야 하지만 내부 매개변수명은 임의로 변경해도 아무런 문제가 없습니다. 


struct RubynewService2: NewMethodProtocol
{
  func execute(cmd comm: String, desc d: String)
  {
     if comm == "start"
     {
        print("\(d)를 실행합니다.")
     }
  }
  func showPort(p: Int, memo description: String) -> String
  {
    return "Port : \(p), Memo : \(description)"
  }
}

위 구문에서  execute(cmd:desc:)메소드의 경우 첫 번째 매개변수의 외부 매개변수명은 프로토콜에서나 이를 구현한 구조체에서 모두 cmd로 일치합니다. 하지만 내부 매개변수는 각각 command, comm으로 다르게 정의되어 있죠. 두번째 매개변수 역시 프로토콜에서는 내부와 외부 매개변수가 하나로 합쳐져 있지만 이를 구현한 구조체에서는 d라는 이름으로 내부 매개변수를 별도로 정의하여 사용하였습니다. 

showPort(p:memo:)도 마찬가지입니다. 두 번째 매개변수의 내부 매개변수가 선언할 때에는 desc였지만 구현할 때에는 description으로 바뀌었습니다. 

이렇게 내부 매개변수의 경우에는 프로토콜을 그대로 따르지 않고 필요한 대로 변형하여 사용하는 것이 가능합니다. 단 어떤 경우에도 프로토콜에 정의된 메소드명과 외부 파라미터명은 항상 그대로 따라야 합니다. 




프로토콜에서의 mutating, static 사용
스위프트에서는 구조체 내의 메소드가 프로퍼티를 변경하는 경우 , 메소드 앞에 반드시 mutating 키워드를 붙여 이 메소드가 프로퍼티 값을 수정하는 메소드임을 표시하도록 강제하고 있습니다. 이때 그 메소드가 만약 프로토콜에서 선언된 메소드라면 mutating 키워드를 붙이기 위해서는 반드시 프로토콜에 mutating 키워드가 추가되어 있어야 합니다. 

클래스와 같은 참조 타입은 mutating 키워드를 붙이지 않아도 메소드 내에서 마음대로 프로퍼티를 수정할수 있지만 구조체나 열거형은 프로토콜의 메소드에 mutating 키워드가 추가되어 있지 않을 경우 프로퍼티의 값을 변경할 수 없습니다. 프로토콜에 선언되지 않은 mutating 키워드를 임의로 구현할 수 없기 때문입니다. 만약 억지로 mutating 키워드를 붙여서 메소드를 구현하면 컴파일러는 이를 프로토콜을 구현한 것으로 인정하지 않으므로 구현 대상이 누락되었다는 오류가 발생합니다. 

이런 면에서 프로토콜은 자신을 구현하는 구조체가 마음대로 프로퍼티를 수정하지 못하도록 통제할 수 있는 권한을 가지고 있습니다. mutating 키워드를 허용하지 않으면 이를 구현하는 구조체는 메소드 내에서 프로퍼티 값을 수정할 수 없기 때문입니다. 일반적으로 프로토콜에서 메소드 선언에 mutating 키워드가 붙지 않는 것은 다음 두 가지 중 하나로 해석할 수 있습니다. 

1. 구조체나 열거형 등 값 타입의 객체에서 내부 프로퍼티의 값을 변경하기를 원치 않을 때
2. 주로 클래스를 대상으로 간주하고 작성된 프로토콜 일 때

프로토콜에서 mutating 키워드를 붙일 때에는 메소드를 표시하는 func 키워드 앞에 mutating을 추가하기만 하면 됩니다. 프로토콜 메소드에 mutating 키워드가 있으면 이를 구현하는 구조체나 열거형에서도 mutating 키워드를 사용할수 있습니다. 

protocol MService
{
  mutating func execute(cmd: String)
  func showPort(p: Int) -> String
}

struct RubyMService: MService
{
  var paramCommand: String?
  mutating func execute(cmd: String)
  {
    self.paramCommand = cmd
    if cmd == "start"
    {
        print("실행합니다")
    }
  }
  func showPort(p: Int) -> String
  {
     return "Port : \(p), now command : \(self.paramCommand!)"
  }
}

이어서 다음 예제를 봅시다. 마찬가지로 MService 프로토콜을 구현하는 구조체이지만 execute(cmd:)메소드에 mutating 키워드가 붙어있지 않습니다. 

struct RubyMService2: MService
{
  var paramCommand: String?
  func execute(cmd: String)
  {
     if cmd == "start"
     {
        print("실행합니다.")
     }
  }
  func showPort(p: Int) -> String
  {
     return "Port : \(p), now command : \(self.paramCommand!)"
  }
}

이 구조체는 프로토콜 메소드에 기재된 mutating 키워드를 사용하지 않았지만 MService 프로토콜을 문제없이 구현하고 있습니다. 구조체에서 mutating 키워드를 붙이지 않는 것은 실제로 구현된 execute(cmd:) 메소드 내에서 프로퍼티를 변경하지 않기 때문으로 프로토콜 쪽에서 mutating 키워드가 추가되어 있다 할지라도 실제 구현하는 쪽에서 프로퍼티의 변경이 없다면 굳이 붙이지 않고 생략해도 오류는 발생하지 않습니다. 

이처럼 프로토콜에서 mutating 처리되지 않은 메소드를 구조체에서 임의로 mutating 처리하는 것은 프로토콜의 구현 명세를 위반하는 오류이지만 그 반대의 경우는 허용됩니다. 프로토콜에서 mutating 키워드로 선언된 메소드라 하더라도 실제 구현하는 객체에서 필요 없다면 덧붙이지 않아도 되는 것입니다. 이를 정리하면 다음과 같습니다. 이 규칙은 열거형에서 프로토콜을 구현할 때도 동일하게 적용됩니다. 


프로토콜		구조체		결과
mutating		mutating		OK
mutating		-		OK
-		mutating		ERROR
-		-		OK
단 실제로 구조체의 메소드에서 프로퍼티 값 변경이 없을 때에만

클래스의 경우는 조금 다릅니다. 클래스는 참조 타입의 객체이므로 메소드 내부에서 프로퍼티를 수정하더라도 mutating 키워드를 붙일 필요가 없습니다. mutating 키워드가 붙어있는 프로토콜 메소드를 구현할 때도 클래스에서는 프로퍼티의 수정 여부와 관계없이 mutating 키워드를 사용하지 않습니다. 

class RubyThread: MService
{
  var paramCommand: String?
  func execute(cmd: String)
  {
     self.paramCommand = cmd
     if cmd == "start"
     {
         print("실행합니다.")
     }
   }
  func showPort(p: Int) -> String
  { 
     return "Port : \(p), now command : \(paramCommand!)"
  }
}

타입 메소드나 타입 프로퍼티도 프로토콜에 정의할 수 있습니다. 프로토콜의 각 선언 앞에 static 키워드를 붙이면 됩니다. 클래스에서 타입 메소드를 선언할 때 사용할수 있는 또 다른 키워드인 class는 프로토콜에서 사용할수 없습니다. 프로토콜은 구조체나 열거형, 그리고 클래스에 모두 사용할수 있는 형식으로 정의되어야 하기 때문입니다. 

하지만 프로토콜에서 static 키워드로 선언되었더라도 실제로 클래스에서 구현할 때는 필요에 따라 static 이나 class 키워드를 선택하여 사용할수 있습니다. 물론 구조체나 열거형에서 구현할 때는 선택의 여지없이 static 키워드를 붙여야 합니다. 


protocol SomeTypeProperty
{
  static var defaultValue: String { get set }
  static func getDefaultValue() -> String
}

struct TypeStruct : SomeTypeProperty
{
  static var defaultValue = "default"
  static func getDefaultValue() -> String
  {
     return defaultValue
  }
}

class ValueObject: SomeTypeProperty
{
  static var defaultValue = "default"
  class func getDefaultValue() -> String
  {
     return defaultValue
  }
}

프로토콜이 class가 아닌 static 키워드를 사용하는 것에 특별한 이유는 없습니다. 단지 class키워드가 클래스에 국한된 키워드인 반면 static 키워드는 구조체와 클래스, 그리고 열거형 등의 객체가 공통으로 사용하는 키워드이기 때문입니다. 따라서 클래스에서 프로토콜을 구현할 때 필요에 따라 static 키워드 대신 class 키워드를 사용하는 것은 프로토콜 명세를 올바르게 구현하는 것으로 간주됩니다. 