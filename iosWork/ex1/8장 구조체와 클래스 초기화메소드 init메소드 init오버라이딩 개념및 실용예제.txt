8.6 초기화 구문 : 구조체나 클래스는 모두 정의된 내용을 그대로 사용할 수는 없습니다. 항상 인스턴스를 생성해서 메모리 공간을 할당받은 다음에 사용해야 하죠. 이를 초기화라고 합니다. 

초기화 과정에서 가장 중요한 것은 저장 프로퍼티입니다. 모든 저장 프로퍼티는 인스턴스 생성 과정에서 초기화되어야 하며 이를 위해서는 반드시 초기값이 지정되어 있어야 합니다. 모든 저장 프로퍼티에 초기값이 지정되어 있다면 기본 초기화 구문을 사용하여 인스턴스를 생성할수 있는데 우리가 지금까지 익히 사용해왔던 다음 구문이 모두 초기화 구문을 사용하여 인스턴스를 생성한 것입니다. 

Resolution()
Video()
Location()
Car()
SUV()
Vehicle()

기본 초기화 구문은 인스턴스를 생성하는 본연의 기능 외에 프로퍼티와 관련하여 내부적으로 아무것도 처리하지 않습니다. 모든 저장 프로퍼티의 초기값이 이미 지정되어 있기 때문이죠. 하지만 아래의 초기화 구문을 봅시다. 

Point(x: 10.5, y: 12.0)

앞서 예제에서 다루어 보았던 Point 구조체의 초기화 구문입니다. 이 초기화 구문은 인스턴스를 생성하는 기능 외에도 구조체 내부에 정의된 x,y 프로퍼티의 초기값을 입력받은 인자값으로 초기화하는 역할까지 담당합니다. 구조체 내부에 선언된 모든 저장 프로퍼티를 일괄로 외부의 값으로 초기화할수 있는 이 구문을 멤버와이즈 초기화 구문이라고 하죠. 

그런데 x, y두 프로퍼티 중 아래와 같이 일부 프로퍼티만 인자값으로 초기화하고 싶을 때에는 어떻게 해야 할까요? 나머지 프로퍼티는 내부에 정의된 초기값을 그대로 사용하고 말입니다. 

Point(x: 10.5)

이런 형식의 초기화 구문은 구조체에서 제공되지 않습니다. 미리 약속된 형태가 아니기 때문입니다. 따라서 일부 프로퍼티만 외부값으로 초기화하려면 원하는 매개변수 형태를 가진 초기화 구문을 직접 정의하여 사용해야 합니다. 

클래스의 경우도 마찬가지입니다. 멤버와이즈 초기화 구문은 구조체에서만 제공되는 기능이므로 클래스의 경우에는 멤버와이즈 초기화 구문이 제공되지 않습니다. 따라서 멤버와이즈 초기화 구문을 사용하려면 즉 다시 말해 외부에서 프로퍼티의 초기값을 지정해 주고 싶다면 형식과 내용을 직접 정의해서 사용해야 합니다. 

이처럼 기본 구문 이외의 형식으로 원하는 인자값을 전달하여 저장 프로퍼티를 초기화하려면 반드시 구조체나 클래스 내부에 그에 맞는 형태와 할 일을 미리 정의해두어야 합니다. 이때 사용되는 것이 바로 초기화 메소드입니다. 초기화 메소드는 형태나 문법은 다를지라도 다른 객체 지향 언어에서도찾아 볼수 있는 개념으로 인스턴스가 생성될 때의 형식과 할 일을 정의한다고 하여 생성자(Constructor)라고 부르기도 합니다. 



8.6.1 init 초기화 메소드 : 우선 초기화 메소드의 형식을 살펴봅시다. 

init(<매개변수> : <타입>, <매개변수> : <타입>, ...)
{
  1. 매개변수의 초기화
  2. 인스턴스 생성시 기타 처리할 내용
}

그냥 보기에도 일반 메소드와 매우 비슷한 것을 알 수 있습니다. 그래서 초기화 구문 대신에 초기화 메소드라는 용어를 사용하기도 하죠. 스위프트에서 초기화 메소드는 다소 특수한 메소드의 일종이기 때문에 몇 가지 특성을 가집니다. 대표적인 특성으로 다음과 같은 것들이 있습니다. 

1. 초기화 메소드의 이름은 init으로 통일된다. 
모든 초기화 메소드의 이름은 반드시 init 이어야 합니다. 만일 다른 이름이 사용되거나 대소문자가 바뀌면 컴파일러가 초기화 메소드로 인식하지 못합니다. 

2. 매개변수의 개수, 이름, 타입은 임의로 정의할수 있다
메소드의 이름을 init으로 지정했다면 나머지 매개변수의 이름과 타입, 개수는 임의로 정의할수 있습니다. 단 메소드에 정의된 매개변수의 순서와 형식에 따라 인스턴스 생성 과정에서 넣어야 하는 인자값의 순서와 형식이 결정됩니다. 

3. 매개변수의 이름과 개수, 타입이 서로 다른 여러 개의 초기화 메소드를 정의할수 있습니다 
초기화 메소드의 이름은 모두 init으로 통일되어야 하지만 이 역시 메소드의 일종이므로 오버로딩할 수 있습니다. 오버로딩된 메소드는 스위프트에서 서로 다른 메소드로 간주되기 때문에 이 같은 특성을 이용하면 다양한 형식을 갖는 초기화 메소드를 정의할 수 있습니다. 

4. 정의된 초기화 메소드는 직접 호출되기도 하지만 대부분 인스턴스 생성 시 간접적으로 호출된다. 
우리가 정의한 메소드는 어쨌거나 메소드이므로 다른 일반 메소드처럼 직접 호출할 수 있습니다. 하지만 대부분은 인스턴스 생성 구문을 통해 간접적으로 호출됩니다. 초기화 구문이 여러 개 정의되어 있을 경우, 인스턴스 생성 구문과 매개변수 형식이 일치하는 초기화 메소드가 호출됩니다. 만약 인스턴스 생성 구문의 형식과 일치하는 초기화 메소드가 정의되지 않았다면 오류가 발생합니다. 

이외의 부분에서 초기화 메소드는 일반 메소드의 특성을 다수 따르는데 우선 매개변수는 인스턴스 생성 시 인자 레이블로 사용됩니다. 또한 인자 레이블을 지정할 수 있을 뿐만 아니라 언더바를 이용해서 생략할 수 도 있습니다. 일반 메소드와 동일한문법이죠. 다음 예를 보면서 구조체와 클래스에서 초기화 메소드가 어떻게 정의되며 정의된 초기화 메소드는 어떤 식으로 호출되는지 를 알아봅시다. 


struct Resolution
{
  var width = 0
  var height = 0
  //초기화 메소드 : width를 인자값으로 받음
  init(width: Int)
  {
    self.width = width
  }
}

class VideoMode
{
  var resolution = Resolution(width: 2048)
  var interlaced = false
  var frameRate = 0.0
  var name: String?
  //초기화 메소드 : interlaced, frameRate 두 개의 인자값을 받음
  init(interlaced: Bool, frameRate: Double)
  {
    self.interlaced = interlaced
    self.frameRate = frameRate
  }
}

Resolution 구조체와 VideoMode 클래스를 다시 정의해 보았습니다. Resolution 구조체에 정의된 저장 프로퍼티는 모두 두 개이지만 이중 일부인 width 프로퍼티의 초기값만 입력받는 형태의 초기화 메소드가 정의되었습니다. VideoMode 클래스도 마찬가지입니다. 정의된 네 개의 저장 프로퍼티 중에서 Bool 타입의 interlaced 매개변수와 Double 타입의 frameRate 매개변수만 동시에 입력받는 초기화 메소드가 정의되었습니다. 

이제 각각의 인스턴스를 생성해 봅시다. 

//Resolution 구조체에 대한 인스턴스를 생성
let resolution = Resolution.init(width: 4096)

//VideoMode 클래스에 대한 인스턴스를 생성
let videoMode = VideoMode.init(interlaced: true, frameRate: 40.0)

오브젝티브-C를 경험해본 사람에게는 익숙한 사실이지만 구조체나 클래스의 인스턴스를 생성할 때에는 init메소드를 호출해 주는 것이 원칙입니다. 따라서 위 구문을 실행하면 Resolution과 VideoMode의 인스턴스가 생성됩니다. 

한편 호출 시 init 메소드는 생략할수 있습니다. 우리가 익히 알고 있는 인스턴스 생성 구문은 init메소드가 생략된 형태입니다. 위 예제에서 메소드명을 생략하고 호출해 봅시다. 

//Resolution 구조체에 대한 인스턴스를 생성
let resolution = Resolution(width: 4096)

//VideoMode 클래스에 대한 인스턴스를 생성
let videoMode = VideoMode(interlaced: true, frameRate: 40.0)

초기화 메소드 부분을 생략하고 났더니 우리에게 익숙한 형태가 만들어졌습니다. 지금까지 우리가 인스턴스를 생성할 때 사용하던 구문입니다. 하지만 ㄴ내부적으로는 여전히 초기화 메소드를 호출하고 있으므로 초기화 메소드 내에 작성된 구문도 동일하게 실행됩니다. 

결국 인스턴스 생성 구문은 단지 생략되어 있을 뿐 init 초기화 메소드를 호출하는 것이기 때문에 초기화 메소드에 정의된 매개변수 및 인자값 타입과 일치하는 형식으로만 사용할수 있습니다. Resolution 구조체의 초기화 메소드에는 width 매개변수가 정의되어 있으므로 인스턴스를 생성할 때에도 width 매개변수의 인자값을 넣어주어야 합니다. VideoMode 클래스의 초기화 메소드는 두 개의 매개변수를 가지고 있으므로 인스턴스 생성 시에도 두 개의 인자값을 넣어주어야 하는 것이죠. 


위 예제에서는 각각 하나의 초기화 메소드만을 정의했지만 저장 프로퍼티가 다수인 클래스에서는 다양한 초기화 메소드가 필요할 때도 있습니다. 이런 경우 매개변수의 개수와 타입, 이름이 서로 다른 여러 개의 init 메소드를 정의하여 사용합니다. 아래 예제는 init 초기화 메소드의 오버로딩과 그에 대한 사용예를 보여주고 있습니다. 

class VideoMode
{
  var resolution = Resolution(width: 4096)
  var interlaced = false
  var frameRate = 0.0
  var name: String?
  
  //초기화 할때 name 인자값만 받는 init 구문
  init(name: String)
  {
    self.name = name
  }
  //초기화 될 때 interlaced 인자값만 받는 init 구문
  init(interlaced: Bool)
  {
    self.interlaced = interlaced
  }
  //초기화 될때 interlaced, frameRate 두 개의 인자값을 받는 init 구문
  init(interlaced: Bool, frameRate: Double)
  {
     self.interlaced = interlaced
     self.frameRate = frameRate
  }
  //초기화 될때 interlaced, frameRate, name 세 개의 인자값을 받는 init 구문
  init(interlaced: Bool, frameRate: Double, name: String)
  {
    self.interlaced = interlaced
    self.frameRate = frameRate
    self.name = name
  }
}

//VideoMode 클래스에 대한 인스턴스를 생성하고 상수에 할당
let nameVideoMode = VideoMode(name: "홍길동")
let simpleVideoMode = VideoMode(interlaced: true)
let doubleVideoMode = VideoMode(interlaced: true, frameRate: 40.0)
let tripleVideoMode = VideoMode(interlaced: true, frameRate: 40.0, name: "홍길동")

객체의 인스턴스에 대해 처음 학습할 때 우리는 기본 초기화 구문을 사용할수 있었던 것을 기억할 겁니다. 모든 저장 프로퍼티가 초기화되어 있을 떄 구조체와 클래스는 빈 인자값 형식의 초기화 구문을 제공합니다. 하지만 init 메소드가 작성되고 나면 작성된 init 메소드가 어떤 인자값 형식을 갖는가에 상관없이 그 객체의 기본 초기화 구문은 더는 제공되지 않습니다. 아래 예제를 봅시다. 

class VideoMode
{
  var resolution = Resolution(width: 4096)
  var interlaced = false
  var frameRate = 0.0
  var name: String?
  //초기화 될때 name 인자값만 받는 init 구문
  init(name: String)
  {
    self.name = name
  }
}

//VideoMode 클래스에 대한 인스턴스를 생성하고 상수에 할당
let defaultVideoMode = VideoMode() //Error!
let nameVideoMode = VideoMode(name: "홍길동")  //O

init 메소드를 추가한 후 예전처럼 기본 초기화 구문을 이용해서 객체를 생성하려고 하면 오류가 발생합니다. 더이상 이 구문을 제공하지 않는다는 뜻입니다. 

기본 초기화 구문은 말하자면 수입이 없는 기초 생활 수급자에게 제공되는 생계 급여같은 겁니다. 클래스를 정의했다면 이 클래스를 사용하기 위해 인스턴스를 생성해야 하는데 초기화 메소드가 없을 경우 인스턴스를 생성할 수 없습니다. 그래서 국가에서 생계 급여를 제공하듯 기본 초기화 구문을 제공하는 겁니다. 

생계 급여가 결코 넉넉한 편이 아니듯이 기본 초기화 구문 역시 다양하게 많은 기능을 하지는 않습니다. 단순히 인스턴스를 생성할수 있도록 해줄 뿐입니다. 

그나마도 개인에게 수입이 생기면 더이상 생계 급여가 지급되지 않는 것처럼 init 메소드를 정의하고 나면 더이상 기본 초기화 구문도 제공되지 않습니다. init 메소드를 정의했으니 앞으로는 그걸로 인스턴스를 생성하라는 거죠. 따라서 예전처럼 기본 초기화 구문을 사용하려면 직접 init() 메소드를 정의해 주어야 합니다. 

class VideoMode
{
  var resolution = Resolution(width: 4096)
  var interlaced = false
  var frameRate = 0.0
  var name: String?
  
  //기본 초기화 구문
  init()
  {
  }
  //초기화 될 때 name 인자값을 받는 init 구문
  init(name: String)
  {
    self.name = name
  }
}

//VideoMode 클래스에 대한 인스턴스를 생성하고 상수에 할당
let defaultVideoMode = VideoMode()
let nameVideoMode = VideoMode(name: "홍길동")

그런데 init 역시 메소드이므로 매개변수에 기본값을 지정할 수 있습니다. 기본값이 지정된 메소드에서는 인자값을 생략할 수 있으며 이때 생략된 인자값 대신 기본값이 인자값으로 사용됩니다. 이 특성을 이용하여 init 메소드를 정의하면 자동으로 기본 초기화 메소드를 정의할수 있습니다. 아래는 실제로 필자가 클래스를 작성할 때 즐겨 쓰는 방법입니다. 

class VideoMode
{
  var name: String?
  //초기화 될 때 name 인자값을 받는 init 구문
  init(name: String = "")
  {
    self.name = name
  }
}

//VideoMode 클래스에 대한 인스턴스를 생성하고 상수에 할당
let defaultVideoMode = VideoMode()
let nameVideoMode = VideoMode(name: "홍길동") 

위와같이 인자값이 있는 init 메소드에서 매개변수에 기본값을 지정하면 다음 두 가지 형태의 인스턴스 생성 형식이 만들어집니다. 이를 이용하면 init 메소드를 추가하더라도 여전히 기본 초기화 메소드 형식을 사용할수 있게 됩니다. 

1. VideoMode()
2. VideoMode(name:)

init 메소드를 추가하고 나면 더이상 기본 초기화 구문이 제공되지 않는 특성은 구조체의 멤버와이즈 초기화 구문에도 동일하게 적용됩니다. 따라서 구조체에 init 메소드를 추가할 때에는 특히 주의해야 합니다. 





8.6.2 초기화 구문의 오버라이딩 : 클래스에서는 초기화 구문도 일종의 메소드이므로 자식 클래스에서 오버라이딩할 수 있습니다. 초기화 구문을 오버라이딩할 때는 메소드와 마찬가지로 override 키워드를 붙여야 합니다. 상위 클래스에서 선언된 적이 없는 초기화 형식일 때는 override 키워드를 붙이면 안됩니다. 반면 기본 초기화 구문 init()은 부모 클래스에서 명시적으로 선언된 적이 없더라도 이를 상속받은 자식 클래스에서는 반드시 오버라이딩 형식으로 작성해야 합니다. 

class Base
{
}

class ExBase: Base
{
  override init()
  {
  }
}

위 예제에서 클래스 ExBase는 기본 클래스로 선언된 Base 클래스를 상속하도록 작성되었습니다. Base 클래스에서는 기본 초기화 구문을 명시적으로 작성하지 않았지만 이 클래스를 상속한 ExBase 클래스에서 기본 초기화 구문을 명시적으로 작성하려고 하면 상위 클래스에서 선언된 구문이므로 오버라이드해야 한다는 오류가 표시됩니다. 즉 클래스는 별도로 정의하지 않더라도 기본 초기화 구문이 내장되어 있으므로 상속받은 클래스라면 기본 초기화 구문을 작성하더라도 이를 오버라이딩해야 합니다. 

메소드와는 달리 초기화 구문에서의 오버라이딩은 예기치 않은 문제를 불러 일으킬 수 있습니다. 초기화 구문을 오버라이딩하면 더 이상 부모 클래스에서 정의한 초기화 구문이 실행되지 않습니다. 만약 부모 클래스의 기본 초기화 구문에서 프로퍼티를 초기화했다면 자식 클래스에서 기본 초기화 구문을 오버라이딩함으로써 부모 클래스 프로퍼티의 초기화가 누락됩니다. 프로퍼티가 초기화되지 못하는 상황은 오류를 발생시키므로 이런 상황을 방지하고자 초기화 구문을 오버라이딩할 경우 부모 클래스에서 정의된 초기화 구문을 내부적으로 호출해야 하는데 오버라이딩된 초기화 구문 내부에 super.init 구문을 작성하면 됩니다. 

class Base
{
  var baseValue: Double
  init(inputValue: Double)
  {
    self.baseValue = inputValue
  }
}

class ExBase: Base
{
  override init(inputValue: Double)
  {
    super.init(inputValue: 10.5)
  }
}

기본클래스 Base에서 정의된 초기화 구문 init(inputValue:) 의 내부에는 실행 구문이 작성되어 있습니다. 초기화 과정에서 입력받은 인자값을 baseValue 프로퍼티에 할당하는 구문이죠. 자식 클래스인 ExBase에서 초기화 구문을 오버라이딩하면 해당 초기화 구문은 새롭게 작성되므로 ExBase 클래스를 초기화할 때 baseValue 에 대한 값 할당이 이루어지지 않습니다. 

baseValue 프로퍼티는 옵셔널 타입이 아닌 일반 타입이므로 반드시 초기값이 있어야 하지만 초기화 구문의 오버라이딩으로 인해 초기값 할당 구문이 누락되면 오류가 발생합니다. 이러한 오류를 방지하기 위해 오버라이딩된 초기화 구문에서 부모 클래스의 초기화 구문을 직접 호출해 주게 됩니다. 





※ 초기화 구문 델리게이션 : 만약 ExBase를 상속받은 자식 클래스가 init(inputValue:)구문을 다시 오버라이드하면 이때도 마찬가지로 super.init(inputValue:)를 호출하여 부모 클래스의 초기화 구문을 호출해야 합니다. 호출된 부모 클래스의 초기화 구문은 다시 상위의 초기화 구문을 호출하고 상위의 초기화 구문은 다시 그 상위의 초기화 구문을 호출합니다. 이처럼 상위 초기화 구문의 호출이 연속으로 이어지면 최상위에 있는 초기화 구문까지 호출이 이어지면서 모든 초기화 구문이 누락되는 일 없이 실행됩니다. 

이처럼 연쇄적으로 오버라이딩된 자식 클래스의 초기화 구문에서 부모 클래스의 초기화 구문에 대한 호출이 발생하는 것을 초기화 구문 델리게이션(initializer Delegation)이라고 합니다. 기본 초기화 구문을 제외한 나머지 초기화 구문을 오버라이딩할 때는 반드시 부모 클래스의 초기화 구문을 호출함으로써 델리게이션 처리를 해 주어야 합니다. 기본 초기화 구문의 경우는 주어진 상황별로 조금씩 다릅니다. 

부모 클래스에 기본 초기화 구문만 정의되어 있거나 기본 초기화 구문이 아예 명시적으로 정의되어 있지 않은 상태에서 자식 클래스가 오버라이딩할 때에는 super.init() 구문을 호출해주지 않아도 자동으로 부모 클래스의 초기화 구문이 호출됩니다. 이때 초기화 구문의 호출은 자식 클래스부터 역순으로 이루어집니다. 


class Base
{
  var baseValue: Double
  init()
  {
     self.baseValue = 0.0
     print("Base Init")
  }
}
class ExBase: Base
{
  override init()
  {
     print("ExBase Init")
  }
}

let ex = ExBase()
[실행 결과]
ExBase Init
Base Init

부모 클래스에 기본 초기화 구문 외에 다른 형식의 초기화 구문이 추가되어있다면 자식 클래스에서 기본 초기화 구문을 오버라이딩할 때 명시적으로 부모 클래스의 기본 초기화 구문을 호출해야 합니다 

class Base
{
  var baseValue: Double
  init()
  {
    self.baseValue = 0.0
    print("Base Init")
  }
  init(baseValue: Double)
  {
    self.baseValue = baseValue
  }
}

class ExBase: Base
{
  override init()
  {
     super.init()
     print("ExBase Init")
  }
}