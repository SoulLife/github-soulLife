07 함수 : 함수가 갑입니다. 
함수(Function)는 대부분의 프로그래밍 언어에서 지원하는 개념으로 프로그램의 실행 과정 중에서 독립적으로 처리될 수 있는 부분을 분리하여 구조화한 객체를 의미합니다. 즉 외부에 의존하는 부분 없이 툭 떼어 분리할 수 있는 실행 단위를 일종의 캡슐처럼 포장해 놓은 것이죠. 이렇게 독립적으로 작성된 함수는 간단한 방식으로 여러 번 호출하여 사용할 수 있어서 같은 코드를 반복해서 작성할 필요가 없습니다. 

스위프트에서도 함수를 이용하여 한번 작성된 코드를 여러 곳에서 호출하여 사용할 수 있습니다. 특히 스위프트는 함수형 프로그래밍 패러다임을 채택하고 있는 언어이므로 함수형 프로그래밍의 특성을 이해하는 것은 매우 중요합니다.

7.1 함수의 기본 개념 : 일반적으로 함수를 표현할 때에는 다음과 같은 모습으로 표현하는 경우가 많습니다. 함수의 성격과 특징을 가장 잘 나타내는 모습이기 때문일 것입니다. 
함수는 입력값을 받아 내부 처리 과정을 거친후 결과값을 내어놓는 형태를 기본으로 합니다. 입력값을 인자값 혹은 파라미터라고 하고 내어놓는 결과값을 반환값 혹은 리턴값이라고 합니다. 

함수의 인자값은 하나도 없을수도있고 하나 이상일 수도 있습니다. 특별한 경우에는 인자값의 개수가 제한되지 않는 형태를 가지기도 합니다. 

함수의 반환값은 특정 값을 반환하는 형태와 반환하는 값이 없는 형태 두 가지로 나눌수 있습니다. 다만 특정값을 반환하더라도 그 값의 갯수는 일반적으로 하나입니다. 만약 둘 이상의 값을 반환해야 할 필요가 있다면 반환할 값들을 집단 자료형 하나에 담아 반환해야 합니다. 즉 실질적으로 반환하는 값이 여러 개더라도 반환하는 단위는 하나라는 거죠

함수는 일반함수와 사용자 정의 함수로 나눌수 있습니다. 일반 함수는 프로그래밍 언어나 프레임워크 수준에서 제공하는 함수로 기본적인 데이터의 처리나 연산 등을 수행하기 위한 목적으로 사용됩니다. 대표적으로 출력에 사용하는 함수인 print()를 들수 있습니다. 

하지만 실제로 애플리케이션을 개발하다 보면 언어나 프레임워크가 제공하는 함수만으로는 충분하지 않은 경우가 많습니다. 이때에는 우리가 원하는 기능을 실행해 줄 함수를 직접 만들어 사용해야 하는데 이를 사용자 정의 함수라고 부릅니다. 이때 말하는 정의란 옳고 그름의 Justice 가 아니라 Definition을 의미합니다. 이번 장에서 배울 대부분의 내용은 이같은 사용자 정의 함수에 관련된 것들입니다. 

기본적으로 함수는 의존성 없이 독립적으로 실행 가능한 코드를 모듈 단위로 분리해 놓은 것에 불과하므로 함수를 사용하지 않고 함수 내부의 실행 코드만 가져다 전체 코드에 넣고 사용해도 됩니다. 다시 말해 프로그래밍에서 함수가 필수 요소는 아니라는 겁니다. 그럼에도 함수가 중요한 의미를 가지는 것은 다음과 같은 이점들 때문이라고 할 수 있습니다. 

※ 동일한 코드가 여러 곳에서 사용될 때 이를 함수화하면 재작성할 필요 없이 함수 호출만으로 처리할수 있습니다. 
※ 전체 프로세스를 하나의 소스 코드에서 연속적으로 작성하는 것보다 기능 단위로 함수화하면 가독성이 좋아지고 코드와 로직을 이해하기 쉽습니다. 
※ 비즈니스 로직을 변경해야 할 때 함수 내부만 수정하면 되므로 유지보수가 용이합니다. 



7.1.1 사용자 정의 함수 : 사용자 정의 함수를 만드는 방법을 알아봅시다. 스위프트에서 함수를 정의하는 형식은 다음과 같습니다. 

func 함수이름(매개변수1: 타입, 매개변수2: 타입, ...) -> 반환타입
{
   실행내용
   return 반환값
}
스위프트에서는 함수를 정의할 때 func 키워드를 사용합니다. 함수를 선언할 때 키워드를 사용하지 않는 언어들도 많지만 스위프트는 명시적으로 func 키워드를 사용하여 함수를 선언해야 합니다. func 키워드 다음에는 함수의 이름을 작성하는데 이때[+,-,*,/]같은 연산자와 예약어는 사용할 수 없습니다. 

함수의 이름에 사용할수 있는 문자들은 영어나 숫자 한자 바이너리 이미지 등으로 다양하지만 첫 글자는 반드시 영어 또는 언더바(_)로 시작해야 합니다. 언더바 이외의 특수문자나 숫자로 시작할 경우 컴파일러에 의해 오류가 발생합니다. 대신 두 번째 글자부터는 이런 제약이 없으므로 영어, 숫자, 일부 특수문자를 충분히 활용할 수 있습니다. 단 숫자나 특수 문자 등을 너무 남발하면 함수의 핵심인 재사용성과 생산성 측면에서 불편함이 야기될수 있으므로 주의해야 합니다. 

func s0110()
{
  print("사당역 5번출구")
}
이 함수는 스위프트에서 함수명에 적용되는 규칙을 정확하게 지키고 있어 아무런 문제가 없습니다. 하지만 실제로 사용하기에 적절하지는 않습니다. 여러 개의 숫자로 이루어져 있어 쉽게 헷갈릴수 있기 때문입니다. 무엇보다 함수를 작성한 사람 이외에는 함수의 기능과 함수명을 연관 짓기 어렵다는 것이 치명적인 단점입니다. 이 함수 하나만 사용한다면 외워서 사용할 수도 있겠지만 이같은 함수들이 백개쯤 된다고 생각해보세요 그건 악몽입니다. 

이름에 특수문자가 포함되어 있는 함수도 마찬가지입니다. 앞에서 이미지를 사용한 변수명의 불편함에 대해 잠깐 이야기한 적이 있는데요 비슷한 이유로 함수명에 특수문자가 포함되면 충분히 불편합니다. 함수를 호출할 때마다 특수문자를 입력하는 복잡한 과정을 거쳐야 하기 때문입니다. 

숫자도 마찬가지입니다. 숫자를 너무 남발하면 함수의 이름을 외우기가 쉽지 않습니다. 과자 포장지 뒤에 있는 바코드 숫자 외우고 계신 분 있나여? 아마 없을 겁니다. 너무 외우기 어려우니까요 그러므로 함수에서 숫자나 특수기호는 꼭 필요할 때 의미를 구분하는 용도로 적당한 선만큼만 사용하는 것이 좋습니다. 



참고 : 이름 지을때 웬만하면 숫자를 자제합시다.
예전에 필자가 어떤회사의 내부 시스템 리뉴얼을 진행할 때의 이야기입니다(리뉴얼은 개편이라는 뜻으로 기존에 있던 시스템을 업그레이드하거나 바꿀 때 사용하는 현장 용어입니다. )리뉴얼을 위한 미팅에서 데이터를 저장하고 있는 데이터베이스의 명세서를 받아보고는 이내 당황해 버렸는데 데이터베이스에서 수백개 되는 테이블의 이름이 모조리 의미를 쉽게 짐작하기 어려운 숫자와 코드로 이루어져 있었기 때문입니다. 

물론 최초 개발당시에는 테이블에 저장하는 데이터의 성격에 따라 분류하려는 의도였겠지만 이후 데이터베이스의 내용을 정리한 문서 관리가 제대로 되지 않고 담당자까지 교체되면서 복잡한 코드로 이루어진 테이블 명들은 개발자들에게 마치 다빈치 코드 같은 존재가 되어 버렸습니다. 실제로 운영을 담당하고 있던 기존 개발자들도 주로 사용하는 몇 개의 테이블명만 표로 정리해서 출력하여 참조하고 있더군요 매번 데이터베이스를 다루어야 할 때마다 테이블을 찾기가 정말 힘들었던 기억이 새록새록합니다. 

이런 의미에서 회사가 여러분을 해고하지 못하도록 하려면 변수명이나 함수명을 모두 숫자나 코드로 작성하면 됩니다. 후임자가 와서 코드를 보고 나면 바로 도망칠 테니까요 유지보수해야 하는 여러분들에게도 악몽과 같다는 건 함정 단 개발이 끝날 때까지는 들키지 말아야 할 겁니다. 개발 도중에 들키면 일찍 집에 가는 수가 있어요 




함수명을 작성하고 나면 다음으로 해야 할 것은 함수의 인자값 개수와 형태를 정의하기 위해 소괄호로 영역을 표시해 주는 것입니다. 이 공간에는 함수가 호출될 때 전달되는 입력값을 대입받기 위한 변수의 이름과 타입이 정의되는데 이를 매개변수라고 합니다. 영어로는 파라미터(Parameter)라고도 부르죠. 오브젝티브-C에서 콜론(:)다음에 매개변수명이 작성되던 것과 달리 스위프트에서는 괄호 내부에 쉼표(,)로구분된 매개변수가 차례로 정의됩니다. 함수의 인자값이 필요 없는 경우라면 매개변수를 생략할 수 있으며 이때 함수를 정의하는 형식은 다음과 같이 변경됩니다. 위의 함수 정의 구문과 비교해 보세요
func 함수명() -> 반환 타입
{
  실행내용 
  return 반환값
}

매개변수가 없는 함수를 작성할 때는 함수명 뒤에 매개변수 영역을 표시하는 괄호 내부를 비워두면 됩니다. 일부 언어에서는 매개변수를 사용하지 않는 함수의 경우 매개변수 영역을 비워두는 대신 void라는 키워드를 명시적으로 작성할것을 강제하기도 하지만 스위프트에서는 그냥 빈칸으로 두면 됩니다. 하지만 매개변수가 없더라도 괄호는 생략할 수 없습니다.

매개변수의 이름과 타입까지 작성이 완료되었으면 이제 이 함수의 반환 타입을 작성해 줄 차례입니다. 반환 타입이라는 것은 함수가 실행된 결과로 어떤 값을 내놓을 것이냐 한ㄴ 겁니다. 함수의 기본은 인자값을 입력받아 내부적으로 처리하고 그 결과를 외부로 다시 반환하는 과정에 있습니다. 따라서 반환값이라는 요소는 함수 내부에서 생성된 값을 외부로 전달하는 역할을 합니다. 이를 함수가 값을 반환한다고 표현하죠 실무에서는 함수가 값을 리턴한다라는 표현을 더 많이 사용하기도 합니다. 

함수의 반환타입을 표시할 때에는 -> 기호와 함께 사용합니다. 이 기호 다음에 작성된 자료형이 함수가 반환하는 값의 타입인 겁니다. 함수의 반환 타입으로 사용될 수 있는 자료형에는 제약이 없습니다. String이나 Int, Double, Bool등 기본 자료형은 물론이거니와 AnyObject, UITableCell등과 같은 클래스 객체도 사용할수 있으며 사용자가 정의한 커스텀 클래스도 가능합니다. 구조체 역시 사용할수 있고요 하지만 반환 타입이 지정되면 반드시 그 타입에 맞는 값을 반환해야 합니다. 반환 타입을 문자열로 정의했는데 실제로 반환하는 값이 정수라거나 일반 정수를 반환 타입으로 정의했는데 실수를 반환해서는 안됩니다. 또한 nil을 반환하려면 함수의 반환 타입이 반드시옵셔널 타입으로 정의되어 있어야 합니다. 

함수의 성격에 따라서는 반환값이 전혀 없는 함수를 작성할 수도 있습니다. 이런 경우를 아무값도 반환하지 않는다. 또는 void 타입을 반환한다 고 표현합니다. 반환 타입을 생략할수 없도록 설계된 언어에서는 반환 타입을 void로 작성하도록 강제하기도 하지만 스위프트에서는 다음과 같이 반환 타입을 생략함으로써 반환값이 없음을 표현할 수 있습니다. 
func 함수명(매개변수1: 타입, 매개변수2: 타입, ...) 
{
   실행 내용
}
함수 내부에 작성된 구문이 모두 실행되고 나면 처리 결과값을 반환하는데 이때 사용하는 키워드가 return 입니다. 함수는 값을 반환하고 나면 실행이 종료되므로 사실상 return 구문이 함수의 종료 구문이라고 생각해도 됩니다. 만약 return아래에도 구문이 이어진다면 특별히 처리하지 않는 한 해당 구문은 실행되지 않습니다. 실행 흐름이 return 구문을 만나는 순간 함수를 종료할 테니까요 

이제 함수를 실제로 정의하는 모습을 살펴봅시다. 아래 1234의 함수 정의는 각각의 경우에 대한 예를 나타냅니다. 작성 형식을 잘 익혀두기 바랍니다. 앞으로 매우 자주 사용될 형태이기 때문입니다. 

//1 매개변수와 반환값이 모두 없는 함수
func printHello()
{
  print("안녕하세요")
}
//2 매개변수가 없지만 반환값은 있는 함수
func sayHello() -> String
{
  let returnValue = "안녕하세요"
  return returnValue
}
//3 매개변수는 있으나 반환값이 없는 함수
func printHelloWrithName(name: String) -> void
{
  print("\(name)님, 안녕하세요")
}
//4 매개변수와 반환값이 모두 있는 함수
func sayHelloWithName(name: String) -> String
{
  let returnValue = "\(name)님, 안녕하세요"
  return returnValue
}

return 키워드에 의해 반환되는 값은 함수의 정의 부분에서 사용된 반환 타입과 일치해야 합니다. 가령 4번 함수에서 반환값으로 사용된 returnValue의 타입은 함수의 정의 부분에 작성된 반환 타입인 String이 어야 한다는 거죠

반환값이 없는 함수일 경우에도 return 키워드를 사용하는 것을 종종 볼수 있는데 이때의 return은 함수의 실행을 명시적으로 종료할 목적으로 사용됩니다. 아래 함수는 옵셔널 바인딩이 실패했을 경우 return 구문을 호출하여 실행을 종료합니다. 

func hello(name: String?)
{
  guard let _name = name else
   {
      return
   }
   print("\(_name)님, 안녕하세요")
}




7.1.2 함수의 호출 :  함수를 정의하는 방법을 학습했으니 이제 정의한 함수를 사용하여 실행하는 방법을 배워봅시다. 함수를 실행하는 것을 함수를 호출한다라고 표현하는데 기본적으로 함수를 호출할 때는 함수의 이름에 괄호를 붙이면 됩니다. 그러면 그 함수가 실행되죠 앞에서 정의된 1번 함수를 호출하는 구문을 살펴보겠습니다. 
printHello()
//"안녕하세요"
그냥 보기에는 함수를 정의한 구문에서 func 키워드와 뒤의 중괄호 블록 부분만 뗀 것에 지나지 않는 것처럼 보일 겁니다. 하지만 이때 함수의 이름 다음에 붙은 괄호는 함수를 정의할 때 사용된 괄호와는 의미가 다릅니다. 함수를 정의할 때 사용한 괄호는 매개변수를 선언하기 위한 영역을 표시하는 기호였다면 지금 사용된 괄호는 함수를 호출하는 연산자이기 때문입니다. 

매개변수가 없는 함수는 그냥 빈 괄호만 붙여서 호출하면 되지만 매개변수를 가지고 있는 함수는 호출할 때 괄호안에 인자값을 넣어서 호출해야 합니다. 이때 인자값은 앞에서 정의된 매개변수 타입과 일치해야 합니다. 매개변수의 타입이 정수라면 인자값도 정수여야 하고 매개변수의 타입이 문자열이라면 인자값도 문자열이어야 한다는 뜻입니다. 

let inputName = "홍길동"
printHelloWithName(name: inputName)
//"홍길동님, 안녕하세요"
앞에서 3번 함수로 정의된 printHelloWithName을 호출하는 구문입니다. 이 함수에는 문자열 타입의 매개변수가 정의되어 있으므로 호출 시 문자열을 인자값으로 넣어주어야 합니다. 위 예제에서는 문자열 상수를 인자값으로 사용하여 호출하고 있네요 타입만 일치한다면 변수든 상수든 인자값으로 사용하는 데에 아무런 제한이 없습니다. 간혹 불필요한 코드를 줄이기 위해 인자값으로 변수나 상수 대신 실제 값 자체를 바로 넣어주기도 합니다. 이렇게 넣어주는 실제 값을 리터럴(Literal)이라고 합니다. 사용 예는 다음과 같습니다. 

printHelloWithName(name: "홍길동")
그런데 다른 언어로 프로그래밍해본 경험이 있는 독자라면 호출 구문에서 인자값을 입력하는 방법이 뭔가 특이하다는 것을 알 수 있을 겁니다. 인자값 앞에 넣어주고 있는 레이블 말입니다. 호출 과정에서 이 레이블이 하는 역할을 확인하기 위해 이 부분을 빼고 함수를 호출해 봅시다. 

이런 레이블을 뺀 호출 구문에서 오류가 발생하면서 name:이라는 레이블이 누락되었다는 메시지가 표시됩니다. 이건 무슨 의미일까요?

오류의 의미를 이해하기 위해서는 인자 레이블의 개념에 대해 먼저 알아야 합니다. 인자 레이블은 함수의 호출 시 인자값을 구분하기 위해 사용되는 레이블입니다. 위 오류 메시지에서 나온 name:이 인자 레이블에 해당하죠 스위프트에서 인자값이 있는 함수를 호출할 때에는 인자값 앞에 기본적으로 인자 레이블을 붙여서 호출해 주어야 합니다. 만약 인자 레이블 없이 인자값을 호출하면 컴파일 오류가 발생합니다. 

일반적으로 스위프트에서 인자 레이블은 매개변수명과 동일합니다. 다시 말해 함수를 정의할 때 사용했던 매개변수명을 함수 호출 시에도 붙여주어야 한다는 뜻입니다. 위 함수에서 name은 매개변수이자 동시에 인자 레이블입니다. 함수를 호출할 때 name:레이블을 생략하면 오류가 발생하는 이유죠

설명이 좀 어렵군요 매개변수가 있는 다른 함수의 예를 살펴봅시다. 
//입력된(값 X 횟수)만큼 카운드 변수의 값을 증가
func incrementBy(amount: Int, numberOfTimes: Int)
{
  var count = 0
  count = amount * numberOfTimes
}
incrementBy 함수는 두 개의 매개변수 amount와 numberOfTimes를 가집니다. 기본적으로 스위프트는 amount와 numberOfTimes를 매개변수명이자 동시에 인자 레이블로 간주하기 때문에 이 함수를 호출할 때에는 다음과 같이 인자값 앞에 amount, numberOfTimes레이블을 붙여 주어야 합니다. 
incrementBy(amount: 5, numberOfTimes:2)

함수를 호출할 때 이처럼 인자 레이블을 붙여주는 것은 인자값의 목적을 확실하게 드러내 줄 뿐만 아니라 비슷하지만 서로 다른 의미로 사용되는 함수를 구분하기 위해서입니다. 적어도 스위프트 공식 문서에서는 그렇게 설명하고 있군요 

이러한 것들은 타 언어에서 찾아보기 힘든 독특한 문법입니다. 그리고 이 문법에 대해 스위프트 표준 문서에서는 인자값의 목적을 분명하게 전달할 수 있다는 등의 편리함과 이점을 열심히 설명합니다. 하지만 이런 설명에 대해 필자의 생각은 흠 글쎄요 

인자 레이블 사용이 가져다주는 결과는 냉정하게 말해 편리함과 명료함보다는 불편함이 더 큽니다. 함수를 호출할 때 이름이 길어질 뿐만 아니라 결과적으로 코딩량을 늘리게 되기 때문입니다. 편리함과 명료함의 측면에서도 마찬가지입니다. 애플의 설명대로라면 자바에서 메소드를 호출 할 때 사람들이 자주 인자값 입력을 헷갈려 해야 하는데(자바에서는 인자 레이블을 사용하지 않으므로)실제로는 그렇지 않거든요 오히려 다른 언어의 함수 호출 형식에 익숙해져 있는 사람들에게는 스위프트의 이같은 문법이 실수하기 딱 좋은 문법입니다.

선택적이긴 하지만, 쉬으프트처럼 함수를 호출할 때 인자 레이블을 넣어 작성할 수 있는 언어가 하나 더 있습니다. 바로 파이썬입니다. 파이썬은 필요에 의해 함수 호출 시 인자값 앞에 매개변수명을 붙일수 있는 문법을 지원하는데 사실 외견상은 유사하지만 실제 문법적 의미는 스위프트의 그것과 전혀 다릅니다. 

파이썬에서 인자값 앞에 레이블을 붙이는 이유는 인자값의 순서를 지키지 않고 입력하기 위함입니다. 함수를 정의할 때 작성한 매개변수명을 인자값 앞에 구분자로 붙여줌으로써 함수에서 매개변수를 정의한 순서대로 인자값을 입력하지 않더라도 파이썬이 이를 이해할수 있거든요 그래서 이같은 방식은 주로 인자값의 수가 많아서 차례대로 입력하기 어려울때 사용됩니다. 

게다가 파이썬 함수 호출 구문은 기본적으로 레이블 없이 인자값만 순서대로 넣어주는 문법을 우선 지원합니다. 레이블을 붙이지 않으면 오류가 발생하고 인자값의 입력 순서를 변경할 수도없는 스위프트와는 관점이 전혀 다르죠 

# 파이썬 함수의 정의
def upload(appId, osType, user, passwd) :
      print(infile, appId, osType, user, passwd)
      return


#함수의 호출
upload('1001', 'ios', 'abc', '1234') #매개변수 없는 기본호출
upload(osType='ios', passwd='1234', appid='1001', user='abc') #매개변수를 사용한 호출

스위프트가 이런 문법을 채택한 배경은 사실 오브젝티브-C언어 때문입니다. 오브젝티브-C가 사용하고 있는 문법 스타일과 호환성을 가지려고 시도한 노력에 따른 결과죠 딱히 인자 레이블을 사용하는 방식이 더 낫기 때문이 아니라 오브젝티브-C의 문법에 맞추어 작성된 코코아 프레임워크 및 코코아 터치 프레임워크를 최대한 변경하지 않고 자연스럽게 호환하여 사용할수 있도록 하기 위한 배려의 성격이 더 큽니다. 

무슨말인지 이해하기 위해 스위프트 이전의 언어인 오브젝티브-C에 대해 잠깐 알아봅시다. 오브젝티브-C에서는 함수보다 메소드라는 것을 더 많이 사용하는데 스위프트의 함수와 거의 같은 문법입니다. 다른 점이라면 호출 시 인자값을 전달하기 위해 괄호 대신 콜론(:)을 사용한다는 것 정도라고 할수 있죠 조금 전 우리가 살펴본 incrementBy를 예로 들어 보겠습니다 먼저 매개변수가 없는 경우입니다. 오브젝티브-C에서 매개변수가 없는 메소드는 다음과 같이 정의하고 호출할 때에는 대괄호([ ])로 감싸 호출합니다. 
//정의
- (void) incrementBy
{
}
//호출
[대상 객체 incrementBy]

이 메소드의 이름은 ]incrementBy입니다. 만약 이 메소드에 매개변수를 추가한다면 함수를 정의할 때에는 다음과 같이 메소드명 다음에 괄호 대신 콜론을 붙여서 매개변수의 이름과 타입을 정의하고 호출할 때에는 콜론 다음에 인자값을 넣어줍니다. 
//정의
-(void) incrementBy: (NSInteger) amount
{
}
//호출
[incrementBy:3]
오브젝티브-C에서는 매개변수가 추가되면메소드 이름도 영향을 받습니다. 이 메소드의 이름은이제 incrementBy:가 되었습니다. 뭐가 달라진 거냐고 의문을 가질수도 있을 텐데요 메소드 이름뒤에 붙은 콜론이 오타가 아니라는 사실에 유의하기 바랍니다. 오브젝티브-C에서 매개변수가 있는 메소드의 이름에는 콜론이 추가됩니다. 

※ incrementBy 매개변수를 갖지 않는 메소드의 이름
※ incrementBy: 하나의 매개변수를 갖는 메소드의 이름

그런데 오브젝티브-C에서는 인자값을 넣어 호출할 때 괄호를 사용하지 않습니다. 인자값 하나는 그렇다 치더라도 이 메소드가 두 번째 인자값까지 입력받아야 할 경우에는 인자값을 어떻게 구분할까요? 여기부터 이제 문법이독특해지기 시작합니다. 오브젝티브-C에서는 두 번째 인자 값부터는 인자 레이블을 사용하여 구분하거든요 이를 위한 레이블명을 함수를 정의할 때 미리 추가한 다음 호출할 때 인자값 앞에 붙여주는 거죠
//정의
-(void) incrementBy: (NSIntger) amount numberOfTimes:(NSInteger) times
{
}
//호출
[incrementBy:3 numberOfTimes:2]
이 메소드의 매개변수는 두 개 입니다. amount와 times죠 그리고 첫 번째 매개변수와 두번째 매개변수 사이에 추가되어 있는 numberOfTimes부분이 바로 인자 레이블입니다. 메소드를 호출할 때에는 이 값을 사용하여 두 번째 인자값을 구분해주죠 인자 레이블의 역할은 생각보다 중요해서 인자 레이블에 오타가 있을 경우 메소드를 호출할 수 없습니다. 또한 같은 이름의 메소드라 할지라도 중간의 인자 레이블이 다르게 작성되어 있다면 오브젝티브-C는 서로 다른 메소드로 인식합니다. 가령 아래의 두 메소느는 서로 다른 메소드입니다.

※(void)incrementBy:(NSInteger) amount numberOfTimes:(NSInteger) times
※(void)incrementBy:(NSInteger) amount numbers:(NSInteger) times
이처럼, 함수를 정확하게 구별하기 위해서는 반드시 인자 레이블이 필요하기 때문에 오브젝티브-C에서는 인자 레이블을함수를 식별할 수 있는 중요한 요소로 간주하여 메소드명에 포함합니다. 위의 예제에서도 numberOfTimes:는 메소드명에 포함되어 전체 메소드명은 incrementBy:numberOfTimes:가 되죠 이것이 오브젝티브-C에서 매개변수가 추가될 때마다 메소드명이 바뀌는 이유입니다. 매개변수가 추가될 때마다 구분을 위해 인자레이블도 함께 추가해 주기 위해서죠 이때 콜론까지 메소드명에 포함되는 것에 주의해야 합니다. 

오브젝티브-C에서 첫 번째 매개변수명 앞에 인자 레이블이 없는 이유도 인자 레이블의 역할을 떠올려보면 쉽게 이해할수 있습니다. 인자 레이블은 괄호가 없는 오브젝티브-C의 함수 호출 구문에서 인자값을 구분하기 위해 사용되는데 첫 번째 인자값은 함수의 이름 뒤에 작성되므로 굳이 구분할 필요가 없기 때문입니다. 

이해를 돕기 위해 incrementBy:numberOfTimes: 메소드의 구조를 역할에 따라 분해해 보았습니다 

-(void)< 반환타입 
incrementBy < 메소드 이름
: (NSInteger) amout <매개변수
numberOfTimes < 인자레이블
:(NSInteger) times < 매개변수

오브젝티브-C에서는 메소드를 정의할 때 두 번째매개변수부터는 인자 레이블을 인자값 앞에 붙여주는 방식을 취합니다. 괄호를 사용하지 않으므로 인자값을 쉽표(,)로 구분할 수 없어서죠. 이 인자 레이블은 메소드명에 포함되어 함께 사용됩니다. 따라서 매개변수의 개수가 늘어날 경우 메소드명도 점점 길어지게 됩니다. 메소드의 이름 변화를 살펴보면 이같은 특성을 쉽게 알수 있습니다. 

※ 매개변수가 없을때 incrementBy
※ 매개변수가 하나일 때 incrementBy:
※ 매개변수가 두 개 일때 incrementBy: numberOfTimes:

문제는 사용해야 할 코코아 프레임워크 및 코코아 터치 프레임워크가 오브젝티브-C 기반으로 작성되었다는 데에 있습니다. 이들 프레임워크의 API를 사용하려면 인자 레이블을 사용하는 문법으로 작성된 메소드를 사용해야 한다는 거죠 

이런 방식의 API 호출은 오브젝티브-C이외의 문법에서는 거의 사용되지 않지만 그렇다고 해서 API의 형식을 마음대로 변경해버릴 수도 없습니다.스위프트에서도 코코아 프레임워크 및 코코아 터치 프레임워크를 사용해야 하는데 인자 레이블을 사용하지 않는 형식으로 변경하면 기존 오브젝티브-C로 만든 코드에 대한 호환성이 떨어지기 때문입니다. 그래서 스위프트에서도 오브젝티브-C메소드 호출 방식의 API를 수정없이 그대로 사용하기 위해 최대한 형식을 맞춘 결과 지금과 같은 독특한 문법이 만들어지게 되었습니다. 

이제 다시 스위프트 문법으로 돌아가 함수의 호출 구문을 다시 살펴봅시다. 조금 전 배운 스위프트 함수 호출의 특성을 고려한다면 다음과 같이 인자 레이블을 붙여서 호출해야 정상적으로 실행될 겁니다. 
incrementBy(amount:5, numberOfTimes:2)
그런데 오브젝티브-C와 다른점 하나가 눈에 띕니다. 오브젝티브-C에서는 메소드를 호출할때 첫 번째 인자값 앞에는 인자 레이블을 붙이지 않거든요

사실 스위프트에서 지금의 인자 레이블의 개념은 여러번 문법 개선을 거친 결과입니다. 처음 스위프트 언어가 발표되었을 때 스위프트에서는 다음과 같은 규칙을 세웠습니다. 

함수에는 선택적으로 인자 레이블을 지정할 수 있다. 함수를 호출할 때에는 인자 레이블을 지정한 함수만인자 레이블을 붙여주면 된다. 단 메소드에서는 호출 시 반드시 인자 레이블을 사용해야 한다. 

최초의 스위프트에서는 함수를 정의할 때 인자 레이블을 굳이 지정할 필요가 없었습니다. 필요에 의해 지정한 경우에 한해서만 호출할 때 붙여주면 되었죠 하지만 함수와 유사한 성격의 메소드에서는 달라서 반드시 인자 레이블을 사용해서 호출해야 했습니다. 이유는 하나입니다. 호환성을 유지해야 하는 오브젝티브-C의 메소드가 모두 인자 레이블을 사용하고 있었기 때문입니다. 이런식으로 스위프트는 오브젝티브-C의 메소드와 호환성을 유지했습니다. 

그런데 코코아 터치 프레임워크에서 사용되는 대부분의 API들이 오브젝티브-C문법에 맞춘 인자 레이블을 사용하고 있기는 하지만 첫 번째 인자값 앞에는 인자 레이블을 생략하는 것이 일반적인 방식이었습니다. 이에 따라 스위프트로서도 뭔가 대응이 필요했습니다. 그래서 메소드에 인자 레이블을 생략할 수 있도록 하는 문법을 추가했습니다. 이 문법 덕분에 오브젝티브-C와 큰 차이 없이 API를 호출할 수 있었죠 이 시기의 코코아 터치 프레임워크는 오브젝티브-C문법의 그것과 거의 다르지 않았기 때문에 개발자들은 오브젝티브-C문법으로 사용하던 코코아 터치 프레임워크의 API를 별다른 안내 문서없이 Xcode의 도움만으로 스위프트로 바꾸어 사용하는 것이 가능했습니다. 

그러나 시간이 조금 지난 후 다음과 같은 생각이 대두되었습니다. 어차피 API를 호출할 때 첫번째 인자 레이블을 생략해 줄거라면 애써 예외 문법을 적용해서 작성하느니 그냥 처음부터 생략할 수 있도록 해주면 안 될까?

게다가 함수와 메소드가 거의 동일한 성격임에도 굳이 인자 레이블에 대한 문법 차이가 있다는 것 또한 비판의 대상이 되었습니다. 결국 함수의 호출 구문에서도 인자 레이블이 필수가 되었습니다. 인자 레이블 개념을 버릴 수는 없었으니까요 이에 따라 함수 호출 문법은 다음과 같이 변경됩니다. 

함수와 메소드를 호출할 때에는 모든 인자값 앞에 인자 레이블을 붙여주어야 한다. 단 첫 번째 인자값에 한해 생략 가능하다 

덕분에 오브젝티브-C와 상당히 유사한 형태의 호환성을 문법 수준에서 유지할수 있게 되었습니다. 하지만 문법 자체가 예외성을 가지고 있다는 것은 좋은 구조가 아니었기 때문에 이번에는 이에 대한 비판이 제기되었습니다. 왜 첫 번째 인자값만 예외 규정을 적용하는 건데? 스위프트가 코코아 터치 프레임워크만을 위한 언어는 아니잖아

결국 스위프트는 함수의 호출 구문에서 첫 번째 인자값에 부여하던 예외를 문법적으로 제거함으로써 다시 처음의 구조로 회귀하게 됩니다. 스위프트 3의 발표와 함께 벌어진 일이요 이제 스위프트에서 함수와 메소드를 호출할 때에는 기본적으로 모든 인자 레이블을 함께 호출해야 합니다. 첫 번째 인자 레이블도 예외는 아닙니다. 

이같은 원론적 회귀는 스위프트 언어가 갖는 주 목적의 변화와 무관하지 않습니다. 최초에 발표된 스위프트가 언어 자체의 특성에 초점을 맞추었다면 그 다음의 스위프트는 코코아 터치 프레임워크를 사용하기 위한 역할로서의 언어에 초점을 맞추었습니다. 이에 따라 코코아 터치 프레임워크에 적용하기 좋은 형태로 문법이 변화된 겁니다. 하지만 이후 스위프트가 오픈소스로 공개됨에 따라 코코아 터치 프레임워크만을 위한 문법 예외 사항을 유지하는 것이 비일관적이라는 지적이 이어집니다.이에 따라 일관성 있는 규칙을 적용하기 위해 다시 초기의 문법으로 회귀하게 된 것입니다. 

스위프트에서 함수의 인자 레이블은 단순히 호출 구문에 국한되지 않고 함수를 식별하는 데에도 사용됩니다. 오브젝티브-C와 유사한 맥락이죠 스위프트에서 매개변수가 없는 함수의 이름은 다른 일반 언어에서의 함수 이름 형식과 크게 다르지 않지만 매개변수가 있는 함수 이름은 다음과 같이 맨 앞의 함수 이름 부분과 이어지는 인자 레이블의 조합으로 이루어집니다. 예를 들어 func incrementBy(amount: Int, numberOfTimes: Int)함수의 이름은 아래 강조 표시된 부분들의 합으로 구성되죠

func incrementBy(amount: Int, numberOfTimes: Int)
이 함수의 이름은 incrementBy(amount:numberOfTimes:)입니다. 난해하죠? 매개변수가 없는 함수가 단순히 incrementBy()인 것과 달리 매개변수가 있는 함수는 괄호 안에 매개변수명과 콜론이 차례로 나열되는 특성을 가집니다. 몇 가지 예를 더 살펴보면서 함수 이름 규칙에 익숙해져 봅시다. 
함수정의						함수명
func incrementBy(0					incrementBy()
func incrementBy(amout: Int)				incrementBy(amount:)
func incrementBy(amount: Int,numberOfTimes)		incrementBy(amount:numberofTimes:)
func printHello()					printHello()
func printHello(name: String)				printHello(name:)
우리는 방금 함수의 이름을 정의하는 방법에 대해 배웠습니다. 그런데 사실 우리가 배운 것은 함수의 이름보다는 식별자(Signature)로 보는 것이 더 타당합니다. 다시 말해 함수의 정의 구문에서 func 키워드 뒤에 들어가는 것이 함수명이고 여기에 인자 레이블을 포함한 것을 함수의 식별자로 본다는 거죠 

이는 스위프트에서 다음과 같은 호출 구문이 성립하는 것을 보면 알 수 있습니다. 

func times(x: Int, y: Int) -> Int
{
 return (x * y)
}
times(x: 5, y: 10) //함수의 이름만으로 호출한 구문
times(x:y:)(5,10) //함수의 식별자를 사용하여 호출한 구문
이 구문은 x와 y 두 개의 매개변수를 가지는 함수 times를 호출할 수 있는 두 가지 방법을 보여주고 있습니다. 함수명 뒤에()를 붙이고 여기에 인자 레이블과 인자값을 넣어 호출해주는 방법하나 그리고 함수 식별자 뒤에()를 붙이고 인자 레이블 없이 호출하는 방법 하나입니다. 

스위프트에서 함수를 호출하는 방법은 함수명 + 괄호 + 인자값이므로 인자 레이블까지를 전체 함수의 이름으로 본다면 항상 times(x:y:)(5,10)형식으로 호출하는 것이 맞습니다. 하지만실제로는 times만으로도 함수를 호출할 수 있습니다. 그러나 times는 함수의 이름으로 times(x:y:)는 함수의 식별자로 보는 것이 조금더 적절합니다. 물론 함수의 이름이나 함수의 식별자 모두 호출시에 사용할 수 있구요 

여기서 주의해야 할 점이 있습니다. 지금은 매개변수명이 곧 함수 식별자의 일부가 되는 것처럼 보이지만 실제로는 인자 레이블 역할을 하는 매개변수만 함수 식별자에 포함된다는 점입니다. 어차피 인자 레이블이 곧 매개변수명이지 않냐고 생각할 수도 있지만 스위프트에서는 인자 레이블 역할을 하지 않는 매개변수가 등장하기도 하고 인자 레이블과 매개변수가 분리되기도 합니다.  또한 인자 레이블의 변경 때문에 함수의 식별자가 달라지기도 합니다. 정리하자면 함수의 식별자에 포함되는 것은 인자 레이블일 뿐 결코 매개변수가 아님을 확실하게 인지해야 합니다. 

다만 이 책에서는 함수를 언금할 때 '이름과 식별자 라는 단어는 구분하지 않고 그냥 이름으로 사용하겠습니다. 여러분은 그냥 times도 times(x:y:)도 모두 함수의 이름이라고 이해하면 될것 같습니다. 