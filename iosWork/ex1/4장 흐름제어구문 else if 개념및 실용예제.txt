if 구문의 중첩 : if 구문은 중첩해서 사용할 수 있습니다. 보통 이중 삼중의 조건을 비교해야 할 때 많이 사용되는데 if 조건절 안에 if 구문뿐만 아니라 else 절까지 중첩할수 있고 else절 내에서도 마찬가지입니다. 아래와 같은 분류 기준이 있다고 했을때 이를 분류하는 프로그램을 if조건문으로 작성하면 다음과 같습니다. 
var adult = 19
var age = 21
var gender = "M"

if adult > age
{
  if gender == "M"
  {
     print("남자 미성년자입니다")
  }else
  {
    print("여자 미성년자입니다.")
  }
}else
{
  if gender == "M"
  {
    print("남자 성년자입니다.")
  }else
  {
    print("여자 성년자입니다.")
  }
}

중첩된 if 조건절은 여러 개의 조건을 다중으로 비교해야 할때 사용하면 쉽게 구현할수 있는 장점이 있지만 너무 여러번 중첩되면 코드의 가독성을 해칠 뿐만 아니라 코드 사이의 의존 관계를 심화시키는 주 원인이 되기도 합니다. 이는 결국 코드 수정 시 장애 요소를 만들어 내므로 if구문을 중첩할 때에는 주의가 필요합니다. 일반적으로 3단계 이상의 중첩 구문은 사용하지 않는것이 좋습니다. 


if~else if  : 마지막으로 살펴볼 형태는 비교할 조건이 여러 개일 경우입니다. 지금까지 if~else 구문을 사용하여 조건이 참일 때와 거짓일 때 처리하는 방법을 배웠고 다중 조건일 때에는 조건절을 중첩하여 처리하는 방법도 익혀보았습니다. 하지만 다중 조건이 아니라 단순히 참, 거짓으로만 판단하기 어려운 여러 개의 조건이 있을 때에는 어떻게 해야 할까요?
바로 직전에 우리는 gender 변수의 값을 비교하여 "M"이면 남자로, 그 이외에는 여자로 분류했지만 사실 구문은 논란의 여지가 있습니다. 남자도 여자도 아닌 제3의 성을 가진 이들도 있을수 있기 때문이죠(특히 호주, 인도, 독일 등에서는 제3의 성을 법적으로 보장하기 때문에 모바일 서비스의 회원정보 입력에서도 제3의 성을 입력할수 있도록 해주어야 합니다.) 이 경우 조건식은 참/참이 아닌 경우가 아니라 남자, 여자 그리고 제3의 성으로 비교할 수 있도록 해주어야 합니다. 이를 위해 else if구문이 사용됩니다. 

if <조건1>
{
   <조건1이 참일 때 실행할 구문>
}else if <조건2>
{  
   <조건2이 참일떄 실행할 구문>
} else
{
   <앞의 조건들을 전부 만족하지 않았을 때 실행할 구문>
}
else if구문은 if절과 함께 사용해야 한다는 점에서 else절과 비슷하지만 자신만의 조건식을 갖는다는 특성이 있습니다. else if 구문은 조건식이 if조건절을 만족하지 못한 경우에 호출되어 자신의 조건식을 만족하는지를 체크합니다. 아래는 else if 구문을 추가하여 성별 비교 조건식을 수정한 예제입니다. 
if gender == "M"
{
  print("남자 성년자입니다.")
}else if gender == "F"
{
  print("여자 성년자입니다.");
}else
{
  print("남자와 여자 어느 쪽에도 속하지 않습니다.")
}
이 예제에서 else if 구문은 맨 처음에 if 조건절이 참이 아닌 경우에만 체크됩니다. 즉 gender 변수의 값이 "M"이 아닌 경우에만 else if절로 실행 흐름이 이어진다는 거죠. 하지만 여기서도 다시 조건식의 값을 체크하여 코드 블록의 실행 여부를 결정합니다. 만약 gender 변수의 값이 "F"였다면 "여자 성년자입니다"라는 메시지가 출력된 후 코드 실행이 종료됩니다. F가 아니라면 else절로 실행 흐름이 이어져 "남자와 여자 어느 쪽에도 속하지 않습니다"가 출력된 후 코드가 마무리됩니다. 

else if 구문은 else와 달리 여러 번 사용할 수 있습니다. 따라서 비교해야 할 값이 여러 기앨 때 사용하기 좋습니다. else 구문은 앞에서 진행된 if~else if구문들의 조건 체크가 모두 끝난후 어느 것에도 속하지 않았을 때에만 실행되어야 하므로 항상 조건문의 맨 마지막에 위치해야 합니다. 
else if 구문을 사용함으로써 조건문이 상당히 간결하게 정리될 수 있습니다. 이를 알아보기 위해 사용자의 웹 브라우저 정보를 입력받아 비교 결과를 출력하는 프로그램을 작성해 봅시다. 브라우저의 종류는 여러 개이므로 각각의 조건을 비교해서 분기해야 합니다. 만약 else if 구문 없이 처리하려면 앞에서 다루었던 것보다 좀더 복잡한 조건절이 필요합니다. 
var browser = "Safari" //입력받을 브라우저명
var browserName : String; //브라우저 이름을 저장할 변수
if (browser == "IE")
{
  browserName = "인터넷 익스플로러"
}else
{
   if (browser == "FF")
   {
     browserName = "파이어폭스"
   }else
   {
   if (browser == "Chrome")
   {
     browserName = "크롬"
   }else
   {
   if (browser == "Opera")
   {
     browserName = "오페라"
   }else
   {
   if (browser == "Safari")
   {
     browserName = "사파리"
   }else
   {
     browserName = "알려지지 않은 브라우저"
   }
}
print("사용하고 계신 브라우저는 \(browserName)입니다")

언뜻 보기에 상당히 복잡해 보이는 코드입니다. browser 변수에 입력된 문자열을 비교해서 일치할 경우 browserName 변수에 브라우저의 한글 이름을 입력해 준 다음 최종으로 이를 출력 하는 코드죠

4행에서 browser 변수의 값을 "IE"라는 문자열과 비교합니다. 저장된 문자열은 "Safari"이므로 비교 결과는 거짓입니다. 따라서 5행의 내용은 실행되지 않고 else블록으로 이동합니다. 블록에 진입하면 7행에서 browser 변수를 "FF"문자열과 비교하는 if문을 만나게 되는군요 이번에도 문자열은 일치하지 않으므로 조건문 결과는 false거짓을 나타냅니다. 따라서 8행은 실행되지 않고 아래 else 블록으로 이동하게 됩니다. 
마찬가지로 10, 13행의 조건절도 거짓이므로 16행까지 내려오는데요 이때 16행의 조건절에서 드디어 browser 변수의 값과 일치하는 문자열인 "Safari"를 만납니다. 이에 따라 17행의 구문이 수행되죠 조건을 만족했으므로 19행의 구문은 실행되지 않은 채로 browserName에는 "사파리"라는 이름이 저장된 후 if 조건절이 종료됩니다. 가장 마지막에 작성된 print()구문으로 이동한 실행 흐름은 출력 구문의 내용대로 메시지를 출력합니다. 

[실행결과]
사용하고 계신 브라우저는 사파리입니다. 

위코드의 처리 과정을 정리해보면 다음과 같습니다. 
1. 4행에서 brwser 변수을 "IE"문자열과 비교
2. 7행에서 browser 변수를 "FF"문자열과 비교
3. 10행에서 browser 변수를 "Chrome" 문자열과 비교
4. 13행에서 browser 변수를 "Opera" 문자열과 비교
5. 16행에서 browser 변수를 "Safari" 문자열과 비교
6. 25행에서 구문을 수행. 이후 비교 구문 종료
이처럼 여러 개의 조건을 비교하려면 if문 내부에 if문을 중첩하는 방식으로 처리할수 있습니다. 그러나 중첩 구문의 설명에서도 지적했듯이 조건이 여러 개일 경우 조건의 개수만큼 if문이 계속 중첩되어야 해서 보기에도 불편할 뿐만 아니라 코드를 이해하기도 어렵습니다. 필요한 내용을 추가하려면 코드의 흐름을 완전히 이해해야만 하죠 코드의 유지 보수가 더 어렵다는 이야기입니다. 

이와같은 상황에서 else if를 사용하면 매우 간결한 코드를 작성할 수 있습니다.한 번씩만 사용 할 수 있는 if~else구문와 달리 else if구문은 횟수의 제한 없이 조건 비교를 추가할수 있다는 점에서 매우 활용성이 높죠. 앞서 중첩된 형식으로 작성했던 조건문 예제를 else if구문을 사용하여 다시 작성해보겠습니다
var browser = "Safari" //입력받을 브라우저명
var browserName : String //브라우저 이름을 저장할 변수
if (browser == "IE")
{
  browserName = "인터넷 익스플로러"
}else if (browser == "FF")
{
  browserName = "파이어폭스"
}else if (browser == "Chrome")
{
  browserName = "크롬"
}else if (browser == "Opera")
{
  browserName = "오페라"
}else if (browser == "Safari")
{
  browserName = "사파리"
}else
{
  browserName = "알려지지 않은 브라우저"
}
print("사용하고 계신 브라우저는 \(browserName)입니다")

else if를 사용한 위 코드는 앞서 if구문을 중첩해서 작성한 것과 완전히 같은 내용입니다. 하지만 그보다 훨씬 잘 정리되어 있고 읽기 쉽습니다. 위 코드는 위에서부터 차례대로 비교를 진행하다가 조건에 맞는 부분을 만나면 해당하는 블록 내부의 구문을 수행한 후 전체 if문을 종료합니다
종종 else if구문 대신 그냥 if구문을 계속 사용하는 것은 안되는지 궁금해 하는 분들이 있습니다. 다음과 같은 식으로 말이죠
if (browser == "IE")
{
  browserName = "인터넷 익스플로러"
}
if (browser == "FF")
{
  browserName = "파이어폭스"
}
if (browser == "Chrome")
{
  browserName = "크롬"
}
...
어떤 경우에는 위 예제처럼 if구문을 계속 추가한 것과 이를 else if구문으로 대체한 것의 결과가 동일하기도 합니다. 이 때문에 else if구문을 if구문으로 대체할수 있지 않느냐는 물음이 생길 수도 있을 법한데요. 중요한 차이가 하나 있습니다. 컴파일러는 if~else if구문은 하나의 조건식으로 인식하는 반면 if~ if~ 구문은 서로 별개의 조건문으로 인식하거든요
따라서 if~else if구문에서는 차례대로 조건식을 비교하다가 일치하는 것이 발견되면 더이상 비교를 진행하지 않고 조건문을 종료하지만 이것을 if ~ if구문으로 작성할 경우 이미 일치하는 조건식이 발견되었더라도 이에 아랑곳 하지 않고 모든 조건식을 비교한 후 구문을 마칩니다. 컴퓨터 입장에서 보면 불필요한 리소스가 낭비되는 셈이죠. 이는 무척 좋지 않은 코드이므로 지향해야 합니다. 동시에 일어날 수 없는 이율 배반 사건이라면 반드시 if~else if구문을 사용하여 리소스를 절약하는 것이 좋습니다. 




4.2.2 guard 구문 : guard 구문은 if 구문과 마찬가지로 주어진 표현식의 결과가 참인지 거짓인지에 따라 구문의 실행 여부를 결정짓는 방식의 조건문입니다. if 구문과의 차이점은 guard 구문에는 else 블록이 필수이지만 표현식의 결과가 참일 때 실행되는 블록이 없다는 점입니다. 
guard <조건식 또는 표현식> else
{
  <조건식 또는 표현식의 결과가 false일 때 실행될 코드>
}
guard 구문은 주로 후속 코드들이 실행되기 전에 특정 조건을 만족하는지 확인하는 용도로 사용합니다. 다시 말해 특정 조건을 만족하지 않은 채로 후속 코드를 실행하면 심각한 오류가 발생 할 경우에 전체 구문을 조기 종료 (Early Exit)하기 위한 목적으로 사용되는 것이 guard 구문입니다. 따라서 guard 구문의 else 블록에는 이후의 코드 진행을 막아주는 구문이 반드시 포함되어야 합니다. return 또는 break 구문 등이 이에 해당하죠. guard 구문은 보통 함수나 메소드에서 사용되는데 이때에는 return 구문이 이같은 조기 종료 처리 역할을 합니다.   다음예제를 봅시다. 
func divide(base: Int)
{
  let result = 100 / base
  print(result)
}
아직 학습하지 않았지만 위 예제는 함수를 정의하는 구문입니다. 여기서 함수란 값을 입력받아 정해진 처리를 하도록 정의된 기능 단위를 말합니다.  주어진 예제에서는 divide라는 이름의 함수가 base 변수를 통해 입력받은 정수값으로 100을 나누고 그 몫을 출력하는 과정을 정의하고 있습니다. 
이 함수에서 주의해야할 부분은 입력받은 값을 이용하여 100을 나눈다는 점입니다. 나눗셈에서 주의할 아주 유명한 수학적 전제가 하나 있는데 바로 어떤 숫자이든지 0으로 나누어서는 안된다는 겁니다. 이점은 컴퓨터 연산에서도 마찬가지입니다. 0을 제외한 모든 값은 나눗셈 연산에 사용할 수 있지만 0으로 나눌 경우에는 오류가 발생합니다. 이를 Divide By Zero 오류라고 합니다. 따라서 입력받은 값이 0이 아닐때에만 함수 내의 코드를 실행하고 그렇지 않을 경우에 는 함수의 실행을 중지해야 합니다. 이런 경우를 제어하기 위해 다음과 같이 guard 구문을 사용합니다. 
func divide(base : Int)
{
  guard base != 0 else
  {
    print("연산할 수 없습니다.")
    return
  }
let result = 100 / base
print(result)
}
함수의 실행을 종료할 때에는 return 구문을 사용합니다. return 구문이 실행되면 이후의 코드가 남아있더라도 더 이상 진행하지 않은 채로 함수가 종료됩니다. 함수의 종료와 함께 반환해야 하는 값이 있다면 그 값을 반환하는 역할도 return 구문의 몫입니다. 

divide 함수는 입력받은 인자값이 0이면 guard 구문의 조건을 만족하지 못합니다. 이 때에는 else 블록 내부에 작성된 return 구문이 실행되어 이후의 코드를 실행하지 않은 채로 종료됩니다. 아 물론 연산을 처리할 수 없다는 메시지는 출력하겠지만요 이후의 코드는 실행되지 않으므로 0으로 나누는 오류가 발생하지도 않습니다. 만약 인자값이 0이 아니라면 else 블록이 실행되지 않으니 guard 구문 이후의 코드가 실행되어 나누기 연산이 처리될 테고요

앞에서 if 구문을 충분히 이해했다면 위 예제를 보고 if구문으로 대신할수도 있다는 생각을 할 겁니다. 맞습니다 .guard 구문은 if구문으로 대체할수 있습니다.
func divide(base : Int)
{
  if base == 0
  {
    print("연산을 처리할수 없습니다.")
    return
  }
let result = 100 / base
print(result)
}
주의할 점은 guard 구문 대신 if구문을 사용함으로 인해 조건식이 반대로 바뀐다는 것입니다. guard 구문에서는 나누기 연산을 위해 충족되어야 하는 조건을 사용했다면 if구문에서는 반대로 연산이 실패할 조건을 사용하여 함수를 종료하도록 처리하고 있음에 유의해서 작성해야 합니다. 

이처럼 guard 구문은 언뜻 보기에 if구문으로 대체가 가능하기 때문에 그다지 필요 없어 보일 수도 있습니다 하지만 guard 구문은 본래 실행 흐름을 종료하기 위한 목적으로 사용되는 구문이기 때문에 코드를 중첩해서 사용하지 않아도 된다는 장점이 있습니다. 이점은 전체 코드를 굉장히 깔끔하고 단순하게 만들어줍니다. guard 구문을 많이 사용해도 코드의 깊이가 깊어지지 않기 때문입니다. 다음은 guard 구문을 이용하여 인자값을 다양한 조건으로 필터링하는 코드를 보여줍니다. 
func divide(base : Int)
{
  guard base != 0 else
  {
    print("연산할 수 없습니다")
    return
  }
guard base > 0 else
{
  print("base는 0보다 커야 합니다.")
  return
}
guard base < 100 else
{
  print("base는 100보다 작아야 합니다.")
  return
}
let result = 100 / base
print(result)
이런 특성 때문에 조건을 체크하여 실행 흐름을 종료시킬 때에는 가급적 guard 구문을 사용하는 것이 좋습니다. 조건을 체크하되 다른 실행 흐름을 이어나가고 싶은 경우에만 if~else 구문을 사용하면 됩니다. 