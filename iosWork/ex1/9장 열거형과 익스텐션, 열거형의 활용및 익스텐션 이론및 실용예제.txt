9.1.3 열거형의 활용 : 열거형은 클래스나 구조체와 함께 코코아터치 프레임워크에서 아주 많이 사용되는 객체입니다. 특히 메소드의 호출 옵션이나 스타일을 설정할때 열거형으로 미리 정의해둔 멤버들을 속성값으로 사용하는 경우가 많습니다. 

다음은 앨범 이미지나 카메라를 다룰 때 사용하는 이미지 피커 컨트롤러에서 소스 타입을 설정할 때 사용하는 열거형 객체입니다. 

enum UIImagePickerControllerSourceType: Int
{
  case photoLibrary
  case camera
  case savedPhotosAlbum
}

이미지 피커 컨트롤러에서 이미지를 가져올 수 있는 곳은 몇 군데로 제한됩니다. 포토 라이브러리 카메라 그리고 저장 앨범 정도이죠. 이를 열거형 객체에 저장해 놓고 소스 타입을 지정할 때 이를 이용하는 겁니다. 

만약 이 값을 열거형으로 정의해 놓지 않는다면 어떤 문제가 생길 수 있을까요? 우선 개발자가 소스 타입을 마음대로 입력할 수 있으므로 잘못된 입력이나 오타로 인하여 심각한 오류가 발생할 수 있습니다. 뿐만 아니라 이미지가 저장되는 곳이 아닌 엉뚱한 위치에서 임의의 보안 파일을 읽어 들일 가능성도 배제할수 없습니다. 한마디로 메소드를 이용한 보안 취약점이 생길 수 있는 것이죠. 이같은 일을 방지하기 위해 iOS는 정해진 곳에서만 이미지소스를 읽어 들일 수 있도록 소스 타입을 열거형으로 선언하고 이 타입을 속성으로 사용합니다. 

위 열거형에서 멤버가 실제로 가지는 값은 0, 1, 2로 극히 단순합니다. 하지만 열거형을 정의하지 않고 0, 1, 2와 같은 정수값을 직접 사용할 경우 3, 4, 5 ... 등의 임의의 값을 입력할 수 있는 가능성이 충분한 반면 열거형 타입을 사용하면 0, 1, 2이외의 값은 전혀 입력할 방법이 없습니다. 보다 안전성을 높일수 있는 거죠. 이처럼 입력이 필요한 속성은 모두 열거형 타입으로 정의해서 사용하면 사용자의 입력 범위를 줄일 수 있어 실수를 차단할수 있을 뿐만 아니라 훨씬 안전한 코드를 작성할 수 있다는 장점이 있습니다. 

열거형을 활용하는 또다른 예는 알림창입니다. iOS 8 이후로 알림창은 기존의 알림창과 액션 시트가 하나로 통합된 UIAlertController라는 객체를 사용하기 시작했는데, 이 객체에서는 알림 창이나 액션 시트의 구분을 preferredStyle 매개변수의 속성값을 통해 제어합니다. 이 매개변수는 UIAlertControllerStyle이라는 열거형 타입값을 입력받아 이 알림창이 액션 시트가 될지 경고창이 될지를 결정합니다. 

let alert = UIAlertController(title: "알림", message: "경고창입니다.", preferredStyle: .alert)

이때 만약 다음과 같은 방식으로 창 스타일을 입력받는다면 아마도 입력 과정에서 오류가 빈번하게 발생할 겁니다. 

let alert = UIAlertController(title: "알림", message: "알림창 메시지입니다.", preferredStyle: "actionSheet")

하지만 이를 단순히 문자열로 입력받지 않고 열거형을 정의하여 사용하는 덕분에 사용자의 마구잡이식 입력을 제한할 수 있을 뿐만 아니라 컴파일러가 자동완성으로 입력을 보조할 수도 있는 등의 여러 가지 이점이 생겨나고 입력해야 할 값이 더욱 분명해질수 있습니다. 이같이 열거형은 입력해야 할 값을 명확하게 정의하고 여기에서 벗어난 값은 입력되지 않을수 있도록 차단하여 코드의 안정성을 높이는 역할을 합니다. 

따라서 우리는 열거형의 장점을 충분히 이해하고 코드 작성 시 사용자의 직접 입력을 열거형 선택으로 대체할 수 있을지 검토하여 가능하다면 적극적으로 활용하는 것이 좋습니다. 다루어야 할 객체가 늘어나는 점이 부담일지 모르지만 구조적으로는 훨씬 더 안정된 코드를 설계할 수 있기 때문입니다. 




9.2 익스텐션 : 확장 구문으로 번역될 수 있는 익스텐션(Extensions)은 이미 존재하는 클래스나 구조체, 열거형 등의 객체에 새로운 기능을 추가하여 확장해주는 구문입니다. 새로운 객체를 정의하는 것이 아니라 이미 존재하는 객체에 여러 가지 요소를 추가해준다는 점이 특징이지만 자신의 독립적인 객체를 가지지 않고 다른 객체를 확장해준다는 특징 때문에 확장 구문은 단순히 구문이라고 보기도, 객체의 하나로 보기도 어렵습니다. 하지만 라이브러리나 프레임워크에 포함되어 소스코드에 직접 접근할수 없는 객체라 할지라도 확장 구문을 이용하면 거의 제약 없이 새로운 기능을 추가할 수 있다는 점에서 익스텐션은 강력한 힘이 있습니다. 

익스텐션은 오브젝티브-C에서 제공되는 카테고리(Category)와 비슷합니다. 차이점이라면 카테고리는 자체적인 이름을 가지지만 익스텐션은 자체적인 이름을 갖지 않는다는 점 정도죠. 또 하나 더 카테고리는 클래스에만 적용할수 있지만 스위프트의 익스텐션은 클래스뿐만 아니라 구조체나 열거형 등의 객체에 대해서도 기능을 추가할수 있는 만큼 훨씬 더 강력하다는 점을 들 수 있습니다. 

스위프트에서 익스텐션을 통해 구현할 수 있는 것들은 대표적으로 다음과 같습니다. 

※ 새로운 연산 프로퍼티를 추가할 수 있습니다. 
※ 새로운  메소드를 정의 할 수 있습니다. 
※ 새로운 초기화 구문을 추가할수 있습니다. 
※ 네 기존 객체를 수정하지 않고 프로토콜을 구현할수 있습니다. 

이 중에서 프로토콜 구현 기능은 다음 장에서 다루고 있으므로 여기서는 첫 번째부터 세번째 기능까지만 알아보겠습니다. 

익스텐션을 사용할 때는 extension 키워드를 사용합니다. 이 키워드 다음에는 확장하고자 하는 기존 객체의 이름을 작성하고 이어서 중괄호 블록을 덧붙입니다. 중괄호 블록 내부에는 추가할 기능을 구현하면 됩니다. 

extension <확장할 기존 객체명>
{
  //추가할 기능에 대한 구현 코드를 작성
}

이 형태에서 볼 수 있듯이 익스텐션은 extension 키워드를 사용할 뿐 독립적인 객체를 생성하는 구문이 아닙니다. 이미 정의되어 있는 기존 객체의 기능을 더 추가해주는 것일 뿐입니다. 따라서 익스텐션은 객체가 아니며 또한 타입으로 사용될 수도 없습니다. 이 점에 유의 바랍니다. 



9.2.1 익스텐션과 연산 프로퍼티 
익스텐션을 이용하면 기존 객체에 프로퍼티를 추가할수 있습니다. 단 추가할수 있는 것은 연산 프로퍼티로 제한됩니다. 저장 프로퍼티는 익스텐션을 통해 추가할수 없습니다. 대신에 인스턴스 프로퍼티든 타입 프로퍼티든 연산 프로퍼티라면 모두 추가할수 있습니다. 

extension Double
{
  var km: Double { return self * 1_000.0 }
  var m: Double { return self }
  var cm: Double { return self / 100.0 }
  var mm: Double { return self / 1_000.0 }
  var description: String{
    return "\(self)km는 \(self.km)m, \(self)cm는 \(self.cm)m, \(self)mm는 \(self.mm)m입니다."
  }
}

우리가 스위프트를 갓 학습하기 시작할 무렵 다루었던 자료형 Double 의 구조체 확장 구문입니다. 구조체는 익스텐션에 의해 확장될수 있으며 우리가 소스 코드를 직접 수정할 수 없는 객체라 할지라도 익스텐션을 통해 주어진 조건 안에서는 얼마든지 필요한 만큼 객체의 기능을 확장할 수 있으므로 기본 자료형인 Double 타입 역시 확장 구문을 사용하여 기능을 추가할수 있습니다. 

위 예제에서는 모두 네 개의 연산 프로퍼티를 추가하고 있는데 이들 각각은 Double 타입으로 정의된 값에 대한 단위 변환을 처리해주는 역할입니다. 입력된 실수값의 기본 단위를 미터(m)로 잡고 이 값에 대한 단위별 프로퍼티를 호출하면 그 단위에 맞는 미터값으로 변경해주는 일을 하죠. 이렇게 익스텐션을 사용하여 Double 자료형을 확장하고 나면 이후로는 모든 실수값에서 우리가 추가한 기능들을 사용할수 있습니다. 

2.km // 2000m
5.5.cm // 0.055m
125.mm // 0.125m
7.0.description // "7.0km는 7000.0m, 7.0cm는 0.07m, 7.0mm는 0.007m입니다."

이런 식으로 자료형의 기능을 확장해놓으면 다음과 같이 각 단위별로 값을 더해야 할 때 매우 편리합니다. 

let distance = 42.0.km + 195.m
print("마라톤의 총 거리는 \(distance)m입니다.")
// "마라톤의 총 거리는 42195.0m입니다."

참고로 연산 프로퍼티를 정의하는 과정에서 숫자에 1_000처럼 언더바가 추가된 부분이 있는데. 이는 단순히 자릿수를 구분해주기 위해 넣은 것으로 언더바를 사용하지 않고 표기한 것과 아무런 차이가 없습니다. 

1_000 == 1000 // true
1_00_0 == 100_0 // true
1_0_0_0 == 1000 //true
10_00 == 100_0 // true




9.2.2 익스텐션과 메소드 : 익스텐션을 이용하면 기존 객체에 새로운 인스턴스 메소드나 타입 메소드를 정의할수 있습니다. 매개변수 타입을 달리하면 서로 다른 메소드가 되는 메소드 오버로딩 특성을 이용해서 새로운 메소드를 정의할수도 있고 매개변수명을 변경하여 새로운 메소드를 작성할 수도 있습니다. 하지만 기존 객체에서 사용된 같은 메소드를 익스텐션에서 재정의하는 것은 안됩니다. 이는 오버라이딩을 뜻하는 것으로 어디까지나 클래스 객체에서 상속으로만 할수 있는 기능이기 때문입니다. 

extension Int
{
  func repeatRun(task: () -> Void)
  {
     for _ in 0 ..< self
     {
        task()
     }
  }
}

앞에서 다루었던 기본 자료형 Double 구조체의 확장에 이어서 이번에는 Int 구조체를 확장하였습니다. repeatRun(task:)라는 이름으로 메소드를 정의하고 있는데 이 메소드는 () -> Void 형식의 함수를 인자값으로 입력받아 매개변수 task에 대입합니다. 물론 함수를 인자값으로 사용한다는 것은 그 대신 클로저를 인자값으로 사용할 수 있다는 뜻이기도 합니다. 

인자값으로 입력받는 함수는 인자값과 반환값이 없는 형태이기만 하면 됩니다. 입력받은 함수는 Int 자료형에 할당된 값만큼 반복해서 실행하도록 구문이 작성되어 있습니다. 이를 위해 반 닫힌 범위 연산자가 사용된 것을 눈여겨 보기 바랍니다. 이렇게 확장된 Int 구조체를 사용해 봅시다. 
let d = 3
d.repeatRun(task: {
print("반갑습니다")
})
[실행 결과]
반갑습니다
반갑습니다
반갑습니다

상수 d에 3이라는 정수가 할당되었으므로 repeatRun(task:)메소드에 인자값으로 입력되는 함수는 모두 3번 반복해서 실행됩니다. 인자값으로 입력된 함수는 단순히 "반갑습니다" 구문을 출력하는 내용만 작성되어 있으므로 주어진 횟수만큼 해당 문장이 출력됩니다. 

위 구문에서는 클로저를인자값으로 넣어주고 있는데 클로저가 나온 김에 관련 문법 하나만 복습해 봅시다. 위 구문을 트레일링 클로저(Trailing Closure)문법을 사용하여 다음과 같이 변경해도 같은 결과를 얻을수 있습니다
d.repeatRun{
print("반갑습니다")
}

인스턴스 메소드는 익스텐션에서도 mutating 키워드를 사용하여 인스턴스 자신을 수정하도록 허용할수 있습니다. 구조체나 열거형에서 정의된 메소드가 자기 자신의 인스턴스를 수정하거나 프로퍼티를 변경해야 할때 mutating 키워드를 사용하는데 익스텐션이 구조체나 열거형을 확장의 대상으로 삼았을 때가 이에 해당합니다. 이때는 본래의 구조체나 열거형에서 mutating 키워드를 추가하고 프로퍼티나 인스턴스를 수정하듯이 익스텐션에서도 동일하게 처리해주면 됩니다. 

extension Int
{
  mutating func square()
  {
     self = self * self
  }
}

var value = 3
value.square() // 9

Int 구조체에 익스텐션을 이용하여 square()라는 메소드를 정의하였습니다. 이 메소드는 별도의 반환값 없이 값 자체를 제곱값으로 변경해버리는 역할입니다. value에 3이 할당되었고 이 값을 제곱값으로 변경하였으므로 메소드의 실행 결과는 9가 됩니다. 이때 주의할 점은 해당 메소드가 인스턴스 자체의 값을 변경하고 있으므로 값을 상수에 할당해서는 안 됩니다. 즉 다음과 같이 작성하면 오류가 발생합니다. 

let value = 3
value.square() // X

값을 변수에 할당하지 않고 다음과 같이 리터럴에 대해 직접 메소드를 호출하는 경우도 마찬가지입니다. square()메소드의 실행결과 인스턴스의 값 자체를 변경해야 하는데 이렇게 변경할 곳에 리터럴 3이 들어가는 것은 상수에 값을 할당한 것과 마찬가지입니다. 메모리에 저장된 3이라는 값 자체를 다른 값으로 변경할수는 없기 떄문입니다. 
3.square() //X

익스텐션으로 확장할 수 있는 기능에는 분명 제한적인 부분도 있겠지만 직접 소스 코드를 수정할 수 없는 라이브러리나 스위프트 언어 기반을 이루는 객체들까지 모두 확장할수 있다는 점에서 매우 매력적인 기능임에는 분명합니다. 무엇보다 여러분이 한번 작성해 놓은 스위프트 코드들을 라이브러리화한 상태에서 추가해야 할 사항이 생겼을 때 익스텐션을 사용한다면 매우 간단하게 처리할수 있습니다. 

하지만 익스텐션을남용하면 객체의 정의를 모호하게 만들거나 각 실행 위치에 따라 서로 다른 정의로 구성된 객체를 사용하게 만드는 결과를 가져올 수도 있습니다. 어느 위치에서는 익스텐션의 영향을 받아 추가된 프로퍼티나 메소드들이 제공되는데 또 다른 위치에서는 익스텐션의 영향을 받지 않아 추가된 프로퍼티나 메소드들을 전혀 사용할 수 없는 경우가 생길수 있기 때문입니다. 

또한 객체의 정의가 파편화되기 쉬운 까닭에 객체의 정확한 구성을 파악하기 어렵다는 단점도 있습니다. 객체의 구성 요소를 정확하게 파악하려면 관련 객체의 정의 구문에 더하여 익스텐션 정의를 따라가며 기능 정의를 모두 확인해야 하기 때문입니다. 익스텐션이 반드시 한 곳에서만 정의되었다는 보장도 할 수 없으므로 해당 객체의 전체 구조를 보려면 전체 소스 코드를 뒤져서 파편화된 모든 익스텐션들을 모아야만 할 수도 있습니다. 

이를 방지하기 위해 익스텐션은 필요한 곳에서는 충분히 사용하되 남용하지 않고 여기저기에 분산해서 작성하기보다는 전체적인 정의와 구조를 파악할수 있는 위치에서작성하는 것이 좋습니다. 