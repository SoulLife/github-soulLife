11. 오류처리 ; 스위프트는 어떻게 오류를 처리할까요?

프로그래밍을 하다 보면 절대 피할수 없는 것이 오류입니다. 오류는 입력 과정에서 발생하기도 하고 상이한 시스템 환경에서 발생하기도 하지만 경우에 따라서는 경험 부족으로 인해 오류가 발생하기도 합니다. 이런 오류를 잘 처리하지 않고 코드를 작성하면 사소한 원인에도 쉽게 다운 되어 사용하기 불안한 애플리케이션이 만들어집니다. 그래서 프로그래밍 과정은 원하는 로직을 잘 구현하는 일 외에도 오류를 꼼꼼하게 처리하여 안정성을 높이는 일을 매우 중요하게 다룹니다. 
스위프트에서 오류를 처리하는 방법은 크게 두 가지 입니다. 한 가지는 옵셔널이고 또다른 한 가지는 이제 배울 오류 처리 구문이죠. 옵셔널은 앞에서 배운 바와 같이 잘못된 처리의 결과나 실행 도중실패했을 때 그 결과를 오류로 발생시키는대신 nil 값으로 반환하여 개발자가 이를 적절히 알아서 처리하도록 유도하는 개념이고. 오류 처리 구문은 스위프트 2.0버전부터 포함된 문법으로 반환값 타입이나 코드의 흐름과 상관없이 오류를 던질수 있도록 하는 구문입니다. 오류 처리 구문의 도입 덕분에 비로소 스위프트는 조금 더 안정적인 코드 작성이 가능해 졌다고 할수 있습니다. 이러한 오류 처리 구문은 스위프트만의 것은 아니며 객체지향 언어 대다수에서 채택하고 있는 것이기도 합니다. 

11.1 오류 처리 구문 : 초기에 발표된 스위프트는 옵셔널을 통해 오류를 충분히 처리할수 있어서 타 언어에서 즐겨 사용되는 try~catch와 같은 오류 처리 구문이 필요하지 않을 만큼 안전성이 뛰어나다는 점을 강점으로 내세웠습니다. 하지만 이 부분에는 단점이 있었는데 오류가 발생했을 때 오류에 대한 정보를 외부로 전달할 방법이 없다는 점입니다. 특히 내부적으로 복잡한 연산 과정을 실행하거나 여러 가지 구문을 처리해야 하는 함수나 메소드에서 이런 현상이 두드러집니다. 실행하는 과정에서 발생할 수 있는 다양한 오류들을 함수 외부로 전달하기가 어렵다는 것이죠. 옵셔널 타입을 사용한다고 해도 발생하는 오류의 종류에 상관없이 단순히 nil 하나만 반환할수 있기 때문입니다. 

예를 들어 문자열을 입력받고 이를 정수로 변환한 후 반환하는 기능을 하는 함수가 정의되어 있다고 가정해봅시다. 이 함수는 입력받은 문자열 인자값에 따라 여러 가지 오류 상황을 내포하고 있습니다. 인자값에 nil 값이 입력될 수도 있고 정수로 변환할수없는 일반 문자열이나 특수 문자가 입력될 수도 있습니다. 또한 정수로 변환할수 는 있지만 Int 타입에서 저장할수 있는 한계를 넘어서는 값을 가지게 될 수도 있습니다. 

이런 다양한 오류 상황이 있음에도 불구하고 이 함수가 표현할수 있는 오류는 단순히 nil 하나입니다. 서로 다른 오류가 발생했음에도 불구하고 이를 자세하게 함수 외부로 전달하기 곤란할 뿐만 아니라 함수를 호출한 외부 코드에서도 함수 내부에서 발생한 오류에 대해 자세한 정보를 받을수 없는 것이죠. 만약 nil이 아니라 다른 형식으로 오류를 반환하고자 하면 함수의 반환 타입인 Int 타입에 대한 제약에 걸리게 됩니다. 

이런 구조적인 문제점 외에도 코코아터치 프레임워크에서 사용하는 오류 처리 구조 역시 스위프트가 본래 바라던 아키텍처와 차이가 있습니다. 오브젝티브-C기반으로 작성된 코코아터치 프레임워크에서 오류 정보를 반환하는 방식은 오류 정보를 저장할 객체를 인자값으로 함수나 메소드에 전달한 다음 필요할 때 꺼내어 사용하는 방식입니다. 

이는 함수나 메소드에서 반환 타입을 준수하면서도 오류 정보를 제공할 수 있는 방법이지만 기본적으로 오류에 대한 모든 대응을 옵셔널 타입으로 해결하고자 하는 스위프트의 언어 구조 입장에서 그다지 좋은 선택이 아닙니다. 비록 오브젝티브-C에 대한 호환성을 높이기 위해 코코아 터치 프레임워크의 구조를 거의 그대로 사용하지만 동시에 오브젝티브-C에 대한 언어적 차별 성을 두고자 하는 애플의 고민이 묻어나죠

최근의 객체지향 언어들은 오류가 발생했을 때 함수나 메소드에서 해당 오류를 반환(returns)하는 것이 아니라 던지는(throws)처리를 할 수 있게끔 지원합니다. 오류를 반환하는 것과 던지는 것은 다릅니다. 오류를 반환하려면 함수의 반환 타입과 일치해야 하지만 오류를 던지는 것은 함수의 반환 타입과 일치하지 않아도 됩니다. 말 그대로 오류에 대한 객체를 반환하는 것이 아니라 실행 흐름 중간에 오류 객체를 만들어 다른 실행 흐름으로 옮겨가는 것이기 때문입니다. 이렇게 되면 함수/메소드의 반환 타입을 건드리지 않고도 효율적으로 오류 정보를 전달할수 있게 되는 셈입니다. 

스위프트에서도 결국 2 버전을 발표하면서 이러한 오류 처리 구문을 도입하였습니다. 이 때문에 코코아터치 프레임워크에서도 일부 변화가 있었습니다. 오브젝티브-C 방식처럼 오류 객체를 인자값으로 넣어 호출하던 메소드나 함수 대신 오류를 던지기 시작한 것입니다. 우리는 메소드를 정의할 때 오류를 던지고 이 메소드를 호출하여 사용할 때 오류를 잡아낼 수 있도록 구문을 작성해야 합니다. 

사실 오류 처리(Error Handling)보다는 예외 처리(Exception Handling)라는 이름으로 더 많이 사용되며 엄밀히 구분하자면 오류와 예외는 차이가 있는 개념입니다. 하지만 여기에서는 편의상 오류와 예외를 합하여 오류라는 단어로 부르겠습니다. 



11.1.1 오류 타입 정의 하기 : 오류 처리를 위해서는 오류 정보를 담아 함수나 메소드 외부로 던질 오류 타입 객체가 필요합니다. 이 객체는 하나의 일관된 오류 주제에 소속된 여러 가지 오류를 정의할 수 있어야 하므로 보통 열거형 타입으로 정의하는 경우가 많습니다. 이 객체를 만들어보면서 오류 타입을 정의하는 과정을 익혀봅시다. 

[YYYY-MM-DD] 형태를 보이는 문자열을 분석하여 연도, 월, 일 형식의 데이터로 각각 변환하는 함수가 있다고 해 봅시다. 이 함수는 문자열을 분석하는 과정에서 다음과 같은 다양한 오류를 만날수 있습니다. 

1. 입력된 문자열의 길이가 필요한 크기와 맞지 않는 오류
2. 입력된 문자열의 형식이 YYYY-MM-DD 형태가 아닌 오류
3. 입력된 문자열의 값이 날짜와 맞지 않는 오류

이처럼 오류의 내용은 다양하지만 이들 오류는 모두 문자열을 날짜 형식의 데이터로 변환하는 과정에 관한 오류들이라고 할 수 있습니다. 함수가 반환할 오류는 이처럼 일관된 주제와 연관된 다양한 경우를 표현할수 있어야 합니다. 이를 위해 가장 적합한 객체 타입이 바로 열거형이라 할수있죠

오류 타입으로 사용되는 열거형을 정의할 때는 반드시 Error 라는 프로토콜을 구현해야 합니다. 컴파일러는 Error 프로토콜을 구현한 열거형만을 오류 타입으로 인정합니다. 아무 열거형이나 오류 타입이라고 사용해버리면 컴파일러도 이를 처리하는 데 곤란을 겪을 것이기 때문입니다. 

이때의 Error는 아무 기능도 정의되지 않은 빈 프로토콜입니다. 구현해야 할 프로퍼티나 메소드도 필요로 하지 않습니다. 실제로 Error 프로토콜의 정의를 살펴보면 다음처럼 빈 프로토콜 로 정의되어 있는 것을 볼 수 있습니다. 

protocol Error
{
}

간혹 이처럼 아무 내용도 작성되지 않은 프로토콜을 볼 수 있는데 이들은 모두 프로토콜의 기능 구현보다는 프로토콜을 구현했다는 사실 자체가 중요한 경우가 많습니다. Error 프로토콜 역시 마찬가지입니다. 이 프로토콜을 구현한 열거형은 오류 타입으로 사용해도 된다는 인증 마크라고 할 수 있죠. 

일단 Error 프로토콜을 열거형에 추가하고 나면 나머지는 우리가 원하는대로 정의할수 있습니다. 반환할 오류 종류들을 열거형의 각 멤버로 정의하는 것입니다. 앞에서 언급했던 것처럼 문자열을 분석하여 날짜 형식으로 처리하는 과정에서 발생할 수 있는 오류들을 정의해봅시다. 

enum DateParseError: Error
{
  case overSizeString
  case underSizeString
  case incorrectFormat(part: String)
  case incorrectData(part: String)
}
발생 가능한 오류 타입들을 멤버로 가지는 DateparseError 열거형을 정의했습니다. 오류 타입으로 만들기 위해 Error 프로토콜을 구현했죠. 이 열거형은 모두 네 개의 멤버를 가지는데 각각 다음과 같은 오류를 의미합니다. 

※ overSizeString : 입력된 데이터의 길이가 필요한 크기보다 큽니다. 
※ underSizeString : 입력된 데이터의 길이가 필요한 크기보다 부족합니다. 
※ incorrectFormat : 입력된 데이터의 형식이 맞지 않습니다.
※ incorrectData : 입력된 데이터의 값이 올바르지 않습니다. 

물론 이 오류 타입은 필자가 학습을 위해 임의로 작성한 오류 타입입니다. 실제로 독자 여러분들이 사용할 오류 타입은 필요에 따라 상세한 타입으로 나누어 사용하는 것이 좋습니다. 



11.1.2 오류 던지기 : 우리가작성한 오류 타입 객체는 함수나 메소드를 실행하는 과정에서 필요에 따라 외부로 던져실행 흐름을 옮겨버릴수 있습니다. 이때 함수나 메소드는 오류 객체를 외부로 던질수 있다는 것을 컴파일러에 알려주기 위해 정의 구문을 작성할 때 throws 키워드를 추가합니다. 

throws 키워드는 반환 타입을 표시하는 화살표(->)보다 앞에 작성해야 하는데 이는 오류를 던지면 값이 반환되지 않는다는 의미이기도 합니다. 함수나 메소드 또는 익명 함수인 클로저까지 모두 throws 키워드를 사용할수 있지만 명시적으로 throws 키워드를 추가하지 않으면 오류를 던질 수 없습니다. 

func canThrowErrors() throws -> String
func cannotThrowErrors() -> String

위 두 함수는 모두 문자열을 반환하지만 canThrowErrors()함수는 실행 과정에서 오류가 발생하면 그 오류를 객체로 만들어 던질수 있는 반면 cannotThrowErrors()메소드는 오류가 발생하더라도 오류 객체를 던질수 없습니다. 클로저를 이용하여 구문을 작성할 때도 이와 비슷하게 반환 화살표 앞에 작성합니다. 
{() throws -> String in
...
}

이렇게 throws 키워드가 추가된 함수나 메소드 또는 클로저는 실행 블록 어느 지점에서건 우리가 의도하는 오류를 던질수 있습니다. 오류를 실제로 던질 때는 throw 키워드를 사용하는데 이는 함수나 메소드 등에서 오류를 던진다는 것을 선언할때 사용했던 throws 키워드와 비슷하지만 단수라는 사실에 주의해야 합니다. 

실제로 날짜를 분석하는 함수를 작성하고 실행 과정에서 발생할 수 있는 오류 상황에서 오류 객체를 던져보겠습니다. 앞서 작성한 DateParseError 오류 객체를 사용합니다. 

import Foundation

struct Date
{
  var year: Int
  var month: Int
  var date: Int
}

func parseDate(param: NSString) throws -> Date
{
  // 입력된 문자열의 길이가 10이 아닐 경우 분석이 불가능하므로 오류
  guard param.length == 10 else
  {
    if param.length > 10
    {
       throw DateParseError.overSizeString)
    }else
    {
       throw DateParseError.underSizeString
    }
  }
  // 반환할 객체 타입 선언
  var dateResult = Date(year: 0, month: 0, date: 0)
  // 연도 정보 분석
  if let year = Int(param.substring(with: NSRange(location: 0, length: 4)))
  {
     dateResult.year = year
  }else
  {
    // 연도 분석 오류
    throw DateParseError.incorrectFormat(part: "year")
  }
  //월 정보 분석
  if let month = Int(param.substring(with: NSRange(location: 5, length: 2)))
  {
    //월에 대한 값은 1~12 까지만 가능하므로 그 이외의 범위는 잘못된 값으로 처리한다. 
    guard month > 0 && month < 13 else
    {
      throw DateParseError.incorrectData(part: "month")
    }
    dateResult.month = month
  }else
  {
    // 월 분석 오류
    throw DateParseError.incorrectFormat(part: "month")
  }
  // 일 정보 분석
  if let date = Int(param.substring(with: NSRange(location: 8, length: 2)))
  {
     // 일에 대한 값은 1 ~ 31까지만 가능하므로 그 이외의 범위는 잘못된 값으로 처리한다. 
     guard date > 0 && date < 32 else
     {
       throw DateParseError.incorrectDate(part: "date")
     }
     dateResult.date = date
  }else
  {
    //일 분석 오류
    throw DateParseError.incorrectFormat(part: "date")
  }
  return dateResult
}

위 예제에서 가장 먼저 살펴볼 부분은 파운데이션 라이브러리를 호출하는 import Foundation구문입니다. 우리는 문자열 분석의 편의를 위해 스위프트에서 기본으로 제공하는 String 타입이 아닌 NSString 타입의 문자열을 사용할 예정입니다. 이 타입은 파운데이션 프레임워크에서 제공하는 것으로서 String 타입보다 사용할수 있는 메소드가 다양합니다. 물론 String 타입과 NSString 타입은 서로 호환됩니다. 

여기에 더해서 인자값으로 사용하는 문자열 일부분을 잘라내기 위해 NSRange 객체도 사용해야 하는데 이 역시 파운데이션 프레임워크에 정의되어 있는 객체입니다. 앱을 만들거나 코드를 작성하면서 객체의 이름 앞에 NS 접두어가 붙은 객체를 봤을 땐 아 파운데이션 프레임워크를 호출해야 겠구나 하고 생각하면 됩니다. 

이어서 정의된 것은 날짜정보를 담아서 반환할 Date 구조체입니다. 날짜 정보는 각각 연도와 월 일로 이루어지므로 이들을 모두 모아서 반환할수 있도록 구조체를 선언하였습니다. 이어지는 함수에서는 날짜 분석을 끝낸 결과값을 Date 구조체에 담아 반환합니다. 이 구조체는 각각의 결과값들을 담을수 있도록 year, month, date 세 개의 프로퍼티를 가지고 있습니다. 

세 번째로 parseDate(param:)함수가 정의되어 있는데 이 함수가 실제로 입력된 문자열을 분석하여 Date 객체에 적절한 값을 담은 뒤 반환하는 함수입니다. 필요한 대부분 구문이 이 함수에서 작성되며 분석 과정에서 문제가 있을 경우 오류를 던지기 위해 함수를 정의할 때 throws 키워드를 추가로 작성해둔 것을 볼 수 있습니다. 

parseDate(param:)함수가 호출되면 가장 먼저 수행하는 내용은 입력된 문자열의 길이 점검 입니다. guard 구문을 이용하여 점검하는데 guard 구문에서는 일단 인자값 문자열의 길이가 정확히 10일때만 구문을 게속 진행할수 있도록 하고 그렇지 않으면 오류를 던집니다. 우리가 정의한 오류 DateParseError에서는 입력값이 필요한 크기보다 클 때와 작을 때를 나누어 오류를 던질수 있도록 세분하고 있으므로 여기에서도 입력된 문자열의 길이를 점검하여 다음과 같이 오류를 반환할수 있도록 if 구문을 사용하고 있습니다. 

※ 문자열 길이가 10을 초과하면 DateParseError.overSizeString 오류
※ 문자열 길이가 10미만이면 DateParseError.underSizeString 오류

입력된 문자열의 길이가 정확히 10이라면 guard 구문을 통과하여 다음 단계로 진행됩니다. 함수의 실행 결과로 반환될 Date 객체의 인스턴스를 생성한 다음 본격적으로 문자열을 분석하는 과정으로 넘어가게 되죠. 

가장 먼저 분석하는 것은 연도 정보입니다. 문자열을 앞에서부터 4개까지만 읽어온 후 이를 정수로 반환하여 연도 정보로 만들어야 합니다. 문자열을 원하는 위치에서 잘라내려면 substring(with:)메소드를 사용하는데 이 메소드는 범위 정보를 처리하는 NSRange 객체를 인자값으로 받습니다. NSRange 객체의 여러 초기화 구문 형식 중에서 우리가 사용해야 할 것은 NSRange(location:length:)입니다. 이는 시작 위치로부터 원하는 길이만큼의 범위 객체를 만들어주는 구문이죠. 

이를 이용하여 0번째 위치부터 4만큼의 길이 범위를 가지는 NSRange 객체를 만든 다음 이를 substring(with:)메소드의 인자값으로 넣어주면 입력된 문자열로부터 우리가 원하는 연도 네자리 문자열을 추출할 수 있습니다. 이 값을 정수로 변환하여 Date 객체의 year 프로퍼티에 할당해주면 연도에 대한 분석 작업이 완료됩니다. 

이 과정에서 만약 0~4까지의 문자열이 숫자가 아니거나 숫자로 변환할수 없는 형식이라면 정수가 반환되는 대신 옵셔널 타입인 nil이 반환됩니다. 이를 점검하여 DateParseError.incorrectFormat 오류를 반환해주면 함수를 호출한 외부에서는 무슨 오류가 발생했는지 쉽게알수 있을 겁니다. 특히 잘못된 포맷에 의한 오류를 좀 더 자세히 설명하고자 연관 데이터를 추가할수 있도록 오류 타입이 정의되어 있으므로 이를 활용하면 더욱자세한 오류 정보를 던질수 있습니다. 

이어서 월과 날짜에 대한 분석이 차례로 진행됩니다. 분석 과정 자체는 연도를 분석한 방식과 같지만 월은 입력받을수 있는 값이 1부터 12까지로 제한되므로 적절한 값인지를 검사하는 과정이 guard 구문으로 추가되었습니다. 월에 할당된 값이 0보다 크면서 13보다 작은 즉 1에서 12까지일 때문 프로세스를 계속 진행하고 그렇지 않으면 DateParseError.incorrectData 오류를 던집니다. 

날짜도 이와 비슷합니다. 입력받을 수 있는 값이 1부터 31까지로 제한되므로 이에 대한 검사 과정이 guard 구문으로 추가되었죠. 사실 날짜를 점검할 때는 2월의 경우 날짜가 28일을 넘어가는 값으로 입력되면 마찬가지로 오류를 던지도록 처리해야 맞겠지만 여기에서는 그에 해당하는 점검은 생략하였습니다. 

모든 과정이 문제없이 진행되면 연-월-일 정보가 저장된 Date 객체가 완성됩니다. 이 값을 반환하면 함수의 역할은 끝나죠. 이렇게 정의된 함수나 메소드를 호출할 때는 다음과같이 호출할 이름앞에 try 키워드를 붙여야 합니다. 

try parseDate(param: "2020-02-28")

이 값을 다른 변수나 상수에 할당할 때도 try 키워드는 항상 함수의 이름 바로 앞에 있어야 합니다. 

let date = try parseDate(param: "2020-02-28")

만약 try 키워드 없이 함수를 호출하면 컴파일러에 의한 오류가 발생합니다. 물론 오류를 던지지 않는 일반 함수는 try 키워드가 필요 없습니다. 하지만 try 키워드는 단순히 함수를 호출할수만 있을 뿐 함수에서 던지는 오류를 잡아내지는 못합니다. 함수에서 던지는 오류를 잡아내려면 catch 구문을 사용해야 합니다. 




11.1.3 오류 객체 잡아내기 : 앞에서 우리는 함수를 이용하여 오류 타입을 던지는 과정과 이렇게 구현된 함수를 호출하는 방법까지 알아보았습니다. 이제 남은 것은 실제로 이 함수를 호출하여 사용하면서 오류가 던져질 경우 이를 잡아내어 적절히 처리해주는 것입니다. 함수에서 던진 오류를 잡아낼 때는 다음 형식의 구문을 사용합니다. 

do
{
  try <오류를 던질 수 있는 함수>
}catch<오류타입 1> 
{
  //오류 타입1에 대한 대응
}catch<오류 타입2>
{
  //오류 타입2에 대한 대응
}catch <오류 타입3>
{
  //오류 타입3에 대한 대응
}catch ...

do구문은 오류가 발생하지 않는 상황에서 실행할 구문이 작성되는 영역입니다. 물론 do 구문내에서 함수의 호출도 이루어져야 하죠. 정상적으로 처리되는 상황을 가정하고 do 구문 내부에 코드를 작성하면 됩니다. 컴파일러는 do 구문 내부에 작성된 순서대로 코드를 실행하다가 try 함수 호출에서 오류가 던져지면 이를catch 구문으로 전달합니다. catch 구문은 switch 구문에서의 case처럼 오류 타입 각각을 지정하여 작성할수 있는데 이때 각 오류 타입에 대응하는 코드를 작성해야 합니다. 

func getPartsDate(date: NSString, type: String)
{
  do
  {
     let date = try parseDate(param: date)
     switch type
     {
         case "year" :
                print("\(date.year)년입니다.")
         case "month" :
                print("\(date.month)월 입니다.")
         case "date" :
                print("\(date.date)일입니다.")
         default :
                print("입력값에 해당하는 날짜정보가 없습니다.")
       }
  }catch DateParseError.overSizeString
  {
     print("입력된 문자열이 너무 깁니다. 줄여주세요")
  }catch DateParseError.underSizeString
  {
     print("입력된 문자열이 불충분합니다. 늘려주세요")
  }catch DateParseError.incorrectFormat(let part)
  {
     print("입력값의 \(part)에 해당하는 형식이 잘못되었습니다.")
  }catch DateParseError.incorrectData(let part)
  {
     print("입력값의 \(part)에 해당하는 값이 잘못사용되었습니다. 확인해주세요.")
  }catch
  {
     print("알 수 없는 오류가 발생하였습니다.")
  }
}

이제 작성된 함수에 다양한 인자값을 넣어 호출하고 그 결과를 확인하겠습니다. 

getPartsDate(date: "2015-12-31", type: "year")
[실행 결과]
2015년입니다.

getPartsDate(date: "2015-12-31", type: "month")
[실행 결과]
12월입니다.

getPartsDate(date: "2015-13-31", type: "month")
[실행결과]
입력값의 month에 해당하는 값이 잘못사용 되었습니다. 확인해주세요. 

getPartsDate(date: "2015-12-40", type: "date")
[실행 결과]
입력값의 date에 해당하는 값이 잘못사용되었습니다. 확인해주세요. 

날짜를 입력받아 parseDate(param:)함수를 호출하고 요청된 부분의 날짜 정보를 출력해주는 getPartsDate(date:type:)함수를 작성하였습니다. 함수의 내부에서는 do~catch 구문이 작성되어 있는데 parseDate(param:)메소드가 던지는 오류를 잡아낼수 있도록 catch 구문에서 각 오류 타입을 명시하고 있습니다. 이렇게 오류 타입으로 나누어진 catch 구문은 그에 맞는 오류가 던져졌을 때 잡아내게 되고 그에 맞는 출력 구문을 통해 오류 정보를 보여줍니다. 

가장 마지막에 오류 타입이 작성되지 않은 catch 구문은 앞의 catch 구문에서 잡히지 않은 모든 오류를 잡아주는 와일드카드 역할을 합니다. 위 예제 구문은 단순히 오류 정보를 보여주는 데 그치지만 여러분이 향후 앱을 제작하는 과정에서는 사용자의 재입력을 유도하던가 잘못된 값을 수정하는 다양한 처리 구문이 들어가야 합니다. 

오류를 던지도록 설게된 함수나 메소드이지만 필요에 의해 오류를 던지지않게 하고 싶을 때는 다음과 같이 try 키워드대신 try! 키워드를 사용합니다. 

let date = try! parseDate(param: "2015-09-31")
print("\(date)")
[실행 결과]
Date(year: 2015, month: 9, date: 31)

이 키워드는 강제로 해당 구문을 실행하는 것으로서 일반적으로 try 키워드를 사용하여 함수를 호출할 경우 오류에 해당하는 경우가 생기면 실행이 멈추고 오류를 던지지만 try! 키워드를 사용하면 오류를 던지지않고 그대로 함수를 강제 실행합니다. 따라서 이 경우 강제로 함수가 실행되지만 오류가 발생할 경우 그대로 런타임 오류로 이어집니다. 

지금까지 새로 도입된 오류 처리 구문에 대해 알아 보았습니다. 오류 처리 구문을 이용하면 손쉽게 오류를 잡아낼 수 있고, 이를 통해 다양한 오류 상황에 유연하게 대응할수 있는 코드를 작성할수 있습니다. 

참고
잘 작성한 코드란 : 필자가 프로그래밍을 막 시작했을 무렵 필자가 소속된 개발팀의 팀장님이 다음과 같은 말씀을 하신적이 있습니다. 

잘 작성한 코드란 오류 처리를 잘해준 코드를 말한다. 

오류 처리를 잘해준 코드가 반드시 잘 작성된 코드라고 할 수는 없지만 잘 작성된 코드가 오류 처리를 제대로 하지 않은 경우는 거의 없습니다. 안정성 높은 앱을 제작하려면 오류 처리 구문을 적절히 사용하여 예측할수 있는 오류를 미리 잡아내고 그에 대한 대응 코드를 작성해두는 과정이 필요합니다. 



이장을 마치며
오류 처리는 에러를 방지하고 미리 그에 대한 대비를 할 수 있다는 점에서 보다 안전한 언어로 나아가기 위한 특성이라고 볼 수 있습니다. 물론 오류처리 자체가 스위프트만의 독창적인 것은 아니지만 C 타입으로 오류를 처리하는 오브젝티브-C와 달리 스위프트는 흐름 외부로 오류를 던지기 때문에 이 문법을 사용한다는 것은 오브젝티브-C와는 완전히 다른 독립적인 프레임워크를 가지기 시작한다는 것으로 이해해도 좋습니다. 

스위프트가 구현하는 오류 처리는 아직 조금 더 발전해야 할 부분이 있습니다. 자바나 C#에서 지원되는것처럼 오류가 발생하더라도 반드시 실행할수 있는 블록인 finally가 제대로 지원되지 않기 때문입니다. 물론 함수나 메소드는 이와 같은 기능을 제공하는 defer() 구문을 지원하기는 하지만 위치상의 문제로 인해 오류 처리 구문 내에서 정의된 변수나 상수를 참조할 수 없는 등의 제약이 있습니다. 이는 앞으로 스위프트가 개선해 나가야할 부분입니다. 

오류 처리를 마지막으로 스위프트의 모든 문법에 대해 학습하였습니다. 방대하고 지루한 과정을 거쳐 여기까지 학습하느라 수고했을 여러분에게 격려의 박수를 보냅니다. 시작부터 무엇이가 흥미진진한 앱을 만들어보기를 기대하고 책을 폈겠지만 계속 이어지는 문법으로 인해 흥미를 잃은 분도 분명 계실 텐데요 그럼에도 지금 이글을 읽고 있다는 것은 여러분이 포기하지 않고 여기까지 왔다는 것을 의미할 테니 힘든 과정을 거쳐 온 여러분에게 고생했다고 말해주고 싶습니다. 수고 많으셨습니다. 

책을 작업하면서 항상 고민하는 것은 분량의 문제입니다. 분량이 적어서가 아니라 담을 것이 너무 많아서이죠. 이번에도 어김없이 개정 작업 과정에서 분량이 늘어나 한 권의 책으로 담을수 있는 한계를 넘어서게 되는 바람에 기존의 책을 문법편과 기본편 두 권으로 나누어 출간하는 결정을 내리게 되었습니다(물론 이 글을 쓰고 있는 지금 기본편은 개정 작업을계속 진행하고 있습니다.)이것이 이 책이 문법편만으로 구성된 이유 중 하나이기도 합니다. 

덕분에 들고 다닐수 있게 된 것은 좋은 일이겠지만 그와함께 기존의 두꺼웠던 옛 모습을 잃어버린 것은 무척 아쉽기도 합니다. 그래도 괜찮습니다. 개정을 거듭할수록 분량은 계속 늘어갈 테니까요.

우리는 스위프트의 기본 개념부터 시작하여 클래스와 구조체, 옵셔널, 익스텐션과 프로토콜 등 스위프트 언어의 특성과 문법에 대해 학습해 보았습니다. 실제로 뭔가를 만드는 과정이 아니어서 길고 지루하고 힘든 시간이었을 수도 있지만 저는그 과정을 통해 여러분이 스위프트라는 언어에 대해 전반적으로 이해할수 있게 되었기를 기대합니다. 

이책에서 이어지는 다음 책인 [스위프트 : 기본편] 에서는 본격적인 iOS 앱을 만들어보게 됩니다. 재미있어 보이는 과정이 어쩌면 단순한 문법보다 더 복잡할수도 있고 개념상 어려울 수도 있겠지만 그래도 문법같이 재미없고 따분한 부분을 잘 이겨낸 여러분이라면 훌륭히 학습을 해나갈수 있을 거라고 믿습니다. 

이 책과 관련하여 업데이트되거나 갱신된 스위프트 정보들은 블로그(http://blog.naver.com/sqlpro)를 통해 확인하실 수 있습니다. 책을 학습하면서 생긴 궁금증이나 내용에 대한 질문도 환영합니다. 단 질문과 답변의 고유를 위해 가급적 공개 댓글로 달아주시면 좋겠습니다. 