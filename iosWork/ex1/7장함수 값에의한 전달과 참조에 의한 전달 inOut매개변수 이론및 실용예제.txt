7.2.5 InOut 매개변수 : 크리스토퍼 놀런 감독의 영화 [인터스텔라]를 보면 블랙홀 속에 빠진 주인공이 4차원 공간에서 자신의딸 머피의 방을 들여다보는 체험을 하는 장면이 나옵니다. 이때의 주인공은 그 방에 자신과 똑같은 하지만 과거의 자신이 존재하는 것을 목격하지만 아무리 애를 써도 과거 자신의 행동을 말릴수도 아무런 메시지를 전달할 수도 없다는 것을 깨닫고 방법을 찾기 시작하죠 

스위프트에서의 함수는 영화의 주인공이 맞닥트리는 4차원 공간과 비슷합니다. 함수 내부에서 발생하는 사건은 함수 외부에 영향을 미칠수 없습니다. 함수 내부에도 외부에도 동일한 인자값이 존재하고 있지만 함수 내부에서 변경된 인자값은 4차원 공간 바깥에 있는 주인공의 과거 존재처럼 함수 외부의 인자값에는 아무런 영향도 끼칠수 없습니다. 단순히 같은 값을 가지고 있을 뿐 둘은 단절된 서로 다른 객체이기 때문입니다. 

var cnt = 30
func autoIncrement(value: Int) -> Int
{
  var value = value
  value += 1
  return value
}
print(autoincrement(value:cnt)) //함수 내부의 value변수값 : 31
print(cnt) // 외부에서 정의된 cnt 변수값 : 30
위 예제에서 함수 autoIncrement(value:)는 입력된 인자값을 1만큼 증가시킨 다음 반환합니다. 이때 인자값 자체를 수정할 수 있도록 매개변수 value는 내부적으로 변수로 치환됩니다. 30이 할당된 cnt 변수를 인자값으로 입력하여함수를 실행하면 내부에서 변경된 value 변수의 값은 31이 됩니다. 하지만 인자값으로 사용된 cnt변수 자체의 값은 아무런 변화가 없어서 여전히 30입니다. 이는 외부에서 입력한 인자값이 직접 함수 내부로 전달되는 것이 아니라 그 값이 복사된 다음 전달되기 때문입니다. 다시 말해 인자값으로 전달된 cnt와 매개변수 value는 서로 다른 변수입니다. 

하지만 중력(Gravity)을 통해 4차원 공간 안쪽에서 바깥쪽으로 영향을 줄수 있었던 주인공처럼 함수에서도 내부에서 수정된 인자값이 외부까지 영향을 미칠수 있는 방법이 존재합니다. 물론 반환값을 이용하지 않고 말입니다. 이를 위해 사용되는 키워드가 inout입니다. 이 키워드를 이용하면 스위프트에서는 함수 내부에서 수정된 인자값을 함수 외부까지 전달할수 있습니다. 아이구 이런 중력 같은 녀석
func foo(paramCount: inout Int) -> Int
{
  paramCount += 1
  return paramCount
}
이번 예제는 함수의 정의 형식에서 매개변수 부분만 살짝 바꾸어 본것입니다. 타입 표현이 들어가던 자리에 대신 inout 키워드를 넣고 타입 표현은 그 뒤쪽으로 밀어내었죠 inout키워드가 붙은 매개변수는 인자값이 전달될 때 새로운 내부 상수를 만들어 복사하는 대신 인자값 자체를 함수 내부로 전달합니다. 함수 내부에서 사용하는 매개변수명이 외부의 변수명과 다를지라도 마찬가지입니다. inout 키워드가 붙은 매개변수는 인자값으로 사용된 변수와 동일한 객체입니다. 단순히 값만 똑같은 복사 짝퉁 변수와는 다르죠

사실 inout키워드의 정확한 의미는 값 자체를 전달하는 것이 아니라 값이 저장된 메모리 주소를 전달한다는 의미입니다. 인자값에 할당된 데이터가 저장되어 있는 메모리 주소를 함수에 전달하는 것이죠. C를 해본 분들이라면 어? 포인터인데 라고 생각하실지도 모르겠네요 맞습니다. C에서의 포인터와 유사합니다. 이 때문에 inout 키워드가 사용된 함수는 호출 시 주의가 필요합니다. 인자값을 전달할 때 값이 아닌 주소를 전달해야 하거든요 따라서 inout매개변수에 들어갈 인자값에는 주소 추출 연산자&를 붙여주어야 정상적으로 전달할 수 있습니다. 이 연산자는 변수나 상수 앞에 붙어서 값이 저장된 메모리 주소를 읽어오는 역할을 합니다. 

var count = 30
print(foo(paramCount:&count) //함수 내부의 paramCount 변수값 : 31
print(count) //외부에서 정의된 count 변수값 : 31
함수를 호출 하는 구문입니다. 변수 count가 인자값으로 사용된 부분에 주소 추출 연산자인 &연산자가 붙어있죠 함수를 호출할 때 인자값으로 사용된 변수 앞에 &를 붙이면 값이 아닌 주소가 전달되며 이 주소를 읽어 들이기 위해 함수에서는 매개변수에 inout키워드가 추가된다고 보면됩니다. 함수는 전달받은 메모리 주소를 통해 외부의 변수에 직접 접근할 수 있고 값을 변경하면 그 결과가 외부 변수에도 바로 반영됩니다. 이처럼 주소를 전달하는 것을 프로그래밍 용어로 참조(Reference)에 의한 전달이라고 하며 기존처럼 값을 복사하여 전달하는 것을 값에 의한 전달 이라고 합니다. 이 두 가지 개념에 대해 조금더 자세히 알아봅시다. 


값에 의한 전달과 참조에 의한 전달 : 값에 의한 전달은 인자값을 전달하면 내부적으로 값의 복사가 이루어져서 복사된 값을 이용하여 구문을 실행하는 것을 이야기합니다. 지금까지 우리가 대부분 사용해왔던 방식이죠 이 방식은 내부적으로 복사를 통해 생성된 새로운 변수나 상수를 이용하여 함수의 기능을 실행하므로 인자값의 수정이 발생하더라도 원본 데이터에는 영향을 미치지 않습니다. 

우리가 많이 사용하는 String, Int, Double, Float, Bool 등 기본 자료형들 대부분이 이처럼 값에 의한 전달 방식으로 인자값을 전달합니다. 원본 값은 그대로 둔 채 복사된 새로운 값이 전달되는 것이죠. 따라서 우리는 인자값을 내부에서 수정하더라도 외부 값의 변경을 고려할 필요가 없습니다. 값이 전달되는 순간 내부 인자값과 외부 인자값은 서로 상관없는 남남이 되기 때문입니다. 

반면 참조에 의한 전달은 내부적으로 복사가 이루어지는 대신 값이 저장된 주소가 전달됩니다. 인자값을 저장하고 있는 객체 자체가 전달된다고 할 수 있죠. 이 방식은 외부의 인자값을 직접 참조하므로 함수 내부에서 인자값이 수정되면 그 결과가 외부 인자값 원본에도 고스란히 반영됩니다. 

이처럼 주소를 직접 전달하는 참조에 의한 전달은 함수에서 inout키워드를 사용했을 때 적용되지만 예외적으로 클래스(Class)로 구현된 인스턴스는 inout 키워드를 사용하지 않아도 항상 참조에 의해 전달됩니다. 따라서 함수의 인자값으로 전달한 클래스 인스턴스는 함수 내부에서 값이 수정되면 원본 객체에도 영향을 미치므로 주의해야 합니다. 

inout 키워드가 붙은 매개변수에 인자값을 입력할 때는 인자값 객체의 종류에 주의해야 합니다. 함수 내부에서 원본 객체에 직접 값을 수정할수 있어야 하므로 상수는 전달 대상이 될수 없습니다. 같은 이유에서 리터럴 역시 전달 대상이 될수 없습니다. 오직 변수만 인자값으로 사용할수 있습니다. 

//상수는 inout 매개변수에 인자값으로 전달할수 없음
let count1 = 30
foo(paramCount: &count1) // X

//리터럴은 inout 매개변수에 인자값으로 전달할수 없음
foo(paramCount:&30) //X
//변수는 inout 매개변수에 인자값으로 전달할수 있음
var value = 30
foo(paramValue: &value) //O : 31

매개변수와 관련된 것은 아니지만 참조에 의한 전달 방식이 적용되는 경우가 한 가지 더 있습니다. 변수의 범위 특성을 이용하는 것으로 일반적으로 상위 범위에서 정의된 변수는 하위 범위에서도 사용할수 있다는 특성을 가집니다. 이 점을 이용하여 함수 외부에서 정의된 변수를 함수 내부에서 가져다 사용하면 inout 키워드를 사용하지 않고도 외부의 변수를 내부에서 바로 참조할 수 있을 뿐만 아니라 함수 내부에서 값을 변경하면 함수 외부에도 그대로 반영됩니다. 자세한 내용은 이어지는 변수의 생존 범위와 생명 주기에서 확인해보시기 바랍니다. 



7.2.6 변수의 생존 범위와 생명주기 : 일반적으로 유기물이 존재하기 위해서는 일정한 환경이 갖추어져야 합니다. 기본적으로 산소가 있는 환경이어야 하고 20~25%정도의 농도가 갖추어져야 합니다. 너무 덥거나 너무 추운 지역에서도 유기물이 존재할 수 없습니다. 식물의 경우는 특정 기후를 벗어나서는 살수 없으며 동물역시 생존할수 있는 조건이 까다롭습니다. 일반적으로 동물이나 식물은 태어난 장소와 종에 따라 생존 가능한 환경이 모두 다른데 물에서 태어난 어류는 물에서만 살수 있는 반면 육지에서 태어난 포유류는 대부분 육지에서만 살수있습니다. (아 물론 고래 등 일부 녀석들은 제외합시다. 육지에서 태어난게 아니니까요 그녀석들은 포유류 주제에 왜 바다에서 살고 있는지 원)

프로그래밍에서 변수나 상수도 이와 마찬가지입니다. 정의된 위치에 따라 사용할 수 있고 생존 할수 있는 일정 영역을 부여받습니다. 말하자면 여기서 태어났으니 넌 이영역에서만 살아라하는 겁니다. 이를 변수의 생존 범위 또는 스코프(Scope)라고 합니다. 

영역을 기준으로 변수를 구분해 보면 크게 전역 변수와 지역 변수로 나눌수 있습니다. 전역 변수는 다른말로 글로벌(Global)변수라고도 하는데 프로그램의 최상위 레벨에서 작성된 변수를 의미합니다. 이 변수는 일반적으로 프로그램 내 모든 위치에서 참조할 수 있으며 특별한 경우를 제외하면 프로그램이 종료되기 전까지는 삭제되지 않습니다. 

반면 로컬(Local)변수라고도 하는 지역 변수는 특정 범위내에서만 참조하거나 사용할수 있는 변수를 의미합니다. 조건절이나 함수 구문 등 특정 실행 블록 내부에서 선언된 변수는 모두 지역변수이며 선언된 블록 범위 안에서만 이 변수를 참조할 수 있습니다. 지역 변수는 선언된 블록이 실행되면서 생겨났다가 실행 블록이 끝나면 제거됩니다. 이를 변수의 생명 주기(Life Cycle)라고 합니다. 

변수가 존재하려면 변수의 범위와 생명 주기 모두가 적합해야 합니다. 생존 범위를 벗어난 변수는 존재할수 없으며 생명 주기가 끝난 변수 역시 존재할 수 없습니다. 다음 예제는 do 실행 블록 내에서 선언된 변수가 생존할 수 있는 범위를 보여줍니다. 

do
{
  do
  {
      var ccnt = 3
      ccnt += 1
      print(ccnt) // 1: 결과값 4
   }
   ccnt += 1
   print(ccnt) //2 : 오류 - "Use of unresolved identifier 'ccnt'"
}
do블록은 일반적으로 do ~catch 구문 형식으로 사용되지만 단독으로 사용되었을 때에는 단순히 실행 블록을 구분하는 역할을 합니다. do블록은 중첩해서 사용할수 있는데 이때 내부에 중첩된 do 블록을 기준으로 실행 블록은 단계화됩니다. 내부에 더 많이 중첩되어 있을수록 더 하위 블록입니다. 

위 예제에서 작성된 1과 2는 각각 ccnt라는 변수의 값을 출력하도록 작성된 동일한 구문입니다. 1은 ccnt가 선언된 블록에 작성되어 있고 2는 그보다 상위 블록에서 작성되어 있다는 차이뿐입니다. 하지만 실행 결과는 전혀 다릅니다. 1구문은 문제없이 실행되지만 2 구문은 실행 대신 Unresolved identifier 오류가 발생합니다. 

이 오류는 선언되지 않은 변수를 호출했을 때 발생합니다. 그런데 이상합니다. 우리는 ccnt 변수를 선언했는데 컴파일러가 못 읽고 있는 거잖아요 왜 그럴까요?

해답은 스코프 즉 변수의 범위에 있습니다. 프로그래밍에서 변수는 자신이 존재할 수 있는 범위를 가집니다. 물고기가 물을 벗어나서는 살수가 없듯 자신의 범위를 벗어난 변수는 소멸되거나 아예 존재하지 않는 변수가 되기도 합니다. 이 같은 범위는 블록에 의해 만들어지는데 if 구문이 나 guard 구문 for~in구문 그리고 지금 배우고 있는 함수 등 중괄호 { }를 이용하여 실행 블록을 갖는 모든 구문들이 블록을 만들어내는 대상입니다. 우리가 지금 사용하는 do {}블록도 마찬가지입니다. 

조건절 실행 블록 내에서 특정 변수를 정의했다면 이 변수는 조건절 실행 블록 내에서만 사용할수 있습니다. 조건절을 벗어나면 메모리에서 해제될뿐만 아니라 아예 존재하지 않는 변수가 되어 컴파일러가 인식하지 못합니다. 

ccnt 변수 역시 마찬가지입니다. 우리가 do { } 블록을 이용하여 정의한 영역에서 선언된 이변수는 자신이 선언된 블록 내에서만 존재할수 있습니다. 

ccnt 변수가 생존할 수 있는 범위는 중첩된 do 블록이 닫히는 지점까지인 블록A입니다. 블록 A를 벗어나면 변수 ccnt는 더는 존재하지도 않고 접근할 수도 없습니다. 이것이 변수의 범위입니다. 만약 블록 A를 벗어나서도 이 변수를사용하려면 변수가 선언된 위치를 다음과 같이 상위 블록으로 옮겨야 합니다. 
do
{
  var ccnt = 0 //옮긴위치
  do
  {
     ccnt = 3
     print(ccnt) //1 결과값 3
  }
  ccnt += 1
  print(ccnt)  //2 결과값 4
}
이제 위 예제는 정상적으로 실행됩니다. ccnt는 더 럽은 범위의 블록에서 정의되었으며 이보다 상위 블록에서는 이 변수를 호출하지 않습니다. 하위 블록에서는 상위 블록의 변수를 얼마든지 가져다 사용할수 있기 때문에 아무 문제가 생기지 않습니다. 

이때 변수를 선언한 후 초기화 과정을 생략하면 안 됩니다. 하위 do 구문 내에서 어차피 값이 할당될 텐데 굳이 초기화를 해야 하나 하고 생각할 수도 있겠지만 변수가 생성된 블록이 아닌 다른 블록에서 사용하려면 반드시 초기화되어 있어야 합니다. 선언된 블록보다 하위 블록에서 변수를 사용하는 과정을 단순히 하나의 코드 내에서 변수를 사용하는 것으로 여길 수도 있겠으나 자세히 들여다보면 하나의 블록에서 다른 블록으로 참조에 의한 전달 과정이 일어나는 것입니다. 이를 위해 변수의 주소값이 필요하죠 만약 변수가 초기화되지 않았다면 메모리를 할당받지 못한 상태이므로 주소값도 존재하지 않습니다. 따라서 오류가 발생합니다. 

함수는 실행 블록을 가지고 있는 객체입니다. 때문에 앞서 설명한 변수의 범위가 그대로 적용됩니다. 함수 내에서 선언된 변수는 함수의 실행 블록 안에서만 존재하므로 이 변수에 직접 접근할수 있는 조건 또한 함수의 실행 블록 내로 제한됩니다. 함수의 실행 블록 내부에 하위 블록이 존재하면 이 하위 블록 역시 함수의 실행 블록 내에 있으므로 변수에 접근할수 있지만 함수를 벗어난 블록에서는 변수에 접근할수 없습니다. 

함수 선언시 정의된 매개변수는 함수의 실행 블록 내에서 사용할수 있는 지역 상수로 추가됩니다. 만약 var 키워드를 이용하여 변수로 정의하였다면 실행 블록 내에서 값을 수정할수 있는 지역 변수로 추가되겠죠 매개변수 역시 함수의 실행 블록 내에서 선언된 값이므로 함수의 실행 블록을 벗어나면 사용할 수 없습니다. 

전역 변수는 이와 반대입니다. 전역 변수는 최상위 블록에서 선언된 변수이므로 그보다 하위 블록인 함수 내부에서도 얼마든지 접근할수 있습니다. 다음예제는 전역 변수로 선언된 값을 함수 내부에서 접근하는 예입니다. 

var count = 30
func foo() -> Int
{
  count += 1
  return count
}
foo() //31

인자값을 받지 않는 foo()함수가 정의되었습니다. 이 함수는 내부에서 count 변수를 1만큼 증가하는 처리를 하고 있죠 count 변수는 상위 블록인 전역 범위에서 선언된 변수입니다. 상위 블록에서 정의된 변수가 하위 블록에서 사용될 때는 값이 참조 방식으로 전달되기 때문에 블록 내부에서 값을 변경하면 외부에도 그대로 적용됩니다. 따라서 함수 내에서는 전역 변수의 값에 접근할 수도 있고 수정할 수도 있습니다. 

이번에는 전역 변수와 지역 변수가 겹칠 때는 어떤 현상이 발생하는지 알아봅시다. 다음은 조금 전의 foo 함수 내부에 전역 변수와 이름 및 타입이 동일한 매개변수를 정의한 예제입니다. 

var count = 30
func foo(count: Int) -> Int
{
  var count = count
  count += 1
  return count
}
print(foo(count:count) //함수 내부의 count 변수값 : 31
print(count) //외부에서 정의된 count 변수값 : 30

함수 외부에서 count 변수는 전역 범위로 선언되어 있습니다. 그리고 함수 내부에서도 count가 매개변수로 그리고 지역 변수로 선언되어 있습니다. foo함수는 내부적으로 인자값을 1증가시킨 다음 반환하는 역할을 하죠. 이 함수의 출력 결과는 예상할수 있는 것처럼 31입니다. 30이라는 값이 입력되어 1만큼 증가한 다음 반환되었으므로 당연한 결과입니다. 그런데 전역 변수 count를 출력해보면 값이 일치하지 않습니다. 값이 바뀌지 않은 그대로이죠

이것으로 보아 스위프트에서 함수의 외부와 내부에 각각 같은 이름의 변수가 존재하면 내부에서 선언된 변수는 외부와 상관없이 새롭게 생성된다는 것을 알수 있습니다. 그렇지 않다면 외부 변수의 값도 함께 변경되었을 테니까요 실제로 함수의 외부 영역과 내부 영역에 같은 이름의 변수가 정의되어 존재한다면 두 변수는 동일한 변수가 아닙니다. 위의 예에서 내부 영역에 정의된 count 변수는 지역변수(Local Variable)로서 외부에서 정의된 count 변수와는 엄연히 다른 객체입니다. 또한 외부와 내부에서 같은 이름의 변수가 선언되면 변수 사용의 우선순위에 따라 외부변수가 아닌 내부 변수를 사용하게 됩니다. 이는 블록 내에서 적용되는 변수 우선순위의 규칙과 관련됩니다. 

함수처럼 블록 내부에서 변수나 상수가 사용될 경우 컴파일러는 이 변수가 정의된 위치를 다음의 순서에 따라 검색합니다. 

함수 내부에서 정의된 변수를 찾음 > 함수 외부에서 정의된 변수를 찾음 > 글로벌 범위에서 정의된 변수를 찾음 > inport된 라이브러리 범위

가장 먼저 함수 내부에서 이 변수가 정의되어 있는지 검색하여 정의되어 있다면 이 변수의 값을 읽어오고 없으면 상위 범위인 함수 외부로 이동합니다. 함수 외부 범위에서 이 변수가 정의되어 있는지 검색하고 있다면 이 변수를 사용하지만 여기에도 없다면 그보다 상위 블록으로 검색 범위를 확장합니다. 이번에도 변수가 발견되지 않으면 글로벌 범위까지 검색 범위를 넓혀보고 만약 여기에서도 검색되지 않는 변수라면 import된 라이브러리 범위까지 확장하여 변수를 검색합니다. 이처럼검색 범위를 넓혀 최상위 범위까지 검색했음에도 정의된 변수를 찾을수 없을 경우 컴파일러는 최종적으로 존재하지 않는 변수라는 오류를 발생시킵니다. 

이처럼 여러 블록이 중첩된 상태일 때는 변수의 범위를 고려하면서 필요한 변수를 선언해야 합니다. 가급적 변수의 범위는 작을수록 좋다는 것이 일반적인 프로그래밍 원리이지만 프로그래밍에 익숙해지기 전까지는 내부 블록 범위에서만 사용해야 하는 변수가 아니라면 상위 범위에 정의해놓은 다음에 코드를 시작하는 것도 좋은 방법입니다. 



7.3 일급 객체로서의 함수 : 스위프트는 객체지향 언어이자 동시에 함수형 언어입니다. 함수형 언어를 학습하게 되면 반드시 일급 객체(First-Class Object)라는 용어를 접하게 되는데요 이것은 크리스토퍼 스트래치(Christopher Stachey)라는 영국의 컴퓨터 과학자가 1960년대에 처음 사용한 개념으로서 프로그램 언어 안에서 특정 종류의 객체가 일급의 지위를 가지는가에 대한 의미입니다. 


7.3.1 일급 함수의 특성 : 객체가 다음의 조건을 만족하는 경우 이 객체를 일급 객체로 간주합니다. 

1. 객체가 런타임에도 생성이 가능해야 한다
2. 인자값으로 객체를 전달할수 있어야 한다. 
3. 반환값으로 객체를 사용할수 있어야 한다. 
4. 변수나 데이터 구조 안에 저장할수 있어야 한다. 
5. 할당에 사용된 이름과 관계없이 고유한 구별이 가능해야 한다. 

함수가 이런 조건을 만족하면 이를 일급함수(First-Class Function)라고 하고 그 언어를 함수형 언어로 분류합니다. 즉 함수형 언에서는 함수가 일급 객체로 대우받는다는 뜻입니다.

함수가 일급 객체로 대우받는다면 런타임에도 함수의 생성이 가능하고 매개변수나 반환값으로 함수를 전달할수 있으며 함수를 변수나 데이터 구조안에 저장할수 있을 뿐만 아니라 함수의 이름과 관계없이 고유한 구별이 가능합니다. 이것들이 일급 객체가 되기 위한 조건이기 때문입니다. 일급 함수가 쉽게 와 닿지 않는다면 자바에서 클래스의 특성을 떠올려보시기 바랍니다. 자바에서는 클래스가 일급의 지위를 가지니까요 

지금부터 일급 함수의 특성에 대해 단계적으로 하나씩 살펴봅시다. 



일급 함수의 특성 1 - 변수나 상수에 함수를 대입할 수 있음
일급 함수의 특성 중에서 처음으로 알아볼 특성은 변수나 상수에 함수를 대입할수 있다는 것입니다. 변수나 상수에 함수를 대입한다는 것은 말 그대로 함수 자체를 변수에 집어넣는다는 뜻입니다. 이렇게 함수가 대입된 변수나 상수는 함수처럼 실행할수도 있고 인자값을 입력받을 수도 있습니다. 반환값도 가질수 있죠 이것만으로는 이해가 가지 않는 분들이 많을테니 우선 다음예제를 봅시다. 

//정수를 입력받는 함수
func foo(base: Int) -> String
{
  return "결과값은 \(base+1)입니다."
}
let fn1 = foo(base: 5)
//결과값은 6입니다.

예제에서 정의된 foo 함수는 정수를 입력받아 문자열로 반환합니다(참고로 이 함수의 식별자는 foo(base:)입니다 아그냥 참고로요)마지막 행에서는 이 함수에 5라는 인자값을 넣어 실행하고 그 결과를 상수 fn1에 할당하고 있습니다. 이런 구문은 대부분 프로그래밍 언어에서 아주 자연스럽게 사용되고 있죠 변수나 상수에 함수를 대입할수 있다고 설명했을 때 이런 구문을 떠올리는 분들이 많습니다. 하지만 이 구문은 함수의 결과값을 fn1이라는 상수에 할당하는 단순한 대입 연산에 지나지 않습니다. 

일급 함수에서 말하는 변수나 상수에 함수를 대입한다라는 의미는 이것과 다릅니다. 함수의 결과값을 대입하는 것이 아니라 함수 자체를 대입하는 것이니까요 잠깐 언급했듯이 함수 자체를 변수에 할당하면 변수도 함수처럼 인자값을 받아 실행이 가능하고 값을 반환할 수도 있습니다. 함수를 대입한 변수가 함수처럼 실행된다는 것은 우리가 학습한 함수 호출 형식이 확장됨을 의미합니다. 

지금까지 우리는 함수를 호출할 때 함수의 이름 다음에 함수 호출 연산자를 붙여야 했습니다. 그러나 일급 함수의 특성에 따라 우리는 굳이 함수의 이름이 아니더라도 함수가 할당된 변수라면 그 변수에 함수 호출 연산자()를 붙여서 함수를 호출할수 있습니다. 다음 예를 봅시다. 

let fn2 = foo //fn2 상수에 foo 함수가 할당됨
fn2(5) //결과값은 6입니다

상수 fn2에 foo함수를 대입하고 있습니다. 함수 자체가 대입되었으므로 이제 fn2는 foo와 이름만 다를뿐 같은 인자값 같은 기능 같은 반환값을 가지는 함수가 됩니다. 따라서 fn2에 함수호출연산자인 ()와 인자값 5를 넣어 호출할수도 있고 그결과값을 받을수도 있습니다. fn2는 함수니까요

변수나 상수에 함수를 대입할 때에는 함수가 실행되는 것이 아니라 함수라는 객체 자체만 대입됩니다. 다음 예제를 봅시다. 

func foo(base: Int) -> String
{
  print("함수 foo가 실행됩니다.")
  return "결과값은 \(base + 1)입니다."
}
앞서 작성했던 함수 foo에서 내부에 출력 구문을 추가하였습니다. 이 함수가 실행되면 함수 foo가 실행됩니다 라는 구문이 출력되도록 말이죠 우선 이 함수의 결과값을 상수에 할당해보겠습니다
let fn3 = foo(base: 5)
[실행결과]
함수 foo가 실행됩니다.

함수의 결과값을 fn3에 대입하는 과정에서 함수가 실행되었습니다. 함수 내부에 작성해둔 출력 구문이 플레이그라운드의 콘솔에 찍히는 것을 보면 알 수 있죠. 이처럼 함수의 결과값을 대입할때는 함수가 실행됩니다. 하지만 함수 자체를 대입하는 구문은 다릅니다. 함수 자체를 대입하는 구문을 살펴봅시다. 

let fn4 = foo
//출력결과 없음
fn4(7)
[실행결과]
함수 foo가 실행됩니다

상수 fn4에 foo 함수를 대입하는 과정에서는 아무런 값도 출력되지 않습니다. foo 함수가 실행되지 않았다는 뜻이죠 함수를 할당받은 상수 fn4가 인자값 7을 넣어 함수를 실행하면 그때서야 메시지가 출력됩니다. 이번에는 foo 함수가 실행되었다는 것을 알수 있습니다.

이처럼 단순히 함수를 변수나 상수에 대입하는 과정에서는 함수가 실행되지 않습니다. 함수 객체 자체만 전달되기 때문입니다. 함수가 대입된 변수나 상수를 함수처럼 호출하면 그때 비로소 함수가 실행됩니다. 이것이 함수 결과값을 대입하는 것과 함수 자체를 대입하는 것의 차이점이라고 할수 있습니다. 

함수를 대입하기 위해 알아야 할 것이 하나 더 있습니다. 바로 타입(Types)입니다. 변수에 함수를 대입하면 그 변수는 일반적인 문자열, 정수, 배열 또는 딕셔너리와는 전혀 다른 타입이 됩니다. 이 타입을 함수 타입(Function Types)이라고하죠 함수 타입은 함수의 형태에 따라 셀수없을 만큼 많고 다양한 구조를 가집니다. 복잡하게 이해하면 어렵지만 간단하게 생각하면 됩니다. 변수에 정수를 대입하면 Int 타입이 문자열을 대입하면 String타입이 되는 것처럼 변수에 함수를 대입하면 함수 타입이 되는 겁니다. 

함수 타입은 일반적으로 함수의 형태를 축약한 형태로 사용되는데 이때 함수의 이름이나 실행 내용 등은 함수 타입에서는 아무런 의미가 없으므로 생략할수 있습니다. 함수 타입에서 필요한 것은 단지 어떤 값을 입력받는지와 어떤 값을 반환하는지 뿐입니다. 이를 함수 타입에서는 다음과 같은 형식으로 나타냅니다. 