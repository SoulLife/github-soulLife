기본자료형 : 스위프트에서는 타입을 정의하는 데 사용할수 있는 몇 가지 자료형을 미리 정의하여 제공합니다. 이와 같은 기본 자료형에 대해 알아봅시다. 

Int : Int는 정수를 뜻하는 Integer라는 영어 단어의 줄임말로, 부호 있는 정수값을 저장하는데 사용되는 자료형입니다. 다시 말해 부호 있는 정수값을 저장하려면 해당 변수나 상수를 이 타입으로 지정해야 한다는 것이죠. 여기에서 부호가 있다는 말은 숫자 앞에 +나 -를 붙일수 있다는 의미입니다. 즉 이자료형을 사용하여 [0,1,2,3,4,5..., -1,-2,-3,-4,-5...]등 마이너스 범위의 정수부터 플러스 범위의 정수값까지 모두 저장할수 있습니다. 일반적으로 사용하는 대부분의 정수값을 저장할수 있는 자료형으로 생각하면 될것 같네요

하지만 무한대에 가까운 모든 정수값을 저장할수 있는것은 아닙니다. Int타입이 저장할수 있는 정수값의 범위에는 제한이 있는데, 이 제한은 컴퓨터의 CPU사양에 따라 결정됩니다. 가령 8bit의 CPU를 가진 컴퓨터라면 2의8승인 256개의 값을 저장할수 있습니다. 이를 정수 범위로 환산하여 계산하면 Int타입이 저장할수 있는 값은 -128부터 127까지입니다.

네 256개까지 저장할수 있는 것은 사실이지만 Int는 앞서 말씀드린 바와 같이 부호 있는 정수, 즉 마이너스 범위의 정수까지 저장할수 있도록 설계되어 있습니다. 그래서 0을 기준으로 반으로 나누어 절반은 플러스 범위에 절반은 마이너스 범위에 할당하고 있죠. 256을 절반으로 나누면 128이 되죠? 그래서 0위로 127까지, 0아래로 -128까지 저장하게 된답니다.

이러한 궁금증은 0의 존재를 관과했기 때문입니다. 0은 양수도, 음수도 아니지만 편의상 양의 범위에 두도록 설계되어 있기 때문에 양의 정수 시작값은 0이 되는 셈입니다. 이에 따라 양의 정수 범위의 끝은 0으로부터 128번째인 127이 되고, 음의 정수 시작은 -부터이므로 그 범위의 끝도 -1부터 128번째인 -128이 됩니다. 

방금 우리는 8bit CPU에서 Int를 사용하는 경우를 이야기해 보았습니다만, 사실 8bit범위만 사용하는 Int의 경우 스위프트에서는 서브 자료형이 별도로 정의되어 있습니다. 바로 Int8이죠 Int를 8bit크기로 사용하겠다는 의미입니다. 유사한 자료형으로 Int16, Int32, Int64도 있습니다. 각각 16, 32, 64bit의 Int타입을 의미합니다. 타입에 따른 값의 범위를 한번 확인해볼까요?
Int8 : 127~-128, 8bit
Int16: 32,767~ -32768, 16bit
Int32: 2,147,483,647~-2,147,483,648, 32bit
Int64: 9,223,372,036,854,775,807~-9,223,372,036,854,775,808, 64bit

Int자료형에 붙은 숫자가 커질수록 표현할수 있는 수의 범위도 점점 늘어납니다. 그것도 일정 하게 커지는 것이 아니라 2의n승배 크기로 증가하죠, 따라서 큰 단위의 자료형을 사용할수록 큰 값을 저장할수 있지만 그만큼 메모리 소모 또한 늘어나기 때문에 실제로 코딩할 때에는 저장할 값의 범위에 맞는 적절한 타입을 선택해야 합니다. 

Int는 , Int8, Int16, Int32등으로 이어지는 Int계열 서브 자료형들에 대한 대표 자료형이라고 할수 있습니다. 일종의 카멜레온처럼 실행환경에 따라 크기가 가변적인 자료형인데요. Int8이나 Int16등은 실행환경에 상관없이 크기가 고정되어 있지만 Int는 해당 컴퓨터의 CPU비트 크기에 맞추어 자동으로 그 크기가 변화합니다. 따라서 Int타입으로 변수나 상수를 선언하면 CPU환경에 따라 변경해야할 코드를 대폭 줄일수 있습니다. 

이제 Int자료형에 현미경을 들이대 봅시다. Int는 사실 SignedInteger를 구현한 구조체의 일종입니다. Int자료형이 SignedInteger라는 객체를 뼈대로 하여 만들어졌다는 정도만 이해하는 것으로 하고 Int 구조체의 모습을 살펴보겠습니다. 

public static var max: Int { get }
public static var min: Int { get }
이 두가지속성은 각각 Int자료형이 가질수 있는 최대값(=max)과 최소값(=min)을 의미합니다. 앞서 Int타입에 저장할수 있는 값의 범위, 즉 최대값과 최소값에 대해 배웠는데 그값을 max와 min속성을 통해서 가져올수 있다는 뜻힙니다. 플레이그라운드를 이용해서 Int의 두가지 속성을 확인해봅시다. 먼저 대표 자료형인 Int입니다. 예상이 맞는다면 값의 범위가 아주 넓어야 할 겁니다. 
64bit의 실행 환경에서 Int는 Int64와같은 처리 결과를 가집니다. 32bit의 실행환경이라면 Int는 Int32와 같은 처리결과를 가질거고요, 내친김에 비트별 Int타입에 최대값과 최소값을 직접 확인해볼까여?

이처럼 Int자료형은 Int8, Int16, Int32, Int64까지의 서브 자료형을 가지고 있으며 실행 환경의 플랫폼에 따라 유연하게 처리되는 특성을 가지고 있습니다. 양수부터 음수까지의 정수를 저장하고자 할 때는 Int타입을 사용한다는 것을 잊지 마세요


UInt : : UInt는 Unsigned Integer를 줄인 단어로 부호가 없는 정수를 의미합니다. Int처럼 정수값을 저장하는 데 사용되는 자료형이지만 Int가 양수부터 음수까지를 모두 저장할수 있는 반면 UInt는 양수만 저장할수 있다는 차이가 있습니다. 다시 말해 UInt는 0을 포함하여 1,2,3,4,5... 등 우리가 일반적으로 자연수라고 부르는 범위의 정수를 저장할수 있다는 겁니다.  UInt는 마이너스 범위의 정수를 저장할수 없는 대신 플러스 범위의 정수에 대해서는 Int보다 두 배 큰 범위까지 저장할수 있습니다. 8bit의 CPU를 예로 들어보면 UInt는 Int와 동일하게 값을 256개 저장할수 있지만 마이너스 범위까지 값을 할당할 필요가 없으므로 플러스 범위에 128개를 더 사용할수 있어서 0~255까지 저장할수 있습니다. 그래서 양의 정수 범위만 다루는 데이터에는 UInt가 훨씬 효율적입니다. 나이나 물건의 개수, 참여인원의 수 반복 횟수 같은거 말이죠

UInt에도 Int처럼 8비트,16비트, 32비트, 64비트로 구분된 서브 자로형이 있습니다. 각각UInt8, UInt16, UInt32, UInt64라는 이름으로 정의되어 있죠

UInt8 : 0~255, 8bit
UInt16 : 0~65536, 16bit
UInt32 : 0~4,294,967,295, 32bit
UInt64 : 0~ 18,467,744,073,709,551,615, 64bit
UInt는 0부터 플러스 범위의 정수를 저장하기 때문에 저장할수 있는 최소값은 서브 자료형의 종류에 상관없이 모두 0입니다. 그리고 서브 자료형별 최대값은 앞서 우리가 학습했던 Int서브 자료형의 두배씩 입니다. 아 실수네요, Int에는 중간에 0이 있으니 정확히는 (Int 서브 자료형의 최대값 *2)+1 이어야 합니다. Int8의 최대값은 127이지만 UInt8의 최대값은 254가 아닌 255이니까요. 나머지 서브 자료형 UInt16, UInt32, UInt64등의 최대값 역시 마찬가지입니다. 



Double & Float : 프로그래밍을 하다보면 소수점이 포함된 실수 값을 저장해야 하는 경우도 무척 많습니다., 두 장소 사이의 거리나 기온, 환율, 또는 키, 몸무게 등 수많은 종류의 데이터가 정수가 아닌 실수값을 요구하죠. 이때 사용할수 있는 자료형이 Double 타입과 Float타입입니다. 둘 다 실수값을 저장할수 있는 자료형이라는 공통점이 있지만 Double타입은 64bit 부동소수점 자료형으로서 32bit부동 소수점 자료형인 Float타입보다 더 넓은 범위의 소수점 아래 값을 저장할수 있기 때문에 특별히 매우 정확해야 하는 부동소수점 값이나 또는 매우 넓은 범위의 실수값을 저장할때 사용됩니다. 그 이외의 부동소수점 값에는 Float가 사용되구요

일반적으로 Float타입이 소수점 아래7~8자리까지의 값을 정확하게 저장할수 있는 반면 Double타입은 소수점 아래15~16자리의 값에 대한 정확도를 보장하기 때문에 훨씬 더 세밀한 값을 저장하는 데에 유리합니다. 당연히 메모리에서 차지하는 크기도 Double 타입이 더 크고 말이죠
재미있는 것은 스위프트에서 Float타입의 서브 자료형으로 사용되는 Float32와 Float64입니다. 이 둘은 실제로 존재하는 객체가 아니라 타입알리어스(typealias)에 의해 정의된 타입들입니다. 여기에서 타입알리어스란 타입을 가리키는 표현만 달리하는 것을 의미합니다. 
typealias Float32 = Float
typealias Float64 = Double

두타입을 알리어스로 정의하고 있는 구문을 살펴보면 정의된 Float32는 Float이지만, Float64는 Double입니다. 32bit실수는 Float로 처리하고, 64bit 실수는 Double로 처리한다는 의미로 해석할 수 있습니다. 