일급함수의 특성 3 - 함수의 인자값으로 함수를 사용할수 있음 : 일급 함수는 반환값으로 함수를 사용할수 있을 뿐만 아니라 다른 함수의 인자값으로 함수를 전달할수 있는 특성도 있습니다. 일급 함수를 다루는 타 언어 중에서 특히 널리 알려진 언어로 자바스크립트가 있는데 이 언어를 이용하여 웹 프로그래밍에서 Ajax 구현을 해보면 반드시 다루게 되는 개념으로 콜백 함수(Callback Function)가 있습니다. 콜백 함수는 특정 구문의 실행이 끝나면 시스템이 호출하도록 처리된 함수로서 일반적으로 Ajax 통신을 위한 구문을 작성할 때 콜백함수를 등록합니다. 콜백 함수 등록이란 실행하고자 하는 구문을 담은 함수를 인자값으로 넣는 것을 의미하죠. 이때 사용되는 개념이 바로 일급 함수의 특성인 함수를 인자값으로 사용할수 있다입니다. 스위프트에서 함수를 인자값으로 넘기는 방법을 알아봅시다. 

함수를 인자값으로 전달할 때 그 함수는 하나의 타입이 됩니다. 따라서 함수를 입력받는 인자값은 함수 타입으로 정의되어야 합니다. 이 점을 제외하면 인자값으로 함수를 전달하는 방식에는 특별한 것이 없습니다. 다음은 함수를 인자값으로 전달하는 예제입니다. 

func incr(param: Int) -> Int
{
  return param + 1
}
func broker(base: Int, function fn: (Int) -> Int) -> Int
{
   return fn(base)
}
broker(base: 3, function: incr)//4

incr(param:)은 정수값을 입력받아 +1을 처리한 값을 반환하는 함수입니다. 뒤이어 정의된 broker(base:function:)은 인자로 받은 함수를 실행하는 함수죠. broker(base:function:)은 두 번째 매개변수에 대한 인자값에 어떤 함수가 들어오는지 상관하지 않습니다. 단지 정수를 입력받고 정수를 반환하는 타입의 함수이기만 하면 됩니다. 그렇게 매개변수 타입이 정의되어 있기 때문입니다. 정의된 타입에 맞는 함수가 입력되면 그게 어떤 함수이든 간에 그냥 실행하고 그 결과를 반환해 버립니다. 그러니 broker(base:function:)함수의 정의 구문만으로는 어떤 연산이 실행될지 짐작하기 어렵습니다. 실질적인 연산은 인자값으로 받는 함수에 달려 있기 때문입니다. 보통 이런식으로 중개 역할을 하는 함수를 브로커(Broker)라고 합니다. 

마지막 행에서 broker(base:function:)함수는 정수 3과 incr(param:)함수를 인자값으로 하여 호출됩니다. 내부적으로 실행될 함수가 incr(param:)인 것이 파악된 지금에서야 비로소 broker(base:function:)가 처리할 내용을 짐작할수 있게 되는 거죠 이처럼 함수를 인자로 사용하면 실행 전까지 어떤 구문이 수행될지 컴파일러가 미리 알수 없으므로 컴파일 시점에서 디버깅할수 없는 단점이 있습니다. 하지만 잘 활용하면 동적으로 정의되는 훌륭한 함수를 만들수 있기 때문에 개발자들이 흔히 매직 코드(Magic Code)라고 부르는 마법 같은 코드를 작성할때 자주 응용됩니다. 

이번에는 콜백 함수를 사용하는 예를 살펴봅시다. 

func successThrough()
{
  print("연산 처리가 성공했습니다.")
}
func failThrough()
{
  print("처리 과정에 오류가 발생하였습니다.")
}

func divide(base: Int, success sCallBack: () -> Void, fail fCallBack: () -> Void) -> Int
{
  guard base != 0 else
  {
     fCallBack() //실패 함수를 실행한다
     return 0
  }
  defer
  {
    sCallBack() //성공 함수를 실행한다 
  }
  return 100 /  base
}

divide(base: 30, success: successThrough, fail: failThrough)
[실행 결과]
연산 처리가 성공했습니다.

위의 예제는 함수 인자를 사용하여 콜백(Callback)을 처리하고 있습니다. 이 함수는 첫 번째 인자로 받은 정수를 사용하여 100을 나누고 그 몫을 정수 형태로 반환하는 역할을 합니다. 두번째 인자는 내부 연산 과정이 성공적으로 완료되었을 때 실행할 함수이며 세 번째 인자는 내부 연산 과정이 실패했을 때 실행할 함수입니다. divide(base:success:fail:)함수는 내부 연산이 성공하거나 실패했을 때 값을 반환하는 것 이외에는 아무것도 하지 않습니다. 단순히 인자값으로 입력받은 함수를 실행할 뿐입니다. 

이런 식의 구문을 작성하면 함수가 성공, 또는 실패했을 때의 처리 과정을 외부에서 제어할수 있습니다. 즉 함수의 내부 코드를 수정하지 않고도 외부에서 함수 내부의 실행 과정에 간섭할수 있다는 뜻입니다. 완전히 실행 흐름을 꺾지는 못하지만 그 실행 흐름에 합류하여 추가기능을 수행하는 것 정도는 충분히 가능합니다. 

첫번째 입력값이 0이면 divide(base:success:fail:)함수는 내부 연산을 실행할수 없습니다. Divide By Zero 오류가 발생하기 때문입니다. 이 때문에 guard 구문을 사용하여 입력값이 0이 되는 경우를 방지해 주어야 합니다. 

guard base != 0 else
{
   fCallBack()
   return 0
}
만약 입력된 base가 0이라면 조건 실패로 인해 else구문의 내용이 실행됩니다. fCallBack은 함수처럼 보이지만 실제로는 매개변수입니다. 여기에 함수가 대입되었을 뿐이죠. else 구문은 외부에서 전달된 실패 처리 함수를 fCallBack 매개변수를 통하여 실행한 다음 0을 반환하면서 함수를 종료합니다. 이 때문에 실제로 함수가 실행되기 전에는 실패 처리 내용을 알 수 없습니다. 오로지 fCallBack 매개변수에 대입된 함수를 실행한다라는 구문만 있을 뿐입니다. 

마찬가지로 입력된 base의 값이 0이 아닐경우 나누기 연산이 실행됩니다. 연산이 성공했을 때에는 sCallBack 매개변수에 대입된 함수가 실행되는데 이때 값을 반환하는 return 구문과 성공 함수를 실행하는 과정 사이에 발생할수 있는 미묘한 타이밍 차이를 해결하기 위해 defer 구문이 사용됩니다. 

defer
{
  sCallBack() //성공 함수를 실행한다
}

defer 블록은 함수나 메소드에서 코드의 흐름과 상관없이 가장 마지막에 실행되는 블록입니다.  지연 블록이라고 부르기도 하는 이 블록에 작성된 구문은 작성된 위치에 상관없이 항상 함수의 종료 직전에 실행되기 때문에 종료 시점에 맞추어 처리해야 할 구문이 있다면 우리는 어디에 작성해야 할지 고민하지 않고 defer 블록에 넣어두기만 하면 됩니다. 실제로 이 블록은 함수에서 사용된 각종 리소스의 처리나 해제 연결 종료 등의 구문을 처리하는 용도로 유용하게 사용됩니다. defer 블록은 다음과 같은 특성을 가지고 있습니다. 

1. defer 블록은 작성된 위치와 순서에 상관없이 함수가 종료되기 직전에 실행된다. 
2. defer 블록을 읽기 전에 함수의 실행이 종료될 경우 defer 블록은 실행되지 않는다. 
3. 하나의 함수나 메소드 내에서 defer 블록을 여러번 사용할수 있다. 이때에는 가장 마지막에 작성된 defer 블록부터 역순으로 실행된다. 
4. defer 블록을 중첩해서 사용할수 있다. 이때에는 바깥쪽 defer 블록부터 실행되며 가장 안쪽에 있는 defer 블록은 가장 마지막에 실행된다. 

defer는 주로 함수가 연산을 처리하는 과정에 영향을 끼치지 않으면서 실행해야 할 다른 내용이 있을때 사용하거나 함수를 종료하기 직전에 정리해야 하는 변수나 상수값들을 처리하는 용도로 사용됩니다. 다시 말해 함수를 종료하기 전에 처리해야 하는 변수나 상수들 중에서 처리 시점이 모두 달라서 적절한 처리 시점을 잡기 어려울때 defer 구문을 통해 처리하면 된다는 뜻입니다. 

계속해서 그 다음 구문을 살펴봅시다 
divide(base: 30, success: successThrough, fail: failThrough)

divide(base:success:fail:)함수를 호출하는 부분입니다. 첫 번째 인자값으로 30을 두번째 세 번째 인자값으로 각각 successThrough, failRough함수를 입력해주는데  함수 연산이 성공하면 successThrough 함수를 실패하면 failThrough함수를 실행해달라는 의미입니다. 그 결과로 successThrough 함수에서 작성된 출력 구문이 실행되었습니다. 

함수를 인자로 넘기는 가장 큰 목적은 함수 내부의 코드를 건드리지 않고도 외부에서 실행 흐름을 추가하기 위함입니다. 원래대로라면 실행 구문들이 들어가야 하겠지만 구문 자체를인자로 넣을수는 없으므로 구문을 집약한 함수가 인자값으로 사용되는 것입니다. 함수 외부에서 함수 내부에 실행 구문을 추가할수 있다는 것은 함수를 그만큼 재활용할수 있다는 장점이 되기도 합니다. 

위 함수가 성공/실패 함수를 인자값으로 받지 않는다고 가정하고 만약 이 함수의 연산을 두군데에서 호출해야 하는데 호출하는 지점마다 함수의 연산 성공/ 실패시 처리해야하는 내용이 다르다면 어떻게 해야할까요? 아마도 그때마다 함수를 새로 작성해야 할 겁니다. 성공/실패 처리 구문 차이 때문에 거의 같은 연산을 처리하는 함수가 중복으로 작성되어야 하죠 하지만 이처럼 호출하는 지점마다 다르게 적용되어야 하는 부분을 함수 인자값으로 받도록 처리하면 함수를 공통으로 사용할 수 있는 범위가 넓어집니다. 공통 코드를 사용하고 각자 다르게 적용되어야 할 부분만 함수 인자를 통하여 제어하면 되기 때문입니다. 결국 함수의 재사용성이 높아지는 셈입니다. 

그런데 인자값으로 사용하기 위해 매번 새로운 성공/실패 함수를 작성해야 하는 것도 번거로운 작업입니다. 특히 재사용하지 않는 코드를 굳이 함수로 작성해야 한다는 것은 매우 비능률적인 일에 틀림없습니다. 이런 문제를 해결하고자 많은 함수형 언어에서는 익명 함수를 지원합니다. 익명 함수는 쉽게 생각해서 일회용 함수라고 생각하면 됩니다. 함수의 형태를 가지지만 이름이 부여되지 않으며 일회용이기 때문에 여러 가지 간편한 작성 형식을 따른다는 특성이 있습니다. 

스위프트에서도 익명 함수를 지원합니다. 이를 클로저(Closure)라고 부르죠. 우리는 클로저를 이용하여 익명 함수 형태의 코드 블록을 작성합니다. 클로저에 대해서는 뒤에서 자세히 다루게 되므로 여기에서는 위 예제의 호출 부분을 익명 함수를 이용한 코드로 변경하는 내용만 살펴보고 넘어가도록 합시다. 

divide(base: 30, success: {
                     () -> Void in
                     print("연산 처리가 성공했습니다.")
                   },fail: {
                    () -> Void in
                     print("처리 과정에 오류가 발생하였습니다.")
                   }
}
복잡해 보이지만 생각보다 단순합니다. 기존에 함수 이름이 입력되었던 부분에 함수 본문이 작성된 것에 지나지 않습니다. 복잡해 보이는 이유는 클로저의 형태로 작성되었기 때문입니다. 자세한 것은 클로저를 학습한 다음에야 제대로 이해할 수 있으므로 단순히 익명 함수의 형태로 코드를 작성할 수 있다는 것만 이해하고 넘어가면 됩니다. 

지금까지 우리는 함수를 인자로 넘기는 방법에 대해 학습했습니다. 함수 내부의 코드를 외부에서 간섭할 수 있다는 점은 분명 큰 장점입니다. 하지만 이 장점은 함수 자체를 넘기지는 못해도 다른 방법으로 함수를 전달하는 방법들을 제공하는 다른 언어들을생각해본다면 장점이 되기엔 부족합니다. 함수 자체를 인자로 넘길 수 있다는 특성은 어떤 장점이 있을까여?

이는 자바(Java)의 예를 살펴보면 알 수 있습니다. 가장 대중적인 프로그래밍 언어를 논할 때 언제나 수위에 거론되는 자바는 일급 함수를 다루지 않으므로 함수나 메소드를 직접 전달하지 못합니다. 이 때문에 Invoke라는 번거로운 방식을 채택했죠. Invoke는 입력된 문자열을 기준으로 선언된 메소드들을 비교합니다. 그리고 비교 결과를 바탕으로 하여 찾고자 하는 메소드를 읽고 선언된 메소드들을 비교합니다. 그리고 비교 결과를 바탕으로 하여 찾고자 하는 메소드를 읽어내어 실행합니다. 이 과정은 모두 동적으로 실행되죠. 하지만 이 방식은 무척 번거롭습니다. 내부적으로 함수나 메소드의 객체가 직접 전달되는 것이 아니라 검색을 통해 해당하는 메소드를 찾아야 하기 때문입니다. 

만약 함수 자체를 넘길 수 있는 일급함수의 특성을 갖추고 있다면 직접 함수나 메소드의 객체를 전달할수 있습니다. 메소드를 검색하는 과정이 불필요하죠. 또한 함수를 주고받을 수 있으므로 기존 함수를 데코레이션하는 문법을 구현할 수도 있습니다. 이는 파이썬에서 주로 사용되는 데코레이터가 좋은 예입니다. 

