6.1.2 입력 필드를 가지는 메시지 창 : 알림창은 단순히 메시지를 출력하고 전달하는 용도로만 국한되지 않습니다. 텍스트 필드를 추가하여 간단한 정보를 입력받을 수도 있죠. 대표적인 사례가 앱 스토어 로그인 창입니다. 앱 스토어에서 앱를 내려받으려고 할 때 비밀번호 입력을위한 메시지 창이 뜨는 것을 다들 본적 있을 겁니다.
이창은 UIAlertController 객체에 텍스트 필드를 추가하고 이를 이용하여 비밀번호를 입력 받아 간단하게 로그인을 처리할수 있도록 구현한 결과물입니다. 메시지 창이 입력 기능을 지원하지 않을 경우 단지 값 하나의 입력을 위해 새로운 화면을 구성해야 하는 상황을 생각해보면 이같은 기능이 얼마나 불필요한 작업을 줄여주는지 쉽게 알 수 있습니다. 

위 그림에서 보이는 로그인 창을 그대로 구현해 봅시다. 어렵지 않습니다. 

STEP1 : 프로젝트의 뷰 컨트롤러에 로그인 버튼을 추가하고 ViewController 클래스에 액션 메소드 login(_:)을 정의하여 다음과 같이 연결합니다. 

STEP2 : login(_:) 메소드의 내용을 다음과 같이 작성합니다. 

ViewController.swift

@IBAction func login(_ sender: Any)
    {
        let title = "iTunes Store에 로그인"
        let message = "사용자의 Apple ID sqlpro@naver.com의 암호를 입력하십시오"
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let cancel = UIAlertAction(title: "취소", style: .cancel)
        let ok = UIAlertAction(title: "확인", style: .default){ (_) in
            // 확인 버튼을 클릭했을 떄 처리할 내용
        }
        alert.addAction(cancel)
        alert.addAction(ok)
        
        self.present(alert, animated: false)
    }

여기까지는 앞에서 배운 것과 크게 다르지 않은 내용입니다. 타이틀과 메시지를 설정하고, 두 개의 버튼을 추가하여 각각 "취소", "확인" 으로 만들어 주었습니다. 취소 버튼이야 그냥 창을 닫기만 하면 되므로 별도의 액션을 추가하지 않았고 확인 버튼은 이후 필요한 액션을 추가할 것이므로 미리 클로저 블록을 준비해 두었습니다. 이들 버튼을 alert 인스턴스에 추가하고 프레젠트 메소드를 이용하여 실행해 주는 것이 여기까지 작성된 주된 내용입니다. 


STEP3 : login(_:) 메소드 내에 다음 코드를 추가합니다. 위치는 프레젠트 메소드 호출 구문 바로 위가 좋겠습니다. 


 @IBAction func login(_ sender: Any)
    {
       ...(중략)...
        alert.addAction(cancel)
        alert.addAction(ok)
        alert.addTextField(configurationHandler: { (tf) in 
            //텍스트 필드의 속성설정
            tf.placeholder = "암호" // 안내 메시지
            tf.isSecureTextEntry = true //비밀번호 처리
        })
        self.present(alert, animated: false)
    }

추가된 구문은 alert 인스턴스에 텍스트 필드를 추가하는 내용입니다. 텍스트 필드를 추가할 때에는 버튼처럼 별도의 객체를 생성하여 등록하는 방식이 아니라 addTextField(configuration Handler:)메소드를 호출하면 됩니다. 인자값으로는 클로저가 사용되는데 이 클로저의 목적은 추가된 텍스트 필드의 속성을 설정하는 것입니다. 따라서 클로저가 직접 참조할수 있도록 텍스트 필드 객체 정보가 클로저의 인자값으로 전달되는데 위 예제에서는 이를 tf라는 매개변수를 통해 할당받고 있습니다. 

이어서 클로저 블록안에서 구현된 내용은 모두 텍스트 필드의 속성에 대한 설정입니다. placeholder 속성은 텍스트필드에 값이 비어 있을 때 안내 메시지 역할을 하고 isSecureTextEnter 속성은 비밀번호 입력 필드처럼 입력된 값을 ***로 처리하는 역할을 합니다. 텍스트 필드에 대한 나머지 자세한 속성은 다음 장에서 다루게 됩니다. 

코드가 추가되었으면 이제 실행해서 결과를 확인해 봅시다. 


어떤가요, 앞에서 살펴본 창과 완전히 똑같죠? 텍스트 필드를 이용하면 이처럼 간단한 형태의 입력 화면을 어렵지 않게 구현할 수 있습니다. 이제 마지막 단계입니다. 텍스트 필드에 입력된 값을 읽어오는 방법을 알아봅시다. 

STEP4 : 확인 버튼에 대한 UIAlertAction 클래스 인스턴스 구문에서 클로저 블록에 다음 구문을 추가합니다. 텍스트 필드에 입력된 값을 읽어 들여 처리하는 구문입니다. 

ViewController.swift

@IBAction func login(_ sender: Any)
    {
        ...(중략)...
        let ok = UIAlertAction(title: "확인", style: .default){ (_) in
            // 확인 버튼을 클릭했을 떄 처리할 내용
            if let tf = alert.textFields?[0]
            {
                print("입력된 값은 \(tf.text!)입니다.")
            }else
            {
                print("입력된 값이 없습니다.")
            }
        }
        ...(중략)...
    }

메시지 창에 추가된 텍스트 필드는 textField 속성을통해 참조할 수 있습니다. 메시지 창에 추가할수 있는 텍스트 필드의 수는 여러 개이기 때문에 textFields 속성의 타입 역시 배열로 이루어져 있습니다. 따라서 첫 번째 텍스트필드를 참조하려면 인덱스 0번을 통해 배열의 첫 번째 인자를 읽어 들여야 합니다. 혹은 배열의 첫 번째 인자만을 가리키는 속성인 .first를 이용하여 읽어들이기도 합니다. 

alert.textFields?.first

이렇게 해서 읽어온 텍스트 필드의 값은 필요한 곳에 임의로 사용할수 있습니다. 패스워드를 비교하여 로그인을 처리해주고 싶으면 로그인을, 혹은 다른데 사용하고 싶다면 다른 곳에 사용해도 됩니다. 위 예제에서는 입력된 값이 있으면 이를 콘솔에 출력하고 없다면 값이 없다고 출력해주도록 작성되어 있습니다. 

텍스트 필드를 메시지 창에 추가하고 사용하는 것은 크게 어렵지 않습니다. 추가할 때의 메소드와 참조할 때의 속성만 이해하고 있으면 금세 구현할수 있죠. 한 번 더 정리해 봅시다. 추가할 때의 메소드는 다음과 같습니다. 

addTextField(configurationHandler:)

하지만 추가된 텍스트 필드에 아무런 설정도 추가하지 않을 생각이라면 configurationHandler 매개변수를 생략하고 호출해도 됩니다. 이 경우 위 예제의 구문은 다음과 같은 형식으로 바뀌게 됩니다.

addTextField()

텍스트 필드를 사용하는 메시지 창에 관하여 학습해 보았습니다. 마지막으로 인증 화면을 구성하여 아이디와 패스워드를 입력받고 특정 아이디와 패스워드일 경우 인증되었음을 화면에 표시해주는 실습을 끝으로 UIAlertController에 대한 학습을 마치겠습니다. 




※ 메시지 창을 이용한 인증 화면 구성
STEP1 : 뷰 컨트롤러에 인증 버튼을 추가하고 이를 액션 메소드 auth(_:)에 연결합니다. 

STEP2 : auth(_:) 메소드에 다음과 같이 내용을 작성합니다 

ViewController.swift

@IBAction func auth(_ sender: Any)
    {
        //메시지 창 관련 객체 정의
        let msg = "로그인"
        let alert = UIAlertController(title: nil, message: msg, preferredStyle: .alert)
        let cancel = UIAlertAction(title: "취소", style: .cancel)
        let ok = UIAlertAction(title: "확인", style: .default, handler: { (_) in
            //확인 버튼을 클릭했을 때 실행할 내용
        })
        let id = "swift"
        let pw = "01234"
        //정의된 액션 버튼 객체를 메시지창에 추가
        alert.addAction(cancel)
        alert.addAction(ok)
        //아이디 필드 추가
        alert.addTextField(configurationHandler: { (tf) in
            tf.placeholder = "아이디" // 미리 보여줄 안내 메시지
            tf.isSecureTextEntry = false //입력시 별표(*) 처리 안함
        })
        //비밀번호 필드 추가
        alert.addTextField(configurationHandler: { (tf) in
            tf.placeholder = "비밀번호" // 미리 보여줄 안내 메시지
            tf.isSecureTextEntry = true // 입력시 별표(*) 처리함
        })
        self.present(alert, animated: false)
        
        
    }

이번에는 텍스트 필드가 두개 추가되었습니다. 하나는 아이디를, 또다른 하나는 비밀번호를 입력받는 필드죠. 메시지 창의 모습은 다음과 같습니다. 


STEP3 : 확인 버튼을 생성하는 UIAlertAction 추기화 구문의 액션 클로저에 다음과 같이 입력된 값을 처리하는 코드를 작성합니다. 

 @IBAction func auth(_ sender: Any)
    {
       ...(중략)...
        //현재 아이디와 비밀번호 정의
        let id = "sqlpro"
        let pw = "1234"
        let ok = UIAlertAction(title: "확인", style: .default, handler: { (_) in
            //확인 버튼을 클릭했을 때 실행할 내용
            let loginId = alert.textFields?[0].text
            let loginPw = alert.textFields?[1].text
            
            if loginId == id && loginPw == pw
            {
                self.result.text = "인증되었습니다."
            }else
            {
                self.result.text = "인증에 실패하였습니다."
            }
        })
       ...(중략)...        
    }

메시지 창에 추가된 텍스트 필드가 두 개 이상이면 그에 맞는 인덱스 번호를 사용하여 textFields배열에서 알맞은 값을 읽어낼수 있습니다. 이렇게 읽어낸 첫 번째 값이 아이디, 두 번째 값이 패스워드입니다. 주어진 아이디/ 패스워드와 일치하면 인증 성공 메시지를 실패하면 인증 실패 메시지를 화면 레이블에 출력하고 있습니다. 

어떤가요 이제 UIAlertController를 이용하여 다양한 메시지 창을 만들어 보는 방법을 이해하실수 있겠나요? 이처럼 UIAlertController 객체는 다양한 방식으로 활용할수 있습니다. 단순한 알림창에서부터 사용자의 선택을 입력받을 때 그리고 간단한 값을 입력받을 때 UIAlertController 객체를 사용하면 별도의 화면을 구현하지 않고도 손쉽게 기능을 구성할수 있어 매우 효율적입니다. 



참고 : 클로저의 다양한 표현 방식
프로그래밍 코드는 원래 형식에 따라 작성하는 것이 원칙이지만 외국 웹사이트에서 찾아볼수 있는 코드들은 클로저를 매우 다양하게 표현해 놓은 경우가 많습니다. 이에 대한 이해를 높이기 위해 다양한 변경 형식을 모두 표기해 보면 다음과 같습니다. 
[원형]
alert.addTextField( configurationHandler: { (textfield : UITextField) in
textfield.placeholder = "비밀번호"
textfield.isSecureTextEntry = true
})

[변형1] 클로저 인자값 대신 메소드에 실행 블록 추가
alert.addTextField() { (textField : UITextField) in
textfield.placeholder = "비밀번호"
textfield.isSecureTextEntry = true
}

[변형2] 클로저 인자값의 타입 생략
alert.addTextField() { (tf) in
textfield.placeholder = "비밀번호"
textfield.isSecureTextEntry = true
}

[변형3] 클로저 인자값을 생략
alert.addTextField(){ in
$0.placeholder = "비밀번호"
$0.isSecureTextEntry = true
}




6.2 로컬 알림
로컬 알림은 앱 내부에서 만든 특정 메시지를 iOS 알림 센터를 통해 전달하는 방법입니다. 앱이 종료되어 있거나 백그라운드 상태일 때 메시지를 전달할수 있는 대표적인 방법 중의 하나죠. 

로컬 알림은 iOS 스케줄러에 의해 발송되는데 앱 내부에서 미리 메시지를 구성한 후 발송될 시각을 iOS 스케줄러에 등록해 두면 해당 시각에 맞추어 자동으로 발송됩니다. 모든 발송은 iOS 스케줄러에 의해 관리되므로 앱이 실행 중이 아니더라도 메시지를 받을수 있을 뿐만 아니라 알림 센터에 표시된 메시지를 클릭하여 앱을 실행시키고 원하는 기능을 실행하거나 특정 화면으로 이동하게끔 처리할 수도 있습니다. 

로컬 알림은 앱 실행 여부와 상관없이 사용할수 있지만 앱이 실행중이라면 로컬 알림보다는 앞에서 다룬 메시지 창을 이용하는 것이 더 확실하고 효율적입니다. 로컬 알림은 앱을 종료할때 혹은 앱이 백그라운드 상태로 진입할 때 등 사용자의 관심으로부터 멀어지는 상황에서 앱에 대한 주의 환기를 목적으로 사용하는 것이 좋습니다. 로컬 알림에 관련된 많은 작업이 뷰 컨트롤러가 아닌 앱 델리게이트 클래스에서 이루어지는 것은 이 때문입니다. 앱의 라이프 사이클과관련하여 적절한 시점에 로컬 알림을 사용하면 홍보 효과를 거둘 수 있으니까요. 

로컬 알림의 또 다른 용도는 스케줄링입니다. 컴퓨터 시스템적인 의미에서의 스케줄링이 아니라 개인의 일정을 관리하는 스케줄링이죠. iOS에서 제공하는 미리 알림 앱을 사용해본 경험이 있는 분들이라면 이 앱이 등록해 놓은 일정과 시간에 맞춰 일정 알림 메시지가 뜨는 것을본적이 있을겁니다. 이와 같이 특정 시각에 뭔가를 알려주도록 처리할 때에도 로컬 알림을 사용합니다. iOS 시스템의 스케줄러에 등록만 해 놓으면 따로 관리하지 않아도 해당 시간에 알아서 메시지를 보내주기 때문에 매우 편리하죠. 

로컬 알림을 처리하는 객체는 전통적으로 UILocalNotification 였습니다. UIKit 프레임워크에 정의된 객체로 구글에서 Local Notification in iOS라고 검색하면 이 객체를 이용하여 로컬 알림을 처리하는 방법을 다룬 많은포스팅을 접할수 있죠. 

그런데 최근 변화가 생겼습니다. 애플이 사용자 알림에 관한 모든 것을 전담 처리할 UserNotification 프레임워크를 iOS10부터 새로 제공하기 시작한 것이죠. 이로 인해 기존의 UILocalNotification 객체는 더이상 사용할수 없게 될 예정입니다.(물론 지금 당장 사용할수 없는 것은 아니지만 미래의 불특정 시점에 공지 없이 사용중단될 수 있으므로 가급적 사용하지 않는 것이 좋습니다.)

따라서 iOS 10버전 이상부터는 UserNotification 프레임워크를 그 이외에는 UILocalNotification 객체를 이용해서 로컬 알림을 구현해야 합니다. 필자가 글을 쓰고 있는 시점에서 여러분 대다수는 iOS11이나 그 이후의 버전을 사용하고 있겠지만 그래도 구 버전을 위한 UILocalNotification 방식과 새 버전을 위한 UserNotification 방식을 모두 익혀두는 것이 좋습니다. 




6.2.1 UserNotification 프레임워크를 이용한 로컬 알림
UserNotification은 사용자 알림을 처리하기 위해 iOS 10부터 새롭게 도입된 알림 전용 프레임워크입니다. 알림을 위해 필요한 여러 가지 객체를 포함하고 있으며 User와 Notification의 첫 철자를 딴 UN 접두어를 사용하여 객체 이름을 정의합니다. 따라서 UN***로 시작하는 객체를 보면 알림 처리를 위한 객체라고 생각하면 됩니다. 기존의 알림 관련 객체에서는 로컬 알림과 서버 알림을 위한 객체가 각각 나누어져 있었지만 UserNotification 프레임워크에서 로컬 알림과 서버 알림의 차이는 단순히 구분값에 지나지 않으므로 통합적으로 구현 가능하다는 장점이 있습니다. 

UserNotification 프레임워크는 UIKit 프레임워크나 파운데이션 프레임워크와 같은 수준의 독립된 프레임워크입니다. 따라서 객체를 사용하려면 파일 상단에 다음과 같이 반입 구문을 추가해 주어야 합니다. 

import UserNotification

이후로는 이 프레임워크에 정의된 여러 가지 객체들을 필요한 대로 사용할수 있습니다. 

UserNotification 프레임워크에서 눈여겨봐야 할 객체는 다음 네 개입니다. 

1. UNMutableNotificationContent
2. UNTimeIntervalNotificationTrigger
3. UNNotificationRequest
4. UNUserNotificationCenter

구 방식에서 UILocalNotification 객체를 통해 정의했던 각종 속성들은 알림 콘텐츠, 알림 발송 조건, 알림 요청의 세 가지 객체로 분화되었습니다. 이들 객체는 순서대로 위의 1~3에 해당합니다. 

UNMutableNotificationContent는 알림에 필요한 메시지와 같은 기본적인 속성을 담는 알림 콘텐츠 역할을 합니다. 이 객체를 통해 로컬 알림 타이틀, 서브 타이틀 및 알림 메시지를 설정할수 있으며 앱 아이콘에 표시될 배지나 사운드 설정도 모두 이 객체를 통해 설정합니다. 비슷한 정보를 담고 있는 객체로 UNNotificationContent가 있는데 이 객체는 수정이 불가능하며 객체로부터 속성을 읽어 들일수만 있는 특성을 가집니다. 따라서 기존에 등록된 알림 콘텐츠를 읽을 때에만 사용할수 있으며 속성을 설정하려면 반드시 NUMutableNotificationContent 객체를 사용해야 합니다. 

UNTimeIntervalNotificationTrigger는 알림 발송 조건을 관리합니다. 설정할수 있는 속성은 발생 기각과 반복 여부입니다. 구 방식에서는 Date() 타입을 통해 발송 시각을 설정할수 만 있었지만 UNTimeIntervalNotificationTrigger 를 사용하면 몇분후 등과 같이 시간간격을 설정하여 알림 메시지를 발송할수 있습니다. 이때 입력값의 단위는 초입니다. 만약 하루중 특정 시각에 맞추어 알림 메시지를 전송하고 싶다면 UNCalendarNotificationTrigger객체를 사용하면 됩니다. 

1과 2를 통해 알림 콘텐츠와 알림 발생 조건이 준비되면 이들을 모아 알림 요청 객체를 만들어야 합니다. 이때 사용되는 클래스가 UNNotificationRequest 입니다. 알림 콘텐츠 객체와 알림 발송 조건 객체를 인자값으로 하여 이 클래스를 초기화하면 그 결과로 알림 요청 객체가 생성됩니다. 

마지막 4번의 UNUserNotificationCenter는 실제 발송을 담당하는 센터입니다. 등록된 알림 내용을 확인하고 정해진 시각에 발송하는 역할을 맡고있죠. 이 객체는 싱글턴 방식으로 동작하기 때문에 따로 인스턴스를 생성하지 않고 current()메소드를 통해 참조 정보만 가져올수 있습니다. 앞에서 생성한 UNNotificationRequest 객체를 UNUserNotificationCenter::add(_:)메소드를 이용하여 추가하기만 하면 알림 등록 과정이 모두 완료됩니다. 

이제 이론으로 학습한 내용을 실제 코드로 구현해 봅시다. 그리 어렵지 않으니 금세 따라할수 있을 겁니다. 