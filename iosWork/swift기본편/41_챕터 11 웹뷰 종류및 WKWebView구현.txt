※ 사파리 앱 호출하기
맨 처음 알아볼 것은 사파리 앱을 호출하는 방법입니다. URL을 사파리 브라우저로 전달하여 원하는 웹 페이지를 여는 방법이죠 구현 코드가 매우 간단하기 때문에 손쉽고 빠르게 구현할수 있다는 장점이 있습니다. 다음은 사파리 앱을 실행하는 예제 코드입니다. 

let url = URL(string:"https://www.google.com/")
UIApplication.shared.open(url!, options: [:])

코드는 무척 단순해서 호출할 URL을 담아 URL 객체를 생성하고 이를 UIApplication.shared.open() 메소드에 넣어 호출하기만 하면 됩니다. 그러면 자동으로 사파리 앱이 실행되면서 입력한 URL에 대한 웹 페이지가 로드됩니다. 

이 방식을 사용할 때에는 이점이 하나 있습니다. 바로 ATS, 즉 info.plist파일에 App Transport Security설정을 해줄 필요가 없다는 것입니다. 이유는 간단합니다. 네트워크 통신 자체를 사파리 앱이 대신 처리하기 때문이죠. 참고로 ATS 설정은 앱 내부에서 URLSession, URLRequest 관련 객체를 쓸 때에만 필요합니다. 





※ UIWebView 객체 사용하기
다음으로 알아볼 것은 UIWebView 객체를 사용하는 방법입니다. 스토리보드의 UI상에 UIWebView 객체가 이미 추가되어 있다는 가정 하에서, 이 객체를 사용하여 웹 페이지를 로드하는 방법은 다음과 같습니다. 

// 1. UIWebView 객체에 대한 아울렛 변수
@IBOutlet var webView : UIWebView!

// 2. URLRequest 객체를 생성한다. 
let url = URL(string:"https://www.google.com/")
let req = URLRequest(url: url!)

// 3. req를 인자값으로 하는 loadRequest 메소드를 호출한다. 
self.webView.loadRequest(req)

URL 값을 기반으로 URL 객체를 생성하고(1), 이 값을 넣어 다시 URLRequest 객체를 생성합니다(2), 이어서 이 객체를 인자값으로 하는 loadRequest 메소드를 호출해주면(3) 끝입니다. 이 메소드는 UIWebView 객체에 정의되어 있죠. 

이 방식은 ATS 설정을 필요로 합니다. 앱 내부에서 직접 네트워크 통신 관련 작업을 처리하기 때문에, 접속을 허용할 HTTP 도메인에 대하여 미리 등록해놓아야 합니다. 





※ WKWebView 객체 사용하기
WKWebView 객체의 사용법은 UIWebView 의 사용법과 거의 동일합니다. 객체만 WKWebView 로 바꾼 것에 지나지 않죠. 다만 UIKit  프레임워크에 속해 있는 UIWebView와 달리 WKWebView는 WebKit이라는 별도의 프레임워크를 통해 제공되기 때문에 객체 사용시 이 프레임워크에 대한 반입 구문이 필요합니다. 

// 1. WKWebView 객체를 사용하기 위한 프레임워크 반입 정의
import WebKit

// 2. WKWebView 객체에 대한 아울렛 변수
@IBOutlet var webView : WKWebView!

// 3 URLRequest 객체를 생성한다
let url = URL(string:"https://www.google.com/")
let request = URLRueqest(url : url!)

// 4. req를 인자값으로 하는 load 메소드를 호출한다
self.webView.load(request)

코드 작성시 제일 먼저 할일은 WebKit 프레임워크를 반입하는 것입니다. 이 구문이 누락되면 컴파일러는 WKWebView 객체를 찾을수 없다는 오류를 출력하죠. 

프레임워크를 반입한 후에 이어서 할 일은 조금 전과 같습니다. URL 객체와 URLRequest를 차례로 생성한 다음 이 객체를 인자값으로 하는 WKWebView:load() 메소드를 호출해주면 끝입니다. 





※ SFSafariViewController 실행하기
SFSafariViewController(이하 사파리 뷰 컨트롤러)는 뷰 기반의 UIWebView나 WKWebView와 달리 컨트롤러 객체에 해당합니다. 따라서 UI에 삽입하는 것이 아니라 단순히 코드를 호출해주기만 하면 됩니다. 스토리보드 작업이 필요없다는 뜻이죠

사파리 뷰 컨트롤러는 방금 살펴본 웹 뷰 기반의 코드와는 조금 다릅니다. 사파리 서비스(Safari Service)프레임워크를 통해 제공되기 때문에 호출시에는 먼저 이 프레임워크에 대한 반입 구문이 작성되어 있어야 하며. 특정 메소드를 호출하는 것이 아니라 화면을 전환하는 방식으로 해당 컨트롤러를 호출해야 합니다. 이미지 피커 컨트롤러를 사용하는 방식과 유사하죠. 

또한 URL 객체와 URLRequest 객체를 차례로 생성하여 이를 이용하여 메소드를 호출했던 웹뷰와 달리, URL 객체를 컨트롤러 초기화 시에 인자값으로 넣어주기만 하면 됩니다. 중간에 URLRequest를 생성하지 않는 것에 주의하기 바랍니다. 

사파리 뷰 컨트롤러를 이용하여 URL 을 호출하는 코드는 다음과 같습니다. 


// 1. SFSafariViewController 객체를 사용하기 위한 프레임워크 반입 정의
import SafariServices

// 2. URL 객체를 생성하고, 이를 이용하여 SFSafariViewController를 초기화 한다. 
let url = URL(string: "https://www.google.com/")
let safariViewController = SFSafariViewController(url: url!)

// 3. 생성한 Safari 컨트롤러에게로 화면을 전환한다. 
present(safariViewController, animated: true, completion : nil)

지금까지 4가지의 URL 호출 처리 방식을 알아보았는데요. 이들 중에서 실무에서 중요한 객체를 꼽으라면 단연코 WKWebView와 SFSafariViewController 입니다. 특히 앱이 고도화되어 갈수록 WKWebView 의 중요도가 점점 커지는데, 이는 우리가 원하는 대로 WKWebView 를 커스터마이징할수 있기 때문입니다. 

WKWebView를 커스터마이징 한 대표적인 예가 카카오톡 등의 메신저에서 URL을 클릭했을때 앱 내부에서 열리는 웹 브라우저입니다. 이 브라우저는 이미지 다운로드와 같이 다양하게 직접 구현된 기능들을 제공하고 있는데, 이는 WKWebView 객체를 이용해야 구현이 용이합니다. 





11.1 WKWebView를 이용하여 영화 정보 상세 화면 구현하기 . 
WKWebView 객체를 이용하여 인앱 브라우저를 구현해 봅시다. 만들어볼 것은 이 장의 서두에 언급한 것처럼 영화 정보 상세 화면이며 앞서 제작한 MyMovieChart 프로젝트를 사용하여 계속 실습을 진행하겠습니다. JSON 포맷으로 받는 데이터 중 상세 페이지 정보에 해당하는 linkUrl 값을 이용하여 웹 페이지를 보여주는 화면을 구현하면 됩니다. 이 실습은 다음과 같은 순서로 진행하겠습니다. 


1. 새로운 뷰 컨트롤러에 웹 뷰를 포함한 영화 상세 화면 UI를 구성한다. 

2. 뷰 컨트롤러에 대한 컨트롤러 클래스를 작성하고 제어할 UI 요소를 아울렛 변수로 연결한다. 

3. 영화 차트 목록에서 상세 화면으로서의 화면 전환을 구현하면서 URL을 포함한 전달값을 처리한다. 

4. 상세 화면에서는 전달된 URL을 이용하여 웹 페이지를 로드한다. 

실제로 완성된 수준의 인앱 브라우저를 구현하기 위해서는 방금 나열한 과정 외에도 델리게이트 처리 등의 보완 작업이 필요하지만 지금 단계에서 진행할수 있는 과정은 이 정도입니다. 여러분이 조금씩 앱을 제작하는 일에 익숙해져 가고 있으리라 기대하며, 이제부터는 잡다한 설명 대신 간결하게 실습을 진행하겠습니다. 


STEP1 : MyMovieChart 프로젝트를 엽니다. 

서두에서 설명한 것과 같이 이 책의 후반부는 영화 앱이라는 하나의 주제를 가지고 각 장에서 기능을 추가해 나가는 과정으로 진행됩니다. 따라서 별도로 언급하지 않는한 실습은 현재 진행하고 있는 MyMovieChart 프로젝트를 이용합니다. 

STEP2 : 스토리보드에 새로운 뷰 컨트롤러 하나를 추가하고, 여기에 WKWebView 객체를 드래그합니다. 

이번 실습에서 가장 먼저 해야 할일은 화면 설계입니다. 상세 페이지 역할을 할 뷰 컨트롤러를 만들고 UI를 구성하는 일이죠. 이를 위해 스토리보드에 뷰 컨트롤러를 추가해야 하는데 일반 뷰 컨트롤러를 사용하면 됩니다. 뷰 컨트롤러가 추가되면 여기에 WKWebView객체를 배치하는데 이 객체는 오브젝트 라이브러리에서(WebKit View]항목으로 찾을수 있습니다. 

만약 드래그된 WKWebView가 뷰 컨트롤러보다 작다면 화면에 채워질수 있도록 리사이징 핸들을 이용하여 적절히 늘려줍니다. 간혹 Xcode 버전에 따라 추가된 WKWebView가 배경과 구분되지 않는 색상으로 표시되는 버그가 있는 경우도 있지만 이 때에는 감각적으로 적당히 컨트롤해 보면 됩니다. 


질문!! 웹킷 뷰(WebKit View)로 화면을 꽉 채워봤는데 상단에 약간의 공간이 비어요. 이건 뭔가요?
iOS는 기본적으로 화면 상단의 일정 영역을 배터리 상태나 시간, 통신사 정보나 연결 감도 등을 표시하는 데에 사용합니다. 이 영역을 우리는 상태 바(Status Bar)라고 부르는데요. 웹킷 뷰로 화면을 가득 채웠을 때 보이는 약간의 공간이 이에 해당합니다. 

상태바는 우리가 임의로 다른 것으로 채우거나 컨트롤할수 없는 영역이므로 위 그림과 같이 화면 상단이 비어 보이더라도 그냥 두면 됩니다. 



질문!! 상단에 내비게이션 바가 들어갈 거잖아요? 그러면 그만큼의 공간을 비워놔야 할텐데 객체로 꽉 채우는 이유는 무엇인가요?
UI를 구성할 때 많은 사람들이 화면 상단에 내비게이션 바가 들어갈 공간이 따로 필요하다고 생각합니다. 이는 내비게이션 바의 개념을 단순히 위치를 점유하는 하나의 레이어로 이해하기 때문인데요. 실제로는 그렇지 않습니다. 이해를 돕기 위해 내비게이션 바가 이미 삽입되어 있다는 가정하에서 이 문제를 살펴보도록 하겠습니다. 

만약 UI를 구성하기 전에 내비게이션 컨트롤러가 이미 연결되어 있다면 아마도 내비게이션 바가 화면의 상단에 삽입되어 있을 겁니다. 이 상태에서 웹킷 뷰를 추가하면 대부분의 사람들이 내비게이션 바 아래 선에 맞추어 웹킷 뷰의 크기를 조정하곤 합니다. 혹은 내비게이션 바가 아직 추가되어 있지 않더라도 그 공간을 미리 비워두기도 하죠. 이유는 간단합니다. 내비게이션 바도 하나의 객체이니 그만큼의 공간이 필요하다는 생각인거죠. 

하지만 인터페이스 빌더는 내비게이션 바의 존재 여부에 상관없이 해당 객체와 뷰 컨트롤러의 상단 사이의 여백 자체를 계산하는 특성이 있습니다. 따라서 별도로 공간을 남겨둔 채로 UI를 구성하면 앱 실행시 다음 그림처럼 의도치 않은 여백이 생겨나게 됩니다. 

이런 현상을 피하려면 내비게이션 바가 들어갈 공간을 고려하지말고 객체를 화면 상단까지 가득 채워야 합니다. 내비게이션 바는 실제 위치와 공간을 베타적으로 점유하는 객체가 아니라 기존 객체의 위에 겹쳐지는 레이어 형태이기 때문입니다. 



STEP3 : DetailViewController.swift라는 이름으로 스위프트 파일을 추가하고, 파일을 열어 DetailViewController 클래스를 작성합니다. 

DetailViewController.swift

import UIKit
import WebKit

class DetailViewController : UIViewController
{
}

주의해야 할점은 WebKit 프레임워크 반입 구문입니다. 우리가 사용할 WKWebView 객체는 UIKit 프레임워크 혹은 Foundation 프레임워크가 아니라 WebKit 프레임워크에 속해 있기  때문에 반드시 먼저 WebKit 프레임워크를 반입하는 구문을 추가해 주어야 합니다. 만약 이 부분을 누란한다면 나중에 WKWebView 객체를 찾을수 없다는 컴파일 에러가 발생하게 됩니다. 