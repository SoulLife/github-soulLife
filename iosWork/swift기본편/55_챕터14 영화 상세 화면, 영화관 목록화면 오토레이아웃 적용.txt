14.2.2 영화 상세 화면
이번에는 영화 상세 화면의 레이아웃을 조절해보겠습니다. 앞서와 같이 먼저 각 기기에서 실행하여 문제점을 점검해보죠. 

문제점1 : 화면이 커지면 웹 뷰 오른쪽에 여백이 발생하고, 작아지면 웹 뷰 오른쪽이 잘려서 표현됨. 특히 가로 모드에서 두드러짐

영화 상세 화면에서의 문제는 웹 뷰 입니다. 다른 것은 의외로 별문제가 없는데, 그도 그럴 것이 우리가 직접 추가한 객체가 웹 뷰밖에 없기 때문입니다. 탭 바나 내비게이션 바는 이미 화면 사이즈에 맞추어 늘어나고 줄어들도록 설정되어 있기 때문에 특별한 문제가 되지 않는 반면 웹 뷰는 그렇지 않습니다. 화면이 커짐에 따라 늘어나야 자연스러운데 현재는 크기가 고정되어 있어서 화면의 늘어남에 대응하지 못하고 여백이 발생합니다. 반대로 화면이 줄어들었을 때에는 오른쪽 영역이 잘려서 표현됩니다. 이 부분만 처리해주면 영화 상세 화면에서의 레이아웃은 문제가 없습니다. 

STEP1 : 스토리보드에서 영화 상세 화면의 웹 뷰를 선택하고 아래 항목에 맞게 제약 조건을 설정합니다. 

※ 왼쪽으로 드래그하여 [Leading Space to Safe Area] 선택
※ 오른쪽으로 드래그하여 [Trailing Space to Safe Area] 선택
※ 위쪽으로 드래그하여 [Top Space to Safe Area] 선택
※ 아래쪽으로 드래그하여 [Bottom Space to Safe Area]선택

그런데 아마 이번에는 원하는 팝업 메뉴가 잘 나타나지 않을 겁니다. 웹 뷰가 컨트롤러 전체를 가득 채우고 있기 때문이죠. 아무리 드래그해봐도 웹 뷰 내부로만 드래그되어 [Width], [Height]메뉴만 표시됩니다. 이럴 때는 문서 개요창을 이용하면 됩니다. 문서 개요창을 열어 스토리보드의 웹 뷰를 문서 개요창의 [View]항목으로 드래그해봅시다. 필요한 메뉴들이 모두 표시되는 것을 볼 수 있습니다. 

혹여 핀설정창을 이용한다면 다음과 같이 상하좌우 모든 간격을 클릭하여 활성화 하면 됩니다. 

웹 뷰에 대한 제약 조건 설정이 완료되면 다음과 같은 모습으로 표시됩니다. 





14.2.3 영화관 목록 화면
영화관 목록 화면은 영화 목록 화면과 그 구조가 비슷합니다. 동일하게 테이블 뷰를 사용하고 있고, 프로토타입 셀을 커스텀 타입으로 이용하고 있죠. 눈치가 빠른 독자라면, 아하 앞서의 영화 목록 화면과 비슷한 문제가 있겠군! 하고 생각할텐데요. 맞습니다. 

기기별 시뮬레이터를 통해 실행해서 화면의 레이아웃을 점검해보면 역시나 앞서와 비슷한 문제점이 발견됩니다. 

셀의 오른쪽에 있는 연락처 영역이 문제네요. 현재 좌표가 고정되어 있어서 화면 설계의 기준으로 잡았던 아이폰 7보다 작은 화면 크기에서는 잘리거나, 가로 모드에서는 과하게 여백이 만들어지는 등의 문제점이 발견됩니다. 지금까지 했던 것처럼 여기에도 오토 레이아웃을 적용해서 기기별로 온전한 화면을 보여줄수 있도록 수정해봅시다. 

STEP1 : 스토리보드에서 영화관 목록 뷰 컨트롤러를 열어 연락처 레이블 객체를 선택합니다 

STEP2 : 선택된 레이블 객체를 다음과 같이 설정합니다. 

※ 오른쪽으로 드래그하여 [Trailing Space to tCell] 선택
※ 위쪽으로 드래그하여 [Top Space to tCell] 선택
※ 연락처 레이블 내부로 드래그하여 [Width] 선택
※ 연락처 레이블 내부로 드래그하여 [Height] 선택

이번에도 원하는 메뉴가 잘표시되지 않는다면 문서 개요창을 이용하여 쉽게 설정할수 있습니다. 레이블을 선택하고 문서 개요창의 객체 위로 드래그해보세요. 원하는 메뉴들이 쉽게 표시될 겁니다. 

핀 설정창을 이용하여 제약 조건을 추가할 경우에는 다음과 같이 설정하면 됩니다. 

설정이 끝났습니다. 앱을 실행하여 우리가 의도한 레이아웃이 모두 적절히 반영되었는지 확인합시다. 





14.2.4 영화관 상세 화면
마지막으로 오토 레이아웃을 적용할 화면은 영화관의 위치를 보여주는 영화관 상세 화면입니다. 이 화면은 웹 뷰 대신 맵 뷰를 사용한다는 차이만 있을 뿐, 영화 상세 화면과 그 구조가 비슷합니다. 뷰 컨트롤러 전체를 맵 뷰가 차지하고 있으면서 위 아래에는 각각 내비게이션 바와 탭 바가 내장된 형태죠. 시뮬레이터를 통해 레이아웃을 확인해봅시다. 

예상했던 대로입니다. 가로 모드로 보았을 때 웹 뷰와 같에 맵 뷰의 오른쪽에 여백이 나타납니다. 이는 맵 뷰가 처음 크기를 유지하기 때문입니다. 이를 수정하여 오른쪽 여백 없이 꽉찰수 있는 맵 뷰를 만들어 보겠습니다. 스토리보드에서 맵 뷰를 선택하고다음과 같은 설정을 추가합니다. 

※ 왼쪽으로 드래그하거나, 문서 개요창의 [View] 항목으로 드래그하여 [Leading Space to Safe Area] 선택
※ 오른쪽으로 드래그하거나, 문서 개요창의 [View] 항목으로 드래그하여 [Trailing Space to Safe Area] 선택
※ 위쪽으로 드래그하거나, 문서 개요창의 [View] 항목으로 드래그하여 [Top Space to Safe Area] 선택
※ 아래쪽으로 드래그하거나, 문서 개요창의 [View] 항목으로 드래그하여 [Bottom Space to Safe Area] 선택

핀 설정창을 이용하여 제약 조건을 추가할 경우 ,다음과 같이 상하좌우 모든 간격을 클릭하여 활성화하고 간격을 0으로 설정합니다. 

이제 실행해보면 가로 모드에서도 오른쪽 여백 없이 맵 뷰로 꽉 들어찬 화면이 표시됩니다. 

영화관 상세 화면의 설정을 끝으로 MyMovieChart 앱에서 필요한 모든 레이아웃 설정을 완료 했습니다. 오토 레이아웃의 기능이 어느정도 이해되는지요? 이번 장의 서두에도 설명한 것처럼 레이아웃 설정은 다양한 디바이스에서 앱을 사용할수 있게 하기 위한 최소한의 필요장치입니다. 실제로 만든 앱을 배포하기 전에 반드시 각 기기별로 화면 구성에 문제가 없는지 체크하고, 문제가 있다면 레이아웃 제약 조건 설정을 통해 문제되는 부분을 해결한 다음 작업을 완료해야 합니다. 

처음 앱을 만들 때부터 어느 정도 레이아웃에 대한 기준을 잡아놓고 접근하면 훨씬 편하고 작업도 쉬워지므로 이를 염두에 두고 앱 개발 작업을 시작하는 것이 좋습니다. 여러분이 실무 프로젝트에서 일을 하게 될 때도 마찬가지입니다. 보통 디자이너나 기획자가 화면 구성에 대한 업무를 담당하게 될 텐데, 단순히 하나의 기기만을 기준으로 구성한 화면 기획안보다는 기기별로 화면이 변경될 방향에 대해 처음부터 논의후 작업을 하면 작업 후반에 레이아웃 때문에 골치아픈 경우가 줄어들게 되므로 작업이 훨씬 수월해집니다. 

이것으로 MyMovieChart 앱의 실습 과정이 모두 끝났습니다. 기능 구현에 이어 화면 구현까지 모두 처리되었으므로 이제는 어느 정도 완성된 앱이라고 보아도 좋습니다. 실제로 출시할 정도의 수준을 위해서는 론치 스크린의 디자인뿐만 아니라 버튼의 모양이나 아이콘 등 디자인적인 요소를 가미하여 심미적인 부분을 보강해야겠지만 나머지는 여러분의 숙제로 남기겠습니다. 수고하셨습니다. 

