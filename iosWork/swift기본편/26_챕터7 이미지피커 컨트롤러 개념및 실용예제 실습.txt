7.2 이미지 피커 컨트롤러
이미지 피커 컨트롤러(Image Picker Controller)는 카메라나 앨범 등을 통해 이미지를선택할 때 사용하는 컨트롤러로서 델리게이트 패턴을 활용하는 또다른 대표적인 객체입니다. 

이미지 피커 컨트롤러 자체는 단순히 이미지를 선택해서 가져오는 기능입니다. 하지만 이미지를 불러올 소스를 어떤 것으로 설정하느냐에 따라 앨범이나 카메라 기능을 사용할수 있으므로 카메라를 이용하여 즉석에서 촬영한 사진을 사용하거나 앨범에 저장된 이미지를 불러올 때 대부분이 컨트롤러를 사용하여 기능을 구현합니다. 

물론 카메라로 사진을 찍어서 가져오는 과정이나 앨범에서 이미지를 불러오는 과정은 모두 이 컨트롤러 내에서 이미 구현되어 있으므로 우리가 카메라나 앨범에 대한 기능을 직접 구현할 필요는 없습니다. 또한 우리가 직접 구현해야 하는 코드도 카메라나 앨범에 관계없이 거의 동일합니다. 카메라나 앨범 중에서 무엇을 사용할 것인지 소스 타입만 설정해주면 될 뿐이죠. 

이미지 피커 컨트롤러는 카메라와 앨범을 처리하는 기능을 우리가 구현할 필요 없이 알아서 처리한 후 우리에게 이미지 정보만 반환해주는 방식으로 동작합니다. 

이미지 피커 컨트롤러는 화면 전체를 덮기 때문에 운영체제가 일시적으로 앱에 대한 제어 권한을 가져갑니다. 이 컨트롤러는 개발자가 의도한 시점에 소스 코드를 통해 호출되어 앱의 제어 권한을 가져온 다음, 사용자가 카메라로 사진을 촬영하거나 앨범에서 사진을 선택하면그 이미지 정보를 델리게이트로 지정된 객체에 메소드 호출을 통해 인자값으로 전달해주어 우리가 선택한 이미지를 사용할수 있도록 해 줍니다. 



7.2.1 UIImagePickerController 클래스
이미지 피커 기능은 UIImagePickerController 클래스에 구현되어 있습니다. 이 클래스는 UIViewController 를 상속받은 컨트롤러이기 때문에 실행할 때에는 화면 전환하는 방식을 이용하게 됩니다. 단 이미지 피커 컨트롤러는 인터페이스 빌더의 오브젝트 라이브러리에 포함되어 있지 않으므로 스토리보드를 이용하여 구성할수 없으며 소스 코드를 사용하여 직접 인스턴스를 생성하고 화면을 호출해야 합니다. 

이미지 피커 컨트롤러를 사용하는 방식은 UIAlertController 와 유사합니다. 
UIImagePickerController 클래스의 인스턴스를 생성하고 여기에 몇 가지 기능 관련 속성을 설정한 다음 present(_:animated:)메소드에 인자값으로 넣어 호출하면 그뿐입니다. 다음은 이미지 피커 컨트롤러를 생성하여 옵션을 추가하고 실행하는 예제입니다. 

//이미지 피커 컨트롤러 인스턴스 생성
let picker = UIImagePickerController()

picker.sourceType = .photoLibrary // 이미지 소스 선택
picker.allowsEditing = true //이미지 편집 기능 여부 설정
picker.delegate = self //델리게이트 지정

//이미지 피커 컨트롤러 실행
self.present(picker, animated: false)

//이미지 피커 컨트롤러 종료

picker.dismiss(animated: false)

이미지 피커 컨트롤러의 sourceType은 어떤 소스를 기반으로 이미지를 가져올 것인지 선택하는 속성입니다. UIImagePickerController.SourceType 열거형 타입으로 정의되어 있으며, 다음 세 가지 값 중에서 선택할 수 있습니다. 

※ UIImagePickerController.SourceType.photoLibrary : 이미지 라이브러리에서 이미지를 선택하는 옵션

※ UIImagePickerController.SourceType.savedPhotosAlbum : 지정된 사진 앨범에서 이미지를 선택하는 옵션

※ UIImagePickerController.SourceType.camera : 카메라를 실행하여 즉석에서 사진을 촬영하고 이를 통해 이미지를 생성하는 옵션

안타깝게도 .camera 속성은 실제로 물리적인 카메라 하드웨어가 있는 기기에서만 정상적으로 동작하므로, 시뮬레이터에서 테스트해 보기는 어렵습니다. 하지만 코드의 차이가 크지 않고 속성값을 변경하는 것만으로 카메라와 이미지 앨범 사이를 손쉽게 전환할수 있습니다. 실제 모바일 기기에서 실행할수 있는 여건이 된다면 꼭 .camera속성으로 변경하여 테스트해보기 바랍니다. 

allowsEditing 속성은 사진이나 이미지를 선택한 후 수정이나 보정, 또는 필요한 부분만 잘라내기 등의 편집 작업을 할 것인지에 대한 것입니다. 기본값이 false로 설정되어 있는 이 속성을 true로 설정하면 선택하거나 촬영한 이미지를 편집할수 있는 창이 표시되고, 여기에서 편집 작업을 마치면 다시 원래의 델리게이트 메소드를 호출하는 순서로 실행됩니다. 

delegate 속성은 선택한 이미지를 반환받을 대상을 지정하는 속성입니다. 속성값으로 self를 지정하면 이미지를 자기 자신의 뷰 컨트롤러로 받겠다는 의미입니다. 선택한 이미지는 델리게이트 메소드를 통해 전달받게 되므로 이를 위해 델리게이트 프로토콜을 구현해야 합니다. 이 프로토콜들을 추가하지 않은 상태에서 delegate 속성에 self를 입력하면 오류가 발생하므로 주의하여야 합니다. 필요한 델리게이트 프로토콜은 다음 두 가지 입니다. 

※ UIImagePickerControllerDelegate 프로토콜

※ UINavigationControllerDelegate 프로토콜

이미지 피커 컨트롤러도 하나의 컨트롤러이기 때문에 이 컨트롤러를 실행한다는 것은 곧 화면을 이미지 피커 컨트롤러로 전환하는 것을 의미합니다. 이때 화면 전환 방식은 프레젠테이션 방식이 적합합니다. 이미지 피커 실행을 종료하고 원래의 화면으로 돌아올 때에도 마찬가지로 dismiss(animated:)메소드를 호출하는 방식으로 복귀하면 됩니다. 



7.2.2 이미지 피커 컨트롤러의 델리게이트 메소드
이미지 피커 컨트롤러가 호출하는 델리게이트 메소드는 크게 두 가지 입니다. 

※ imagePickerController(_:didFinishPickingMediaWithinfo:)

※ imagePickerControllerDidCancel(_:)


먼저 imagePickerController(_:didFinishPickingMediaWithInfo:)메소드는 이미지 피커 컨트롤러에서 이미지를 선택하거나 카메라 촬영을 완료했을 때 호출되는 메소드입니다. 만약 선택한 이미지에 대한 수정 옵션이 설정되어 있다면 이미지 수정 작업이 완료되었을 때 호출됩니다. 

이 메소드는 두 개의 인자값을 전달하는데 첫 번째 인자값은 이 메소드를 호출하는 이미지 피커 컨트롤러 객체입니다. 하나의 뷰 컨트롤러에서 두 개 이상의 이미지 피커 컨트롤러를 사용하고 있을 경우 첫번째 인자값을 이용하여 어느 이미지 피커 컨트롤러가 호출된 것인지 확인할수 있습니다. 두 번째 인자값은 우리가 원하는 이미지에 대한 데이터입니다. 단순히 선택한 이미지가 아닌, 이미지 객체에대한 종합 정보가 딕셔너리 형태로 전달되므로 전달받은 인자값에 적절한 키를 사용하면원하는 정보를 추출할 수 있습니다. 

대표적인 키와 그에 저장되는 값은 다음과 같습니다. 


※ UIImagePickerController.InfoKey.mediaType
전달받는 미디어 타입에 대한 정보입니다. 이 키에 저장되는 값에는 kUTTypeImage, kUTTypeMovie등의 타입이 사용됩니다. 

※ UIImagePickerController.InfoKey.originalImage
이미지 피커 컨트롤러에서 선택한 이미지에 대한 원본 이미지 데이터입니다. 이미지가 수정되었더라도 이 키를 이용하면 원본 데이터를 받을 수 있습니다. 

※ UIImagePickerController.InfoKey.editedImage
이미지가 수정된 경우 수정된 이미지를 전달합니다. 

※ UIImagePickerController.InfoKey.cropRect
이미지가 크롭(Crop, 사각형으로 잘라내는 것)된 경우 크롭된 이미지를 전달합니다. 

이어서 두 번째 델리게이트 메소드를 살펴봅시다. imagePickerControllerDidCancel(_:)는 이미지 피커 컨트롤러가 실행된 후 이미지 선택 없이 그냥 취소했을 때 호출되는 메소드입니다. 사용자가 이미지를 선택하지 않고 취소하는 경우를 감지하여 호출하죠. 물론 카메라를 실행했다가 촬영하지 않고 취소했을 때도 똑같이 호출됩니다. 




7.2.3 이미지 피커 컨트롤러 실습
실습을 통해 실제로 이미지 피커 컨트롤러를 사용해봅시다. 이번 실습에서는 이미지 피커 컨트롤러를 호출하여 실행하고, 여기에서 가져온 이미지를 화면에 출력하는 과정을 구현해 보겠습니다. 

[프로젝트 정보]
※ Product Name = Delegate-ImagePicker

※ Language : Swift

※ Device : iPhone

※ Use Core Data : 체크 해제

※ Template : Single View Application


STEP1 : Main.storyboard 파일을 열고 뷰 컨트롤러에 버튼과 이미지 뷰 (Image View)를 추가합니다. 

이미지 뷰는 화면상에 이미지를 표현할수 있도록 해주는 객체입니다. UIKit 프레임워크에 정의된 UIImageView 클래스를 기반으로 하죠. 이미지 뷰에표시될 이미지는 UIImage라는 클래스로 정의되는데 이미지 피커 컨트롤러로부터 전달받은 이미지를 여기에 표시할 계획입니다. 

이미지를 화면에 표현할 때에는 이미지 파일을 이용하여 UIImage 객체를 만들고 이를 다시 UIImageView에 넣어서 표현해 주어야 합니다. UIImage 객체 자체는 이미지를 화면에 출력하는 기능은 없기 때문입니다. 아래는 이 관계를 그림으로 보여주고 있습니다. 

이미지 뷰를뷰 컨트롤러에 처음 추가하면 위 그림과 같은 크기로 나타나지 않습니다. 이미지 뷰 각 지점에 표시되는 핸들을 사용하여 적당한 크기로 늘려주면 됩니다. 



STEP2 : 보조 에디터를 열고 버튼을 드래그하여 액션 메소드 pick(_:)을 이미지 뷰를 드래그하여 아울렛 변수 imgView를 각각 추가합니다. 

작성된 코드는 다음과 같습니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController, UITextFieldDelegate
{
       
    @IBOutlet var imgView: UIImageView!
    
    @IBAction func pick(_ sender: Any)
    {
        
    }
    
    
}



STEP3 : pick(_:)메소드에 이미지 피커 컨트롤러를 실행하는 코드를 작성합니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController, UITextFieldDelegate
{
       
    @IBOutlet var imgView: UIImageView!
    
    @IBAction func pick(_ sender: Any)
    {
        //이미지 피커 컨트롤러 인스턴스 생성
        let picker = UIImagePickerController()
        picker.sourceType = UIImagePickerController.SourceType.photoLibrary //이미지 소스로 사진 라이브러리 선택
        picker.allowsEditing = true //이미지 편집 기능 On
        
        //이미지 피커 컨트롤러 실행
        self.present(picker, animated: false)
    }
    
    
}

여기까지 작성이 끝났다면 중간 점검차 앱을 실행해 봅시다. 시뮬레이터를 실행해도 좋고 카메라를 테스트해보려면 직접 기기를 연결해도 됩니다. 예전에는 기기를 연결해서 테스트하기 위해 서는 애플에서 관련 인증서를 발급받고 테스트할 기기 정보를 등록했어야 했지만 지금은 컴퓨터에 케이블로 연결하기만 하면 별도의 인증서 없이도 아이폰에 앱을 설치하여 테스트할수 있습니다. 

아이폰을 케이블로 연결하면 Xcode에서는 이를 자동으로 인식하고 시뮬레이터 상단에 아이폰 기기 정보를 추가합니다. 기존 시뮬레이터 대신 이 정보를 선택해서 앱을 직접 설치하고 테스트 해 볼수 있습니다. 

혹시 실제 디바이스를 연결했을 때 앱이 실행되지 않거나 오류 메시지가 뜬다면 Xcode 설정이나 아이폰 설정을 통해 해결해야 합니다. 이에 대해서는 이 책의 전편인 [스위프트: 문법편]에서 설명하고 있으므로 이를 참고하기 바랍니다. 

시뮬레이터에서 앱을 실행한 경우라면 대부분 첫 화면은 아무 문제 없이 실행됩니다. 빈 화면에 버튼만 하나 추가되어 있는 모습으로요. 그런데 버튼을 눌러봅시다. 어쩌면 이미지 피커 컨트롤러가 뜨는 듯하다가 이내 오류가 발생하고 다음과 같은 메시지가 Xcode 콘솔에 출력될지도 모릅니다. 


이는 iOS 10이후로 강화된 프라이버시 규정 때문입니다. 과거에는 단순히 사용자에게 사진 앨범 ㅈ접속 여부를 묻고 확인받는 것만으로 사진 라이브러리에 대한 접근이 가능했지만 강화된 규정에서는 별도의 설정을 추가해 주어야 합니다. 앱 내부의 사적 공간에 접근하려고 하면 반드시 사전에 Info.plist에 관련 항목에 대한 접속 여부를 설정해야 합니다.


STEP4 : 프로젝트 내비게이터에서 Info.plist 파일을 찾아 클릭합니다. 아래 그림과 같이 다양한 설정 항목들이 나타납니다. 


STEP5 : Info.plist 파일에 나열된목록에 [Privacy - Photo Library usage Description]키를 추가하고 값은 YES로 입력합니다. 

항목을 추가할 때에는 원하는 항목 위치에 마우스를 가져가면 + 기호가 표시되는데 이를 클릭하면 됩니다. 빈 항목이 추가되면서 선택할수 있는 다양한 키 값들이 표시되는데 아래로 쭉 스크롤을 내리면 프라이버시 관련 규정 중에서 [Privacy - Photo Library Usage Description]키가 있습니다. 이것을 선택한 다음 값을 넣는 부분에는 YES로 입력해주면 됩니다. 추가된 결과는 다음과 같습니다. 

카메라를 다룰 때에도 마찬가지입니다. 카메라에 접근하기 위해서는 [Privacy - Camera Usage Description]키를 추가해주어야 합니다. 


사진 라이브러리 뿐만 아니라 음악, 위치 정보, 주소록 등 많은 사적 공간에 접근할 때에도 이와 마찬가지로 명시적인 접근 선언을 해주어야 합니다. Privacy - 로 시작하는 대부분의 키 값들이 이같은 사적 데이터 공간에 접근하기 위해 설정해야 하는 항목들입니다. 

이제 앱을 다시 실행하고 첫 화면의 버튼을 클릭하면 다음과 같은 화면이 표시됩니다. 앱이 사용자의 사진 라이브러리에 접근하려고 하는데 허용하겠냐는 질문입니다. 사진 라이브러리에 접속하기 위해서는 OK를 선택해야 합니다. 


동일한 앱을 지웠다가 다시 설치하거나 저장 데이터를 모두제거하기 전에는 이 값이 그대로 유지되기 때문에 두 번째 접속부터는 이같은 선택창 없이 바로 이미지 피커 컨트롤러를 실행할수 있습니다. 아래는 이미지 피커 컨트롤러가 실행된 모습입니다. 


이미지 피커 컨트롤러가 실행되면 사진 라이브러리에 있는 이미지들이 나열됩니다. 이중에서 원하는 사진을 고르면 편집 화면으로 이동하고, 여기서 간단한 편집을 거쳐 Choose 또는 Cancel 버튼을 누름으로써 이미지 피커 컨트롤러는 사라집니다. 원래의 화면으로 되돌아오는 거죠. 

하지만 아직 우리가 선택한 이미지가 이미지 뷰에 표시되지는 않습니다. 이는 델리게이트 메소드를 아직 구현하지 않았기 때문입니다. 선택한 이미지를 전달받아 화면에 표시할수 있도록 델리게이트 메소드를 구현해 보겠습니다. 



※ 델리게이트 메소드 구현
STEP1 : ViewController클래스에 UIImagePickerControllerDelegate, UINavigationControllerDelegate 프로토콜을 추가합니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate
{
   ...(중략)...    
}



STEP2 : pick(_:)메소드 내부에서 정의된 이미지 피커 컨트롤러 인스턴스의 delegate 속성값에 self를 대입합니다. 굵게 표시된 부분이 새로 추가된 코드입니다. 

ViewController.swift

@IBAction func pick(_ sender: Any)
    {
        //이미지 피커 컨트롤러 인스턴스 생성
        let picker = UIImagePickerController()
        picker.sourceType = UIImagePickerController.SourceType.photoLibrary
        //이미지 소스로 사진 라이브러리 선택
        picker.allowsEditing = true //이미지 편집 기능 On
        //추가된 부분) 델리게이트 지정
        picker.delegate = self
        //이미지 피커 컨트롤러 실행
        self.present(picker, animated: false)
    }



STEP3 : ViewController 클래스에 다음 두개의 메소드를 추가합니다. UIImagePickerControllerDelegate 프로토콜에 선언되어 있는 메소드이므로 자동 완성을 활용하면 편리합니다.

ViewController.swift

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate
{
   ...(중략)...
    
    //이미지 피커에서 이미지를 선택하지 않고 취소했을 때 호출되는 메소드
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController)
    {
                
    }
    //이미지 피커에서 이미지를 선택했을 때 호출되는 메소드
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any])
    {
                
    }
    
}


STEP4 : imagePickerControllerDid(_:) 메소드에 다음과 같이 취소 처리 코드를 작성합니다. 

ViewController.swift

//이미지 피커에서 이미지를 선택하지 않고 취소했을 때 호출되는 메소드
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController)
    {
        //이미지 피커 컨트롤러 창 닫기
        picker.dismiss(animated: false)
        //알림창 호출
        let alert = UIAlertController(title: "", message: "이미지 선택이 취소되었습니다.", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "확인", style: .cancel))
        self.present(alert, animated: false)
    }

이미지 피커 델리게이트 메소드에서 가장 먼저 처리해야 할 일은 현재의 이미지 피커 컨트롤러 창을 닫아주는 것입니다. 아직 창이 채 닫히기 전이라면 열려있는 창 때문에 원치 않는 문제가 생길수 있기 때문이죠. 델리게이트 메소드를 구현하지 않았을 때는 이미지 피커를 취소하거나 이미지를 선택하면 자동으로 해당 컨트롤러 창이 닫히지만 일단 델리게이트 메소드를 구현하게 되면 컨트롤러 창을 닫기 위한 dismiss(animated:)메소드를 직접 호출해 주어야 이미지 피커 창이 닫히고 원래의 뷰 컨트롤러로 돌아올 수 있습니다. 

그런데 dismiss(animated:)메소드를 호출하는 인스턴스가 좀 이상하지 않나요? picker잖아요. 앞에서 우리는 dismiss(animated:0메소드를 호출하는 대상은 반드시 프레젠테이션 방식으로 자신을 노출시켜준 뷰 컨트롤러여야만 한다고 배웠습니다. 그러니 원래대로라면 이 구문은 다음과같이 작성되어야 맞습니다. 
picker.presentingViewController?dismiss(animated:false)

또는 어차피 picker.presentingViewController가가리키는 대상은 현재의 자기 자신이므로 picker.presentingViewController 대신 다음과 같이 self 를 사용해도 무방합니다. 

self.dismiss(animated:false)

이런 표현들을 모두 두고 굳이 picker 인스턴스에서 메소드를 호출한 것은 내부적으로 알아서 self.presentingViewController 쪽으로 연결시켜주기 때문입니다. 

즉 picker.dismiss(animated:)메소드가 호출되면 가장 먼저 자신이 치워야 할 뷰 컨트롤러가 있는지 확인합니다. 만약 자신의 위에 다른 화면이 덮고 있다면 그것을 치우지만 아무 화면도 없다면 이는 잘못된 요청으로 간주하고 self.presentingViewController에 해당하는 객체에 이 요청을 전달합니다. 그러면 presentingViewController 객체는 이를 받아 실행하게 되겠죠. 이런 특성 덕분에 위 예제와 같은 표현이 가능한 것입니다. 

일단 창을 닫아주고 나면 그다음에 할일은 취소 처리한 데에 대한 안내입니다. 여기에서는 간단히 알림창만 띄워주고 있군요. 

그런데 이미지 피커 컨트롤러와 알림창은 모두 ViewController에서 실행하는 컨트롤러입니다. 그러다 보니 화면에 표시되기 위해 서로 경합을 할수밖에 없는데 만약 이미지 피커 컨트롤러가 조금늦게 닫히고 그동안 알림창 구문이 호출될 경우 알림창이 실행되지 않는 버그가 생길수 있습니다. 미묘한 타이밍 차이에 따른 문제죠. 이를 해결하기위해서는 dismiss(animated:complete:)메소드를 사용하여 이미지 피커 컨트롤러 창이 완전히 닫힌 후에 다음 로직을 실행할수 있도록 수정해 주어야합니다. 

picker.dismiss(animated: false){ () in
            //알림창 호출
            let alert = UIAlertController(title: "", message: "이미지 선택이 취소되었습니다.", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "확인", style: .cancel))
            self.present(alert, animated: false)
        }


STEP5 : imagePickerController(_:didFinishPickingMediaWithInfo:)메소드에도 다음과 같이 코드를 추가합니다. 

ViewController.swift

//이미지 피커에서 이미지를 선택했을 때 호출되는 메소드
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any])
    {
        //이미지 피커 컨트롤러 창닫기
        picker.dismiss(animated: false){ () in
            //이미지를 이미지 뷰에 표시
            let img = info[UIImagePickerController.InfoKey.editedImage] as? UIImage
            self.imgView.image = img
        }
    }

이미지를 올바르게 선택했을 때 호출되는 이 메소드에서도 맨 처음 해주어야 하는 일은 명확합니다. 이미지 피커 컨트롤러 창을 닫아주는 것이죠. 우선 창을 닫고 나서 우리가 원하는 로직을 차례로 구현하면 됩니다. 이때에도 창이 완전히 닫힌 후 나머지 로직을 실행할수 있도록 dismiss(animated:completion:)메소드를 사용하고 있습니다. 비록 트레일링 클로저 문법에 의해 마지막 매개변수인 completion:은 자취를 감췄지만 말입니다. 

이 메소드에서 처리할 핵심 내용은 사용자가 선택한 이미지를 화면에 뿌려주는 겁니다. 딕셔너리 타입으로 정의된 매개변수 info에는 사용자가 선택한 이미지 정보가 담겨서 전달되기 때문에 앞에서 살펴본 이미지 관련 키를 사용해서 원하는 이미지 정보를 추출할수 있습니다. 위 예제에서 사용하고 있는 것은 편집된 이미지 데이터입니다. 이를 위해 UIImagePickerController EditedImage 상수값이 사용되었습니다. 

읽어온 값은 이미지 데이터를 담고 있지만 아직 범용 객체인 Any 타입입니다. 따라서 UIImage 타입으로 캐스팅한 다음에야 이미지 객체로 활용할수 있는 상태가 됩니다. 이렇게 추출된 이미지 정보를 이미지 뷰의 .image 속성에 대입하면 처리 과정은 끝입니다. 사용자가 선택한 이미지 정보가 화면에 표시되는 거죠. 

작성한 코드를 실행하면 다음과 같은 순서대로 화면이 나타납니다. 가장 마지막 화면은 선택한 이미지가 화면에 표시된 모습입니다. 


여기까지 작성한 전체 코드는 다음과 같습니다. 아마 여러분의 Xcode에는 viewDidLoad() 메소드가 추가되어 있을 테지만 이번 실습에서 사용하지 않으므로 제외하였습니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate
{
   
    @IBOutlet var imgView: UIImageView!
    
    
    
    @IBAction func pick(_ sender: Any)
    {
        //이미지 피커 컨트롤러 인스턴스 생성
        let picker = UIImagePickerController()
        picker.sourceType = UIImagePickerController.SourceType.photoLibrary
        //이미지 소스로 사진 라이브러리 선택
        picker.allowsEditing = true //이미지 편집 기능 On
        //추가된 부분) 델리게이트 지정
        picker.delegate = self
        //이미지 피커 컨트롤러 실행
        self.present(picker, animated: false)
    }
    
    //이미지 피커에서 이미지를 선택하지 않고 취소했을 때 호출되는 메소드
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController)
    {
        //이미지 피커 컨트롤러 창 닫기
        picker.dismiss(animated: false){ () in
            //알림창 호출
            let alert = UIAlertController(title: "", message: "이미지 선택이 취소되었습니다.", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "확인", style: .cancel))
            self.present(alert, animated: false)
        }
        
    }
    //이미지 피커에서 이미지를 선택했을 때 호출되는 메소드
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any])
    {
        //이미지 피커 컨트롤러 창닫기
        picker.dismiss(animated: false){ () in
            //이미지를 이미지 뷰에 표시
            let img = info[UIImagePickerController.InfoKey.editedImage] as? UIImage
            self.imgView.image = img
        }
    }
    
}