세그웨이를 실행할수 있는 객체의 타입은 뷰 컨트롤러부터 버튼, 테이블 셀 등 매우 다양합니다. 때문에 이들을 포괄적으로 처리할수 있도록 sender 변수는 옵셔널 Any 타입으로 정의됩니다. 이 타입은 클래스뿐만 아니라 구조체, 메소드, 함수 등 스위프트에서 제공하는 모든 객체를 담을수 있는 최고의 범용 타입입니다. 단 다른 곳에 사용하기 위해서는 sender 인자값을 반드시 적절한 객체로 캐스팅해야 합니다. 

다시 실습 과정으로 돌아가 prepare(for:sender:) 메소드에 작성된 코드를 살펴보겠습니다. 그런데 코드가 좀 보기 어렵죠? 사실 예제에서 작성된 코드는 여러 행으로 나누어 작성할 코드들이 축약되어 있습니다. 알아보기 쉽도록 여러 행으로 나누어 다시 작성해 봅시다. 

ListViewController.swift

//MARK: - 화면 전환시 값을 넘겨주기 위한 세그웨이 관련 처리
extension ListViewController
{
	override func prepare(for segue: UIStoryboardSegue, sender : Any?)
	{
		//실행된 세그웨이의 식별자가 "segue_detail"이라면
		if.segue.identifier == "segue_detail"
		{
			//sender 인자를 캐스팅하여 테이블 셀 객체로 변환한다. 
			let cell = sender as! MovieCell
			
			//사용자가 클릭한 행을 찾아낸다.
			let path = self.tableView.indexPath(for: cell)
			
			//API 영화 데이터 배열 중에서 선택된 행에 대한 데이터를 추출한다.
			let movieInfo = self.list[path!.row]

			//행 정보를 통해 선택된 영화 데이터를 찾은 다음 목적지 뷰 컨트롤러의 mvo 변수에 대입한다. 
			let detailVC = segue.destination as? DetailViewController
			detailVC?.mvo = movieInfo
		}
	}
}

조금 더 알아보기 쉬워졌을 겁니다. 차례로 하나씩 확인해 봅시다. 
//실행된 세그웨이의 식별자가 "segue_detail"이라면
if.segue.identifier == "segue_detail"

맨 처음에 작성된 것은 조건절로서 식별값을 비교하여 원하는 세그웨이만 걸러낼수 있도록 처리하는 구문입니다. 비교값으로 사용된 segue_detatil은 우리가 조금 전 연결해둔 세그웨이의 식별자에 해당하죠. 지금은 영화 차트 목록에 연결된 세그웨이가 하나 뿐이지만 혹시라도 추가될지도 모르는 세그웨이들을 생각해 본다면 미리 식별자를 비교하여 원하는 세그웨이에서만 로직을 수행하도록 구현해 두는 것이 좋습니다. 이제 다음 코드를 봅시다. 
//sender 인자를 캐스팅하여 테이블 셀 객체로 변환한다. 
let cell = sender as! MovieCell

인자값으로 전달된 sender 매개변수를 MovieCell 타입으로 캐스팅하는 부분입니다. 우리가 연결한 세그웨이는 트리거 세그웨이로 사용자의 테이블 뷰 셀 클릭 액션에서 실행이 시작됩니다. 따라서 sender 에 저장되는 값도 테이블 뷰 셀 객체의 참조정보입니다. 이것을 MovieCell 객체 타입으로 캐스팅한후에 cell 상수에 담아 놓습니다. 

주의할 점은 사용자가 다른 셀을 선택할 경우 sender 매개변수에 담기는 객체가 비록 타입은 같을지라도 동일한 객체는 아니라는 점입니다. 테이블 뷰는 개별 셀 객체들로 이루어져 있으므로 sender 에 담기는 셀 객체의 정보는 사용자가 선택한 개별 셀에 대한 정보라는 것을 명심해야 합니다. 

//사용자가 클릭한 행을 찾아낸다.
let path = self.tableView.indexPath(for: cell)

사용자가 어느 행을 선택했는지 찾아내는 구문입니다. 우리는 sender 매개변수를 캐스팅하여 셀 정보를 추출했지만 셀 자체에 대한 정보만 있을 뿐 이 셀이 테이블 뷰에서 몇 번째 셀인지에 대한 정보는 여기에 포함되어 있지 않습니다. 사실 우리에게 필요한 것은 선택된 셀 자체보다는 선택된 셀에 대응되는 개별 영화 정보이고,  이 값을 얻으려면 이 셀이 테이블 뷰 전체에서 몇번째 셀인지를 알아야 합니다. 

이를 위한 메소드가 indexPath(for:)입니다. 이 메소드는 인자값으로 전달된 셀 객체가 테이블 뷰에서 몇 번째 행에 해앙하는지에 대한 정보를 IndexPath 객체 형태로 반환합니다. 이렇게 하여 행 정보를 얻어내었다면 이값을 영화 배열의 인덱스 값으로 사용하여 사용자가 선택한 영화 정보를 찾아내어야 하는데 이 과정을 처리하는 것이 이어지는 다음 구문입니다. 

//API 영화 데이터 배열 중에서 선택된 행에 대한 데이터를 추출한다.
let movieInfo = self.list[path!.row]

행 번호를 인덱스로 하여 list 배열에서 값을 추출한 후 이 값을 movieInfo에 대입합니다. 이제 남은 것은 이 값을 상세 페이지로 넘겨주는 것 뿐입니다. 다음은 그 역할을 하는 마지막 코드입니다. 

//행 정보를 통해 선택된 영화 데이터를 찾은 다음 목적지 뷰 컨트롤러의 mvo 변수에 대입한다. 
let detailVC = segue.destination as? DetailViewController
detailVC?.mvo = movieInfo

상세 페이지로 값을 전달하는 이 번 로직의 핵심 부분입니다. 몇 개의 서브 코드로 나누어져 있으니 차례대로 잘 살펴봅시다. 


let detailVC = segue.destination as? DetailViewController

segue.destination은 세그웨이의 목적지에 해당하는 뷰 컨트롤러 객체를 참조하는 속성입니다. 여기서는 DetailViewController 클래스가 되겠죠. 세그웨이는 우리가 임의로 뷰 컨트롤러의 인스턴스를 직접 생성했더라도 이것을 사용하지 않고 이동할 뷰 컨트롤러의 인스턴스를 스스로 생성합니다. 이 때문에 세그웨이를 통해 화면을 이동할 때에는 반드시 세그웨이 객체를 통해서만 뷰 컨트롤러의 인스턴스를 참조해야 합니다. 우리가 직접 뷰 컨트롤러의 인스턴스를 생성하고 값을 전달하는 코드를 작성했더라도 실제로 화면을 이동해 보면 값이 들어있지 않습니다. 우리가 생성한 뷰 컨트롤러와 세그웨이가 생성한 뷰 컨트롤러는 서로 다른 인스턴스이기 때문입니다. 


그런데 segue.destination 속성을 이용하여 읽어온 뷰 컨트롤러 인스턴스의 타입은 UIViewController 입니다. 이 객체에는 우리가 전달하는 값을 받아줄 mvo 변수가 정의되어 있지 않으므로 우리는 변수가 정의된 DetailViewController 객체로 타입을 캐스팅해야 합니다. 

DetailViewController 타입의 인스턴스를 얻었으므로 이제 mvo 변수를 호출하고 값을 대입할수 있습니다. 

detailVC?.mvo = movieInfo

상세 페이지에 해당하는 detailVC의 mvo 프로퍼티에 movieInfo 값을 할당하고 나면 값 전달이 끝납니다. 이제부터는 세그웨이가 실행되기 전에 항상 prepare(for:sender:)메소드가 호출되면서 값이 전달될 테니 이 값을 이용하여 상세 화면을 구성하기만 하면 됩니다. 


STEP10 : DetailViewController 클래스로 돌아가 viewDidLoad 메소드를 추가하고 mvo 프로퍼티에 대한 로그를 출력하여 전달받은 값을 확인합니다. 이미  viewDidLoad 메소드가 추가되어 있다면 새로 추가할 필요는 없습니다. 

DetailViewController.swift

override func viewDidLoad()
{
	NSLog("linkurl = \(self.mvo.detail!), title=\(self.mvo.title!)")
}

로그 출력은 실제 프로그램 진행 과정과 전혀 상관없이 단순히 확인하는 역할일 뿐입니다. 하지만 로그를 출력해 봄으로써 정말로 값이 전달되었을까? 혹시나 빈 값인건 아니겠지?하는 불안감을 제거하고 확실하게 작업할수 있습니다. 혹여 정말 값이 제대로 전달되지 않았다면 빠르게 확인하여 다시 수정해볼 수도 있고 말입니다. 아래는 로그가 출력된 모습입니다. 



STEP11 : 전달된 값을 이용하여 내비게이션 바의 타이틀에 영화명을 출력합니다. 

DetailViewController.swift

override func viewDidLoad()
{
	NSLog("linkurl = \(self.mvo.detail!), title = \(self.mvo.title!)")

	//내비게이션 바의 타이틀에 영화명을 출력한다.
	let navibar = self.navigationItem
	navibar.title = self.mvo.title
}

내비게이션 아이템이 추가되어 있을 경우, self.navigationItem 속성을 통해 접근할수 있습니다. 내비게이션 바의 타이틀을 제어하려면 self.navigationItem.title 속성을 사용하면 되죠. 이 속성에다 영화 제목 데이터를 대입하면 다음과 같이 내비게이션 타이틀이 동적으로 변경됩니다. 


STEP12 : load() 메소드 호출을 위해 URLRequest 인스턴스를 생성합니다. 

DetailViewController.swift

override func viewDidLoad()
{
	...(중략)...
	navibar.title = self.mvo.title

	//URLRequest 인스턴스를 생성한다.
	let url = URL(string: (self.mvo.detail)!)
	let req = URLRequest(url: url!)
}

URLRequest 인스턴스 생성을 위해서는 URL 객체의 인스턴스를 먼저 생성해야 하는데 이때 인자값으로는 외부 URL을 넣어주어야 합니다. 이번 실습에서는 영화 정보 데이터에 포함되어 있는 detail 값이 이에 해당하죠. 따라서 이 값을 인자값으로 하여 URL 인스턴스를 생성합니다. 이후 생성된 URL 인스턴스를 인자값으로 하여 URLRequest 인스턴스를 생성하면 됩니다. 


STEP13 : 생성된 URLRequest 인스턴스를 인자값으로 하여 load() 메소드를 호출합니다. 

DetailViewController.swift

override func viewDidLoad()
{
	...(중략)...
	//URLRequest 객체를 생성한다.
	let url = URL(string : (self.mvo.detail)!)
	let req = URLRequest(url: url!)

	//loadRequest 메소드를 호출하면서 req를 인자값으로 전달한다.
	self.wv.load(req)
}

마지막 과정입니다. URLRequest 인스턴스를 이용하여 load() 메소드를 호출합니다. 이에 따라 웹킷 뷰 객체에 정의된 load()메소드가 실행되면 비로소 웹 뷰에 웹 페이지가 로드되면서 우리가 기대하는 것처럼 화면에 HTML 페이지가 출력됩니다. 

이제 앱을 빌드하여 실행해 봅시다. 실행된 화면은 다음과 같습니다. 

상세 페이지 구현이 끝났습니다. 이것저것 할 일이 많았던 준비 과정과는 달리, 실제로 웹킷 뷰와 관련하여 코드 처리하는 부분은 싱거울 정도로 짧습니다. 그나마도 내비게이션 타이틀 처리를 하지 않았다면 두 줄로 끝났을 테죠. 

그런데 말입니다. 별 문제없이돌아간다고는 하지만 우리가 작성한 코드가 완전한 것은 아닙니다. 코드를 작성할 때에는 잘 동작하도록 구현하는 것 만큼이나 오류가 발생할 경우를 처리하는 것도 중요한데, 아직 그 처리를 해주지는 않았기 때문입니다. 특히 스위프트에서는 곳곳에서 옵셔널 타입이 사용되므로 적재적소에서 nil 체크를 해주어야 합니다. 

가령 네트워크 연결에 문제가 있어서 API를 호출하지 못하거나 호출했어도 서버에 문제가 있어 응답 데이터를 받지 못하는 경우 애초부터 잘못된 URL이 입력되는 경우 등 많은 상황에서 nil이 발생할수 있습니다. 하지만 우리가 작성한 예제에서는 옵셔널 타입을 사용하는 모든경우의 값이 정상일 것으로 가정하고 nil 체크를 모두 생략했죠. 만일 발생할수 있는 모든 예외에 빠짐없이 대응하려면 코드가 훨씬 길어져서 지금 작성했던 코드의 8~9배 이상 늘어날수도 있습니다. 

그러나 필자는 실습과정에서 예외처리 코드가 길어지는 것을 좋아하지 않습니다. 이건 여러분도 마찬가지일 겁니다. 실질적으로 로직을 구현하는 코드보다 예외처리 코드가 훨씬 더 길다면 그만큼 시간이 소모될 뿐만 아니라 자칫 본질적인 부분을 놓칠수 있기 때문입니다. 그러니 지금은 단지 여러분이 실제로 필요한 코드에 집중할수 있었으면 좋겠습니다. 

물론 실전에서는 반드시 예외 처리를 해줘야 합니ㅏㄷ. 꼼꼼하게 점검하여 오류가 발생하지 않도록 만드는 것은 물론이거니와 오류가 발생했을 떄 그에대한 적절한 반응과 대처를 해줄수 있어야 좋은 프로그래머라고 할 수 있습니다. 

다음은 DetailViewController 클래스에 예외 처리를 추가해 본 것입니다. 이를 통해 여러분이 실제로 서비스할 코드를 작성할 때 어떤 식으로 예외를 처리해야 할지 감을 잡아보기 바랍니다. 

