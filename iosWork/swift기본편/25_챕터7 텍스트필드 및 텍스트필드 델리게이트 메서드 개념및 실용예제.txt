7.1 텍스트 필드
텍스트 필드는 델리게이트 패턴을 사용하는 대표적인 객체 중의 하나입니다. 앞 장에서 뷰 컨트롤러끼리 값을 주고받을 때 사용해 본적이 있죠. 기본적인 기능은 델리게이트 패턴 없이도 사용할수 있지만 입력값을 제어하는 등의 고급 기능을 구현하고 싶을 때에는 델리게이트 패턴을 적용해야 합니다. 특정 문자열의 입력 배제, 입력가능한 문자열 길이 제한 등이 델리게이트 패턴을 통해 처리할수 있는 대표적인 사례죠. 

텍스트 필드에 델리게이트 패턴을 적용하려면 다음과 같은 두 가지 작업이 필요합니다. 

1. 텍스트 필드에 대한 델리게이트 프로토콜을 구현한다. 

2. 텍스트 필드의 델리게이트 속성을 뷰컨트롤러에 연결한다. 

첫번째 작업은 프로토콜 구현에 관련된 것입니다. 델리게이트 패턴을 구현하려면 모든 객체는 그에 맞는 델리게이트 프로토콜을 구현해야 하는데 이때 프로토콜의 이름은 항상 해당 객체의 클래스명 + Delegate로 이루어집니다. 텍스트 필드의 클래스명이 UITextField이므로 델리게이트 프로토콜은 UITextFieldDelegate가 되는 식이죠. 

델리게이트 프로토콜을 구현한다는 것은 클래스 이름 정의 뒤에 프로토콜명을 덧붙이는 것만을 의미하지는 않습니다. 프로토콜에 정의된 메소드를 실질적으로 작성하는 것까지를 포함합니다. @Optional 키워드가 붙은 메소드는 필요한 것만 선택적으로 구현해도 되지만 이외의 메소드는 모두 반드시 구현해 주어야 합니다. 

델리게이트 프로토콜을 구현하고 나면 이어지는 작업은 해당 객체의 델리게이트 속성을 뷰 컨트롤러와 연결하는 것입니다. 이때 델리게이트 속성이란 델리게이트 메소드가 구현되어 있는 객체를 의미합니다. 특정 이벤트가 발생했을 경우 텍스트 필드는 이를 알려주기 위해 델리게이트 메소드가 구현되어 있는 객체를 찾게 되는데 이를 위한 참조 포인터가 저장되는 곳이 delegate 속성입니다. 텍스트필드의 delegate 속성에 저장된 인스턴스가 델리게이트 메소드를 구현한 것으로 인식하고 필요한 메소드를 호출하는 거죠. 

이후로는 텍스트 필드를 원래대로 사용하기만 하면 됩니다. 텍스트 필드에서 미리 지정된 시점이 되면 delegate 속성에 정의된 인스턴스를 찾아 델리게이트 메소드를 호출할 것이고, 델리게이트 메소드에 미리 정의해둔 내용이 알아서 실행될 테니까요. 

앞에서도 텍스트 필드에 대해 다루어본적이 있지만 기왕 이야기가 나왔으니 이 컨트롤에 대해 조금 더 자세히 알아봅시다. 



7.1.1 텍스트 필드의 특성
텍스트 필드는 불특정 값을 입력할수 있도록 제공하는 사각형의 직사각형 컨트롤입니다. 기본 적으로 텍스트 필드가 추가되면 다음 그림과같이 모서리가 둥근 직사각형 형태의 입력폼이 화면에 추가되죠. 

이 형태를 그대로 두어도 사용하는 데에 문제는 없지만 뭔가 수정을 가하고 싶다면 몇 가지 항목을 수정하여 꽤 다른 모습으로 바꿀 수 있습니다. 대표적인 것이 테두리 스타일입니다. 어트리뷰트 인스펙터 탭의 [Border Style]항목에서 찾을 수 있는 이 속성은 주어진 텍스트 필드의 테두리 스타일을 바꾸어 주는 역할을 합니다. 

제공되는 테두리 스타일은 모두 네 가지입니다. 각각의 속성은 모두 UITextField.BorderStyle객체의 아이템으로 정의되어 있으며 각각 다음과 같은 형태의 텍스트 필드를 만들어 줍니다. 

UITextField.BorderStyle.none
UITextField.BorderStyle.line
UITextField.BorderStyle.bezel
UITextField.BorderStyle.roundedRect

이 중에서 특히 UITextField.BorderStyle.none은 테두리가 없는 스타일의 입력폼으로 주변 배경과 어울려 자연스러운 입력폼을 구성하기 위한 용도로 사용됩니다. 다음 그림은 이 스타일을 적용하여 입력폼의 경계를 보이지 않게 처리한 예입니다. 

텍스트 필드의 테두리 스타일은 다음과 같이 프로그래밍 방식으로도 설정할수 있습니다. 

let tf = UITextField()
tf.BorderStyle = UITextField.BorderStyle.roundedRect

첫 줄에 사용된 객체 생성 구문은 임의로 작성한 것으로 텍스트필드에 대한 아울렛 변수가 정의되어 있을 때에는 작성하지 않아도 되는 부분이며 설명하는 내용과는 무관합니다. 


질문!! 입력폼 안에 있는 X 버튼은 어떻게 하면 만들어지는 거예요?
텍스트 필드는 입력된 내용을 지우기 편리하도록 클리어 버튼을 지원합니다. 추가하는 방법은 간단합니다. 어트리뷰트 인스펙터 탭에서 [Border Style]항목 아래를 보면 [Clear Button] 항목이 있는데 이 항목의 값을 적당히 선택해 주면 되죠. 

이 항목에서 선택할수 있는 값은 모두 네 가지입니다. 
Never appears : 표시하지 않음
Appears while editing : 편집하는 동안에만 표시
Appears unless editing : 편집하지 않은 동안 표시
Is always visible : 항상 표시


종종 텍스트필드에 작성된 내용을 수정하기 위해 클릭하는 순간 기존에 있던 내용이 모두 지워지는 것을 볼 수 있는데, 이같은 기능을 적용하려면 [Clear Button]항목 아래의 [Clear whenediting begins]에 체크해주면 됩니다. 편집을 시작할 때 항상 텍스트 필드의 내용을 클리어해주죠. 

이외에도 텍스트 필드는 입력값의 형식을 제어할수 있는 몇 가지 속성을 가지고 있습니다. 이들 속성을 사용하면 첫 글자에 대한 대문자 지정, 자동완성, 키보드에 들어가는 리턴 키의 타이틀 등을 제어할수 있습니다. 인터페이스 빌더 상에서는 이들 속성이 다음과 같이 표시됩니다. 차례로 살펴봅시다. 



※ Capitalization
알파벳 문자열 입력 시 첫 글자를 자동으로 대문자 처리하는 기능입니다. 선택 가능한 값은 아래 네 가지 입니다. 
None : 대문자로 변환하지 않습니다.
Words : 각 단어의 첫글자를 대문자로 설정
Sentences : 문장에서의 첫 글자만 대문자로 설정
All Characters : 전체 입력 문자를 모두 대문자로 설정

선택 가능한 네 가지 값들은 모두 UITextAutocapitalizationType 열거형으로 정의되어 있으며 위 항목을 프로그래밍 방식으로 구현한 코드는 다음과 같습니다. 

tf.autocapitalizationType = UITextAutocapitalizationType.sentences 



※ Correction
입력된 문자열을 바탕으로 이어질 입력값을 추측하고 가장 가능성이 큰 문자열을 추천하거나 자동으로 변환해 주는 자동 입력 기능입니다. 한글도 지원되지만 생각보다 엉뚱한 문자열로 바꾸어 버리는 경우가 많아 한글을 사용하는 거의 대부분의 앱에서는 이 기능을 사용하지 않습니다. 
선택 가능한 값은 yes, no 둘뿐이지만 Bool 타입의 값이 아닌 UITextAutocorrectionType 타입을 사용해서 값을 대입해야 합니다. 항목을 프로그래밍 코드로 구현하면 다음과 같습니다. 

tf.autocorrectionType = UITextAutocorrectionType.no



※ Spell Checking
내장된 사전을 바탕으로 입력된 단어의 철자를 비교하고 잘못 입력되었을 경우 이를 알려주거나 바로잡는 역할을 합니다. 이 속성은 UITextSpellCheckingType 타입의 값을 입력받으며, 다음과 같은 구문을 통해 프로그래밍 코드로 구현할수 있습니다. 

tf.spellCheckingType = UITextSpellCheckingType.no


※ Keyboard Type
앞에서 잠깐 설명한 바 있는 옵션으로 가상 키보드의 종류를 지정합니다. 단순히 숫자만 입력하거나 URL, 이메일 주소 등으로 입력하는 값의 타입이 명확할 때에는 그에 맞는 키보드를 지정해주면 입력 시 여러 키보드를 전환하지 않아도 되므로 편리합니다. 이 속성은 UIKeyboardType타입의 값을 입력받으며 프로그래밍 코드로 구현하면 다음과 같습니다.

tf.keyboardType = UIKeyboardType.emailAddress



※ Appearence
가상 키보드의 색상 테마를 지정하는 기능입니다. Dark/Light 두 가지가 현재 제공되며 아래 그림은 각각 이들 테마를 적용해 본 모습입니다. 

이 속성은 UIKeyboardAppearance 열거형 타입의 객체를 입력받으며 다음과 같은 코드를 사용해서도 구현할수 있습니다. 
tf.keyboardAppearance = UIKeyboardAppearance.dark




※ Return Key
iOS 가상 키보드에 나타나는 리턴 키의 스타일을 설정하는 기능입니다. 여러 가지 기본 스타일 중에서 선택할수 있으며 선택한 스타일에 맞게 가상 키보드의 리턴 키가 구성됩니다. 아래 그림은 Return Key 항목이 Join타입으로 선택되었을 경우의 리턴키 모습에 해당합니다. 

이 속성은 UIReturnKeyType 열거형 타입의 값을 입력받으며 프로그래밍 코드로 구현할 때에는 다음과 같은 구문이 사용됩니다. 

tf.returnKeyType = UIReturnKeyType.join



※ Auto-enable Return Key
이 항목을 체크하면 텍스트 필드에 아무 값도 입력되지 않았을 때에는 리턴키가 비활성화되어 있다가 값을 입력하는 순간 활성화됩니다. 다시 값을 지우면 리턴 키도 비활성화되죠. 이 속성은 열거형 타입을 사용하지 않으며 Bool 타입의 값을 이용하여 설정됩니다. 

tf.enableReturnKeyAutomatically = true



※ Secure Text Entry
비밀번호 입력처럼 ***로 표시할 필요가 있을 때 설정하는 항목입니다. 이 속성 역시 열거형을 사용하지 않으며 Bool 타입의 값으로 설정됩니다.

tf.isSecureTextEntry = true



이외에도 텍스트 필드에는 많은 속성을 설정할수 있으며 특히 인터페이스 빌더에서 지원하지 않는 속성들은 프로그래밍 방식을 통해 구현할수 있기도 합니다. 다음은 앞에서 살펴본 텍스트 필드의 주요 속성 및 스타일을 프로그래밍 방식으로 구현한예제 구문입니다. 

let tf = UITextField()

tf.text = "Sample" //기본값
tf.autocapitalizationType = UITextAutocapitalizationType.sentences // 대문자 변환
tf.autocorrectionType = UITextAutocorrectionType.no //자동 완성
tf.spellCheckingType = UITextSpellCheckingType.no //틀린 문자열 체크
tf.keyboardType = UIKeyboardType.numberPad // 키보드 타입
tf.keyboardAppearance = UIKeyboardAppearance.dark //키보드 외형
tf.returnKeyType = UIReturnKeyType.join //리턴키 타입
tf.enablesReturnKeyAutomatically = true //리턴키 자동 활성화
tf.isSecureTextEntry = true // 비밀번호 포맷
tf.clearButtonMode = UITextField.ViewMode.always // 내부에 클리어 버튼 표시
tf.clearOnBeginEditing = true // 편집 시작시 기존 내용 삭제

//스타일 설정

//테두리 스타일
tf.borderStyle = UITextField.BorderStyle.line

//테두리 색상
tf.layer.borderColor = UIColor.gray.cgColor

//테두리 두께
tf.layer.borderWidth = 1.0

//수직 방향 텍스트 배열 위치
tf.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center






※ 최초 응답자(First Responder)
iOS에서 모바일 기기의 디스플레이에 앱의 콘텐츠를 표현하기 위해 사용하는 UIWindow 객체는 사용자 인터페이스 구조에서 사용자에 가장 가까이 위치한 객체로 사용자로부터 발생하는 터치 관련 이벤트를 내부 객체로 전달하는 역할을 담당합니다. 이를 위해 UIWindow는 이벤트가 발생했을 때 우선적으로 응답할 객체를 가리키는 최초 응답자(First Responder)라는 포인터를 가지고 있습니다. 

사용자가 화면에서 텍스트 필드를 터치하면 윈도우는 최초 응답자 포인터를 해당 텍스트 필드로 옮겨줍니다. 그러면 모바일 기기에서 발생하는 모션 이벤트는 모두 최초 응답자 포인터에 연결된 객체로 전달됩니다. 여기서 말하는 모션 이벤트란 터치나 드래그, 스와이프 등 손가락의 움직임으로 발생하는 각종 제스처를 말합니다. 

텍스트 필드나 텍스트 뷰가 최초 응답자 객체가 되면 iOS에서 제공하는 가상 키보드가 화면에 나타나 입력을 할수 있는 상태가 됩니다. 만약 이들 객체가 최초 응답자 상태를 읽게 되면 키보드는 다시 사라집니다. 웹이나 윈도우 프로그래밍을 해본 사람이라면 포커스(Focus)라는 개념에 익숙할 텐데요. 최초 응답자와포커스가 서로 비슷한 개념이라고 생각하면 됩니다. 

특정 객체를 최초 응답자로 만들고 싶다면 그 객체에 대한 becomeFirstResponder() 메소드를 호출하면 됩니다. 이 메소드는 UIResponder 클래스에 정의되어 있는데 이 클래스를 상속받은 객체들은 모두 becomeFirstResponder() 메소드를 호출하여 최초 응답자 객체가 될수 있습니다. 

대부분의 뷰들은 최초 응답자가 되길 거부합니다. 현재 선택된 텍스트 필드나 텍스트 뷰에서 포커스를 빼앗고 싶어하지 않는 거죠. 뷰를 상속받은 하나의 객체인 USSlider 객체는 터치 이벤트를 입력받아 처리하지만 최초 응답자 상태를 허용하지 않습니다. 

화면에 키보드가 표시된 상태에서 다른 요소를 건드려도 키보드가 사라지지 않는 것은 이 때문입니다. 다른 요소를 터치하더라도 그 객체가 UIResponder를 상속받지 않았다면 터치 이벤트만 발생할 뿐 최초 응답자 포인터는 텍스트 필드를 그대로 가리키기 때문이죠. 

해당 객체로부터 최초 응답자 상태를 해제하고 싶을 때에는 resignFirstResponder() 메소드를 호출하면 됩니다. 만약 텍스트 필드에 포커스가 있는 상태였다면 이 메소드를 호출함으로써 텍스트 필드의 포커스가 제거되고 이에 따라 화면에서 키보드가 사라집니다. 텍스트 필드에서 깜빡거리던 커서도 함께 사라지고요. 이 메소드 역시 UIResponse 클래스에 정의되어 있습니다. 

텍스트 필드를 최초 응답자 객체로 만들고 다시 해제하는 구문은 다음과 같습니다. 

let tf = UITextField()

//최초 응답자 객체로 지정한다. 키보드가 나타나고 입력 상태가 된다. 
tf.becomeFirstResponder()

...(필요한 코드 삽입)...

//입력이 완료 ㄷ되면 최초 응답자 객체를 해제한다. 키보드가 사라진다
tf.resignFirstResponder()

참고로 지금은 텍스트 필드에 대한 인스턴스를 UITextField()로 직접 생성했지만 조금 뒤 여러분이 실습하는 과정에서는 인스턴스를 직접 생성하는 대신 아울렛 변수를 사용하게 됩니다.  텍스트 필드를 직접 생성하는 방식은 위에서 작성된 구문뿐만 아니라 추가로 작성해 주어야 하는 항목들도 많아 조금 더 복잡합니다. 



질문!!! becomeFirstResponder() 메소드를 사용해야 하는 이유는 무엇인가요? 그러니까... 그냥 손으로 터치하면 최초 응답자 객체가 되지 않나요?
뭐 손으로 터치해서 직접최초 응답자 객체로 만들어주는 방법도 있긴 합니다만 이는 그저 사용자가 직접 터치해야만 가능한 일입니다. 반면 위 메소드는 프로세스상에서 텍스트 필드를 직접 입력 준비 상태로 만들어주어야할 때 사용되는 겁니다. 예를 들어 화면이 처음 실행되자마자 바로 값을 입력받는 상태로 만들어 주어야 할 때도 있을 거고요. 텍스트 필드가 여러 개 있을 경우 하나를 입력하고 리턴 키를 입력하면 다음 텍스트 필드로 자동으로 이동할수 있도록 처리해야 할 때도 있을 테니까요. 이런 경우를 위해서는 최초 응답자 객체를 프로그래밍 방식으로 직접 지정해 주기 위한 메소드가 필요합니다. 

최초 응답자를 항상 프로그래밍 방식으로만 지정할수 있는 것은 아닙니다. 스토리보드를 통해 서도 최초 응답자 지정을 할수 있는데요. 이를 위해 다시 도크 바가 사용됩니다. 

스토리보드에서 뷰 컨트롤러 상단에 표시되는 도크 바에는 모두 세 개의 아이콘이 있는데 지금 까지의 실습을 통해 맨 앞과 맨 뒤의 아이콘은 사용해 보았습니다. 맨 앞의 아이콘은 뷰 컨트롤러 자체를 대신하는 역할이며, 맨 마지막 아이콘은 화면 복귀를 위한 UnwindSegue를 생성할때 사용했었죠. 이제 마지막으로 두 번째 아이콘의 정체가 드러납니다. 바로 First Responder 아이콘이죠. 

원하는 객체를 becomeFirstResponder()메소드로 호출하는 대신 스토리보드에서 도크 바의 First Responder 아이콘에 연결해 놓으면 화면이 실행될 때 자동으로 최초 응답자 객체로 지정됩니다. 화면상의 텍스트 필드를 이와같이 연결해두면 처음에 화면이 실행될 때 키보드가 나타나 있게 됩니다. 

간단한 실습을 통해 이와같은 내용을 확인해 봅시다. 아 조금 전에 배운 속성 제어도 함께 해보기로하죠



※ 프로젝트 생성 및 실습 준비
STEP1 : 다음 정보를 바탕으로 프로젝트를 생성합니다.

[프로젝트 정보]
※ Product Name : Delegate-TextField
※ Language : Swift
※ Device : iPhone
※ Use Core Data : 체크 해제
※ Template : Single View Application

STEP2 : Main.storyboard 파일을 열고 스토리보드의 뷰 컨트롤러에 텍스트 필드를 추가합니다. 

참고로 텍스트 필드를 추가하면 모서리가 둥근 RoundedRect 스타일의 테두리 형태가 기본 제공됩니다. 다만 선이 너무 얇고 희미해서 잘 보이지 않을 것 같아 이 책에서는 Line 스타일로 표시하고 있으므로 책이랑 왜 모양이 다르지? 하고 당황하지 말았으면 좋겠군요. 


STEP3 : 보조 에디터를 열고 ViewController 클래스 쪽으로 텍스트 필드를 드래그하여 아울렛 변수 tf를 정의합니다. 


STEP4 : 보조 에디터를 닫고 메인 에디터에서 다시 ViewController.swift 파일을 엽니다. 


실습 준비가 모두 끝났습니다. 이제 텍스트 필드에 대한 실습을 진행하겠습니다. 



질문!! 메인 에디터에 파일을 열어놓고 왜 아무것도 안 해요?
어 그거 보조 에디터가 불편해서인데요... 설명 안하고 넘어가면 그냥 계속 보조 에디터에서 작업하시는 분들이 많거든요. 그런데 보조 에디터는 좁기도 하고 불편해서 메인 에디터로 옮겨와 작업하라 한겁니다. 앞으로의 실습에서 스토리보드를 건드릴 일이 없는 것도 하나의 이유이기도 하고요. 




※ 텍스트 필드의 속성 제어하기
먼저 텍스트 필드의 속성을 설정해 보겠습니다. 스위프트 코드로 제어해 봅시다. 


STEP1 : ViewController 클래스에 viewDidLoad() 메소드를 추가하고, 다음과 같이 입력값 속성을 작성합니다. viewDidLoad() 메소드를 미처 삭제하지 않았다면 그대로 사용해도 됩니다. 


ViewController.swift

import UIKit

class ViewController: UIViewController
{
       
    @IBOutlet var tf: UITextField!
    
    override func viewDidLoad()
    {
        //텍스트 필드 속성 설정
        self.tf.placeholder = "값을 입력하세요" // 안내 메시지
        self.tf.keyboardType = UIKeyboardType.alphabet // 키보드 타입 영문자 패드로
        self.tf.keyboardAppearance = UIKeyboardAppearance.dark // 키보드 스타일 어둡게
        self.tf.returnKeyType = UIReturnKeyType.join //리턴키 타입은 "Join"
        self.tf.enablesReturnKeyAutomatically = true // 리턴키 자동 활성화 "On"
    }
    
}

위 코드에서 설정한 속성은 다음과 같습니다. 

1. 텍스트 필드에 값이 비어 있을 때 "값을 입력하세요" 라는 안내 메시지를 표시합니다. 

2. 키보드 타입을 영문자 패드 형태로 지정합니다. 

3. 키보드 스타일을 어둡게 처리합니다. 

4. 키보드의 리턴키 타입을 Join으로 설정합니다. 

5. 텍스트 필드에 값이 비어 있을 때에는 키보드의 리턴 키를 비활성화합니다. 

이 속성들이 모두 적용된 텍스트 필드의 모습은 다음과 같습니다. 



질문!! 시뮬레이터에서 가상 키보드가 안 열릴 때는 어떻게 해야하나요?
시뮬레이터에서 텍스트 필드에 포커스를 주었음에도 가상 키보드가 열리지 않을 때가 있습니다. 이는 가상 키보드 대신 하드웨어 키보드가 시뮬레이터에 연결되었기 때문입니다. 이 때에는 다음 그림을 참고하여 시뮬레이터의 메뉴에서 하드웨어 키보드 연결을 해제해 주면 됩니다. 


STEP2 : 이번에는 텍스트 필드의 겉모습을 다듬어 봅시다. 방금 추가한 코드 아래에 다음과 같은 속성 설정을 추가합니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController
{
       
    @IBOutlet var tf: UITextField!
    
    override func viewDidLoad()
    {
       ...(중략)...
        self.tf.enablesReturnKeyAutomatically = true // 리턴키 자동 활성화 "On"
        
        /**
         * 스타일 설정
         */
        //테두리 스타일 - 직선
        self.tf.borderStyle = UITextField.BorderStyle.line
        //배경 색상
        self.tf.backgroundColor = UIColor(white: 0.87, alpha: 1.0)
        //수직 방향으로 텍스트가 가운데 정렬되도록
        self.tf.contentVerticalAlignment = .center
        //수평 방향으로 텍스트가 가운데 정렬되도록
        self.tf.contentHorizontalAlignment = .center
        //테두리 색상을 회색으로
        self.tf.layer.borderColor = UIColor.darkGray.cgColor
        //테두리 두께 설정 (단위: pt)
        self.tf.layer.borderWidth = 2.0
    }
    
}

이 코드에서 설정하고 있는 내용은 다음과 같습니다. 

1. 텍스트 필드의 테두리 스타일을 직선으로 설정합니다. 

2. 배경 색상을 설정합니다. 예제에서 사용한 값은 16진수 컬러 #DFDFDF를 UIColor 타입으로 변환한 것입니다. 

3. 텍스트 필드 내에 입력되는 텍스트를 수직 방향으로 중앙 정렬합니다.

4. 텍스트 필드 내에 입력되는 텍스트를 수평 방향으로 중앙 정렬합니다.

5. 텍스트 필드의 테두리 색상을 짙은 회색으로 설정합니다.

6. 텍스트 필드의 테두리 두께를 2.0 pt로 설정합니다. 

수직/수평 방향 텍스트 배열의 속성은 본래 열거형 타입의 값을 입력받는데 위 예제에서는 열거형 타입을 생략하고 개별 아이템 항목만 기술하였습니다. 이는 값이 대입될 속성이 이미 해당 열거형 타입으로 정의되어 있기 때문에 가능한 문법입니다. 위 수직 방향의 정렬 속성과 수평 방향의 정렬 속성에 생략되어 있는 열거형 타입은 각각 다음과 같습니다. 

※ 수직 방향 속성 - UIControl.ContentVerticalAlignment
※ 수평 방향 속성 - UIControl.ContentHorizontalAlignment

텍스트 필드의 테두리 속성인 borderWidth, borderColor는 텍스트 필드 자체의 속성이 아니라 하위 객체인 layer 속성에 정의되어 있습니다. 따라서 layer 속성을 거쳐서 참조하거나 설정해야 합니다. 일반적으로 iOS에서 색상을 처리하는 객체는 UIColor 이지만 텍스트 필드의 테두리 색상은 그보다 저수준에서 구현된 CGColor 타입의 값을 사용하기 때문에 UIColor 객체로 구현된 색상 정보를 CGColor 타입으로 변환해 주어야 합니다. 다행히 바로 변환할수 있도록 cgColor 속성을 제공하고 있으므로 이를 이용하면 됩니다. 

원하는 색상 코드를 UIColor 값으로 변환할 때 사용하는 실수값은 다소 익숙하지 않은 부분입니다. 우리가 자주 찾아볼 수 있는 16진수 기반의 값이 아니라서 더욱 그렇죠. 구글을 통해 검색하면 16진수 컬러 코드를 UIColor 객체 타입으로 변환해주는 샘플 예제를 쉽게 찾을수 있지만 필자는 이보다 다음과 같은 서비스 사이트를 이용하는 것을 더 좋아합니다. 16진수 컬러 코드를 넣으면 알아서 UIColor 객체 구문으로 변경해주는 서비스를 제공하고 있거든요 

16진수 컬러 코드를 UIColor 객체 형식으로 변경해주는 서비스 사이트 (http://uicolor.xyz)

이렇게 속성이 적용된 텍스트 필드의 모습은 다음과 같습니다. 



※ FirstResponder 지정하기
최초 응답자를 지정해 봅시다. 텍스트 필드나 텍스트 뷰가 최초 응답자로 지정될 경우 입력 대기 상태로 들어가면서 화면상에는 키보드가 나타나는데요. 앱이 열리면 자동으로 키보드가 나타나면서 입력대기 상태가 되도록 구현해 보겠습니다. 

STEP1 : viewDidLoad() 메소드 맨 아래에 다음과 같이 한줄을 추가합니다.

ViewController.swift

override func viewDidLoad()
    {
        ...(중략)...
        //텍스트 필드를 최초 응답자로 지정
        self.tf.becomeFirstResponder()
    }

다시 앱을 실행해 봅시다. 앱이 실행되자마자 화면상에 키보드가 표시되면서 입력 대기 상태가 되는 것을 확인할수 있습니다. 

원래대로라면 이렇게 입력 대기 상태에서 키보드를 제거하려면 값을 입력하고 리턴 키를 눌러서 입력을 완료하거나 또는 화면 상의 다른 컨트롤을 클릭하여 최초 응답자 포인터를 다른 곳으로 옮기는 방법 이외에는 없습니다. 하지만 우리가 배운 최초 응답자 관련 메소드를 사용하면 손쉽게 키보드를 없앨수 있습니다. 화면상에서 키보드를 없애는 방법을 구현해 봅시다. 

STEP2 : 스토리보드에서 뷰 컨트롤러에 버튼을 추가하고 이를 보조 에디터로 드래그하여 액션 메소드를 정의합니다. 이름은 confirm(_:)이라고 합시다.


STEP3 : confirm(_:) 메소드의 내용을 다음과 같이 작성합니다.

ViewController.swift

@IBAction func confirm(_ sender: Any)
    {
        //텍스트 필드를 최초 응답자 객체에서 해제
        self.tf.resignFirstResponder()
    }

이 메소드가 하는 일은 단순히 resignFirstResponder() 메소드를 호출하는 것뿐입니다. 하지만 이것만으로도 화면상의 가상 키보드를 제거하는 데에는 충분합니다. 이제 앱을 다시 실행 시키고 추가된 버튼을 클릭해 봅시다. 우리가 예상하는 대로라면 화면이 처음 실행될 때 키보드가 나타났다가 확인 버튼을 누르면 다시 사라지면서 원래대로 돌아올 겁니다. 적어도 제 시뮬레이터에서는 그렇게 동작하는 군요.

이번에는 텍스트 필드를 직접 터치하지 않고도 버튼을 클릭하면 텍스트 필드가 입력 대기 상태가 되도록 만들어 봅시다. 


STEP4 : 뷰 컨트롤러에 새로운 버튼을 하나 추가하고 이를 액션 메소드로 연결합니다. 새로운 액션 메소드의 이름은 input(_:)으로 할까요?




질문!!!! 버튼을 복사해서 붙여넣기 하면 안되나요?
스토리보드는 복사 + 붙여넣기 기능을 지원합니다. <Command> + <C>, <Command> + <V> 단축키로 버튼을 복사해서 추가할수 있죠. 그런데 주의할 점이 있습니다. 버튼을 복사할 때에는 단순히 버튼 자체만 복사되는 것이 아니라 버튼이 가지고 있는 액션 메소드나 아울렛 변수에 대한 연결 정보까지 함께 복사됩니다. 따라서 원치 않는 연결이 이어질수 있으므로 주의해야 합니다. 

STEP5 : input(_:) 메소드에 다음과 같은 구문을 작성합니다 

ViewController.swift

@IBAction func input(_ sender: Any)
    {
        //텍스트 필드를 최초 응답자 객체로 지정
        self.tf.becomeFirstResponder()
    }

특별한 것은 없습니다. 앞서 viewDidLoad() 메소드 맨 아래에 추가했던 한 줄을 그대로 복사 한것 뿐입니다. 하지만 이제 우리는 이 버튼을 통해 텍스트 필드를 직접 건드리지 않고도 입력상태로 만들어 줄수 있습니다. 앱을 실행해서 확인해 봅시다. 원하는 대로 입력 버튼을 누르면 키보드가 나타나나요?




7.1.2 텍스트 필드에 델리게이트 패턴 적용하기
텍스트 필드에 대해 학습한 내용을 바탕으로 드디어 델리게이트 패턴을 적용해 보겠습니다. 델리게이트 패턴을 적용할 때 가장 먼저 할 일은 델리게이트 프로토콜에 대한 구현을 선언하는 것입니다. 

STEP1 : ViewController 클래스에 UITextFieldDelegate 프로토콜 구현을 선언합니다. 
import UIKit

class ViewController: UIViewController, UITextFieldDelegate
{
	...(중략)...
}

STEP2 : viewDidLoad() 메소드 맨 아래에 다음 구문을 추가합니다. 텍스트 필드의 delegate 속성에 self를 대입하는 내용입니다. 

ViewController.swift

override func viewDidLoad()
    {
       ...(중략)...
        //델리게이트 지정
        self.tf.delegate = self
    }

텍스트 필드의 delegate는 텍스트 필드에 특정 이벤트가 발생했을 때 알려줄 대상 객체를 가리키는 속성입니다. 이 속성에 대입된 self는 현재의 뷰 컨트롤러 인스턴스를 의미하죠. 다시 말해 텍스트 필드에서 미리 정해진 특정 이벤트가 발생하면 현재의 뷰 컨트롤러에게 알려달라는 요청입니다. 이를 가리켜 뷰 컨트롤러가 텍스트 필드의 델리게이트 객체로 지정되었다 라고 표현합니다. 

텍스트 필드가 자신의 델리게이트 객체에게 특정 이벤트가 발생했음을 알려줄 때에는 델리게이트 메소드를 이용합니다. 이벤트마다 호출하기로 약속된 메소드가 정해져 있는데 이를 현재 지정된 델리게이트 객체에서 찾아 호출하는 겁니다. 이를 위해서는 먼저 델리게이트 객체에 지정된 메소드가 구현되어 있는지 확인합니다. 만약 구현되어 있다면 필요한 인자값을 담아 메소드를 호출해 주고 구현되어 있지 않다면 안 알려줘도 되나보다라고 판단하고 그대로 종료하는 방식으로 이루어지는 것이 델리게이트 패턴입니다. 

STEP3 : Xcode 메뉴에서 [Window] > [Documentation And API Reference]를 선택하여 API 문서를 실행합니다. 또는 단축키 <Shift> + <Command> + <숫자0>을 함께 눌러도 됩니다. 

이 문서는 앞으로 여러분이 가장 많이 참고하고 의지하게 될 것으로 우리가 사용하는 각종 클래스나 구조체, 메소드나 프로퍼티에 대한 모든것이 망라되어 있는 문서입니다. 가장 기본적인 정보부터 가장 복잡한 정보까지 모든 것을 담고 있으므로 여러분은 앞으로 개발을 하다가 막혔을 때 이 문서를 이용하여 돌파구를 찾아 나가야 합니다. 필자 역시 개발 도중에 특정 메소드의 사용법이 생각나지 않거나 사용 가능한 메소드에 어떤 것이 있는지 확인할 때에는 항상 이 문서를 참고합니다. 여러분이 보고 있는 이 책도 상당 부분 이 문서에 기반하고 있죠. 

마이크로소프트에서는 자사 운영체제 기반의 언어를 사용하여 소프트웨어를 개발하는 사람들을 위해 방대한 문서를 정리해 놓았는데 이를 MSDN이라고 합니다. 애플의 API 문서는 이 MSDN에 비견될 만큼 잘 정리되어 있고 방대한 내용을 담고 있습니다. 

영어로 쓰여 있는 것이 단점이긴 하지만 그리 어렵지는 않습니다. 시간을 두고 천천히 읽어 나가면 이해가 될 내용들이므로 잘 알아두도록 합니다. 


STEP4 : UITextFieldDelegate를 입력하여 검색하고 텍스트 필드에 대한 델리게이트 메소드를 확인합니다. 

검색된 UITextFieldDelegate 프로토콜 정보를 살펴보면 많은 것을 알 수 있습니다. 우선 가장 먼저 나오는 것은 간단한 설명이고 ,그 아래에 Overview 항목을 통해 개괄적인 구조를 안내합니다. 우리가 봐야 할 것은 그 아래 Symbols 영역입니다. 

여기에 나열된 메소드들은 모두 해당 프로토콜에서 선언된 메소드들로 델리게이트 메소드 역할을 하는 것들입니다. 각 메소드의 이름과 인자값 형식, 그리고 메소드에 대한 설명이 나와 있습니다. 더 자세한 내용을 알고 싶다면 각 메소드를 클릭하면 됩니다. 

위 그림에 따르면 모두 일곱 개의 델리게이트 메소드가 정의되어 있으며 각각의 메소드는 크게 두 부류로 나뉩니다. 한 부류는 텍스트 필드의 편집 허용 여부를 관리하는 메소드들이고, 또다른 부류는 입력되는 텍스트를 편집하는데 관련된 메소드들입니다. 편집 허용 여부를 관리하는 메소드들은 모두 Bool 타입의 값을 리턴하도록 정의되어 있으며 텍스트를 편집하는 데 관련된 메소드들은 모두 아무 값도 반환하지 않도록 정의되어 있다는 특징이 있습니다. 이들 메소드를 전부 작성하여 실제로 동작하는 방식을 확인해 보겠습니다. 


STEP5 : ViewController 클래스에 다음과 같이 textFieldShouldBeginEditing(_:) 메소드를 추가합니다. 자동 완성 지원이 되므로 이를 이용하면 편리합니다. 

import UIKit

class ViewController: UIViewController, UITextFieldDelegate
{
       
    ...(중략)...
    //텍스트 필드의 편집을 시작할 때 호출
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool
    {
        print("텍스트 필드의 편집이 시작됩니다.")
        return true //false를 리턴하면 편집되지 않는다.
    }        
}

이 메소드는 해당 텍스트 필드의 편집이 시작될 때 자동으로 실행됩니다. 만약 반환값을 false로 지정하면 편집이 허용되지 않습니다. 


STEP6 : 계속해서 나머지 델리게이트 메소드를 차례로 추가합니다. 

ViewController.swift

class ViewController: UIViewController, UITextFieldDelegate
{
    ...(중략)...  
    
    //텍스트 필드의 편집을 시작할 때 호출
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool
    {
        print("텍스트 필드의 편집이 시작됩니다.")
        return true //false를 리턴하면 편집되지 않는다.
    }
    // 텍스트 필드의 편집이 시작된 후 호출
    func textFieldDidBeginEditing(_ textField: UITextField)
    {
        print("텍스트 필드의 편집이 시작되었습니다.")
    }
    //텍스트 필드의 내용이 삭제될 때 호출
    func textFieldShouldClear(_ textField: UITextField) -> Bool
    {
        print("텍스트 필드의 내용이 삭제됩니다.")
        return true //false 를 리턴하면 삭제되지 않는다.
    }
    //텍스트 필드의 내용이 변경될 때 호출
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool
    {
        print("텍스트 필드의 내용이 \(string)으로 변경됩니다.")
        return true //false 를 리턴하면 내용이 변경되지 않는다.
    }
    //텍스트 필드의 리턴키가 눌러졌을 때 호출
    func textFieldShouldReturn(_ textField: UITextField) -> Bool
    {
        print("텍스트 필드의 리턴키가 눌러졌습니다.")
        return true
    }
    //텍스트 필드 편집이 종료될 때 호출
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool
    {
        print("텍스트 필드의 편집이 종료됩니다.")
        return true //false 를 리턴하면 편집이 종료되지 않는다.
    }
    //텍스트 필드의 편집이 종료되었을 때 호출
    func textFieldDidEndEditing(_ textField: UITextField)
    {
        print("텍스트 필드의 편집이 종료되었습니다.")
    }
    
}


각각의 델리게이트 메소드는 실행 시점에 맞추어 호출됩니다. 앱을 실행한 다음 텍스트 필드에 값을 입력해보면 어떤 메소드가 어떻게 호출되는지 알수 있습니다. 앱을 빌드하고 실행해 봅시다. 


STEP7 : 실행된 앱에서 텍스트 필드를 클릭하여 입력 대기 상태로 만들어 주겠습니다. 이때 로그 콘솔에는 다음과 같은 메시지가 차례로 출력됩니다. 

이 로그 메시지들은 각각 앞에서 델리게이트 메소드에 작성해둔 것입니다. 메시지를 바탕으로 델리게이트 메소드가 호출된 순서를 역추적해보면 다음과 같습니다. 

첫 번째) textFieldShouldBeginEditing(_:) > 편집을 시작할 때 호출
두 번째) textFieldShouldClear(_:) > 내용이 삭제될 때 호출
세 번째) textFieldDidBeginEditing(_:) > 편집이 시작된 후 호출

사용자가 텍스트 필드를 클릭하면 편집을 시작하는 것으로 파악한 앱 시스템은 가장 먼저 textFieldShouldBeginEditing(_:)메소드를 호출합니다. 이어서 텍스트 필드의 내용이 모두 삭제되는데 이는 우리가 편집 시작 시 텍스트 필드의 내용을 클리어하도록 옵션을 설정해 두었기 때문입니다. 텍스트 필드의 내용이 삭제되므로 textFieldShouldClear(_:)메소드가 이어서 호출됩니다. 마지막으로 가상 키보드까지 화면에 표시되고 나면 편집 준비가 완료되고 편집이 시작됩니다. 이때 세 번째로 textFieldDidBeginEditing() 메소드가 호출됩니다.


STEP8 : 시뮬레이터 화면의 키보드를 이용하여 임의의 한 글자를 입력합니다. 저는 a를 입력했습니다. 

텍스트 필드에 값을 입력하는 순간 로그 콘솔에는 다음과 같은 메시지가 표시됩니다. 

이 메시지는 textField(_:shouldChangeCharactersIn:replacementString:)가 호출된 결과로 출력된 것입니다. 이 메소드는 텍스트 필드에 값이 입력되었을 때 호출되며, 이때 편집되는 문자열도 함께 전달됩니다. 이 메소드의 반환값에 따라 편집 내용이 텍스트 필드에 반영되기도 반영되지 않기도 하기 때문에 이를 응용하면 특정 문자열을 입력 차단하거나 제어할수 있습니다. 


STEP9 : 이 메소드를 활용하여 텍스트 필드에 숫자를 입력할수 없도록 차단하는 다음 코드를 추가해 봅시다. 

 func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool
    {
        print("텍스트 필드의 내용이 \(string)으로 변경됩니다.")
        if Int(string) == nil //입력된 값이 숫자가 아니라면 true를 리턴
        {
           return true
        }else //입력된 값이 숫자라면 false를 리턴
        {
           return false
        }          
    }

변경될 문자열은 텍스트 필드에 반영되기 전에 미리 string 매개변수를 통해 전달되기 때문에 이값을 체크하여 허용 가능한 문자열이라면 true를 리턴하고 허용할수 없는 문자열이라면 false를 리턴합니다. 이를 통해 텍스트 필드에 입력될 값을 통제할수 있습니다. 


앱을 다시 빌드하여 실행해 봅시다. 일반 문자열을 입력하면 정상적으로 동작하지만 숫자를 입력하면 입력 내용이 텍스트 필드에 반영되지 않는 것을 확인할수 있습니다. 값이 전부 입력되고 난 후에 저장 시점에서 입력된 값을 체크하여 원치 않는 문자열이 입력되었는지를 구분할 수도 있겠지만 그보다는 이처럼 입력할 때부터 아예 특정 문자열이 입력되지 못하도록 막아주는 것이 더 좋은 방법입니다.

한 가지 기능을 덧붙여 봅시다. 텍스트필드에는 최대로 입력 가능한 문자열 길이가 있는 경우가 많습니다. 이것 역시 이 메소드를 이용하면 쉽게 구현할수 있습니다.

ViewController.swift

//텍스트 필드의 내용이 변경될 때 호출
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool
    {
        print("텍스트 필드의 내용이 \(string)으로 변경됩니다.")
        if Int(string) == nil
        {
            //현재 텍스트 필드에 입력된 길이와 더해질 문자열 길이의 합이 10을 넘는다면 반영하지 않음
            if (textField.text?.count)! + string.count > 10
            {
                return false
            }else
            {
                return true
            }            
        }else
        {
            return false //false 를 리턴하면 내용이 변경되지 않는다.
        }
        
    }

추가된 내용은 텍스트 필드에 입력되어 있던 기존 문자열의 길이와 새로 추가될 문자열의 길이를 합하여 10이 넘을 경우 false를 리턴하는 것입니다. 이를 통해 텍스트 필드에는 최대10자리 까지의 문자열만 입력될수 있으며 그 이상 입력될 때에는 더이상 키보드의 입력 내용이 반영되지 않습니다.

이외에도 이 메소드를 통해 구현할수 있는 기능은 매우 많습니다. 입력된 내용을 잠금 처리할 때에도 유용하게 사용할수 있죠. 가령 값을 입력해 두고 스위치를 두어 On 상태일 때에만 메소드의 반환값을 true로 처리한다면 쉬우면서도 훌륭한 입력 잠금 기능을 구현할수 있는 셈입니다. 

나머지 델리게이트 메소드들도 차례로 확인해 봅시다. 편집을 시작하거나 종료할 때, 키보드 상에서 리턴키를 눌렀을 때 등 여러가지 상황에서 그에 맞는 델리게이트 메소드가 호출되어 로그콘솔에 출력되는 것을 볼 수 있을 겁니다. 

델리게이트 메소드는 이처럼 특정 객체에서 발생하는 이벤트에 맞추어 우리가 원하는 기능을 실행시키고 싶을 때 유용한 해결책으로 사용됩니다. 델리게이트 패턴은 iOS의 근간을 이루는 중요한 설계 구조중 하나라고 할 수 있습니다. 