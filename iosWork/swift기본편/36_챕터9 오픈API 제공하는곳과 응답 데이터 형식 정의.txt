9.2 오픈 API와 공공콘텐츠 
앞서 우리는 JSON 데이터 구조를 학습하면서 앱에 제공하는 JSON 형식의 데이터를 직접 작성해 보았습니다. 하지만 상업적인 목적으로 자본이 투입되지 않는 한 앱에서 사용할 콘텐츠를 직접 생산한다는 것은 앱을 만드는 일보다 더 어려운 일입니다. 콘텐츠를 기획하고 수집하는 일뿐만 아니라 콘텐츠를 저장할 서버를 구축해야 하고 콘텐츠를 데이터 형태로 변환하는 과정이 필요한데, 대부분은 전담 인력이 필요할 만큼 많은 시간과 노력이 꾸준히 들어가는 작업이기 때문입니다. 혼자서 앱을 만들어 서비스할 생각을 갖고 있는 사람들에게는 먼 나라 이야기에 가깝죠. 

다행히 앱에서 유용하게 사용할수 있을 만한 콘텐츠를 공공재성격 으로 제공하는 곳들이 있기 때문에 이를 잘 활용하면서 콘텐츠를 직접 생산하는 수고 없이도 충분히 좋은 앱을 만들수 있습니다. 일반인이 만들어 폭발적인 호응을 얻었던 서울버스라는 앱도 공공 웹 서비스에서 제공하는 데이터를 이용했다는 사실이 이를 뒷받침 합니다. 


9.2.1 오픈 API
일부 웹 사이트에서는 공개된 SOAP 프로토콜이나 RESTful 형식을 사용하여 공공 콘텐츠를 제공하는데 이를 오픈 API(Open API)라고 통칭합니다. 국내에서 제공하는 오픈 API의 대표 사례는 다음과 같습니다. 


※ 공공 데이터 포털 (https://data.go.kr)
공공 데이터 포털은 공공 기관이 생성하거나 취득하여 관리하는 공공 데이터를 제공하는 통합 창구입니다. 국가에서 운영하는 만큼 제공하는 데이터의 종류로 만여 가지에 이를 만큼 매우 방대하고 제공하는 방식 역시 파일 데이터 방식과 오픈 API 방식, 그리고 시각화 데이터 방식 등 으로 다양합니다. 제공하는 데이터의 대표적인 사례는 다음과 같습니다. 

※ 지역별 운행 시내버스 정보

※ 지역별 축제나 문화 관광지 안내 정보

※ 실시간 약국 정보

※ 도서관 좌석 정보

※ 지역별 제공 와이파이 정보

※ 쇠고기 이력 정보

※ 공공 기관의 채용, 행사 이벤트 등에 대한 정보

※ 예금대출 금리 비교 정보

※ GPS 기반 날씨와 미세먼지 정보

※ 아파트 실 거래 가격 지수

...

모두 나열한다면 책 한권을 따로 작성해야 할 만큼 방대한 정보를 자랑하는 공공 데이터 포털은 여러분이 좋은 콘텐츠를 제공하기 위해 반드시 확인해보아야 할 보물창고입니다. 만약 무엇인가 쓸만한 앱을 만들고 싶은데 아직 무엇을 만들지 정하지 못했다면 공공 데이터 포털에서 제공하는 정보를 기반으로 결정해보는 것도 좋은 접근 방법이라 할 수 있습니다



※ 서울 열린 데이터 광장 (http://data.seoul.go.kr)
공공 데이터 포털과는 별개로 서울시 산하 공공 기관에서 생성하거나 관리하는 공공 데이터를 제공하는 서울 열린 데이터 광장은 서울에 국한된 정보이긴 하지만 공공 데이터 포탈만큼이나 방대한 데이터 규모를 자랑하는 서비스입니다. 이 역시 오픈 API 와 더불어 시각화 자료, 파일 데이터 등 다양한 형식으로 정보를 제공하고 있고, 쓰임새 면에서 더욱 유용할수 있는 다양한 정보들을 제공합니다 서울 열린 데이터광장에서 제공하는 대표적인 데이터는 다음과 같습니다. 

※ 지하철역별 승하차 인원 및 시간대별 승객 현황

※ 보관 분실물 목록 조회

※ 미분양 주택 현황

※ 개별 공사 지가

※ 공영 주차장 정보 및 주차 가능 대수 현황

※ 서울 안심 먹거리 목록

※ 버스 도착 정보 조회

※ 시장 마트 정보

※ 금연 구역 정보

※ 지역 시장 및 마트별 생필품 가격 정보

※ 일별 기상 관측 정보
...



※ 네이버 오픈 API (http://developer.naver.com)
포털 사이트인 네이버 개발자 센터에서 제공하는 오픈 API입니다. 주로 앱이나 웹을 개발하는 데 사용할수 있도록 제공하며 공공 데이터 포털이나 서울 열린 데이터 광장처럼 방대한종류의 정보를 제공하지는 않지만 네이버의 콘텐츠나 기능을 활용할수 있는 다양한 API들을 제공합니다. 주로 검색이나 블로그 ,뉴스 , 영화 및 이미지 등 네이버 서비스에 관련된 API를 제공하는 특성이 있습니다. 

네이버 API는 단순히 검색된 데이터를 제공하는 것만으로 그치지 않고 네이버의 서비스를 이용하여 로그인등 앱에 필요한 기능을 쉽게 작성할수 있도록 지원하는 API를 제공하기도 합니다. 지원 항목은 다음과 같습니다. 

※ 지도 API : 앱에서 지도를 사용하여 위치를 표시하거나 위치 기반 서비스를 제작할 때 사용할수 있습니다. 

※ 네이버 로그인 API : 회원 로그인용 서비스를 구성할 때 사용자가 별도의 아이디를 생성하는 과정 없이 네이버의 아이디를 이용하여 로그인할수 있도록 지원합니다. 

※ 단축 URL API : 긴 URL을 줄이거나 간략한 링크를 제공하고 싶을때 네이버에서 제공하는 단축 URL을 생성할 수 있습니다. 

※ 네이버 앱 API : 제작한 앱에서 네이버 앱을 호출하여 각종 검색 기능으로 바로 연결할수 있습니다. 



※ 다음 개발자 서비스 (https://developers.kakao.com/)
포털 사이트 다음(daum)에서도 개발자들을 위한 다양한 서비스를 제공하며 그중 일부로 오픈 API를 제공합니다. 앞서 살펴보았던 네이버에서 제공하는 API와 유사한 항목을 제공하며 특징적인 API에는 다음과 같은 항목들이 있습니다. 

※ 나에 대한 반응 목록 검색 API : 내가 올린 글에 대한 반응글 정보를 제공합니다. 

※ 일정 관리 API : 개인 일정에 관한 추가, 수정, 삭제 및 알림 기능을 제공합니다. 

※ 좌표/주소 상호 변환 API : 위도 및 경도 좌표를 주소로, 주소를 위도 및 경로 좌표로 상호 변환하는 기능을 제공합니다. 

※ 키워드로 장소 검색 API : 검색어를 이용하여 해당하는 장소를 반환하는 기능을 제공합니다. 



9.2.2 영화 정보 제공 서비스
앞에서 살펴본 웹 서비스들은 모두 통합 데이터를 제공하는 서비스들이지만 전문적이고 특화된 데이터를 제공하는 웹 서비스들도 많습니다. 한 예로 앞장에서 만들어본 영화 정보 앱에서 사용할수 있는 영화 관련 콘텐츠를 제공하는 웹 서비스들이 여럿 있는데요. 대표적인 것이 한국 영화 진흥 위원회의 오픈 API 입니다. 


※ 한국 영화 진흥 위원회 : 영화관 입장권 통합 전산망 오픈 API( http://www.kobis.or.kr/kobisopenapi/)
영화에 관해 전문적인 정보를 제공하는 웹 서비스답게 영화에 대한 일반 정보 이외에도 매출액과 매출액 증감분, 누적 관객 수 및 상영 스크린 수등 최신 박스 오피스 정보를 상세히 제공합니다. 특히 해외 박스 오피스 정보까지 총망라하고 있으므로 영화의 실시간 순위나 글로벌 영화 정보를 제공할 때 사용하면 좋습니다. 



※ 오픈 API 와 인증
모바일이 활성화되고 플랫폼으로서의 가능성이 기업의 운명을 좌우하는 시대가 오면서 특히 IT 기업에게 오픈 API는 매우 중요한 자산이 되었습니다. 이에 따라 오픈 API 표준의 주도권을 잡으려는 경쟁 또한 한동안 매우 치열했었습니다. 이들 경쟁은 크게 양대 진영으로 나누어졌는데, 한 쪽이 SOAP^&XML 포맷을 주장하는 연합이었고, 다른 한 쪽이 REST&JSON 포맷을 주장하는 연합이었습니다. 이들은 각종 라이브러리나 서비스의 제공 등을 통해 서로 치열한 경합을 펼쳐왔으나 최근에는 REST&JSON 포맷 진영의 승리로 점점 굳어지고 있는 모양새입니다. 현재 새로 생기는 대부분의 웹 서비스가 REST&JSON 포맷을 지원하고 있다는 점이 이를 증명합니다. 

오픈 API 서비스는 대부분 무분별한 사용을 막기 위해 인증 과정을 거치도록 설계되어 있습니다. 이를 위한 인증 방식의 대표적인 예가 OAuth.20입니다. 사실 OAuth 라는 인증 기준을 제공하고 활성화하는 데 가장 큰 역할을 한 것은 트위터(https://twitter.com)입니다. 트위터 홈페이지에 직접 접속하지 않아도 트위터에 글을 올리거나 다른 글을 리트윗할수 있도록 하기 위한 API에서 사용자에 대한 인증과 권한을 부여하는 프로토콜 기준을 설계한 것이 기반이 되었습니다. 

최초에 OAuth1.0이 발표되었으나 보안 결함이 발견된 후 이를 보완하여 OAuth1.0a가 발표되었고 다시 이를 개선한 인증 프로토콜로 OAuth2.0이 발표되었습니다. OAuth2.0은 아직 최종 버전이 나오지 않은 진행형이긴 하지만 오픈 API 인증에서 매우 널리 사용되고 있으므로 알아두는 것이 좋습니다. OAuth2.0에 대한 규약은 매우 방대하므로 자세한 내용은 별도의 문서나 서적을 이용하여 학습해보기 바랍니다. 

국내에서 제공하는 오픈 API도 Oauth2.0 인증을 거쳐 데이터를 제공하는 경우가 대부분이며 그렇지 않은 경우라도 최소한 API 사용자 등록 과정을 거친 인증용 키를 발급받아 이용하도록 제한되어 있습니다. 특히 몇몇 웹 서비스는 사전 등록 신청에 여러 날이 소요되는 경우도 있으므로 미리 확인해본 후 사전 등록을 해두는 것이 편리합니다. 일부 API는 일일 사용횟수 제한이 있을수 있으므로 이역시 염두에 두고 서비스 이용을 고려해야 합니다. 




9.3 오픈 API를 이용한 네트워크 실습
오픈 API를 사용하여 실제로 앱을 만들어 보겠습니다. 앞 장에서 제작한 MyMovieChart 앱을 수정하여 서버에서 제공하는 콘텐츠를 읽어올 수 있는 구조로 변경한 다음 영화 차트 정보를 읽어와출력해 봅시다. 

오픈 API를 사용하여 앱을 개발하는 과정은 일반적으로 다음과 같은 순서로 이루어집니다. 

1단계 : 원하는 정보를 제공하는 웹 서비스와 사용할 API 검색

2단계 오픈 API 사용을 위한 신청과 인증 키 발급

3단계 : 앱 내에서 네트워크를 통해 데이터를 받아오도록 코드 구현

4단계 : 전달받은 데이터를 파싱하여 사용

가장 먼저 해야 할 일은 적당한 API를 찾아내는 것입니다. 보통은 며칠에 걸쳐 다양한 API를 꼼꼼히 확인하고 그중에서 우리가 원하는 형태의 데이터에 가장 어울리는 것으로 정해야 하지만 이번 실습에서 우리는 이 과정을 건너뛰고 루비페이퍼에서 제공하는 영화 차트 API를 사용하겠습니다 

그다음으로 해야 할 일은 서비스를 분석하여 API를 사용하려면 어떻게 해야 하는지, 사용 조건은 무엇인지 등을 확인하고 이에 대응하는 단계입니다. 대부분의 서비스들은 API를 사용하기 전에 반드시 신청을 해야 하고, 그 결과로 인증 키를 받아서 사용하도록 제한되어 있습니다. 다만 우리가 사용할 API는 실습을 위해 별도로 제작된 것이어서 인증키 없이도 사용 가능합니다. 

다른 API를 사용할 때 필요한 신청 방법은 각 API 제공 홈페이지에 자세히 나와 있으므로 이를 읽어보고 그대로 진행하면 됩니다. 

다음으로 할 일은 API 사양을 확인하여 어떤 데이터를 어떻게 보낼지 체크한 다음, 이에 맞게 프로그래밍 코드를 구현하는 것입니다. 여기서부터 소스 코드를 작성하게 되죠. 이를 위해서 이번 장의 주제인 네트워크 통신 방법과 관련 객체를 이해해야 합니다. 

마지막으로 할 일은 네트워크를 통해 전달받은 데이터를 용도에 맞게 파싱하는 것입니다. 파싱된 데이터는 화면에 나타내는 데에 사용하거나 혹은 필요한 곳에 사용하면 됩니다. 

이상의 과정을 거쳐 실습을 진행해 봅시다. 단계적으로 차근차근 접근해 보면 어렵지 않게 데이터를 읽고 화면을 구현할수 있을 겁니다. 




9.3.1 API 기본 정보
우리가 사용할 영화 차트 API의 기본 정보를 차례로 살펴봅시다. 웹에 대한 배경 지식이 있으면 이해하기 수월하겠지만 그렇지 않아도 문제가 되지는 않습니다. 

※ Request URI : http://swiftapi.rubypaper.co.kr:2029/hoppin/movies?order={정렬조건}&count={불러올개수}&page={불러올페이지}&version={API버전}&genreId={장르구분}

Request URI 는 영화 차트 API를 호출하기 위한 네트워크상의 주소입니다. 웹 사이트에서 특정 페이지를 불러올때 사용하는 URL과 비슷한 의미라고 생각하면 됩니다. 우리는 다만 이 URL을 그대로 사용하는 것이 아니라 {정렬조건}, {불러올페이지}, {불러올개수}등 중괄호로 둘러싸인 부분을 적절한 값으로 치환한 다음에 호출해야 합니다. 어떤 값을 대입해야 할지는 뒤에 이어지는 Querystring Parameters 부분을 확인하면 알 수 있습니다. 

※ 프로토콜/HTTP 메소드 REST/GET

두번째 항목인 [Protocol/HTTP Method]는 API의 프로토콜과 요청 방식에 대한 내용입니다. 표시된 것처럼 이 API는 REST 프로토콜형식을 사용하여 GET 방식으로 호출해야 합니다.

※Querystring Parameters
항목		데이터 타입	값 예시			설명
version		정수형		1			API의 버전 정보입니다.
page		정수형		1			조회할 목록의 페이지를 지정합니다. -page 값이 0, 1일 경우 모두 1로 지정됩니다. 
count		정수형		10			페이지당 출력할 영화 정보 건수를 지정합니다.
genreId		정수형		0			장르 ID 입니다. 현재 지원되지 않으므로 값을 비워둡니다.
order		문자열		releasedateasc		정렬방식을 지정합니다. 
							- releasedateasc : 개봉일 오래된 순
							- releasedatedesc : 개봉일 최근순

이 항목은 Request URI에서 값으로 대체해야 할 부분의 정보입니다. version, page, count, genreId, order 항목이 나열되어 있는데 앞서 살펴본 Resource URI에서 중괄호로 표시된 각 항목에 알맞은 값을 넣어줄 때 참고하면 됩니다. 예를 들어 API 버전을 1로 사용하고 첫 번째 페이지만 가져오며 페이지당 10건의 영화 정보만 별도의 장르 없이 최근 개봉 순으로 가져온다고 가정해 봅시다. 이에 따라 해당 값을 Request URI에 대입하면 다음과 같은 경로가 만들어 집니다. 

http://swiftapi.rubypaper.co.kr:2029/hoppin/movies?version=1&page=1&count=10&genreId=&order=releasedateasc

이 URI를 네트워크 객체에 넣어 호출하면 원하는 영화 목록을 회신받을 수 있습니다. 이 주소는 일반 브라우저에서도 동작하기 때문에 크롬과 같은 브라우저에서 주소 줄에 위 URI를 입력하면 다음과 같은 결과를 볼 수 있습니다. 



※ 응답 데이터 형식
URI를 통해 응답받은 영화 목록은 JSON 형태로 이루어져 있습니다. 얼핏 보아서는 이해하기 힘들 수도 있으므로 차근차근 내용을 봅시다. 내용이 복잡할 뿐만 아니라 정렬 없이 나열되어 있기 때문에 편하게 분석하려면 앞서 설명한 JSON 정렬 사이트 등을 이용하여 미리 데이터를 정렬하는 것이 좋습니다. 


표 9-3
항목						데이터 타입		설명
hoppin						JSON 객체		최상위 노드 입니다.
	totalCount				숫자			조회한 정보의 전체 데이터 개수입니다.
	movies					JSON 객체		영화 정보 목록입니다.
		movie				JSON 객체		영화 정보 입니다. 
			movieId			문자열			영화 ID
			title			문자열			영화 제목
			genreIds			문자열			영화 장르 코드
			ratingAverage		숫자			평균 별점
			participant		숫자			별점 평가자 수
			thumbnailImage		문자열			영화 섬네일 이미지 정보
			linkUrl			문자열			상세 정보 페이지 URL

위 표에서 각각의 항목은 계층 관계를 이루고 있으며 이를 들여쓰기를 통해 표시하고 있습니다. 우리가 앱 내에서 URI를 호출했을 때 응답받을 데이터 항목은 실제로 이와같은 구조를 가지고 있으므로 데이터를 파싱하기 위해서는 위 구조를 잘 이해해야 합니다. 

데이터 구조의 가장 상위에 hoppin은 이 데이터에 대한 최상위 노드를 의미하며, 그 하위에 있는 totalCount는 우리가 조회한 조건에 맞는 전체 데이터 개수를 나타냅니다. 실제로 가져올 데이터는 전체 데이터 중 일부이므로, 표시된 전체 데이터 개수와 우리에게 전달된 데이터의 개수는 일치하지 않을수도 있습니다. 그런데 왜 데이터를 일부만 가져오는 걸까요?

정답은 효율성 때문입니다. 모바일 네트워크 통신을 통해서 가져오는 데이터는 속도 및 트래픽에 제한이 있기 때문에 너무 많은 데이터를 한꺼번에 읽어오려면 제공해주는 쪽이나 받는 쪽 모두에게 무리가 될 수 있습니다. 게다가 항상 전체 데이터가 다 필요한 것은 아닙니다. 보통은 최신 데이터 일부만 사용되는 경우가 흔하죠.

그래서 수천, 수만 개가 될 수도 있는 전체 데이터를 한꺼번에 전달하는 모험을 하는 대신 데이터의 총 개수와 함께 당장 화면에 출력해야 할 데이터 정도만 전송해 주고 만약 추가 데이터가 필요하다면 앱에서 <더 보기> 버튼을 통해 다시 요청하는 방식으로 처리하는 것이 일반적입니다. 이를 페이징(Paging)처리라고 합니다. 데이터에 대한 페이징 처리를 하려면 총 데이터 개수가 몇 개여야 하는지 알아야 하므로 이를 지원하기 위해 총 데이터 개수값을 제공하는 것입니다. 

영화 정보 목록은 배열 형식으로 이루어지는데 이 값들은 movies -> movie 아래에 저장됩니다. 배열 형식에서 반복 작성된 영화 정보들은 각각 영화 ID(movieId), 영화 제목(title), 영화 장르 코드(genreIds), 평균 별점(ratingAverage), 별점 참여자 수(participant), 영화 섬네일 이미지(thumbnailImage), 상세정보 페이지 URL(linkUrl)등을 제공합니다. 샘플 데이터는 아래와 같습니다. 

{
  "hoppin":{
     "totalCount":"4266",
      "movies":{
        "movie":[
          {
	"genreNames":"코미디,드라마",
	"genreIds":"003,005",
	"title":"인포먼트",
	"movieId":"P00000248257",
	"linkUrl":"http://swiftapi.rubypaper.co.kr:2029/hoppin/detailView?movieId=P00000248257",
	"participant":"3",
	"ratingAverage":"6.7",
	"thumbnailImage":"http://swiftapi.rubypaper.co.kr:2029/thumbnail/REP_00000043009_1_1_0527.jpg"
	}
         ]
       }
    }
}


단순히 설명만 하니 잘 모르겠죠? 네 아마도 그럴 겁니다. 그래서 실습을 해야 하는 거죠. 이제 직접 요청 URI를 만들어 호출해 보고 그 결과값을 받아 파싱처리하는 코드를 작성해 보겠습니다. 