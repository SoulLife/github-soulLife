7.2.4 익스텐션(Extension)을 이용한 델리게이트 패턴 코딩
델리게이트 패턴은 최소한 하나 이상의 프로토콜을 구현해야 하기 때문에 한 화면에서 다양한 객체의 델리게이트 패턴을 구현하다 보면 자칫 코드가 난잡해지기 쉽습니다. 여러 개의 프로토콜에서 각자 정의된 메소드들이 하나의 클래스 내에 이리저리 섞여 있는 것도 그리 좋은 구조는 아니죠. 이때 익스텐션(Extension)을 활용하여 훨씬 깔끔하게 코딩할수 있는 방법을 알려드릴까 합니다. 

느닷없이 익스텐션이라니 이상하게 여길 분들도 있을 겁니다. 하지만 익스텐션은 클래스를 대신해서 프로토콜을 구현할수 있기 때문에 델리게이트 패턴에 사용되는 프로토콜을 익스텐션에 서 구현하면 하나의 뷰 컨트롤러 클래스에 여러 프로토콜 메소드가 난립하는 것을 방지할수 있습니다. 

조금 전에 작성한 이미지 피커 컨트롤러 관련 코드를 대상으로 익스텐션을 활용하는 방법을 살펴봅시다. 우선 현재까지 진행된 ViewController 클래스의 정의 부분은 다음과 같습니다. 상속을 위한 UIViewController 클래스 뿐만 아니라 이미지 피커 컨트롤러의 델리게이트 패턴을 위한 UIImagePickerControllerDelegate와 UINavigationControllerDelegate 프로토콜까지 선언되어 있어 다소 복잡한 모습이죠. 


ViewController.swift

import UIKit

class ViewController : UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate 
{
   ...(중략)...
}

익스텐션의 사용은 현재의 코드에서 프로토콜을 분리하는 것에서 시작됩니다. 익스텐션을 정의하면서 UIImagePickerControllerDelegate와 UINavigationControllerDelegate 프로토콜을 그 익스텐션 쪽으로 옮기는 겁니다. 그 결과로 기존의 코드는 다음과 같은 형태로 바뀌게 됩니다. 

ViewController.swift

import UIKit

class ViewController : UIViewController
{
  ...(중략)...
}
extension ViewController : UIImagePickerControllerDelegate, UINavigationControllerDelegate
{

}

이제 정의된 익스텐션에 해당 프로토콜에서 구현해야 할 메소드를 작성해주면 끝입니다. 가령 앞에서 UIImagePickerControllerDelegate 프로토콜에 정의된 두 개의 메소드를 익스텐션 내부로 옮겨주는 거죠. 

ViewController.swift

import UIKit

class ViewController: UIViewController
{
   ...(중략)...
}

extension ViewController : UIImagePickerControllerDelegate, UINavigationControllerDelegate
{
    //이미지 피커에서 이미지를 선택하지 않고 취소했을 때 호출되는 메소드
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController)
        {
            //이미지 피커 컨트롤러 창 닫기
            picker.dismiss(animated: false){ () in
                //알림창 호출
                let alert = UIAlertController(title: "", message: "이미지 선택이 취소되었습니다.", preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "확인", style: .cancel))
                self.present(alert, animated: false)
            }
            
        }
        //이미지 피커에서 이미지를 선택했을 때 호출되는 메소드
        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any])
        {
            //이미지 피커 컨트롤러 창닫기
            picker.dismiss(animated: false){ () in
                //이미지를 이미지 뷰에 표시
                let img = info[UIImagePickerController.InfoKey.editedImage] as? UIImage
                self.imgView.image = img
            }
        }
}


그런데 모든 프로토콜을 반드시 하나의 익스텐션에 담을 필요는 없습니다. 하나의 익스텐션이 하나의 프로토콜만을 처리하도록 다음과 같이 코드를 작성하면 훨씬 더 깔끔하게 코딩할수 있습니다.. 

ViewController.swift

import UIKit

class ViewController : UIViewController
{
	...(중략)...
}

extension ViewController : UIImagePickerControllerDelegate
{
	...(중략)...
}
extension ViewController : UINavigationControllerDelegate
{
	...(중략)...
}

만약 여기에다 또 다른 델리게이트 패턴을 덧붙여야 한다면 ViewController 클래스를 수정할 필요 없이 다음과 같이 하나의 익스텐션만 더 추가해주면 끝입니다. 앞서 실습한 텍스트 필드의 델리게이트 패턴을 예로 들면 다음과 같습니다. 

ViewController.swift

import UIKit

class ViewController : UIViewController
{
	...(중략)...
}

extension ViewController : UIImagePickerControllerDelegate
{
	...(중략)...
}
extension ViewController : UINavigationControllerDelegate
{
	...(중략)...
}

extension ViewController : UITextFieldDelegate
{
	func textFieldDidBeginEditing(_ textField: UITextField) { ...(중략)... }
	func textFieldDidEndEditing(_ textField: UITextField) { ...(중략)... }
	...(중략)...
}

끝입니다. 실제 소스 코드를 보면 아까보다 훨씬 간결하게 정리되어 있다는 것을 알수 있을 겁니다. 게다가 이렇게 코드를 작성할 경우 한 가지 이점이 더 있습니다. 바로 점프바에 관한 것인데요. 점프바를 따라가다 보면 맨 마지막 단계에서는 항상 클래스 내에 정의된 메소드와 멤버변수들의 목록이 다음과 같이 출력됩니다. 

그런데 익스텐션을 통해 메소드를 성격별로 분리하면 점프바는 분리된 메소드를 나누어서 표현해주기 때문에 훨씬 알아보기 좋은 코드가 됩니다. 

한 가지만 더 욕심을 부려봅시다. 스위프트가 제공하는 주석인 // MARK:- 를 다음과같이 각 익스텐션 위에 달아보는 겁니다. 

ViewController.swift

import UIKit

class ViewController : UIViewController
{
	...(중략)...
}
// MARK:- 이미지 피커 컨트롤러 델리게이트 메소드
extension ViewController : UIImagePickerControllerDelegate
{
	...(중략)...
}
// MARK:- 내비게이션 컨트롤러 델리게이트 메소드
extension ViewController : UINavigationControllerDelegate
{
	...(중략)...
}
// MARK:- 텍스트필드 델리게이트 메소드
extension ViewController : UITextFieldDelegate
{
	func textFieldDidBeginEditing(_ textField: UITextField) { ...(중략)... }
	func textFieldDidEndEditing(_ textField: UITextField) { ...(중략)... }
	...(중략)...
}

다시 점프바를 열어 확인해 봅시다. 방금 우리가 추가한 주석과 함께 메소드 목록이 굉장히 보기 좋게 정돈된 것을 볼 수 있습니다. 

어떤가요, 이것만으로도 코드를 훨씬 깔끔하게 정리할수 있을것 같지 않나요? 실제로 현업 스위프트 개발자들은 상당수가 이처럼 익스텐션과 MARK 주석등의 요령을 활용하여 코딩하고 있습니다. 깃허브와 같은 유명 오픈소스 저장소에서 스위프트 관련 라이브러리를 내려받아보면 이런식으로 코딩되어 있는 경우가 매우 많죠. 여러분들도 이처럼 간결하고 깔끔하게 코드를 작성하는요령을 익히기를 바랍니다. 


이 장을 마치며
델리게이트 패턴에 관한 두 가지 예제를 학습해 보았습니다. iOS앱을 이루는 기본 아키텍처의 대부분은 델리게이트 패턴에 의존하고 있으므로 이를 이해하지 못하면 대부분의 기능을 제대로 구현하기 어렵습니다. 따라서 델리게이트 패턴이 처리되는 방식과 필요한 코드처리, 상호 의존 관계등을 철저히 이해하여 동작 원리를 익혀두어야 합니다. 

이로써 iOS앱 개발을 위한 기본 이론 과정이 모두 끝났습니다. 지금부터 만들어볼 앱은 영화에 관한 정보를 제공하는 앱입니다. 실시간으로 영화 차트 정보와 전국 영화관 정보를 제공하는 앱이죠. 여기에 더해서 상세 페이지를 통해 영화에 대한 자세한 정보를 살펴볼수 있게 해주고 지도를 통해 영화관이 위치한 곳을 살펴볼수 있게 해줄 겁니다. 이앱을 제작하는 모든 과정을 마치고 나면 여러분은 아래와같은 구조의 앱을 만나볼수 있습니다. 

앞에서 진행했던 내용보다 다소 어려워진 내용으로 인해 이해하기 어려울 수도 있겠지만 이는 내용 자체가 어려워서라기보다는 내용이 낯설기 때문인 경우가 많습니다. 필자가 실제로 강의해본 경험을 바탕으로 해보면 처음엔 모두가 앱 개발을 낯설고 어색해하지만 몇 번쯤 반복해서 만들다 보면 어느새익숙해진 스스로를 발견하면서 어려운 내용을 점점 이해해 나가는 경우가 대부분입니다. 포기하지 말고 여러 번 반복해서 학습해보시기 바랍니다. 책을 여러번 읽는 것보다 는 책을 따라서 직접 만들어보고 다음에는 가급적 책을 보지 않고 제작해보고 그 다음으로 책을 보지않고 제작해보는 과정을계속 하는 것이 중요합니다. 어느새 앱을 만들기 위해 해야하는 것들이 무엇인지 자연스럽게 떠오르테니까요. 

자 그럼 다음 장으로 넘어가 학습을 시작해봅시다.!






CHAPTER 08 : 테이블 뷰를 이용한 데이터 목록 구현
앱에서 제공하는 콘텐츠는 생각보다 방대한 경우가 많습니다. 수백개는 기본이고 수십만 개의 데이터를 보여주어야 하는 경우도 적지 않습니다. 만약 콘텐츠가 정리되어 있지 않아서 이들을 일일이 뒤져 원하는 정보를 찾아내어야 한다면 사용자는 원하는 정보를 얻기도 전에 지쳐버려 서 앱을 꺼버릴지도 모릅니다. 그렇다고 매번 검색을 통해서 데이터를 찾도록 하는 것은 터치 이벤트에 의존하는 사용자에게 무척 불편한 일일입니다. 방대한 콘텐츠를 앱을 통해 제공하고, 사용자가 효율적으로 콘텐츠에 접근할수 있도록 하려면 콘텐츠의 성격에 따라 앱의 구조와 UI를 고려해야 합니다. 

이때 사용되는 것이 테이블 뷰 컨트롤러입니다. 테이블 뷰 컨트롤러의 표면적 역할은 목록 형태의 콘텐츠를 화면에 표현해주는 것입니다. 하지만 그 역할을 자세히 들여다보면 계층 구조를 이루는 콘텐츠의 상위 카테고리를 정렬하여 표현함으로써 방대한 콘텐츠 속에서도 사용자가 원하는 항목에 쉽게 접근할수 있게 해주는 특성을 지니고 있습니다. 

테이블 뷰 컨트롤러와 내비게이션 컨트롤러는 계층적 성격의 콘텐츠를 표현해주기 위해 상호 보완적인 역할을 합니다. 테이블 뷰 컨트롤러를 이용하여 수평적 관계의 카테고리나 콘텐츠를 병렬로 배열하고, 수직적 관계로 세분한 정보들을 내비게이션 컨트롤러를 통하여 직렬로 표현하여 전체적인 앱의 콘텐츠 표현 구조를 구성하죠. 다음 그림은 테이블 뷰 컨트롤러와 내비게이션 뷰 컨트롤러가 상호 보완적으로 수직 수평적 데이터 구조를 구성하고 있음을 나타냅니다. 

검색 기능 없이 선택만으로 주소 찾기를 구현한 앱을 만든다고 가정해 보겠습니다. 전국 수백만 개의 주소를 모두 하나의 목록으로 나열하여 원하는 정보를 찾아가는 방법도 있겠지만 너무 불편하고 비능률적인 방법입니다. 수백만개의 데이터를 한꺼번에 화면에 표현하기 위해 사용해야 하는 메모리와 CPU 역시 무시 못할 부분이기도 합니다. 하지만 테이블 뷰 컨트롤러와 네비게이션 컨트롤러를 함께 사용하여 위 그림과 같이 계층적으로 구현한다면 수백만 개의 데이터를 노출하지 않고도 사용자가 쉽게 검색하도록 할 수 있습니다. 

일반적으로 알려진 정보 검색 알고리즘에 따르면, 가장 효율적인 정보 접근 방법은 콘텐츠를 성격에 따라 계층으로 구조화하는 것입니다. 계층으로 콘텐츠를 구조화하면 상위 카테고리 하나를 선택하는 과정만으로도 원하는 정보에 접근하는 것이 훨씬 단순해지기 때문입니다. 

이때 가장 고려해야 할 부분은 더 적은 횟수의 선택 과정으로 원하는 정보를 찾을수 있게 하는 것입니다. 이것이 바로 정보 검색 알고리즘의 핵심이자 앱을 만들 때 콘텐츠 구조를 설계하는 원칙입니다. 데이터베이스의 설계 원리에 선택도(Cardinality)라는 것이 있는데 특정 카테고리를 선택하여 나온 결과값의 개수가 적을수록 선택도가 높다고 표현하며 콘텐츠 분류가 잘 되었다고 할수 있습니다. 이처럼 선택도가 높게끔 주소 정보를 카테고리로 묶으려면 어떻게 해야할까요?

선택도를 높이고자 범주화하려면 주소 정보를 시/도 기준으로 분류하면 됩니다. 시/도 정보를 선택하는 과정이 추가되면 한 번의 선택 과정만으로 우리가 검색해야 할 주소 정보가 14분의 1로 줄어들기 때문입니다. 이것만으로도 선택도가 매우 높다고 할 수 있죠. 

계속해서 선택한 정보가 광역시라면 구 정보를 기준으로 도 단위라면 시 정보를 기준으로 분류함으로써 다시 수십분의 1로 대상을 줄일 수 있습니다. 다시 동 기준으로 분류하고 최종적으로는 동이 포함하는 주소만 나열하면 세 네 번의 선택 과정만으로 수백만 개의 콘텐츠를 백여단위로 줄일수 있습니다. 

테이블 뷰를 이용하여 화면을 구성할 때는 단순히 목록을 구성하는 데에 주력하는 것이 아니라 이러한 데이터 접근 구조에 대해서도 고려해야 합니다. 그러면서 사용자가 어떻게 하면 보다 손쉽게 원하는 콘텐츠에 접근할수 있을 것인가를 반영하여 화면 구조를 설계해야 합니다. 이 책에서는 주로 테이블 뷰를 이용하여 화면을 구성하는 기술적인 요소에 대한 설명에 많은 지면을 할애하지만 그 나머지 부분에 대해서는 독자 여러분이 만들고자 하는 앱을 기준으로 여러번 생각을 거듭하여 스스로 최적의 답을 찾을 필요가 있습니다. 



8.1 테이블 뷰 컨트롤러
테이블 뷰 컨트롤러는 뷰 컨트롤러를 바탕으로 만들어진 특수한 컨트롤러입니다. 테이블 뷰 컨트롤러에는 테이블 뷰가 루트 뷰로 정의되어 있는데 이 테이블 뷰는 목록 형식의 데이터를 화면에 표현하는 데에 사용됩니다. 그러니 테이블 뷰 컨트롤러는 화면 전체가 목록으로 이루어진 인터페이스를 구현할 때 사용하는 컨트롤러라고 할 수 있습니다. 

테이블 뷰를 이용하여 콘텐츠를 표현하는 경우는 매우 많습니다. 음악을 듣기 위해 사용하는 iTunes 앱의 재생목록에도 테이블 뷰가 사용되고, 설정 정보를 관리하기 위한 iOS 환경설정에 도 테이블 뷰가 사용됩니다. 카테고리를 선택하거나 작성된 메모의 목록을 보는 데에도 마찬가지입니다. 

테이블 뷰 컨트롤러의 계층 구조는 다음과 같습니다. 

하나의 화면을 의미하는 씬(Scene)은 보통 하나의 뷰 컨트롤러로 구성되는데 위 그림에서는 테이블 뷰 컨트롤러가 씬을 담당합니다. 일반적인 구조에서 뷰 컨트롤러는 MVC 패턴에 따라 콘텐츠를 직접 관리할 루트 뷰를 내부 계층 구조의 최상위에 둡니다. 우리가 화면으로 접하는 모든 컨트롤들은 이 루트 뷰 위에 배치된 것들입니다. 

위 그림에서 테이블 뷰가 바로 최상위 루트 뷰입니다. 테이블 뷰 컨트롤러에서 모든 콘텐츠는 테이블 뷰를 통해 표현되죠. 테이블 뷰는 목록을 구성하기 위한 객체이므로 여러 개의 행을 가질수 있습니다. 이 여러개의 행을 테이블 뷰 셀 이라고 합니다. 테이블 뷰 셀은 다시 내부에 콘텐츠 뷰를 가집니다. 우리가 실제로 화면에서 보는 목록 각 행의 내용은 저마다의 콘텐츠가 콘텐츠 뷰 내부에 적절히 배치된 결과물입니다. 이같은 계층 관계를 스토리보드 구조를 통해 보면 조금더 쉽게 알 수 있습니다. 


그런데 스토리보드에서 살펴본 구조에 따르면 문서 개요창에서 보이지 않았던 섹션(Section)항목이 더해져 있죠? 섹션은 하나의 테이블 뷰 내에서 셀들을 그룹으로 묶을 수 있는 단위입니다. 약간의 프로그래밍 기술이 요구되긴 하지만 하나의 테이블 뷰 내에서도 섹션에 따라 다른 주제로 분류된 데이터를 보여줄수 있습니다.음악 목록으로 표현하자면 추천 음악 목록, 내가 최근에 들은 음악 목록, 최근 발매 음반 등의 정보 그룹이 섹션으로 분류될수 있습니다. 

정리해봅시다. 하나의 테이블 뷰 컨트롤러 화면을 구성하는 단위는 다음과 같습니다. 

테이블 뷰 컨트롤러 > 하나의 테이블 뷰 > 여러 개의 테이블 뷰 섹션 > 여러 개의 테이블 뷰 셀 > 테이블 뷰 셀마다 하나씩의 콘텐츠 

테이블 뷰 컨트롤러를 추가하면 테이블 뷰가 자동으로 포함됩니다. 여기에 그대로 데이터를 채워 넣으면 손쉽게 목록 형태의 화면을 구현할수 있죠. 그러나 때에 따라서는 일반 뷰 컨트롤러에 테이블 뷰 객체만 직접 추가하여 화면을 구성하기도 합니다. 이런 경우에는 하나의 뷰 컨트롤러 내부에 여러 개의 테이블 뷰가 있을 수 있고 각 테이블 뷰마다 다시 여러 개의 섹션이 그 섹션 하위에 여러 개의 테이블 뷰 셀이 포함될수 있습니다. 

테이블 뷰 컨트롤러는 UIKit 프레임워크에 UITableViewController 클래스로 구현되어 있습니다. 이 클래스에는 델리게이트 패턴에 기반한 다양한 메소드가 정의되어 있는데 이들의 역할은 데이터를 이용하여 목록을 구성하고 목록에 대한 사용자와의 상호 반응을 지원하는 것입니다. 테이블 뷰 컨트롤러를 다루려면 이러한 메소드의 역할과 특성을 잘 이해하고 사용할수 있어야 하는 것은 물론 앞에서 배운 델리게이트 패턴에 대해서도 충분히 이해하고 있어야 합니다. 