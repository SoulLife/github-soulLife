Chapter03 화면상의 객체를 제어하는 방법
우리가 만든 첫 번째 앱인 Hello World에서 화면을 제어하기 위해 ViewController 클래스와 연결했던 두 객체를 기억할 겁니다. 각각 레이블과 버튼 컨트롤이었는데요. 약간의 차이는 있지만 레이블과 버튼을 클래스에 연결하는 방법은 비슷했습니다. 게다가 두 경우 모두 클래스에 IB***로 시작하는 키워드가 추가된다는 공통점이 있었습니다. 이번 장에서는 레이블과 버튼 각각에 붙은 @IBOutlet과 @IBAction이 두 개의 키워드가 의미하는 바에 대해서 자세히 알아 보고자 합니다. 

사실 이 두개의 키워드는 IB*로 시작할 뿐만 아니라 앞에 @표시까지 붙어있습니다. 이것을 프로그래밍 용어로 어노테이션(Annotation)이라고 하는데 주로 변수나 메소드의 성격을 알려주는 역할입니다. 단 작업자에게 알려주는 것이 아니라 컴파일러에게 일러주는 역할입니다. 

@IBOutlet은 프로퍼티에, @IBAction은 메소드에 각각 추가되는데 이 어노테이션이 붙어있는 프로퍼티나 메소드는 인터페이스 빌더에 관련된 것이라는 의미를 나타냅니다. 즉 인터페이스 빌더의 객체를 참조하는 프로퍼티이거나 인터페이스 빌더의 객체에서 일어나는 이벤트를 받는 메소드임을 표시하기 위해 두 개의 어노테이션이 사용되는 겁니다. 

여기에서 사용된 접두어 IB는 인터페이스 빌더(Interface Builder)를 의미합니다. iOS에서는 여러 개의 접두어를 이용하여 소속을 구분하는 식의 표기법을 즐겨 사용하는데 IB*는 인터페이스 빌더를 의미하는 접두어인 반면 NS*는 파운데이션 프레임워크(Foundation Framework)의 객체에 붙는 접두어입니다. 참고로 UI*는 UIKit프레임워크 객체에 붙는 접두어이며 CF* 접두어는 Core Foundation Framework라는 iOS 2계층 프레임워크 객체에 사용되는 접두어 입니다. 




3.1 @IBOutlet과 @IBAction
@IBOutlet과 @IBAction을 모아서 인터페이스 빌더 어노테이션이라고 부릅니다. 이 어노테이션이 붙은 프로퍼티나 메소드는 처음에 앱이 빌드될 때 컴파일러가 체크하고 연결 정보를 찾아 인터페이스 빌더의 객체와 서로 연결해 줍니다. 이와같이 연결된 정보들은 Xcode의 커넥션 어트리뷰트 탭에서 확인할수 있습니다. 인스펙터 탭 중에서 가장 마지막 탭이죠.

이 탭은 다른 인스펙터 탭과 마찬가지로 현재 활성화 되어있는 객체에 한해 정보를 보여주는 특성이 있습니다. 인터페이스 빌더에서 어느 객체가 활성화되어 있느냐에 따라 전혀 다른 결과를 볼 수도 있기 때문에 주의해야 할 부분이기도 합니다. 뷰 컨트롤러를 선택하면 뷰 컨트롤러내에서 연결된 모든 정보를 한꺼번에 확인할 수 있으므로 전체 연결 정보를 확인할 떄 편리합니다. 


3.1.1 @IBOutlet - 객체의 참조
@IBOutlet은 화면상의 객체를 소스 코드에서 참조하기 위해 사용하는 어노테이션입니다. 주로 객체의 속성을 제어할 목적으로 클래스의 프로퍼티에 연결하죠. 이때 인터페이스 빌더의 객체와 클래스의 프로퍼티는 서로 타입이 일치해야 합니다. 가령 인터페이스 빌더의 객체가 레이블이었다면 소스코드에서는 이 레이블과 동일한 객체 타입인 UILabel클래스 타입으로 정의되고 인터페이스 빌더의 객체가 버튼이었다면 소스코드에서는 UIButton 클래스 타입으로 정의되는 식입니다. @IBOutlet으로 정의된 프로퍼티를 우리는 아울렛 변수라고 부릅니다. 

아울렛 변수 연결의 기본은 인터페이스 빌더상의 객체를 보조 에디터의 클래스 위로 끌어다 놓는 것입니다. 이때 그냥 마우스 왼쪽 버튼을 누르고 쭉 끌어다 놓으면 인터페이스 빌더 상의 객체가 통째로 옮겨질 뿐 우리가 원하는 기능이 동작하지 않으므로 마우스 오른쪽 버튼을 눌러서 드래그하거나 또는 Ctrl키를 누른 상태에서 마우스 왼쪽 버튼을 누르고 드래그해 주어야 합니다. 팝업되는 연결 정보창에서는 [Connection]항목을 Outlet으로 선택하고 프로퍼티의 이름을 입력해주면 그 이름대로 프로퍼티가 생성됩니다. 

@IBOutlet 연결 시에 입력하는 내용과 관련하여 주의해야 할 항목이 있습니다. 제일 아래에 있는 [Storage]항목인데요 Strong/Weak 두 가지 값 중에서 선택할 수 있습니다. 

기본적으로는 Strong 타입의 값을 선택하면 되지만 Weak타입의 값을 선택하면 다음과 같이 @IBOutlet속성 변수의 정의 앞에 wesk 키워드가 추가됩니다. 

반면 Strong 타입으로 정의된 속성 변수는 아무 키워드도 추가되지 않습니다. 이는 속성 변수가 기본적으로 Strong 타입이라는 뜻입니다. Strong과 Weak 타입의 차이는 메모리 회수 정책에 있습니다. 일반적으로 변수나 상수는 다른 곳에서 참조되고 있을 경우 메모리에서 제거되지 않는 것이 원칙이지만 Weak 타입으로 선언된 변수나 상수는 다른 곳에서 참조되고 있더라도 시스템이 임의로 메모리에서 제거할수 있습니다. 이로 인해 Weak 타입으로 선언된 변수나 상수에서는 간혹 저장해둔 값이 사라지는 현상이 발생하기도 합니다. 분명히 값을 할당했음에도 어느 순간 이유 없이 변수나 상수의 값이 nil로 바뀌어 있다면 이는 Weak 타입으로 선언했기 때문일 가능성이 큽니다. 

지정된 값이 지워질 수도 있는 불안함에도 불구하고 Weak 타입이 필요한 이유는 메모리 관리 의 이슈 때문입니다. Strong 타입 객체들끼리 상호 참조되는 일이 발생하는 경우 어떤 경우에도 참조 카운트가 0이 되지 않으므로 애플리케이션이 실행되는 한 영원히 메모리에서 제거되지 않습니다. 이는 메모리 누수로 이어지죠. 이때 상호 참조되는 객체의 어느 한쪽을 Weak타입으로 지정하면 시스템에 의해 임의로 제거가 가능하므로 순환되는 상호 참조로부터 벗어날수 있습니다. 이 과정을 충분히 이해하려면 ARC(Auto Referencing Counter)의 구조나 원리에 대한 폭넓은 이해가 필요한데애플에서 제공하는 ARC관련 문서를 통해 확인할수 있습니다. 



3.1.2 @IBAction - 객체의 이벤트 제어
@IBAction 은 객체의 이벤트를 제어할 때 사용하는 어노테이션입니다. 버튼을 눌렀을 때 화면을 이동시키거나 메시지를 띄워 주는등 특정 객체에서 지정된 이벤트가 발생했을 때 우리가 의도하는 일련의 프로세스를 실행케 할 목적을 가집니다. 이를 위해 이 어노테이션은 메소드와 함께 사용되는데 우리는 이를 액션 메소드라고 부릅니다. 

버튼을 떠올려 봅시다. 버튼 객체는 배경 색상 크기 모양 선의 두께 텍스트 내용 노출 여부 등 정적인 상태를 표현할수 있는 요소인 프로퍼티(Property)와 터치 클릭 드래그 등 동적인 상태를 처리하는 메소드를 가지고 있습니다. 버튼의 외형 및 성질에 관한 값을 변경하려면 프로퍼티와 함께 사용되는 @IBOutlet을 사용해야 하고 사용자의 액션이 발생했을 때 수행해야 하는 작업이 있다면 메소드와 함께 사용되는 @IBAction어노테이션을 사용해야 합니다. 

단 대부분의 객체와 연결할 수 있는 아울렛 변수와 달리 액션 메소드는 버튼이나 테이블 셀 등 사용자와 상호 반응할수 있는 객체를 연결할 때만 사용할수 있다는 제한이 있습니다. 액션 메소드를 생성하는 방법은 아울렛 변수를 생성하는 과정과 동일하지만 연결 시 팝업되는 설정 창에서 [Connection]항목을 Action으로 선택해 주어야 한다는 차이도 있죠. 실행 결과로 프로퍼티가 아니라 메소드가 생성된다는 점도 다른 점으로 꼽을수 있습니다. 

액션 메소드를 생성할 때 설정해야 하는 항목이 하나 더 있습니다. 다양한 이벤트 중에서 어떤 것을 감지하여 실행할 것이냐에 대한 것이죠. 

프로그래밍에서 이벤트란 객체와 사용자 사이에 발생하는 상호 반응(버튼 터치, 드래그, 쓸어넘기기 등)을 말합니다. iOS에서 제공하는 이벤트에는 여러 가지 종류가 있는데 특히 버튼 관련 터치 이벤트만으로도 굉장히 종류가 다양합니다. 이처럼 이벤트 종류가 다양하다는 것은 앱이 사용자와 상호반응할 수 있는 기능이 풍부하다는 의미를 가집니다. 

iOS의 모든 객체가 똑같은 이벤트를 지원하는 것은 아닙니다. 객체에 따라 지원하는 특정 이벤트들이 나뉘는데 이들 객체가 지원하는 이벤트 목록은 커넥션 인스팩터(Connections Inspector)에서 확인할수 있습니다. 인터페이스 빌더에서 선택된 객체가 이벤트를 지원하면 커넥션 인스펙터에서 [Sent Events]영역에 목록으로 표시되죠. 

다음 그림에서 표시된 목록은 버튼이 지원하는 이벤트 종류들입니다. 다시 말해 이들 각각의 이벤트에 대한 액션 메소드를 생성할 수 있다는 겁니다. 

버튼이나 테이블 셀처럼 상호 반응이 가능한 객체일 경우 연결 정보창에서 [Connection]항목을 Action 타입으로 선택하면 그림과 같이 이벤트 종류를 고를수 있는 [Event]항목이 나타납니다. 이 중에서 원하는 이벤트를 선택하여 연결하면 자동으로 해당 이벤트에 연결된 액션 메소드가 클래스에 생성됩니다. 

정리해 봅시다. 객체에 대한 속성이나 이벤트를 클래스 파일과 연결할 때 속성은 Outlet으로 연결하고 이벤트는 Action으로 연결합니다. 객체를 클래스 파일에 연결하면 소스 코드에 @표시와 함께 @IBOutlet이나 @IBAction어노테이션이 붙으므로 컴파일러는 해당 변수나 메소드가 인터페이스 빌더와 연결된 것임을 파악할수 있습니다. 

연결 용도			설정창 항목		소스코드 결과
객체의 속성을 제어할때	Outlet 선택		@IBOutlet 프로퍼티
객체의 이벤트를 연결할 때	Action 선택		@IBAction 메소드

물론 이런 내용을 일일이 외워서 코드로 직접 작성할 필요는 거의 없습니다. 앞에서 했던 작업처럼 인터페이스 빌더에서 객체를 선택하고 드래그하여 클래스 파일로 연결하면서 연결 방식만 선택하면 속성이든 메소드이든 알아서 추가되기 때문입니다. 물론 @IBAction 또는 @IBOutlet 어노테이션들과 함께 말이죠. 


3.2 인터페이스 빌더 객체와 클래스를 연결하는 방법
인터페이스 빌더상의 객체를 클래스 프로퍼티나 메소드로 연결하는 가장 손쉬운 방법은 Hello World 프로젝트에서 했던 것처럼 인터페이스 빌더에서 선택한 객체를 클래스 파일로 드래그하는 것입니다. 하지만 이외에도 Xcode에서 객체를 클래스에 연결하는 방법은 다양합니다. 종종 인터페이스 빌더의 객체와 클래스를 연결할 때 기본 방법을 사용하기 쉽지 않은 경우가 있는데 이때 이외의 방법들을 사용하면 손쉽게 연결할수 있습니다. 인터페이스 빌더로부터 객체를 클래스에 연결하는 다양한 방법을 알아봅시다. 