14.1.1 오토 리사이징(Auto-Resizing)
번역하자면 자동 크기 조절인 오토 리사이징은 비교적 단순한 인터페이스에서 유용하게 적용할수 있는 레이아웃 제어방식으로, 직관적인 인터페이스를 통해 설정할수 있으므로 사용하기가 아주 쉬운 것이 장점입니다. 오프라인 수업에서 실제로 기능을 보여주면 이해시키는 데에 1분여 밖에 걸리지 않을 정도죠. 

오토 리사이징 기능을 실습하기 위해 프로젝트를 하나 생성하겠습니다. 다음 정보를 참고하여 프로젝트를 정의합니다. 

[프로젝트 정보]
※ Product Name : AutoResizing-Practice
※ Language : Swift
※ Device : iPhone
※ Use Core Data : 체크 해제
※ Template : Single View Application




※ 기본 화면 구성
STEP1 : 프로젝트가 생성되면 Main.storyboard 파일을 열어 기본 뷰 컨트롤러의 사이즈를 다음과 같이 설정합니다. 이미 이렇게 설정되어 있다면 넘어갑니다. (iPhone8과 Orientation:세로모드)


STEP2 : 뷰 컨트롤러에 두 개의 뷰를 추가하고 아래 그림을 참고하여 나란히 배열하고 크기를 조절합니다. 추가한 뷰를 식별할수 있도록 [Background]속성에 적당한 값을 주어 배경 색상을 지정합니다. 책에서는 잘 표현되지 않았을지도 모르겠지만 저는 왼쪽 뷰에 파란 색을, 오른쪽 뷰에 자주색을 지정했습니다. 

오토 리사이징을 실습해보기 전에 먼저 기기별 레이아웃 상태를 점검해 보겠습니다. 시뮬레이터의 기기 설정을 바꾸어가면서 프로젝트를 실행해 봅시다. 다음과 같이 디바이스별 화면 크기에 따라 레이아웃이 조금씩 다르게 표현되는 것을 볼 수 있을 겁니다. 

이렇게 기기별로 제각각인 레이아웃을 오토 리사이징을 이용하여 조절해 봅시다. 오토 리사이징 기능은 인스펙터 탭 중 다섯번째 탭에 있으며 다음의 방법을 사용해서 열 수도 있습니다. 

뷰가 선택된 상태에서 
※[View]메뉴 > [Inspectors] > [Show Size Inspector]
※<Option> + <Command> + <5>

위 그림에서 표시된 부분이 바로오토 리사이징 기능입니다. 자세히 살펴봅시다 


설정 창 왼쪽에는 사각형두 개가 중첩되어 있습니다. 두 사각형 내부에 표시된 화살표와 간격 기호들은 선택된 객체와 상위 뷰의 관계를 나타냅니다. 바깥쪽 정사각형은 객체를 포함하고 있는 상위 뷰를 의미하고 안쪽 사각형은 선택된 객체를 의미하죠. 안쪽 사각형과 바깥쪽 사각형 사이의 전후좌우, 그리고 안쪽 사각형의 내부에 있는 너비와 높이에는 간격이 표시되어 있는데, 토글(Toggle)형식이므로 한 번 클릭하여 활성화하고 다시 한번 클릭하여 비활성화할 수 있습니다. 

안쪽 사각형과 바깥쪽 사각형 사이의 간격 표시가 활성화된 상태는 간격이 고정됨을 의미합니다. 위 그림처럼 두 사각형 사이의 위쪽(1과 왼쪽2)간격 표시가 활성화되어 있을 때는 화면 크기와 관계없이 객체의 위쪽 및 왼쪽 간격이 그대로 유지된다는 뜻입니다 

내부의 사각형에 표시된 가로와 세로는 의미가 다릅니다. 화면의 크기가 늘어날 때 객체의 크기가 함께 늘어남을 의미하죠. 따라서 화면 크기에 따라 객체의 크기가 자연스럽게 늘어가도록 하려면 외부 사각형에서의 적절한 간격 설정과 함께 내부의 너비와 높이 표시를 활성화해야 합니다. 이처럼 오토 리사이징은 내부 사각형과 외부 사각형의 간격과 크기 설정을 조합하여 원하는 결과를 만들어 낼 수 있습니다. 

언뜻 보면 복잡한듯 느껴지지만 실제로 해보면 이해하기가 어렵지 않습니다. 직관적인 인터페이스로 구성된 미리 보기 기능 때문입니다. 오른쪽에 보이는 영역이 그것인데, 마우스를 왼쪽의 레이아웃 설정용 간격 위로 올리면 오른쪽 미리보기 영역에 있는 사각형 객체의 크기가 움직이면서 레이아웃이 어떤 식으로 변화할지를 보여줍니다. 이를 참고하면 오토 리사이징 옵션에 대해 바로 이해할수 있을 뿐만 아니라 우리가 원하는 레이아웃을 설정하기 위해 어느 부분의 간격을 활성화 또는 비활성화해야 할지 판단할수 있습니다. 

우리가 생성한 프로젝트에서는 화면 너비가 늘어남에 따라 두개의 뷰가 서로의 간격을 유지한채로 사이좋게 늘어나야 합니다. 또한 화면이 줄어들 때도 사이좋게 줄어들어야 합니다. 그래야 화면이 늘어난다고 해서 쓸데없는 여백이 생기거나 객체가 잘려 보이는 현상이 발생하지 않을테니까요. 이와 함께 양쪽 뷰의 간격도 유지되어야 합니다. 화면이 줄어들었을 때 각자 뷰의 너비를 유지하기 위해 서로를 덮거나 간섭하는 현상이 생기면 안 됩니다. 

이같은 요구조건을 만족하려면 다음과 같은 오토 리사이징 설정이 필요합니다. 


뷰 컨트롤러에 추가된 각각의 뷰를 부르기 쉽도록 차례대로 A, B라고 해 봅시다. 뷰 A는 위아래와 왼쪽의 간격을 고정하고, 가로 너비가 유동적으로 늘어나도록 설정합니다. 뷰 B는 위아래와 가로 너비를 뷰 A와 동일하게 설정하되 왼쪽이 아닌 오른쪽 간격을 고정합니다. 그결과로 우리는 제법 개선된 레이아웃을 얻을수 있습니다. 다음은 시뮬레이터를 통해 오토 리사이징 설정 효과를 확인한 모습입니다. 

가로 너비는화면 사이즈에 따라 적절한 크기로 유지되는 반면객체의 세로 길이가 임의로 늘어나고 줄어들어 마음에 들지 않는다면 오토 리사이징에서 세로 높이에 대한 설정을 활성화하면 됩니다. 약간의 차이는 있겠지만 화면 크기가 늘어남에 따라 알아서 세로 높이가 맞추어질 겁니다. 

실제로 실행해 보면 화면 크기가 달라져도 레이아웃이 잘 유지됩니다.  그렇다면 가로 모드에서 는 어떨까요? 시뮬레이터의 메인 메뉴에 보면 [Hardware]의 하위에 [Rotate Left]와 [Rotate Right]메뉴가 있는데 이를 선택하면 시뮬레이터를 가로로 회전할수 있습니다. 이 기능을 이용하여 가로 모드에서의 레이아웃을 살펴봅시다. 

결과 화면은 다음과 같습니다. 역시나 가로모드에서는 제대로 대응하지 못하는 모습입니다. 단 순히 대응이 문제가 아니라 아예 원하는 형태를 보여주지 못하는 상태라고 할 수 있네요. 

불행하게도, 이것이 오토 리사이징의 한계입니다. 레이아웃 설정 자체가 어렵지 않은 만큼 비교적 간단한 객체라면 손쉽게 레이아웃 처리가 가능하지만 아래와 같이 두개 이상의 뷰로 이루어진 복잡한 형태이거나 혹은 가로세로의 간격을 정확하게 맞추어야 하는 레이아웃이라면 오토리사이징만으로는 어렵습니다. 


그래서 iOS는 더 강력하고 세밀하게 레이아웃을 제어하기 위해 새로운 기능을 도입했는데 이것이 바로 오토 레이아웃입니다. 이어지는 절에서는 오토 레이아웃에 대해 알아보겠습니다. 




14.1.2 오토 레이아웃(Auto Layout)기능
오토 리사이징을 대체하기 위해 도입된 오토 레이아웃은 오토 리사이징만큼 직관적이지도 사용하기 쉽지도 않습니다. 하지만 기능만큼은 매우 강력해서 오토 레이아웃을 이용하여 설정한 화면 인터페이스는 여러 종류의 디바이스 화면에 효율적으로 대응할수 있습니다. 

Xcode 에서는 선택적으로 오토 레이아웃을 사용할지 말지 결정할수 있는데, 오토 레이아웃을 사용하려면 옵션 설정이 필요합니다. Xcode 인스펙터 탭의 첫 번째에 있는 파일 인스펙터는 스토리보드 전반에 대한 정보를 설정하는 영역으로 여기에서 [Use Auto Layout]옵션에 체크를 해 주어야 합니다. 만약 이옵션이 체크되어 있지 않다면 오토 레이아웃 기능은 사용할수 없습니다. 

오토 레이아웃은 객체들 사이의 제약 조건을 차례대로 추가하는 방식으로 구성됩니다. 따라서 오토 레이아웃을 추가하기 전에 먼저 화면상의 각 객체들이 가질 제약 조건을 먼저 정리해야 합니다. 뷰 컨트롤러에 세 개의 뷰가 그림과 같이 있다고 했을 때 디바이스별 레이아웃 및 가로세로 모드에서의 레이아웃을 처리하기 위해 필요한 각 뷰들의 제약 조건을 정의해 보면 다음과 같습니다. 


1. 뷰A는 위쪽과 왼쪽 간격이 유지되어야 한다.
2. 뷰 B는 위쪽과 오른쪽 간격이 유지되어야 한다.
3. 뷰 C는 아래쪽과 왼쪽, 오른쪽 간격이 모두 유지되어야 한다.
4. 뷰 A와 B는 가로 , 세로 길이가 같게 유지되어야 한다.
5. 뷰 A와 C는 세로길이가 같게 유지되어야 한다.
6. 뷰 A와, B 그리고 C는 모든 뷰 간격을 유지해야 한다. 

제약 조건이 반드시 단일 객체에만 설정되는 것은 아닙니다. 필요에 따라서는 두 개 이상의 객체 사이관계에 대한 제약 조건도 설정할수 있습니다. 이같은 제약 조건들이 빈틈없이 채워지고 나면 오토 레이아웃은 이 조건들을 바탕으로 하여 화면 사이즈가 변하는 상황에서 적절한 레이아웃을 계산하고 유지하는 작업을 처리합니다. 


1~6 까지의 제약 조건을 바탕으로 하여 오토 레이아웃을 설정해 봅시다. 

STEP1 : 뷰 A를 선택하고 마우스 오른쪽 버튼(또는 <Ctrl> + 마우스 왼쪽 버튼)을 누른 채로 뷰 A와 뷰 컨트롤러 사이 왼쪽 여백 위로 드래그합니다. 

STEP2 : 뷰 컨트롤러의 여백 위에서 클릭하고 있던 마우스 버튼을 놓습니다. 그러면 다음과 같은 팝업창이 표시됩니다. 


STEP3 : 맨 위에 있는 [Leading Space to Safe Area]메뉴를 선택합니다. 뷰 A에 대한 왼쪽 간격을 고정하는 제약 조건이 추가됩니다. 

왼쪽 간격에 대한 제약 조건이 추가되면 그 자리에는 그림에 표시된 것과 같은 가이드라인이 표시됩니다. 간격을 고정하기 위한 일종의 핀 역할이죠. 이는 화면 크기와 관계없이 현재의 간격이 유지됨을 의미합니다. 객체의 주변에 추가된 핀은 평소엔 숨겨져 있다가 객체가 활성화되었을때 다시 표시됩니다. 

추가된 제약 조건은 스토리보드에서뿐만 아니라 문서 개요창에서도 확인할수 있습니다. 이 정보는 제약 조건을 뜻하는 [Constraints]항목으로 표시됩니다. 

위 그림에서 표시된 부분이 추가된 제약 조건입니다. 제약 조건을 추가할 때마다 이 위치 혹은 해당 객체 하위에 자동으로 추가됩니다. 그런데 문서 개요창 상단의 뷰 컨트롤러 표시옆에 빨간오류 표시가 있는 것이 마음에 걸리는 분들이 있을 겁니다. 이 오류는 무엇인가 문제가 있다는 뜻으로, 보통 오토 레이아웃을 설정하기 시작하면 나타났다가 모든 레이아웃 설정이 정상적으로 끝나면 사라집니다. 때로는 노란색 경고가 표시되기도 하죠. 

표시된 오류를 클릭하면 오류 내용을 더 상세하게 볼 수 있습니다. 다음은 오토 레이아웃에 대한 상세 오류 정보입니다. 

그림 14-23에 따르면, 제약 조건에 관한 오류는 모두 두 개입니다.(여러분의 화면에서는 약간 차이가 있을 수도 있습니다.) 각각의 오류는 Need Constraints for, 즉 레이아웃 관계 설정이 더 필요하다는 내용이네요. 이것은 설정된 제약 조건이 부족하여 레이아웃을 안정적으로 구성할수 없으니 제약 조건을 더 설정해 주세요. 라는 의미입니다. iOS는 해당 객체에 설정된 모든 제약 조건을 확인하고 ,화면 크기 변경에 어떻게 대응해야 할지 논리적으로 추론합니다. 이를 위해서는 충분한 제약 조건이 뒷받침되어야 하죠. 추론할수 있을 만큼 제약 조건이 추가되지 않았을 경우 이같은 오류 메시지가 계속 표시됩니다. 



질문!! 문서 개요창에 나타나는 모습이 좀 다릅니다. 저는 그냥 View라고만 표시되는데요, 왜 책에서는 뷰 A처럼 표시되나요?
간단합니다. 레이블을 입력해 주었기 때문입니다. 뷰의 레이블을 설정하면 위 그림처럼 입력한 레이블명이 문서 개요창에 표시되므로 객체들을 구분하기가 더 쉽습니다. 

입력 속성은 아이덴티티 인스펙터 탭에 있습니다. 인스펙터 탭 중에서 세 번째 항목이죠. 스토리보드에서 뷰를 선택한 상태로 어트리뷰트 인스펙터 탭을 열면 다음 그림과같은 설정창이 나오는데 여기서[Document] > [Label]항목에 표시할 이름을 기재하면 됩니다. 여기서 기재한 이름이 문서 개요창에도 똑같이 적용됩니다. 

계속해서 제약 조건을 추가해 봅시다. 이번에는 뷰 A와 상단의 간격을 고정하겠습니다. 

STEP1 : 뷰 A를 선택하고 마우스 오른쪽 버튼(또는 <Ctrl> + 마우스 왼쪽 버튼)을 누른상태에서 뷰 A와 뷰 컨트롤러 사이 위쪽 여백으로 드래그합니다. 

STEP2 : 뷰 A의 위쪽 여백 위에서 마우스 드래그를 중지합니다. 이어서 다음과 같은 팝업창이 다시 표시됩니다. 

STEP3 : [Top Space to Safe Area]를 선택합니다. 뷰 A의 위쪽 간격에 대한 제약 조건이 추가되면서 다음 그림과 같이 간격 표시가 나타납니다. 

간혹 위와 같은 모습이 아니라 아래와 같이 제약 조건이 표시되는 경우가 있습니다. 

제약 조건의 표시에 이와 같은 차이가 나는 것은 애플 UI 가이드에서 말하는 안전 영역(Safe Area)과의 간격 때문입니다. 만약 우리가 추가한 객체와 안전 영역 사이에 설정된 간격이 제로라면 그림 14-29와 같이 기준선으로 표시되지만 조금이라도 간격이 있다면 그림 14-28의 H빔과 같은 형태로 표시되는 것이죠. 

이와같은 내용은 문서 개요창에서도 쉽게 확인할수 있습니다. 안전 영역과 객체 간 간격이 있을 때에는 그림14-30의 왼쪽 그림처럼 제약 조건에 +26 처럼 추가 항목이 붙거든요. 아 물론 여러분이 설정한 뷰의 크기에 따라서 간격값은 달라질수 있습니다. 

다만 이것은 안전 영역과의 간격 여부에 따른 단순 표시 차이일 뿐이며 실제 앱 제작 과정에서 는 구현할 UI를 기준으로 안전 영역과의 간격을 설정하면 됩니다. 


질문!! 안전 영역이란 무엇인가요?
안전 영역(Safe Area)은 UI 구현시 iOS의 상태바 등과 겹치지 않도록 하기 위해 제공되는 일종의 기준선으로 겹치지 않게 화면을 구현하고 싶다면 가급적 지켜주어야 할 최소한의 영역입니다. UI상에 객체를 배치할 때 화면과 객체 사이의 기준 간격을 제공하는 역할을 하죠. 

iOS 개발 초기에는 우리가 커스텀으로 구현한 UI가 상태 바(Status Bar)나 내비게이션 바(Navigation Bar), 그리고 탭바(Tab Bar)등 UIKit 에서 제공하는 각종 바에 의해 가려지는 경우가 많았습니다. 이를 방지하기 위해 애플은 iOS7 에서부터 UIViewController의 속성에 TopLayoutGuide과 BottomLayoutGuide 등의 레이아웃 가이드요소를 추가하여 화면 구현시 가이드라인으로 사용할수 있도록 지원하기 시작했죠. 하지만 이들 가이드 요소가 여러 개로 나뉜데에 따른 불편함이 계속 제기되면서 iOS 11부터는 이들 가이드 요소들이 모두 하나의 통합된 안전 영역 레이아웃 가이드(Safe Area Layout Guide)로 대체된 것입니다. 

안전 영역을 확인할수 있는 방법은 간단합니다. 스토리보드를 열고 Xcode 메뉴에서 [Editor] > [Canvas] > [Show layout Rectangles]를 선택하면 됩니다. 빈 화면의 가장자리를 따라 약간의 여백을 두고 파란색 가이드 라인이 표시될 텐데요. 이것이 바로 안전 영역입니다. 

iOS 11 기준으로 안전 영역은 가장자리를 따라 좌우측0 포인트, 상하단 20포인트의 간격으로 지정됩니다. 다시 말해 화면 좌우로는 가장자리 끝이, 상하단으로는 20포인트까지가 안전 영역에 해당한다는 거죠. 따라서 만약 화면 상단의 안전 영역에 맞추어 객체를 배치한다면 해당 객체의 y 좌표 위치는 20포인트로 설정될 겁니다. 

다만 실제 좌표 위치가 20포인트라 하더라도 제약 조건상에서 안전 영역의 20포인트는 +20이 아니라 Safe Area.top으로 표시되는 점에 주의해야 합니다. Safe Area.top 이라는 용어 자체가 상단 가장자리와의  20포인트 간격을 의미하는 것이라고 할 수 있습니다. 

굳이 메뉴 설정을 통해 안전 영역을 표시하지 않고도 또다른 방법으로 확인할수 있습니다. 뷰 컨트롤러에 레이블이나 버튼 등 아무 객체나 추가해서 가장자리 쪽으로 드래그 해 봅시다. 객체가 가장자리와 어느정도 가까워지는 순간 화면에 파란 색으로 연한 점선이 그어질 텐데요. 이것이 바로 안전 영역을 나타내는 가이드라인입니다. 

이야기가 잠시 다른곳으로 새었네요. 조금 전과 동일한 방식으로 뷰 B의 제약조건을 추가해 주겠습니다. 추가할 제약 조건은 다음과 같습니다. 

※ 뷰 B의 제약 조건
- 위쪽 간격 고정(Top Space to Safe Area)
- 오른쪽 간격 조정(Trailing Space to Safe Area)
위쪽 간격에 대한 제약 조건을 추가하는 요령은 뷰 A와 같으므로 오른쪽 간격을 설정하는 방법에 대해서만 알아봅시다. 
