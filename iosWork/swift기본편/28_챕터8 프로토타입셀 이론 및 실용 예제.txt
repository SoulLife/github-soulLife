8.2 프로토 타입 셀
프로토타입 셀(Prototype Cell)은 테이블 뷰의 셀을 원하는 대로 쉽게 디자인할 수 있도록 해주는 객체로 테이블 뷰를 설계하는 데에 걸리는 시간과 노력을 대폭 줄여줍니다. 프로토타입 셀은 버튼이나 텍스트 레이블과 달리 직접 데이터를 표시하거나 화면에 공간을 차지하지는 않습니다. 그저 테이블 뷰가 화면에 표현될 때 셀의 구성을 미리 보여주기 위한 가상 틀에 불과합니다. 

※ 프로토타입 셀 영역
프로토타입 셀은 사용자가 테이블 뷰의 구성을 쉽게 인지할수 있도록 몇 개의 영역으로 나누어져 있으며 각 영역은 그에 맞는 역할을 담당합니다. 다음 그림은 일반적인 테이블 뷰에서 사용되는 프로토타입 셀의 영역 분할을 보여줍니다. 

위 그림에 따르면 프로토타입 셀은 우선크게 두 개의 영역으로 구분됩니다. 

※ Cell Content : 셀에 표현될 콘텐츠
※ Accessory View : 콘텐츠의 부가 정보 여부를 암시

우리가 일반적으로 프로토타입 셀을 이용하여 콘텐츠를 표현할 때의 작업 대부분은 CellContent 영역에서 이루어집니다. 앱이 실행되는 모바일 디바이스에 따라 가로 너비가 달라질 경우 테이블 뷰의 길이도 적절히 변경되어야 하는데 이때 Accessory View 영역은 너비가 고정값을 유지하는 반면 Cell Content 영역은 가변적인 너비값으로 처리됩니다. 화면이 넓어지면 더 넓게 화면이 좁아지면 좁게 처리된다는 뜻이죠. 따라서 Cell Content 영역에 콘텐츠를 배치할 때는 기기에 따른 가로 길이의 변화에도 신경써야 합니다. 큰 화면의 기기만을 생각하고 콘텐츠를 배치하면 상대적으로 작은 크기의 기기에서는 콘텐츠가 잘려서 나타나는 참극이 벌어질수도 있습니다. 

위 그림이 큰 범위에서 구분한 셀 영역을 보여주었다면 다음 그림은 Cell Content 영역에 대한 세부 분할 영역을 보여줍니다. Cell Content 영역은 내부적으로 다시 그림이나 사진 등 이미지 콘텐츠를 표현하는 Image 영역과 텍스트를 표현하는 Text 영역으로 나뉩니다 

프로토타입 셀은 이처럼 자동으로 이미지나 텍스트 콘텐츠를 삽입할수 있는 속성이 제공되므로 우리가 할일은 단순합니다. 이미지 속성에 이미지 콘텐츠를 텍스트 속성에 텍스트 콘텐츠를 넣어주면 그뿐입니다. 적절한 콘텐츠 소스만 제공하면 iOS 시스템이 콘텐츠를 화면에 알아서 배치한 다음 표현해 주기 때문입니다. 




※ 표준 편집 인터페이스
아이폰에 있는 전화번호부는 테이블 뷰를 사용하여 전화번호 목록을 표현하는데 여기에는 사용자가 전화번호를 삭제하거나 수정할수 있는 기능이 있습니다. 이처럼화면에 콘텐츠를 보여주기만 하는 것이 아니라 콘텐츠 자체에 대한 편집이 필요한 경우를 위해 코코아터치 프레임워크에서는 프로토타입 셀에 다음 그림과 같은 표준 편집 인터페이스를 제공합니다. 

목록에서 단순히 행을 삭제하기 위한 목적이면 오른쪽의 Reordering Control 영역에 제공되는 삭제 버튼만 사용하면 되지만 복합적인 편집 기능을 제공해야 할 때는 위 그림과 같은 표준 인터페이스를 모두 사용합니다. 행을 추가하거나 삭제하는 기능은 Editing Control 영역에 빨간색 마이너스(-) 아이콘이나 초록색 플러스(+) 버튼으로 제공되며, Reordering Control 영역에는 셀의 순서를 재배치하는 컨트롤이 제공됩니다. 

다음은 iOS에서 기본으로 제공하는 음악 앱에서 재생 목록을 편집하기 위해 사용한 표준 편집 인터페이스 입니다. 

이처럼 프로토타입 셀은 여러 가지 기능을 갖추고 있을 뿐만 아니라 우리가 원하는 내용을 목록으로 구현하는 데 없어서는 안될 필수 요소이기도합니다. 우리는 이번 장을 통해 프로토타입 셀의 여러 가지 기능을 충분히 익힐수 있어야 합니다. 




8.2.1 프로토타입셀을 이용한 테이블 뷰 실습
프로토타입 셀을 이용하여 테이블 뷰를 구성하는 실습을 진행해 봅시다. 참고로 이번 장부터 진행되는 실습은 각 단계를 거치면서 점차 테이블 뷰의 기능을 추가해 나가는 방향으로 진행됩니다. 중간을 건너뛰면 갑자기 나타난 낯선 내용에 당황할수도 있으니 차근차근 따라서 함께 앱을 만들어 보길 바랍니다. 

생성할 프로젝트 정보는 다음과 같습니다. 

[프로젝트 정보]
※ Product Name : MyMovieChart
※ Language : Swift
※ Device : iPhone
※ Use Core Data : 체크 해제
※ Template : Single View Application


※ 화면 설계
STEP1 : Main.storyboard 파일을 열고 기본 뷰 컨트롤러를 삭제합니다. 

뷰 컨트롤러를 삭제하는 방법은 간단합니다. 뷰 컨트롤러를 선택하고 <Delete> 키를 누르면 됩니다. 혹은 선택한 상태에서 Xcode 메뉴에서 [Edit] > [Delete]를 차례로 선택해도 뷰 컨트롤러를 삭제할수 있습니다. 

STEP2 : 라이브러리 창에서 테이블 뷰 컨트롤러를 찾아 스토리보드로 추가합니다. 

앞장에서도 이미 언급한 내용이지만 그림에 보이는 모든 뷰 컨트롤러의 크기는 iPhone 8에 맞추어진 것입니다. 사이즈 설정을 위해서는 인터페이스 빌더 하단의 View as 항목을 열고 그림과 같이 선택하면 됩니다. 앞으로 컨트롤러 크기에 대한 언급이 없더라도 항상 이 사이즈를 전제로 실습을 진행함을 염두에 두세요. 


STEP3 : 추가된 테이블뷰 컨트롤러를 시작 뷰 컨트롤러로 설정합니다. 

시작 뷰 컨트롤러는 앱이 실행될 때 맨 처음 읽어 들일 뷰 컨트롤러입니다. 앱의 첫 화면이라고 생각하면 됩니다. 일반적으로 프로젝트를 생성하면 기본 뷰 컨트롤러가 시작 뷰 컨트롤러로 지정되지만 필요에 따라 시작 뷰 컨트롤러 지정을 삭제하거나 다른 뷰 컨트롤러를 시작 뷰 컨트롤러로 지정할수 있습니다. 시작 뷰 컨트롤러로 설정된뷰 컨트롤러는 스토리보드에서 아래 그림과 같이 화살표가 붙은 상태로 표시됩니다. 


시작뷰 컨트롤러를 의미하는 이 화살표는 드래그 앤 드롭(Drag & Drop)이 가능하므로 다른 뷰 컨트롤러를 시작 뷰 컨트롤러로 지정하고 싶다면 화살표를 드래그하여 원하는 뷰 컨트롤러 앞에 가져다 놓으면 됩니다. 근처에만 가져다 놓으면 마치 자석처럼 뷰 컨트롤러에 찰싹 달라붙을 겁니다. 

그런데 지금처럼 시작 뷰 컨트롤러를 아예 삭제해 버린 경우에는 화살표도 함께 사라집니다. 때문에 드래그 방식으로 시작뷰 컨트롤러를 지정해 줄 수가 없습니다. 이럴 때는 어트리뷰트 인스펙터의 속성을 통해 시작 뷰 컨트롤러를 지정할수 있는데, 원하는 뷰 컨트롤러를 선택한 다음에 어트리뷰트 인스펙터(Attribute Inspector)에서 [Is initial View Controller]항목을 체크 하면 됩니다. 그러면 시작 뷰 컨트롤러를 의미하는 화살표가 선택된 뷰 컨트롤러가 나타나는 것을 확인할수 있습니다. 



STEP4 : 테이블 뷰 리스트에 연결될 커스텀 클래스 파일 ListViewController.swift를 추가합니다. 

신규 파일을 추가하려면 Xcode의 메뉴에서 [File] > [New] > [File]을 차례로 선택하면 됩니다. 단축키 <Command> + <N> 을 눌러도 같은 결과를 얻을수 있습니다. 

파일 템플릿 선택 창이 열리면 상단에서 [iOS]를 선택하고 아래에 차례로 나타나는 항목들 중에서 [Swift File]을 선택합니다. [Cocoa Touch Class]항목을 선택해도 스위프트 파일을 추가할수 있지만 학습을 위해서는 그냥 [Swift File]을 추가하는 것이 좋습니다. 이어서 파일 이름 입력창이 나타나면 ListViewController.swift 라고 입력하여 파일 추가를 마무리합니다. 

이렇게 추가된 파일에 스토리보드의 테이블 뷰 컨트롤러에 대응하는 커스텀 클래스를 작성할 겁니다. 커스텀 클래스를 작성하는 과정은 앞 장에서 해보았던 것과 거의 동일하지만 이번에는 UIViewController클래스 대신 UITableViewController 클래스를 상속받아야 한다는 점이 다릅니다. 우리가 구현해야 할 테이블 뷰에 대한 특성이 UITableViewController 클래스에 모두 정의되어 있기 때문입니다. 만약 UIViewController 클래스를 상속받으면 테이블 뷰의 특성을 우리가 일일이 구현해야 합니다. 



질문!!! 화면을 구성하는 요소마다 모두 그에 대응하는 클래스들이 있는 건가요? 버튼도, 이미지도, 레이블도, 입력폼도 모두 말이죠. 어떻게 찾나요?
애플에서는 이러한 클래스들을 참조할수 있는 백과사전식 데이터를 제공하는데, 이를 개발 전문 용어로 레퍼런스(Reference)라고 부릅니다. 하지만 매번 레퍼런스를 찾아가 코드를 작성하는 것은 상당히 능률을 떨어드릴 뿐만 아니라 의욕도 떨어트리는 일입니다. 그래서 사실 외우는 게 제일 좋지만 처음부터 달달 외울 필요는 없습니다. 앱을 많이 만들어보고 여러번 반복해서 사용하다 보면 자연스레 외워지기 때문입니다. 

그렇게 해도 외워지지 않는 클래스들이 있다면 자주 쓰지 않는 것이라는 의미이므로 필요할 때 레퍼런스를 찾아보면 됩니다. 프로그래밍을 오래한 경력자라 할지라도 자주 사용하지 않는 클래스를 사용하기 위해서는 레퍼런스를 필요로 하는 경우가 많습니다. 



STEP5 : ListViewController.swift 파일에 작성되어 있는 내용을 모두 지운 다음 다음과 같이 ListViewController 클래스를 정의합니다. 

ListViewController.swift

import UIKit

class ListViewController : UITableViewController
{
    
}

앱을 만드는 과정에서 우리는 크고 작은 여러 개의 클래스를 작성하게 됩니다. 이들 클래스의 이름을 지어줄 때 반드시 지켜야하는 규칙은 없지만 가독성과 코딩 규칙을 위해 권장되는 몇 가지 사항은 있습니다. 간단히 정리하면 다음과 같습니다. 

1. 뷰 컨트롤러를 구현하는 커스텀 클래스라면 가급적 이름 뒤에 **Controller 접미사를 붙여주는 것이 좋습니다. 컨트롤러를 구현하는 클래스라는 의미를 나타내며 컨트롤러 클래스를 찾기에 수월합니다. 

2. 파일의 이름과 클래스의 이름은 일치시켜주는 것이 좋습니다. 간혹 생산성을 위해 하나의 파일에 여러 개의 클래스를 줄줄이 작성하는 경우가 있는데 작성할 땐 편리할지 몰라도 해당 클래스를 수정해야 할 상황이 온다면 어느 파일에 클래스가 정의되어 있는지 찾기 힘들어서 한참의 시간을 낭비하게 될 겁니다. 

3. 클래스 이름은 항상 대문자로 시작하되 클래스의 역할과 성격을 분명하게 드러내는 이름으로 작성해 주어야 합니다. 




참고..   네이밍과 코딩 규칙의 필요성
실무 프로젝트 수준의 앱을 만들다보면 클래스를 수십 수백개 이상 만들어야 할 때도 있습니다. 이럴 때 클래스명에 규칙이 없다면 어느 클래스가 어떤 역할을 하는 것인지 확인하기가 매우 어렵습니다. 본인이 작성한 클래스도 시간이 지나면 기억이 가물가물해지기 마련인데 하물며 여러 사람이 함께 작업한다면 그 혼란의 정도가 어떻게 될까요? 그야말로 대혼란이 벌어질 것입니다. 그래서 실무 환경에서는 협업을 위해 네이밍과 코딩 규칙을 효율적으로 정하는 것이  중요합니다. 



STEP6 : 테이블 뷰 컨트롤러와 ListViewController 를 소울메이트(?)로 이어주겠습니다. 스토리보드에서 테이블 뷰 컨트롤러를 선택하고 아이덴티티 인스펙터 탭에서 [Custom Class] > [Class] 항목의 선택값을 ListViewController 로 지정합니다. 




질문!! 어트리뷰트 인스펙터에서 ListViewController 항목이 보이지 않아요!
뷰 컨트롤러와 커스텀 클래스를 연결할 때는 양쪽의 타입이 서로 호환 가능해야 합니다. 테이블 뷰 컨트롤러와 연결하려면 커스텀 클래스가 UITableViewController 클래스를 직접 상속받거나 적어도 상위 클래스로 지정되어 있어야 합니다. 커스텀 클래스를 거슬러 올라가면 UITableViewController가 나와야 한다는 뜻입니다. 

커스텀 클래스를 연결할 때 클래스 목록에 표시되는 것들은 모두 UITableViewController 를 상속받은 클래스들입니다. 만약 연결 항목에서 ListViewController를 찾을수 없다면 커스텀 클래스가 UITableViewController를 제대로 상속받고 있는지 혹여라도 실수로 UIViewController를 상속받은 것은 아닌지 꼭 확인해보기 바랍니다. 




여기까지가 준비 작업 입니다. 이제부터는 프로토타입 셀을 이용하여 목록을 설계 하겠습니다


※ 프로토타입 셀 설정
프로토타입 셀의 속성 일부를 어트리뷰트 인스펙터에서 수정합시다. 먼저 스토리보드에서 프로토타입 셀을 클릭하여 어트리뷰트 인스펙터 탭에 프로토타입 셀의 속성들이 나타나도록 합니다. 

이때 주의할 점이 있습니다. 테이블 뷰와 프로토타입 셀 그리고 셀의 하위인 콘텐츠 뷰는 모두 스토리보드에서 겹쳐져 표현되는 특성이 있습니다. 이 때문에 프로토타입 셀을 클릭하는 대신 테이블 뷰나, 콘텐츠 뷰를 클릭하는 경우가 종종 발생합니다. 따라서 항상 프로토타입 셀이 정확히 클릭되어 선택되어 있는지 확인해야 합니다. 프로토타입 셀이 제대로 선택되었다면 어트리뷰트 인스펙터 탭에 다음과 같이 Table View Cell이 표시됩니다. 

만약 스토리보드에서 프로토타입 셀을 클릭하기 어렵다면 문서 개요창을 이용하는 방법도 있습니다. 앞에서도 몇 번 다루어 본 문서 개요창은 [Xcode] > [Editor] > [Show Document Outline]메뉴를 선택해서 열 수 있습니다. 또는 그림처럼 스토리보드 하단의 아이콘을 클릭해서 열수도 있습니다. 

문서 개요창에는 스토리보드에 구현된 각종 화면 객체들이 계층 관계로 표시됩니다. 아래 그림을 참고하여 Table View Cell을 찾아 클릭하면 스토리보드에서 프로토타입 셀을 직접 클릭한 것처럼 어트리뷰트 인스펙터 탭에 관련 속성들이 표시됩니다. 

프로토타입 셀이 선택되었으면 어트리뷰트 인스펙터 탭에서 몇 가지속성을 변경합니다. 

STEP1 : [Style]항목을 Basic으로 설정합니다. 

[Style]항목은 테이블 뷰 셀에 출력되는 항목과 형식을 결정합니다. 일반적으로 테이블 뷰 셀은 기본 타이틀만 출력하는 Basic 타입과 기본 타이틀에 더하여 상세 내용을 출력할수 있는 나머지 타입으로 나뉘는데 이들은 다시 상세 내용이 출력되는 위치에 따라 세 가지로 나뉩니다. 상세 내용이 셀의 오른쪽 끝에 출력되는 Right Detail, 셀의 왼쪽에 출력되는 Left Detail, 기본 타이틀의 아래에 출력되는 Subtitle이 그것입니다. 

Basic에서 사용되는 기본 타이틀은 textLabel 속성을 이용하여 접근할수 있고 그외 RightDetail, Left Detail, Subtitle 에 사용되는 상세 내용은 detailTextLabel 속성을 이용하여 접근할수 있습니다. 사용법은 이번 장을 진행하면서 차차 학습해보겠습니다. 

Basic부터 Subtitle까지가 코코아 터치 프레임워크에서 제공하는 기본 프로토타입 셀 형식이라면 Custom 타입은 우리가 원하는대로 프로토타입 셀을 디자인할수 있는 옵션입니다. 테이블 뷰를 이용한 앱을 설계할 때에는 코코아 터치 프레임워크에서 제공하는 기본 프로토타입 셀만으로도 충분할 때가 많지만 이미지나 출력 항목을 추가하고 배열된 위치를 마음대로 변경하려면 Custom 타입을 선택해야 합니다. 


질문!! Custom 타입이 자유도가 높다는 거군요. 그러면 Custom 타입 하나만 있어도 되지 않나요? 기본 타입이 굳이 있어야 할 필요성을 모르겠네요. 
Custom 타입은 프로토타입 셀을 원하는 대로 디자인할수 있으므로 자유도가 가장 높은 옵션이긴 하지만 이렇게 작업하면 우리가 직접 설정해야 하는 부분이 많습니다. 작성해야 하는 코드양도 많아질 수밖에 없습니다. 화면 하나하나에 대한 것을 일일이 컨트롤해주어야 하기 때문입니다. 반면 기본 형식들을 이용하여 프로토타입 셀을 디자인하면 자유도가 다소 제약되는 반면 화면 구성 작업이나 코드양의 상당 부분을 절약할수 있습니다. 이 때문에 많이 사용되는 형식에 맞추어 기본 타입을 제작해놓고 사용할수 있도록 지원하는 것입니다. 



STEP2 : 프로토타입 셀을 클릭하여 선택한후 [Identifier]항목에 ListCell이라고 입력합니다. 

이것은 프로토타입 셀을 참조하기 위한 식별 아이디를 부여하는 과정입니다. 입력값 ListCell은 이후 소스 코드에서 프로토타입 셀을 참조할때 사용됩니다. 

그런데 여기에서 조금 이상한 점이 있습니다. 왜 아울렛 변수를 연결하지 않고 아이디를 부여하는 걸까요?

지금까지는 화면상의 컨트롤을 소스 코드에서 다루기 위해서 아울렛 변수를 연결해주기만 하면 되었습니다. 레이블이든 버튼이든 모두 보조 에디터로 드래그하기만 하면 소스 코드와 스토리 보드의 객체 사이를 연결해주는 @IBOutlet 속성이 자동으로 만들어지므로 이를 이용해서 손쉽게 화면상의 요소들을 컨트롤할수 있었죠. 

그런데 프로토타입 셀은 다릅니다. 아울렛 변수를 연결하지 않고 아이디를 부여합니다. 이는 프로토타입 셀이 실제로 화면에 표시되는 컨트롤이 아니기 때문입니다. 버튼이나 텍스트 레이블과 달리 프로토타입 셀이 직접 데이터를 표시하거나 화면의 공간을 차지하지는 않습니다. 그저 테이블 뷰가 화면에 표현될 때 어떤 식으로 구성될 것인지를 미리 보여주기 위한 가상 틀에 불과합니다. 

따라서 프로토타입 셀을 이용하여 화면을 구현할 때는 프로토타입 셀 자체에 콘텐츠를 올려서 표현하는 것이 아니라 프로토타입 셀이라는 틀을 바탕으로 하여 실제로 사용할 셀을 목록의 개수만큼 생성하고 각각에 데이터를 바인딩하는 과정을 거쳐 목록 화면을 구현합니다. 

아이디를 이용해서 프로토타입 셀을 참조하는 또 다른 이유는 하나의 테이블 뷰에 하나 이상의 프로토타입 셀을 사용할수 있기 때문입니다. 원하는 만큼 틀을 여러 개 만들수 있다는 뜻이죠. 서로 다른 형식으로 만들어진 여러 개의 프로토타입 셀을 구분하기 위해서 우리는 아이디를 부여합니다. 

프로토타입 셀을 하나 이상 사용할수 있다는 것은 다음과 같은 이점이 있습니다. 예를 들어 조건에 따라 두 가지 이상에 셀 디자인이 필요한 경우 소스 코드에서 직접 화면 구성과 컨트롤 배치등을 변경할수도 있겠지만 그보다는 서로 다른 형식을 가지는 프로토타입 셀 여러 개를 설계해두고 조건에 맞는 프로토타입 셀을 호출하기만 하면 화면 구성은 더 이상 신경 쓸 필요가 없습니다. 훨씬 작업이 간결해질수 있죠. 



STEP3 : [Accessory]항목을 Disclosure Indicator로 설정합니다. 

테이블 뷰 셀에서 Accessory 속성은 셀의 오른쪽 끝에 표시될 아이콘을 선택하는 데에 사용됩니다. 이 영역을 Accessory 영역이라고 부르죠. 아이콘의 표준 타입은 모두 네가지가 있는데 심미적인 면에서 적당히 어울리는 타입을 선택해도 되지만 애플의 UI 지침에 따르면 각각의 아이콘은 공식적으로 의미하는 바가 있으므로 이를 유의해서 사용하면 사용자에게 더 명확하게 정보를 전달할수 있습니다. 

Accessory 속성에서 선택할수 있는 네가지 옵션과 아이콘은 각각 다음과 같습니다. 


※ Disclosure Indicator
이옵션은 테이블 뷰 셀을 선택했을 때 데이터 구조상 하위 레벨에 해당하는 또 다른 테이블 뷰 화면을 보여주게 됨을 의미합니다. 

※ Detail Disclosure Button
이 옵션은 Detail 옵션과 Disclosure Indicator 옵션이 합쳐진 것입니다. 즉 테이블 뷰 셀을 선택했을 때 그에 대한 상세 내용을 보여주게 됨을 의미하지만 상세 내용은 Disclosure Indicator 와 같이 하위 레벨의 테이블 뷰가 될수도 Detail과 같이 일반 뷰에 표현된 상세 내용이 될 수도 있습니다. 

※ Checkmark 
이옵션은 테이블 뷰 아이템의 개별 행을 사용자가 선택했다는 것을 나타냅니다. 이런 종류의 테이블 뷰는 대게 선택 목록이라고 불리며 또 다른 선택용 목록인 팝업 목록과 비슷합니다.선택용 목록은 하나만 선택하도록 제한하거나 여러 개를 선택할수 있도록 허용할 수도 있습니다. 

※ Detail
이옵션은 테이블 뷰 셀을 선택했을 때 이에 대한 상세 내용을 일반 뷰로 보여주게 됨을 의미합니다. 

일반적으로 테이블 뷰 셀의 아이템에 대한 정보 표현은 위 네가지가 사용되지만 반드시 이들만 사용해야 하는 것은 아닙니다. 네 가지의 표준 Accessory 옵션 대신 스위치 같은 일반 컨트롤이나 커스텀으로 구현한 컨트롤들도 얼마든지 Accessory 옵션으로 사용할수 있습니다. 이 부분에 대해서는 iOS 개발 지침을 참고하기 바랍니다. 

이제 키보드에서 <Command> + <R>을 눌러 앱을 실행해봅시다. 텅빈 행들 이외에는 아무것도 나타나지 않습니다. 당연합니다. 화면에 무엇이든 표시되는 것은 테이블 뷰에 데이터 소스를 만들어 연결한 다음이기 때문입니다 지금은 데이터가 아무것도 없으므로 화면에 표시될 것도 없겠죠