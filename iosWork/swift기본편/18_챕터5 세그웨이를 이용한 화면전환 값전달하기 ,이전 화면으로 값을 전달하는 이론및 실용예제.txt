5.2.3 세그웨이를 이용하여 화면 전환하면서 값을 전달하기
화면을 전환해주는 객체인 세그웨이는 수동으로 실행할수 있는 메뉴얼 세그웨이와 자동으로 실행되는 액션 세그웨이로 나누어집니다. 하지만 어느 세그웨이를 사용하든 값을 전달하는 방식은 모두 동일합니다. 새로운 프로젝트를 생성하는 대신 앞에서 생성한 프로젝트를 다시 활용해서 확인해 봅시다. 

가장먼저 할 일은 세그웨이를 연결하는 겁니다. 세그웨이 종류는 메뉴얼 세그웨이로 하되 내비게이션 바가 추가되었으니 [Show] 타입으로 생성하면 될것 같네요. 다음 그림처럼 뷰 컨트롤러의 도크 바에서 첫 번째 아이콘을 <Ctrl> + 클릭한 다음 두 번째 뷰 컨트롤러로 드래그하여 메뉴얼 세그웨이를 생성하고 이어서 세그웨이의 종류를 선택하는 창에서는 [Show]를 선택합니다. 이제 내비게이션 컨트롤러를 활용할수 있는 [Show] 타입의 세그웨이가 만들어 집니다. 

방금 생성한 세그웨이는 매뉴얼 세그웨이이므로 실행을 위해서는 소스 코드에서 직접 호출해 주어야 합니다. 이를 위해 세그웨이에 아이디를 부여해야 하죠. 뷰 컨트롤러 사이에 연결된 세그웨이를 선택하고 어트리뷰트 인스펙터 탭에서 [Identifier]항목의 값을 ManualSubmit으로 입력합니다. 

이제 생성된 세그웨이를 실행하는 기능을 구현할 차례입니다. 원래대로라면 새 버튼을 추가해서 액션 메소드를 만들어 세그웨이를 실행하는 것이 맞지만 여기서는 그냥 기존에 만들어두었던 버튼을 용도만 변경해서 써볼까 합니다. 첫 번째 뷰 컨트롤러의 내비게이션 바에 추가한 버튼말입니다. 앞에서 실습하면서 이 버튼에 onSubmit 메소드를 연결했었으므로 이 연결을 끊고 새로운 메소드를 생성해 다시 연결하겠습니다. 

내비게이션 바의 Submit 버튼을 선택하고 커넥션 인스펙터 탭을 엽니다. 선택된 버튼에 연결된 onSubmit 메소드에 대한 연결 정보가 탭에 표시되면 X 아이콘을 클릭하여 삭제합니다. 이것으로 버튼과 메소드의 연결이 끊어집니다. 

연결이 끊어진 메소드는 아예 삭제되는 것이 아니라 그대로 유지되지만 에디터에서 속이 빈 동그라미 아이콘 모양으로 표시되어 연결이 끊어졌음을 알수 있습니다. 

이어서 새로운 메소드를 연결하겠습니다. 버튼을 보조 에디터로 드래그하여 @IBAction 액션 메소드를 생성합니다. 이름은 onPerformSegue로 입력합니다. 

추가한 메소드에 세그웨이를 실행하는 구문을 작성합니다. 메뉴얼 세그웨이를 실행하는 performSegue(withIdentifier:sender:)메소드입니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController
{
   ...(중략)...
    @IBAction func onPerformSegue(_ sender: Any)
    {
        self.performSegue(withIdentifier: "ManualSubmit", sender: self)
    }
}

인자값으로 입력한 ManualSubmit는 조금 전 메뉴얼 세그웨이에 설정했던 아이디입니다. 대소문자를 구분하므로 입력 과정에 오타나 실수가 없는지 꼼꼼하게 확인해야 합니다. 여기까지 해서 세그웨이를 이용하여 화면을 전환하는 부분을 완성했습니다. 

자그러면 여기서 문제입니다. 값을 전달하는 코드는 어디에 넣어야 할까요? 우리가 정의한 onPerformSegue(_:)메소드에 넣어주면 될까요?

아닙니다. 정답은 세그웨이 실행을 위한 준비 메소드 부분에 값을 전달해준다 입니다. 앞에서 배운 세그웨이 전처리메소드인 prepare(for:sender:)메소드가 드디어 제 역할을 하는 순간이 오는거죠. 이 메소든느 앞서 설명한 대로 세그웨이가 실행되기 직전에 호출되는 메소드입니다. 이 메소드는 우리가 직접 호출하는 것이 아니라 필요한 내용을 작성해둔 다음 가만히 놔두면 iOS 시스템이 알아서 적절한 시점에 호출하는 지뢰 같은 존재입니다. 

메뉴얼 세그웨이나 액션 세그웨이에 구분없이 모든 세그웨이가 실행되기 전에 iOS는 prepare(for:sender:)메소드를 먼저 호출합니다. 커스텀 클래스에서 오버라이드하지 않았다면 그보다 상위 클래스에 정의된 동일 메소드를 호출하죠. 이 메소드를 커스텀 클래스에서 오버라이드한다음 여기에다 값을 전달하는 코드를 넣으면 우리가 원하는 대로 값을 전달할수 있습니다. 

여기서 다음 문제입니다. 값을 전달할 뷰 컨트롤러의 인스턴스 정보는 어떻게 얻어올수 있을까 ?

지금까지는 값을 전달할 뷰 컨트롤러의 인스턴스를 우리가 직접 생성했습니다. 

instantiateViewController(withIdentifier:)메소드를 사용해서 말이죠. 하지만 세그웨이를 다룰 때에는 이동할 대상 뷰 컨트롤러의 인스턴스를 우리가 직접 생성해서는 안됩니다. 세그웨이의 목적지로 연결된 뷰 컨트롤러의 인스턴스는 세그웨이에 의해 자동으로 생성되기 때문에 우리가 앞서의 메서드를 이용하여 생성한 인스턴스와 일치하지 않습니다. 그냥 쌍둥이 동생일 뿐이죠. 

그러니 우리는 직접 뷰 컨트롤러의 인스턴스를 생성하는 대신 세그웨이 객체를 통해 생성된 뷰 컨트롤러 인스턴스 참조를 읽어와야 합니다. 이 정보는 prepare(for:sender:)메소드의 첫 번째 인자값인 segue 매개변수를 통해 얻을수 있습니다. 

prepare(for:sender:)메소드를 작성하여 인스턴스를 가져오고 값을 전달하는 과정까지 진행해보겠습니다. 메소드의 내용은 다음과 같습니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController
{
    ...(중략)...
    @IBAction func onPerformSegue(_ sender: Any)
    {
        self.performSegue(withIdentifier: "ManualSubmit", sender: self)
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        //목적지 뷰 컨트롤러 인스턴스 읽어오기
        let dest = segue.destination
        guard let rvc = dest as? ResultViewController else
        {
            return
        }
        //값 전달
        rvc.paramEmail = self.email.text! //이메일
        rvc.paramUpdate = self.isUpdate.isOn // 자동갱신 여부
        rvc.paramInterval = self.interval.value //갱신주기
    }
}

위 메소드에서 일어나는 일들은 다음과 같습니다. 

1. 메소드의 매개변수 segue의 속성 destination를 이용하여 목적지 뷰 컨트롤러의 인스턴스 참조를 가져옵니다. 
2. 인스턴스의 타입을 UIViewController에서 ResultViewController 타입으로 캐스팅합니다. 실패하면 메소드 실행을 종료합니다. 
3. 캐스팅된 인스턴스 상수 rvc를 이용하여 값을 전달합니다. 

주어진 메소드가 전달받는 segue 인자값은 세그웨이 객체를 뜻합니다. 세그웨이에는 항상 출발지와 목적지로 연결된 뷰 컨트롤러 인스턴스가 존재하는데 destination 속성을 이용하면 세그웨이가 향하는 목적지 뷰 컨트롤러의 인스턴스를 얻을수 있습니다. 

이 인스턴스는 UIViewController 타입으로 반환되므로 ResultViewController 클래스의 프로퍼티를 사용하기 위해서는 다운 캐스팅이 필요합니다. 이를 통해 얻은 ResultViewController 타입의 인스턴스를 rvc상수에 대입하고 rvc의 프로퍼티인 paramEmail, paramUpdate, paramInterval에 차례로 알맞은 값을 대입하면 끝입니다. 화면을 이동하는 과정은 세그웨이가 알아서 처리하는 부분이므로 화면 전환을 위해 메소드를 직접 호출해 줄 필요는 없습니다. 이제 앱을 실행해봅시다. 

소스 코드를 이용하여 값을 전달했을 떄와 앱의 실행 결과는 완전히 같음을 알수 있습니다. 여기까지 학습한 전체 소스는 다음과 같습니다. 

ViewController.swift

import UIKit

class ViewController: UIViewController
{
    // 이메일 주소를 입력받는 텍스트필드
    @IBOutlet var email: UITextField!
    // 자동 갱신 여부를 설정하는 스위치
    @IBOutlet var isUpdate: UISwitch!
    // 갱신 주기를 설정하는 스테퍼
    @IBOutlet var interval: UIStepper!
    // 자동갱신 여부를 표시하는 레이블
    @IBOutlet var isUpdateText: UILabel!
    // 갱신 주기를 텍스트로 표시하는 레이블
    @IBOutlet var isIntervalText: UILabel!
    
    // 자동 갱신 여부가 바뀔 때마다 호출되는 메소드
    @IBAction func onSwitch(_ sender: UISwitch)
    {
        if (sender.isOn == true)
        {
            isUpdateText.text = "갱신함"
        }else
        {
            isUpdateText.text = "갱신하지 않음"
        }
    }
    // 갱신 주기가 바뀔 때마다 호출되는 메소드
    @IBAction func onStepper(_ sender: UIStepper)
    {
        let value = Int(sender.value)
        self.isIntervalText.text = "\(value)분 마다"
    }
    
    @IBAction func onSubmit(_ sender: Any)
    {
        //VC2의 인스턴스 생성
        guard let rvc = self.storyboard?.instantiateViewController(withIdentifier: "RVC") as? ResultViewController else
        {
            return
        }
        //값전달
        guard let optionalEmail = self.email.text else
        {
            return
        }
        rvc.paramEmail = optionalEmail //이메일
        rvc.paramUpdate = self.isUpdate.isOn //자동갱신 여부
        rvc.paramInterval = self.interval.value // 갱신주기
        //화면 이동
        //self.present(rvc, animated: true)
        self.navigationController?.pushViewController(rvc, animated: true)
        
    }
    @IBAction func onPerformSegue(_ sender: Any)
    {
        self.performSegue(withIdentifier: "ManualSubmit", sender: self)
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        //목적지 뷰 컨트롤러 인스턴스 읽어오기
        let dest = segue.destination
        guard let rvc = dest as? ResultViewController else
        {
            return
        }
        //값 전달
        rvc.paramEmail = self.email.text! //이메일
        rvc.paramUpdate = self.isUpdate.isOn // 자동갱신 여부
        rvc.paramInterval = self.interval.value //갱신주기
    }
}



ResultViewController.swift

import UIKit

class ResultViewController : UIViewController
{
    // 화면에 값을 표시하는데 사용될 레이블
    @IBOutlet var resultEmail: UILabel!
    
    @IBOutlet var resultUpdate: UILabel!
    
    @IBOutlet var resultInterval: UILabel!
    
    //1 email 값을 받을 변수
    var paramEmail : String = ""
    //2 update 값을 받을 변수
    var paramUpdate : Bool = false
    //3 Interval 값을 받을 변수
    var paramInterval : Double = 0
    
    override func viewDidLoad()
    {
        self.resultEmail.text = paramEmail
        self.resultUpdate.text = (self.paramUpdate == true ? "자동갱신" : "자동갱신안함")
        self.resultInterval.text = "\(Int(paramInterval))분 마다 갱신"
    }
    
    @IBAction func onBack(_ sender: Any)
    {
        self.presentingViewController?.dismiss(animated: true)
    }
    
    
}

지금까지는 메뉴얼 세그웨이를 이용하여 실습을 했지만 액션 세그웨이를 사용하여 화면을 전활 할 때도 prepare(for:sender:)메소드를 사용하면 됩니다. 이는 어떤 세그웨이라도 실행될 때 에는 예외 없이 prepare(for:sender:)메소드를 호출하도록 구성되어 있기 때문에 가능한 부분입니다. 액션 세그웨이를 사용하여 값을 전달하는 방법은 메뉴얼 세그웨이와 동일하기 때문에 책에서 실습은 생략하지만 여러분은 각자 액션 세그웨이를 생성해서 값을 전달하는 실습까지 진행해 보았으면 좋겠군요. 



5.3 이전 화면으로 값을 전달하기
지금까지 우리는 새로운 화면으로 값을 전달하는 방법을 학습했습니다. 이 과정을 간단하게 요약해 보면 다음과 같습니다. 

1. 값을 받을 새로운화면을 스토리보드에 추가하고 여기에 맞는 클래스 파일을 작성하여 둘 사이를 연결합니다. (이를 편의상 VC2라고 부르기로 했습니다.)

2. 스위프트 코드를 사용하여 VC2에 대한 인스턴스 참조를 얻어오거나 인스턴스 참조가 없는 경우 인스턴스를 생성합니다. 

3. 전달하고자 하는 값을 인스턴스의 적절한 프로퍼티에 대입합니다. 이때 프로퍼티는 미리 정의되어 있어야겠죠?

4. 아무일 없었다는 듯이(?)쓱 화면을 전환합니다. 

그렇다면 만약 거꾸로 VC2에서 값을 입력하여 VC1으로 전달하고 싶은 경우에는 어떻게 하면 될까요?

단순하게 값을 전달한다라는 부분에만 초점을맞추어 본다면 그 과정은 VC1 > VC2로 값을 전달하는 위의 1~4와 크게 다르지 않습니다. 사소한 몇 가지만 다를 뿐입니다. 

첫 번째 VC2에서 값을 입력한다는 것은 VC1화면이 이미 만들어져 있고 인스턴스 역시 만들어져 있는 것을 전제로 합니다.(그래야 VC2로 화면이 넘어갈수 있었을 테니까요) 따라서 2의 과정에서 인스턴스를 생성하는 것이 아니라 현재 존재하는 뷰 컨트롤러 인스턴스의 참조값을 얻어와야 합니다. 이때 인스턴스 참조를 얻어오는 방식은 VC1 > VC2로 어떻게 전환했는가에 따라 다릅니다. 프레젠테이션 방식이라면 self.presentingViewController를 사용하여 값을 읽어올수 있고 내비게이션 컨트롤러라면 self.navigationController?.viewControllers 배열 속성을 통해 얻어올수 있습니다. 

두번째 4의 과정에서 화면 전환 메소드 대신 화면 복귀 메소드를 사용해야 합니다. 새로운 화면으로 전환하는 것이 아니라 이전 화면으로 복귀하는 것이기 때문이죠. 물론 이때에도 어떤 방식으로 화면을 전환했는가에 따라 사용하는 복귀 메소드는 다릅니다. 

세번째 값을 받은 뷰 컨트롤러가 화면에 값을 표시하는 시점이 달라져야 합니다. VC1 > VC2로 값을 전달할 때에는 거의 항상 VC2의 인스턴스가 초기화됩니다. 새로운 화면이기 때문이죠. 따라서 인스턴스가 초기화될 때 호출되는 viewDidLoad()메소드 내에서 우리가 원하는 코드를 작성하면 됩니다. 하지만 VC2 > VC1으로 값을 전달할 때에는 VC1의 인스턴스가 초기화되지 않기 때문에 viewDidLoad()메소드가 호출되지 않습니다. 대신 화면이 새롭게 그려질 때 마다 호출되는 viewWillAppear(_:)메소드가 호출되므로 여기에 우리가 원하는 코드를 작성해 주어야 합니다. 

이상입니다. 이정도의 차이만 인지한다면 단순히 VC2 > VC1으로 값을 전달하는과정은 비교적 손쉽게 처리할수 있습니다. 

그런데 단순히 값을 전달한다가 아니라 왜 VC2 > VC1으로 값을 전달해야 하는가를 함께 생각해본다면 문제는 복잡해집니다. VC2 > VC1으로 값을 전달할 때에는 그 값의 성격에 따라 방식을 달리해줄 필요가 있기 때문이죠. 

일반적으로 VC1 > VC2 로 전달하는 값은 휘살성 값이 대부분이라 값을 저장해둘 필요없이 두 개의 뷰 컨트롤러 사이에서만 값을 주고받으면 끝입니다. 따라서 동기 방식으로 값을 전달해 주는 것이 적절합니다(동기 방식과 비동기 방식에 대해서는 이번 장의 맨 처음에 설명해두었습니다. 기억나지 않는 분은 다시 한번확인해주세요!)

반면에 VC2 > VC1으로 전달하는 값은 대체로 반영구적으로 저장해야 하는값인 경우가 많습니다. 이때 단순히 뷰 컨트롤러 사이에서만 값을 주고받는다면 값을 받은 뷰 컨트롤러가 또 다른 화면으로 전환될 경우 전달된 값이 소실될수 있습니다. 맨 앞에 초기 화면을 하나 더 두었다고 가정해봅시다. 값을 입력하는 화면을 세 번째 화면(VC3)값을 전달받는 화면을 두 번째 화면(VC2)으로 배치하고 다음 그림과 같은 순서로 화면을 이동하면서 값을 입력합니다. 되돌아온 VC2 화면에 정상적으로 값이 표시되어 있으므로 값 전달에 아무런 문제가 없는 것처럼 보일 겁니다. 

하지만 VC2 > VC1으로 이동하고 나면 문제가 드러납니다. 전달받은 값이 있는 상태에서 VC1으로 화면을 전환했다가 다시 VC2로 돌아가면 전달받은 값이 사라지는 것이죠. 

이것은 VC2 > VC1으로 화면 전환되는 순간 VC2의 인스턴스가 메모리에서 해제되면서 전달받은 값도 함께 사라지기 때문입니다. 다시 VC2로 전환했을때 동일한 화면이 나타나긴 하지만 이것은 사실 새롭게 생성된 인스턴스입니다. 즉 이 화면은 값을 전달받은 적이 없는 전혀 새로운 화면이라는 거죠. 

이와 같은 이슈 때문에 반대 방향으로 값을 전달하고자 할 때에는 값의 성격을 고려해서 처리해야 합니다. 소실되어도 상관없는 값이라면 단순히 값을 직접 주고받는 동기방식을 사용하면 되지만 만약 소실되어서는 안 되는 값이라면 값을 직접 주고받는 대신 값을 보관해둘 수 있는곳을 찾아여기에 값을 저장하고 이전 화면으로 돌아온 후에 값을 꺼내는 식으로 처리할 필요가 있습니다. 

물론 이 부분은 기술적인 이슈가 아닙니다. 기획 관점에서 앱의 구조를 설계할 때 고민해야 할 부분에 가깝습니다. 사실 기술적으로는 값을 직접 넘기느냐 공용 저장소에 저장하느냐의 차이만 있을 뿐이므로 고민해야 하는 부분은 크지 않지만 두 선택에 따라 앱의 기능적 성격이 크게 달라지므로 사전에 고려해 두는 것이 좋습니다. 이런 점을 염두에 두고 각각의 방법을 차례대로 실습해봅시다. 