9.1.2 비연결 지향 통신
비연결 지향 통신은 TCP나 UDP를 이용하는 소켓 방식과 달리 HTTP 등의 프로토콜을 사용하여 메시지를 주고받는 방식을 가리킵니다. 대표적으로 HTTP/HTTPS 프로토콜이 있는데 웹 서비스에 주로 사용되죠. 비연결성 프로토콜은 요청이 들어오면 이에 맞는 응답을 보낸 후 바로 연결을 종료합니다. 다시 요청을 하기 위해서는 새롭게 연결을 맺어야 하죠. 비연결 방식이라 하여 아예 연결을 하지 않는다는 뜻은 아닙니다. 단지 연결을 유지하지 않는 것일 뿐입니다. 

이처럼 비연결 방식의 통신은 매번 요청할 때마다 연결해야 하므로 소켓 방식에 비해 상대적으로 데이터를 주고받는 속도에 제약이 있지만 필요할 때만 연결하여 요청을 처리한 후 연결을 종료하므로 필요 없는 네트워크 대역 소모를 줄일 수 있고, 서버 부하도 낮출수 있어서 범용적인 모바일 서비스에 많이 사용됩니다. 

동일한 HTTP/HTTPS 프로토콜을 사용하지만 일반 HTML을 제공하는 웹 페이지(Web page)와 달리 데이터만을 주고받을 수 있도록 설계된 모듈을 웹 서비스(Web Service)라고 부릅니다. 우리가 이번 절에서 실습할 네트워크 데이터 통신이 바로 웹 서비스를 사용하는 통신입니다. 

웹 서비스는 다시 아키텍처 구조에 따라 SOAP와 RESTful 방식으로 나눌수 있고 데이터 타입에 따라서는 XML과 JSON방식으로 나눌수 있습니다. 


※ SOAP 방식
SOAP(Simple Object Access Protocol)은 일반적으로 널리 알려진 HTTP, HTTPS, SMTP등의 프로토콜을 통해 양쪽에서 XML 형태의 메시지를 주고받도록 구현된 프로토콜입니다. SOAP는 웹 서비스에서 메시지를 전달할 때 몇가지 형태의 메시지 패턴 중에서 원격 프로시저 호출(Remote Procedure Call : RPC)이라고 불리는 클라이언트-서버 구조의 메시지 패턴을 많이 사용하며 이때 통신 구조는 Eventlop/Header/Body의 세가지 영역으로 구분할 수 있습니다. 

SOAP의 메시지 구조는 XML을 근간으로 하여 헤더 부분과 바디 부분을 조합하는 구조의 디자인 패턴으로 설계되어 있습니다. 여기서 헤더는 선택 사항이므로 반드시 포함하지 않아도 되지만 일단 사용할 때에는 반복이나 보안 및 트랜잭션을 정보로 하는 메타 정보를 처리합니다. 바디 영역은 전달하고자 하는 핵심 내용을 담고 있습니다. 아래는 SOAP 메시지 구조로 구성된 XML 코드입니다. 실제로 데이터를 주고받을 때 아래와 같은 형식을 사용한다고 이해하면 됩니다. 

<SOAP-ENV:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
  <SOAP-ENV:Body>
	<getItemDetails xmlns="http://warehouse.example.com/ws">
		<itemId>5712587</itemId>
		<itemName>Sample Item</itemName>
	</getItemDetails>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>


SOAP 방식의 네트워크 통신이 가지는 장점은 다음과 같습니다. 

1. SOAP를 사용한 HTTP는 기존 원격 기술들과 달리 프락시나 방화벽과 관계없이 쉽게 통신할 수 있다. 
2. SOAP가 사용하는 표준 전송 프로토콜은 HTTP이지만 이외에도 사용할수 있는 프로토콜이 다양하다. 
3. 플랫폼 독립적인 통신이므로 시스템이 바뀌거나 이기종 플랫폼 간의 데이터 통신이 편리하다. 
4. 프로그래밍 언어에 종속되지 않는다. 
5. 매우 간단하고 확장이 용이하다. 

반면에 SOAP는 XML포맷을 사용하므로 CORBA같은 미들웨어 기술과 비교해볼 때 상대적으로 느립니다. 물론 전송할 메시지가 비교적 큰 양일 때만 이슈가 되므로 일반적인 데이터 교환에는 크게 문제 되지 않습니다. 




※ RESTful 방식
RESTful의 근간이 되는 REST(Representational State Transfer)는 월드 와이드 웹(World Wide Web, WWW)과 같은 분산 하이퍼 미디어 시스템을 위한 소프트웨어 아키텍처 의 한 형식입니다. 엄격한 기준에서 봤을 때 REST는 실질적인 네트워크 프로토콜은 아닙니다. 단순히 네트워크 자원을 정의하고 자원에 대한 주소를 관리하는 방법이죠. 쉽게 말해 REST란 웹 형식을 빌어 데이터를 전송하되 SOAP나 쿠키 등 별도의 전송 프로토콜 없이 전송하기 위해 만들어진 간단한 형식의 인터페이스를 말합니다. 

REST의 데이터 구조는 굉장히 간단해서 다른 방식의 데이터 전송 형식과 많이 비교됩니다. 가령 앞에서 예로 든 SOAP만 하더라도 비교적 간단한 전송 방식임에도 불구하고 Envelope/Header/Body 메시지 구조를 구현해야 하고, 이를 HTTP 프로토콜 위에 실어서 보내는 등 전송 규약을 지키기 위해 많은 작업이 필요합니다. 반면 REST는 HTTP 프로토콜을 바탕으로 필요한 데이터를 별도의 규약 없이 주고받기만 하면 됩니다. 더 단순화해보자면 특정 웹 페이지를 보기 위해 웹 브라우저에 URL을 입력하는 것처럼 데이터를 요청하는 URI를 네트워크를 통해 서버에 전달하면 서버에서는 그에 맞는 응답 데이터가 전송된다는 뜻입니다. 

이같은 REST 원리를 따라 구현된 시스템을 우리는 RESTful이라는 용어로 지칭합니다. RESTful 시스템은 네트워크 서버를 통해서뿐만 아니라 일반 웹 서버를 통해서도 약간의 설정만으로 쉽고 간단하게 구현할수 있다는 장점이 있어 널리 확산되고 있습니다. 

RESTful 시스템은 일반적으로 서버에게 요청하려는 정보를 URI를 통해서 나타냅니다. 요청 정보는 URI 단위마다 슬래시(/)로 구분되는데 예를 들어 127.0.0.1 아이피에 해당하는 서버에서 영화 정보를 얻고자 할때는 다음과같은 형식으로 URI를 구성하면 됩니다. 

http://127.0.0.1/movie

영화 정보 중에서 특정 연도에 출시된 영화 정보를 보고싶다면 URL에 연도에 대한 계층 정보를 추가하여 구분해 주면 됩니다. 

http://127.0.0.1/movie/2015
http://127.0.0.1/movie/2014
http://127.0.0.1/movie/2013

만약 2015년에 출시된 영화 중에서 특정 장르의 영화를 보고자 한다면 어떻게 해야 할까요? 이것 역시 복잡하지 않습니다. 다음과 같이 URL에 장르 정보만 추가하면 될 뿐입니다. 

http://127.0.0.1/movie/2015/action
http://127.0.0.1/movie/2015/sf
http://127.0.0.1/movie/2015/thriller

물론 위에서 예로 든 방식이 반드시 정해져 있는 것은 아닙니다. 또한 앱에서 위와 같은 형식으로 요청한다고 하더라도 서버에서는 이 정보를 이해하고 그에 맞게 데이터를 제공할수 있도록 웹 서비스가 구현되어 있어야 합니다. 서버 측에서 제공하는 웹 서비스나 콘텐츠의 성격에 따라 URI 구성은 모두 달라질 수 있습니다. 주고받는 데이터의 형식도 달라지죠. 이 때문에 데이터를 받기 위해서는 먼저 서버에서 요구하는 형식에 따라 요청 규격을 정확하게 맞춰야 합니다. 공통 표준 형식이 정해져 있는 것이 아니라 서버와 클라이언트 사이의 결정에 따라 달라지는 거죠. 물론 대부분의 실무에서는 서버 개발자가 요청 형식을 정의하면 앱 개발자가 그에 따르는 업무 구조이긴 합니다. 여하튼 간에 이와 같이 데이터를 주고받는 방식을 RESTful API라고 부릅니다. 



※ RESTful API와 HTTP 전송 방식
일반적으로 서버에 요청하는 정보의 타입은 쓰기, 읽기, 수정, 삭제의 네 가지로 구분됩니다. 이네 가지를 합하여 CRUD라고 부르는데, 각각 쓰기(Create), 읽기(Read), 수정(Update), 삭제(Delete)의 첫 글자를 딴 것입니다. 데이터를 받아오기만 하는 경우 읽기 요청만 사용하지만, 메신저 채팅이나 SNS 게시물 작성등 서버를 통해 특정 작업을 수행할 때는 CRUD의 요청을 모두 처리해야 할 때가 많습니다. 

SNS 글 등록을 위한 RESTful API를 구성한다고 가정해봅시다. SNS에 관한 URI를 /sns/article이라고 정의한다면 CRU의 요청을 처리하기 위해 각각 다음과 같은 URI 계층이 더필요합니다. 

http://127.0.0.1/sns/article/create
http://127.0.0.1/sns/article/read
http://127.0.0.1/sns/article/update
http://127.0.0.1/sns/article/delete

하지만 URI 구성 권고에 따르면 RESTful API 구성을 위한 URI에는 정보의 분류 체계만 포함되어야지 정보를 어떻게 다룰 것인가 하는 동작에 관한 명세는 포함되지 않는 것이 좋습니다. 다시 말해 URI에는 어떤 계층의 어떤 데이터라는 정보만 기재할 뿐 그 데이터를 읽을지 쓸지 수정할지 혹은 삭제할지와 같은 액션 구분은 URI에 나타내지 않는 것이 좋다는 겁니다. 권고안에서는 그 대신 HTTP 메소드를 사용하여 이같은 액션을 구분해줄 것을 권장합니다. 

일반적으로 웹에서 사용되는 HTTP 메소드의 종류는 GET과 POST두 가지입니다. 데이터를 요청하려면 GET을 사용하고 데이터를 전송하려면 POST를 사용합니다. GET 방식으로도 데이터를 전송할 수는 있지만 URL뒤에 데이터를 줄줄이 붙여서 전송하는 형식이기 때문에 몇개의 데이터만 전달하더라도 금세 URL이 복잡해진다는 단점이 있습니다. 또한 GET 방식으로는 1,024 바이트 이상의 정보를 전송할수 없다는 제약조건도 있습니다. 

이 때문에 데이터를 전송할 때는 대부분 POST 방식을 사용합니다. 크롬이나 사파리, 인터넷 익스플로러 등을 통해 사용할수 있는 전송 방식은 GET과 POST 두 가지뿐이지만 RESTful API에서 정의하고 있는 HTTP 메소드의 종류는 다양합니다. 

표9-1 RESTful API에서 HTTP 메소드의 종류
메소드(전송방식)		목적
GET			특정 리소스의 대표적인 정보를 요청할때
POST			ID 없이 리소스를 생성하거나 수정할 때
PUT			ID 기반으로 리소스를 생성하거나 수정할 때
DELETE			리소스를 삭제할 때
HEAD			GET 방식의 요청이지만 내용 없이 메타 정보만 요청할 때
OPTIONS			특정 URL에 대한 보조 메소드 역할 

URI에 CRUD 동작을 포함하는 대신 URI 헤더*에 이들 메소드를 사용하여 동작을 정의하는 것으로 RESTful API는 동일한 URI라 하더라도 처리할 액션을 구분할 수 있습니다. 

SOAP와 RESTful API의 차이는 중요하지만 완벽히 이해해야 하는 부분은 아닙니다. 대부분 RESTful API 형식으로 데이터를 제공하도록 설계되어 있고 우리는 서버에서 작성해 놓은 URI 명세에 따라 원하는 요청을 식별할수 있도록 URI를 구성하여 보내기만 하면 되기 때문입니다. 

하지만 지금부터 배울 응답 데이터 형식에 따른 구분은 중요합니다. 앱에서 받아 처리해야 할 데이터 구조에 대한 내용이기 때문입니다. 데이터의 구조와 특성을 충분히 이해하고 있어야 전달받은 데이터를 해석하고 처리하는 데에 어려움이 없으므로 혹여 이해가 잘 가지 않는다면 반복해서 읽어보기 바랍니다. 




※ XML 방식
XML 방식이란 요청에 대한 응답 데이터를 XML 포맷으로 제공하는 것을 말합니다. SOAP 방식의 요청이나 RESTful API 모두 XML 방식으로 만들어진 결과를 제공할수 있습니다. 단순히 데이터를 포맷 없이 그대로 반환해주면 안되는 것인가하고 생각할수 도 있겠지만 정말 단순한 문자열이나 숫자값만을 반환하는 것이 아닌 이상 대부분의 데이터는 의미나 논리적으로 구분할 필요가 있는 데이터 집합을 반환해야 하는 경우가 대부분입니다. 이런 경우 원활한 구분을 위해 데이터는 일련의 특수한 포맷으로 구성하게 됩니다. 

XML(Extensible Markup Language)은 W3C에서 특수 목적의 마크업 언어를 만드는 데에 권장하는 다목적 마크업 언어입니다. XML은 서로 다른 시스템에서 인터넷을 통하여 데이터를 쉽게 주고받을 수 있도록 하여 HTML의 한계를 극복할 목적으로 만들어졌으며, 특히 임의의 자료 구조를 표현하는 데에 장점이 있습니다. XML 은 일반적으로 태그(Tag)라고 불리는 마크업과 내용으로 구성됩니다. 태그는 <로 시작하여 >로 끝나는 마크업 구조를 가지는데 시작 태그(Start-Tag)와 끝 태그(End-Tag>, 빈 요소 태그<Empty-Element Tag)로 나뉩니다. 각각의 모양은 다음과 같습니다. 

시작 태그 : <element>
끝    태그 : </element>
빈 요소 태그 : <element/>

시작 태그와 끝 태그는 서로 짝을 이루고 있어서, 시작 태그로 시작하여 짝이 되는 끝 태그로 끝나거나 빈 요소 태그만으로 이루어지기도 합니다. 시작 태그와 끝 태그 사이에는 마크업이 아닌 문자열로 내용이 작성될 수도 있고 하위 계층을 이루는 태그 쌍이 포함될 수도 있습니다. 이로 인해 데이터의 계층 구조가 만들어집니다. 

XML 데이터 예제
<?xml version="1.0" encoding="UTF-8"?>
<SearchVisSTNArrivalTimeByTrainService>
	<list_total_count>55</list_total_count>
	<RESULT>
		<CODE>INF0-000</CODE>
		<MESSAGE>정상 처리되었습니다.</MESSAGE>
	</RESULT>
	<row>
		<FR_CODE>134</FR_CODE>
		<STATION_CD>1002</STATION_CD>
		<STATION_NM>남영</STATION_NM>
		<SUBWAYENAME>양주</SUBWAYENAME>
		<ARRIVETIME>06:42:00</ARRIVETIME>
		<WEEK_TAG>1</WEEK_TAG>
		<INOUT_TAG>1</INOUT_TAG>
	</row>
	<row
		<FR_CODE>139</FR_CODE>
		<STATION_CD>1006</STATION_CD>
		<STATION_NM>영등포</STATION_NM>
		<SUBWAYENAME>양주</SUBWAYENAME>
		<ARRIVETIME>06:29:30</ARRIVETIME>
		<WEEK_TAG>1</WEEK_TAG>
		<INOUT_TAG>1</INOUT_TAG>
	</row>
</SearchVisSTNArrivalTimeByTrainService>

XMl 형식의 마크업으로 전달된 데이터는 그대로 사용할수 있는 것이 아니라 데이터를 형식에 맞게 분석하는 과정이 필요합니다. 이 과정을 파싱(Parsing)이라고 하고 파싱을 처리하는 모듈을 파서(Parser)라고 합니다. iOS에서는 파운데이션 프레임워크를 통하여 XMLParser 모듈을 제공하므로 이를 사용하면 손쉽게 데이터를 분석할수 있습니다. XML은 시스템에 의존적이지 않은 마크업 형식을 통해 데이터를 주고받을 수 있어서 데이터 교환의 표준으로 삼을수 있다는 장점이 있습니다. 



※ JSON 방식
XML은 태그로 구성된 마크업 형식을 기본 규격으로 사용하므로 플랫폼에 의존적이지 않은 표준 데이터를 제공할수 있다는 장점이 있지만 데이터의 의미를 전달하기 위해 마크업 태그를 사용하므로 주고받아야 할 전체 데이터의 용량이 지나치게 커진다는 단점이 있습니다. 이러한 단점을 극복하기 위해 만들어진 경량의 데이터 교환 형식이 JSON입니다. 

JSON은 JavaScript Object Notation의 약자로서 그 이름대로 자바스크립트 언어에서 객체의 속성을 표현하기 위한 방법으로 처음 사용하기 시작했지만 쉽고 간결한 표현 능력 덕분에 자바스크립트에 국한되지 않고 C계열의 언어나 Java, Perl, Python등 다수의 프로그래밍 언어에서도 지원되는 대표적인 텍스트 기반 데이터 구조로 자리 잡았습니다. 

JSON에 사용되는 데이터 구조는 크게 두 가지 종류로 나눌수 있습니다. 하나는 여러 가지 속성을 다양하게 정의할수 있는 집합 구조이며, 또 다른 하나는 비슷한 형식이 반복되는 리스트 구조입니다. 집합 구조를 JSON 객체라고 부르며 정의할 때 중괄호를 사용하는 반면, 리스트 구조는 JSON 배열 이라고 부르며 정의할 때 대괄호를 사용합니다. 이들 두 가지 구조를 사용하여 JSON은 필요한 모든 형식을 구현합니다. 

표9-2
구분					형식			명칭
여러 속성을 정의하는 순서 없는 집합		{키:값, 키:값, ...}		JSON 객체
비슷한 객체가 반복 나열되는 순서화된 리스트	[객체1, 객체2, 객체3...]	JSON 배열





※ JSON 객체
JSON 객체는 {키 : 데이터} 형태로 이루어진 사전(Dictionary)식 데이터 집합입니다. 사전을 열어보면 왼쪽에는 키워드가, 오른쪽에는 그에 대한 내용이 작성되어 한 쌍을 이루고 있는 것을 볼 수 있는데, 데이터를 정의하는 형식이 이것과 유사하다고 해서 사전식 데이터 집합이라고 합니다. 우리가 앞에서 배운 딕셔너리 객체와 같은 성격이죠. JSON 객체는 중괄호 {로 시작하여 }로 끝납니다. 중괄호 사이에 키와 값이 쌍을 이루어 들어가는 거죠. 키와 값 사이에는 콜론(:)을 사용하여 연결하고, 이웃한 키와 값 쌍을 구분할 때에는 쉼표를 사용합니다. 

앞 장에서 구성했던 영화 정보 데이터 세트를 JSON 형식으로 만들어 봅시다. 영화 정보 데이터는 어떤 항목이 필요할까요? 가장 먼저 영화 제목이 있어야겠죠. 키를 title로 하여 데이터 쌍을 구성해 보겠습니다.
{ "title" : "다크나이트"}

표준 마크업 형식이 정의된 DTD 덕분에 대부분의 경우 큰따옴표가 필요 없었던 XML과는 달리 JSON 포맷은 데이터 키와 내용이 문자열일 경우 큰따옴표를 붙여 문자열임을 표시해 주어야 합니다. 

계속해서 항목을 추가해봅시다. 영화에 대한 간단한 소개를 추가하면 좋겠군요. 이 데이터의 키는 description"으로 하겠습니다. 
{ "title" : "다크나이트", "description" : "영웅물에 철학에 음악까지 더해져 예술이 되다"}

개봉일과 별점, 그리고 영화 섬네일 이미지 항목도 넣어봅시다. 각각 "opendate", "rating", "thumbnail"이라는 데이터 키로 추가합니다.
{ "title" : "다크나이트", "description" : "영웅물에 철학에 음악까지 더해져 예술이 되다", "opendate" - "2008-09-04", "rating" : 8.95, "thumbnail" : "darknight.jpg"}

JSON 객체에는 문자열 이외에 정수나 실수, 논리값도 사용할수 있습니다. rating 항목에서 볼 수 있듯이 실수값을 표현할 때에는 큰따옴표를 붙이지 않습니다. 정수나 논리값도 마찬가지죠. 문자열을 표현할 때만 큰따옴표를 붙여준다는 것을 명심하세요. 

참고로 문자열 앞뒤로 따옴표를 붙여주는 처리를 쿼우팅(Quoting)이라고 합니다. 큰따옴표를 붙여주는 것을 더블 쿼우팅, 작은 따옴표를 붙여주는 것을 싱글 쿼우팅이라고 하는 것도 알아두면 좋습니다. 

데이터가 점점 많아지면 JSON 방식은 가독성이 떨어진다는 단점이 있습니다. 물론 컴퓨터가 데이터를 읽을 때야 가독성이 중요하지는 않겠지만 우선 개발자가 데이터를 보고 그 구조를 이해할수 있어야 그에 맞게 데이터 분석 코드도 구현할수 있을 테니까요. 그래서 내용에는 아무런 차이도 없지만 가독성을 높여서 사람이 보기 쉽도록 다음과 같이 정렬해서 사용하기도 합니다. 어떤가요, 훨씬 더 눈에 잘 들어오지 않나요?
{
	"title" : "다크나이트", 
	"description" : "영웅물에 철학에 음악까지 더해져 예술이 되다", 
	"opendate" - "2008-09-04", 
	"rating" : 8.95, 
	"thumbnail" : "darknight.jpg"
}




참고!! 유효성 검사와 정렬 서비스
네트워크를 통해 전달되는 JSON 대부분은 정렬되지 않은 형태로 전달됩니다. 데이터 구조를 이해하고 그에 맞게 프로그래밍하려면 JSON 데이터를 정렬해서 볼 필요가 있는데 이때 유용하게 사용할수 있는 사이트를 소개합니다. JSON 데이터의 유효성을 점검하고 정렬해주는 서비스를 제공하죠. 
(http://jsonlint.com)
이 사이트는 입력된 JSON 형식의 데이터를 분석하여 잘못된 포맷으로 작성되지 않았는지에 대한 체크할 뿐만 아니라 입력한 JSON 데이터를 가독성 있게 정렬해줍니다. 이같은 서비스 사이트를 이용하면 JSON 데이터 포맷의 오류 여부를 금세 확인할수 있어 작업 능률을 향상시켜주므로 JSON 데이터에 관련된 작업을 하게 될 때 에는 적극적으로 활용하는 것이 좋습니다. 

JSON 객체의 장점 중 한 가지는 복잡한 구조의 데이터를 그룹으로 묶어 계층화할수 있다는 점입니다. 앞에서 작성한 rating 항목의 별점 평가 점수를 연령대별로 나누어 작성해 봅시다. 단순히 생각하면 키를 연령대별로 추가하고 그에 따라 값을 작성하면 됩니다. 

{
	"title" : "다크나이트", 
	"description" : "영웅물에 철학에 음악까지 더해져 예술이 되다", 
	"opendate" - "2008-09-04", 
	"rating-20age" : 8.73
	"rating-30age" : 9.68,
	"rating-40age" : 7.09,
	"rating-50age" : 8.93,
	"rating-60age" : 8.21 
	"thumbnail" : "darknight.jpg"
}

뭐 이것도 크게 나쁘진 않네요. 하지만 JSON 데이터에는 하위 레벨로 JSON 객체를 넣을수도 있습니다. 이를 이용하여 연령별 항목을 묶어 보면 다음과 같습니다. 
{
	"title" : "다크나이트", 
	"description" : "영웅물에 철학에 음악까지 더해져 예술이 되다", 
	"opendate" - "2008-09-04", 
	"rating" : {
		"20age" : 8.73
		"30age" : 9.68,
		"40age" : 7.09,
		"50age" : 8.93,
		"60age" : 8.21 
	},
	"thumbnail" : "darknight.jpg"
}

물론 연령대별로 추가된 JSON 데이터 안에 또 다시 새로운 JSON 데이터를 넣을 수도 있습니다. 이러한 형태로 형식을 구성할 경우 성격에 따라 데이터를 계층적으로 구분할수 있으므로 높은 수준으로 구조화된 데이터를 만들 수 있다는 장점이 있습니다. 

예제에서 만들어본 데이터들은 모두 키-값의 형태로, 매우 보편적인 데이터 구조라고 할 수 있습니다. 모든 현대 프로그래밍 언어들은 어떠한 형태로든 이 데이터 구조를 지원하고 있죠. 따라서 JSON 데이터는 대부분 프로그래밍 언어에서 제공하는 자료 구조와 호환이 가능합니다. 즉 각각의 언어가 지원하는 자료형에 JSON 데이터를 저장하면 단순히 JSON 데이터 자체가 아니라 각 언어에서 제공하는 자료형으로 변환하여 사용할수 있다는 뜻입니다. 

예를 들어 자바는 JSON을 직접 저장할수 있는 JSONObject와 같은 객체를 제공하기도 하지만 해시 테이블(Hash Table)또는 해시 맵(Hash Map)을 통해 사전식 데이터 저장을 지원합니다. 파이썬은 딕셔너리(Dictionary)라는 자료형을 제공하고, PHP에서는 연관 배열(Associated Array)이라는 형태로 사전식 데이터 형식을 지원하고 있습니다. 

스위프트에서는 파이썬과 유사한 딕셔너리(Dictionary)자료형이 제공됩니다. 단 스위프트에서 딕셔너리는 동일한 타입의 데이터만 저장할수 있다는 제약이 있으므로 주의해야 합니다. 맨 처음 추가된 항목의 데이터 타입이 문자열이었다면 그 다음에 추가되는 데이터 내용도 문자열이어야 하는 겁니다. 

그런데 우리가 작성한 JSON 데이터를 봅시다. 대부분 문자열 타입이지만 rating 항목의 값은 실수 타입이므로 딕셔너리에 저장할수 없습니다. 저장을 위해 강제로 모든 데이터를 문자열로 변환하여 바꿀 수도 있겠지만 이 경우 본래의 데이터 타입을 억지로 버리는 결과를 가져오기 때문에 최선의 방법은 아닙니다. 

이때에는 딕셔너리와 유사한 NSDictionary, NSMutableDictionary 자료형을 사용할수 있습니다. 이들 자료형은 다양한 형태의 데이터 타입도 허용하기 때문에 JSON 데이터로 전달되는 값들이 키에 따라 다르더라도 문제없이 저장할수 있습니다. NSDictionary와 NSMutableDictionary 자료형의 차이는 객체 생성 후 수정과 추가, 삭제 기능 여부입니다. 
NSDictionary는 한 번 데이터가 정의되고 나면 새로운 데이터를 추가하거나 수정/삭제할수 없는 반면 NSMutableDictionary는 저장된 데이터를 얼마든지 수정/삭제할수 있는 차이가 있죠. 일반적으로 Mutable 키워드가 붙은 자료형이 함께 제공될 때 이키워드가 붙은 쪽은 편집이 가능하지만 붙지 않은 쪽은 편집이 불가능하다는 차이가 있으므로 이를 기억해주면 좋습니다. 그외 나머지 기능은 모두 동일합니다. 이들 자료형은 스위프트 언어에서 제공하는 것이 아니라 파운데이션 프레임워크를 통해 제공되기 때문에 항상 파운데이션 프레임워크를 반입시킨 다음에 사용해야 한다는 점도 명심해야 할 부분입니다. 


※ JSON 배열
이제 리스트 형태의 데이터를 작성하는 방법을 알아봅시다. 앞에서 제시한 데이터 포맷은 영화 하나에 대한 정보를 제공하는 데에는 유용하지만 금주의 최신 영화 목록이나 원하는 장르의 영화 여러 개의 정보를 목록식으로 보여주는 데에는 한계가 있습니다. 이를 위해 JSON의 기본 구조 두 번째인 리스트, 즉 배열 구조가 사용됩니다. 일반적으로 JSON 배열이라고 부르죠. 

JSON 배열은 순서를 가지는 값들의 집합입니다. 이 데이터 형식은 대괄호 [로 시작해서 ]로 끝나며 그 사이에 데이터를 나열합니다. 나열된 각각의 데이터는 쉼표(,)로 구분합니다. 

JSON 배열 형태로 나열할수 있는 값은 매우 다양합니다. 단순한 문자열이나 숫자, 논리값을 나열할수 있는 것은 물론이거니와 JSON 배열 자체를 나열할 수도 있습니다. 이렇게 JSON 배열 내부에 들어가는 항목을 아이템 이라고 표현합니다. 아래는 JSON 배열을 이용하여 여러 가지 아이템을 나열한 예입니다. 

JSON 배열-정수
[1, 3, 5, 7, 9]

JSON 배열-문자열
["a", "b", "c", "d", "e"]

JSON 배열- 하위에 JSON 배열을 나열한 형태
[
	["a", "b", "c", "d", "e"],
	["A", "B", "C", "D", "E"],
	["a", "bb", "y", "6", "e"],
	["가", "나", "다", "라", "마"]
]

JSON 배열- 하위에 JSON 객체를 나열한 형태
[
	{ "title" : "다크나이트"},
	{ "title" : "호우시절" },
	{ "title" : "말할 수 없는 비밀"}
]

JSON 배열에 JSON 객체를 아이템으로 나열할 때에는 반드시 모든 JSON 객체의 항목이 같아야 하는 것은 아닙니다. 아래와 같은 형식도 가능하죠. 

[
	{ "title" : "다크나이트"},
	{ "title" : "호우시절", "opendate" : "2009-10-08"},
	{ "title" : "말할 수 없는 비밀"}
]

물론 이처럼 통일되지 않은 항목들을 나열한 구조는 그다지 좋지 않습니다. 데이터를 받아 파싱해야 하는 클라이언트 입장에서는 opendate 항목이 있을 때와 없을 때를 구분해서 처리해야 하기 때문입니다. 따라서 위와 같은 데이터를 제공해야 한다면 다음과 같이 항목을 맞춰 주는것이 좋습니다. 
[
	{ "title" : "다크나이트", "opendate" : ""},
	{ "title" : "호우시절", "opendate" : "2009-10-08"},
	{ "title" : "말할 수 없는 비밀", "opendate" : ""}
]

JSON 배열에 대한 내용은 이것이 전부입니다. 나머지 구조는 모두 JSON 배열과 JSON 객체의 조합으로 이루어집니다. 이제 지금까지 배운 것을 바탕으로 영화 정보에 대한 JSON 객체를 리스트 구조로 확장해 봅시다. 

[
	{
		"title" : "다크나이트", 
		"description" : "영웅물에 철학에 음악까지 더해져 예술이 되다", 
		"opendate" - "2008-09-04", 
		"rating" : 8.95, 
		"thumbnail" : "darknight.jpg"
	},
	{
		"title" : "호우시절", 
		"description" : "때를 알고 내리는 좋은 비", 
		"opendate" - "2009-10-08", 
		"rating" : 7.31, 
		"thumbnail" : "rain.jpg"
	}
	{
		"title" : "말할 수 없는 비밀", 
		"description" : "여기서 너까지 다섯 걸음", 
		"opendate" - "2015-05-07", 
		"rating" : 9.19, 
		"thumbnail" : "secret.jpg"
	}
]

아직 끝이 아닙니다. JSON 배열의 아이템으로 JSON 객체를 사용할수 있는 것처럼 JSON 객체 항목의 값 부분에 JSON 배열을 넣을 수도 있습니다. 목록 형태의 데이터를 제공하는 경우에도 단순히 JSON 배열만 전달하기보다는 데이터의 전체 개수나 데이터 종류 등에 대한 메타 정보를 함께 제공해야 할때가 있는데 이때에는 JSON 객체로 메타 정보를 구성한 다음 아래와같이 JSON 배열을 집어넣어 다음과 같은 형태로 만들수 있습니다. 


{
		"listTotalCount" : 3,
		"section" : "movie",
		"genre" : "hero",
		"row" : [
		{
			"title" : "다크나이트", 
			"description" : "영웅물에 철학에 음악까지 더해져 예술이 되다", 
			"opendate" - "2008-09-04", 
			"rating" : 8.95, 
			"thumbnail" : "darknight.jpg"
		},
		{
			"title" : "호우시절", 
			"description" : "때를 알고 내리는 좋은 비", 
			"opendate" - "2009-10-08", 
			"rating" : 7.31, 
			"thumbnail" : "rain.jpg"
		}
		{
			"title" : "말할 수 없는 비밀", 
			"description" : "여기서 너까지 다섯 걸음", 
			"opendate" - "2015-05-07", 
			"rating" : 9.19, 
			"thumbnail" : "secret.jpg"
	}
]

조금 전 만들어 보았던 JSON 배열이 이번에는 JSON 객체의 row 항목 하위에 포함되었습니다. 이렇게 해서 이전 장에서 우리가 수작업으로 입력했던 데이터에 대한 JSON 데이터 버전이 만들어졌습니다. 실제로 우리가 사용하게될 데이터 구조가 이와 완벽하게 일치하지는 않겠지만 대부분의 JSON 데이터 형식은 이와 유사하므로 JSON 데이터 구조만 잘 이해한다면 전체적인 형식을 파악하는 데에도 어려움이 없을겁니다. 

JSON 에 대한 보다 자세한 내용을 알고 싶다면 JSON 표준 규격을 제공하는 http://json.org를 참고하기 바랍니다. 