※ 메시지창 실습
STEP1 : 다음 정보를 참고하여 프로젝트를 생성합니다. 

[프로젝트 정보]
※ Product Name : Msg-AlertController
※ Language : Swift
※ Device : iPhone
※ Use Core Data : 체크해제
※ Template : Single View Application

STEP2 : Main.storyboard 파일을 열고 뷰 컨트롤러에 다음과 같이 레이블과 버튼을 추가합니다. 
중간에  : 알림창 버튼 선택 결과(라벨)
그아래에 : 알림창 실행(버튼)


STEP3 : 레이블과 버튼을 각각 ViewController 클래스로 드래그하여 아울렛 변수 @IBOutlet result, 액션 메소드 @IBAction alert()를 추가합니다. 

ViewController.swift

import UIKit


class ViewController: UIViewController
{
    
    @IBOutlet var result: UILabel!
    
    
    @IBAction func alert(_ sender: Any)
    {
        
    }
    
}

STEP4 : alert() 메소드에 다음과 같이 구문을 작성합니다. 메시지 창을 실행하는 구문입니다. 
ViewController.swift

@IBAction func alert(_ sender: Any)
    {
        //메시지 창 객체 생성
        let alert = UIAlertController(title: "선택", message: "항목을 선택해 주세요", preferredStyle: .alert)
        let cancel = UIAlertAction(title: "취소", style: .cancel) //취소버튼
        //버튼을 컨트롤러에 등록
        alert.addAction(cancel)
        //메시지 창 실행
        self.present(alert, animated: false)        
    }

여기까지 진행되었으면 우선 실행하여 결과를 확인해 봅시다. 

어떤가요. 버튼을 클릭하면 그림 6-9와 같은 메시지 창이 나타나나요? 그렇다면 일단 첫 단계는 무사히 마친 겁니다. 계속해서 다음 단계로 넘어갑시다. 


STEP5 : 확인 버튼을 생성할 UIAlertAction 객체를 정의하고 이를 UIAlertController 인스턴스에 추가합니다. 아래 코드에서 굵게 표시된 부분이 새로 추가된 코드입니다. 

ViewController.swift

@IBAction func alert(_ sender: Any)
    {
        //메시지 창 객체 생성
        let alert = UIAlertController(title: "선택", message: "항목을 선택해 주세요", preferredStyle: .alert)
        let cancel = UIAlertAction(title: "취소", style: .cancel) //취소버튼
        let ok = UIAlertAction(title: "확인", style: .default) //확인 버튼 <<추가
        //버튼을 컨트롤러에 등록
        alert.addAction(cancel)
        alert.addAction(ok) //추가
        //메시지 창 실행
        self.present(alert, animated: false)        
    }

추가된 버튼은 메시지 창에서 다음과 같은 모습으로 나란히 표시됩니다. 



STEP6 : 같은 방식으로 버튼을 더 추가해 봅시다. 

ViewController.swift

@IBAction func alert(_ sender: Any)
    {
        //메시지 창 객체 생성
        let alert = UIAlertController(title: "선택", message: "항목을 선택해 주세요", preferredStyle: .alert)
        let cancel = UIAlertAction(title: "취소", style: .cancel) //취소버튼
        let ok = UIAlertAction(title: "확인", style: .default) //확인 버튼
        let exec = UIAlertAction(title: "실행", style: .destructive)//실행버튼 <<추가
        let stop = UIAlertAction(title: "중지", style: .default)//중지 버튼 <<추가
        
        //버튼을 컨트롤러에 등록
        alert.addAction(cancel)
        alert.addAction(ok)
        alert.addAction(exec) //추가
        alert.addAction(stop) //추가
        //메시지 창 실행
        self.present(alert, animated: false)        
    }

버튼 두 개를 더 추가하였습니다. 실행 버튼은 버튼 스타일을 .destructive로 설정하여 생성했고 중지 버튼은 .default 타입으로 생성하였습니다. 이제 이 메시지 창은 모두 네 개의 버튼을 가지게 됩니다. 실행한 결과는 다음과 같습니다. 

새로운 버튼이 추가된 메시지 알림창은 이전과는 약간 다른 모습입니다. 세로로 길게 늘어나 있으며 각 버튼들이 일렬로 나열되어 있습니다. 책에서는 보이지 않을 수도 있지만 실제로 실행해보면 두 번째 버튼인 실행 버튼은 빨간색으로 강조되어 있구요. 이렇게 버튼이 늘어나면 알림창은 세로로 길게 늘어나는 형태를 가지게됩니다. 

덧붙인다면 이렇게 여러 개의 버튼을 추가했을 경우 보통은 추가하는 순서대로 버튼이 나열되지만 취소 버튼만은 예외입니다. 어떤 순서로 등록하든지 간에 .cancel로 설정된 객체는 항상 메시지 창의 맨 아래에 위치하는 특성을 가집니다. 

이 점은 액션 시트에서도 마찬가지인데 특히 액션 시트에서 .cancel타입으로 설정된 버튼은 화면 제일 아래에 분리되어 표시됩니다. 확인을 위해 임시로 코드를 수정해 봅시다. UIAlertController 클래스를 초기화하는 첫 구문의 내용에서 preferredStyle 매개변수의 인자값을 다음과 같이 .actionSheet로 변경합니다. 

let alert =UIAlertController(title: "선택", message: "항목을 선택해주세요", preferredStyle: .actionSheet)

다시 앱을 실행해서 버튼을 클릭해보면 이번에는 액션 시트 형식으로 구성된 창이 화면 하단에서 나타납니다. 실행된 모습은 다음과 같습니다. 

버튼의 순서는 기존의 알림창과 동일하지만 취소 버튼이 제주도 마냥 분리되어 있는 것을 볼 수 있죠? 이처럼 알림창과 액션 시트 창 모두에서 .cancel 타입으로 설정된 버튼은 특별한 취급을 받기 때문에 하나의 메시지 창 내에서 한 번만 사용할수 있습니다. 

다시 메시지 창 스타일을 .actionSheet에서 .alert로 변경하고 실습을 이어 나가겠습니다. 


SETP7 : 각 버튼을 클릭했을 떄 원하는 액션이 동작할수 있도록 액션 구문을 추가하겠습니다. 액션 구문은 UIAlertAction 클래스의 초기화 구문의 마지막 매개변수에 클로저 형태로 작성되어야 하지만 앞에서 언급한 것처럼 트레일링 클로저 구문을 이용할수도 있습니다. 

ViewController.swift

@IBAction func alert(_ sender: Any)
    {
        //메시지 창 객체 생성
        let alert = UIAlertController(title: "선택", message: "항목을 선택해 주세요", preferredStyle: .alert)
        let cancel = UIAlertAction(title: "취소", style: .cancel){ (_) in
            self.result.text = "취소 버튼을 클릭했습니다."
        } //취소버튼
        let ok = UIAlertAction(title: "확인", style: .default){ (_) in
            self.result.text = "확인 버튼을 클릭했습니다."
        } //확인 버튼
        let exec = UIAlertAction(title: "실행", style: .destructive){ (_) in
            self.result.text = "실행 버튼을 클릭했습니다."
        }//실행버튼
        let stop = UIAlertAction(title: "중지", style: .default){ (_) in
            self.result.text = "중지 버튼을 클릭했습니다."
        }//중지 버튼
        
        //버튼을 컨트롤러에 등록
        alert.addAction(cancel)
        alert.addAction(ok)
        alert.addAction(exec)
        alert.addAction(stop)
        //메시지 창 실행
        self.present(alert, animated: false)        
    }

클릭한 버튼에 대한 메시지가 화면에 추가된 레이블에 출력되도록 구성하였습니다. 실제로 앱을 개발할 때에는 이 구문 대신 여러분이 구현하조가 하는 액션을 작성하면 됩니다 

간혹 화면이 뜨자마자 자동으로 메시지 창을 띄어주어야 할 때가 있습니다. 네트워크 기반 서비스에서 네트워크가 연결되지 않았을 때가 대표적인 경우인데 이때에는 사용자의 액션 없이도 곧바로 메시지 창을 띄워 현재의 상태를 알려주어야 합니다. 

이때 우리가 자주 다루듯이 viewDidLoad() 메소드 내에서 메시지 창을 구현하여 실행하면 런타임 오류가 발생합니다. 아직 메시지 창을 처리해줄 뷰가 화면에 구현되지 않은 상태에서 먼저 화면 전환을 시도했기 때문입니다. 

이를 피하기 위해서는 viewDidLoad() 메소드 대신 viewDidAppear(_:)메소드를 이용하여 메시지 창을 처리해 주어야 합니다. 뷰 객체가 메모리에만 올라온 상태에서 호출되는 viewDidLoad(_:)메소드와 달리 viewDidAppear(_:)메소드는 뷰가 완전히 화면에 표현되고 난 다음에 호출되기 때문에 메시지 창을 띄우기 위한 프레젠트 메소드를 실행하는데 에  아무런 문제가 없습니다. 

ViewController.swift

import UIKit


class ViewController: UIViewController
{
    
    @IBOutlet var result: UILabel!
    
    override func viewDidLoad()
    {
        //메시지 창을 처리하기 부적절한 위치(아직 뷰가 화면에 구현되기 전임)
    }
    override func viewDidAppear(_ animated: Bool)
    {
        //메시지 창을 처리하기 적절한 위치
        let alert = UIAlertController(..)
    }
    
}