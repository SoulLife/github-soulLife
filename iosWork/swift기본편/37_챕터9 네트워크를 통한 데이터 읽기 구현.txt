9.3.2 네트워크 객체를 통한 데이터 요청 기능 구현
다시 앞 장에서 제작하던 MyMovieChart 프로젝트로 돌아가서, API를 호출하고 응답 데이터를 받아 화면에 표시해봅시다. 우선 네트워크를 통해 주어진 API를 호출하고 데이터를 받아오는 과정을 처리하겠습니다. 

가장 먼저 처리해야 할 것은 ListViewController.swift 파일을 열고 viewDidLoad(0 메소드 내부에 REST API를 호출하는 코드를 작성하는 일입니다. 스위프트나 파운데이션 프레임워크에는 REST API호출을 위한 전용 객체가 따로 준비되어 있지 않지만 REST 방식의 구현은 일반 웹 페이지를 호출할 때와 거의 동일한 코드로 구현이 가능하므로 단순히 웹 페이지를 호출하는 코드를 작성한다고 생각하면 구현하기 쉽습니다. 

스위프트에서 웹 페이지를 호출할 때에는 POST 방식과 GET 방식에 따라 각각 작성해야 하는 소스 코드가 다릅니다. 서로 다른 객체를 사용해야 하죠. 특히 POST 방식으로 HTTP 요청을 전송하기 위해 작성해야 하는 코드는 다소 길고 복잡하지만 다행히 우리가 사용할 API는 GET 방식으로 호출하면 되기 때문에 비교적 간단하게 작성할 수 있습니다. 스위프트에서 GET 방식으로 REST API를 호출하여 데이터를 읽어오는 방법은 다음과 같습니다. 

var list = Data(contentsOf: URL 타입의 객체)

Data는 파운데이션 프레임워크에서 제공하는 클래스입니다. 다양한 종류의 데이터를 변환 과정 없이 저장하기 위해 사용하는 이 객체는 텍스트 기반의 데이터뿐만 아니라 이미지나 동영상 과 같은 바이너리 데이터도 담을수 있어 여러가지 종류의 데이터를 처리하는 데에 탁월한 효율 성을 자랑합니다. 

이 객체는 동일한 기능을 제공하는 NSData 객체를 원본으로 하여 스위프트 3 버전부터 새롭게 정의되었습니다. 이전까지는 NSData 기능을 이용하여 같은 코드를 구현할 수 있었죠.
NSData 클래스를 원본으로 하여 만들어졌다고는 해도 사실 타입 알리어스 구문을 이용하여 NSData 클래스의 이름만 살짝 바꾸어 놓은 것에 지나지 않습니다. 실제로 Data 클래스의 레퍼런스를 보면 내부적으로는 NSData 객체를 참조하고 있는 것이 확인됩니다. 

이같은 구조적 특성 때문에 Data 객체는 NSData 객체가 가지고 있는 기능 대부분을 지원할 뿐만 아니라 NSData 객체와 서로 타입 캐스팅도 가능합니다. NSData로 만들어진 객체를 필요에 따라 Data 타입으로 바꾸어 쓰거나 그 반대의 경우가 모두 가능하다는 뜻입니다. 이들은 상위/하위의 관계가 아니기 때문에 캐스팅 시 옵셔널 연산자를 붙이지 않아도 됩니다. 아래는 옵셔널 처리없이 양쪽 타입이 서로 캐스팅되는 과정을 보여주고 있습니다. 

let dt : Data = NSData() as Data
let dt2 : NSData = Data() as NSData

이같은 특성을 가진 Data 객체에서 제공되는 Data(contentsOf:)초기화 구문은 복잡한 과정 없이도 손쉽게 GET 방식으로 RESTful 서비스를 호출하고 응답을 받아올수 있도록 지원합니다. 타 언어에서 동일한 기능을 구현하기 위해 필요한 코드와 비교하면 진짜 이게 다인가? 싶을 정도죠. 

물론 이 과정에서 잘못된 URL이 입력되었거나 서버에 문제가 있는 등의 이유로 응답을 받지 못하는 경우도 존재하는데. 이때에는 Data 객체에 nil 값이 담기기도 합니다. 따라서 Data(contentsOf:)를 통해 생성되는 인스턴스는 항상 옵셔널 타입입니다. 

이제 실제로 소스 코드를 작성하여 데이터를 불러오는 과정을 처리해 봅시다. ListViewController 클래스 파일을 열고 viewDidLoad() 메소드에 다음과 같이 코드를 추가합니다. 

ListViewController.swift

import UIKit

class ListViewController1 : UITableViewController
{
    ...(중략)...
    override func viewDidLoad()
    {
        //1. 호핀 API 호출을 위한 URI를 생성
        let url = "http://swiftapi.rubypaper.co.kr:2029/hoppin/movies?version=1&page=1&count=10&genreId=&order=releasedateasc"
        let apiURI : URL! = URL(string: url)
        
        // 2. REST API를 호출
        let apidata = try! Data(contentsOf: apiURI)
        
        //3. 데이터 전송 결과를 로그로 출력( 반드시 필요한 코드는 아님)
        let log = NSString(data: apidata, encoding: String.Encoding.utf8.rawValue) ?? ""
        NSLog("APi Result=\(log)")
    }
    ...(중략)...
}

REST API로부터 데이터를 읽어오는 소스입니다. 전체적인 흐름은 URL 객체를 생성하고(1), REST API를 호출하여 응답 데이터를 받아오며(2)받아온 데이터를 확인하고자 로그로 출력하는 과정(3)으로 구성되어 있습니다. 

1. 호핀 API 호출을 위한 URI 생성
REST API 호출은 Data(contentsOf:)이 담당하지만 호출에 필요한 네트워크 주소를 URL 객체 타입으로 넣어주어야 합니다 URL은 파운데이션 프레임워크에 정의된 객체로 NSURL 클래스를 바탕으로 하여 스위프트에 적합하도록 구현된 객체입니다. URL 클래스는 문자열 형태의 네트워크 주소를 인자값으로 입력받아 파운데이션 프레임워크에서 사용하는 형식의 주소 객체를 생성합니다. 예제에서 문자열로 사용하고 있는 주소는 영화 목록 API를 호출하기 위한 Request URI입니다. 이렇게 생성한 URL 객체는 다음 행의 Data 클래스 초기화 과정에 인자 값으로 전달하기 위해 apiURI라는 이름의 상수에 대입되는데 여기까지가 1 부분에 작성된 내용입니다. 

2. REST API 호출
두 번째 부분에서는 URL 객체가 저장된 apiURI 상수를 인자값으로 사용하여 REST API를 호출하고 있습니다. 내부적으로는 입력받은 URL 객체를 이용하여 네트워크 통신을 하고, 이 결과로 응답받은 데이터를 Data 객체에 저장한 다음 이 객체를 필요한 순간에 사용하기 위해 apidata 상수에 저장하는 거죠. 이렇게 apidata에 저장된 Data 객체는 이후 용도에 맞는 다른 객체로 다시 변환하여 사용합니다.


3. 데이터 전송 결과를 로그로 출력
프로그래밍 로직상 반드시 필요한 구문은 아닙니다. Data 객체가 제대로 통신을 하고 데이터를 전달받았는지 확인해보기 위한 구문이죠. Data 객체 자체에 저장된 데이터는 출력 시 우리가 확인하기 어려운 형태이므로 확인을 위해 파운데이션에서 지원하는 NSString 타입의 문자열 로 변환해야 합니다. 

중간에 사용된 NSString(data:encoding:)은 Data 타입의 객체를 입력받아 원하는 인코딩 타입의 문자열로 변환하는 역할을 합니다. 

NSString(data: <문자열로 변환할 Data 타입 객체>, encoding: <인코딩 형식>)
문자열로 변환할수 있는 모든 Data 객체는 이 구문을 통해 우리가 눈으로 읽을수 있는 형태의 문자열로 변환됩니다. 하지만 이미지 같은 바이너리 데이터가 입력될 경우 문자열 변환이 실패하기도 합니다. 그래서 위 구문은 옵셔널 타입을 반환하도록 설계되었습니다. 예제에서 Nil 병합 연산자 ??를 사용한 것은 이 때문입니다. 값이 nil이라면 빈 문자열로 변환하려고 말이죠. 



질문!! 문자열이라면 스위프트에서 기본으로 제공하는 자료형인 String 도 있지 않나요? 왜 NSString을 사용하죠?
파운데이션 프레임워크에서 제공하는 NSString 객체는 입력받은 Data 객체를 문자열로 변환해주는 메소드를 지원하지만, 스위프트의 기본 자료형인 String 은 이와 같은 직접적인 변환 메소드가 없어서 상대적으로 복잡한 과정을 거쳐 Data 객체를 변환해야 하기 때문입니다. 




NSString과 String 객체는 둘다 문자열을 다룬다는 공통점이 있고 서로 호환이 가능한 객체 이지만 차이점도 있습니다. NSString은 프레임워크 수준에서 정의된 클래스이고, String은 언어 수준에서 정의된 구조체죠. 또한 제공되는 메소드에서도 차이가 있습니다. 오브젝티브-C에서는 기본 문자열 객체로 NSString을 사용하지만 스위프트에서는 기본 문자열 객체로 String을 사용한다는 점도 알아두어야 합니다. 

API를 통해 받아온 데이터를 NSLog를 이용하여 출력하는 마지막 구문의 결과는 Xcode의 콘솔 로그 창에서 다음과 같이 표시됩니다. 

내용이 많아서 한눈에 파악이 힘들겠지만 데이터의 시작 부분은 사각형으로 표시된 API Result=입니다. 우리가 NSLog 객체에 로그 출력의 시작을 알리는 키워드로 넣어주었던 부분이죠. 이 키워드 뒤에 {로 시작되어 이어지는 문자열이 보일 텐데 우리가 받은 JSOn 포맷의 영화 차트 데이터들입니다. 데이터의 구조는 앞에서 작성해 보았던 샘플 JSON 형태와 동일합니다. 여기까지 확인되었다면 네트워크를 통해 데이터를 읽어오는 부분은 완료한 것입니다. 축하합니다. 


질문!! 저는 결과가 출력되지 않습니다! 다음과 같은 오류가 나오면서 진행이 안 되요. 
App Transport Security has blocked a cleartextHTTP(http://)resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist.file.
iOS 9부터 외부 네트워크 관련된 보안 규칙이 신설되었습니다. 이른바 App Transport Security 줄여서 ATS라고 부르는 규칙이죠. 핵심 내용은 네트워크 객체를 사용해서 SSL 보안 프로토콜을 사용하지 않는 네트워크에 접속하려면 Info.plist 파일에서 특정 설정을 추가하도록 한 것입니다. SSL 보안 프로토콜은 서버와 클라이언트 사이의 통신에 대한 보안 체계로 이 프로토콜을 적용하면 서버와 클라이언트 사이의 패킷은 모두 암호화되어 전송되기 때문에 서버와 클라이언트 사이에서 오고가는 패킷을 누군가가 중간에서 훔쳐볼수 없습니다. 

SSL 보안 프로토콜이 적용된 네트워크는 접속시 https:// 를 사용하고 이를 적용하지 않은 일반 프로토콜은 http:// 를 사용합니다. 이를 통해 보안 프로토콜의 적용 여부를 쉽게 파악할수 있죠. 보안 프로토콜이 적용되지 않은 서버에 임의로 https://로 접근할 수는 없으며, 클라이언트 에서 설정할수 있는 부분도 아닙니다. 반드시 서버 사이드에서 SSL 보안 프로토콜이 적용되어 있어야 합니다. 

SSL 보안 프로토콜이 적용되어 있는 서버라면 ATS 보안 설정 없이도 그냥 접속할수 있지만 SSl 보안 프로토콜이 적용되어 있지 않아 http://로 시작하는 서버에 ATS 보안설정없이 접속하면 정상적으로 통신을 할 수 없습니다. 우리가 사용하고 있는 도메인 역시 http://로, SSL 보안 프로토콜이 적용되지 않았기 때문에 이를 ATS설정 없이 그대로 호출하면 통신이 차단됩니다. 앱이 제대로 실행되지 않죠. 따라서 ATS 설정을 추가해야 서버에서 데이터를 읽어올수 있습니다.

무슨말인지 모르겠다구요? 먼저 접속하려는 서버의 도메인을 확인하세요. 서버 도메인이 https://로 시작한다면 그냥 코드를 실행시켜도 접속이 가능합니다. 하지만 http://로 시작한다면 지금 설명하는 ATS 보안 설정을 추가해 주어야 한다는 겁니다. 

ATS 설정을 추가하는 방법을 알아봅시다. ATS 설정은 Info.plist 파일에서 작업해야 합니다. 먼저 프로젝트 내비게이터에서 Info.plist 파일을 선택한 다음 마우스 오른쪽 버튼을 눌러 팝업 메뉴가 표시되면 차례로 [Open AS] > [Source Code]를 선택합니다. 

이렇게 하면 Info.plist 파일이 xml 파일의 형태로 열리는데. xml의 내부에 다음의 옵션을 추가합니다. 

<key>NSAppTransportSecurity</key>
<dict>
        <key>NSAllowsArbitraryLoads</key>
        <true/>
</dict>
사실 이 옵션은 ATS 설정을 아예 사용하지 않도록 설정하는 것이므로 모든 URL을 허용하여 편리하지만 보안을 위협할수 있습니다. 만약 이보다 높은 보안을 설정하고자 한다면관련 내용에 대해 자세히 알아본 후 적용하기 바랍니다. 어쨌든 이 옵션을 추가해봅시다. 추가할 위치는 <plist> > <dict>의 아래입니다. 여기에 key와 string, 또는 key와 dict 등이 줄지어 자리하는데 이중 가장 마지막에 작성하면 됩니다. 아래는 ATS 설정이 추가된 모습입니다. 

이처럼 ATS 설정을 추가한 다음 다시 실행해 봅시다. 제대로 네트워크 데이터를 읽어오는 것을 확인할수 있을 겁니다. 



9.3.3 전달받은 데이터를 파싱하여 화면에 출력
이번에는 전달받은 데이터를 파싱하여 화면에 출력하겠습니다. 다음과 같이 viewDidLoad() 함수에 굵게 표시된 부분의 코드를 추가합니다. 

ListViewController.swift

    override func viewDidLoad()
    {
        ...(중략)...
        
        // 4. JSON 객체를 파싱하여 NSDictionary 객체로 받음
        do
        {
            let apiDictionary = try JSONSerialization.jsonObject(with: apidata, options: []) as! NSDictionary
            //5. 데이터 구조에 따라 차례대로 캐스팅하며 읽어온다
            let hoppin = apiDictionary["hoppin"] as! NSDictionary
            let movies = hoppin["movies"] as! NSDictionary
            let movie = movies["movie"] as! NSArray
            
            //6 Iterator 처리를 하면서 API 데이터를 MovieVO 객체에 저장한다.
            for row in movie
            {
                // 순회 상수를 NSDictionary 타입으로 캐스팅
                let r = row as! NSDictionary
                //테이블 뷰 리스트를 구성할 데이터 형식
                let mvo = MovieVO()
                //movie 배열의 각 데이터를 mvo 상수의 속성에 대입
                mvo.title = r["title"] as? String
                mvo.description = r["genreNames"] as? String
                mvo.thumbnail = r["thumbnailImage"] as? String
                mvo.detatil = r["linkUrl"] as? String
                mvo.rating = ((r["ratingAverage"] as! NSString).doubleValue)
                
                //list 배열에 추가
                self.list.append(mvo)
            }
        }catch { }
    }
    ...(중략)...
좀 길어 보이지만 내용은 어렵지 않습니다. 찬찬히 뜯어봅시다. 


4. JSON 객체를 파싱하여 NSDictionary 객체로 변환
네트워크를 통해 호출한 API 데이터는 apidata 상수에 저장되어 있습니다. 하지만 이 apidata 상수는 Data 타입이어서 우리가 바로 쓰기는 어렵습니다. 로그를 출력하기 위해 NSString 타입의 문자열로 변환하였듯이 테이블을 구성하는 데이터로 사용하려면 NSDictionary 객체로 변환해야 합니다. NSDictionary는 키-값으로 된 데이터 구조를 저장하므로 JSONObject 포맷의 데이터와 호환됩니다. 만약 데이터가 리스트 형태로 전달되었다면 JSONArray 포맷과 호환되는 NSArray 객체를 사용해야 합니다. 

그렇다면 우리가 받아오는 데이터처럼 하위에 JSON 객체 형식의 데이터나 JSON 배열 형태의 리스트 데이터를 포함하고 있으면 어떻게 해야 할까요? 이때는 읽어 들일 때 데이터 형식에 따라 적절히 캐스팅해주면 됩니다. 리스트일 경우 NSArray로, 일반 JSON 데이터일 경우 NSDictionary로 말이죠. 물론 일반 문자열인 경우 String으로 처리하면 됩니다. 

데이터를 파싱할 때는 파운데이션 프레임워크에서 제공하는 JSONSerialization 객체의 jsonObject() 메소드를 사용하는 것이 좋습니다. 이 메소드는 두 개의 인자값을 입력받는데, 첫 번째는 파싱할 데이터이며 두 번째는 파싱 옵션입니다. 파싱할 데이터에는 apidata 상수를, 파싱 옵션에 넣을 것은 아무것도 없으므로 빈 배열을 넣어주면 됩니다. 

jsonObject() 메소드는 파싱 과정에서 오류가 발생하면 이를 예외로 던지도록 설계되어 있습니다. 이 때문에 메소드를 사용하기 위해서는 do~ try ~ catch 구문으로 감싸주어야 합니다. 진행 도중에 오류가 발생하면 진행하던 과정을 멈추고 catch 블록 쪽으로 오류와 함께 실행 흐름이 전달되죠. 

jsonObject() 메소드의 실행 결과는 입력된 데이터에 따라 NSDictionary 혹은 NSArray 형태로 나올 수 있습니다. 양쪽을 모두지원하기 위해 이 메소드는 옵셔널 Any 타입으로 정의된 결과값을 반환하므로 최종적으로는 이 결과값을 원하는 객체로 캐스팅해서 받아야 합니다. 

예제에서는 실행 결과를 NSDictionary로 캐스팅하여 apiDictionary 변수에 저장하고 있습니다. 캐스팅을 위한 as 키워드에 옵셔널 연산자가 붙은 것을 볼 수 있는데, as!는 옵셔널 타입의 객체를 캐스팅할 때 강제로 해제하여 캐스팅하라는 의미입니다. 물론 해제하지 않고 옵셔널 타입을 유치한 채 하려면 as? 를 사용하면 됩니다. 


5. 데이터 구조에 따라 차례대로 캐스팅하며 읽어옴
apiDictionary 변수에 저장된 JSON 데이터를 분해하여 원하는 값을 단계적으로 찾아가는 부분입니다. API 응답 메시지의 JSON 데이터의 구조를 먼저 살펴봅시다. 

hoppin
	totalCount
	movies
		movie
			movieId
			title
			genreIds
			ratingAverage
			participant
			thumbnailImage
			linkUrl

최상휘에 hoppin이라는 노드가 정의되고, 그 하위 노드에 전체 데이터 수를 알려주는 totalCount, 와 영화 목록을 담고 있는 movies가 정의되어 있습니다. movies 노드 하위에는 movie 노드가 반복되면서 노드 내부에 정의된 영화 제목과 섬네일 이미지, 상세 정보 페이지 URL등도 함께 반복되는 식입니다. 

이 구조에 따라 우리가 원하는 영화 목록 정보를 얻기 위해서는 다음의 순서에 따라 단계적으로 접근해야 합니다. 

hoppin > movies > movie > 영화 목록 정보

맨 먼저 hoppin 노드를 얻는 과정입니다. 먼저 최상위 데이터  apiDictionary에서 "hoppin"이라는 키로 정의된 값을 읽어 들인 다음 이를 hoppin 이라고 정의한 NSDictionary 타입의 상수에 대입합니다. 이때 NSDictionary 타입으로 캐스팅해야 합니다. 

let hoppin = apiDictionary["hoppin"] as! NSDictionary

이어서 hoppin 상수에서 movies라는 키를 이용하여 API 데이터의 movies 노드에 해당하는 부분을 읽어 들인 다음 이를 movies 상수에 저장합니다. 

let movies = hoppin["movies"] as! NSDictionary

마지막으로 movies에서 "movie"키를 이용하여 영화 목록 배열을 읽어 들입니다. 

let movie = movies["movie"] as! NSArray

이렇게 단계적으로 데이터를 읽어 들인 결과로 movie 상수에는 우리가 원하는 영화 목록 정보가 담기게 되었습니다. 응답 데이터 형식에 따라 movie 노드의 값은 배열이기 때문에 이를 받는 movie 상수 역시 NSArray로 캐스팅하였습니다. 

예제에서는 hoppin 노드의 값을 동일한 이름의 hoppin이라는 상수에 저장하고 movies 노드는 movies 상수에 저장하고 있는데 반드시 이름을 같게 할 필요는 없습니다. row1, row2, row3등과 같은 무의미한 이름을 주어도 무방합니다. 다만 예제에서는 노드값을 할당한 상수와 응답 데이터의 구조 사이의 혼동을 줄이고자 이름을 일치시킨 것 입니다. 


6. 배열을 순회하면서 영화 정보 데이터를 차례로 MovieVO 객체로 생성한 다음 이를 list 배열에 추가
for~in 구문을 이용하여 movie 배열에 저장된 영화 정보를 순회하면서 MovieVO 타입의 객체를 만든 다음, 이를 self.list에 담아주는 과정입니다. 응답 데이터의 하위노드인 movie 상수는 배열 타입이므로 루프 구문을 이용하여 차례대로 데이터를 읽어 들일수 있는데 이를 순회 처리 영어로 Iterator라고 부릅니다. 

배열을 순회하는 동안 row 상수에 할당되는 영화 정보들은 NSDictionary 타입으로 정의되기 때문에 "title", "thumbnailImage", "ratingAverage", "linkUrl"등의 키를 이용하여 필요한 항목을 읽어올수 있습니다. 이때 읽어오는 값은 모두 Any 타입이므로  MovieVO의 각 프로퍼티에 맞는 타입으로 캐스팅해 주어야 합니다. 

MovieVO 프로퍼티 중에서 rating을 제외한 나머지 프로퍼티는 모두 문자열 타입으로 정의되어 있기 때문에 그에 맞추어 as? String로 캐스팅하고 있으며, rating 변수만 Double 타입이기 때문에 NSString 형태로 일단 변환한 다음 doubleValue속성으로 값을 추출하고 있습니다. NSString은 doubleValue 속성을 사용하여 내부적으로 Double 형태의 값으로 변환할수 있기 때문에 따로 캐스팅할 필요는 없습니다. 

이제 API를 통해 영화 목록 데이터를 내려받을수 있기 때문에 수동으로 데이터를 직접 정의하던 부분은 더 이상 필요하지 않습니다. 해당 부분의 내용을 삭제해 줍시다. 

ListViewController.swift

나머지는 앞장과 동일합니다. 테이블 구성을 위한 데이터 소스 관련 메소드는 이미 구현되어 있는 상태이므로 그대로 사용하면 됩니다. 그대로 앱을 실행하면 테이블 뷰 화면이 처음 로딩될 때 네트워크를 통하여 API를 호출하고 응답 데이터가 self.list 배열에 저장되었다가 tableView(_:cellForRowAt:)이 호출되면 차례대로 화면을 채워나가게 됩니다. 실행해서 결과를 확인해 보겠습니다. 

섬네일이 표시되지 않아 약간 허전하지만 일단 데이터를 잘 읽어오고 있는 것을 볼 수 있습니다. 뿌듯하죠.? 이제부터 출력되는 데이터는 우리가 수작업으로 등록하는 데이터가 아닌 서버를 통해 응답받는 데이터입니다. 서버측에서는 앱과 달리 배포 과정 없이도 필요할 때마다 데이터를 추가/수정/삭제할 수 있기 때문에 항상 최신의 데이터를 제공할수 있습니다. 서버를 통해 데이터를 제공받는 앱 역시 최신의 데이터를 표시할수 있죠. 물론 관리 인력이 필요하긴 하지만 말입니다. 