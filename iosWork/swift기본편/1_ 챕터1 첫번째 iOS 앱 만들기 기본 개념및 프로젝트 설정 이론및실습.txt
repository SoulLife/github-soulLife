챕터 1 : 첫번째 iOS 앱 만들기
iOS 기반의 기기에서 실행되는 모든 앱은 콘텐츠를 보여주는 데 있어 화면 공간의 제약을 받습니다. 데스크톱 화면처럼 넓은 화면을 사용할수 있는 것도 아니고 무한정 화면 개수를 늘릴수도 없습니다. 그래서 항상 정보와 콘텐츠를 사용자들에게 어떤 방식으로 전달할 것인가에 대해 창조적일수 밖에 없습니다. 보여줄 내용이 많으면 필연적으로 간단하게 요약된 화면을 먼저 제공하고 사용자의 액션에 따라 상세하고 많은 내용을 보여줄 수 있도록 UI 구성 원칙에 따라 앱을 구성하는 것이 중요합니다. 

뷰 컨트롤러(View Controller)는 이런 원칙에 따라 하위에 있는 콘텐츠를 관리하고 보여주거나 숨기는 등의 구성을 조정하는 역할을 합니다. 그래서 뷰 컨트롤러는 내부적으로 뷰를 포함하고 있으며 뷰에 대한 관리를 주로 하죠. 하지만 이것이 뷰 컨트롤러가 맡은 유일한 역할은 아닙니다. 대부분의 뷰 컨트롤러는 화면 전환이 발생할 때 다른 뷰 컨트롤러와 서로 통신하고 조정하는 일을 수행합니다. 

뷰 컨트롤러가 내부적으로 콘텐츠를 관리하기 위해 뷰를 포함하고 조정하며 외부적으로는 다른 뷰 컨트롤러와연결되고 앱의 데이터를 화면으로 연결해주는 역할까지 하고 있기 때문에 객체간의 연결 관계까지 한꺼번에 이해하는 것은 무척 힘든 일입니다. 그래서 그 대신 인터페이스 빌더를 사용하여 스토리보드라는 형식의 파일을 만들게 됩니다. 스토리보드는 앱에서 연결 관계를 더 쉽게 눈으로 직접 확인할수 있도록 해주며 실행시 앱을 초기화하기 위해 필요한 여러 가지 노력을 매우 간단하게 줄여줍니다 

※ UIScreen : 기기에 연결되는 물리적인 화면을 정의하는 객체
※ UIWindow : 화면 그리기 지원 도구를 제공하는 객체
※ UIView : 그리기를 수행할 객체 세트

Window에 첨부된 UIView 객체는 이것을 기본으로 하는 많은 파생 요소들을 가지는 객체로서 우리가 흔히 접하는 화면 구성 요소 대부분이 이에 해당합니다. 수많은 UIView 객체가 모인 Window는 이들을 화면으로 구성하여 Screen 객체에 보내고 Screen 객체는 이를 물리적인 기기에 표시합니다. 이 객체들은 모두 UIKit 프레임워크에 정의된 클래스로서  그림 1-2는 이 객체들과 연관된 주요 클래스들이 UIKit 프레임워크 내에서 어떻게 정의되어 있는지 보여줍니다. 

NSObject
UIScreen

UIResponder
UIView
UIWindow
UIControl

그런데 그림 1-2 구조에서는 뷰 컨트롤러가 빠져있죠? 사실 뷰 컨트롤러는 화면을 그려내는 데에 반드시 필요한 요소는 아닙니다. 앱 아키텍처에서 MVC 패턴을 도입하면서 생겨나게 된 단순한 컨트롤러 객체라고 볼 수 있죠. 하지만 iOS 에서 뷰 컨트롤러에 기대하는 특별한 역할이 있는데 바로 뷰와 리소스를 관리하는 역할입니다. 모든 뷰컨트롤러는 이 역할을 해야 하고 각 역할에 대한 내용은 모두 UIViewController 클래스에 정의되어 있습니다. 따라서 모든 뷰 컨트롤러는 UIViewController 클래스를 상속받아야 합니다. 

그림 1-3은 그림 1-1구조에서 MVC 패턴에 따라 컨트롤러의 역할을 보강한 아키텍처를 보여줍니다. 그림에서 보듯이 화면을 구성할 때 Window에 뷰 객체를 바로 할당해서는 안 됩니다. 대신 Window에 뷰 컨트롤러를 할당해서 뷰 컨트롤러가 자동으로 자신에게 첨부된 뷰들을 화면에 추가하도록 해야 합니다. 

지금까지 진짜 iOS 앱을 만들기 위해 반드시 알아야할 기본 구조와 개념에 대해 가볍게 살펴보았습니다. 이를 바탕으로 실제 앱을 만들어 보도록 하겠습니다. 전편인 문법편과 달리 실제로 만들어 보는 것이 매우 중요하므로 개발 환경을 갖추고 반드시 함께 실습을 진행해 보기 바랍니다. 




1.1 첫번째 앱, Hello World!
대부분의 프로그래밍에서 첫 프로그램은 항상 Hello World! 를 출력해 보는 것에서 시작합니다. 그래서 스위프트로 만들어볼 첫 번째 앱도 역시 [Hello]입니다. 첫 작업이므로 화면에 버튼을 두고 이것을 터치하면 Hello World!가 표시되는 단순한 앱을 만들어 보겠습니다. 

1.1.1 Xcode 프로젝트 생성
Xcode를 실행하면 맨 처음 나타나는 것은 시작 화면입니다. 화면 메뉴 중에서 두 번째 Create a new Xcode project 즉 신규 프로젝트 생성을 선택합니다. 하나의 앱은 보통 하나의 프로젝트 단위로 이루어진다고 생각하면 됩니다. 

만약 이미 Xcode가 실행되어 있는 상태라면 이 창을 띄우기 위해 굳이 프로그램을 종료했다가 다시 실행시킬 필요는 없습니다. Xcode의 컨텍스트 메뉴에서 차례대로 [File] > [New] > [Project]를 선택하면 마찬가지로 프로젝트를 생성할수 있거든요. 정리해 보자면 Xcode 프로젝트를 생성하는 방법은 다음과 같습니다. 

[실습 정리]
※ Xcode 시작화면에서 [Create a new Xcode project] 메뉴 선택
또는
※ Xcode가 실행된 상태에서 컨텍스트 메뉴중 [File] > [New] > [Project] 선택

프로젝트를 생성하는 첫 번째 단계는 프로젝트와 템플릿을 선택하는 것입니다. 이를 위한 화면은 상단과 하단으로 나누어져 있는데 상단에서는 제작할 어플리케이션의 OS 환경을 선택하고 하단에서는 애플리케이션에 적용할 템플릿을 선택할수 있습니다. 

상단의 OS 목록은 현재 애플에서 제공하고 있는 기기에 대응합니다. 아이폰용 프로그램을 개발할 경우 iOS를 macOS용 프로그램을 개발하고자 하는 경우 macOS를 선택하면 되는 식입니다. 마찬가지로 애플 워치용 앱을 개발하려면 watchOS를 애플TV용 앱을 개발하려면 tvOS를 각각 선택하면 되죠. OS 목록 아래에는 템플릿 항목들이 그룹화되어 있습니다. 개별적인 그룹의 내용은 다음 표를 참고하기 바랍니다. 

항목			지원OS		설명
Application		모든OS		독립 실행 프로그램 일반적으로 앱이라고 부르는 모든 프로그램이 해당
Framework & Library	모든OS		프레임워크 또는 라이브러리 다른 프로젝트의 개발을 돕기 위해 사용됨
Other			-		인앱 구매용 패키지 또는 기타 다른 목적의 프로그램

이중에서 우리가 만들어볼 것은 아이폰용 앱입니다. 따라서 상단에서 iOS를 하단의 Application그룹에서는 Single View Application을 선택합니다. 

Single View Application은 하나의 뷰를 가지는 기본 애플리케이션을 만들어주는 템플릿입니다. 이 템플릿을 바탕으로 프로젝트를 생성하면 자동으로 만들어진 하나의 뷰를 볼수 있습니다. 하지만 혹시라도 뷰가 하나밖에 없다고 걱정할 필요는 없습니다. 필요할 때마다 추가하면 되니까요. 

사실 만들려는 앱의 형테에 따라 나머지 템플릿도 다양하게 선택할수 있긴 하지만 처음부터 어떤 템플릿을 사용할지 명확하게 정해서 시작할 필요는 없습니다. 템플릿은 단지 사용을 조금 더 편리하게 도와주는 것일 뿐 강제성이 없어서 임의로 변경할수 있기 떄문이죠. 실제 앱을 만들때야 기획 단계에서 화면 설계가 들어가 있으니 필요한화면이 어떤 형식일지 알고 시작하는 경우가 대부분이지만 그렇지 않더라도 작업 도중 특정 화면 템플릿이 필요하면 그때그때 필요한 뷰를 추가하면 됩니다. 

따라서 우리가 이 책에서 만드는 앱 프로젝트 대부분은 Single View Application에서 시작하고 필요할 때마다 적당한 뷰를 추가하는 방식을 따릅니다. 하지만 나머지 템플릿들에 대해서도 간단히 알아봅시다. 

썸네일		템플릿명				의미
1		Singgle View Application		하나의 뷰로 이루어진 애플리케이션 가장 단순한 구성이며 나머지 모든 템플릿 구성의 기본이 되는 템플릿
게임이미지	Game				게임 애플리케이션 제작을 위한 템플릿
AR		Augmented Reality App		증강 현실 기능 개발을 위한 템플릿
폴더그림		Document Based App		문서 기반 기능을 구현하기 위한 템플릿, 파일 브라우저, ICloud Drive와 같은 기술을 앱 내에서 쉽게 구현할수 있음.
화면이 그룹	Master-Detail Application		메뉴와 상세 화면으로 이루어진 복합 뷰를 기본으로 가지는 애플리케이션으로 아이패드 또는 아이폰의 가로 모드 등 가
         						로 사이즈가 충분할 때는 하나의 화면으로 구성되고 협소할 때는 두 개의 화면으로 나누어 구성됨
하단 선택		Page - Based Application		여러 페이지로 이루어져 차례로 쓸어넘겨 볼수 있도록 구성되는 뷰를 가지는 애플리케이션
메모장 느낌	Tabbed Application		탭으로 구분되는 여러 개의 뷰를 가지는 애플리케이션 각각의 탭은 기본 뷰 컨트롤러를 가지며 탭 화면의 갯수가 일정이						상 늘어날 경우 자동으로 더 보기 메뉴를 처리해주는 특징을 가짐


[실습 정리]
1. 템플릿 선택 창 상단에서 [iOS]선택
2. 하단 영역에서 [Single View Application]선택 후 <Next>버튼 클릭

다음 단계로 넘어갑시다. 이번에는 프로젝트의 정보를 입력할 차례입니다. 

이번 단계에서는 프로젝트 생성을 위한 정보 몇 가지를 입력해야 합니다. 차례대로 항목을 살펴봅시다. 

※ Product Name
우리가 만들 프로젝트 이름을 입력하는 곳입니다. 프로젝트의 이름은 앱의 고유 식별 코드인 Bundle Identifier 줄여서 번들 아이디를 만드는 요소로 사용되므로 실제 프로젝트에서는 적절한 이름을 입력해주어야 합니다. 여기서는 HelloWorld라고 입력하겠습니다. 

※ Team
애플 개발자 계정으로 생성된 인증서를 선택하는 부분입니다. 앱 스토어에 빌드된 앱을 등록하거나 혹은 인 하우스 방식으로 배포할 앱을 빌드하기 위해서는 그에 맞는 인증서가 필요합니다. 이때 애플 개발자 사이트에서 발급받은 인증서를 선택하여 빌드하면 목적에 맞게 서명된 앱을 만들어 낼 수 있습니다. 개발자 계정이 없다면 우선은 None을 선택하도록 합시다. 

※ Organization Name
본인이 소속된 조직명을 입력하는 항목으로 원하는 이름으로 작성하면 됩니다. 

※ Organization Identifier 
프로젝트 운영 기관 또는 조직의 식별값을 입력합니다. 대체로 소속 회사나 해당 프로젝트의 도메인에서 www를 뺀 나머지를 역순으로 사용합니다. 예를 들어 여러분이 프로젝트를 진행하는 회사의 도메인이 www.rubypaper.com라면 Organization Identifier는 com.rubypaper로 작성하는 식입니다. 이 값은 중요한 의미가 있는데 앞선 Product Name 항목과 연결되어 Bundle Identifier 항목을 완성하기 때문입니다. 

※ Bundle Identifier
앱의 고유 식별 코드입니다. 이 항목은 Organization Identifier + product Name 항목으로 자동 구성되기 때문에 우리가 임의로 편집할수 없습니다. 

※ Language
앱을 제작할 개발 언어를 선택하는 항목입니다. Objective-C와 Swift 두 가지 옵션이 있는데 Xcode 5버전까지는 사용할수 있는 언어가 Objective-C하나 였으므로 이 항목이 필요 없었지만 Xcode 6 이후로는 스위프트가 포함되면서 개발 언어를 선택할수 있도록 이 항목이 추가되었습니다. 우리는 스위프트를 이용하여 앱을 개발해 볼 것이므로 Swift를 선택합니다. 

※ Use Core Data
최근에는 서버에 데이터를 저장해두고 네트워크를 통해 데이터를 받아오는 방식이 일반화되어 있지만 때에 따라서는 기기 내부의 저장소에 데이터를 저장해야 할 경우도 있습니다. 이럴 때 데이터 저장을 지원하는 객체인 코어 데이터를 사용할지를 선택하는 옵션입니다. 이옵션을 선택하고 프로젝트를 생성하면 코어 데이터를 사용하기 위한 기본 템플릿이 프로젝트에 추가되므로 좀더 편리합니다. 하지만 소스 코드의 복잡도를 높이는 문제가 있으므로 여기에서는 선택을 해제한 상태로 두겠습니다. 

※ Include Unit Tests
소프트웨어의 품질 관리를 위해 최근 프로그래밍에서는 애플리케이션에 대한 반복적이고 단조로운 기능 테스트 과정을 줄이는 대신 자동으로 테스트하고 결과를 검사해볼수 있는 단위 테스트(Unit Tests)기능을 제공합니다. Xcode에서도 응용 애플리케이션의 기능 일부를 자동으로 테스트해주는 단위 테스트를 사용할수 있습니다. 이 옵션을 선택한 상태로 프로젝트를 생성하면 XXXTests라는 폴더와 기능 단위별 테스트 케이스를 직접 정의할수 있도록 XCTestCase를 상속받은 클래스가 추가됩니다. 

※ Include UI Tests
앞에서 설명했던 Include Unit Tests와 비슷한 목적의 테스트 옵션입니다. 다른 점은 Include Unit Tests가 기능 단위 테스트인 데 비해 이 옵션은 화면 요소에 대한 자동테스트라는 점입니다. 이 옵션을 선택한 상태로 프로젝트를 생성하면 XXXXUITests라는 폴더와 화면 요소를 테스트하는 스크립트를 작성할수 있도록 XCTestCase를 상속받은 클래스가 추가됩니다. 


[실습 정리]
항목			설명
Product Name		"HelloWorld"
Team			"None"
Organization Name		임의입력
Organization Identifier	임의입력
Bundle Identifier		자동완성
Language			Swift
Use Core Data		선택하지 않음
Include Unit Tests		선택하지 않음
Include UI Tests		선택하지 않음

프로젝트 생성 두 번째 단계에서는 프로젝트 파일의 저장 위치를 지정합니다. 이 책에서 우리는 여러 개의 프로젝트를 생성해볼 예정이므로 이들을 한데 모아 관리하기 쉽도록 저장 위치를 선정하는 것이 좋습니다. 

위치를 선택한 후 마지막으로 <Create>버튼을 클릭하면 드디어 프로젝트가 생성됩니다.