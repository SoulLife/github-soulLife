CHAPTER 14 : 오토 레이아웃
드디어 이 책의 대미를 장식하는 마지막 장입니다. 이번 장까지 학습하고 나면 이제 여러분은 스위프트를 이용하여 iOS앱을 만드는 기본 과정을 모두 마치는 것이라 할 수 있습니다. 어떤 의미로는 졸업이라 할 수 있겠군요. 여러분들의 졸업을 미리 축하합니다. 

우리가 마지막으로 학습하게 될 내용은 레이아웃(Layout)에 관한 것입니다. 우리가 지금까지 만든 기능들이 화면에 어떻게 표현될지에 대한 내용을 다루고 있죠. 보여지는 것에 관한 내용이니 만큼 스위프트 코드를 이용하여 직접 코딩하는 부분보다는 스토리보드에서 설정하는 내용이 주를 이루게 될 겁니다. 

지금까지 우리가 경험한 바에 따르면, iOS에서 레이아웃을 구성하는 요령은 마우스 드래그가 전부라고 할 수 있을 정도로 단순했습니다. 그저 스토리보드에서 원하는 위치에 원하는 객체를 가져다 놓으면 될 뿐 이었죠. 스토리보드에서 구성된 내용이 실제 화면에서 그 위치에 그대로 표현되는 iOS 특유의 화면 구성 방식 덕분에 우리는 UI를 구성하는 데 걸리는 시간을 획기적으로 아낄수 있습니다. 지금까지 우리가 UI를 구성하면서 크게 신경을 쓸필요가 없었던 이유이기도 합니다. 하지만 아이폰의 제품군이 다양해지면서 화면 크기 또한 조금씩 변경되고 있습니다. 이제는 우리도 디바이스에 따른 화면 호환성을 고민해야 하는 시점이 온 것입니다. 

이번 장에서는 iOS가 객체를 화면에 배열하는 원칙과 기기별로 어색하지 않은 앱 화면을 만들려면 어떻게 해야 하는가에 대해 배워보겠습니다. 학습 과정을 통해 여러분은 iOS가 제공하는 레이아웃 설정 기능에 대해 자연스럽게 익혀나가게 될 겁니다. 

앞 장에서 배운 웹 뷰나 탭 바 컨트롤러, 인앱 프레임워크, 테이블 뷰 등은 사실 여러분이 원하지 않는다면 사용하지 않아도 되는 항목입니다. 물론 이 기능을 사용하지 않고도 원하는 앱을 만들수 있어야 한다는 전제가 붙긴 하지만요. 하지만 이번 장에서 배울 레이아웃 구성 방법은 앱을 만들기 위해 반드시 알아두어야 합니다.  어느 한 종류의 디바이스 화면 사이즈에만 맞추어 앱을 제작할 수는 없기 때문입니다. 

이번 장을 통해 우리는 레이아웃의 개념과 구성원리에 대해 먼저 학습하고, 이를 바탕으로 하여 우리가 만든 영화 차트 앱의 레이아웃을 설정해 볼 것입니다. 이 과정에서 여러분이 만들고자 하는 앱에서 레이아웃을 위해 신경써야 할 부분이 어디인가를 알아보기 바랍니다 

그러면 여러분 마지막 학습과정으로 출발해볼까요?





14.1 다양한 화면 크기에 대응하는 레이아웃
애플이 아이폰 5, 아이패드 미니, 아이폰6 , 아이폰 6 Plus등 다양한 화면 사이즈를 가진 디바이스를 단계적으로 출시하면서 앱을 만들 때 화면 크기나 기기별 레이아웃을 고민해서 앱을 만드는 노력이 더 이상 안드로이드 개발자들의 전유물이 아닌 시대가 도래했습니다. 어느 순간인가부터 iOS 개발자들도 서로 다른 화면 크기와 비율에서 앱이 어떻게 표현될지에 대해 고민해야 하는 상황에 처하게 되었습니다. 

특히 아이폰 6 Plus 모델의 등장이 가져온 파급력은 상당히 컸습니다. 이 디바이스로 인해 이제 아이폰에서도 넓은 화면 크기에 대응하는 작업이 필수가 되었으니까요. 

화면이 커지면 단순히 앱 화면을 따라서 늘리면 될 것으로 생각할 수도 있지만 그렇게 단순한 것이 아닙니다. 무엇보다 가로세로 비율이 유지되지 않는 아이폰 3GS, 아이폰 4, 아이폰 5, 아이폰 6의 화면 크기 변화는 앱들이 '스스로'화면 크게에 유연하게 대응할수 없는 결과를 만들어 내었습니다. 이제는 우리가 직접 화면 크기의 변화에 유연하게 대응할수 있도록 레이아웃을 구성해 주어야 합니다. 

화면 크기에 대응하는 레이아웃을 구성하려면 화면 크기가 늘어나는 방식에 대한 이해와 더불어 화면 크기가 변할 때 어떤 방식으로 맞출 것인가에 대한 기준이 필요합니다. 기본적으로 iOS에서 화면의 좌표 기준은 좌측 상단이며, 화면 크기가 변하면 우측과 하단의 크기를 늘리거나 줄여서 UI를 맞추기 때문에 기준이 되는 디바이스보다 크면 오른쪽과 아래쪽에 여백이 생기고 반대로 작으면 오른쪽과 아래쪽 UI가 잘려서 제대로 표현되지 않는 현상이 발생합니다. 

이같은 문제를 해결하기 위해 우리는 iOS 디바이스별 화면 크기 변화에 따른 UI의 대응 방향을 결정해야 합니다. 이때 우리가 선택할수 있는 대응 방식은 크게 두 가지로 나눌수 있습니다. 

1. 화면 크기의 변화에 따라 객체의 가로세로 크기는 유지한채 외부 간격만 늘린다. 

2. 화면 크기의 변화에 따라 객체의 외부 간격은 유지한채 가로세로 크기를 늘린다. 

아무 것도 선택하지 않으면 iOS에서 화면을 구성하는 모든 객체는 간격과 크기가 모두 고정됩니다. 가로 크기 100픽셀로 입력한 객체는 화면 크기가 줄거나 늘어도 계속 100픽셀을 유지하려고 하고, 상단으로부터 100픽셀 거리에 있는 객체는 화면 크기에 상관없이 계속 그만큼의 간격을 유지합니다.  따라서 다른 기기에서의 화면 호환을 고려하지 않고 설계한 앱은 작업한 기준 기기에서만 제대로 보일 뿐 나머지 기기에서 실행해보면 화면 일부가 잘리거나 남는 등 레이아웃에 심각한 문제가 발생합니다. 

우리가 만든 MyMovieChart 또한 마찬가지입니다. 다른 버전의 아이폰 기기에서 실행해보면 얼마나 레이아웃에 문제가 있는지 금세 확인할수 있죠. iOS 시뮬레이터를 사용하여 각 디바이스별로 우리가 만든 앱이 어떻게 보이는지 확인해 봅시다. 



※ 기기별 레이아웃 확인하기
iOS 시뮬레이터는 다양한 아이폰 기기에서 실행되는 모습을 미리 볼 수 있다는 장점이 있습니다. 이 때문에 사용자 인터페이스를 설계할 때 실제 디바이스를 통해 앱의 레이아웃을 직접 확인하기보다는 시뮬레이터에서 호환성을 점검하는 경우가 더 많습니다. 다음과 같이 Xcode 위쪽 툴바의 옵션에서 아이폰 버전을 변경한뒤 앱을 실행해 보면 각각의 디바이스 종류별로 앱이 실행된 모습을 확인할수 있습니다. 

iOS 시뮬레이터를 아이폰 5S와 아이폰 6 Plus 로 설정한 다음, MyMovieChart앱을 실행해 봅시다. 각 시뮬레이터마다 다음과 같은 결과를 볼 수 있을 겁니다. 

아이폰SE에서는 앱의 화면 우측이 잘리고, 아이폰 X에서는 화면 하단에 여백이 있습니다. 아이폰 8+에서는 우측과 하단 모두에 여백이 있죠. 어떤가요. 한눈에 봐도 뭔가 잘못되었다는 느낌이 들죠? 비단 대응해야 하는 것은 디바이스 종류뿐만이 아닙니다. 가로와 세로 모드 등 화면이 회전하는 경우도 신경을 써야 합니다. 아예 가로나 세로 모드 중 어느 하나만을 지원한다면 모르겠지만 그렇지 않다면 반드시 화면 회전에 대비한 레이아웃까지 구현해야 합니다. 

다행히 iOS에서는 기기별로 일일이 대응하지 않고도 화면 크기 변화에 따라 유연하게 대처할수 있도록 레이아웃 제어 기능을 두 가지 방식으로 제공합니다. 각각 오토 리사이징(Auto-Resizing)과 오토 레이아웃(Auto-Layout)이라고 불리는 이들 기능에 대해 알아봅시다. 