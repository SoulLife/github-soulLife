※ AppDelegate 객체를 사용하여 값을 주고 받기
먼저 AppDelegate 객체를 이용하여 값을 저장하고 전달해봅시다. AppDelegate.swift 파일을 열어 변수 세 개를 추가합니다. 정확히는 프로퍼티겠네요. 

AppDelegate.swift

import UIKit

@main
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?
    // 값을 저장할 변수를 정의
    var paramEmail : String? //이메일 값을 전달받을 변수
    var paramUpdate : Bool? //자동 갱신 여부를 전달받을 변수
    var paramInterval : Double? //갱신주기 값을 전달받을 변수
    

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        return true
    }

    // MARK: UISceneSession Lifecycle

    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
        // Called when a new scene session is being created.
        // Use this method to select a configuration to create the new scene with.
        return UISceneConfiguration(name: "Default Configuration", sessionRole: connectingSceneSession.role)
    }

    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {
        // Called when the user discards a scene session.
        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.
        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.
    }


}

주의깊게 살펴본 본들은 눈치챘겠지만 AppDelegate 클래스에 추가한 세 개의 변수들은 앞서 뷰 컨트롤러에 직접 값을 전달할 때 추가했던 변수들과 동일합니다. AppDelegate에 값을 저장하는 과정은 사실 ViewController 클래스에 값을 저장하던 것을 AppDelegate 클래스로 옮긴 것에 지나지 않기 때문입니다. 

추가된 변수들에 값을 저장하는 역할은 FormViewController 클래스에서 담당합니다. FormViewController.swift 파일을 열고 submit() 메소드를 다음과 같이 수정합니다. 

FormViewController.swift

import UIKit

class FormViewController : UIViewController
{
@IBAction func onSubmit(_ sender: Any)
    {
        /*
        //presentingViewController 속성을 통해 이전 화면 객체를 읽어온 다음 ViewController 타입으로 캐스팅한다
        let preVC = self.presentingViewController
        guard let vc = preVC as? ViewController else
        {
            return
        }
        //값을 전달한다.
        vc.paramEmail = self.email.text
        vc.paramUpdate = self.isUpdate.isOn
        vc.paramInterval = self.interval.value
        //이전 화면으로 복귀한다
         */
        //AppDelegate 객체의 인스턴스를 가져온다.
        let ad = UIApplication.shared.delegate as? AppDelegate // 1
        
        //값을 저장한다
        ad?.paramEmail = self.email.text
        ad?.paramUpdate = self.isUpdate.isOn
        ad?.paramInterval = self.interval.value
        //이전 화면으로 복귀한다
        self.presentingViewController?.dismiss(animated: true)
    }
}

onSubmit 메소드에서 주의깊게 봐야할 부분은 1로 표시된 부분입니다. AppDelegate 클래스의 인스턴스를 가져오는 부분이죠. AppDelegate는 앱 전체를 통틀어 하나의 인스턴스만 존재하도록 iOS시스템에 의해 보장됩니다. 이를 조금 어려운 말로 싱글톤(Singleton)이라고 하는데 이런 특성 때문에 AppDelegate 클래스의 인스턴스는 직접 생성할 수 없으며 UIApplication.shared.delegate 구문을 통해 현재 생성되어 있는 인스턴스를 참조해야 합니다. 

경우에 따라서는 AppDelegate 클래스를 대신하는 다른 클래스를 만들어 같은 역할로 사용할수도 있습니다. 다음의 몇 가지 원칙만 지켜서 클래스를 생성하면 AppDelegate 클래스를 대체할수 있습니다. 

1. UIResponse 클래스를 상속받아야 합니다. 
2. UIApplicationDelegate 프로토콜구현을 선언해야 합니다. 
3. @UIApplicationMain 어노테이션을 붙여주어야 합니다. 

이때 세 번째 원칙인 @UIApplicationMain 어노테이션을 붙여주는 것이 바로 이 클래스를 앱 델리게이트(AppDelegate)로 선언한다라는 뜻입니다. 따라서 하나의 앱에 @UIApplicationMain 어노테이션은한 번만 사용되어야 합니다. 

이야기가 잠시 다른 곳으로 샜군요 어쨌거나 이같은 앱 델리게이트 역할을 하는 클래스는 현재 AppDelegate 입니다. 따라서 이 클래스의 인스턴스를 가져와야 하죠. UIApplication.shared.delegate 구문으로 읽어온 앱 델리게이트 객체는 UIApplicationDelegate 타입으로 되어 있기 때문에 우리가 추가한 변수들을 사용하려면 AppDelegate 클래스 타입으로 다운 캐스팅해야 합니다. 

나머지 코드는 굳이 설명하지 않아도 알 수 있으리라 생각합니다. AppDelegate 인스턴스의 변수들 각각에 값을 저장한 다음 화면을 복귀하는 겁니다. 이전 화면의 뷰 컨트롤러에 값을 직접 전달하는 대신 AppDelegate 객체에 값을 저장했으므로 VC1으로 화면 복귀하고 나면 다시 AppDelegate 객체에 저장된 값을 읽어오는과정이 필요합니다. ViewController.swift 파일로 돌아가 필요한 작업을 구현해 봅시다. 

ViewController.swift

import UIKit


class ViewController: UIViewController
{
    
    @IBOutlet var resultEmail: UILabel!
    @IBOutlet var resultUpdate: UILabel!
    @IBOutlet var resultInterval: UILabel!
    //값을 직접 전달받을 프로퍼티들
    //var paramEmail : String? //이메일 값을 전달받을 속성
    //var paramUpdate : Bool? // 자동 갱신 여부를 전달받을 속성
    //var paramInterval : Double? //갱신주기 값을 전달받을 속성
    
    //화면이 표시될 때마다 실행되는 메소드
    override func viewWillAppear(_ animated: Bool) {
        /*
        if let email = paramEmail
        {
            resultEmail.text = email
        }
        if let update = paramUpdate
        {
            resultUpdate.text = update == true ? "자동갱신" : "자동갱신안함"
        }
        if let interval = paramInterval
        {
            resultInterval.text = "\(Int(interval))분마다"
        }
        */
        //AppDelegate 객체의 인스턴스를 가져온다.
        let ad = UIApplication.shared.delegate as? AppDelegate
        
        if let email = ad?.paramEmail
        {
            resultEmail = email
        }
        if let update = ad?.paramUpdate
        {
            resultUpdate.text = update == true ? "자동갱신" : "갱신안함"
        }
        if let interval = ad?.paramInterval
        {
            resultInterval.text = "\(Int(interval))분마다"
        }
    }
}

ViewController 클래스에 추가된 코드도 FormViewController 클래스에서 사용된 내용과 크게 다르지 않습니다. 기존에 작성된 구문을 삭제하고 UIApplication.shared.delegate 구문을 통해 앱 델리게이트 인스턴스를 가져온 다음 이를 AppDelegate 타입으로 캐스팅합니다. 캐스팅이 완료되면 앞서 우리가 변수에 저장해둔 값들을 꺼내어 사용할수 있습니다. 이 값들은 옵셔널 타입으로 정의되어 있으므로 적절히 옵셔널 타입을 해제해준 다음 레이블 객체에 값을 표시해주면 끝입니다. 원래 ViewController 클래스에 추가되어 있었던 paramEmail, paramUpdate, paramInterval 변수들은 더이상 필요하지 않으므로 삭제해도 됩니다. 

여기까지가 AppDelegate 클래스를 이용하여 값을 주고 받는 방법입니다. 직접 값을 주고받지 않는 만큼 VC1이 메모리에서 지워지더라도 값이 사라지는 일은 없습니다. AppDelegate 인스턴스에 저장해둔 값은 앱을 종료하기 전까지 유지되죠. 하지만 앱을 종료하면 사라져 버리므로 반영구적으로 값을 저장해두어야 하는 값에 사용하기에는 다소 부적합하다고 할 수있습니다. 



※ UserDefaults 객체를 사용하여 값을 주고받기
이번에는 앱 델리게이트 클래스 대신 코코아 터치 프레임워크에서 제공하는 UserDefaults 객체를 통해 값을 주고 받는 방법을 알아봅시다. 이 객체를 이용하면 앱을 삭제하기 전까지는 저장된 값이 반영구적으로 유지된다는 장점이 있습니다. 때문에 이 객체는 비교적 단순하면서도 값이 유지되어야 하는 로그인 여부나 간단한 설정 정보 등을 저장하는 경우가 많습니다. 

내부적으로 plist 파일을 이용하여 값을 저장하는 UserDefaults 객체는 본래 NSData, NSString, NSNumber, NSDate, NSArray, NSDictionary 타입의 값만 저장할수 있었으며 다른 클래스 타입의 객체를 저장하려면 직렬화 과정을 거쳐야 했습니다. 하지만 스위프트 언어가 코코아 터치 프레임워크에 반영되면서 스위프트에서 제공하는 기본 자료형까지 UserDefaults 객체에서 그대로 저장할수 있게 되었습니다. 

먼저 FormViewController.swift 파일을 열어 submit() 메소드의 기존 내용을 모두 지우고 다음과 같이 작성합니다. 

FormViewController.swift

import UIKit
class FormViewController : UIViewController
{
    //Submit 버튼을 클릭했을 때 호출되는 메소드
    @IBAction func onSubmit(_ sender: Any)
    {
        /*
        //presentingViewController 속성을 통해 이전 화면 객체를 읽어온 다음 ViewController 타입으로 캐스팅한다
        let preVC = self.presentingViewController
        guard let vc = preVC as? ViewController else
        {
            return
        }
        //값을 전달한다.
        vc.paramEmail = self.email.text
        vc.paramUpdate = self.isUpdate.isOn
        vc.paramInterval = self.interval.value
        //이전 화면으로 복귀한다
         
        //AppDelegate 객체의 인스턴스를 가져온다.
        let ad = UIApplication.shared.delegate as? AppDelegate
        
        //값을 저장한다
        ad?.paramEmail = self.email.text
        ad?.paramUpdate = self.isUpdate.isOn
        ad?.paramInterval = self.interval.value
         */
        //UserDefault 객체의 인스턴스를 가져온다.
        let ud = UserDefaults.standard
        //값을 저장한다.
        ud.set(self.email.text, forKey: "email")
        ud.set(self.isUpdate.isOn, forKey: "update")
        ud.set(self.interval.value, forKey: "interval")
        
        //이전 화면으로 복귀한다
        self.presentingViewController?.dismiss(animated: true)
    }
   
}

UserDefaults는 시스템에서 자동으로 생성하여 제공하는 단일 객체이므로 이 인스턴스는 지금까지의 일반적인 방법처럼 직접 생성하는 것이 아니라 UserDefaults.standard 프로퍼티를 사용하여 읽어와야 합니다. 이 프로퍼티는 클래스 프로퍼티이므로 UserDefaults 인스턴스를 생성하지 않고도 사용할수 있습니다. 하긴 UserDefaults 객체의 인스턴스를 얻기위해 UserDefaults 인스턴스가 필요하다고 한다면 논리적 모순이겠군요. 

UserDefaults.standard 프로퍼티를 통해 얻어온 UserDefaults 객체의 인스턴스를 ud 상수에 저장하고 set(_:forkey:) 메소드를 사용하여 값을 저장합니다. UserDefaults 객체에는 스위프트의 기본 자료형을 그대로 저장할수 있으므로 값의 타입을 변경해줄 필요가 없습니다. UserDefaults에 저장한 객체는 함께 저장된 키를 통해 구분되는데 이를 위해 email, isUpdate, interval 을 각각 넣어주고 있습니다. 이렇게 값을 저장한 다음 마찬가지로 아무일 없었다는 듯이 화면을 복귀 처리하면 끝입니다. 

다음으로 값을 꺼내는 코드를 작성해보겠습니다. ViewController.swift 파일을 열고 viewWillAppear(_:)메소드의 내용을 다음과 같이 수정합니다. 

ViewController.swift

import UIKit


class ViewController: UIViewController
{
    //화면이 표시될 때마다 실행되는 메소드
    override func viewWillAppear(_ animated: Bool) {
        //UserDefault 객체의 인스턴스를 가져온다.
        let ud = UserDefaults.standard
        
        if let email = ud.string(forKey: "email")
        {
            self.resultEmail.text = email
        }
        let update = ud.bool(forKey: "update")
        self.resultUpdate.text = update == true ? "자동갱신" : "갱신하지 않음"
        
        let interval = ud.double(forKey: "interval")
        self.resultInterval.text = "\(Int(interval))분마다"
    }
}

viewWillAppear(_:) 메소드에 사용된 코드 중에서 제일 먼저 등장하는 부분은 UserDefaults 객체의 인스턴스를 가져오는 부분입니다. 조금 전에 작성했던 코드와 동일한데 UserDefaults 의 클래스 프로퍼티인 standard를 사용하여 인스턴스 참조를 가져옵니다. 이렇게 얻어진 인스턴스를 ud상수에 저장하고 이를 통해 저장된 값을 꺼내면 끝입니다. 저장된 값을 꺼낼 때에는 저장된 값의 타입에 맞는 메소드를 사용하면 읽어온 값을 캐스팅하는 과정 없이 바로 사용할수 있습니다. 

UserDefaults 객체에서 값을 읽어오는 메소드 중에서는 String 타입의 메소드만 반환값이 옵셔널 타입입니다. 이는 아무값도 저장되어 있지 않을때 nil을 반환한다는 뜻이죠. 따라서 사용할 때에는 적절히 옵셔널 타입을 해제해 주어야 합니다. 위 예제에서는 옵셔널 바인딩을 통해 해제하고 있죠. guard 구문을 사용하지 않고 if구문을 사용한 것은 해당 값이 없더라도 메소드가 종료됭어서는 안되기 때문입니다. 

이와는 달리 Bool 타입이나 Double 타입의 메소드는 일반 타입으로 값을 반환하기 때문에 옵셔널 해제없이 바로 사용하면 됩니다. 아무 값도 저장되어 있지 않다면 각 타입별로 기본값을 반환하게 됩니다. 이렇게 꺼낸 값을 화면에 적절히 표시해주면 실습 과정이 모두 완료됩니다. 

저장된 값의 타입이 어떤 것인지 정확하게 알기 어렵거나 메소드를 공용으로 사용할 때에는 범용 데이터 타입을 반환하는 메소드를 사용해도 됩니다. 이 메소드는 Any 타입을 반환하기 때문에 다음과 같은 식으로 캐스팅해서 값을 사용하면 됩니다. 

let email = ud.value(forKey: "email") as? String
또는
let email = ud.object(forKey:"email') as? String

둘다 Any 타입의 값을 반환하는 메소드입니다. 문자열부터 논리형 실수 등 모든 타입의 값을 읽어올수 있지만 항상 옵셔널 타입으로 반환하기 때문에 주의해야 합니다. 

UserDefaults 객체에 값을 저장하고 나면 앱을 종료하고 다시 열게 되어도 첫 화면부터 값이 표시됩니다. 이 값은 UserDefaults 객체에 저장되어 있는 값이죠. 이렇게 저장된 값은 앱을 삭제하기 전까지는 유효하지만 일단 앱을 삭제하고 나면 함께 제거된다는 점에 주의해야 합니다. 



이장을 마치며
지금까지 학습한 것처럼 뷰 컨트롤러끼리 값을 주고받는 방법은 매우 다양하지만 크게 보면 두 가지입니다. 직접 값을 건너편 뷰 컨트롤러에 전달할 수도 있지만 공용 저장 공간을 이용하여 값을 주고받을수도 있죠. 각각의 방식은 어느것이 더 우월한 것이 아니라 그에맞는 사용처가 따로있습니다. 따라서 두 방법 모두를 잘 이해하고 특성에 맞게 적절히 사용하는것이 중요합니다. 굳이 각각의 값 전달방식을 모두 실습하는 이유가 여기에 있습니다. 