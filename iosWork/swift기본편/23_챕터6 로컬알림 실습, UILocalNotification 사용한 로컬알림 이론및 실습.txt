6.2.2 기본 실습
STEP1 : 다음과 같이 프로젝트를 생성합니다. 

[프로젝트 정보]
※ Product Name : Msg-Notification
※ Language : Swift
※ Device : iPhone
※ Use Core Data : 체크해제
※ Template : Single View Application

STEP2 : 생성된 프로젝트에서 AppDelegate.swift 파일을 열고 UserNotification 프레임워크 반입 구문을 추가합니다. 

AppDelegate.swift

import UIKit
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate
{
  ...(중략)...

STEP3 : application(_:didFinishLaunchingWithOptions:)메소드에 다음과 같은 코드를 추가합니다. func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
    {
        if #available(iOS 10.0, *)
        {
            //경고창 배지, 사운드를 사용하는 알림 환경 정보를 생성하고, 사용자 동의 여부 창을 실행
            let notiCenter = UNUserNotificationCenter.current()
            notiCenter.requestAuthorization(options: [.alert, .badge, .sound], completionHandler: { (didAllow, e) in
                
            })
        }else
        {
            
        }
        // Override point for customization after application launch.
        return true
    }

앞에서 학습한 적도 있지만 application(_:didFinishLaunchingWithOptions:)메소드는 앱이 처음 실행될 때 호출되는 메소드입니다. 정확하게 설명하자면 애플리케이션에서 사용할 클래스와 리소스들이 모두 메모리에 로드되고 아직 애플리케이션의 첫 화면을 모바일 디바이스에 띄우기 직전 그러니까 시작 화면이 스크린에 표시되고 있는 동안 호출됩니다. 하지만 너무 복잡하니 지금은 우선 앱이 처음 실행될때 호출되는 메소드라고 이해하는 것이 편합니다. 

UserNotification 프레임워크에서는 로컬 알림 또는 푸시 알림을 사용하기 위해 UNUserNotificationCenter 객체를 이용하여 미리 알림 설정 환경을 정의하고 이 설정 내용을 사용자에게 승인받는 과정을 거쳐야 합니다. 이 과정은 사용자에게 다음과 같은 메시지 창으로 나타나는데 이때 사용자가 명시적으로 Allow 버튼을 클릭하여 허용하지 않으면 알림을 발송하더라도 사용자가 받을수 없습니다. 

알림 설정에 대한 사용자 동의를 반드시 앱 시작 시점에 받을 필요는 없습니다. 하지만 대부분의 경우에서 앱이 처음 실행될 때 동의를 받는것이 가장 자연스럽기 때문에 보통 앱 델리게이트의 application(_:didFinishLaunchingWithOptions:)메소드 내에서 구현하는 것이 일반적입니다. 

UNUserNotificationCenter는 싱글톤 패턴으로 정의되어 있기 때문에 인스턴스 객체를 우리가 마음대로 생성해서는 안 됩니다. 대신 시스템에서 만들어놓은 인스턴스를 받아서 사용해야 하죠. UNUserNotificationCenter.current()는 시스템에서 제공하는 인스턴스를 받아오는 방법입니다. 

일단 인스턴스를 받아왔다면 requestAuthorization() 메소드를 호출하여 사용자에게 알림 설정에 대한 동의를 받아야 합니다. 이 메소드는 두 개의 인자값을 받는데 첫 번째 인자값은 알림 메시지에 포함될 항목들입니다. 여러 항목을 한꺼번에 입력할수 있도록 배열 타입으로 정의되어 있죠. 

위 예제에서는 알림창(alerts), 알림소리(sounds), 앱 아이콘 모서리에 표시되는 배지(badges)를 사용할수 있도록 알림 환경을 설정했습니다. UNAuthorizationOptions 열거형 객체에 정의되어 있는 값들이죠. 그리고 이렇게 설정된 항목들은 그대로 사용자에게 전달되어 알림 동의를 위한 정보에 사용됩니다. 그림 6-20에서는 예제에서 설정한 alert, sound, 그리고 badge 항목이 사용자에게 안내 메시지를 통해 표시되고 있는 것을 볼 수 있습니다. 

경우에 따라서는 사용자가 알림 설정에 동의했을 시에 특정 작업을 수행해 주어야 할 수도 있습니다. 가령 서버 푸시의 경우 사용자가 알림을 받기로 동의했다면 디바이스 토큰 정보를 서버로 보내 저장해 두어야 합니다. 그래야 그 값을 이용하여 해당 디바이스에 서버 푸시 메시지를 보낼수 있을 테니까요 하지만 사용자가 알림 받기를 거부했다면 디바이스 토큰 정보를 서버에 보낼 필요가 없을 겁니다. 이같은 경우를 위해 두 번째 인자값이 사용됩니다. 

requestAuthorization() 메소드의 두 번째 인자값은 클로저입니다. 사용자가 메시지 창의 버튼을 눌렀을 때 실행되며 알림 동의 여부를 true / false형태로 전달받는 첫 번째 매개변수(예제에서는 didAllow)와 오류 발생시 사용하는 오류 객체 타입의 두 번째 매개변수(예제에서는 e)로 이루어져 있죠. 첫 번째 매개변수의 값이 true라면 사용자가 동의한 것이므로 필요한 작업을 적절히 구현하면 됩니다. 반대로 이 값이 false라면 사용자가 동의하지 않은 것이므로 알림 메시지를 발송하더라도 사용자에게는 표시되지 않습니다. 

STEP4 : applicationWillResignActive(_:) 메소드를 찾아 아래 코드를 추가합니다. 

AppDelegate.swift

func applicationWillResignActive(_ application: UIApplication)
    {
        if #available(iOS 10.0, *) //UserNotification 프레임워크를 이용한 로컬 알림(iOS 10 이상)
        {
            // 알림 등의 여부를 확인
            UNUserNotificationCenter.current().getNotificationSettings(completionHandler: { settings in
                if settings.authorizationStatus == UNAuthorizationStatus.authorized
                {
                    //알림 콘텐츠 객체
                    let nContent = UNMutableNotificationContent()
                    nContent.badge = 1
                    nContent.title = "로컬 알림 메시지"
                    nContent.subtitle = "준비된 내용이 아주 많아요! 얼른 다시 앱을 열어주세요!"
                    nContent.body = "앗! 왜 나갔어요? 어서 돌아오세요!!"
                    nContent.sound = UNNotificationSound.default
                    nContent.userInfo = ["name": "홍길동"]
                    
                    //알림 발송 조건 객체
                    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
                    //알림 요청 객체
                    let request = UNNotificationRequest(identifier: "wakeup", content: nContent, trigger: trigger)
                    //노티피케이션 센터에 추가
                    UNUserNotificationCenter.current().add(request)
                }else
                {
                    print("사용자가 동의하지 않음!!")
                }
            })
        }else
        {
            //UILocalNotification 객체를 이용한 로컬 알림(iOS 9이하)
        }
    }

applicationWillResignActive(_:) 메소드는 앱이 활성화 상태를 잃었을 때 실행되는 메소드입니다. 앱은 여러 가지 이유로 활성화 상태를 잃고 비활성화 상태로 진입할수 있는데 앱을 사용하는 도중 전화가 오거나 SMS가 도착하는 경우 또는 사용자가 홈 버튼을 눌러 앱을 백그라운드로 내렸을 때가 대표적인 경우입니다. 이때 이 메소드가 호출되죠. 우리는 이 메소드를 이용하여 앱이 비활성화되고 나면 몇초후 자동으로 로컬 알림을 띄어줄 예정입니다. 

메소드의 내부에서 가장 눈에 띄는 것은 조건절 if #available() 구문입니다. 이 구문의 목적은 플랫폼 버전에 따라 실행 로직을 나누는 데에 있습니다. 로컬 알림은 iOS 10을 기준으로 하여 구현 방식이 둘로 나누어지는데 iOS 9까지는 UILocalNotification 객체를 통해, iOS 10이상부터는 UserNotification 프레임워크를 이용해서 로컬 알림을 구현해야 하기 때문에 코드를 나누어야 할 필요가 있습니다. 예제에서는 iOS 10이상의 버전은 if 조건절이 그 이하의 버전은 else 조건절이 실행되도록 구현하고 있습니다. 

if #available(iOS 10.0, *) // UserNotification 프레임워크를 이용한 로컬 알림
{
  ...(중략)...
}else //UILocalNotification 객체를 이용한 로컬 알림
{
  ...(중략)...
}

UILocalNotification 객체를 이용하여 로컬 알림을 구현하는 방식은 조금 후에 배워보기로 하고 우선 UserNotification 프레임워크를 통한 구현에 집중해 봅시다. 위 예제에서는 if 조건절에 해당합니다. 

알림 메시지를 보내기 위해 맨 먼저 확인해야 하는 것은 사용자의 동의 여부입니다. 사용자가 동의하지 않았다면 메시지를 보낼 필요가 없을테니 말입니다. 이 값은 getNotificationSettings() 메소드를 통해 확인할수 있습니다. 

//알림 동의 여부를 확인
UNUserNotificationCenter.current().getNotificationSettings { settings in
	if settings.authorizationStatus == .authorized
	{
	 	 ...(중략)...
	} else
	{
		  ...(중략)...
	}
}

사용자가 Allow 또는 허용 버튼을 클릭했다면 getNotificationSettings() 메소드의 인자값 클로저에 전달되는 settings 객체에서 .authorizationStatus 속성값은 UNAuthorizationStatus.authorized로 설정됩니다. 로컬 알림을 발송할수 있는 상태이죠. 반대로 이 속성에 저장된 값이 .authorized이 아니라면 사용자가 허용하지 않은 것이므로 로컬 알림을 발송할 필요가 없습니다. 

사용자의 동의 여부가 확인되었다면 이제 본격적으로 로컬 알림을 구현할 차례입니다. 일반적으로 로컬 알림은 발송할 내용을 정의하는 1단계, 발송 조건을 정의하는 2단계, 알림 요청을 만드는 3단계를 거쳐 노티피케이션 센터에 해당 요청을 등록하는 4단계까지 차례로 연결된다고 설명한바 있습니다. 그리고 1단계에서 가장 먼저 해야할 것은 발송할 내용을 정의하기 위한 UNMutableNotificationContent 객체를 생성하는 것입니다. 바로 아래 코드죠. 

let nContent = UNMutableNotificationContent()

이제 이 객체에다 발송할 내용을 차례로 집어넣으면 됩니다. 설정해야 할 속성은 발송 시각, 타임존, 메시지, 버튼명, 배지, 사운드, 사용자 정의 데이터 등이 있는데요. 차례로 살펴보겠습니다. 

nContent.badge = 1

.badge 속성은 앱 아이콘에 표시될 값입니다. 일명 뱃지라고 하며, 사용자가 확인하지 않은 알림이 있음을 암시하는 표시죠. 아래 그림을 보면 대번에 이해가 갈겁니다. 

nContent.title = "로컬 알림 메시지"
nContent.subtitle = "준비된 내용이 아주 많아요! 얼른 다시 앱을 열어주세요!!"

title 속성과 subtitle 속성은 각각 알림창에 표시될 메시지의 제목과 소제목을 나타냅니다. 이 속성을 통해 설정된 값들은 알림창에서 다음과 같이 표시되죠. 

특히 소 제목을 나타내는 subtitle의 경우 이전 방식인 UILocalNotification 객체에서는 지원되지 않던 속성입니다. UserNotification프레임워크에서 새로 제공하는 속성이므로 사용예 주의할 필요가 있습니다. 

nContent.body = "앗! 왜 나갔어요??? 어서 들어오세요!!"

실제로 전달할 메시지를 넣는 속성입니다. body에는 우리가 전달하고 싶은 내용을 넣을수 있으며 긴 문장도 전달 가능합니다. subtitle은 종종 생략되는 경우가 많지만, title과 body 속성은 알림창에서 거의 항상 사용되는 중요한 속성입니다. 

nContent.sound = UNNotificationSound.default

.sound 속성을 통해 우리는 알람이 도착했을 때 알려줄 사운드를 설정할수 있습니다. 기본 사운드를 사용하거나 아무 소리도 울리지 않도록 설정할수도 있고 또한 직접 제작한 사운드를 설정할 수도 있습니다. 카카오톡을 사용할 때 메시지가 도착하면 울려퍼지던 대표적인 알림음 "까똑"을 떠올려보면 이해하기 쉬울 겁니다. 

nContent.userInfo = ["name": "홍길동"]

userInfo는 로컬 알림과 함께 전달하고싶은 값이 있을 때 사용하는 속성입니다. 일종의 커스텀 형식으로 정의되는 값이죠. 딕셔너리 타입의 이 속성에 저장된 값은 화면에는 표시되지 않지만 이 알림을 눌러서 연결되는 앱 델리게이트 메소드에서는 참조할수 있습니다. 사용자가 알림 메시지를 클릭했을 때 뭔가 처리를 해주기 위해 추가 데이터가 필요하다면 이 속성에 커스텀 데이터를 정의하여 전달하면 됩니다. 

여기까지가 알림창에 발송할 메시지 내용의 설정과정 입니다. 이어지는 다음 단계는 알림 발송 시간을 설정하는 것으로 예제에서는 5초후에 자동 발송되도록 하기 위해 UNTimeIntervalNotificationTrigger 객체를 사용하고 있습니다. 

//알림 발송 조건 객체
let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)

앞에서 설명한 것과 같이 UserNotification 프레임워크는 알림 발송 시간을 설정할수 있도록 대표적으로 두 가지 객체를 제공합니다. 하나는 UNTimeIntervalNotificationTrigger이며 발송 시각과 반복 여부를 설정할수 있죠. 입력값의 단위는 초이므로 위 예제는 5초 뒤에 알림 메시지를 발송하되 반복하지는 마라라고 지시하는 것으로 해석할수 있습니다. 이와 달리 하루중 특정 시각을 지정하여 알림 메시지를 전송할 때에는 UNCalendarNotificationTrigger 객체가 사용됩니다. 

//알림 요청 객체
let request = UNNotificationRequest(identifier: "wakeup", content: nContent, trigger: trigger)

지금까지 설정한 발송 내용과 발송 조건들은 이제 알림 요청 객체의 일부분으로 포함되어, UNNotificationRequest 객체로 만들어집니다. 이 객체는 모두 세 개의 인자값으로 이루어지는데 첫번째 인자값인 identifier는 해당 알림에 대한 임의의 식별 아이디를 두번째 인자값인 content는 발송할 내용을 세번째 인자값은 trigger에는 조금 전에 정의한 발송 시각 조건을 넣어주면 됩니다. 식별 아이디는 주로 이미 등록된 알림 요쳥을 취소하고 싶을 때 여러 개의 알림 요청들 중에서 원하는 것을 식별하는 용도로 많이 사용됩니다. 

//노티피케이션 센터에 추가
UNUserNotificationCenter.current().add(request)

마지막 단계입니다. 발송할 메시지 내용과 발송 조건을 담아 생성한 알림 요청 객체를 노티피케이션 센터에 추가하고 나면 끝이죠. 이제 노티피케이션 센터는 등록된 알림 내용을 iOS의 스케줄링 센터에 등록하고 정해진 시간에 발송되도록 처리해줄겁니다. 우리가 흔히 보는 알림 메시지가 등장하는 것이죠. 

조금 설명이 길었지만 그리 어렵지는 않았을 겁니다. 단순 설정이 대부분이니까요. 지금까지 진행된 예제 내용을 다시 한번 정리해 보겠습니다. 

1. 사용자로부터 알림이 허용되어 있는지 체크합니다.

2. UNMutableNotificationContent 클래스를 사용하여 알림 콘텐츠 객체를 생성합니다.

3. 앱 아이콘에 표시될 배지의 값을 1로 표시합니다.

4. 타이틀과 서브 타이틀을 입력해 줍니다. 

5. 알림 메시지를 설정합니다. 

6. 사운드 속성을 설정합니다. UNNotificationSound 클래스의 default() 메소드를 호출하여 기본 사운드를 설정합니다.

7. UNTimeIntervalNotificationTrigger 클래스를 초기화하여 알림 발송 조건을 지정한 객체를 생성합니다. 시간은 5초 뒤로 설정하였으며 반복하지 않고 한 번만 발송됩니다. 

8. UNNotificationRequest 클래스를 초기화하여 알림 요청 객체를 생성합니다. 알림 요청 객체의 아이디로 설정된 "wakeup"은 등록된 알림 요청을 취소하거나 사용자가 어느 알림 메시지를 클릭했는지 식별할 때 사용됩니다. 나머지 인자값으로 알림 콘텐츠와 알림 발송 조건 객체가 사용됩니다. 

9. 생성된 알림 요청 객체를 노티피케이션 센터에 추가합니다. 노티피케이션 센터는 iOS의 스케줄링 센터에 이값을 등록하고 정해진 시간에 발송되도록 처리해 줍니다. 

작성한 코드가 어떤 식으로 동작하는지 확인해 보기 위해 앱을 실행해 봅시다. 알림 등의 여부를 묻는 팝업창이 뜨면 Allow를 선택하여 알림에 동의하고 메인 화면으로 들어갑니다. 화면에는 아무 것도 없는 상태이므로 시뮬레이터의 홈 버튼을 눌러 앱을 백그라운드 상태로 만들고 잠시만 기다려봅시다. 약 5초뒤 다음과 같은 메시지가 도착하면 성공한 것입니다

이렇게 도착한 알림 중에 확인하지 않은 알림은 iOS의 알림 센터에서 확인할 수 있습니다. 시뮬레이터에서도 실제 디바이스에서 하는 것처럼 화면 상단에서 하단으로 쓸어내리듯이 마우스를 드래그하면 다음과 같은 알림 센터가 나타나서 확인하지 않은 알림을 모두 볼 수 있습니다. 


iOS13 버전이상부터 SceneDelegate.swift 의 func sceneWillResignActive(_ scene: UIScene) 에 구현해야함




6.2.3 받은 알림 처리하기
이제 전달받은 알림을 처리하는 방법을 알아봅시다. 사용자가 알림 메시지를 클릭하여 앱을 실행시켰을 때 종종 알림 메시지에 맞는 별도의 액션을 처리해 주어야 할 경우가 있습니다. 가령 쇼핑몰 앱에서 배송 알림이 도착했다면 사용자가 이를 클릭했을 때 앱의 메인 화면이 아닌 배송 정보 화면으로 바로 이동하도록 처리하는 것 말입니다. 이런 기능을 구현하기 위해서는 어떻게 해야 할까요? 무엇보다도 사용자가 그냥 앱을 실행한 것인지 혹은 알림 메시지를 클릭한 것인지 그리고 알림 메시지를 클릭했다면 수많은 알림 메시지 중에서 어떤 것을 클릭한 것인지 어떻게 구분할수 있을까요?

UserNotification 프레임워크에서는 소위 델리게이트 패턴이라고 불리는 프로그래밍 구조를 사용하여 이같은 요구사항을 처리할수있도록 지원합니다. 델리게이트 패턴에 대해서는 뒤에서 자세히 다루므로 여기서는 단순히 알림을 처리하는 방법을 구현하는 데에 초점을 맞추어 보겠습니다. 

우선 사용자가 알림을 클릭했을 때 이를 감지할수 있도록 하는 방법에 대해 살펴봅시다. 

STEP1 : AppDelegate 클래스 정의 부분에 UNUserNotificationCenterDelegate 프로토콜을 추가합니다. 

AppDelegate.swift

import UIKit
import UserNotifications

@main
class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {
   ...(중략)...


STEP2 : application(_:didFinishLaunchingWithOptions:)메소드의 if #available 조건절에 다음과같이 한줄을 추가합니다.

AppDelegate.swift

 func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
    {
        if #available(iOS 10.0, *)
        {
            //경고창 배지, 사운드를 사용하는 알림 환경 정보를 생성하고, 사용자 동의 여부 창을 실행
            let notiCenter = UNUserNotificationCenter.current()
            notiCenter.requestAuthorization(options: [.alert, .badge, .sound], completionHandler: { (didAllow, e) in
                notiCenter.delegate = self
        }else
        {
      
        }
        ...(중략)...
}

일차적인 작업이 끝났습니다. 이제 앱 델리게이트 클래스는 사용자가 알림 메시지를 클릭하는 이벤트를 전달받을 수 있게 되었습니다. 이는 모두 델리게이트 패턴 구조의 덕택인데요. 추가한 코드의 의미는 다음과 같습니다. 

"알림 센터와 관련하여 뭔가 사건이 발생하면 나(앱 델리게이트)한테 알려줘"

하지만 아직 끝난 것은 아닙니다. 알림 메시지 클릭 이벤트를 앱 델리게이트 클래스가 감지할수 있도록 했을 뿐 이 이벤트를 어디서 받아서 어떻게 처리하게 할지는 전혀 정의되지 않은 상태이죠. 따라서 이에 대한 내용을 정의해야 합니다. 무엇을 어떻게 정의해야 할까요?

결론부터 말하자면 앱이 실행되는 도중에 알림 메시지가 도착할 경우 userNotificationCenter(_:willPressent:withCompletionHandler:)메소드가 자동으로 호출됩니다. 따라서 이 메소드를 구현하면 우리는 앱 실행 도중에 알림 메시지가 도착했는지를 알수 있으며 원한다면 알림 배너를 띄워줄 수도 있습니다. 반대로 이 메소드를 구현하지 않으면 앱 실행 도중에 도착한 알림은 배너 형태로 표시되지 않으므로 앱 실행 중에도 알림 베너를 표시해 주고 싶다면 해당 메소드를 구현해야 합니다. 

또한 사용자가 알림 메시지를 실제로 클릭하면 userNotificationCenter(_:didReceive:withCompletionHandler:)메소드가 자동으로 호출됩니다. 앱이 실행되는 중이던 미실행 상태이던 상관없이 동일하게 말입니다. 따라서 우리는 앱 델리게이트 클래스에다 각각의 경우에 맞게 해당 메소드를 구현해 놓기만 하면 됩니다. 



질문!! 앱 델리게이트 클래스에는 그런 메소드들이 없는데요!

네 없습니다. 당연히 없죠. 이들 메소드는 STEP1 에서 추가한 UNUserNotificationCenterDelegate 프로토콜에 정의되어 있으니까요. 그래서 앱 델리게이트 클래스에다 위 프로토콜을 추가한 겁니다. 이에대한 것은 델리게이트 패턴을 학습할 때 자세히 알아보게 될 겁니다. 

STEP3 : userNotificationCenter(_:willPresent:withCompletionHandler:)메소드를 다음과 같이 구현합니다.

AppDelegate.swift

//앱 실행 도중에 알림 메시지가 도착한 경우
    @available(iOS 10.0, *)
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void)
    {
        if notification.request.identifier == "wakeup"
        {
            let userInfo = notification.request.content.userInfo
            print(userInfo["name"]!)
        }
        //알림 베너 띄워주기
        completionHandler([.banner, .badge, .sound])
    }

앱이 실행 중인 상태에서 알림 메시지가 도착하면 알림 배너의 표시 여부와 상관없이 이 메소드가 호출됩니다. 만약 뭔가 필요한 전처리가 있다면 이를 수행한후 예제의 맨 마지막에 작성된 completionHandler() 메소드를 반드시 호출해 주어야 합니다. 이를 생략하면 앱 실행 도중에 알림 배너는 표시되지 않습니다. 당연히 이어지는 STEP4 의 메소드 역시 호출되지 않을테죠( 물론 생략하더라도 앱이 미실행 중일 때에는 알림 배너가 표시됩니다.)

그런데 앞서 로컬 알림을 구현하면서 식별 아이디를 wakeup으로 입력한 것을 기억하고 있다면 이 코드를 보면서 뭔가 반가움이 앞설 겁니다. 관련 예제에서 식별 아이디는 등록된 로컬 알림을 지우거나 혹은 사용자가 어느 알림 메시지를 클릭했는지 식별하는 용도로 사용된다고 설명했었는데요. 이값이 여기서 다시 등장하여 사용자가 클릭한 알림 메시지를 식별할수 있게 해주는 겁니다. 

notification.request.identifier는 로컬 알림 등록시 입력한 식별 아이디를 읽어오는 속성이며 notification.request.content.userInfo 속성은 사용자가 커스텀으로 정의한 정보를 읽어오는 역할을 하죠. 앞서 로컬 알람 발송시 userInfo 속성에 ["name":"홍길동"]이라는 딕셔너리 값을 저장했던 것을 기억하는지요? 위 예제의 if 조건절 내부에 작성된 print()는 바로 그딕셔너리 값을 읽어오는 구문입니다. 

참고로 메소드 정의 위에 @available(iOS 10.0, *)구문이 추가된 것을 볼 수 있는데요 이는 해당 메소드가 iOS 10부터 사용할수 있음을 의미하는 어노테이션입니다. 조건절에 사용되는 #available()과 약간 쓰임새가 다르므로 주의해야 합니다. 


STEP4 : userNotificationCenter(_:didReceive:withCompletionHandler:)메소드를 다음과같이 구현합니다. 

AppDelegate.swift

//사용자가 알림 메시지를 클릭했을 경우
    @available(iOS 10.0, *)
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void)
    {
        if response.notification.request.identifier == "wakeup"
        {
            let userInfo = response.notification.request.content.userInfo
            print(userInfo["name"]!)
        }
        completionHandler()
    }

앞에서와 비슷하지만 이 메소드는 실제로 사용자가 알림 메시지를 클릭했을 경우에 실행된다는 차이를 가집니다. 따라서 알림 메시지를 클릭하여 들어온 사용자에게 뭔가 특별한 경험을 제공하고 싶다면 이 메소드 내에 원하는 코드를 작성하면 됩니다. 이때 알림 메시지에 대한 정보는 모두 위 메소드의 두 번째 인자값인 response 매개변수에 담겨 전달됩니다.

이상으로 사용자가 알림 메시지를 클릭했을 때 처리해야할 코드의 작성이 모두 끝났습니다. 간단해 보이지만 위 예제는 많은 내용을 함축하고 있는데요 우선 몇 개의 속성을 통해 우리는 알림 메시지에 대한 정보를 확인할수 있습니다. 알림을 작성할 때 정의한 식별값을 확인할수 있으며, userInfo 속성을 통해 우리가 정의한 커스텀 값을 읽어들일 수도 있습니다. 실제 프로그래밍에서는 이들 속성을 활용하여 사용자가 어떤 알림 메시지를 클릭했는지 판단하고 그에 맞는 액션을 적용해 주면 됩니다. 예를 들어 알림 메시지를 클릭했을 때 특정 화면으로 이동하게끔 해주고 싶다면 STEP4 의 메소드 내부에 화면 이동 코드를 작성해주면 되는 식이죠. 






6.2.4 UILocalNotification 객체를 이용한 로컬 알림
이번에는 UILocalNotification 객체를 이용하여 로컬 알림을 발송하는 방법에 대해 알아봅시다. 기본적으로는 UserNotification 프레임워크를 이용한 방식과 유사하지만 다른 부분도 많으므로 주의해야 합니다. 

STEP1 : application(_:didFinishLaunchingWithOptions:)메소드의 else 절에 다음과 같은 코드를 추가합니다. 

AppDelegate.swift

func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
    {
        ...(중략)...
        }else
        {
            //경고창, 배지, 사운드를 사용하는 알림 환경 정보를 생성하고, 이를 애플리케이션에 저장
            let setting = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
            application.registerUserNotificationSettings(setting)
        }
        // Override point for customization after application launch.
        return true
    }
}

앞에서 다루었던 사용자의 알림 설정 환경 동의를 받아 저장하는 부분입니다. 이때 구 버전에서 는 UIUserNotificationSettings 객체를 이용하여 알림 설정 환경을 정의하고 사용자에게 명시적 동의를 받아야 합니다. 

UIUserNotificationSettings 객체는 두 가지 인자값을 받는데 첫 번째 인자값은 사용할 알림 환경입니다. 여러 항목을 한꺼번에 입력할수 있어야 하므로 배열 타입으로 정의되어 있죠. 예제에서는 알림창과 앱 아이콘 모서리에 표시되는 배지, 그리고 사운드를 모두 사용하도록 알림을 설정하고 있는데 이내용은 앞서 살펴본 최신 방식과 유사합니다. 

생성된 알림 설정 정보는 애플리케이션에 등록해 주어야 합니다. 이를 위해 registerUserNotificationSettings() 메소드가 사용됩니다. 이 메소드는 UIApplication 객체에 정의되어 있는데 알림 설정 정보를 인자값으로 하여 호출하면 애플리케이션에 등록됩니다. 이 과정에서 사용자 동의가 필요하기 때문에 실제로 사용자에게 동의 여부 창이 표시되는 시점은 이 메소드가 호출될 때입니다. 

UIApplication은 앱 애플리케이션 자체를 의미하는 객체로 앱 하나당 하나의 인스턴스만 존재하는 싱글턴 패턴으로 설계되어 있습니다. UIApplication 외에도 싱글턴으로 동작하는 객체들을 몇 개 정도 찾아볼수 있는데 이들은 유일한 인스턴스를 참조하기 위한 저마다의 방법을 제공합니다. 애플리케이션 객체의 경우 다음과 같은 구문으로 언제 어디스든 인스턴스를 참조할수 있죠. 

let application = UIApplication.shared

하지만 우리는 위 메소드의 첫 번째 매개변수를 통해 이미 애플리케이션 객체의 인스턴스를 전달받고 있기 때문에 이를 사용하면 됩니다. 만약 인자값이 제공되지 않는 상황에서 애플리케이션 객체를 참조하려면 위 구문을 사용합니다. 

이렇게 읽어들인 애플리케이션 객체를 통해 registerUserNotificationSettings()메소드를 호출하고 여기에 알림 환경 설정 객체를 인자값으로 전달하면 iOS는 이 설정 내용을 바탕으로 사용자 동의창을 생성하고 최종적으로 사용자의 동의를 거쳐 알림 환경이 등록됩니다. 

STEP2 : SceneDelegate.swift의 sceneWillResignActive(_:)메소드에 아래 코드를 추가합니다. 

SceneDelegate.swift

func sceneWillResignActive(_ scene: UIScene) {
       ...(중략)
            }else
            {
                //UILocalNotification 객체를 이용한 로컬 알림(iOS 9이하)
                //알림 설정 확인
                let application = UIApplication.shared
                let setting = application.currentUserNotificationSettings
                //알림 설정이 되어 있지 않다면 로컬 알림을 보내도 받을수 없으므로 종료함
                guard setting?.types != .none else
                {
                    print("Can't Schedule")
                    return
                }
                //로컬 알림 인스턴스 생성
                let noti = UILocalNotification()
                noti.fireDate = Date(timeIntervalSinceNow: 10) //10초후 발송
                noti.timeZone = TimeZone.autoupdatingCurrent //현재 위치에 따라 타임존 설정
                noti.alertBody = "얼른 다시 접속하세요!!!" // 표시될 메시지
                noti.alertAction = "학습하기" // 잠금 상태일 때 표시될 액션
                noti.applicationIconBadgeNumber = 1 //앱 아이콘 모서리에 표시될 배지
                noti.soundName = UILocalNotificationDefaultSoundName // 로컬 알람 도착시 사운드
                noti.userInfo = ["name":"홍길동"] // 알람 실행시 함께 전달하고 싶은 값, 화면에는 표시되지 않음
                //생성된 알람 객체를 스케줄러에 등록
                application.scheduleLocalNotification(noti)
            }
        
}

else 구문 내부에서 우선 처리하는 내용은 알람 허용 여부의 확인입니다. 이 정보는 앞에서 등록한 알람 설정값에 저장되어 있으므로 이를 읽어오는 거죠. 애플리케이션에 현재 설정되어 있는 알림 설정값을 읽어 들일 때에는 currentUserNotificationSettings 속성이 사용됩니다. 

let setting = application.currentUserNotificationSettings
guard setting?.types != .none else
{
  print("Can't Schedule")
  return
}

사용자가 Dont't Allow 또는 허용하지 않음 버튼을 클릭해서 알림이 허용되지 않았다면 읽어온 알림 설정값의 types 속성이 UIUserNotificationType.none으로 나타납니다. 만약 이 값이 .none이라면 사용자가 알림을 거부한 것이므로 로컬 알림을 보내봐야 사용자에게 전달되지 않습니다. 따라서 로컬 알림 발송을 중지하고 그대로 메소드를 종료합니다. 반대로 types 속성에 저장된 값이 .none이 아니라면 사용자가 알림을 허용한 것이므로 비로소 로컬 알림을 발송할수 있는 상태가 됩니다. 

로컬 알림을 위해서는 UILocalNotifcation 클래스를 초기화하여 인스턴스를 생성해야 합니다. 이렇게 얻은 인스턴스에 알림과 관련된 여러 가지 속성을 설정한 다음 애플리케이션 객체의 스케줄링 메소드의 인자값으로 넣어 호출하면 알림 발송 과정이 끝납니다. iOS 스케줄러에 등록된 알림은 정해진 시간이 되면 iOS 의 알림 센터나 잠금창 화면을 통해 사용자에게 메시지를 전달합니다. 

let noti = UILocalNotification()

로컬 알림을 위해 UILocationNotification 객체에 설정해야 할 속성은 앞서와 유사하게 발송 시각, 타임존, 메시지, 버튼명, 배지, 사운드, 사용자 정의 데이터 등이 있습니다. 차례로 확인해 봅시다. 

noti.fireDate = Date(timeIntervalSinceNow : 10) 

fireDate는 로컬 알림이 발송될 시각을 지정하는 속성입니다. 지금으로부터 10초뒤에 발송되도록 설정된 위 예제처럼 Date() 객체 형식으로 지정하면 되는데 특정 날짜와 시각을 직접 지정해서 설정할 수도 있습니다. 

noti.timeZone = TimeZone.autoupdateingCurrent

timeZone은 발송될 시각에 대한 시간대를 설정하는 속성입니다. 예제에서 설정한.autoupdateingCurrent 값은 현재 위치를 바탕으로 시간대를 자동으로 업데이트하는 것을 말합니다. 디바이스를 소지하고 시간 변경선을 지나거나 혹은 날짜 변경선을 지나면 해당 타임존으로 자동 갱신되죠. 

noti.alertBody = "얼른 다시 접속하세요!!!"
noti.alertAction = "학습하기"

alertBody속성과 alertAction 속성은 각각 발송될 알림 메시지와 잠금 상태일 때 표시될 잠금 해제 메시지를 나타냅니다. 이 속성에서 설정된 값들은 잠금 화면에서 다음과 같이 표시되죠. 

noti.applicationIconBadgeNumber = 1 //앱 아이콘 모서리에 표시될 배지

applicationIconBadgeNumber 속성은 앱 아이콘에 표시될 배지입니다. 이전에 구현한 badge 속성과 동일한 역할을 합니다. 

noti.soundName = UILocalNotificationDefaultSoundName // 로컬 알림 도착시 사운드

soundName 속성은 로컬 알림의 도착을 알려줄 사운드를 의미합니다. 이전에 구현한 .sound 속성과 동일하게 기본 사운드를 사용하거나 소리가 울리지 않게 설정할수 있으며 직접 제작한 사운드 역시 설정 가능합니다. 

noti.user = ["name":"홍길동"] //로컬 알림과 함께 전달하고 싶은 값, 화면에는 표시되지 않음

앞서 우리가 원하는 커스텀 정보를 전달하는 방법을 살펴본바 있는데요 구 버전의 방식에서도 커스텀 정보를 전달할수 있습니다. 전달하는 방법은 동일하며 .userInfo 속성을 통해 딕셔너리 형태로 전달하면 됩니다. 

이와같은 여러 속성들이 설정된 알림 인스턴스를 애플리케이션의 스케줄러에 걸어주는 것이 마지막 단계입니다. 예약 발송을 위해서는 애플리케이션 객체에 정의된 scheduleLocalNotification(_:)메소드를 호출하면 됩니다. 이 메소드 대신 presentLocalNotificationNow(_:)메소드를 사용할수도 있는데 이 메소드는 알림 객체의 fireDate 속성에 설정된 값을 무시하고 메시지를 즉각 발송합니다. 

이렇게 해서 구 버전 방식으로 로컬 알림 메시지를 구현해 보았습니다. 이 과정에서 애플리케이션 객체를 통해 호출하는 관련 메소드나 속성들이 여러 곳에서 사용되었는데요. 각각의 메소드는 알림과 관련하여 중요한 역할을 담당하고 있으니 다시 한번 정리해 보고 넘어가겠습니다. 알림을 위해 사용되는 순서대로 나열했습니다. 

UIApplication.shared(앱 델리게이트에서는 자동 정의된 application 매개변수를 사용하면 됨)
.registerUserNotificationSettings(_:)
알림 허용여부를 사용자에게 확인받고 사용자의 선택을 애플리케이션에 등록하는 역할을 합니다. 

.currentUserNotificationSettings
현재 설정된 알림 허용 여부 정보를 읽어옵니다. 

.scheduleLocalNotification(_:)
생성된 알림 객체를 iOS의 스케줄러에 등록합니다. 등록된 알림 객체는 fireDate 속성에 설정된 시간에 맞게 발송됩니다. 

.presentLocalNotificationNow(_:)
생성된 알림 객체의 fireDate 속성을 무시하고 즉각 발송합니다. 





  