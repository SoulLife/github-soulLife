※ 셀프사이징 셀
글자 수나 내용을 기준으로 셀의 높이를 직접 제어하는 앞의 방식은 자유도가 높다는 점에서 여러 가지 활용 가능성이 있지만 직접 높이값을 계산해서 맞추어야 한다는 점이 때로는 만족스럽지 못한 결과를 가져다주기도 합니다. iOS는 8.0 버전 이후부터 동적으로 셀 높이가 결정될수 있도록 하는 방식을 도입했는데 이를 사용하면 직접 높이에 신경 쓸 필요없이 콘텐츠에 따라 자동으로 높이가 조절되므로 무척 편리합니다. iOS에서는 이를 셀프 사이징 셀(Self-SizingCell)방식이라고 명명하고 있습니다. 

셀프 사이징 셀을 구현하려면 다음 두 가지만 이해하고 있으면 됩니다. 

※ estimatedRowHeight 프로퍼티

※ UITableView.automaticDimension 객체

estimatedRowHeight 프로퍼티는 셀 전체의 높이를 결정하기 전에 임시로 사용할 셀의 높이값을 나타냅니다. 테이블 뷰는 이 값을 바탕으로 아직 내부 사이즈가 결정되지 않은 셀들을 임시 배치하고 그 안에 콘텐츠를 구성합니다. 

UITableView.automaticDimension은 테이블 뷰의 rowHeight 속성에 대입되어 높이값이 동적으로 설정될 것을 테이블 뷰에 알려주는 역할을 합니다. 테이블 뷰의 rowHeight 속성이 해당 값으로 설정되면 테이블 뷰는 전체 목록이 모두 만들어진 시점에서 셀 내부의 콘텐츠 레이아웃을 계산하고, 그에 따라 셀마다 높이값을 재설정 합니다. 

이같은 셀프 사이징 셀 방식을 코드로 표현하면 다음과 같습니다. 

self.tableView.estimatedRowHeight = 50
self.tableView.rowHeight = UITableView.automaticDimension

앞에서 설명한 대로입니다. estimatedRowHeight 속성을 사용하여 임시로 적용될 높이값을 설정하고 rowHeight 속성에 UITableView.automaticDimension값을 대입하여 셀의 높이를 동적으로 제어하도록 할 것임을 테이블 뷰에 알려줍니다. 이 두줄의 코드는 viewWillAppear(_:)메소드와 같은 적절한 시점에 넣어서 구현해 주면 됩니다. viewDidLoad()는 아직 뷰가 화면에 구현되기 전 시점이므로 적절하지 않습니다. 

셀프사이징 셀 방식이 구현되고 나면 더 이상 직접 높이값을 처리해줄 필요가 없습니다. 그러니 tableView(_:heightForRowAt:)메소드는 삭제해 줍시다. 

ListViewController1.swift

import UIKit

class ListViewController1 : UITableViewController
{
    ...(중략)...
    override func viewWillAppear(_ animated: Bool)
    {
        self.tableView.estimatedRowHeight = 50 //대충의 높이값
        self.tableView.rowHeight = UITableView.automaticDimension
    }
/*
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat
    {
        let row = self.list[indexPath.row]
        //높이를 조절해준다. 기본 높이 60 + 글의 길이가 30자를 넘어갈 때마다 20만큼씩 높이를 늘려준다.
        let height = CGFloat(60 + (row.count / 30) * 20)
        return height
    }
     */
}

이제 실행해 봅시다. 앞에서 구현한 것과 거의 비슷한 결과지만 개별 행마다 제어해주지 않아도 텍스트 길이에 따라 알아서 셀의 높이가 변하는 것을 볼 수 있습니다. 

이 장을 마치며
이번 장에서는 테이블 뷰를 이용하여 목록을 구현해 보았습니다. 이전까지 다루어 본 실습들은 대부분 정적인 화면을 이용하여 동적인 기능을 부여하는 것이 대부분이었던 반면 테이블 뷰는 데이터를 이용하여 실질적인 유저 인터페이스를 구성하는 동적인 성격이 강하기 때문에 신경써야 할 부분도 많고 작성해야 할 메소드나 코드도 상당히 많으며 무엇보다도 테이블 뷰가 어떤 식으로 동작하는지 원리를 이해하는 것이 매우 중요합니다. 

테이블 목록을 구현할 때 우리의 역할은 제한적입니다. 테이블 목록을 구현하는 주체가 우리가 아닌 시스템 프레임워크라는 뜻입니다. 주어진 순서대로 실행하면서 시스템 프레임워크는 우리에게 필요한 요청을 하고 우리는 단지 시스템 프레임워크의 진행 흐름을 따라 요청에 대한 응답을 제공할 뿐입니다. 따라서 어느 시점에 어떤 요청을 하는지, 우리가 원하는 내용과 기능을 구현하기 위해서는 어느 지점에 어떤 코드를 작성해 두어야 하는지 등은 모두 철저히 시스템 프레임워크가 정의해 놓은 기본 가이드라인을 따라 진행해야 합니다.

이번 장에서는 테이블 뷰의 데이터를 수동으로 등록하고 표현해 보았지만, 실질적으로 테이블 뷰는 많은 양의 데이터를 다루는데 사용되는 객체입니다. 주로 네트워크 서버로부터 전달받은 데이터나 앱 내부에 저장된 데이터 파일 그리고 데이터베이스의 데이터를 이용하여 한꺼번에 읽어들인 대량의 데이터를 효율적으로 출력하는 것이 테이블 뷰의 주된 용도라고 할 수 있죠. 따라서 테이블 뷰의 진정한 의미를 이해하려면 대량의 데이터를 출력하는 연습이 필요합니다. 


이를 위해 다음 장에서는 네트워크 서버를 통해 데이터를 읽어올수 있도록 실습을 준비해 두었습니다. 이를 테이블 뷰 목록으로 구현하면서 여러분은 이번 장에서 미처 생각하지 못했던 여러가지 이슈들을 접하게 될 것입니다. 물론 그같은 내용은 이번 장에서 다룬 것을 바탕으로 하고 있기 떄문에 이번 장의 내용을 충분히 이해하고 있어야 다음 장이 쉽게 이해될수 있을 겁니다. 수고많았습니다. 다음 장에서 뵙겠습니다.!



CHAPTER 09 : 네트워크 통신과 API
앞 장에서 우리는 테이블 뷰에 들어갈 데이터 소스를 구성하기 위해 개별 정보를 하나씩 직접 등록해 주었습니다. 튜플과 배열을 사용해서요. 하지만 그것은 단순히 실습을 위한 코드이기 때문에 가능한 부분입니다. 실제로 사용되는 앱에서 소스 코드를 통해 데이터를 일일이 작성하여 사용하는 경우는 거의 없습니다. 일반적으로 대량의 데이터를 표현할 때에는 데이터 파일을 따로 구성하여 앱 내부에 넣어두고 앱이 구동될 때 이를 읽어 들이는 방식을 취합니다. 

그런데 대부분의 콘텐츠 서비스 앱은 최신 데이터의 제공 여부가 핵심 포인트입니다. 앞 장에서 만들어보았던 영화 정보 앱 역시 최신 영화 정보를 제공하는 것이 가장 중요하죠. 만약 앱을 다운받았는데 일년 전에 개봉한 영화가 최신 영화랍시고 자리를 차지하고 있다면 어떨까요? 아마도 앱에 대한 호감도가 뚝 떨어지거나 적어도 앱을 제대로 관리하지 않는다는 인상은 피하기 어려울 겁니다. 

하지만 앱 내부에 데이터를 담아 배포하는 방식으로 최신 데이터를 유지하기란 쉽지 않습니다. 앱을 배포하고 조금만 시간이 지나도 최신 콘텐츠로서의 가치는 바닥을 치게 되거든요. 계속 앱을 업데이트하도록 만들면 되지 않겠냐 생각할 수도 있습니다. 하지만 이것도 답이 아닙니다. 앱을 자주 업데이트해야 할 수록 앱의 사용자 경험은 점점 나빠지기 때문입니다. 필자만 해도 그렇습니다. 설치한 앱의 업데이트가 잦으면 왠지 불안정한 앱처럼 느껴져서 그냥 지워버리죠. 

최신 데이터를 지속적으로 제공하면서도 앱이 자주 업데이트 되는 것을 피하기 위해 대부분의 앱은 서버를 통해 데이터 파일만 내려받는 방식을 사용합니다. 서버에 항상 최신 데이터나 콘텐츠를 올려두고 이를 앱이 가져가게 하는 거죠. 이로써 앱 자체의 업데이트는 피하되 콘텐츠는 최신의 것을 유지할수 있습니다. 이 과정에서 앱과 서버 간 네트워크 통신이 발생합니다. 

단순히 앱만 작성하여 배포하는 것과는 달리 네트워크 통신으로 데이터를 직접 제공하려면 여러 가지 장비가 필요합니다. 네트워크 서버와 데이터베이스 서버를 갖추고 이를 안정적으로 운영하기 위해 IDC에 관리를 위탁해야 합니다. 불법적인 접근이나 해킹을 막기 위해 방화벽도 설치해야 하고 대량의 요청을 처리하기 위해 부하 분산 장치(SLB : Server Load Balancer)도 추가해야 합니다. 

장비 운영 문제는 차치하고라도 주기적으로 데이터를 업데이트하는 것은 많은 노력이 필요합니다. 개인이 감당하기에는 너무 큰 규모의 작업이거든요. 다행히 서비스 포탈이나 공공 기관에서는 다양한 데이터를 API 형태로 제공하고 있어 이를 이용하면 서버를 운영하지 않아도 충분히 양질의 콘텐츠를 보유한 앱을 제작할 수 있습니다. 선풍적인 인기를 끈 서울 버스 앱이 서울시에서 제공하는 데이터 포털의 버스 운영 정보 API를 이용해 만든 서비스라는 것은 익히 알려진 이야기입니다. 

이번 장에서는 앱과 서버간 네트워크 통신에 대해서 학습해보고 활용할 만한 콘텐츠를 제공하는 오픈 API 서비스들을 살펴본 후 앞 장에서 제작하였던 영화 정보 앱을 네트워크 기반의 실제 데이터로 교체하는 실습을 하겠습니다. 네트워크 통신을 처리하기 위한 코드가 점점 복잡해 질 것이므로 주의 깊게 살펴보고 직접 코드를 작성해보는 것이 좋습니다. 



9.1 네트워크 통신의 종류
앱과 서버 간 네트워크 통신이 이루어지는 방식은 크게 두 가지로 구분해 볼 수 있습니다. 하나는 TCP/UDP를 사용하는 소켓 방식의 연결성 통신이고 또 다른 하나는 HTTP, HTTPS, SMTP 등의 프로토콜을 이용한 비연결성 통신입니다. 두 가지 방식에 대해 각각 알아봅시다.



9.1.1 소켓 방식의 연결 지향 통신
소켓(Socket)을 이용한 네트워크 통신 방식은 보통 저수준(Low-level)통신을 통하여 구현됩니다. 전구가 결합하는 소켓의 개념을 따온 소켓 방식의 연결은 일단 앱과 서버가 연결되면 한쪽에서 명시적으로 끊을 때까지 지속해서 연결을 유지하는 방식입니다. 연결이 이루어진 단계, 연결이 유지되고 있는 단계, 연결이 종료된 단계 등으로 연결 상태를 각각 구분할수 있어서 각 단계에 따라 적절하게 대응하는 방식으로 프로그래밍하는 것이 일반적입니다. 

연결을 종료하기 전까지는 한번 연결된 통신을 계속 유지하므로 재연결할 필요없이 원하는 만큼 빠르게 메시지를 주고받을수 있는 장점이 있습니다. 그러나 연결 정보를 유지하기 위해 네트워크 대역을 많이 소모하고, 서버 부하도 크다는 단점 때문에 네트워크 환경이 고르지 않은 모바일 서비스에서는 메신저나 화상 통화, RPG 게임 등에서만 제한적으로 사용되기도 합니다. 소켓을 이용한 연결 방식은 다시 두 가지로 나뉘는데 하나는 데이터 유실을 방지하고 완전한 전송을 보장하지만 상대적으로 덜 빠른 TCP 연결이고 또 다른 하나는 데이터의 완전한 전송을 보장하지 않지만 상대적으로 더 빠른 UDP 연결입니다. 