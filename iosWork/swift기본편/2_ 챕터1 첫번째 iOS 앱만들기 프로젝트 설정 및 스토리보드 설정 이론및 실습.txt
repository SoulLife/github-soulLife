1.1.2 프로젝트 설정 : 프로젝트 생성이 끝나면 프로젝트 설정 정보창이 열립니다. 이 창은 다양한 설정 정보를 확인할수 있는 공간일 뿐만 아니라 주요 속성을 설정하는 데 사용하기도 합니다. 설정창을 직접 열고 싶을 때에는 왼쪽 프로젝트 내비게이터에서 프로젝트명을 클릭하면 됩니다. 설정창은 몇 개의 영역으로 나누어져 있습니다. 이 중에서 특히 중요한 영역을 차례로 살펴보겠습니다. 

프로젝트 설정 정보 중에서 가장 위에표시된 [Display Name]은 Xcode 8.0부터 신설된 항목 입니다. 모바일 기기에 설치된 앱의 이름을 설정하는 역할을 하죠. 프로젝트 이름과 상관없이 우리가 원하는 앱 이름을 입력해주면 됩니다. 대부분 프로젝트명은 영어로 설정하지만 앱의 이름은 한글로 표시해야 할 때가 많습니다. 이때 이 항목을 이용하여 이름을 설정해주면 됩니다. 

Xcode8.0이전에는 [Bundle Name]이라는 항목이 이 역할을 대신했습니다. [BundleName]은 그림과 같이 [Info]탭 항목에 속해 있는데요 아직도 이 항목의 값을 편집하면 앱 이름을 바꿀수 있습니다. 다만 [Bundle Name]과 [Display Name]항목의 값이 동시에 설정될 경우 Xcode는 [Display Name]을 우선 적용합니다. 

그 아래의 [Bundle Identifier]는 앱 스토어가 앱을 식별하는 고유 코드입니다. 프로젝트 생성 과정에서도 한번 본적이 있는 것처럼 프로젝트 이름과 조직명이 합해져 만들어 내는 값으로 프로젝트가 생성되고 나면 수정할 수 없습니다. 

이어서 [Deployment Info]항목을 살펴봅시다. 

이 영역은 앱이 배포될 때 필요한 항목을 설정하는 부분입니다. [Deployment Target]은 배포를 허용할 iOS 버전의 하한선을 지정하는 항목으로 여기서 지정한 항목보다 낮은 버전의 iOS에는 설치가 제한됩니다. 하지만 버전을 낮게 설정한 상태에서 상위 버전을 충분히 대응하지 않으면 최신 iOS에서는 원하는 기능이 제대로 동작하지 않을 수 있으므로 주의해야 합니다. 

[Device]항목은 아이폰용, 아이패드용, 그리고 둘 모두를 지원하는 유니버설 세 값 중에서 선택할 수 있습니다. 유니버설로 선택할 경우 스토리보드가 자칫 매우 복잡해질수 있으므로 특별히 아이폰과 아이패드 양쪽을 모두 지원할 분명한 목적이 있는 경우가 아니면 아이폰이나 아이패드 중 하나를 선택하는 것이 좋습니다. 여기서는 iPhone으로 선택합니다. 

[Main Interface]는 앱이 처음 실행될 때 기본 인터페이스 파일을 무엇으로 할 것인지 설정하는 항목입니다. 아직 스토리보드 파일에 대해 배우기 전이므로 여기서는 그냥 Main으로 선택해두면 됩니다. 이는 Main.storyboard 파일을 기본 인터페이스 파일로 하겠다는 의미입니다. 

[Device Orientation]는 모바일 기기의 가로, 세로에 대한 회전 여부를 설정하는 항목입니다. 각각의 방향을 결정하는 체크박스 중에서 체크된 것들에 한해 지원됩니다. 여기서는 [Portrait]만 선택하고 나머지 항목들은 모두 선택을 해제하겠습니다. 각 항목에 대한 설명은 표 1-3을 참조하기 바랍니다. 

표 1-3 기기 방향 옵션
항목명		의미						동작
Portrait		디바이스의 기본 방향(아이폰에서는 세로 모드		체크
Upside Down	디바이스의 위 아래를 180도 회전한 상태		체크 해제
Landscape Left	디바이스를 왼쪽으로 90도 회전시켜 눕힌 상태		체크 해제
Landscape Right	디바이스를 오른쪽으로 90도 회전시켜 눕힌 상태		체크 해제

[App Icons and Launch Images] 영역도 눈여겨볼 필요가 있습니다. 이 영역은 기기에 설치되는 앱의 아이콘에 대한 설정과 초기 로딩 페이지 설정을 관리합니다. 우선은 기본 설정값으로 앱을 제작하겠지만 실제 앱을 만들 때에는 반드시 이 부분에 대한 설정 작업이 필요합니다. 

다음영역인 [Linked Frameworks and Libraries]는 프레임워크나 라이브러리를 추가할때 등록하는 부분입니다. 지금은 UIKit 프레임워크만으로도 충분하므로 당장 사용할 일은 없겠지만 이 책의 후반부에서는 지도 기능을 구현하기 위해 프레임워크를 추가해 볼 것입니다. 



1.1.3 프로젝트 구성과 스토리보드 : 이제 왼쪽의 프로젝트 탐색기를 통해 프로젝트의 구성을 살펴봅시다. 우리가 만든 HelloWorld 프로젝트는 그림 1-14처럼 기본적으로 클래스 파일인 AppDelegate.swift와 ViewController.swift 그리고 화면을 담당하는 Main.storyboard 파일과 LaunchScreen.storyboard 파일, 이미지 등 리소스를 관리하는 Assets.xcassets 프로젝트의 설정을 담당하는 Info.plist 파일로 구성됩니다. 옵션 설정에 따라 XXXTests폴더와 XXXUITests폴더가 추가되어 있을 수도 있습니다. 

*.swift 확장자로 이루어진 클래스 파일은 앱의 소스 코드를 구성하는 역할을합니다. 기본 프로젝트에 포함되어 있는 클래스 파일은 두 개인데 이 중에서 AppDelegate.swift는 앱 전체의 생명 주기 관리를 위임받은 객체인 앱 델리게이트를 구현한 클래스입니다. 쉽게 말해 앱 전체에 적용해야 할 기능을 담당하는 클래스라고 할 수 있습니다. 앱이 실행되고 종료될 때 그리고 활성화 상태가 되거나 비활성화 상태가 될때 백 그라운드 상태로 들어가는 등의 다양한 상태 변화를 감지하고 이에대한 처리를 해주어야 할때 이 클래스를 이용합니다

ViewController.swift 파일은 뷰 컨트롤러를 구현한 클래스입니다. 앱은 하나 이상의 화면을 가지는데 이를 관리하기 위해 사용되는 것이 뷰 컨트롤러입니다. 일반적으로는 화면의 개수만큼 뷰 컨트롤러가 필요하며 위에서 정의되어 있는 것은 첫 번째 화면으로 사용될 뷰 컨트롤러에 해당합니다. 

*.storyboard 확장자로 이루어진 스토리보드 파일은 유저 인터페이스를 종합적으로 구현하는 역할을 합니다. 프로젝트를 생성하면 자동으로 만들어지는 스토리보드 파일은 두 개로 Main.storyboard 파일은 앱의 사용자 인터페이스 설계를 담당하고 LaunchScreen.storyboard 파일은 앱을 실행하면 처음 나타나는 시작 화면을 구성하는 데에 사용됩니다. 참고로 시작화면은 다른 말로 스플래시(Splash)라고도 불립니다. 

스토리 보드 파일의 내용을 살펴봅시다. 왼쪽 프로젝트 내비게이터에 있는 파일 목록중 Main.storyboard 파일을 선택하면 스토리보드 파일을 열 수 있습니다. 참고로 스토리보드 파일을 열때 파일을 더블클릭하면 새창으로 열려서다른 창들과 연계 작업하는 데 불편하니 한 번만 클릭해서 Xcode의 에디터 영역에 열리게 하는 것이 좋습니다. 스토리보드 파일을 열면 인터페이스 빌더가 자동으로 실행되면서 앱 화면의 설계도가 표시되는 것을 확인할수 있습니다. 


※ 참고
스토리보드 넓게 사용하기 : 몇 가지 작업을 하다 보면 좁은 화면이 금세 여러 가지 객체로 꽉 들어차 버리는 것이 스토리보드의 단점입니다. 더 넓은 모니터에서 작업할수 있다면 좋겠지만 그게 힘들 때에는 필요 없는 창을 닫고 인터페이스 빌더를 조금 더 넓게 쓸 수 있는 방법이 있어 알려드리고자 합니다. 

먼저 인터페이스 빌더 창 아래쪽표시된 작은 사각형(그림 1-16의1)을 클릭하면 화면 가운데를 차지하고 있는 창 하나를 닫을 수 있습니다. 이 아이콘은 문서 개요창이라고 부르는 앱 화면에 대한 구조를 나타내는 창을 제어하는 버튼입니다. 

인터페이스 빌더에 표시된 뷰 컨트롤러가 너무 커서 한눈에 들어오지 않을 때에는 적당히 줄여서 사용할수 있습니다. 2에 표시된 대로 뷰 컨트롤러가 아닌 여백을 더블클릭해보기 바랍니다. 뷰 컨트롤러의 크기가 확줄면서 여러 개의 뷰 컨트롤러를 한눈에 알아볼수 있도록 깔끔하게 정리됩니다. 

만약 여백을 클릭해서 줄인 뷰 컨트롤러의 사이즈가 너무 작아 작업하기 어렵다면 원하는 수준으로 단계별로 조절할수 있습니다. 인터페이스 빌더 아래쪽에는 스토리보드의 확대/축소 비율을 선택할수 있는 옵션이 있는데 이를 설정하면 세밀하게 비율을 조절할수 있습니다. 



스토리보드 파일은 기존의 nib나 안드로이드의 xml 방식 화면 구성과 달리 앱에 사용되는 여러 화면을 하나의 파일에 모아 설계할수 있도록 지원하는 UI 설계용 파일 형식입니다. 기존에는 앱의 화면 하나당 하나의 nib 또는 xml 파일과 대응하는 방식이었다면 스토리보드 방식은 서로 연결되는 여러 화면이 하나의 스토리보드 파일로 구성되는 방식이라고 할 수 있죠. 

인터페이스 빌더에서 스토리보드를 수정하는 작업은 쉽고 단순합니다. Xcode 화면의 오른쪽 아래에 있는 오브젝트 라이브러리에서 원하는 컨트롤을 골라 뷰 컨트롤러에 끌어 놓으면 됩니다. 다음은 이런 식으로 구성된 스토리보드의 예입니다. 

그림만으로는 이 앱이 어떤 기능을 수행하는지 알 수 없겠지만 앱이 어떤 화면으로 구성되는지 각 화면은 서로 어떻게 연관되는지 앱의 전체 모습은 어떠한지를 한눈에 알 수 있을 겁니다. 이 것이 스토리보드를 이용하여 화면을 설계하는 이유입니다. 뷰 컨트롤러마다 분리된 UI 파일을 만드는 대신 하나의 스토리보드에 뷰 컨트롤러의 연결 관계를 포함하는 전체 화면 구성을 정의함으로써 앱의 전체 구조를 쉽게 파악할수 있게 표현해주는 것이 바로 스토리보드 방식으로 화면을 설계하는 과정입니다. 게다가 스토리보드를 사용하면 한 화면에서 다음 화면으로 전환하기 위해 작성해야 하는 코드를 줄일 수도 있습니다. 


스토리보드를 사용하면 개별 UI 파일을 이용하여 화면을 구성하는 것에 비하여 다음과 같은 이점이 있습니다. 

1. 스토리보드를 사용함으로써 앱의 화면 전체와 화면 사이 관계를 더 쉽게 파악할수 있습니다. 스토리보드는 전체 설계가 파일 하나에 모두 들어있기 때문에 각각의 화면으로 분리된 UI 파일보다 화면의 요소들을 추적 하기가 훨씬 더 쉽습니다. 

2. 스토리보드는 다양한 화면 사이의 전환을 손쉽게 처리합니다. 이러한 전환 방식을 세그웨이(Segueway)라고 부르는데 하나의 뷰 컨트롤러에서 전환하고자 하는 뷰 컨트롤러를 향해 <Ctrl>키를 누른 상태로 마우스를 드래그하기만 하면 세그웨이가 자동으로 만들어집니다. 세그웨이 덕분에 훨씬 더 짧은코드로 UI를 다룰 수 있습니다. 

3. 스토리보드를 이용하면 테이블 뷰를 작업할 때 새로운 프로토타입 셀이나 정적인 셀의 외형을 만드는 것이 매우 쉽습니다. 인터페이스 빌더만을 사용하여 거의 완전한 수준의 테이블 뷰를 만들 수 있으며 이렇게 작업함으로써 작성해야 하는 코드의 양이 대폭 줄어듭니다. 

만약에 여러분이 인터페이스 빌더를 사용하는 것을 싫어하거나 전체 UI를 직접 그리는 대신 프로그래밍하듯이 코딩으로 만들고 싶다면 스토리보드는 별 도움이 되지 않을 겁니다. 하지만 필자는 코드를 될수 있는 한 짧게 작성하는 것이 유지보수에 좋다고 생각하고 UI에 대해서는 더욱 그렇게 생각하기 때문에 스토리보드 방식의 화면 설계가 개발 생산성을 매우 높여주는 중요한 기능이라고 생각합니다. 

이제 다시 프로젝트로 돌아가 스토리보드 화면 구성 작업을 해보겠습니다. 지금까지 부연 설명이 길었던 만큼 이제부터는 직접 실습해보는 내용을 중심으로 진행해 보도록 하죠. 



1.1.4 스토리보드로 화면 구성하기
Xcode 왼쪽 위에 있는 프로젝트 내비게이터에서 Main.storyboard 파일을 클릭하여 인터페이스 빌더를 열어봅시다. 특별히 Xcode 버전에 차이가 없다면 현재 인터페이스 빌더에는 한 개의 앱 UI 화면이 추가되어 있을 겁니다 이 화면을 스토리보드상의 용어로 씬(Scene)이라고 부르지만 여기서는 뷰컨트롤러라고 부르겠습니다. 앱의 각 화면은 그에 대응되는 뷰 컨트롤러로 이루어지기도 하거니와 대부분의 경우에서 뷰 컨트롤러를 추가하면 화면도 추가되기 때문입니다. 따라서 지금은 하나의 뷰 컨트롤러 = 하나의 화면으로 이해해도 크게 무리는 없습니다. 비록 나중에 여러 가지 특수한 뷰 컨트롤러를 배우고 나면 여러 개의 뷰 컨트롤러 = 하나의 화면으로 바뀌겠지만요. 

추가한 뷰 컨트롤러의 화면이 아이폰에서는 한 번에 하나씩만 보이겠지만 아이패드에서는 한번에 여러 개 화면이 동시에 보일 수도 있습니다. 앞서 잠깐 모습을 보인 적 있는 Split-View Controller에서의 마스터-디테일 화면이 그러한 예입니다. 

마우스로 뷰 컨트롤러를 클릭하여 활성화해 봅시다. 스토리보드에 추가된 뷰 컨트롤러는 평소에는 칙칙한 회색으로 있다가 마우스 클릭에 의해 활성화되면 파란색 테두리가 표시되면서 현재 선택된 객체임을 나타냅니다. 뷰 컨트롤러를 클릭했는데도 활성화되지 않으면 이는 뷰 컨트롤러대신 내부의 다른 객체가 선택되었다는 뜻입니다. 

뷰 컨트롤러가 잘 선택되지 않을 경우 뷰 컨트롤러의 상단에 위치한 헤더 부분을 클릭하면 뷰 컨트롤러를 정확하게 활성화할 수 있습니다. 이부분을 도크(Dock)라고 부릅니다. 도크에는 세 개의 아이콘이 있는데 이에 대한 용도는 나중에 다시 설명하겠습니다. 아래 그림에서 강조된 것과 같이 첫 번째 아이콘을 클릭하면 됩니다. 

뷰 컨트롤러의 활성화와 관련하여 알아둘 것이 있습니다. 우리가 객체의 속성을설정하기 위해 사용하는 어트리뷰트 인스펙터는 항상 스토리보드에 활성화된 객체에만 적용됩니다. 따라서 원하는 객체가 아닌 다른 객체를 활성화한 상태에서는 속성이 적용되지 않을 뿐만 아니라 우리가 찾는 속성 또한 올바르게 표시되지 않기도 합니다. 책에 표시된 어트리뷰트 인스펙터의 내용과 여러분의 Xcode에서 표시된 어트리뷰트 인스펙터의 내용이 다르다면 아마도 여러분이 스토리보드에서 정확하게 필요한 객체를 활성화하지 못했을 가능성이 큽니다. 그러니 항상 객체를 선택하여 활성화할 때는 원하는 객체가 올바르게 선택되었는지 주의해야 합니다. 

※ 뷰 컨트롤러 크기 조정
뷰 컨트롤러의 사이즈를 조절해 봅시다. 인터페이스 빌더에서 뷰 컨트롤러는 특정 모바일 기기의 크기에 맞게 사이즈를 변경할수 있는데 이에 대한 기능을 인터페이스 하단의 View as 항목에서 제공합니다. 

이 항목은 인터페이스 빌더에 표시되는 뷰 컨트롤러를 어떤 사이즈로 표시할지를 설정하는 역할을 합니다. 뒤쪽에 표시된 모바일 기기의 모델명은 현재 뷰 컨트롤러가 표시되고 있는 사이즈로 위 그림에서는 iPhone 7으로 설정되어 있습니다. 즉 현재의 뷰 컨트롤러에 구현된 화면은 아이폰7 에서 보게 될 화면과 같다는 뜻입니다. 

이 사이즈를 변경하기 위해 위 항목을 클릭합시다. 아래에 숨겨진 영역이 열리면서 다양한 기기 모델이 표시됩니다. 

왼쪽은 디바이스의 종류를 나타내고 오른쪽은 스크린의 방향을 나타냅니다. 우리는 왼쪽에서 디바이스 종류를 선택하여 뷰 컨트롤러의 크기를 바꿀 수 있습니다. 뿐만 아니라 방향도 변경해줄수 있죠. 처음부터 가로 모드를 기반으로 제작하는 앱이라면 아예 가로 모드로 변경해 놓고 설계하는 것이 편리합니다. 

왼쪽의 디바이스는 차례대로 아이패드 프로 12.9인치부터 아이폰 4s까지의 화면 사이즈를 나타냅니다. 아이폰5 모델은 찾을 수 없는데 이는 아이폰 5 5s의 화면 사이즈가 아이폰 SE 모델과 동일하기 때문입니다. 같은 맥락으로 아이폰 6, 6s 7, 7s역시 8모델과 화면 사이즈를 공유하기 때문에 생략되어 있습니다. 

선택 항목에서 다른 디바이스 모델을 선택할 때마다 View as 레이블에는 선택된 디바이스 모델명이 표시되고 동시에 뷰 컨트롤러의 사이즈도 변경됩니다. 오른쪽의 Orientation을 선택하면 그에 맞춰서 뷰 컨트롤러가 서거나 또는 드러눕는 것을 볼 수 있습니다. 사이즈와 방향을 선택해서 뷰 컨트롤러가 바뀌는 모습을 확인해 봅시다. 

위 그림은 아이폰 X를 가로 모드로 설정해 본 모습입니다. M자 탈모 아니 노치 디자인이 적용된 모습의 화면이 옆으로 누워있는 것을 볼 수 있습니다. 우리가 기본으로 삼을 것은 8 사이즈이므로 이에 맞춰서 설정해주면 됩니다. 

단 View as 항목은 단지 현재의 인터페이스 빌더에서 뷰 컨트롤러를 어떤 크기로 보여줄지 결정하는 것에 지나지 않습니다. 다시 말해 여기서 특정 디바이스 기기를 선택했다고 해서 앱이 그 디바이스에만 동작하는 것은 아니며 단지 화면 설계 시 편의를 위해 특정 사이즈에 미리 맞춰서 작업하는 것일 뿐입니다. 또한 여기서 가로 모드로 설정했다고 해서 앱이 가로 모드로 동작하는 것도 아닙니다. 가로 모드를 위해서는 프로젝트 메타정보의 설정을 변경해 주어야 합니다. 이번 장의 초입에서 잠깐 설명했던 내용이죠. 그러니 여러분은 이 View as 항목의 설정을 단지 편의 요소로만 이해해야 합니다. 앱의 성격을 결정짓는 설정이라고 생각하지 말고요. 

간흑 뷰 컨트롤러 크기를 아이폰 특정 사이즈에 맞추었다고 해도 막상앱을 시뮬레이터로 실행 해보면 원하는 결과가 나타나지 않을 수도 있는데 이 역시 방금 설명한 것과 같은 이유에서입니다. 앱 시뮬레이터의 화면 사이즈 설정은 여기서 설정한 값과 별개로 동작하기 때문이죠. 이는 곧 View as 항목에서 아이폰7 사이즈로 맞추어 놓고 앱을 테스트해보더라도 무조건 아이폰 7 사이즈로 실행되지는 않는다는 뜻입니다. 앱 시뮬레이터를 실행시킬 때에는 어떤 버전의 아이폰 시뮬레이터를 실행시킬 것인지 지정해주어야 올바르게 실행된 화면을 볼 수 있습니다. 