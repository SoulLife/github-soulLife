6.2.5 받은 알림 처리하기 : UILocalNotification 객체를 통해 전달된 알림을 처리하는 방법을 알아봅시다. 일반적으로 UILocalNotification 방식의 알림 메시지를 처리할 때에는 다음의 경우를 고려해야 합니다. 

※ 앱이 실행되지 않았거나 이미 종료된 상태일 때
※ 앱이 실행 중일 때(활성화 상태와 비활성화 상태로 구분됨)

먼저 앱이 실행되지 않고 있는 상태에서 사용자가 UILocalNotification 방식의 알림 메시지를 클릭했을 경우에는 앱 델리게이트 클래스의 application(_:didFinishLaunchingWithOptions:)메소드가 호출됩니다. 이 메소드는 알림과 무관하게 앱이 종료된 상태에서 실행될 때에도 호출되는데 이둘의 차이는 매개변수인 launchOptions를 이용해서 구분할수 있습니다. 아래 구문을 봅시다. 

AppDelegate.swift

func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
    {
        ...(중략)...
        }else
        {
            //경고창, 배지, 사운드를 사용하는 알림 환경 정보를 생성하고, 이를 애플리케이션에 저장
            let setting = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
            application.registerUserNotificationSettings(setting)
            if let localNoti = launchOptions?[UIApplication.LaunchOptionsKey.localNotification] as? UILocalNotification{
                //알림으로 인해 앱이 실행된 경우이다. 이때에는 알림과 관련된 처리를 해준다.
                print((localNoti.userInfo?["name"])!)
            }
        }
        // Override point for customization after application launch.
        return true
    }

사용자가 알림 메시지를 눌러 앱을 실행했다면 매개변수 launchOptions에는 UIApplication.LaunchOptionsKey.localNotification 키와 그에 해당하는 값이 저장됩니다. 이를 이용하면 알림을 눌러 앱을 실행했는지 여부를 쉽게 판별할수 있습니다. 참고로 launchOptions는 딕셔너리 타입의 매개변수입니다. 알림을 발송할 때 userInfo 속성에 저장했던 값은 위 키를 이용하여 받은값(위 예제에서는 localNoti)을 통해 다시 읽어 들일 수 있으므로 이를 이용하면 알림 메시지 종류에 따라 개별적인 로직을 처리해 줄수도 있습니다. 

앱 델리게이트의 위 메소드에서 해당 키에 값이 넣은 채로 전달되는 경우는 앞에서 설명한 세 가지 알림 관련 액션을 취했을 때뿐입니다. 앱 아이콘에 배지가 설정되어 있는 상태에서 앱 아이콘을 클릭하면 이때에도 해당 값이 함께 전달될 것으로 기대하는 분들이 종종 있는데 앱 아이콘을 클릭하여 실행하는 경우에는 배지가 설정되어 있더라도 알림 액션과는 무관한 실행으로 간주됩니다. 따라서 위 코드의 noti 상수값은 nil입니다. 

앱이 실행 중인 상태에서 알림이 도착한다면 활성화/비활성화 상태와 관계없이 앱 델리게이트의 application(_:didReceive:)메소드가 호출됩니다. 이때 알림 객체 정보도 함께 전달되므로 userInfo 속성에 저장된 값을 참고하여 원하는 액션을 처리해 줄 수 있습니다. 비활성화 상태에서 알림이 도착한다면 이 알림을 클릭했을 때 해당 메소드가 실행되지만 활성화 상태일 때에는 화면에 알림 메시지가 표시되지 않아도 해당 메소드는 호출되기 때문에 그에 맞는 내용을 처리해 주어야 합니다. 활성화 상태와 비활성화 상태를 구분해서 로직을 처리해 주려면 UIApplication 객체에서 제공하는 applicationState 속성을 이용하면 편리합니다. 


AppDelegate.swift

func application(_ application: UIApplication, didReceive notification: UILocalNotification)
    {
        print((notification.userInfo?["name"])!)
        if application.applicationState == UIApplication.State.active
        {
            //앱이 활성화 된 상태일 때 실행할 로직
        }else if application.applicationState == UIApplication.State.inactive
        {
            //앱이 비활성화된 상태일 때 실행할 로직
        }
    }




6.2.6 미리 알림 기능 구현
로컬 알림 기능을 응용하여 미리 알림 기능을 구현해 봅시다. 방법은 매우 단순합니다. 메시지와 발송 시각을 입력받은 다음 이 정보들을 이용하여 로컬 알림 메시지를 만들어 스케줄러에 등록하기만 하면 됩니다. 실제로 그 시간에 맞추어 알려주는 역할은 iOS의 시뮬레이터가 처리할 부분입니다. 우리가 만들 화면의 대략적인 모습은 다음과 같습니다. 

화면에 사용된 것은 텍스트 필드와 데이트 피커, 그리고 저장 버튼뿐입니다. 데이트 피커는 날짜 입력을 도와주기 위해 제공되는 컨트롤로 마치 슬롯머신 같은 UI를 통해 날짜와 시각 정보를 입력할수 있죠. 어트리뷰트 인스펙터에서 제공되는 속성을 통해 날짜 또는 시각만 입력받거나 혹은 카운트다운 시작값을 입력받도록 형태를 변경할수 있습니다. 

구현 과정을 정리해 봅시다. 먼저 화면의 텍스트 필드를 통해 알림 메시지 또는 내용을 입력받습니다. 아래의 데이트 피커를 통해서는 알림 발송 시각을 입력받고요. Save 버튼을 눌렀을 때 이 들 입력값을모아 로컬 알림을 등록해주면 끝입니다. 

사실 미리 알림 기능은 현재의 iOS에서 기본 사양으로 포함되어 있는 기능 중의 하나입니다. 미리 알림 앱을 통해 기능이 제공되고 있죠. 

미리 알림 앱은 애플의 음석 인식 기능인 시리(Siri)와도 연동되기 때문에 "30분 뒤에 알려줘"하고 요청하면 자동으로 알림이 등록되는 등 무척 편리합니다. 그러니 우리는 미리 알림 앱보다 더편한 앱을 만들겠다는 생각보다는 단순히 이 앱이 어떤 식으로 동작하는지를 엿보는 수준으로 기능을 구현해 보도록 합시다. 실습은 Msg-Notification 프로젝트를 이용하겠습니다. 


STEP1 : main.storyboard 파일을 열고 뷰 컨트롤러 상단에 텍스트 필드를 추가한 다음 이를 보조 에디터로 드래그하여 아울렛 변수를 추가합니다. 변수명은 msg입니다. 


STEP2 : 오브젝트 라이브러리에서 Date Picker를 찾아 뷰 컨트롤러에 추가합니다. 데이트 피커가 추가되면 이를 보조 에디터로 드래그하여 아울렛 변수 datepicker를 추가합니다. 


STEP3 : 뷰 컨트롤러 아래에 Save 버튼을 추가하고 이를 액션 메소드 save(_:)로 연결합니다. 

ViewController.swift 파일을 확인하여 아울렛 변수 및 액션 메소드가 제대로 정의되었는지 점검하겠습니다. 

ViewControoler.swift

import UIKit


class ViewController: UIViewController
{
    
    @IBOutlet var msg: UITextField!
    
    @IBOutlet var datepicker: UIDatePicker!
    
    @IBAction func save(_ sender: Any)
    {
        
    }
    
    
}



STEP4 : ViewController 클래스 상단에 UserNotification 프레임 워크 반입 구문을 추가합니다. 

ViewController.swift

import UIKit
import UserNotifications

class ViewController: UIViewController
{
    ...(중략)...    
    
}


STEP5 : save(_:)메소드에 버전별로 로컬 알림을 구현 처리할수 있도록 if #available 조건절을 추가합니다. 

ViewController.swift


    @IBAction func save(_ sender: Any)
    {
        if #available(iOS 10.0, *)
        {
            //UserNotification 프레임워크를 사용한 로컬 알림
        }else
        {
            //LocalNotification 객체를 사용한 로컬 알림
        }
    }



STEP6 : 사용자 알림 설정여부를 확인하는 구문을 작성합니다. 

ViewController.swift

 @IBAction func save(_ sender: Any)
    {
        if #available(iOS 10.0, *)
        {
            //UserNotification 프레임워크를 사용한 로컬 알림
            //알림 동의 여부를 확인
            UNUserNotificationCenter.current().getNotificationSettings(completionHandler: { settings in
                if settings.authorizationStatus == UNAuthorizationStatus.authorized
                {
                    //알림 설정이 들어갈 곳
                }else
                {
                    let alert = UIAlertController(title: "알림 등록", message: "알림이 허용되어 있지 않습니다.", preferredStyle: .alert)
                    let ok = UIAlertAction(title: "확인", style: .default)
                    alert.addAction(ok)
                    
                    self.present(alert, animated: false)
                    return
                }
            })
        }else
        {
            //LocalNotification 객체를 사용한 로컬 알림
        }
    }


STEP7 : UserNotification 프레임워크를 이용하여 로컬 알림을 다음과 같이 구현합니다. 

ViewController.swift

 @IBAction func save(_ sender: Any)
    {
        if #available(iOS 10.0, *)
        {
            //UserNotification 프레임워크를 사용한 로컬 알림
            //알림 동의 여부를 확인
            UNUserNotificationCenter.current().getNotificationSettings(completionHandler: { settings in
                if settings.authorizationStatus == UNAuthorizationStatus.authorized
                {
                    //알림 설정이 들어갈 곳
                    DispatchQueue.main.async
                    {
                        //알림 콘텐츠 정의
                        let nContent = UNMutableNotificationContent()
                        nContent.body = (self.msg.text)!
                        nContent.title = "미리 알림"
                        nContent.sound = UNNotificationSound.default
                        
                        //발송 시각을 "지금으로 부터 *초 형식으로 변환
                        let time = self.datepicker.date.timeIntervalSinceNow
                        //발송 조건 정의
                        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: time, repeats: false)
                        //발송 요청 객체 정의
                        let request = UNNotificationRequest(identifier: "alarm", content: nContent, trigger: trigger)
                        //노티피케이션 센터에 추가
                        UNUserNotificationCenter.current().add(request)
                    }
                }else
                {
                 ...(중략)...
    }

대부분의 코드는 앞에서 작성해 보았던 것과 동일합니다. 이번 실습에 맞추어 변경된 부분은 두 군데 정도죠. 

nContent.body = (self.msg.text)! 

메시지 본문에 들어갈 내용을 사용자가 텍스트 필드에 입력한 값으로 처리하고 있습니다. 이를 통해 알림 메시지가 도착했을 때 사용자가 작성해 놓은 알림 내용이 표시될 겁니다.

//발송 시각을 "지금으로 부터 *초 형식"으로 변환
let time = self.datepicker.date.timeIntervalSinceNow

데이트 피커를 사용하여 설정한 시각은 datepicker 객체의 date 속성을 통해 참조할수 있는데 이값의 타입은 Date 클래스입니다. 하지만 우리가 사용할 UNTimeIntervalNotificationTrigger 객체는 지금으로부터 몇 초 뒤의 형식으로 값을 입력받기 때문에 적절히 변경해 줄 필요가 있습니다. 

이를 위해 Date 클래스에서 제공되는 timeIntervalSinceNow 속성을 사용하여 값을 계산하였습니다. 이 속성은 Date 객체에 설정된 시간값이 지금 시각을 기준으로 하여 몇 초 후인지를 계산해서 반환합니다. 

이렇게 값을 설정해 주고 나면 남은 로직은 동일합니다. 발송 조건 객체를 생성하고 발송 요청 객체를 정의한 다음 이를 노티피케이션 센터에 등록해 주고 나면 끝이죠. 


질문!! DispatchQueue.main.async { ...는 무슨 역할을 하는 코드인가요?
이 코드는 백그라운드에서 실행되는 로직을 메인 쓰레드에서 실행되도록 처리해주는 역할을 합니다. iOS의 프로그램 실행 영역은 UI등의 주요 처리를 담당하는 메인 실행 영역과 그리 중요하지 않은 처리를 담당하는 백그라운드 실행 영역으로 나누어지는데 대부분의 비동기 클로저 구문은 백그라운드 실행 영역에서 처리됩니다. 문제는 UI 처리는 모두 메인 실행 영역에서 이루어져야 한다는 것이죠. 이때 메인 실행 영역에서 처리되어야 하는 부분을 해당 구문으로 감싸주면 그 범위 내의 코드는 모두 메인 실행 영역에서 수행됩니다. 

무슨말인지 모르겠다면 만약 Xcode 컴파일시 다음과 같은 메시지가 뜨는 것이 확인되면 해당 부분을 위 코드로 감싸주기만 하면 됩니다. 이에 대한 자세한 내용은 뒤에서 다시 설명하게 됩니다. 

알림 등록이 완료되면 사용자에게 메시지 창을 이용하여 알려주도록 하겠습니다. 노티피케이션 센터 객체의 add(_:)메소드에 완료시 호출될 클로저를 추가합니다. 

ViewController.swift

//노티피케이션 센터에 추가
                        UNUserNotificationCenter.current().add(request){ (_) in
                            DispatchQueue.main.async
                            {
                                //발송 완료 안내 메시지 창
                                let date = self.datepicker.date.addingTimeInterval(9*60*60)
                                let message = "알림이 등록되었습니다. 등록된 알림은 \(date)에 발송됩니다."
                                let alert = UIAlertController(title: "알림등록", message: message, preferredStyle: .alert)
                                let ok = UIAlertAction(title: "확인", style: .default)
                                alert.addAction(ok)
                                
                                self.present(alert, animated: false)
                            }
                        }

노티피케이션 센터에 로컬 알림을 등록하는 add(_:)메소드는 두 번째 인자값으로 완료 시 호출될 클로저를 입력할수 있습니다. 이를 이용하여 메소드 뒤에 트레일링 클로저 형식으로 메시지 창을 호출하도록 내용을 작성하면 됩니다. 이 내용 역시 앞에서 배운 바와 거의 동일합니다. 눈여겨봐야 할 부분은 알림 발송 시각을 표시해주는 부분이로군요. 

let date = self.datepicker.date.addingTimeInterval(9*60*60)

데이트 피커는 시스템에 설정된시각을 따르기는 하지만 이를 그대로 날짜 시각으로 표현하면 GMT, 즉 세계 표준시를 기준으로 보여주게 됩니다. 그러니 우리가 설정한 시각을 우리나라에 맞게 보여주려면 여기에 9시간을 더해주어야 하는거죠. 이를 위해 addingTimeInterval(_:)메소드가 사용되는데 원하는 시간만큼 더해서 표현할수 있습니다. 입력값의 단위는 초이므로 9시간을 더해서 표현하려면 9(시간)X60(분)X60(초)를 곱해주어야 합니다. 

생각보다 훌륭한 미리 알림 기능이 만들어졌습니다. 이제 실행해 봅시다. 

알림을 등록하고 나면 해당 시각에 실제로 로컬 알림 메시지가 도착하는 것을 확인할수 있습니다. 이로써 간단한 미리 알림 기능이 구현되었습니다. 

iOS 10이하 버전에서 지원하는 UILocalNotification 객체를 이용한 예제는 따로 설명하지 않고 숙제로 남겨두겠습니다. 방금 학습한 내용과 앞에서 배운 내용을 바탕으로 하면 어렵지 않게 구현해볼수 있으리라고 생각합니다. 수고많으셨습니다. 이제 다음 장으로 넘어가겠습니다. 





CHAPTER 07 : 델리게이트 패턴
iOS 앱의 객체는 델리게이트 패턴(Delegate Pattern)이라고 불리는 일종의 위임 패턴을 많이 사용합니다. 이 패턴은 iOS 앱 코드의 전반적 구조를 이루는 아주 중요한 부분이므로 이것을 충분히 이해해야만 iOS 기반의 앱을 원활하게 작성할 수 있습니다. 하지만 개발을 해본적이 없는 독자들에게는 패턴이라는 개념 자체가 생소할 것이고 개발경험이 있다 하더라도 iOS 개발을 해 보지 않았다면 델리게이트 패턴은 특히 낯설게 느껴질수있는 개념입니다. 보다 원활한 이해를 위해 프로그래밍에서의 패턴 개념과, 그중에서도 특히 델리게이트 패턴의 개념에 대해 자세히 살펴보겠습니다. 


※ 패턴
일반적인 단어로도 널리 사용되는 패턴(Pattern)이란 반복해서 나타나는 사건이나 형태를 의미합니다. 보통 예측 가능한 방식으로 되풀이된다는 점에서 그 의미가 있죠. 객체지향 프로그래밍 에서는 디자인 패턴(Design Pattern)이라는 합성 용어로 사용되는 경우가 대부분입니다. 여기서 디자인이란 프로그램 구성에 대한 디자인 즉, 구조적 설계를 의미합니다. 객체지향 프로그래밍에서는 객체 간의 관계가 중요한데, 설계에 관한 문제를 해결하기 위한 해법으로 객체들의 관계를 구조화한 사례가 일반화된 것이 바로 디자인 패턴입니다. 

디자인 패턴은 원래 건축학 영역에서 설계 문제를 해결하고자 건축가 크리스토퍼 알렉산더(Christopher Alexander)가 고안한 것을 시초로 하지만 컴퓨터 프로그래밍 공학에서는 다양한 설계 문제를 합리적으로 해결하기 위한 목적으로 디자인 패턴들이 등장했습니다. 특정 객체의 값이 바뀌었을 때 여러 객체에 이를 알려주기 위한 방법, 구조를 바꾸지 않고 기능을 변경하거나 개선하기 위한 방법, 하나의 객체만 생성하도록 보장하기 위한 방법 등이 이에 해당하는 문제들이라고 할수 있습니다. 

디자인 패턴은 알고리즘처럼 프로그램 코드로 바로 변환될수 있는 형태는 아니지만 특정한 상황에서 구조적 문제를 해결하는 방식을 설명해줍니다. 우리가 실제로 프로그래밍 과정에서 직면하게 되는 설계 문제를 해결해야 할 때 디자인 패턴 중에서 적절한 것을 선택하여 그에 따라 프로그램을 구조화하면 쉽게 해결할 수 있습니다. 

이러한 디자인 패턴의 대표 격으로 GoF(Gang of Four)라고 불리는 네명의 컴퓨터 공학자들에 의해 정의된 패턴들이 있으며 이외에도 널리 알려진 것만 수백가지 종류입니다. 이 책에서 는 델리게이트 패턴만 다루어보겠지만 그밖에도 알아두면 좋을 패턴들은 다음과 같습니다. 

※ 팩토리 패턴(Factory Pattern)

※ 옵저버 패턴(Observer Pattern)

※ 데코레이터 패턴(Decorator Pattern)

※ 싱글톤 패턴(Singleton Pattern)

※ 어댑터 패턴(Adapter Pattern)

※ 이터레이터 패턴(Iterator Pattern)

※ 델리게이트 패턴(Delegate Pattern)


※ 델리게이트 패턴
델리게이트 패턴은 쉽게 말해 객체지향 프로그래밍에서 하나의 객체가 모든일을 처리하는 것이 아니라 처리해야 할 일 중 일부를 다른 객체에 넘기는 것을 말합니다. 이는 효율성 관점에서 아주 중요한 역할을 합니다. 기능을 위임할수 있는 객체가 있다는 것은 그만큼 직접 구현해야 하는 부분이 적다는 뜻이기 때문에 큰 규모의 프로그램을 빠르게 작성할수 있습니다. 

프로그래밍 과정을 하나의 사업을 진행하는 과정으로 비교해봅시다. 작은 규모에서 시작하는 사업이라면 판매상품 구매, 진열, 영업, 회계, 세금신고 등 다양한 업무를 본인이 직접 처리해야 합니다. 그러자면 회계나 세금신고와 같은 업무는 전문적 지식을 익혀야 하므로 처리하는 데에 시간이 많이 소모되겠죠. 이것을 다른 전문가를 직접 고용하거나 전문 기업에 맡긴다면 어떻게 될까요? 복잡한 세법이나 회계 등을 익힐 필요 없이 본인이 잘하는 사업 자체에만 매진할수 있으므로 훨씬 효율적일 것입니다. 

프로그래밍 과정도 이와 마찬가지입니다. 모든 기능을 직접 처리해주려면 코딩양이 매우 늘어날 뿐더러 집중해야 할 부분에 집중하지 못하게 됩니다. 이 때문에 기능을 분담하여 나누는 델리게이트 패턴이 필요합니다. 

사실 델리게이트 패턴은 iOS에서 가장 활발히 사용하고 있지만 꼭 iOS개발에 국한된 패턴은 아닙니다. 대부분 GUI 기반 프로그래밍에서 일반적으로 널리 사용되는 패턴이죠. GUI 기반 프로그래밍에서 델리게이트 패턴이 사용되는 가장 대표적인 예는 이벤트 리스너(Event Listener)입니다. 앞에서 독자 여러분들은 아마도 버튼을 @IBAction 메소드로 연결하여 버튼 클릭 시 해당 메소드가 실행되도록 구성해보았을 겁니다. 

그런데 구체적으로 어떤 과정을 거쳐 사용자가 아이폰 기기에서, 혹은 컴퓨터에서 마우스 클릭 하는 동작이 이 애플리케이션에 전달되는지 생각해 본적 있나요? 일반적인 데스크톱 프로그램에서 마우스 클릭이 특정 프로그램의 이벤트 처리 함수 onClick() 으로 연결되어 원하는 내용이 실행되는 과정을 정리해보면 다음과 같습니다. 


1. 마우스 버튼을 클릭합니다. 

2. 마우스에서는 연결된 시리얼 케이블이나 블루투스 통신을 통해 0x000867(단순히 예시입니다. 실제로 이값을 전송하지는 않습니다.)신호를 전송합니다. 

3. 마우스로부터 전송된 신호는 RS232 통신 프로토콜을 이용하여 메인보드를 거쳐 운영체제의 메시지 센터로 전달됩니다. 

4. 신호를 수신한 운영체제에서는 마우스 포인터의 화면상 좌표를 확인합니다. 

5. 운영체제는 해당 좌표에서 활성화된 애플리케이션을 확인합니다. 

6. 델리게이트를 이용하여 클릭 신호가 애플리케이션의 이벤트 처리 함수 onClick() 에 대응하였음을 애플리케이션에 알립니다. 

7. 애플리케이션이 onClick() 함수를 실행합니다. 


우리는 1~7까지를 직접 처리하지 않습니다. 그럼에도 사용자의 클릭 이벤트가 우리가 만든 앱에 정상으로 전달되어 우리가 의도하는 메소드를 실행할수 있는 것은 클릭 이벤트를 인식하고 프로그램에 전달해주는 위임 객체가 있기 때문입니다. 이런 과정을 실제로 우리가 구현하고자 한다면 필요한 코딩양은 어마어마합니다. 하지만 실제로 많은 프로그래밍 과정에서 모든 이벤트에 대한 처리는 델리게이트 패턴에 의해 운영체제의 메시지 처리 객체로 위임되고 운영체제가 관리하는 이 메시지 처리 객체가 이벤트를 감지하게 되면 델리게이트를 이용하여 애플리케이션에 해당 메소드를 알려줌으로써 우리가 원하는 코드가 실행됩니다.  그 중간 과정은 델리게이트 패턴 덕분에 우리가 직접 구현할 필요가 없는 것이죠.

iOS에서 사용되는 델리게이트 패턴도 이와 같은 개념입니다. 기능을 처리할 객체를 델리게이트로 설정하고 특정 이벤트가 발생할 때 이를 델리게이트에 의해 위임된 본래의 객체로 전달해주는 역할을 합니다. 이 책의 11장에서 배우게 될 웹 뷰(Web View)는 외부 브라우저 없이 웹 페이지를 앱 내에서 표시해주는 역할을 하는데 이 과정에서 잡아내야 할 몇 가지 중요한 시점이 있습니다. 웹 페이지가 로딩되기 시작할 때라든가 로딩이 완료되었을 때 또는 로딩이 실패하였을 때 혹은 사용자가 다른 페이지로 이동하고자 할 때 등이 그에 해당하죠. 

이러한 이벤트를 캐치할수 있도록 직접 구현하려면 상당히 복잡한 과정을 거쳐야 합니다. 여러 줄에 걸친 복잡한 과정을 통해 구현한 다음에도 심지어는 이벤트를 정확히 캐치하지 못할 수도 있죠. 하지만 웹 뷰 자체에서 이러한 시점을 잡아낼 수 있는 기능이 이미 구현되어 있으므로 우리는 웹 뷰가 특정 시점을 알려줄 뷰 컨트롤러를 델리게이트로 위임하고 웹 뷰가 이벤트 발생시 호출해주는 함수를 구현해주기만 하면 됩니다. 

다만 iOS에서의 델리게이트 패턴은 위임 객체가 호출할 메소드를 우리가 직접 정의하는 방식은 아닙니다. 웹 뷰의 경우 웹 페이지를 처음 읽어들이기 시작할때 webViewDidStartLoad(_:)메소드를 호출하고 웹 페이지를 모두 읽어 들였을 때 webViewDidFinishLoad(_:)메소드를 호출하도록 프로토콜을 통해 이미 약속되어 있죠. 따라서 우리는 웹 뷰와 관련된 프로토콜에 정의된 형식을 따라 이 메소드들을 구현하면 됩니다. 

위 내용을 한마디로 정리하면 다음과 같습니다. 

웹 뷰 너에게 모든 것을 일임할게 뷰 컨트롤러인 나에게는 특정 이벤트가 발생했을때 알려주기만 하면 돼

특정 이벤트가 발생했을 때 알려주는 방법이 바로 미리 정의된 델리게이트 메소드를 사용하는 것입니다. 이를 위해 iOS에서 델리게이트 패턴을 사용하는 모든 객체는 델리게이트 메소드를 정의한 프로토콜을 가집니다. 이를 델리게이트 프로토콜이라고 하는데 보통 객체의 이름 뒤에 Delegate를 붙여서 정의합니다. 우리가 델리게이트 메소드를 이용하려면 델리게이트 프로토콜을 구현하는 과정이 반드시 필요합니다. 

아직 무슨 말인지 이해하지 못한 독자들도 있을 겁니다. 더 자세하게 이해하고 익숙하게 사용할수 있도록 구체적인 예를 통해 델리게이트 패턴을 익혀보겠습니다. 