2.2.2 코코아 터치 프레임워크 : 코코아 터치 프레임워크는 애플 환경에서 터치 기반의 애플리케이션을 제작하기 위한 도구들의 모음입니다. 이들 도구 중에서 가장 대표적인 것이 바로 유저 인터페이스인데요, 다양한 앱들이 서로 다른 내용과 기능에도 불구하고 화면 구성에서 일정 수준의 유사성을 갖는 것은 이들이 모두 동일한 유저 인터페이스 도구를 이용하여 화면을 구현하기 때문입니다. 이뿐만이 아닙니다. 웹과 관련된 기술을 처리하기 위한 도구, 아이폰의 주소록을 사용하기 위한 도구, 사용자에게 특정 시간에 알림을 제공하기 위한 도구 등 굉장히 다양한 도구들이 코코아 처피 프레임워크를 통해 제공됩니다. 

이 도구들은 용도에 따라 여러 개의 하위 프레임워크로 나누어집니다. 서두에 잠깐 언급된 적이 있는 프레임워크들이 바로 이에 해당하는 녀석들입니다. 코코아 터치 프레임워크를 이루는 주요 프레임워크에는 다음과 같은 것들이 있습니다. 

※ Foundation Framework : 애플리케이션의 핵심 객체와 네트워크, 문자열 처리 등의 서비스를 제공하는 프레임워크 

※ UIKit Framework : 아이폰이나 아이패드, 애플 와치나 애플TV 등에서 실행되는 애플리케이션의 유저 인터페이스를 제공하는 프레임워크 

※ GameKit Framework : 게임 실행 시 게임 센터를 연동하거나 근거리 P2P 연결을 제공해주는 프레임워크

※ iAd Framework : 앱 내에 베너 형태 또는 팝업 형태의 광고를 삽입할 수 있도록 해주는 광고 관련 프레임워크

※ MapKit Framework : 위치 정보나 지도 관련 서비스를 이용할수 있도록 해 주는 프레임워크

※ Address Book UI Framework : 번들 애플리케이션으로 제공되는 주소록 앱의 인터페이스와 기능을 커스텀 앱 내에서도 그대로 사용할수 있도록 해주는 프레임 워크

※ EventKit UI Framework : 이벤트 처리에 필요한 유저 인터페이스를 제공하는 프레임워크

※ Message UI Framework : 번들 애플리케이션으로 제공되는 메시지 앱의 인터페이스와 기능을 커스텀 앱 내에서도 그대로 사용할수 있도록 제공하는 프레임워크

※ UserNotifications Framework : 사용자 알림을 처리하기 위해 필요한 객체들을 제공하는 프레임워크

※ WebKit Framework : 웹 관련 기능을 구현하기 위해 필요한 객체들을 제공하는 프레임워크 


이들 중 대부분은 앱을 만드는 데에 필수 요소가 아닙니다. 예를 들어 앱 안에 광고를 실을수 있게 지원하는 도구인 iAd 프레임워크는 개발자가 앱 내부에 광고를 노출할 생각이 없다면 필요하지 않은 도구입니다. 마찬가지로 앱 내에서 위치 기반 서비스를 사용하지 않는다면 맵킷 프레임워크도 필요 없을테죠. 따라서 Xcode는 이들 프레임워크가 앱 프로젝트에 기본적으로 필요한 항목이 아니라고 판단하고 사용을 위해서는 별도의 설정과정을 거치도록 설정해 두었습니다. 

하지만 위 프레임워크 목록 중에서 두 개의 프레임워크는 다릅니다. 코코아 터치 프레임워크의 양대 산맥이라고 불리는 UIKit 프레임워크와 파운데이션 프레임워크는 그 자체만으로도 굉장히 방대한 내용을 담고 있을 뿐만 아니라 앱을 개발하기 위해 반드시 필요한 도구들이라서 이들을 사용하지 않고 제대로 기능을 갖춘 앱을 만들기란 거의 불가능합니다. 그래서 이들 두 프레임워크만 따로 모아 코코아 터치 프레임워크를 이르는 주 프레임워크로 간주합니다. 

파운데이션 프레임워크는 기본 데이터 형식, 컬렉션 및 앱의 기본 객체와 기반 기술을 제공하는 역할을 하며 UIKit프레임워크는 유저 인터페이스 도구를 통해 iOS 앱을 구현할수 있는 방법을 제공합니다. 쉽게 생각해서 iOS 앱으로서의 특징적인 부분은 UIKit 프레임워크가, 내부적으로 돌아가는 기능은 파운데이션 프레임워크가 처리한다고 보면 됩니다. 이 책의 나머지 부분에서 우리가 학습할 내용은 바로 이 두 개의 프레임워크를 바탕으로 하여 앱을 만들어 가는 과정입니다. 




※ 코코아 터치 프레임워크와 코코아 프레임워크 : 코코아 터치 프레임워크를 공부하다 보면 코코아 환경 또는 코코아 프레임워크라는 용어를 접하게 됩니다. 코코아 터치 프레임워크의 오타가 아닐까 의심될 정도로 비슷한 이름을 가진 이 프레임워크는 사실 코코아 터치 프레임워크와 불가분의 관계를 맺고 있습니다. 코코아 터치 프레임워크는 코코아 프레임워크를 바탕으로 만들어 졌으니까요. 

본래 애플에서 판매하던 하드웨어는 매킨토시라 불리던 데스크톱이 전부였는데 이 데스크톱의 운영 체제인 OS X에서 실행되는 애플리케이션을 개발하기 위해 사용되던 프레임워크가 바로 코코아 프레임워크였습니다. 우리가 사용하는 사파리, Xcode 등 많은 애플리케이션이 코코아 프레임워크를 이용하여 만들어졌죠. 대표적인 증거가 윈도우 왼쪽의 제어 버튼입니다. 맥에서 실행되는 대부분의 애플리케이션에는 왼쪽 상단에 세 개의 윈도우 제어 버튼이 표시되는데, 이 버튼은 우리가 직접 구현해주지 않아도 코코아 프레임워크에서 제공하는 NSWindow라는 객체를 사용하여 윈도우를 생성하면 자동으로 추가되는 기능입니다. 

코코아 터치 프레임워크는 이같은 코코아 프레임워크를 기반으로 탄생했습니다. 이름에서도 짐작할 수 있듯이 코코아와 코코아 터치 두 프레임워크는 현재에도 많은 부분을 공유합니다. 완전히 서로 별개의 프레임워크가 아니라는 뜻입니다. 

코코아 터치 프레임워크와 마찬가지로 코코아 프레임워크 역시 양대 산맥으로 불리는 두 가지 핵심 프레임워크를 포함합니다. 앞에서도 살펴본 파운데이션 프레임워크와 애플리케이션 킷 프레임워크(Application Kit Framework)죠. 애플리케이션 킷 프레임워크는 데스크롭용 유저 인터페이스를 담당하는 역할로 줄여서 앱킷(AppKit)프레임워크라고 불리기도 합니다. 

코코아나 코코아 터치 양쪽에서 사용되는 파운데이션 프레임워크는 동일합니다. 공통 요소이죠. 하지만 유저 인터페이스는 서로 다릅니다. 데스크톱용 인터페이스와 터치 환경용 인터페이스는 서로 호환해서 사용하기 어려운 탓에 코코아에서 사용되는 앱킷 프레임워크는 코코아 터치 프레임워크에서 UIKit 프레임워크로 대체되었습니다. 전술하였듯이 UIKit 프레임워크는 터치 환경에 적합한 유저 인터페이스와 터치나 지문 인식, 각종 센서 등 사용자 액션 처리 요소를 구현한 프레임워크입니다. 아래 그림은 코코아 프레임워크와 코코아 터치 프레임워크의 핵심 구성을 비교하여 보여줍니다. 

현시점에서 맥 데스크톱용 애플리케이션의 실행에 사용되는 프레임워크는 코코아 프레임워크이지만 이를 제외한 나머지 모든 애플 기기는 코코아 터치 프레임워크를 사용합니다. 청출어람이죠. 코코아와 코코아 터치 프레임워크가 사용되고 있는 운영 체제 및 디바이스를 살펴보면 다음과 같습니다. 


표2-1 OS와 프레임워크
OS		기기		필요한 프레임워크
macOS		맥북, 아이맥 등	코코아 프레임워크
iOS		아이폰, 아이패드	코코아 터치 프레임워크
watchOS		애플 와치		코코아 터치 프레임워크
tvOS		애플 TV		코코아 터치 프레임워크





※ 프레임워크의 계층 관계 : 코코아 프레임워크나 코코아 터치 프레임워크를 구성하는 작은 단위의 프레임워크들은 계층 관계를 이룹니다. 하위 계층의 프레임워크에서 상위 계층의 프레임워크까지 나열되어 있죠. 이 중에서 우리가 주로 프로그래밍에 사용하는 것은 상위 레벨의 프레임워크들로 앞서 살펴본 여러 프레임워크들이 대부분 상위 계층에 해당합니다. 여기서 말하는 상위 계층이란 보다 사용자에 가깝고 구체적으로 구현되어 있어서 애플리케이션을 만들 때 가장 손쉽게 사용할수 있는 형태를 말합니다. 이것을 구체화되어 있다라고 표현하죠. 

반면 하위 계층에 속한 프레임워크는 추상적이면서 하드웨어 쪽에 더 가깝기 때문에 우리가 다루기에는 다소 번거롭습니다. 똑같은 기능을 구현하더라도 상위 프레임워크를 사용하여 만드는 것보다 몇 배로 오래 걸리고 작은 기능과 구성 하나하나까지 모두 제어해 주어야 합니다. 하지만 그만큼 범용적이고 원천적이기 때문에 다양한 형태로 확장이 가능하다는 장점이 있습니다. 

여러분의 집에 새로운 문을 달아야 한다고 생각해봅시다. 필요한 것은 문짝과 경첩, 그리고 문손잡이 등입니다. 이런 부품을 직접 판매하는 가게를 이용한다면 우리는 이 부품을 사용하여 적절히 조립하고 못과 망치로 문틀에 고정하는 것만으로 간단하게 새로운 문을 달 수 있습니다. 이것이 상위 프레임워크입니다. 

만약 하위 프레임워크에 해당하는 목공소나 철공소를 직접 이용한다면 이와 같은 부품을 제공받을 수는 없습니다. 단지 문짝을 만들수 있도록 합판과 목공 기계, 그리고 접합제나 페인트와 같은 도구들을 사용할수 있을 뿐입니다. 따라서 이런 도구를 이용하여 우리는 직접 문을 만들어내고 철판을 프레스로 찍어내어 경첩을 만들어야 합니다. 무척 번거롭고 힘든 과정이지만 대신 규격이 없고 규체도 없기 때문에 우리가 원하는 대로 자유롭게 만들어 낼 수 있습니다. 

대부분의 경우에서 상위 프레임워크는 하위 프레임워크에 의존적입니다. 다시 말해 상위 프레임워크에 필요한 기능을 모두 직접 구현하는 것이 아니라 하위 프레임워크를 통해 구현된 기능에 보다 구체적인 기능만 덧붙여 내놓는 식입니다. 예를 들어 앞서 잠깐 살펴본 파운데이션 프레임워크는 내부적으로 코어 파운데이션이라는 하위 계층의 프레임워크에 의존하고 있습니다. 단지 코어 파운데이션 프레임워크가 구현한 기능을 객체지향 버전에 맞게 만들어 주고 있을 따름이죠. 

하지만 이 과정은 내부적으로 처리되기 때문에 우리는 하위 프레임워크에 직접 접근할 필요가 없습니다. 단순히 상위 프레임워크가 제공하는 기능을 이용하면 될 뿐입니다. 문짝이 어떤 과정을 거쳐 만들어지는지 알지 못해도 누군가에 의해 만들어진 문짝을 바로 사용할수 있는 것과 같습니다. 또한 상위 프레임워크와 하위 프레임워크 사이에 어떤 복잡한 처리가 오가는지를 이해할 필요도 없습니다. 덕분에 우리는 컴퓨터나 하드웨어 구조에 대한 자세한 이해 없이도 상위 프레임워크만 이용하여 원하는 결과를 손쉽게 구현할수 있습니다. 

하지만 애플리케이션을 개발할 때 전적으로 상위 계층의 프레임워크만 사용하는 것은 아닙니다. 경우에 따라 상위 레벨의 프레임워크가 제공하지 않는 기능을 구현해야 할때도 있는데 이때에는 하위 레벨의 프레임워크를 사용하여 원하는 기능을 직접 구현하기도 합니다. 따라서 애플리케이션의 기능을 확장하려면 하위 프레임워크에 대한 구조와 사용 방법까지 충분히 숙지하고 있어야 합니다. 

이제 프레임워크 계층이 어떻게 구성되어 있는지 살펴봅시다. iOS의 프레임워크의 계층 구조는 다음과 같습니다. 

*흔히들 개발자가 컴퓨터에 대해 속속들이 굉장히 잘 알고 있다고 생각하는 경향이 있는데 개발자들 중에서도 대부분은 이처럼 상위 프레임워크만 사용하여 애플리케이션을 개발하기 때문에 내부적으로 어떤 과정을 거쳐 기능이 만들어지는지 속속들이 알지 못하는 경우도 허다합니다. 그냥 이렇게 하니까 이런 결과가 나오더라 하는 식인거죠. 




※ 코어 OS 계층 
코어 OS 계층에는 커널, 파일 시스템, 네트워크, 보안, 전원 관리, 디바이스 드라이버등이 포함되어 있습니다. iOS가 운영 체제로서 기능을 하기 위한 핵심적인 영역이라고 할 수 있습니다. 


※ 코어 서비스 계층
이 계층에 속한 프레임워크들은 문자열 처리, 데이터 집합 관리, 네트워크, 주소록 관리, 환경 설정 등 핵심적인 서비스들을 제공합니다. 또한 GPS 나침반 ,가속도 센서나 자이로스코프 센서와 같이 디바이스의 하드웨어 특성에 기반한 서비스도 제공합니다. 이 계층에 포함된 프레임워크 중 대표적인 것으로 파운데이션 프레임워크를 들수 있으며 파운데이션 프레임워크가 내부적으로 의존하는 코어 파운데이션 프레임워크 역시 이 계층에 포함되어 있습니다. 이 밖에도 코어 로케이션(Core Location) 코어 모션(Core Motion), 코어 애니메이션(Core Animation)등의 프레임워크가 포함되어 있으며 특히 애플 환경에서 데이터를 저장하기 위해 사용되는 코어 데이터(Core Data)프레임워크도 이 계층에 포함되어 있습니다. 


※미디어 계층
여기에 속한 프레임워크들은 그보다 하위인 코어 서비스 계층에 의존적이며 상위 계층인 코코아 터치 계층에 그래픽 관련 서비스나 멀티미디어 관련 서비스를 제공합니다. 대표적인 프레임워크로 코어 그래픽스, 코어 텍스트, 코어 오디오, 코어 애니메이션, AV파운데이션 등이 있습니다. 쉽게 생각해서 mp4와 같은 비디오 파일을 아이폰에서 재생할때 미디어 계층이 관여한다고 보면 됩니다 


※ 코코아 터치 계층
코코아 터치 계층은 애플리케이션 프레임워크 계층이라고도 불리며 애플리케이션을 직접 지원하는 역할을 담당합니다. iOS에 설치되고 실행되는 모든 애플리케이션은 코코아 터치 계층에서 제공하는 여러 가지 기술이나 서비스를 이용하여 기능을 구현하고 동작합니다.코코아 터치 프레임워크의 양대 산맥인 UIKit 프레임워크가 이 계층에 속해 있으며 앞에서 살펴본 GameKit, Map Kit등의 프레임워크들 역시 여기에 속합니다. 

iOS의 프레임워크 계층은 하드웨어와 애플리케이션 사이를 중계하는 위치에 자리합니다. 프레임워크 계층 중에서 의미상 가장 아래에 위치한 코어 OS 계층은 개념적으로 하드웨어와 연결되어 있으며 최상단에 위치한 코코아 터치 계층은 애플리케이션과 연결됩니다. 

하드웨어와 직접 커뮤니케이션할수 없는 애플리케이션이 몇 줄의 코드를 통해 하드웨어 장치를 구동할수 있는 겉은 이같은 프레임워크 계층을 통해 간접적으로 하드웨어를 제어할 수 있기 때문입니다. 예를 들어 디바이스에 장착된 카메라 모듈을 사용하기 위해서는 카메라 장치에 대한 디바이스 드라이버와 하드웨어에 대한 제어 정보를 모두 알아야 하지만 iOS에서는 이같은 제어 처리를 코어 OS 계층이 모두 담당하는 까닭에 애플리케이션은 카메라 하드웨어에 대한 아무런 정보 없이도 카메라를 다룰수 있습니다. 

*대부분의 소프트웨어는 하드웨어와 직접통신 하지 않지만 일부 분야에서는 하드웨어와 직접 통신하는 프로그램 코드를 작성하기도 합니다. 이를 임베디드 프로그래밍이라고 합니다. 임베디드 프로그래밍에서는 하드웨어와 직접 통신하고 제어하기 위해 부품의 명세서나 데이터 시트가 필요하고 이를 이용하여 적합한 전기 신호를 만들어서 하드웨어를 제어하게 됩니다.

코코아 터치 프레임워크의 주요 프레임워크들은 자신들에게 속해있는 객체의 이름에 특정 접두어를 붙이는 경향이 있습니다. 이 접두어는 프레임워크마다 다르므로 우리는 객체의 이름을 통해 어느 프레임워크에 속해 있는지 손쉽게 파악할수 있습니다. 다음 표는 주요 프레임워크에서 사용하는 접두어와 여기에 속한 대표적인 객체들을 보여주고 있습니다. 


표2-2 프레임워크와 접두어, 그리고 주요 객체들
프레임워크			접두어	주요 객체
Foundation Framework		NS	NSDate, NSData, NSURL, NSString, NSLog, NSArray, NSRange, NSSearchPathForDirectoriesInDomains, NSDictionary, 					NSException
UIKit Framework			UI	UIApplication, UIViewCOntroller, UIView, UIButton, UIBarButtonItem, UIImageView, UIControl, UIResponder
UserNotifications Framework		UN	UNNotification, UNNotificationContent, UNNotificationRequest, UNNotificationResponse, UNNotificationTrigger
MapKit Framework			MK	MKAnnotationView, MKCircle, MKDirections, MKLocalSearch, MKMapItem, MKMapShapshot, MKMapView, MKOverlayView
Core Foundation			CF	CFBundle, CFData, CFDate, CFError ,CFBoolean, CFRunLoop, CFSocket, CFPlugin, CFXMLParser, CFUUID, CFUserNotification
Core Graphics			CG	CGColor, CGContext, CGImage, CGGradient, CGLayer, CGPoint, CGRed, CGSize, CGAffineTransform, CGPattern, CGPath
AVFoundation 			AV	AVAssetReader, AVAssetResourceLoadingRequest, AVAssetInputGroup, AVAudioConverter, AVAudioEngine, AVAudioBuffer, 					AVAudioUnit